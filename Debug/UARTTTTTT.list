
UARTTTTTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c91c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003258  0801caf0  0801caf0  0002caf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fd48  0801fd48  00030a40  2**0
                  CONTENTS
  4 .ARM          00000008  0801fd48  0801fd48  0002fd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fd50  0801fd50  00030a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801fd50  0801fd50  0002fd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fd58  0801fd58  0002fd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a40  20000000  0801fd5c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ac28  20000a40  0802079c  00030a40  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b668  0802079c  0003b668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a40  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043daa  00000000  00000000  00030a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000086d1  00000000  00000000  0007481a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021e0  00000000  00000000  0007cef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002070  00000000  00000000  0007f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036e3b  00000000  00000000  00081140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034d6f  00000000  00000000  000b7f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e49a  00000000  00000000  000eccea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020b184  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5a8  00000000  00000000  0020b1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a40 	.word	0x20000a40
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801cad4 	.word	0x0801cad4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a44 	.word	0x20000a44
 800020c:	0801cad4 	.word	0x0801cad4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b96e 	b.w	8000ef0 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	468c      	mov	ip, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8083 	bne.w	8000d42 <__udivmoddi4+0x116>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4617      	mov	r7, r2
 8000c40:	d947      	bls.n	8000cd2 <__udivmoddi4+0xa6>
 8000c42:	fab2 f282 	clz	r2, r2
 8000c46:	b142      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	f1c2 0020 	rsb	r0, r2, #32
 8000c4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c50:	4091      	lsls	r1, r2
 8000c52:	4097      	lsls	r7, r2
 8000c54:	ea40 0c01 	orr.w	ip, r0, r1
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbbc f6f8 	udiv	r6, ip, r8
 8000c64:	fa1f fe87 	uxth.w	lr, r7
 8000c68:	fb08 c116 	mls	r1, r8, r6, ip
 8000c6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c70:	fb06 f10e 	mul.w	r1, r6, lr
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 8119 	bcs.w	8000eb4 <__udivmoddi4+0x288>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8116 	bls.w	8000eb4 <__udivmoddi4+0x288>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	443b      	add	r3, r7
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8105 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	f240 8102 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	443c      	add	r4, r7
 8000cb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbc:	eba4 040e 	sub.w	r4, r4, lr
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b902      	cbnz	r2, 8000cd6 <__udivmoddi4+0xaa>
 8000cd4:	deff      	udf	#255	; 0xff
 8000cd6:	fab2 f282 	clz	r2, r2
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d150      	bne.n	8000d80 <__udivmoddi4+0x154>
 8000cde:	1bcb      	subs	r3, r1, r7
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	2601      	movs	r6, #1
 8000cea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cee:	0c21      	lsrs	r1, r4, #16
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0xe2>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	f200 80e9 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1ac9      	subs	r1, r1, r3
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x10c>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x10a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80d9 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e7bf      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x12e>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80b1 	beq.w	8000eae <__udivmoddi4+0x282>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x1cc>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0x140>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80b8 	bhi.w	8000edc <__udivmoddi4+0x2b0>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	468c      	mov	ip, r1
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0a8      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7e:	e7a5      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f603 	lsr.w	r6, r0, r3
 8000d88:	4097      	lsls	r7, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d92:	40d9      	lsrs	r1, r3
 8000d94:	4330      	orrs	r0, r6
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d9c:	fa1f f887 	uxth.w	r8, r7
 8000da0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f108 	mul.w	r1, r6, r8
 8000dac:	4299      	cmp	r1, r3
 8000dae:	fa04 f402 	lsl.w	r4, r4, r2
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x19c>
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dba:	f080 808d 	bcs.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 808a 	bls.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	443b      	add	r3, r7
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b281      	uxth	r1, r0
 8000dcc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd8:	fb00 f308 	mul.w	r3, r0, r8
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x1c4>
 8000de0:	1879      	adds	r1, r7, r1
 8000de2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de6:	d273      	bcs.n	8000ed0 <__udivmoddi4+0x2a4>
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d971      	bls.n	8000ed0 <__udivmoddi4+0x2a4>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4439      	add	r1, r7
 8000df0:	1acb      	subs	r3, r1, r3
 8000df2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df6:	e778      	b.n	8000cea <__udivmoddi4+0xbe>
 8000df8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000e00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e04:	431c      	orrs	r4, r3
 8000e06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e16:	431f      	orrs	r7, r3
 8000e18:	0c3b      	lsrs	r3, r7, #16
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fa1f f884 	uxth.w	r8, r4
 8000e22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	fa02 f206 	lsl.w	r2, r2, r6
 8000e34:	fa00 f306 	lsl.w	r3, r0, r6
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x220>
 8000e3a:	1861      	adds	r1, r4, r1
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d248      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e42:	458a      	cmp	sl, r1
 8000e44:	d946      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	4421      	add	r1, r4
 8000e4c:	eba1 010a 	sub.w	r1, r1, sl
 8000e50:	b2bf      	uxth	r7, r7
 8000e52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45b8      	cmp	r8, r7
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x24a>
 8000e66:	19e7      	adds	r7, r4, r7
 8000e68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e6c:	d22e      	bcs.n	8000ecc <__udivmoddi4+0x2a0>
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d92c      	bls.n	8000ecc <__udivmoddi4+0x2a0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4427      	add	r7, r4
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba7 0708 	sub.w	r7, r7, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454f      	cmp	r7, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	4649      	mov	r1, r9
 8000e88:	d31a      	bcc.n	8000ec0 <__udivmoddi4+0x294>
 8000e8a:	d017      	beq.n	8000ebc <__udivmoddi4+0x290>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x27a>
 8000e8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e92:	eb67 0701 	sbc.w	r7, r7, r1
 8000e96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e9a:	40f2      	lsrs	r2, r6
 8000e9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000ea0:	40f7      	lsrs	r7, r6
 8000ea2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea6:	2600      	movs	r6, #0
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e70b      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fd      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ebc:	4543      	cmp	r3, r8
 8000ebe:	d2e5      	bcs.n	8000e8c <__udivmoddi4+0x260>
 8000ec0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7df      	b.n	8000e8c <__udivmoddi4+0x260>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e7d2      	b.n	8000e76 <__udivmoddi4+0x24a>
 8000ed0:	4660      	mov	r0, ip
 8000ed2:	e78d      	b.n	8000df0 <__udivmoddi4+0x1c4>
 8000ed4:	4681      	mov	r9, r0
 8000ed6:	e7b9      	b.n	8000e4c <__udivmoddi4+0x220>
 8000ed8:	4666      	mov	r6, ip
 8000eda:	e775      	b.n	8000dc8 <__udivmoddi4+0x19c>
 8000edc:	4630      	mov	r0, r6
 8000ede:	e74a      	b.n	8000d76 <__udivmoddi4+0x14a>
 8000ee0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee4:	4439      	add	r1, r7
 8000ee6:	e713      	b.n	8000d10 <__udivmoddi4+0xe4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	443c      	add	r4, r7
 8000eec:	e724      	b.n	8000d38 <__udivmoddi4+0x10c>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <vApplicationGetIdleTaskMemory+0x30>)
 8000f0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000a5c 	.word	0x20000a5c
 8000f24:	20000ab0 	.word	0x20000ab0

08000f28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d013      	beq.n	8000f68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00b      	beq.n	8000f68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f50:	e000      	b.n	8000f54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f9      	beq.n	8000f52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// это же дебаг
int _write(int file, char *ptr,int len){
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
	int i=0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e009      	b.n	8000fa0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ffc7 	bl	8000f28 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbf1      	blt.n	8000f8c <_write+0x16>
	return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b0b8      	sub	sp, #224	; 0xe0
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	memset(gps.day,0,sizeof(gps));
 8000fba:	221b      	movs	r2, #27
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	488d      	ldr	r0, [pc, #564]	; (80011f4 <main+0x240>)
 8000fc0:	f014 f82c 	bl	801501c <memset>
	// ZDA-38;RMC-68
	 //включение ZDA
	 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 8000fc4:	4b8c      	ldr	r3, [pc, #560]	; (80011f8 <main+0x244>)
 8000fc6:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000fca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 8000fd0:	4a8a      	ldr	r2, [pc, #552]	; (80011fc <main+0x248>)
 8000fd2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd8:	c303      	stmia	r3!, {r0, r1}
 8000fda:	801a      	strh	r2, [r3, #0]
	 //отключение ZDA
	 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
	 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

	 //отключение остального
	 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8000fdc:	4b88      	ldr	r3, [pc, #544]	; (8001200 <main+0x24c>)
 8000fde:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 8000fe8:	4a86      	ldr	r2, [pc, #536]	; (8001204 <main+0x250>)
 8000fea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fee:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff0:	c303      	stmia	r3!, {r0, r1}
 8000ff2:	801a      	strh	r2, [r3, #0]

	 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 8000ff4:	4b84      	ldr	r3, [pc, #528]	; (8001208 <main+0x254>)
 8000ff6:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 8001000:	4a82      	ldr	r2, [pc, #520]	; (800120c <main+0x258>)
 8001002:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001006:	ca07      	ldmia	r2, {r0, r1, r2}
 8001008:	c303      	stmia	r3!, {r0, r1}
 800100a:	801a      	strh	r2, [r3, #0]

	 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 800100c:	4b80      	ldr	r3, [pc, #512]	; (8001210 <main+0x25c>)
 800100e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8001012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001014:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 8001018:	4a7e      	ldr	r2, [pc, #504]	; (8001214 <main+0x260>)
 800101a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800101e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001020:	c303      	stmia	r3!, {r0, r1}
 8001022:	801a      	strh	r2, [r3, #0]

	 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 8001024:	4b7c      	ldr	r3, [pc, #496]	; (8001218 <main+0x264>)
 8001026:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800102a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 8001030:	4a7a      	ldr	r2, [pc, #488]	; (800121c <main+0x268>)
 8001032:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001036:	ca07      	ldmia	r2, {r0, r1, r2}
 8001038:	c303      	stmia	r3!, {r0, r1}
 800103a:	801a      	strh	r2, [r3, #0]

	 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 800103c:	4b78      	ldr	r3, [pc, #480]	; (8001220 <main+0x26c>)
 800103e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 8001048:	4a76      	ldr	r2, [pc, #472]	; (8001224 <main+0x270>)
 800104a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800104e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001050:	c303      	stmia	r3!, {r0, r1}
 8001052:	801a      	strh	r2, [r3, #0]
	 //отключение RMC на всякий
	 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
	 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

	 //включение RMC
	 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 8001054:	4b74      	ldr	r3, [pc, #464]	; (8001228 <main+0x274>)
 8001056:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800105a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 8001060:	4a72      	ldr	r2, [pc, #456]	; (800122c <main+0x278>)
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	ca07      	ldmia	r2, {r0, r1, r2}
 8001068:	c303      	stmia	r3!, {r0, r1}
 800106a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f001 fd4b 	bl	8002b06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f8e6 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 fa4c 	bl	8001510 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001078:	f000 fa08 	bl	800148c <MX_USART6_UART_Init>
  MX_UART7_Init();
 800107c:	f000 f9d6 	bl	800142c <MX_UART7_Init>
  MX_RTC_Init();
 8001080:	f000 f978 	bl	8001374 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //ON ZDA
  HAL_UART_Transmit(&huart7,(uint8_t*) MESZDA, 16, 1000);
 8001084:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	2210      	movs	r2, #16
 800108e:	4868      	ldr	r0, [pc, #416]	; (8001230 <main+0x27c>)
 8001090:	f005 f814 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001094:	2064      	movs	r0, #100	; 0x64
 8001096:	f001 fd63 	bl	8002b60 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONZDA, 10, 1000);
 800109a:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	220a      	movs	r2, #10
 80010a4:	4862      	ldr	r0, [pc, #392]	; (8001230 <main+0x27c>)
 80010a6:	f005 f809 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 80010aa:	2064      	movs	r0, #100	; 0x64
 80010ac:	f001 fd58 	bl	8002b60 <HAL_Delay>

  // OFF protokol
  HAL_UART_Transmit(&huart7,(uint8_t*) MESGGA, 16, 1000);
 80010b0:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80010b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b8:	2210      	movs	r2, #16
 80010ba:	485d      	ldr	r0, [pc, #372]	; (8001230 <main+0x27c>)
 80010bc:	f004 fffe 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 80010c0:	2064      	movs	r0, #100	; 0x64
 80010c2:	f001 fd4d 	bl	8002b60 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGGA, 10, 1000);
 80010c6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	220a      	movs	r2, #10
 80010d0:	4857      	ldr	r0, [pc, #348]	; (8001230 <main+0x27c>)
 80010d2:	f004 fff3 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f001 fd42 	bl	8002b60 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGLL, 16, 1000);
 80010dc:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80010e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e4:	2210      	movs	r2, #16
 80010e6:	4852      	ldr	r0, [pc, #328]	; (8001230 <main+0x27c>)
 80010e8:	f004 ffe8 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 80010ec:	2064      	movs	r0, #100	; 0x64
 80010ee:	f001 fd37 	bl	8002b60 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGLL, 10, 1000);
 80010f2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	220a      	movs	r2, #10
 80010fc:	484c      	ldr	r0, [pc, #304]	; (8001230 <main+0x27c>)
 80010fe:	f004 ffdd 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001102:	2064      	movs	r0, #100	; 0x64
 8001104:	f001 fd2c 	bl	8002b60 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSA, 16, 1000);
 8001108:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800110c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001110:	2210      	movs	r2, #16
 8001112:	4847      	ldr	r0, [pc, #284]	; (8001230 <main+0x27c>)
 8001114:	f004 ffd2 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001118:	2064      	movs	r0, #100	; 0x64
 800111a:	f001 fd21 	bl	8002b60 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSA, 10, 1000);
 800111e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	220a      	movs	r2, #10
 8001128:	4841      	ldr	r0, [pc, #260]	; (8001230 <main+0x27c>)
 800112a:	f004 ffc7 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f001 fd16 	bl	8002b60 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSV, 16, 1000);
 8001134:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113c:	2210      	movs	r2, #16
 800113e:	483c      	ldr	r0, [pc, #240]	; (8001230 <main+0x27c>)
 8001140:	f004 ffbc 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001144:	2064      	movs	r0, #100	; 0x64
 8001146:	f001 fd0b 	bl	8002b60 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSV, 10, 1000);
 800114a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	220a      	movs	r2, #10
 8001154:	4836      	ldr	r0, [pc, #216]	; (8001230 <main+0x27c>)
 8001156:	f004 ffb1 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 800115a:	2064      	movs	r0, #100	; 0x64
 800115c:	f001 fd00 	bl	8002b60 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESVTG, 16, 1000);
 8001160:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	2210      	movs	r2, #16
 800116a:	4831      	ldr	r0, [pc, #196]	; (8001230 <main+0x27c>)
 800116c:	f004 ffa6 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001170:	2064      	movs	r0, #100	; 0x64
 8001172:	f001 fcf5 	bl	8002b60 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONVTG, 10, 1000);
 8001176:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	220a      	movs	r2, #10
 8001180:	482b      	ldr	r0, [pc, #172]	; (8001230 <main+0x27c>)
 8001182:	f004 ff9b 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001186:	2064      	movs	r0, #100	; 0x64
 8001188:	f001 fcea 	bl	8002b60 <HAL_Delay>

  //отключение и включение RMC на всякий
  HAL_UART_Transmit(&huart7,(uint8_t*) MESRMC, 16, 1000);
 800118c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001194:	2210      	movs	r2, #16
 8001196:	4826      	ldr	r0, [pc, #152]	; (8001230 <main+0x27c>)
 8001198:	f004 ff90 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 800119c:	2064      	movs	r0, #100	; 0x64
 800119e:	f001 fcdf 	bl	8002b60 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONRMC, 10, 1000);
 80011a2:	f107 011c 	add.w	r1, r7, #28
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	220a      	movs	r2, #10
 80011ac:	4820      	ldr	r0, [pc, #128]	; (8001230 <main+0x27c>)
 80011ae:	f004 ff85 	bl	80060bc <HAL_UART_Transmit>
  HAL_Delay(100);
 80011b2:	2064      	movs	r0, #100	; 0x64
 80011b4:	f001 fcd4 	bl	8002b60 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <main+0x280>)
 80011ba:	463c      	mov	r4, r7
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011ca:	463b      	mov	r3, r7
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 ffd4 	bl	800817c <osThreadCreate>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a18      	ldr	r2, [pc, #96]	; (8001238 <main+0x284>)
 80011d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011da:	f006 ffb8 	bl	800814e <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 80011de:	2201      	movs	r2, #1
 80011e0:	4916      	ldr	r1, [pc, #88]	; (800123c <main+0x288>)
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <main+0x27c>)
 80011e4:	f005 f86c 	bl	80062c0 <HAL_UART_Receive_IT>

	  //HAL_UART_Receive(&huart7, (uint8_t*)RXstr, MESsize, 1000);
	  //HAL_UART_Transmit(&huart6, (uint8_t*)str, 8, 1000);
	  HAL_Delay(1000);
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	f001 fcb8 	bl	8002b60 <HAL_Delay>
	  HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 80011f0:	e7f5      	b.n	80011de <main+0x22a>
 80011f2:	bf00      	nop
 80011f4:	20004c30 	.word	0x20004c30
 80011f8:	0801cafc 	.word	0x0801cafc
 80011fc:	0801cb0c 	.word	0x0801cb0c
 8001200:	0801cb18 	.word	0x0801cb18
 8001204:	0801cb28 	.word	0x0801cb28
 8001208:	0801cb34 	.word	0x0801cb34
 800120c:	0801cb44 	.word	0x0801cb44
 8001210:	0801cb50 	.word	0x0801cb50
 8001214:	0801cb60 	.word	0x0801cb60
 8001218:	0801cb6c 	.word	0x0801cb6c
 800121c:	0801cb7c 	.word	0x0801cb7c
 8001220:	0801cb88 	.word	0x0801cb88
 8001224:	0801cb98 	.word	0x0801cb98
 8001228:	0801cba4 	.word	0x0801cba4
 800122c:	0801cbb4 	.word	0x0801cbb4
 8001230:	20004c50 	.word	0x20004c50
 8001234:	0801cbc0 	.word	0x0801cbc0
 8001238:	20004c4c 	.word	0x20004c4c
 800123c:	20000cec 	.word	0x20000cec

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0b4      	sub	sp, #208	; 0xd0
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800124a:	2230      	movs	r2, #48	; 0x30
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f013 fee4 	bl	801501c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	2284      	movs	r2, #132	; 0x84
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f013 fed5 	bl	801501c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001272:	f002 ffc3 	bl	80041fc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <SystemClock_Config+0x12c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a3c      	ldr	r2, [pc, #240]	; (800136c <SystemClock_Config+0x12c>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <SystemClock_Config+0x12c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128e:	4b38      	ldr	r3, [pc, #224]	; (8001370 <SystemClock_Config+0x130>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a37      	ldr	r2, [pc, #220]	; (8001370 <SystemClock_Config+0x130>)
 8001294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b35      	ldr	r3, [pc, #212]	; (8001370 <SystemClock_Config+0x130>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80012a6:	2309      	movs	r3, #9
 80012a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012b4:	2301      	movs	r3, #1
 80012b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012c8:	2319      	movs	r3, #25
 80012ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80012ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80012d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012dc:	2309      	movs	r3, #9
 80012de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 ffe8 	bl	80042bc <HAL_RCC_OscConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80012f2:	f001 f9bb 	bl	800266c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012f6:	f002 ff91 	bl	800421c <HAL_PWREx_EnableOverDrive>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001300:	f001 f9b4 	bl	800266c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001316:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800131a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800131e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001326:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800132a:	2106      	movs	r1, #6
 800132c:	4618      	mov	r0, r3
 800132e:	f003 fa69 	bl	8004804 <HAL_RCC_ClockConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001338:	f001 f998 	bl	800266c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 800133c:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001340:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001346:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001348:	2300      	movs	r3, #0
 800134a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800134c:	2300      	movs	r3, #0
 800134e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4618      	mov	r0, r3
 8001356:	f003 fc5d 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001360:	f001 f984 	bl	800266c <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	37d0      	adds	r7, #208	; 0xd0
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000

08001374 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <MX_RTC_Init+0xb0>)
 8001392:	4a25      	ldr	r2, [pc, #148]	; (8001428 <MX_RTC_Init+0xb4>)
 8001394:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <MX_RTC_Init+0xb0>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <MX_RTC_Init+0xb0>)
 800139e:	227f      	movs	r2, #127	; 0x7f
 80013a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <MX_RTC_Init+0xb0>)
 80013a4:	22ff      	movs	r2, #255	; 0xff
 80013a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <MX_RTC_Init+0xb0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_RTC_Init+0xb0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_RTC_Init+0xb0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013ba:	481a      	ldr	r0, [pc, #104]	; (8001424 <MX_RTC_Init+0xb0>)
 80013bc:	f004 f81a 	bl	80053f4 <HAL_RTC_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80013c6:	f001 f951 	bl	800266c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 80013ca:	2317      	movs	r3, #23
 80013cc:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 59;
 80013ce:	233b      	movs	r3, #59	; 0x3b
 80013d0:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	2200      	movs	r2, #0
 80013e4:	4619      	mov	r1, r3
 80013e6:	480f      	ldr	r0, [pc, #60]	; (8001424 <MX_RTC_Init+0xb0>)
 80013e8:	f004 f896 	bl	8005518 <HAL_RTC_SetTime>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80013f2:	f001 f93b 	bl	800266c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80013f6:	2307      	movs	r3, #7
 80013f8:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_DECEMBER;
 80013fa:	2312      	movs	r3, #18
 80013fc:	717b      	strb	r3, [r7, #5]
  sDate.Date = 31;
 80013fe:	231f      	movs	r3, #31
 8001400:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_RTC_Init+0xb0>)
 800140e:	f004 f99f 	bl	8005750 <HAL_RTC_SetDate>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001418:	f001 f928 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20004cd8 	.word	0x20004cd8
 8001428:	40002800 	.word	0x40002800

0800142c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_UART7_Init+0x58>)
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <MX_UART7_Init+0x5c>)
 8001434:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_UART7_Init+0x58>)
 8001438:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800143c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_UART7_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_UART7_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_UART7_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_UART7_Init+0x58>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <MX_UART7_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_UART7_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <MX_UART7_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_UART7_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_UART7_Init+0x58>)
 8001470:	f004 fdd6 	bl	8006020 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800147a:	f001 f8f7 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20004c50 	.word	0x20004c50
 8001488:	40007800 	.word	0x40007800

0800148c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_RXNE);
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <MX_USART6_UART_Init+0x78>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_USART6_UART_Init+0x78>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0220 	orr.w	r2, r2, #32
 800149e:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_IDLE);
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_USART6_UART_Init+0x78>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_USART6_UART_Init+0x78>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0210 	orr.w	r2, r2, #16
 80014ae:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <MX_USART6_UART_Init+0x7c>)
 80014b2:	4a16      	ldr	r2, [pc, #88]	; (800150c <MX_USART6_UART_Init+0x80>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_USART6_UART_Init+0x7c>)
 80014b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_USART6_UART_Init+0x7c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <MX_USART6_UART_Init+0x7c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_USART6_UART_Init+0x7c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <MX_USART6_UART_Init+0x7c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_USART6_UART_Init+0x7c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <MX_USART6_UART_Init+0x7c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_USART6_UART_Init+0x7c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <MX_USART6_UART_Init+0x7c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_USART6_UART_Init+0x7c>)
 80014f0:	f004 fd96 	bl	8006020 <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART6_UART_Init+0x72>
  {
    Error_Handler();
 80014fa:	f001 f8b7 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20004c50 	.word	0x20004c50
 8001508:	20004cf8 	.word	0x20004cf8
 800150c:	40011400 	.word	0x40011400

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b090      	sub	sp, #64	; 0x40
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001526:	4bae      	ldr	r3, [pc, #696]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4aad      	ldr	r2, [pc, #692]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4bab      	ldr	r3, [pc, #684]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800153e:	4ba8      	ldr	r3, [pc, #672]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4aa7      	ldr	r2, [pc, #668]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4ba5      	ldr	r3, [pc, #660]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4ba2      	ldr	r3, [pc, #648]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4aa1      	ldr	r2, [pc, #644]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b9f      	ldr	r3, [pc, #636]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	623b      	str	r3, [r7, #32]
 800156c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	4b9c      	ldr	r3, [pc, #624]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a9b      	ldr	r2, [pc, #620]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b99      	ldr	r3, [pc, #612]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4b96      	ldr	r3, [pc, #600]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a95      	ldr	r2, [pc, #596]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b93      	ldr	r3, [pc, #588]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b90      	ldr	r3, [pc, #576]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a8f      	ldr	r2, [pc, #572]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b8d      	ldr	r3, [pc, #564]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015b6:	4b8a      	ldr	r3, [pc, #552]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a89      	ldr	r2, [pc, #548]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b87      	ldr	r3, [pc, #540]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80015ce:	4b84      	ldr	r3, [pc, #528]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a83      	ldr	r2, [pc, #524]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b81      	ldr	r3, [pc, #516]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80015e6:	4b7e      	ldr	r3, [pc, #504]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a7d      	ldr	r2, [pc, #500]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b7b      	ldr	r3, [pc, #492]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015fe:	4b78      	ldr	r3, [pc, #480]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a77      	ldr	r2, [pc, #476]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001604:	f043 0320 	orr.w	r3, r3, #32
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b75      	ldr	r3, [pc, #468]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001616:	4b72      	ldr	r3, [pc, #456]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a71      	ldr	r2, [pc, #452]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b6f      	ldr	r3, [pc, #444]	; (80017e0 <MX_GPIO_Init+0x2d0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	2120      	movs	r1, #32
 8001632:	486c      	ldr	r0, [pc, #432]	; (80017e4 <MX_GPIO_Init+0x2d4>)
 8001634:	f002 fdc8 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	210c      	movs	r1, #12
 800163c:	486a      	ldr	r0, [pc, #424]	; (80017e8 <MX_GPIO_Init+0x2d8>)
 800163e:	f002 fdc3 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001642:	2201      	movs	r2, #1
 8001644:	2108      	movs	r1, #8
 8001646:	4869      	ldr	r0, [pc, #420]	; (80017ec <MX_GPIO_Init+0x2dc>)
 8001648:	f002 fdbe 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001652:	4865      	ldr	r0, [pc, #404]	; (80017e8 <MX_GPIO_Init+0x2d8>)
 8001654:	f002 fdb8 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165e:	4864      	ldr	r0, [pc, #400]	; (80017f0 <MX_GPIO_Init+0x2e0>)
 8001660:	f002 fdb2 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	21c8      	movs	r1, #200	; 0xc8
 8001668:	4862      	ldr	r0, [pc, #392]	; (80017f4 <MX_GPIO_Init+0x2e4>)
 800166a:	f002 fdad 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800166e:	2310      	movs	r3, #16
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800167e:	230e      	movs	r3, #14
 8001680:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001686:	4619      	mov	r1, r3
 8001688:	485b      	ldr	r0, [pc, #364]	; (80017f8 <MX_GPIO_Init+0x2e8>)
 800168a:	f002 fbf1 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800168e:	2308      	movs	r3, #8
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001692:	2300      	movs	r3, #0
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169e:	4619      	mov	r1, r3
 80016a0:	4855      	ldr	r0, [pc, #340]	; (80017f8 <MX_GPIO_Init+0x2e8>)
 80016a2:	f002 fbe5 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80016a6:	2304      	movs	r3, #4
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016b6:	2309      	movs	r3, #9
 80016b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016be:	4619      	mov	r1, r3
 80016c0:	484d      	ldr	r0, [pc, #308]	; (80017f8 <MX_GPIO_Init+0x2e8>)
 80016c2:	f002 fbd5 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80016c6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016d8:	230c      	movs	r3, #12
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e0:	4619      	mov	r1, r3
 80016e2:	4845      	ldr	r0, [pc, #276]	; (80017f8 <MX_GPIO_Init+0x2e8>)
 80016e4:	f002 fbc4 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80016e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ee:	2312      	movs	r3, #18
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fa:	2304      	movs	r3, #4
 80016fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	483d      	ldr	r0, [pc, #244]	; (80017fc <MX_GPIO_Init+0x2ec>)
 8001706:	f002 fbb3 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800170a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800171c:	230a      	movs	r3, #10
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001720:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001724:	4619      	mov	r1, r3
 8001726:	4835      	ldr	r0, [pc, #212]	; (80017fc <MX_GPIO_Init+0x2ec>)
 8001728:	f002 fba2 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800172c:	2310      	movs	r3, #16
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800173c:	2302      	movs	r3, #2
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001744:	4619      	mov	r1, r3
 8001746:	482d      	ldr	r0, [pc, #180]	; (80017fc <MX_GPIO_Init+0x2ec>)
 8001748:	f002 fb92 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800175c:	2308      	movs	r3, #8
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001764:	4619      	mov	r1, r3
 8001766:	481f      	ldr	r0, [pc, #124]	; (80017e4 <MX_GPIO_Init+0x2d4>)
 8001768:	f002 fb82 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800176c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800177e:	230c      	movs	r3, #12
 8001780:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001786:	4619      	mov	r1, r3
 8001788:	481d      	ldr	r0, [pc, #116]	; (8001800 <MX_GPIO_Init+0x2f0>)
 800178a:	f002 fb71 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800178e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017a0:	2301      	movs	r3, #1
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a8:	4619      	mov	r1, r3
 80017aa:	4816      	ldr	r0, [pc, #88]	; (8001804 <MX_GPIO_Init+0x2f4>)
 80017ac:	f002 fb60 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80017b0:	2360      	movs	r3, #96	; 0x60
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017c0:	230d      	movs	r3, #13
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c8:	4619      	mov	r1, r3
 80017ca:	480b      	ldr	r0, [pc, #44]	; (80017f8 <MX_GPIO_Init+0x2e8>)
 80017cc:	f002 fb50 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
 80017dc:	e014      	b.n	8001808 <MX_GPIO_Init+0x2f8>
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	40022000 	.word	0x40022000
 80017ec:	40022800 	.word	0x40022800
 80017f0:	40021c00 	.word	0x40021c00
 80017f4:	40021800 	.word	0x40021800
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40020400 	.word	0x40020400
 8001800:	40020800 	.word	0x40020800
 8001804:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800180c:	2307      	movs	r3, #7
 800180e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001814:	4619      	mov	r1, r3
 8001816:	48bc      	ldr	r0, [pc, #752]	; (8001b08 <MX_GPIO_Init+0x5f8>)
 8001818:	f002 fb2a 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800181c:	2340      	movs	r3, #64	; 0x40
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800182c:	230a      	movs	r3, #10
 800182e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001834:	4619      	mov	r1, r3
 8001836:	48b4      	ldr	r0, [pc, #720]	; (8001b08 <MX_GPIO_Init+0x5f8>)
 8001838:	f002 fb1a 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800183c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800184e:	230c      	movs	r3, #12
 8001850:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001856:	4619      	mov	r1, r3
 8001858:	48ac      	ldr	r0, [pc, #688]	; (8001b0c <MX_GPIO_Init+0x5fc>)
 800185a:	f002 fb09 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800185e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001870:	230e      	movs	r3, #14
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001878:	4619      	mov	r1, r3
 800187a:	48a5      	ldr	r0, [pc, #660]	; (8001b10 <MX_GPIO_Init+0x600>)
 800187c:	f002 faf8 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001892:	4619      	mov	r1, r3
 8001894:	489e      	ldr	r0, [pc, #632]	; (8001b10 <MX_GPIO_Init+0x600>)
 8001896:	f002 faeb 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800189a:	2340      	movs	r3, #64	; 0x40
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800189e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ac:	4619      	mov	r1, r3
 80018ae:	4899      	ldr	r0, [pc, #612]	; (8001b14 <MX_GPIO_Init+0x604>)
 80018b0:	f002 fade 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80018b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c6:	230c      	movs	r3, #12
 80018c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ce:	4619      	mov	r1, r3
 80018d0:	4890      	ldr	r0, [pc, #576]	; (8001b14 <MX_GPIO_Init+0x604>)
 80018d2:	f002 facd 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80018d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018e8:	230a      	movs	r3, #10
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	4619      	mov	r1, r3
 80018f2:	4889      	ldr	r0, [pc, #548]	; (8001b18 <MX_GPIO_Init+0x608>)
 80018f4:	f002 fabc 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80018f8:	23f0      	movs	r3, #240	; 0xf0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001908:	230a      	movs	r3, #10
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800190c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	4882      	ldr	r0, [pc, #520]	; (8001b1c <MX_GPIO_Init+0x60c>)
 8001914:	f002 faac 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001918:	23f7      	movs	r3, #247	; 0xf7
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001928:	230e      	movs	r3, #14
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800192c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001930:	4619      	mov	r1, r3
 8001932:	487b      	ldr	r0, [pc, #492]	; (8001b20 <MX_GPIO_Init+0x610>)
 8001934:	f002 fa9c 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800194a:	2309      	movs	r3, #9
 800194c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001952:	4619      	mov	r1, r3
 8001954:	486d      	ldr	r0, [pc, #436]	; (8001b0c <MX_GPIO_Init+0x5fc>)
 8001956:	f002 fa8b 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800195a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800196c:	230a      	movs	r3, #10
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001974:	4619      	mov	r1, r3
 8001976:	4865      	ldr	r0, [pc, #404]	; (8001b0c <MX_GPIO_Init+0x5fc>)
 8001978:	f002 fa7a 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800197c:	2320      	movs	r3, #32
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	4860      	ldr	r0, [pc, #384]	; (8001b14 <MX_GPIO_Init+0x604>)
 8001994:	f002 fa6c 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001998:	2308      	movs	r3, #8
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80019a8:	230d      	movs	r3, #13
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	4619      	mov	r1, r3
 80019b2:	4858      	ldr	r0, [pc, #352]	; (8001b14 <MX_GPIO_Init+0x604>)
 80019b4:	f002 fa5c 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80019b8:	f241 030c 	movw	r3, #4108	; 0x100c
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ce:	4619      	mov	r1, r3
 80019d0:	4852      	ldr	r0, [pc, #328]	; (8001b1c <MX_GPIO_Init+0x60c>)
 80019d2:	f002 fa4d 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019dc:	2300      	movs	r3, #0
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e8:	4619      	mov	r1, r3
 80019ea:	484e      	ldr	r0, [pc, #312]	; (8001b24 <MX_GPIO_Init+0x614>)
 80019ec:	f002 fa40 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80019f0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a02:	230c      	movs	r3, #12
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4846      	ldr	r0, [pc, #280]	; (8001b28 <MX_GPIO_Init+0x618>)
 8001a0e:	f002 fa2f 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001a12:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a24:	230e      	movs	r3, #14
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	483b      	ldr	r0, [pc, #236]	; (8001b1c <MX_GPIO_Init+0x60c>)
 8001a30:	f002 fa1e 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a34:	2308      	movs	r3, #8
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4835      	ldr	r0, [pc, #212]	; (8001b20 <MX_GPIO_Init+0x610>)
 8001a4c:	f002 fa10 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a62:	230d      	movs	r3, #13
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4827      	ldr	r0, [pc, #156]	; (8001b0c <MX_GPIO_Init+0x5fc>)
 8001a6e:	f002 f9ff 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a72:	2310      	movs	r3, #16
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a76:	2300      	movs	r3, #0
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a82:	4619      	mov	r1, r3
 8001a84:	4823      	ldr	r0, [pc, #140]	; (8001b14 <MX_GPIO_Init+0x604>)
 8001a86:	f002 f9f3 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a9a:	230c      	movs	r3, #12
 8001a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481b      	ldr	r0, [pc, #108]	; (8001b14 <MX_GPIO_Init+0x604>)
 8001aa6:	f002 f9e3 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001aaa:	f248 0304 	movw	r3, #32772	; 0x8004
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001abc:	4619      	mov	r1, r3
 8001abe:	481b      	ldr	r0, [pc, #108]	; (8001b2c <MX_GPIO_Init+0x61c>)
 8001ac0:	f002 f9d6 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ad4:	2305      	movs	r3, #5
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001adc:	4619      	mov	r1, r3
 8001ade:	480f      	ldr	r0, [pc, #60]	; (8001b1c <MX_GPIO_Init+0x60c>)
 8001ae0:	f002 f9c6 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afa:	4619      	mov	r1, r3
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <MX_GPIO_Init+0x61c>)
 8001afe:	f002 f9b7 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001b02:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001b06:	e013      	b.n	8001b30 <MX_GPIO_Init+0x620>
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40021800 	.word	0x40021800
 8001b10:	40022400 	.word	0x40022400
 8001b14:	40020c00 	.word	0x40020c00
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40022000 	.word	0x40022000
 8001b20:	40022800 	.word	0x40022800
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40021400 	.word	0x40021400
 8001b2c:	40021c00 	.word	0x40021c00
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b3e:	230d      	movs	r3, #13
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b46:	4619      	mov	r1, r3
 8001b48:	4896      	ldr	r0, [pc, #600]	; (8001da4 <MX_GPIO_Init+0x894>)
 8001b4a:	f002 f991 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b66:	4619      	mov	r1, r3
 8001b68:	488f      	ldr	r0, [pc, #572]	; (8001da8 <MX_GPIO_Init+0x898>)
 8001b6a:	f002 f981 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b80:	2307      	movs	r3, #7
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4888      	ldr	r0, [pc, #544]	; (8001dac <MX_GPIO_Init+0x89c>)
 8001b8c:	f002 f970 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001baa:	4619      	mov	r1, r3
 8001bac:	487f      	ldr	r0, [pc, #508]	; (8001dac <MX_GPIO_Init+0x89c>)
 8001bae:	f002 f95f 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bb8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4877      	ldr	r0, [pc, #476]	; (8001da8 <MX_GPIO_Init+0x898>)
 8001bca:	f002 f951 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001bce:	2310      	movs	r3, #16
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bde:	230a      	movs	r3, #10
 8001be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be6:	4619      	mov	r1, r3
 8001be8:	486e      	ldr	r0, [pc, #440]	; (8001da4 <MX_GPIO_Init+0x894>)
 8001bea:	f002 f941 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001bee:	2328      	movs	r3, #40	; 0x28
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bfe:	230c      	movs	r3, #12
 8001c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c06:	4619      	mov	r1, r3
 8001c08:	4866      	ldr	r0, [pc, #408]	; (8001da4 <MX_GPIO_Init+0x894>)
 8001c0a:	f002 f931 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001c0e:	23c8      	movs	r3, #200	; 0xc8
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c22:	4619      	mov	r1, r3
 8001c24:	4862      	ldr	r0, [pc, #392]	; (8001db0 <MX_GPIO_Init+0x8a0>)
 8001c26:	f002 f923 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001c2a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c30:	2303      	movs	r3, #3
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	485d      	ldr	r0, [pc, #372]	; (8001db4 <MX_GPIO_Init+0x8a4>)
 8001c40:	f002 f916 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001c44:	2308      	movs	r3, #8
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c54:	230c      	movs	r3, #12
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4856      	ldr	r0, [pc, #344]	; (8001db8 <MX_GPIO_Init+0x8a8>)
 8001c60:	f002 f906 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c64:	2305      	movs	r3, #5
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c74:	230a      	movs	r3, #10
 8001c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	484e      	ldr	r0, [pc, #312]	; (8001db8 <MX_GPIO_Init+0x8a8>)
 8001c80:	f002 f8f6 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c84:	2304      	movs	r3, #4
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c94:	2309      	movs	r3, #9
 8001c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4847      	ldr	r0, [pc, #284]	; (8001dbc <MX_GPIO_Init+0x8ac>)
 8001ca0:	f002 f8e6 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001ca4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cb6:	2309      	movs	r3, #9
 8001cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	483f      	ldr	r0, [pc, #252]	; (8001dc0 <MX_GPIO_Init+0x8b0>)
 8001cc2:	f002 f8d5 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4835      	ldr	r0, [pc, #212]	; (8001db0 <MX_GPIO_Init+0x8a0>)
 8001cda:	f002 f8c9 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cee:	4619      	mov	r1, r3
 8001cf0:	482e      	ldr	r0, [pc, #184]	; (8001dac <MX_GPIO_Init+0x89c>)
 8001cf2:	f002 f8bd 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001cf6:	2350      	movs	r3, #80	; 0x50
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d06:	230d      	movs	r3, #13
 8001d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4826      	ldr	r0, [pc, #152]	; (8001dac <MX_GPIO_Init+0x89c>)
 8001d12:	f002 f8ad 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001d16:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1c:	2312      	movs	r3, #18
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d30:	4619      	mov	r1, r3
 8001d32:	481c      	ldr	r0, [pc, #112]	; (8001da4 <MX_GPIO_Init+0x894>)
 8001d34:	f002 f89c 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001d38:	2328      	movs	r3, #40	; 0x28
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d48:	230a      	movs	r3, #10
 8001d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d50:	4619      	mov	r1, r3
 8001d52:	4816      	ldr	r0, [pc, #88]	; (8001dac <MX_GPIO_Init+0x89c>)
 8001d54:	f002 f88c 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001d58:	2340      	movs	r3, #64	; 0x40
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001d68:	2309      	movs	r3, #9
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d70:	4619      	mov	r1, r3
 8001d72:	480c      	ldr	r0, [pc, #48]	; (8001da4 <MX_GPIO_Init+0x894>)
 8001d74:	f002 f87c 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001d78:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d92:	4619      	mov	r1, r3
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <MX_GPIO_Init+0x8ac>)
 8001d96:	f002 f86b 	bl	8003e70 <HAL_GPIO_Init>

}
 8001d9a:	bf00      	nop
 8001d9c:	3740      	adds	r7, #64	; 0x40
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40021c00 	.word	0x40021c00
 8001da8:	40022000 	.word	0x40022000
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020c00 	.word	0x40020c00

08001dc4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	; 0x30
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
 8001ddc:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
	if(huart == &huart7) {
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a68      	ldr	r2, [pc, #416]	; (8001f88 <HAL_UART_RxCpltCallback+0x1c4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	f040 82c3 	bne.w	8002372 <HAL_UART_RxCpltCallback+0x5ae>
		//$ message start
		if(buff[0]=='$'){
 8001dec:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <HAL_UART_RxCpltCallback+0x1c8>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b24      	cmp	r3, #36	; 0x24
 8001df2:	d106      	bne.n	8001e02 <HAL_UART_RxCpltCallback+0x3e>
			count=0;
 8001df4:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <HAL_UART_RxCpltCallback+0x1cc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
			zpt=0;
 8001dfa:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <HAL_UART_RxCpltCallback+0x1d0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e00f      	b.n	8001e22 <HAL_UART_RxCpltCallback+0x5e>
		}
		//Message error
		else if (count==1&&buff[0]!='G'){
 8001e02:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <HAL_UART_RxCpltCallback+0x1cc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10b      	bne.n	8001e22 <HAL_UART_RxCpltCallback+0x5e>
 8001e0a:	4b60      	ldr	r3, [pc, #384]	; (8001f8c <HAL_UART_RxCpltCallback+0x1c8>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b47      	cmp	r3, #71	; 0x47
 8001e10:	d007      	beq.n	8001e22 <HAL_UART_RxCpltCallback+0x5e>
			count=0;
 8001e12:	4b5f      	ldr	r3, [pc, #380]	; (8001f90 <HAL_UART_RxCpltCallback+0x1cc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
			ERRORS++;
 8001e18:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	4a5e      	ldr	r2, [pc, #376]	; (8001f98 <HAL_UART_RxCpltCallback+0x1d4>)
 8001e20:	6013      	str	r3, [r2, #0]
		}


		//CRC calculation
		int res = calc_crc(buff[0],count);
 8001e22:	4b5a      	ldr	r3, [pc, #360]	; (8001f8c <HAL_UART_RxCpltCallback+0x1c8>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	4a5a      	ldr	r2, [pc, #360]	; (8001f90 <HAL_UART_RxCpltCallback+0x1cc>)
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fb69 	bl	8002504 <calc_crc>
 8001e32:	4603      	mov	r3, r0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
		if(res==1){
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d14a      	bne.n	8001ed2 <HAL_UART_RxCpltCallback+0x10e>
			//printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
			//RTC READ
			rtc_read();
 8001e3c:	f000 fbbe 	bl	80025bc <rtc_read>
			//printf("rtc_read=%llu\t",rtc_read());
			//comparison RTC&CRC
			//Time_calc.tm_wday = 1;//atoi(gps.);
			Time_calc.tm_mon = atoi(gps.month)-1;//-1 do January==0 month
 8001e40:	4856      	ldr	r0, [pc, #344]	; (8001f9c <HAL_UART_RxCpltCallback+0x1d8>)
 8001e42:	f013 f88d 	bl	8014f60 <atoi>
 8001e46:	4603      	mov	r3, r0
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	4a55      	ldr	r2, [pc, #340]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001e4c:	6113      	str	r3, [r2, #16]
			Time_calc.tm_mday = atoi(gps.day);
 8001e4e:	4855      	ldr	r0, [pc, #340]	; (8001fa4 <HAL_UART_RxCpltCallback+0x1e0>)
 8001e50:	f013 f886 	bl	8014f60 <atoi>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001e58:	60d3      	str	r3, [r2, #12]
			if(year_str[0]=='0'&&year_str[1]=='0'){
 8001e5a:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_UART_RxCpltCallback+0x1e4>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b30      	cmp	r3, #48	; 0x30
 8001e60:	d108      	bne.n	8001e74 <HAL_UART_RxCpltCallback+0xb0>
 8001e62:	4b51      	ldr	r3, [pc, #324]	; (8001fa8 <HAL_UART_RxCpltCallback+0x1e4>)
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	2b30      	cmp	r3, #48	; 0x30
 8001e68:	d104      	bne.n	8001e74 <HAL_UART_RxCpltCallback+0xb0>
				century=century+100;//atoi(gps.year)
 8001e6a:	4b50      	ldr	r3, [pc, #320]	; (8001fac <HAL_UART_RxCpltCallback+0x1e8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3364      	adds	r3, #100	; 0x64
 8001e70:	4a4e      	ldr	r2, [pc, #312]	; (8001fac <HAL_UART_RxCpltCallback+0x1e8>)
 8001e72:	6013      	str	r3, [r2, #0]
			}
			Time_calc.tm_year = atoi(year_str) + century;
 8001e74:	484c      	ldr	r0, [pc, #304]	; (8001fa8 <HAL_UART_RxCpltCallback+0x1e4>)
 8001e76:	f013 f873 	bl	8014f60 <atoi>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_UART_RxCpltCallback+0x1e8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a47      	ldr	r2, [pc, #284]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001e84:	6153      	str	r3, [r2, #20]
			Time_calc.tm_hour = atoi(gps.hours);
 8001e86:	484a      	ldr	r0, [pc, #296]	; (8001fb0 <HAL_UART_RxCpltCallback+0x1ec>)
 8001e88:	f013 f86a 	bl	8014f60 <atoi>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4a44      	ldr	r2, [pc, #272]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001e90:	6093      	str	r3, [r2, #8]
			Time_calc.tm_min = atoi(gps.minuttes);
 8001e92:	4848      	ldr	r0, [pc, #288]	; (8001fb4 <HAL_UART_RxCpltCallback+0x1f0>)
 8001e94:	f013 f864 	bl	8014f60 <atoi>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4a41      	ldr	r2, [pc, #260]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001e9c:	6053      	str	r3, [r2, #4]
			Time_calc.tm_sec = atoi(gps.seconds);
 8001e9e:	4846      	ldr	r0, [pc, #280]	; (8001fb8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001ea0:	f013 f85e 	bl	8014f60 <atoi>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a3e      	ldr	r2, [pc, #248]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001ea8:	6013      	str	r3, [r2, #0]
			gps_unix = mktime(&Time_calc);
 8001eaa:	483d      	ldr	r0, [pc, #244]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001eac:	f013 f996 	bl	80151dc <mktime>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4941      	ldr	r1, [pc, #260]	; (8001fbc <HAL_UART_RxCpltCallback+0x1f8>)
 8001eb6:	e9c1 2300 	strd	r2, r3, [r1]
			//printf("tm_year=%d\t tm_mon=%d\t tm_mday=%d\t tm_hour=%d\t tm_min=%d\t tm_sec=%d\n",Time_calc.tm_year,Time_calc.tm_mon,Time_calc.tm_mday,Time_calc.tm_hour,Time_calc.tm_min,Time_calc.tm_sec);
			printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);
 8001eba:	f000 fb7f 	bl	80025bc <rtc_read>
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_UART_RxCpltCallback+0x1f8>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	e9cd 2300 	strd	r2, r3, [sp]
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	483c      	ldr	r0, [pc, #240]	; (8001fc0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001ece:	f013 fb2b 	bl	8015528 <printf>

		}
		if(res==1&&gps_unix!=rtc_read()){
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d13f      	bne.n	8001f58 <HAL_UART_RxCpltCallback+0x194>
 8001ed8:	f000 fb70 	bl	80025bc <rtc_read>
 8001edc:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_UART_RxCpltCallback+0x1f8>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	4299      	cmp	r1, r3
 8001ee4:	bf08      	it	eq
 8001ee6:	4290      	cmpeq	r0, r2
 8001ee8:	d036      	beq.n	8001f58 <HAL_UART_RxCpltCallback+0x194>

			sTime.Hours = Time_calc.tm_hour;
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	733b      	strb	r3, [r7, #12]
			sTime.Minutes = Time_calc.tm_min;
 8001ef2:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	737b      	strb	r3, [r7, #13]
			sTime.Seconds = Time_calc.tm_sec;
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	73bb      	strb	r3, [r7, #14]
			sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	482d      	ldr	r0, [pc, #180]	; (8001fc4 <HAL_UART_RxCpltCallback+0x200>)
 8001f10:	f003 fb02 	bl	8005518 <HAL_RTC_SetTime>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_UART_RxCpltCallback+0x15a>
			{
				Error_Handler();
 8001f1a:	f000 fba7 	bl	800266c <Error_Handler>
			}
			sDate.Month = Time_calc.tm_mon;
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	727b      	strb	r3, [r7, #9]
			sDate.Date = Time_calc.tm_mday;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	72bb      	strb	r3, [r7, #10]
			sDate.Year = Time_calc.tm_year-century;
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <HAL_UART_RxCpltCallback+0x1dc>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_UART_RxCpltCallback+0x1e8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	72fb      	strb	r3, [r7, #11]

			if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	2200      	movs	r2, #0
 8001f46:	4619      	mov	r1, r3
 8001f48:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <HAL_UART_RxCpltCallback+0x200>)
 8001f4a:	f003 fc01 	bl	8005750 <HAL_RTC_SetDate>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_UART_RxCpltCallback+0x194>
			{
				Error_Handler();
 8001f54:	f000 fb8a 	bl	800266c <Error_Handler>
			}


		}
		printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);
 8001f58:	f000 fb30 	bl	80025bc <rtc_read>
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_UART_RxCpltCallback+0x1f8>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	e9cd 2300 	strd	r2, r3, [sp]
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001f6c:	f013 fadc 	bl	8015528 <printf>

		//ZDA OR RMC
		if (count==3&&buff[0]=='Z'){
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_UART_RxCpltCallback+0x1cc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d129      	bne.n	8001fcc <HAL_UART_RxCpltCallback+0x208>
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <HAL_UART_RxCpltCallback+0x1c8>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b5a      	cmp	r3, #90	; 0x5a
 8001f7e:	d125      	bne.n	8001fcc <HAL_UART_RxCpltCallback+0x208>
			Tipe_Mes=1;
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_UART_RxCpltCallback+0x204>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e02c      	b.n	8001fe2 <HAL_UART_RxCpltCallback+0x21e>
 8001f88:	20004c50 	.word	0x20004c50
 8001f8c:	20000cec 	.word	0x20000cec
 8001f90:	20000cd4 	.word	0x20000cd4
 8001f94:	20000cc0 	.word	0x20000cc0
 8001f98:	20000cb0 	.word	0x20000cb0
 8001f9c:	20004c33 	.word	0x20004c33
 8001fa0:	20004d7c 	.word	0x20004d7c
 8001fa4:	20004c30 	.word	0x20004c30
 8001fa8:	20000cf0 	.word	0x20000cf0
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	20004c3b 	.word	0x20004c3b
 8001fb4:	20004c3e 	.word	0x20004c3e
 8001fb8:	20004c41 	.word	0x20004c41
 8001fbc:	20000cb8 	.word	0x20000cb8
 8001fc0:	0801cbdc 	.word	0x0801cbdc
 8001fc4:	20004cd8 	.word	0x20004cd8
 8001fc8:	20000cb4 	.word	0x20000cb4
		}
		else if(count==3&&buff[0]=='R'){
 8001fcc:	4b91      	ldr	r3, [pc, #580]	; (8002214 <HAL_UART_RxCpltCallback+0x450>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d106      	bne.n	8001fe2 <HAL_UART_RxCpltCallback+0x21e>
 8001fd4:	4b90      	ldr	r3, [pc, #576]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b52      	cmp	r3, #82	; 0x52
 8001fda:	d102      	bne.n	8001fe2 <HAL_UART_RxCpltCallback+0x21e>
			Tipe_Mes=2;
 8001fdc:	4b8f      	ldr	r3, [pc, #572]	; (800221c <HAL_UART_RxCpltCallback+0x458>)
 8001fde:	2202      	movs	r2, #2
 8001fe0:	601a      	str	r2, [r3, #0]
		}
		//If ZDA
		if(Tipe_Mes==1){
 8001fe2:	4b8e      	ldr	r3, [pc, #568]	; (800221c <HAL_UART_RxCpltCallback+0x458>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	f040 80d4 	bne.w	8002194 <HAL_UART_RxCpltCallback+0x3d0>

			if(count==6&&buff[0]!=','){
 8001fec:	4b89      	ldr	r3, [pc, #548]	; (8002214 <HAL_UART_RxCpltCallback+0x450>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b06      	cmp	r3, #6
 8001ff2:	d10b      	bne.n	800200c <HAL_UART_RxCpltCallback+0x248>
 8001ff4:	4b88      	ldr	r3, [pc, #544]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b2c      	cmp	r3, #44	; 0x2c
 8001ffa:	d007      	beq.n	800200c <HAL_UART_RxCpltCallback+0x248>
				count=0;
 8001ffc:	4b85      	ldr	r3, [pc, #532]	; (8002214 <HAL_UART_RxCpltCallback+0x450>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
				ERRORS++;
 8002002:	4b87      	ldr	r3, [pc, #540]	; (8002220 <HAL_UART_RxCpltCallback+0x45c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3301      	adds	r3, #1
 8002008:	4a85      	ldr	r2, [pc, #532]	; (8002220 <HAL_UART_RxCpltCallback+0x45c>)
 800200a:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 800200c:	4b82      	ldr	r3, [pc, #520]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b2c      	cmp	r3, #44	; 0x2c
 8002012:	d107      	bne.n	8002024 <HAL_UART_RxCpltCallback+0x260>
				zpt++;
 8002014:	4b83      	ldr	r3, [pc, #524]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	4a82      	ldr	r2, [pc, #520]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 800201c:	6013      	str	r3, [r2, #0]
				ind=0;
 800201e:	4b82      	ldr	r3, [pc, #520]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 8002024:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d10e      	bne.n	800204a <HAL_UART_RxCpltCallback+0x286>
 800202c:	4b7a      	ldr	r3, [pc, #488]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b2c      	cmp	r3, #44	; 0x2c
 8002032:	d00a      	beq.n	800204a <HAL_UART_RxCpltCallback+0x286>
				time_buff[ind]=buff[0];
 8002034:	4b7c      	ldr	r3, [pc, #496]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a77      	ldr	r2, [pc, #476]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 800203a:	7811      	ldrb	r1, [r2, #0]
 800203c:	4a7b      	ldr	r2, [pc, #492]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 800203e:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002040:	4b79      	ldr	r3, [pc, #484]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	4a78      	ldr	r2, [pc, #480]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 8002048:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d127      	bne.n	80020a2 <HAL_UART_RxCpltCallback+0x2de>
 8002052:	4b71      	ldr	r3, [pc, #452]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b2c      	cmp	r3, #44	; 0x2c
 8002058:	d123      	bne.n	80020a2 <HAL_UART_RxCpltCallback+0x2de>
				gps.hours[0]=time_buff[0];
 800205a:	4b74      	ldr	r3, [pc, #464]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	4b74      	ldr	r3, [pc, #464]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 8002060:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 8002062:	4b72      	ldr	r3, [pc, #456]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 8002064:	785a      	ldrb	r2, [r3, #1]
 8002066:	4b72      	ldr	r3, [pc, #456]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 8002068:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 800206a:	4b70      	ldr	r3, [pc, #448]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 800206c:	789a      	ldrb	r2, [r3, #2]
 800206e:	4b70      	ldr	r3, [pc, #448]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 8002070:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 8002072:	4b6e      	ldr	r3, [pc, #440]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 8002074:	78da      	ldrb	r2, [r3, #3]
 8002076:	4b6e      	ldr	r3, [pc, #440]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 8002078:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 800207a:	4b6c      	ldr	r3, [pc, #432]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 800207c:	791a      	ldrb	r2, [r3, #4]
 800207e:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 8002080:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 8002082:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 8002084:	795a      	ldrb	r2, [r3, #5]
 8002086:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 8002088:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 800208a:	4b68      	ldr	r3, [pc, #416]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 800208c:	799a      	ldrb	r2, [r3, #6]
 800208e:	4b68      	ldr	r3, [pc, #416]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 8002090:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 8002092:	4b66      	ldr	r3, [pc, #408]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 8002094:	79da      	ldrb	r2, [r3, #7]
 8002096:	4b66      	ldr	r3, [pc, #408]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 8002098:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 800209a:	4b64      	ldr	r3, [pc, #400]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 800209c:	7a1a      	ldrb	r2, [r3, #8]
 800209e:	4b64      	ldr	r3, [pc, #400]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 80020a0:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 80020a2:	4b60      	ldr	r3, [pc, #384]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d10e      	bne.n	80020c8 <HAL_UART_RxCpltCallback+0x304>
 80020aa:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b2c      	cmp	r3, #44	; 0x2c
 80020b0:	d00a      	beq.n	80020c8 <HAL_UART_RxCpltCallback+0x304>

				time_buff[ind]=buff[0];
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a58      	ldr	r2, [pc, #352]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 80020b8:	7811      	ldrb	r1, [r2, #0]
 80020ba:	4a5c      	ldr	r2, [pc, #368]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 80020bc:	54d1      	strb	r1, [r2, r3]
				ind++;
 80020be:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	4a58      	ldr	r2, [pc, #352]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 80020c6:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 80020c8:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d10b      	bne.n	80020e8 <HAL_UART_RxCpltCallback+0x324>
 80020d0:	4b51      	ldr	r3, [pc, #324]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b2c      	cmp	r3, #44	; 0x2c
 80020d6:	d107      	bne.n	80020e8 <HAL_UART_RxCpltCallback+0x324>
				gps.day[0]=time_buff[0];
 80020d8:	4b54      	ldr	r3, [pc, #336]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	4b54      	ldr	r3, [pc, #336]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 80020de:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 80020e0:	4b52      	ldr	r3, [pc, #328]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 80020e2:	785a      	ldrb	r2, [r3, #1]
 80020e4:	4b52      	ldr	r3, [pc, #328]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 80020e6:	705a      	strb	r2, [r3, #1]
			}
			if(zpt==3&&buff[0]!=','){
 80020e8:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d10e      	bne.n	800210e <HAL_UART_RxCpltCallback+0x34a>
 80020f0:	4b49      	ldr	r3, [pc, #292]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b2c      	cmp	r3, #44	; 0x2c
 80020f6:	d00a      	beq.n	800210e <HAL_UART_RxCpltCallback+0x34a>

				time_buff[ind]=buff[0];
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a46      	ldr	r2, [pc, #280]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 80020fe:	7811      	ldrb	r1, [r2, #0]
 8002100:	4a4a      	ldr	r2, [pc, #296]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 8002102:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002104:	4b48      	ldr	r3, [pc, #288]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	4a47      	ldr	r2, [pc, #284]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 800210c:	6013      	str	r3, [r2, #0]
			}
			if(zpt==4&&buff[0]==','){
 800210e:	4b45      	ldr	r3, [pc, #276]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b04      	cmp	r3, #4
 8002114:	d10b      	bne.n	800212e <HAL_UART_RxCpltCallback+0x36a>
 8002116:	4b40      	ldr	r3, [pc, #256]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b2c      	cmp	r3, #44	; 0x2c
 800211c:	d107      	bne.n	800212e <HAL_UART_RxCpltCallback+0x36a>
				gps.month[0]=time_buff[0];
 800211e:	4b43      	ldr	r3, [pc, #268]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	4b43      	ldr	r3, [pc, #268]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 8002124:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[1];
 8002126:	4b41      	ldr	r3, [pc, #260]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 8002128:	785a      	ldrb	r2, [r3, #1]
 800212a:	4b41      	ldr	r3, [pc, #260]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 800212c:	711a      	strb	r2, [r3, #4]
			}
			if(zpt==4&&buff[0]!=','){
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b04      	cmp	r3, #4
 8002134:	d10e      	bne.n	8002154 <HAL_UART_RxCpltCallback+0x390>
 8002136:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b2c      	cmp	r3, #44	; 0x2c
 800213c:	d00a      	beq.n	8002154 <HAL_UART_RxCpltCallback+0x390>

				time_buff[ind]=buff[0];
 800213e:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a35      	ldr	r2, [pc, #212]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 8002144:	7811      	ldrb	r1, [r2, #0]
 8002146:	4a39      	ldr	r2, [pc, #228]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 8002148:	54d1      	strb	r1, [r2, r3]
				ind++;
 800214a:	4b37      	ldr	r3, [pc, #220]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	4a35      	ldr	r2, [pc, #212]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 8002152:	6013      	str	r3, [r2, #0]
			}
			if(zpt==5&&buff[0]==','){
 8002154:	4b33      	ldr	r3, [pc, #204]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d11b      	bne.n	8002194 <HAL_UART_RxCpltCallback+0x3d0>
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b2c      	cmp	r3, #44	; 0x2c
 8002162:	d117      	bne.n	8002194 <HAL_UART_RxCpltCallback+0x3d0>
				gps.year[0]=time_buff[0];
 8002164:	4b31      	ldr	r3, [pc, #196]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 800216a:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[1];
 800216c:	4b2f      	ldr	r3, [pc, #188]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 800216e:	785a      	ldrb	r2, [r3, #1]
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 8002172:	71da      	strb	r2, [r3, #7]
				gps.year[2]=time_buff[2];
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 8002176:	789a      	ldrb	r2, [r3, #2]
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 800217a:	721a      	strb	r2, [r3, #8]
				gps.year[3]=time_buff[3];
 800217c:	4b2b      	ldr	r3, [pc, #172]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 800217e:	78da      	ldrb	r2, [r3, #3]
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_UART_RxCpltCallback+0x46c>)
 8002182:	725a      	strb	r2, [r3, #9]
				year_str[0]=time_buff[2];
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 8002186:	789a      	ldrb	r2, [r3, #2]
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_UART_RxCpltCallback+0x470>)
 800218a:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[3];
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 800218e:	78da      	ldrb	r2, [r3, #3]
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <HAL_UART_RxCpltCallback+0x470>)
 8002192:	705a      	strb	r2, [r3, #1]
			}
		}


		//IF RMC
		if(Tipe_Mes==2){
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_UART_RxCpltCallback+0x458>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b02      	cmp	r3, #2
 800219a:	f040 80c9 	bne.w	8002330 <HAL_UART_RxCpltCallback+0x56c>

			if(count==6&&buff[0]!=','){
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_UART_RxCpltCallback+0x450>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d10b      	bne.n	80021be <HAL_UART_RxCpltCallback+0x3fa>
 80021a6:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b2c      	cmp	r3, #44	; 0x2c
 80021ac:	d007      	beq.n	80021be <HAL_UART_RxCpltCallback+0x3fa>
				count=0;
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_UART_RxCpltCallback+0x450>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
				ERRORS++;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_UART_RxCpltCallback+0x45c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_UART_RxCpltCallback+0x45c>)
 80021bc:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b2c      	cmp	r3, #44	; 0x2c
 80021c4:	d107      	bne.n	80021d6 <HAL_UART_RxCpltCallback+0x412>
				zpt++;
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	4a15      	ldr	r2, [pc, #84]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 80021ce:	6013      	str	r3, [r2, #0]
				ind=0;
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10e      	bne.n	80021fc <HAL_UART_RxCpltCallback+0x438>
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b2c      	cmp	r3, #44	; 0x2c
 80021e4:	d00a      	beq.n	80021fc <HAL_UART_RxCpltCallback+0x438>

				time_buff[ind]=buff[0];
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 80021ec:	7811      	ldrb	r1, [r2, #0]
 80021ee:	4a0f      	ldr	r2, [pc, #60]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 80021f0:	54d1      	strb	r1, [r2, r3]
				ind++;
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3301      	adds	r3, #1
 80021f8:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <HAL_UART_RxCpltCallback+0x464>)
 80021fa:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_UART_RxCpltCallback+0x460>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d13b      	bne.n	800227c <HAL_UART_RxCpltCallback+0x4b8>
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_UART_RxCpltCallback+0x454>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b2c      	cmp	r3, #44	; 0x2c
 800220a:	d137      	bne.n	800227c <HAL_UART_RxCpltCallback+0x4b8>
				gps.hours[0]=time_buff[0];
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <HAL_UART_RxCpltCallback+0x468>)
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	e012      	b.n	8002238 <HAL_UART_RxCpltCallback+0x474>
 8002212:	bf00      	nop
 8002214:	20000cd4 	.word	0x20000cd4
 8002218:	20000cec 	.word	0x20000cec
 800221c:	20000cb4 	.word	0x20000cb4
 8002220:	20000cb0 	.word	0x20000cb0
 8002224:	20000cc0 	.word	0x20000cc0
 8002228:	20000ccc 	.word	0x20000ccc
 800222c:	20000cdc 	.word	0x20000cdc
 8002230:	20004c30 	.word	0x20004c30
 8002234:	20000cf0 	.word	0x20000cf0
 8002238:	4b50      	ldr	r3, [pc, #320]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 800223a:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 800223c:	4b50      	ldr	r3, [pc, #320]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 800223e:	785a      	ldrb	r2, [r3, #1]
 8002240:	4b4e      	ldr	r3, [pc, #312]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 8002242:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 8002244:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 8002246:	789a      	ldrb	r2, [r3, #2]
 8002248:	4b4c      	ldr	r3, [pc, #304]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 800224a:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 800224e:	78da      	ldrb	r2, [r3, #3]
 8002250:	4b4a      	ldr	r3, [pc, #296]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 8002252:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 8002254:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 8002256:	791a      	ldrb	r2, [r3, #4]
 8002258:	4b48      	ldr	r3, [pc, #288]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 800225a:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 800225c:	4b48      	ldr	r3, [pc, #288]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 800225e:	795a      	ldrb	r2, [r3, #5]
 8002260:	4b46      	ldr	r3, [pc, #280]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 8002262:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 8002264:	4b46      	ldr	r3, [pc, #280]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 8002266:	799a      	ldrb	r2, [r3, #6]
 8002268:	4b44      	ldr	r3, [pc, #272]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 800226a:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 800226c:	4b44      	ldr	r3, [pc, #272]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 800226e:	79da      	ldrb	r2, [r3, #7]
 8002270:	4b42      	ldr	r3, [pc, #264]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 8002272:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 8002274:	4b42      	ldr	r3, [pc, #264]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 8002276:	7a1a      	ldrb	r2, [r3, #8]
 8002278:	4b40      	ldr	r3, [pc, #256]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 800227a:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 800227c:	4b41      	ldr	r3, [pc, #260]	; (8002384 <HAL_UART_RxCpltCallback+0x5c0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d10e      	bne.n	80022a2 <HAL_UART_RxCpltCallback+0x4de>
 8002284:	4b40      	ldr	r3, [pc, #256]	; (8002388 <HAL_UART_RxCpltCallback+0x5c4>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b2c      	cmp	r3, #44	; 0x2c
 800228a:	d00a      	beq.n	80022a2 <HAL_UART_RxCpltCallback+0x4de>

				time_buff[ind]=buff[0];
 800228c:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_UART_RxCpltCallback+0x5c8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3d      	ldr	r2, [pc, #244]	; (8002388 <HAL_UART_RxCpltCallback+0x5c4>)
 8002292:	7811      	ldrb	r1, [r2, #0]
 8002294:	4a3a      	ldr	r2, [pc, #232]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 8002296:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002298:	4b3c      	ldr	r3, [pc, #240]	; (800238c <HAL_UART_RxCpltCallback+0x5c8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a3b      	ldr	r2, [pc, #236]	; (800238c <HAL_UART_RxCpltCallback+0x5c8>)
 80022a0:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <HAL_UART_RxCpltCallback+0x5c0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d107      	bne.n	80022ba <HAL_UART_RxCpltCallback+0x4f6>
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_UART_RxCpltCallback+0x5c4>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b2c      	cmp	r3, #44	; 0x2c
 80022b0:	d103      	bne.n	80022ba <HAL_UART_RxCpltCallback+0x4f6>
				gps.sinc[1]=time_buff[0];
 80022b2:	4b33      	ldr	r3, [pc, #204]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 80022b8:	769a      	strb	r2, [r3, #26]
			}

			if(zpt==9&&buff[0]!=','){
 80022ba:	4b32      	ldr	r3, [pc, #200]	; (8002384 <HAL_UART_RxCpltCallback+0x5c0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b09      	cmp	r3, #9
 80022c0:	d10e      	bne.n	80022e0 <HAL_UART_RxCpltCallback+0x51c>
 80022c2:	4b31      	ldr	r3, [pc, #196]	; (8002388 <HAL_UART_RxCpltCallback+0x5c4>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b2c      	cmp	r3, #44	; 0x2c
 80022c8:	d00a      	beq.n	80022e0 <HAL_UART_RxCpltCallback+0x51c>

				time_buff[ind]=buff[0];
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_UART_RxCpltCallback+0x5c8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2e      	ldr	r2, [pc, #184]	; (8002388 <HAL_UART_RxCpltCallback+0x5c4>)
 80022d0:	7811      	ldrb	r1, [r2, #0]
 80022d2:	4a2b      	ldr	r2, [pc, #172]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 80022d4:	54d1      	strb	r1, [r2, r3]
				ind++;
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_UART_RxCpltCallback+0x5c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a2b      	ldr	r2, [pc, #172]	; (800238c <HAL_UART_RxCpltCallback+0x5c8>)
 80022de:	6013      	str	r3, [r2, #0]
			}
			if(zpt==10&&buff[0]==','){
 80022e0:	4b28      	ldr	r3, [pc, #160]	; (8002384 <HAL_UART_RxCpltCallback+0x5c0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b0a      	cmp	r3, #10
 80022e6:	d123      	bne.n	8002330 <HAL_UART_RxCpltCallback+0x56c>
 80022e8:	4b27      	ldr	r3, [pc, #156]	; (8002388 <HAL_UART_RxCpltCallback+0x5c4>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b2c      	cmp	r3, #44	; 0x2c
 80022ee:	d11f      	bne.n	8002330 <HAL_UART_RxCpltCallback+0x56c>
				gps.day[0]=time_buff[0];
 80022f0:	4b23      	ldr	r3, [pc, #140]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 80022f6:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 80022fa:	785a      	ldrb	r2, [r3, #1]
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 80022fe:	705a      	strb	r2, [r3, #1]
				gps.month[0]=time_buff[2];
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 8002302:	789a      	ldrb	r2, [r3, #2]
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 8002306:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[3];
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 800230a:	78da      	ldrb	r2, [r3, #3]
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 800230e:	711a      	strb	r2, [r3, #4]
				gps.year[0]=time_buff[4];
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 8002312:	791a      	ldrb	r2, [r3, #4]
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 8002316:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[5];
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 800231a:	795a      	ldrb	r2, [r3, #5]
 800231c:	4b17      	ldr	r3, [pc, #92]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 800231e:	71da      	strb	r2, [r3, #7]
				year_str[0]=time_buff[4];
 8002320:	4b17      	ldr	r3, [pc, #92]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 8002322:	791a      	ldrb	r2, [r3, #4]
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_UART_RxCpltCallback+0x5cc>)
 8002326:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[5];
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_UART_RxCpltCallback+0x5bc>)
 800232a:	795a      	ldrb	r2, [r3, #5]
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_UART_RxCpltCallback+0x5cc>)
 800232e:	705a      	strb	r2, [r3, #1]
			}
		}
		//printf("buff=%c\tcount=%d\tzpt=%d\tind=%d\tTipe_Mes=%d\n\r",buff[0],count,zpt,ind,Tipe_Mes);
		//printf("crc_hx=%s\t crc=%d\t crc_buff=%s\t dec=%d\n\r",crc_hx,crc,crc_buff,dec);
		dataReceived=1;
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_UART_RxCpltCallback+0x5d0>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

		if( dataTransmitted != 0 ) {
 8002336:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_UART_RxCpltCallback+0x5d4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_UART_RxCpltCallback+0x590>

			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 800233e:	2201      	movs	r2, #1
 8002340:	4911      	ldr	r1, [pc, #68]	; (8002388 <HAL_UART_RxCpltCallback+0x5c4>)
 8002342:	4816      	ldr	r0, [pc, #88]	; (800239c <HAL_UART_RxCpltCallback+0x5d8>)
 8002344:	f003 ff4e 	bl	80061e4 <HAL_UART_Transmit_IT>

			dataReceived=0;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_UART_RxCpltCallback+0x5d0>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_UART_RxCpltCallback+0x5d4>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT (&huart7, (uint8_t *)buff, 1);
 8002354:	2201      	movs	r2, #1
 8002356:	490c      	ldr	r1, [pc, #48]	; (8002388 <HAL_UART_RxCpltCallback+0x5c4>)
 8002358:	4811      	ldr	r0, [pc, #68]	; (80023a0 <HAL_UART_RxCpltCallback+0x5dc>)
 800235a:	f003 ffb1 	bl	80062c0 <HAL_UART_Receive_IT>
		gps.errors[1]=ERRORS;
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_UART_RxCpltCallback+0x5e0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_UART_RxCpltCallback+0x5b8>)
 8002366:	761a      	strb	r2, [r3, #24]
		count++;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_UART_RxCpltCallback+0x5e4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <HAL_UART_RxCpltCallback+0x5e4>)
 8002370:	6013      	str	r3, [r2, #0]
	}
}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20004c30 	.word	0x20004c30
 8002380:	20000cdc 	.word	0x20000cdc
 8002384:	20000cc0 	.word	0x20000cc0
 8002388:	20000cec 	.word	0x20000cec
 800238c:	20000ccc 	.word	0x20000ccc
 8002390:	20000cf0 	.word	0x20000cf0
 8002394:	20000000 	.word	0x20000000
 8002398:	20000004 	.word	0x20000004
 800239c:	20004cf8 	.word	0x20004cf8
 80023a0:	20004c50 	.word	0x20004c50
 80023a4:	20000cb0 	.word	0x20000cb0
 80023a8:	20000cd4 	.word	0x20000cd4

080023ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

	if(huart == &huart6) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <HAL_UART_TxCpltCallback+0x3c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d111      	bne.n	80023e0 <HAL_UART_TxCpltCallback+0x34>

		dataTransmitted=1;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_UART_TxCpltCallback+0x40>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

		if( dataReceived != 0 ) {
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_UART_TxCpltCallback+0x44>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_UART_TxCpltCallback+0x34>
			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 80023ca:	2201      	movs	r2, #1
 80023cc:	4909      	ldr	r1, [pc, #36]	; (80023f4 <HAL_UART_TxCpltCallback+0x48>)
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <HAL_UART_TxCpltCallback+0x3c>)
 80023d0:	f003 ff08 	bl	80061e4 <HAL_UART_Transmit_IT>
			dataReceived=0;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_UART_TxCpltCallback+0x44>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <HAL_UART_TxCpltCallback+0x40>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
		}
	}
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20004cf8 	.word	0x20004cf8
 80023ec:	20000004 	.word	0x20000004
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000cec 	.word	0x20000cec

080023f8 <Hex_to_dec>:

char Hex_to_dec(char hex[2]){
 80023f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
    int i;
    int dig; /*to store digit*/
    int cont = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
    dec = 0;
 8002406:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <Hex_to_dec+0x108>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7fd feff 	bl	8000210 <strlen>
 8002412:	4603      	mov	r3, r0
 8002414:	3b01      	subs	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e060      	b.n	80024dc <Hex_to_dec+0xe4>
        switch (hex[i]) {
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	3b41      	subs	r3, #65	; 0x41
 8002424:	2b05      	cmp	r3, #5
 8002426:	d821      	bhi.n	800246c <Hex_to_dec+0x74>
 8002428:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <Hex_to_dec+0x38>)
 800242a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242e:	bf00      	nop
 8002430:	08002449 	.word	0x08002449
 8002434:	0800244f 	.word	0x0800244f
 8002438:	08002455 	.word	0x08002455
 800243c:	0800245b 	.word	0x0800245b
 8002440:	08002461 	.word	0x08002461
 8002444:	08002467 	.word	0x08002467
        case 'A':
            dig = 10;
 8002448:	230a      	movs	r3, #10
 800244a:	613b      	str	r3, [r7, #16]
            break;
 800244c:	e014      	b.n	8002478 <Hex_to_dec+0x80>
        case 'B':
            dig = 11;
 800244e:	230b      	movs	r3, #11
 8002450:	613b      	str	r3, [r7, #16]
            break;
 8002452:	e011      	b.n	8002478 <Hex_to_dec+0x80>
        case 'C':
            dig = 12;
 8002454:	230c      	movs	r3, #12
 8002456:	613b      	str	r3, [r7, #16]
            break;
 8002458:	e00e      	b.n	8002478 <Hex_to_dec+0x80>
        case 'D':
            dig = 13;
 800245a:	230d      	movs	r3, #13
 800245c:	613b      	str	r3, [r7, #16]
            break;
 800245e:	e00b      	b.n	8002478 <Hex_to_dec+0x80>
        case 'E':
            dig = 14;
 8002460:	230e      	movs	r3, #14
 8002462:	613b      	str	r3, [r7, #16]
            break;
 8002464:	e008      	b.n	8002478 <Hex_to_dec+0x80>
        case 'F':
            dig = 15;
 8002466:	230f      	movs	r3, #15
 8002468:	613b      	str	r3, [r7, #16]
            break;
 800246a:	e005      	b.n	8002478 <Hex_to_dec+0x80>
        default:
            dig = hex[i] - 0x30;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3b30      	subs	r3, #48	; 0x30
 8002476:	613b      	str	r3, [r7, #16]
        }
        dec = dec + (dig)*pow((double)16, (double)cont);
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <Hex_to_dec+0x108>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe f87b 	bl	8000578 <__aeabi_i2d>
 8002482:	4604      	mov	r4, r0
 8002484:	460d      	mov	r5, r1
 8002486:	6938      	ldr	r0, [r7, #16]
 8002488:	f7fe f876 	bl	8000578 <__aeabi_i2d>
 800248c:	4680      	mov	r8, r0
 800248e:	4689      	mov	r9, r1
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7fe f871 	bl	8000578 <__aeabi_i2d>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	ec43 2b11 	vmov	d1, r2, r3
 800249e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80024f8 <Hex_to_dec+0x100>
 80024a2:	f019 fb61 	bl	801bb68 <pow>
 80024a6:	ec53 2b10 	vmov	r2, r3, d0
 80024aa:	4640      	mov	r0, r8
 80024ac:	4649      	mov	r1, r9
 80024ae:	f7fe f8cd 	bl	800064c <__aeabi_dmul>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4620      	mov	r0, r4
 80024b8:	4629      	mov	r1, r5
 80024ba:	f7fd ff11 	bl	80002e0 <__adddf3>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7fe fb71 	bl	8000bac <__aeabi_d2iz>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a0c      	ldr	r2, [pc, #48]	; (8002500 <Hex_to_dec+0x108>)
 80024ce:	6013      	str	r3, [r2, #0]
        cont++;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3301      	adds	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3b01      	subs	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da9b      	bge.n	800241a <Hex_to_dec+0x22>
    }
    return dec;
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <Hex_to_dec+0x108>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024f2:	bf00      	nop
 80024f4:	f3af 8000 	nop.w
 80024f8:	00000000 	.word	0x00000000
 80024fc:	40300000 	.word	0x40300000
 8002500:	20004cd4 	.word	0x20004cd4

08002504 <calc_crc>:


char calc_crc(char c,int cnt){
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
	if (c=='*'){
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	2b2a      	cmp	r3, #42	; 0x2a
 8002514:	d108      	bne.n	8002528 <calc_crc+0x24>
		start_crc=0;
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <calc_crc+0xa0>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
		crc_pars=1;
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <calc_crc+0xa4>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]
		z=0;
 8002522:	4b22      	ldr	r3, [pc, #136]	; (80025ac <calc_crc+0xa8>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
	}
	if(start_crc==1){
 8002528:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <calc_crc+0xa0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <calc_crc+0x38>
		crc^=c;
 8002530:	79fa      	ldrb	r2, [r7, #7]
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <calc_crc+0xac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4053      	eors	r3, r2
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <calc_crc+0xac>)
 800253a:	6013      	str	r3, [r2, #0]
	}
	if(crc_pars==1&&c!='*'&&z<=1){
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <calc_crc+0xa4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d110      	bne.n	8002566 <calc_crc+0x62>
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2b2a      	cmp	r3, #42	; 0x2a
 8002548:	d00d      	beq.n	8002566 <calc_crc+0x62>
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <calc_crc+0xa8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	dc09      	bgt.n	8002566 <calc_crc+0x62>
		crc_buff[z]=c;
 8002552:	4b16      	ldr	r3, [pc, #88]	; (80025ac <calc_crc+0xa8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4917      	ldr	r1, [pc, #92]	; (80025b4 <calc_crc+0xb0>)
 8002558:	79fa      	ldrb	r2, [r7, #7]
 800255a:	54ca      	strb	r2, [r1, r3]
		z++;
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <calc_crc+0xa8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <calc_crc+0xa8>)
 8002564:	6013      	str	r3, [r2, #0]
	}
	if(c=='\n'){
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b0a      	cmp	r3, #10
 800256a:	d10a      	bne.n	8002582 <calc_crc+0x7e>
		Hex_to_dec(crc_buff);
 800256c:	4811      	ldr	r0, [pc, #68]	; (80025b4 <calc_crc+0xb0>)
 800256e:	f7ff ff43 	bl	80023f8 <Hex_to_dec>
		if(crc==dec){
 8002572:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <calc_crc+0xac>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <calc_crc+0xb4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d101      	bne.n	8002582 <calc_crc+0x7e>
			//Test++;
			return 1;
 800257e:	2301      	movs	r3, #1
 8002580:	e00c      	b.n	800259c <calc_crc+0x98>
		}
	}
	if(cnt==0){
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d108      	bne.n	800259a <calc_crc+0x96>
		start_crc=1;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <calc_crc+0xa0>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]
		crc_pars=0;
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <calc_crc+0xa4>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
		crc=0;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <calc_crc+0xac>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
	}
//	printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
	return 0;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000cc4 	.word	0x20000cc4
 80025a8:	20000cd8 	.word	0x20000cd8
 80025ac:	20000cc8 	.word	0x20000cc8
 80025b0:	20000cd0 	.word	0x20000cd0
 80025b4:	20000ce8 	.word	0x20000ce8
 80025b8:	20004cd4 	.word	0x20004cd4

080025bc <rtc_read>:

time_t rtc_read(void) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b092      	sub	sp, #72	; 0x48
 80025c0:	af00      	add	r7, sp, #0
	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	struct tm timeinfo;

	hrtc.Instance = RTC;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <rtc_read+0x70>)
 80025c4:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <rtc_read+0x74>)
 80025c6:	601a      	str	r2, [r3, #0]

	// Read actual date and time
	HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 80025c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025cc:	2200      	movs	r2, #0
 80025ce:	4619      	mov	r1, r3
 80025d0:	4816      	ldr	r0, [pc, #88]	; (800262c <rtc_read+0x70>)
 80025d2:	f003 f85f 	bl	8005694 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 80025d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025da:	2200      	movs	r2, #0
 80025dc:	4619      	mov	r1, r3
 80025de:	4813      	ldr	r0, [pc, #76]	; (800262c <rtc_read+0x70>)
 80025e0:	f003 f95e 	bl	80058a0 <HAL_RTC_GetDate>

	// Setup a tm structure based on the RTC
	// monday==1 sunday==7
	timeinfo.tm_wday = dateStruct.WeekDay;
 80025e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80025e8:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 80025ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80025ee:	613b      	str	r3, [r7, #16]
	timeinfo.tm_mday = dateStruct.Date;
 80025f0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80025f4:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_year = dateStruct.Year + 100;
 80025f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025fa:	3364      	adds	r3, #100	; 0x64
 80025fc:	617b      	str	r3, [r7, #20]
	timeinfo.tm_hour = timeStruct.Hours;
 80025fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002602:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_min = timeStruct.Minutes;
 8002604:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002608:	607b      	str	r3, [r7, #4]
	timeinfo.tm_sec = timeStruct.Seconds;
 800260a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800260e:	603b      	str	r3, [r7, #0]
	//printf("tm_wday=%d\t\n",timeinfo.tm_wday);

	// Convert to timestamp
	time_t t = mktime(&timeinfo);
 8002610:	463b      	mov	r3, r7
 8002612:	4618      	mov	r0, r3
 8002614:	f012 fde2 	bl	80151dc <mktime>
 8002618:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

	return t;
 800261c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	3748      	adds	r7, #72	; 0x48
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20004cd8 	.word	0x20004cd8
 8002630:	40002800 	.word	0x40002800

08002634 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800263c:	f005 f8ee 	bl	800781c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002640:	2001      	movs	r0, #1
 8002642:	f005 fde7 	bl	8008214 <osDelay>
 8002646:	e7fb      	b.n	8002640 <StartDefaultTask+0xc>

08002648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800265a:	f000 fa61 	bl	8002b20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40001000 	.word	0x40001000

0800266c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
}
 8002672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002674:	e7fe      	b.n	8002674 <Error_Handler+0x8>
	...

08002678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_MspInit+0x4c>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <HAL_MspInit+0x4c>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_MspInit+0x4c>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	607b      	str	r3, [r7, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_MspInit+0x4c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_MspInit+0x4c>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a0:	6453      	str	r3, [r2, #68]	; 0x44
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_MspInit+0x4c>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	210f      	movs	r1, #15
 80026b2:	f06f 0001 	mvn.w	r0, #1
 80026b6:	f000 fb2f 	bl	8002d18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <HAL_RTC_MspInit+0x2c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d105      	bne.n	80026e6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_RTC_MspInit+0x30>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <HAL_RTC_MspInit+0x30>)
 80026e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40002800 	.word	0x40002800
 80026f8:	40023800 	.word	0x40023800

080026fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 031c 	add.w	r3, r7, #28
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a36      	ldr	r2, [pc, #216]	; (80027f4 <HAL_UART_MspInit+0xf8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d130      	bne.n	8002780 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800271e:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a35      	ldr	r2, [pc, #212]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 8002724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a2f      	ldr	r2, [pc, #188]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800274e:	23c0      	movs	r3, #192	; 0xc0
 8002750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800275e:	2308      	movs	r3, #8
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002762:	f107 031c 	add.w	r3, r7, #28
 8002766:	4619      	mov	r1, r3
 8002768:	4824      	ldr	r0, [pc, #144]	; (80027fc <HAL_UART_MspInit+0x100>)
 800276a:	f001 fb81 	bl	8003e70 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2105      	movs	r1, #5
 8002772:	2052      	movs	r0, #82	; 0x52
 8002774:	f000 fad0 	bl	8002d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002778:	2052      	movs	r0, #82	; 0x52
 800277a:	f000 fae9 	bl	8002d50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800277e:	e034      	b.n	80027ea <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <HAL_UART_MspInit+0x104>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d12f      	bne.n	80027ea <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 8002790:	f043 0320 	orr.w	r3, r3, #32
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_UART_MspInit+0xfc>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80027ba:	23c0      	movs	r3, #192	; 0xc0
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027ca:	2308      	movs	r3, #8
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	480b      	ldr	r0, [pc, #44]	; (8002804 <HAL_UART_MspInit+0x108>)
 80027d6:	f001 fb4b 	bl	8003e70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2105      	movs	r1, #5
 80027de:	2047      	movs	r0, #71	; 0x47
 80027e0:	f000 fa9a 	bl	8002d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80027e4:	2047      	movs	r0, #71	; 0x47
 80027e6:	f000 fab3 	bl	8002d50 <HAL_NVIC_EnableIRQ>
}
 80027ea:	bf00      	nop
 80027ec:	3730      	adds	r7, #48	; 0x30
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40007800 	.word	0x40007800
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40021400 	.word	0x40021400
 8002800:	40011400 	.word	0x40011400
 8002804:	40020800 	.word	0x40020800

08002808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002818:	2200      	movs	r2, #0
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	2036      	movs	r0, #54	; 0x36
 800281e:	f000 fa7b 	bl	8002d18 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002822:	2036      	movs	r0, #54	; 0x36
 8002824:	f000 fa94 	bl	8002d50 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002828:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <HAL_InitTick+0xa0>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <HAL_InitTick+0xa0>)
 800282e:	f043 0310 	orr.w	r3, r3, #16
 8002832:	6413      	str	r3, [r2, #64]	; 0x40
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <HAL_InitTick+0xa0>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002840:	f107 0210 	add.w	r2, r7, #16
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f002 f9b0 	bl	8004bb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002850:	f002 f986 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8002854:	4603      	mov	r3, r0
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	4a13      	ldr	r2, [pc, #76]	; (80028ac <HAL_InitTick+0xa4>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0c9b      	lsrs	r3, r3, #18
 8002864:	3b01      	subs	r3, #1
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_InitTick+0xa8>)
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <HAL_InitTick+0xac>)
 800286c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_InitTick+0xa8>)
 8002870:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002874:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002876:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <HAL_InitTick+0xa8>)
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_InitTick+0xa8>)
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_InitTick+0xa8>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002888:	4809      	ldr	r0, [pc, #36]	; (80028b0 <HAL_InitTick+0xa8>)
 800288a:	f003 f8e9 	bl	8005a60 <HAL_TIM_Base_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d104      	bne.n	800289e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002894:	4806      	ldr	r0, [pc, #24]	; (80028b0 <HAL_InitTick+0xa8>)
 8002896:	f003 f945 	bl	8005b24 <HAL_TIM_Base_Start_IT>
 800289a:	4603      	mov	r3, r0
 800289c:	e000      	b.n	80028a0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3730      	adds	r7, #48	; 0x30
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	431bde83 	.word	0x431bde83
 80028b0:	20004da0 	.word	0x20004da0
 80028b4:	40001000 	.word	0x40001000

080028b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <NMI_Handler+0x4>

080028be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c2:	e7fe      	b.n	80028c2 <HardFault_Handler+0x4>

080028c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <MemManage_Handler+0x4>

080028ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <BusFault_Handler+0x4>

080028d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <UsageFault_Handler+0x4>

080028d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <TIM6_DAC_IRQHandler+0x10>)
 80028ea:	f003 f993 	bl	8005c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20004da0 	.word	0x20004da0

080028f8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <ETH_IRQHandler+0x10>)
 80028fe:	f000 fea9 	bl	8003654 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20006708 	.word	0x20006708

0800290c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <USART6_IRQHandler+0x10>)
 8002912:	f003 fd23 	bl	800635c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20004cf8 	.word	0x20004cf8

08002920 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
//	  } else {
//	    uart7_handler();
//	  }
//	  return;
  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <UART7_IRQHandler+0x10>)
 8002926:	f003 fd19 	bl	800635c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20004c50 	.word	0x20004c50

08002934 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
	return 1;
 8002938:	2301      	movs	r3, #1
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <_kill>:

int _kill(int pid, int sig)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <_kill+0x20>)
 8002950:	2216      	movs	r2, #22
 8002952:	601a      	str	r2, [r3, #0]
	return -1;
 8002954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	2000b654 	.word	0x2000b654

08002968 <_exit>:

void _exit (int status)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ffe5 	bl	8002944 <_kill>
	while (1) {}		/* Make sure we hang here */
 800297a:	e7fe      	b.n	800297a <_exit+0x12>

0800297c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	e00a      	b.n	80029a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800298e:	f3af 8000 	nop.w
 8002992:	4601      	mov	r1, r0
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	60ba      	str	r2, [r7, #8]
 800299a:	b2ca      	uxtb	r2, r1
 800299c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	dbf0      	blt.n	800298e <_read+0x12>
	}

return len;
 80029ac:	687b      	ldr	r3, [r7, #4]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
	return -1;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029de:	605a      	str	r2, [r3, #4]
	return 0;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <_isatty>:

int _isatty(int file)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
	return 1;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <_sbrk+0x5c>)
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <_sbrk+0x60>)
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <_sbrk+0x64>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <_sbrk+0x64>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <_sbrk+0x68>)
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d205      	bcs.n	8002a5c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002a50:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <_sbrk+0x6c>)
 8002a52:	220c      	movs	r2, #12
 8002a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e009      	b.n	8002a70 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <_sbrk+0x64>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <_sbrk+0x64>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <_sbrk+0x64>)
 8002a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	20050000 	.word	0x20050000
 8002a80:	00000400 	.word	0x00000400
 8002a84:	20000cf8 	.word	0x20000cf8
 8002a88:	2000b668 	.word	0x2000b668
 8002a8c:	2000b654 	.word	0x2000b654

08002a90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <SystemInit+0x20>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <SystemInit+0x20>)
 8002a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ab8:	480d      	ldr	r0, [pc, #52]	; (8002af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aba:	490e      	ldr	r1, [pc, #56]	; (8002af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002abc:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac0:	e002      	b.n	8002ac8 <LoopCopyDataInit>

08002ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac6:	3304      	adds	r3, #4

08002ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002acc:	d3f9      	bcc.n	8002ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ace:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ad0:	4c0b      	ldr	r4, [pc, #44]	; (8002b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad4:	e001      	b.n	8002ada <LoopFillZerobss>

08002ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad8:	3204      	adds	r2, #4

08002ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002adc:	d3fb      	bcc.n	8002ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ade:	f7ff ffd7 	bl	8002a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ae2:	f012 fa41 	bl	8014f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ae6:	f7fe fa65 	bl	8000fb4 <main>
  bx  lr    
 8002aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002aec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af4:	20000a40 	.word	0x20000a40
  ldr r2, =_sidata
 8002af8:	0801fd5c 	.word	0x0801fd5c
  ldr r2, =_sbss
 8002afc:	20000a40 	.word	0x20000a40
  ldr r4, =_ebss
 8002b00:	2000b668 	.word	0x2000b668

08002b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b04:	e7fe      	b.n	8002b04 <ADC_IRQHandler>

08002b06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0a:	2003      	movs	r0, #3
 8002b0c:	f000 f8f9 	bl	8002d02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7ff fe79 	bl	8002808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b16:	f7ff fdaf 	bl	8002678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_IncTick+0x20>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_IncTick+0x24>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <HAL_IncTick+0x24>)
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000018 	.word	0x20000018
 8002b44:	20004dec 	.word	0x20004dec

08002b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <HAL_GetTick+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20004dec 	.word	0x20004dec

08002b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b68:	f7ff ffee 	bl	8002b48 <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d005      	beq.n	8002b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_Delay+0x44>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b86:	bf00      	nop
 8002b88:	f7ff ffde 	bl	8002b48 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d8f7      	bhi.n	8002b88 <HAL_Delay+0x28>
  {
  }
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000018 	.word	0x20000018

08002ba8 <__NVIC_SetPriorityGrouping>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <__NVIC_SetPriorityGrouping+0x40>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <__NVIC_SetPriorityGrouping+0x44>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd6:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <__NVIC_SetPriorityGrouping+0x40>)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	60d3      	str	r3, [r2, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00
 8002bec:	05fa0000 	.word	0x05fa0000

08002bf0 <__NVIC_GetPriorityGrouping>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf4:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	f003 0307 	and.w	r3, r3, #7
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_EnableIRQ>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db0b      	blt.n	8002c36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	4907      	ldr	r1, [pc, #28]	; (8002c44 <__NVIC_EnableIRQ+0x38>)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000e100 	.word	0xe000e100

08002c48 <__NVIC_SetPriority>:
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	6039      	str	r1, [r7, #0]
 8002c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	db0a      	blt.n	8002c72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	490c      	ldr	r1, [pc, #48]	; (8002c94 <__NVIC_SetPriority+0x4c>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	0112      	lsls	r2, r2, #4
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c70:	e00a      	b.n	8002c88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4908      	ldr	r1, [pc, #32]	; (8002c98 <__NVIC_SetPriority+0x50>)
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	3b04      	subs	r3, #4
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	440b      	add	r3, r1
 8002c86:	761a      	strb	r2, [r3, #24]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000e100 	.word	0xe000e100
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <NVIC_EncodePriority>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b089      	sub	sp, #36	; 0x24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f1c3 0307 	rsb	r3, r3, #7
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	bf28      	it	cs
 8002cba:	2304      	movcs	r3, #4
 8002cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d902      	bls.n	8002ccc <NVIC_EncodePriority+0x30>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3b03      	subs	r3, #3
 8002cca:	e000      	b.n	8002cce <NVIC_EncodePriority+0x32>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	401a      	ands	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	43d9      	mvns	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	4313      	orrs	r3, r2
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3724      	adds	r7, #36	; 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ff4c 	bl	8002ba8 <__NVIC_SetPriorityGrouping>
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d2a:	f7ff ff61 	bl	8002bf0 <__NVIC_GetPriorityGrouping>
 8002d2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	6978      	ldr	r0, [r7, #20]
 8002d36:	f7ff ffb1 	bl	8002c9c <NVIC_EncodePriority>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff ff80 	bl	8002c48 <__NVIC_SetPriority>
}
 8002d48:	bf00      	nop
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff54 	bl	8002c0c <__NVIC_EnableIRQ>
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d7a:	f7ff fee5 	bl	8002b48 <HAL_GetTick>
 8002d7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d008      	beq.n	8002d9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e052      	b.n	8002e44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0216 	bic.w	r2, r2, #22
 8002dac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <HAL_DMA_Abort+0x62>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0208 	bic.w	r2, r2, #8
 8002ddc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dee:	e013      	b.n	8002e18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002df0:	f7ff feaa 	bl	8002b48 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d90c      	bls.n	8002e18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2203      	movs	r2, #3
 8002e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e015      	b.n	8002e44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e4      	bne.n	8002df0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	223f      	movs	r2, #63	; 0x3f
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d004      	beq.n	8002e6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00c      	b.n	8002e84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2205      	movs	r2, #5
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002ea0:	4ba9      	ldr	r3, [pc, #676]	; (8003148 <HAL_ETH_Init+0x2b8>)
 8002ea2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e181      	b.n	80031ba <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f004 fdd4 	bl	8007a78 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed0:	4b9e      	ldr	r3, [pc, #632]	; (800314c <HAL_ETH_Init+0x2bc>)
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	4a9d      	ldr	r2, [pc, #628]	; (800314c <HAL_ETH_Init+0x2bc>)
 8002ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eda:	6453      	str	r3, [r2, #68]	; 0x44
 8002edc:	4b9b      	ldr	r3, [pc, #620]	; (800314c <HAL_ETH_Init+0x2bc>)
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ee8:	4b99      	ldr	r3, [pc, #612]	; (8003150 <HAL_ETH_Init+0x2c0>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a98      	ldr	r2, [pc, #608]	; (8003150 <HAL_ETH_Init+0x2c0>)
 8002eee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ef2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002ef4:	4b96      	ldr	r3, [pc, #600]	; (8003150 <HAL_ETH_Init+0x2c0>)
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4994      	ldr	r1, [pc, #592]	; (8003150 <HAL_ETH_Init+0x2c0>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f18:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f1a:	f7ff fe15 	bl	8002b48 <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f20:	e011      	b.n	8002f46 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002f22:	f7ff fe11 	bl	8002b48 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f30:	d909      	bls.n	8002f46 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2203      	movs	r2, #3
 8002f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e139      	b.n	80031ba <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e4      	bne.n	8002f22 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f023 031c 	bic.w	r3, r3, #28
 8002f66:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002f68:	f001 fdee 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8002f6c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4a78      	ldr	r2, [pc, #480]	; (8003154 <HAL_ETH_Init+0x2c4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d908      	bls.n	8002f88 <HAL_ETH_Init+0xf8>
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4a77      	ldr	r2, [pc, #476]	; (8003158 <HAL_ETH_Init+0x2c8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d804      	bhi.n	8002f88 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	e027      	b.n	8002fd8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	4a73      	ldr	r2, [pc, #460]	; (8003158 <HAL_ETH_Init+0x2c8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d908      	bls.n	8002fa2 <HAL_ETH_Init+0x112>
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4a6d      	ldr	r2, [pc, #436]	; (8003148 <HAL_ETH_Init+0x2b8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d204      	bcs.n	8002fa2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f043 030c 	orr.w	r3, r3, #12
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	e01a      	b.n	8002fd8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	4a68      	ldr	r2, [pc, #416]	; (8003148 <HAL_ETH_Init+0x2b8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d303      	bcc.n	8002fb2 <HAL_ETH_Init+0x122>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4a6b      	ldr	r2, [pc, #428]	; (800315c <HAL_ETH_Init+0x2cc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d911      	bls.n	8002fd6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4a69      	ldr	r2, [pc, #420]	; (800315c <HAL_ETH_Init+0x2cc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d908      	bls.n	8002fcc <HAL_ETH_Init+0x13c>
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4a68      	ldr	r2, [pc, #416]	; (8003160 <HAL_ETH_Init+0x2d0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d804      	bhi.n	8002fcc <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e005      	b.n	8002fd8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f043 0310 	orr.w	r3, r3, #16
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e000      	b.n	8002fd8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002fd6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002fe0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fc17 	bl	800381a <HAL_ETH_WritePHYRegister>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002ff6:	6939      	ldr	r1, [r7, #16]
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fca3 	bl	8003944 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0d7      	b.n	80031ba <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800300a:	20ff      	movs	r0, #255	; 0xff
 800300c:	f7ff fda8 	bl	8002b60 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80a5 	beq.w	8003164 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800301a:	f7ff fd95 	bl	8002b48 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	461a      	mov	r2, r3
 8003026:	2101      	movs	r1, #1
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fb8e 	bl	800374a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800302e:	f7ff fd8b 	bl	8002b48 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d90f      	bls.n	8003060 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003044:	6939      	ldr	r1, [r7, #16]
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fc7c 	bl	8003944 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0ac      	b.n	80031ba <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0da      	beq.n	8003020 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800306a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800306e:	2100      	movs	r1, #0
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fbd2 	bl	800381a <HAL_ETH_WritePHYRegister>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00b      	beq.n	8003094 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003080:	6939      	ldr	r1, [r7, #16]
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fc5e 	bl	8003944 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003090:	2301      	movs	r3, #1
 8003092:	e092      	b.n	80031ba <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003094:	f7ff fd58 	bl	8002b48 <HAL_GetTick>
 8003098:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	461a      	mov	r2, r3
 80030a0:	2101      	movs	r1, #1
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fb51 	bl	800374a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80030a8:	f7ff fd4e 	bl	8002b48 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d90f      	bls.n	80030da <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80030be:	6939      	ldr	r1, [r7, #16]
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fc3f 	bl	8003944 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e06f      	b.n	80031ba <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0da      	beq.n	800309a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80030e4:	f107 030c 	add.w	r3, r7, #12
 80030e8:	461a      	mov	r2, r3
 80030ea:	2110      	movs	r1, #16
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fb2c 	bl	800374a <HAL_ETH_ReadPHYRegister>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80030fc:	6939      	ldr	r1, [r7, #16]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fc20 	bl	8003944 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800310c:	2301      	movs	r3, #1
 800310e:	e054      	b.n	80031ba <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	e002      	b.n	800312a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	e035      	b.n	80031a8 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	e030      	b.n	80031a8 <HAL_ETH_Init+0x318>
 8003146:	bf00      	nop
 8003148:	03938700 	.word	0x03938700
 800314c:	40023800 	.word	0x40023800
 8003150:	40013800 	.word	0x40013800
 8003154:	01312cff 	.word	0x01312cff
 8003158:	02160ebf 	.word	0x02160ebf
 800315c:	05f5e0ff 	.word	0x05f5e0ff
 8003160:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003174:	4313      	orrs	r3, r2
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	2100      	movs	r1, #0
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fb4c 	bl	800381a <HAL_ETH_WritePHYRegister>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800318c:	6939      	ldr	r1, [r7, #16]
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fbd8 	bl	8003944 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e00c      	b.n	80031ba <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80031a0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80031a4:	f7ff fcdc 	bl	8002b60 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80031a8:	6939      	ldr	r1, [r7, #16]
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fbca 	bl	8003944 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop

080031c4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_ETH_DMATxDescListInit+0x20>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e052      	b.n	800328a <HAL_ETH_DMATxDescListInit+0xc6>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e030      	b.n	8003262 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	015b      	lsls	r3, r3, #5
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	4413      	add	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003210:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	461a      	mov	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	3b01      	subs	r3, #1
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	429a      	cmp	r2, r3
 8003242:	d208      	bcs.n	8003256 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3301      	adds	r3, #1
 8003248:	015b      	lsls	r3, r3, #5
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4413      	add	r3, r2
 800324e:	461a      	mov	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	60da      	str	r2, [r3, #12]
 8003254:	e002      	b.n	800325c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3301      	adds	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d3ca      	bcc.n	8003200 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6819      	ldr	r1, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	f241 0310 	movw	r3, #4112	; 0x1010
 8003274:	440b      	add	r3, r1
 8003276:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_ETH_DMARxDescListInit+0x20>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e056      	b.n	8003364 <HAL_ETH_DMARxDescListInit+0xce>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	e034      	b.n	800333c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	015b      	lsls	r3, r3, #5
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	4413      	add	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032e2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80032ea:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	461a      	mov	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	3b01      	subs	r3, #1
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	429a      	cmp	r2, r3
 800331c:	d208      	bcs.n	8003330 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3301      	adds	r3, #1
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	4413      	add	r3, r2
 8003328:	461a      	mov	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	e002      	b.n	8003336 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3301      	adds	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d3c6      	bcc.n	80032d2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	f241 030c 	movw	r3, #4108	; 0x100c
 800334e:	440b      	add	r3, r1
 8003350:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_ETH_TransmitFrame+0x24>
 8003390:	2302      	movs	r3, #2
 8003392:	e0cd      	b.n	8003530 <HAL_ETH_TransmitFrame+0x1c0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0b8      	b.n	8003530 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	da09      	bge.n	80033dc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2212      	movs	r2, #18
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0a9      	b.n	8003530 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d915      	bls.n	8003412 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	4a54      	ldr	r2, [pc, #336]	; (800353c <HAL_ETH_TransmitFrame+0x1cc>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0a9b      	lsrs	r3, r3, #10
 80033f0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	4b51      	ldr	r3, [pc, #324]	; (800353c <HAL_ETH_TransmitFrame+0x1cc>)
 80033f6:	fba3 1302 	umull	r1, r3, r3, r2
 80033fa:	0a9b      	lsrs	r3, r3, #10
 80033fc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3301      	adds	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e001      	b.n	8003416 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d11c      	bne.n	8003456 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800342a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003436:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003446:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	461a      	mov	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
 8003454:	e04b      	b.n	80034ee <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e044      	b.n	80034e6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800346a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003480:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800348a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3b01      	subs	r3, #1
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	429a      	cmp	r2, r3
 8003494:	d116      	bne.n	80034c4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034a4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	4a25      	ldr	r2, [pc, #148]	; (8003540 <HAL_ETH_TransmitFrame+0x1d0>)
 80034aa:	fb02 f203 	mul.w	r2, r2, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80034b6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80034c2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034d2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	461a      	mov	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	3301      	adds	r3, #1
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3b6      	bcc.n	800345c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	f241 0314 	movw	r3, #4116	; 0x1014
 80034f6:	4413      	add	r3, r2
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	f241 0314 	movw	r3, #4116	; 0x1014
 800350a:	4413      	add	r3, r2
 800350c:	2204      	movs	r2, #4
 800350e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	f241 0304 	movw	r3, #4100	; 0x1004
 8003518:	4413      	add	r3, r2
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	ac02b00b 	.word	0xac02b00b
 8003540:	fffffa0c 	.word	0xfffffa0c

08003544 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800355a:	2302      	movs	r3, #2
 800355c:	e074      	b.n	8003648 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800356e:	e05a      	b.n	8003626 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3301      	adds	r3, #1
 8003574:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003584:	d10d      	bne.n	80035a2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	461a      	mov	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
 80035a0:	e041      	b.n	8003626 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	461a      	mov	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	629a      	str	r2, [r3, #40]	; 0x28
 80035c6:	e02e      	b.n	8003626 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d103      	bne.n	80035ea <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80035f6:	1f1a      	subs	r2, r3, #4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	461a      	mov	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	e010      	b.n	8003648 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	db02      	blt.n	8003636 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d99c      	bls.n	8003570 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f241 0314 	movw	r3, #4116	; 0x1014
 8003664:	4413      	add	r3, r2
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	d112      	bne.n	8003696 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f004 faa3 	bl	8007bbc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	f241 0314 	movw	r3, #4116	; 0x1014
 800367e:	4413      	add	r3, r2
 8003680:	2240      	movs	r2, #64	; 0x40
 8003682:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003694:	e01b      	b.n	80036ce <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	f241 0314 	movw	r3, #4116	; 0x1014
 800369e:	4413      	add	r3, r2
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d111      	bne.n	80036ce <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f839 	bl	8003722 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	f241 0314 	movw	r3, #4116	; 0x1014
 80036b8:	4413      	add	r3, r2
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	f241 0314 	movw	r3, #4116	; 0x1014
 80036d6:	4413      	add	r3, r2
 80036d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036dc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	f241 0314 	movw	r3, #4116	; 0x1014
 80036e6:	4413      	add	r3, r2
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f2:	d112      	bne.n	800371a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f81e 	bl	8003736 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	f241 0314 	movw	r3, #4116	; 0x1014
 8003702:	4413      	add	r3, r2
 8003704:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003708:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	460b      	mov	r3, r1
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b82      	cmp	r3, #130	; 0x82
 800376a:	d101      	bne.n	8003770 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
 800376e:	e050      	b.n	8003812 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2282      	movs	r2, #130	; 0x82
 8003774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f003 031c 	and.w	r3, r3, #28
 8003786:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8a1b      	ldrh	r3, [r3, #16]
 800378c:	02db      	lsls	r3, r3, #11
 800378e:	b29b      	uxth	r3, r3
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003796:	897b      	ldrh	r3, [r7, #10]
 8003798:	019b      	lsls	r3, r3, #6
 800379a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f023 0302 	bic.w	r3, r3, #2
 80037aa:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80037bc:	f7ff f9c4 	bl	8002b48 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80037c2:	e015      	b.n	80037f0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80037c4:	f7ff f9c0 	bl	8002b48 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d2:	d309      	bcc.n	80037e8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e014      	b.n	8003812 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e4      	bne.n	80037c4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	b29b      	uxth	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	460b      	mov	r3, r1
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b42      	cmp	r3, #66	; 0x42
 800383a:	d101      	bne.n	8003840 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
 800383e:	e04e      	b.n	80038de <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2242      	movs	r2, #66	; 0x42
 8003844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 031c 	and.w	r3, r3, #28
 8003856:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8a1b      	ldrh	r3, [r3, #16]
 800385c:	02db      	lsls	r3, r3, #11
 800385e:	b29b      	uxth	r3, r3
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003866:	897b      	ldrh	r3, [r7, #10]
 8003868:	019b      	lsls	r3, r3, #6
 800386a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f043 0302 	orr.w	r3, r3, #2
 800387a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003896:	f7ff f957 	bl	8002b48 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800389c:	e015      	b.n	80038ca <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800389e:	f7ff f953 	bl	8002b48 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d309      	bcc.n	80038c2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e00d      	b.n	80038de <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e4      	bne.n	800389e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_ETH_Start+0x16>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e01f      	b.n	800393c <HAL_ETH_Start+0x56>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fa1b 	bl	8003d48 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fa35 	bl	8003d82 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fa7f 	bl	8003e1c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fa4c 	bl	8003dbc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fa61 	bl	8003dec <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b0b0      	sub	sp, #192	; 0xc0
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d007      	beq.n	800396a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003960:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003968:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800396a:	2300      	movs	r3, #0
 800396c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800396e:	2300      	movs	r3, #0
 8003970:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003972:	2300      	movs	r3, #0
 8003974:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003976:	2300      	movs	r3, #0
 8003978:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800397a:	2300      	movs	r3, #0
 800397c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800397e:	2300      	movs	r3, #0
 8003980:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800398a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398e:	663b      	str	r3, [r7, #96]	; 0x60
 8003990:	e001      	b.n	8003996 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003992:	2300      	movs	r3, #0
 8003994:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800399a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800399c:	2300      	movs	r3, #0
 800399e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80039a0:	2300      	movs	r3, #0
 80039a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80039b0:	2340      	movs	r3, #64	; 0x40
 80039b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003a18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a1c:	4bab      	ldr	r3, [pc, #684]	; (8003ccc <ETH_MACDMAConfig+0x388>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003a24:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003a28:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003a2c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003a30:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003a36:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003a3a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003a3e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003a44:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003a48:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003a4c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003a50:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003a54:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003a58:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003a5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a6c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7ff f871 	bl	8002b60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a86:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003a88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003a8c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003a8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003a90:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003a92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003a96:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003a9c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003aa2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003aa8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003aac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003ab4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ab6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f7ff f84c 	bl	8002b60 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ad0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ada:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003ae4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003af0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003af4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003af8:	4013      	ands	r3, r2
 8003afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003afe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b02:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003b04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003b08:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003b0e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003b14:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003b1a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003b1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003b20:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003b22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b34:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b40:	2001      	movs	r0, #1
 8003b42:	f7ff f80d 	bl	8002b60 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b4e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003b50:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003b54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f7fe fff8 	bl	8002b60 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b78:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b82:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003b88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b8c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003b9e:	2304      	movs	r3, #4
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bac:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003bae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bb8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	f241 0318 	movw	r3, #4120	; 0x1018
 8003bce:	4413      	add	r3, r2
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003bd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <ETH_MACDMAConfig+0x38c>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003be2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003be4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003be6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003be8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003bea:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003bec:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003bee:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003bf0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003bf2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003bf4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003bf6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003bfa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003bfe:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003c02:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003c04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	f241 0318 	movw	r3, #4120	; 0x1018
 8003c16:	4413      	add	r3, r2
 8003c18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c1c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	f241 0318 	movw	r3, #4120	; 0x1018
 8003c26:	4413      	add	r3, r2
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f7fe ff96 	bl	8002b60 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	f241 0318 	movw	r3, #4120	; 0x1018
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c42:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003c48:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003c4c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003c50:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003c54:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8003c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c58:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003c5a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003c5e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c6c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	f7fe ff6f 	bl	8002b60 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c8e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d10d      	bne.n	8003cb4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	f241 031c 	movw	r3, #4124	; 0x101c
 8003ca0:	4413      	add	r3, r2
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6811      	ldr	r1, [r2, #0]
 8003ca8:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <ETH_MACDMAConfig+0x390>)
 8003caa:	431a      	orrs	r2, r3
 8003cac:	f241 031c 	movw	r3, #4124	; 0x101c
 8003cb0:	440b      	add	r3, r1
 8003cb2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2100      	movs	r1, #0
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f80b 	bl	8003cd8 <ETH_MACAddressConfig>
}
 8003cc2:	bf00      	nop
 8003cc4:	37c0      	adds	r7, #192	; 0xc0
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	ff20810f 	.word	0xff20810f
 8003cd0:	f8de3f23 	.word	0xf8de3f23
 8003cd4:	00010040 	.word	0x00010040

08003cd8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3305      	adds	r3, #5
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	3204      	adds	r2, #4
 8003cf0:	7812      	ldrb	r2, [r2, #0]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <ETH_MACAddressConfig+0x68>)
 8003cfa:	4413      	add	r3, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3303      	adds	r3, #3
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	061a      	lsls	r2, r3, #24
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3301      	adds	r3, #1
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	7812      	ldrb	r2, [r2, #0]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <ETH_MACAddressConfig+0x6c>)
 8003d2a:	4413      	add	r3, r2
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	6013      	str	r3, [r2, #0]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40028040 	.word	0x40028040
 8003d44:	40028044 	.word	0x40028044

08003d48 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0208 	orr.w	r2, r2, #8
 8003d62:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7fe fef7 	bl	8002b60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0204 	orr.w	r2, r2, #4
 8003d9c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003da6:	2001      	movs	r0, #1
 8003da8:	f7fe feda 	bl	8002b60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	f241 0318 	movw	r3, #4120	; 0x1018
 8003dcc:	4413      	add	r3, r2
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6811      	ldr	r1, [r2, #0]
 8003dd4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003dd8:	f241 0318 	movw	r3, #4120	; 0x1018
 8003ddc:	440b      	add	r3, r1
 8003dde:	601a      	str	r2, [r3, #0]
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	f241 0318 	movw	r3, #4120	; 0x1018
 8003dfc:	4413      	add	r3, r2
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6811      	ldr	r1, [r2, #0]
 8003e04:	f043 0202 	orr.w	r2, r3, #2
 8003e08:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e0c:	440b      	add	r3, r1
 8003e0e:	601a      	str	r2, [r3, #0]
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e30:	4413      	add	r3, r2
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6811      	ldr	r1, [r2, #0]
 8003e38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e3c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e40:	440b      	add	r3, r1
 8003e42:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e4c:	4413      	add	r3, r2
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e52:	2001      	movs	r0, #1
 8003e54:	f7fe fe84 	bl	8002b60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6819      	ldr	r1, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e62:	440b      	add	r3, r1
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e175      	b.n	800417c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f040 8164 	bne.w	8004176 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d005      	beq.n	8003ec6 <HAL_GPIO_Init+0x56>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d130      	bne.n	8003f28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003efc:	2201      	movs	r2, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 0201 	and.w	r2, r3, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d017      	beq.n	8003f64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2203      	movs	r2, #3
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d123      	bne.n	8003fb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	08da      	lsrs	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3208      	adds	r2, #8
 8003f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	08da      	lsrs	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	69b9      	ldr	r1, [r7, #24]
 8003fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0203 	and.w	r2, r3, #3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80be 	beq.w	8004176 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffa:	4b66      	ldr	r3, [pc, #408]	; (8004194 <HAL_GPIO_Init+0x324>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	4a65      	ldr	r2, [pc, #404]	; (8004194 <HAL_GPIO_Init+0x324>)
 8004000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004004:	6453      	str	r3, [r2, #68]	; 0x44
 8004006:	4b63      	ldr	r3, [pc, #396]	; (8004194 <HAL_GPIO_Init+0x324>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004012:	4a61      	ldr	r2, [pc, #388]	; (8004198 <HAL_GPIO_Init+0x328>)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	3302      	adds	r3, #2
 800401a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	220f      	movs	r2, #15
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4013      	ands	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a58      	ldr	r2, [pc, #352]	; (800419c <HAL_GPIO_Init+0x32c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d037      	beq.n	80040ae <HAL_GPIO_Init+0x23e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a57      	ldr	r2, [pc, #348]	; (80041a0 <HAL_GPIO_Init+0x330>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d031      	beq.n	80040aa <HAL_GPIO_Init+0x23a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a56      	ldr	r2, [pc, #344]	; (80041a4 <HAL_GPIO_Init+0x334>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02b      	beq.n	80040a6 <HAL_GPIO_Init+0x236>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a55      	ldr	r2, [pc, #340]	; (80041a8 <HAL_GPIO_Init+0x338>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d025      	beq.n	80040a2 <HAL_GPIO_Init+0x232>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a54      	ldr	r2, [pc, #336]	; (80041ac <HAL_GPIO_Init+0x33c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01f      	beq.n	800409e <HAL_GPIO_Init+0x22e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a53      	ldr	r2, [pc, #332]	; (80041b0 <HAL_GPIO_Init+0x340>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d019      	beq.n	800409a <HAL_GPIO_Init+0x22a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a52      	ldr	r2, [pc, #328]	; (80041b4 <HAL_GPIO_Init+0x344>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_GPIO_Init+0x226>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a51      	ldr	r2, [pc, #324]	; (80041b8 <HAL_GPIO_Init+0x348>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00d      	beq.n	8004092 <HAL_GPIO_Init+0x222>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a50      	ldr	r2, [pc, #320]	; (80041bc <HAL_GPIO_Init+0x34c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <HAL_GPIO_Init+0x21e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a4f      	ldr	r2, [pc, #316]	; (80041c0 <HAL_GPIO_Init+0x350>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_GPIO_Init+0x21a>
 8004086:	2309      	movs	r3, #9
 8004088:	e012      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800408a:	230a      	movs	r3, #10
 800408c:	e010      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800408e:	2308      	movs	r3, #8
 8004090:	e00e      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 8004092:	2307      	movs	r3, #7
 8004094:	e00c      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 8004096:	2306      	movs	r3, #6
 8004098:	e00a      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800409a:	2305      	movs	r3, #5
 800409c:	e008      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 800409e:	2304      	movs	r3, #4
 80040a0:	e006      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040a2:	2303      	movs	r3, #3
 80040a4:	e004      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e002      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_GPIO_Init+0x240>
 80040ae:	2300      	movs	r3, #0
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	f002 0203 	and.w	r2, r2, #3
 80040b6:	0092      	lsls	r2, r2, #2
 80040b8:	4093      	lsls	r3, r2
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80040c0:	4935      	ldr	r1, [pc, #212]	; (8004198 <HAL_GPIO_Init+0x328>)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	3302      	adds	r3, #2
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ce:	4b3d      	ldr	r3, [pc, #244]	; (80041c4 <HAL_GPIO_Init+0x354>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040f2:	4a34      	ldr	r2, [pc, #208]	; (80041c4 <HAL_GPIO_Init+0x354>)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f8:	4b32      	ldr	r3, [pc, #200]	; (80041c4 <HAL_GPIO_Init+0x354>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800411c:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <HAL_GPIO_Init+0x354>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004122:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <HAL_GPIO_Init+0x354>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004146:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <HAL_GPIO_Init+0x354>)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800414c:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <HAL_GPIO_Init+0x354>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	43db      	mvns	r3, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4013      	ands	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <HAL_GPIO_Init+0x354>)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3301      	adds	r3, #1
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b0f      	cmp	r3, #15
 8004180:	f67f ae86 	bls.w	8003e90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3724      	adds	r7, #36	; 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800
 8004198:	40013800 	.word	0x40013800
 800419c:	40020000 	.word	0x40020000
 80041a0:	40020400 	.word	0x40020400
 80041a4:	40020800 	.word	0x40020800
 80041a8:	40020c00 	.word	0x40020c00
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40021400 	.word	0x40021400
 80041b4:	40021800 	.word	0x40021800
 80041b8:	40021c00 	.word	0x40021c00
 80041bc:	40022000 	.word	0x40022000
 80041c0:	40022400 	.word	0x40022400
 80041c4:	40013c00 	.word	0x40013c00

080041c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]
 80041d4:	4613      	mov	r3, r2
 80041d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041d8:	787b      	ldrb	r3, [r7, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041de:	887a      	ldrh	r2, [r7, #2]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80041e4:	e003      	b.n	80041ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80041e6:	887b      	ldrh	r3, [r7, #2]
 80041e8:	041a      	lsls	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	619a      	str	r2, [r3, #24]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420a:	6013      	str	r3, [r2, #0]
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40007000 	.word	0x40007000

0800421c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004230:	6413      	str	r3, [r2, #64]	; 0x40
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800423e:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800424a:	f7fe fc7d 	bl	8002b48 <HAL_GetTick>
 800424e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004250:	e009      	b.n	8004266 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004252:	f7fe fc79 	bl	8002b48 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004260:	d901      	bls.n	8004266 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e022      	b.n	80042ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004266:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004272:	d1ee      	bne.n	8004252 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004274:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a0f      	ldr	r2, [pc, #60]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800427a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800427e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004280:	f7fe fc62 	bl	8002b48 <HAL_GetTick>
 8004284:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004286:	e009      	b.n	800429c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004288:	f7fe fc5e 	bl	8002b48 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004296:	d901      	bls.n	800429c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e007      	b.n	80042ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042a8:	d1ee      	bne.n	8004288 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40007000 	.word	0x40007000

080042bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042c4:	2300      	movs	r3, #0
 80042c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e291      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8087 	beq.w	80043ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042e0:	4b96      	ldr	r3, [pc, #600]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d00c      	beq.n	8004306 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ec:	4b93      	ldr	r3, [pc, #588]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d112      	bne.n	800431e <HAL_RCC_OscConfig+0x62>
 80042f8:	4b90      	ldr	r3, [pc, #576]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004304:	d10b      	bne.n	800431e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004306:	4b8d      	ldr	r3, [pc, #564]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d06c      	beq.n	80043ec <HAL_RCC_OscConfig+0x130>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d168      	bne.n	80043ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e26b      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004326:	d106      	bne.n	8004336 <HAL_RCC_OscConfig+0x7a>
 8004328:	4b84      	ldr	r3, [pc, #528]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a83      	ldr	r2, [pc, #524]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800432e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	e02e      	b.n	8004394 <HAL_RCC_OscConfig+0xd8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x9c>
 800433e:	4b7f      	ldr	r3, [pc, #508]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a7e      	ldr	r2, [pc, #504]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b7c      	ldr	r3, [pc, #496]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7b      	ldr	r2, [pc, #492]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e01d      	b.n	8004394 <HAL_RCC_OscConfig+0xd8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0xc0>
 8004362:	4b76      	ldr	r3, [pc, #472]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a75      	ldr	r2, [pc, #468]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b73      	ldr	r3, [pc, #460]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a72      	ldr	r2, [pc, #456]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e00b      	b.n	8004394 <HAL_RCC_OscConfig+0xd8>
 800437c:	4b6f      	ldr	r3, [pc, #444]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a6e      	ldr	r2, [pc, #440]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	4b6c      	ldr	r3, [pc, #432]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a6b      	ldr	r2, [pc, #428]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800438e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fe fbd4 	bl	8002b48 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fe fbd0 	bl	8002b48 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e21f      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b6:	4b61      	ldr	r3, [pc, #388]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0xe8>
 80043c2:	e014      	b.n	80043ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fe fbc0 	bl	8002b48 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043cc:	f7fe fbbc 	bl	8002b48 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e20b      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043de:	4b57      	ldr	r3, [pc, #348]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x110>
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d069      	beq.n	80044ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043fa:	4b50      	ldr	r3, [pc, #320]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004406:	4b4d      	ldr	r3, [pc, #308]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b08      	cmp	r3, #8
 8004410:	d11c      	bne.n	800444c <HAL_RCC_OscConfig+0x190>
 8004412:	4b4a      	ldr	r3, [pc, #296]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d116      	bne.n	800444c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441e:	4b47      	ldr	r3, [pc, #284]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_RCC_OscConfig+0x17a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d001      	beq.n	8004436 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e1df      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004436:	4b41      	ldr	r3, [pc, #260]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	493d      	ldr	r1, [pc, #244]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444a:	e040      	b.n	80044ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d023      	beq.n	800449c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004454:	4b39      	ldr	r3, [pc, #228]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a38      	ldr	r2, [pc, #224]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fe fb72 	bl	8002b48 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004468:	f7fe fb6e 	bl	8002b48 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e1bd      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447a:	4b30      	ldr	r3, [pc, #192]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b2d      	ldr	r3, [pc, #180]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4929      	ldr	r1, [pc, #164]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
 800449a:	e018      	b.n	80044ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449c:	4b27      	ldr	r3, [pc, #156]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a26      	ldr	r2, [pc, #152]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fe fb4e 	bl	8002b48 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b0:	f7fe fb4a 	bl	8002b48 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e199      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c2:	4b1e      	ldr	r3, [pc, #120]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d038      	beq.n	800454c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d019      	beq.n	8004516 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80044e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e6:	4a15      	ldr	r2, [pc, #84]	; (800453c <HAL_RCC_OscConfig+0x280>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ee:	f7fe fb2b 	bl	8002b48 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f6:	f7fe fb27 	bl	8002b48 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e176      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCC_OscConfig+0x23a>
 8004514:	e01a      	b.n	800454c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004516:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_RCC_OscConfig+0x280>)
 8004518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451a:	4a08      	ldr	r2, [pc, #32]	; (800453c <HAL_RCC_OscConfig+0x280>)
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fe fb11 	bl	8002b48 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452a:	f7fe fb0d 	bl	8002b48 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d903      	bls.n	8004540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e15c      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
 800453c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004540:	4b91      	ldr	r3, [pc, #580]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ee      	bne.n	800452a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 80a4 	beq.w	80046a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455a:	4b8b      	ldr	r3, [pc, #556]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10d      	bne.n	8004582 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	4b88      	ldr	r3, [pc, #544]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a87      	ldr	r2, [pc, #540]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
 8004572:	4b85      	ldr	r3, [pc, #532]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800457e:	2301      	movs	r3, #1
 8004580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004582:	4b82      	ldr	r3, [pc, #520]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d118      	bne.n	80045c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800458e:	4b7f      	ldr	r3, [pc, #508]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a7e      	ldr	r2, [pc, #504]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 8004594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459a:	f7fe fad5 	bl	8002b48 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a2:	f7fe fad1 	bl	8002b48 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b64      	cmp	r3, #100	; 0x64
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e120      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b4:	4b75      	ldr	r3, [pc, #468]	; (800478c <HAL_RCC_OscConfig+0x4d0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d106      	bne.n	80045d6 <HAL_RCC_OscConfig+0x31a>
 80045c8:	4b6f      	ldr	r3, [pc, #444]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a6e      	ldr	r2, [pc, #440]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
 80045d4:	e02d      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x33c>
 80045de:	4b6a      	ldr	r3, [pc, #424]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	4a69      	ldr	r2, [pc, #420]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ea:	4b67      	ldr	r3, [pc, #412]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a66      	ldr	r2, [pc, #408]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 80045f0:	f023 0304 	bic.w	r3, r3, #4
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70
 80045f6:	e01c      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b05      	cmp	r3, #5
 80045fe:	d10c      	bne.n	800461a <HAL_RCC_OscConfig+0x35e>
 8004600:	4b61      	ldr	r3, [pc, #388]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	4a60      	ldr	r2, [pc, #384]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004606:	f043 0304 	orr.w	r3, r3, #4
 800460a:	6713      	str	r3, [r2, #112]	; 0x70
 800460c:	4b5e      	ldr	r3, [pc, #376]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a5d      	ldr	r2, [pc, #372]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
 8004618:	e00b      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
 800461a:	4b5b      	ldr	r3, [pc, #364]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	4a5a      	ldr	r2, [pc, #360]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	6713      	str	r3, [r2, #112]	; 0x70
 8004626:	4b58      	ldr	r3, [pc, #352]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a57      	ldr	r2, [pc, #348]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 800462c:	f023 0304 	bic.w	r3, r3, #4
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d015      	beq.n	8004666 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463a:	f7fe fa85 	bl	8002b48 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004640:	e00a      	b.n	8004658 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fe fa81 	bl	8002b48 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e0ce      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004658:	4b4b      	ldr	r3, [pc, #300]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ee      	beq.n	8004642 <HAL_RCC_OscConfig+0x386>
 8004664:	e014      	b.n	8004690 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004666:	f7fe fa6f 	bl	8002b48 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466c:	e00a      	b.n	8004684 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fe fa6b 	bl	8002b48 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	; 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e0b8      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004684:	4b40      	ldr	r3, [pc, #256]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1ee      	bne.n	800466e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d105      	bne.n	80046a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004696:	4b3c      	ldr	r3, [pc, #240]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	4a3b      	ldr	r2, [pc, #236]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 800469c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80a4 	beq.w	80047f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ac:	4b36      	ldr	r3, [pc, #216]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 030c 	and.w	r3, r3, #12
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d06b      	beq.n	8004790 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d149      	bne.n	8004754 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c0:	4b31      	ldr	r3, [pc, #196]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a30      	ldr	r2, [pc, #192]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 80046c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fe fa3c 	bl	8002b48 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fe fa38 	bl	8002b48 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e087      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	4b28      	ldr	r3, [pc, #160]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	019b      	lsls	r3, r3, #6
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	3b01      	subs	r3, #1
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	4313      	orrs	r3, r2
 8004718:	4a1b      	ldr	r2, [pc, #108]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 800471a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800471e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004720:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a18      	ldr	r2, [pc, #96]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fe fa0c 	bl	8002b48 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004734:	f7fe fa08 	bl	8002b48 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e057      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0x478>
 8004752:	e04f      	b.n	80047f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 800475a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800475e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fe f9f2 	bl	8002b48 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004768:	f7fe f9ee 	bl	8002b48 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e03d      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	4b03      	ldr	r3, [pc, #12]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x4ac>
 8004786:	e035      	b.n	80047f4 <HAL_RCC_OscConfig+0x538>
 8004788:	40023800 	.word	0x40023800
 800478c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004790:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <HAL_RCC_OscConfig+0x544>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d028      	beq.n	80047f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d121      	bne.n	80047f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d11a      	bne.n	80047f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d111      	bne.n	80047f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	085b      	lsrs	r3, r3, #1
 80047d8:	3b01      	subs	r3, #1
 80047da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d107      	bne.n	80047f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800

08004804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0d0      	b.n	80049be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800481c:	4b6a      	ldr	r3, [pc, #424]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d910      	bls.n	800484c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b67      	ldr	r3, [pc, #412]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 020f 	bic.w	r2, r3, #15
 8004832:	4965      	ldr	r1, [pc, #404]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0b8      	b.n	80049be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004864:	4b59      	ldr	r3, [pc, #356]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a58      	ldr	r2, [pc, #352]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 800486a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800486e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800487c:	4b53      	ldr	r3, [pc, #332]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4a52      	ldr	r2, [pc, #328]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 8004882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004886:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004888:	4b50      	ldr	r3, [pc, #320]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	494d      	ldr	r1, [pc, #308]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d040      	beq.n	8004928 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	4b47      	ldr	r3, [pc, #284]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d115      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e07f      	b.n	80049be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c6:	4b41      	ldr	r3, [pc, #260]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e073      	b.n	80049be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d6:	4b3d      	ldr	r3, [pc, #244]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e06b      	b.n	80049be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e6:	4b39      	ldr	r3, [pc, #228]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f023 0203 	bic.w	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4936      	ldr	r1, [pc, #216]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f8:	f7fe f926 	bl	8002b48 <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004900:	f7fe f922 	bl	8002b48 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e053      	b.n	80049be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004916:	4b2d      	ldr	r3, [pc, #180]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 020c 	and.w	r2, r3, #12
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	429a      	cmp	r2, r3
 8004926:	d1eb      	bne.n	8004900 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004928:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d210      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 020f 	bic.w	r2, r3, #15
 800493e:	4922      	ldr	r1, [pc, #136]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e032      	b.n	80049be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b19      	ldr	r3, [pc, #100]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4916      	ldr	r1, [pc, #88]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	490e      	ldr	r1, [pc, #56]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004996:	f000 f821 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490a      	ldr	r1, [pc, #40]	; (80049d0 <HAL_RCC_ClockConfig+0x1cc>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <HAL_RCC_ClockConfig+0x1d0>)
 80049b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCC_ClockConfig+0x1d4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fd ff26 	bl	8002808 <HAL_InitTick>

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40023c00 	.word	0x40023c00
 80049cc:	40023800 	.word	0x40023800
 80049d0:	0801f704 	.word	0x0801f704
 80049d4:	20000010 	.word	0x20000010
 80049d8:	20000014 	.word	0x20000014

080049dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049dc:	b5b0      	push	{r4, r5, r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80049e2:	2100      	movs	r1, #0
 80049e4:	6079      	str	r1, [r7, #4]
 80049e6:	2100      	movs	r1, #0
 80049e8:	60f9      	str	r1, [r7, #12]
 80049ea:	2100      	movs	r1, #0
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80049ee:	2100      	movs	r1, #0
 80049f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f2:	4952      	ldr	r1, [pc, #328]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x160>)
 80049f4:	6889      	ldr	r1, [r1, #8]
 80049f6:	f001 010c 	and.w	r1, r1, #12
 80049fa:	2908      	cmp	r1, #8
 80049fc:	d00d      	beq.n	8004a1a <HAL_RCC_GetSysClockFreq+0x3e>
 80049fe:	2908      	cmp	r1, #8
 8004a00:	f200 8094 	bhi.w	8004b2c <HAL_RCC_GetSysClockFreq+0x150>
 8004a04:	2900      	cmp	r1, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_RCC_GetSysClockFreq+0x32>
 8004a08:	2904      	cmp	r1, #4
 8004a0a:	d003      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x38>
 8004a0c:	e08e      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a0e:	4b4c      	ldr	r3, [pc, #304]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x164>)
 8004a10:	60bb      	str	r3, [r7, #8]
      break;
 8004a12:	e08e      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a14:	4b4b      	ldr	r3, [pc, #300]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a16:	60bb      	str	r3, [r7, #8]
      break;
 8004a18:	e08b      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a1a:	4948      	ldr	r1, [pc, #288]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x160>)
 8004a1c:	6849      	ldr	r1, [r1, #4]
 8004a1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004a22:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a24:	4945      	ldr	r1, [pc, #276]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x160>)
 8004a26:	6849      	ldr	r1, [r1, #4]
 8004a28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004a2c:	2900      	cmp	r1, #0
 8004a2e:	d024      	beq.n	8004a7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a30:	4942      	ldr	r1, [pc, #264]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x160>)
 8004a32:	6849      	ldr	r1, [r1, #4]
 8004a34:	0989      	lsrs	r1, r1, #6
 8004a36:	4608      	mov	r0, r1
 8004a38:	f04f 0100 	mov.w	r1, #0
 8004a3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004a40:	f04f 0500 	mov.w	r5, #0
 8004a44:	ea00 0204 	and.w	r2, r0, r4
 8004a48:	ea01 0305 	and.w	r3, r1, r5
 8004a4c:	493d      	ldr	r1, [pc, #244]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a4e:	fb01 f003 	mul.w	r0, r1, r3
 8004a52:	2100      	movs	r1, #0
 8004a54:	fb01 f102 	mul.w	r1, r1, r2
 8004a58:	1844      	adds	r4, r0, r1
 8004a5a:	493a      	ldr	r1, [pc, #232]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a5c:	fba2 0101 	umull	r0, r1, r2, r1
 8004a60:	1863      	adds	r3, r4, r1
 8004a62:	4619      	mov	r1, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	f7fc f8c6 	bl	8000bfc <__aeabi_uldivmod>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4613      	mov	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e04a      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7a:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x160>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	099b      	lsrs	r3, r3, #6
 8004a80:	461a      	mov	r2, r3
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	ea02 0400 	and.w	r4, r2, r0
 8004a92:	ea03 0501 	and.w	r5, r3, r1
 8004a96:	4620      	mov	r0, r4
 8004a98:	4629      	mov	r1, r5
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	014b      	lsls	r3, r1, #5
 8004aa4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004aa8:	0142      	lsls	r2, r0, #5
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	1b00      	subs	r0, r0, r4
 8004ab0:	eb61 0105 	sbc.w	r1, r1, r5
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	018b      	lsls	r3, r1, #6
 8004abe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ac2:	0182      	lsls	r2, r0, #6
 8004ac4:	1a12      	subs	r2, r2, r0
 8004ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	00d9      	lsls	r1, r3, #3
 8004ad4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ad8:	00d0      	lsls	r0, r2, #3
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	1912      	adds	r2, r2, r4
 8004ae0:	eb45 0303 	adc.w	r3, r5, r3
 8004ae4:	f04f 0000 	mov.w	r0, #0
 8004ae8:	f04f 0100 	mov.w	r1, #0
 8004aec:	0299      	lsls	r1, r3, #10
 8004aee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004af2:	0290      	lsls	r0, r2, #10
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	f7fc f87a 	bl	8000bfc <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x160>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	60bb      	str	r3, [r7, #8]
      break;
 8004b2a:	e002      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <HAL_RCC_GetSysClockFreq+0x164>)
 8004b2e:	60bb      	str	r3, [r7, #8]
      break;
 8004b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b32:	68bb      	ldr	r3, [r7, #8]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	00f42400 	.word	0x00f42400
 8004b44:	017d7840 	.word	0x017d7840

08004b48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b4c:	4b03      	ldr	r3, [pc, #12]	; (8004b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000010 	.word	0x20000010

08004b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b64:	f7ff fff0 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0a9b      	lsrs	r3, r3, #10
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4903      	ldr	r1, [pc, #12]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	0801f714 	.word	0x0801f714

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b8c:	f7ff ffdc 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0b5b      	lsrs	r3, r3, #13
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4903      	ldr	r1, [pc, #12]	; (8004bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	0801f714 	.word	0x0801f714

08004bb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	220f      	movs	r2, #15
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bc0:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 0203 	and.w	r2, r3, #3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004be4:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	08db      	lsrs	r3, r3, #3
 8004bea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <HAL_RCC_GetClockConfig+0x60>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 020f 	and.w	r2, r3, #15
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	601a      	str	r2, [r3, #0]
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40023c00 	.word	0x40023c00

08004c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d012      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c3c:	4b69      	ldr	r3, [pc, #420]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4a68      	ldr	r2, [pc, #416]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c46:	6093      	str	r3, [r2, #8]
 8004c48:	4b66      	ldr	r3, [pc, #408]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c50:	4964      	ldr	r1, [pc, #400]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d017      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c6e:	4b5d      	ldr	r3, [pc, #372]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	4959      	ldr	r1, [pc, #356]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d017      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004caa:	4b4e      	ldr	r3, [pc, #312]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	494a      	ldr	r1, [pc, #296]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc8:	d101      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 808b 	beq.w	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cf8:	4b3a      	ldr	r3, [pc, #232]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	4a39      	ldr	r2, [pc, #228]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d02:	6413      	str	r3, [r2, #64]	; 0x40
 8004d04:	4b37      	ldr	r3, [pc, #220]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d10:	4b35      	ldr	r3, [pc, #212]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a34      	ldr	r2, [pc, #208]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1c:	f7fd ff14 	bl	8002b48 <HAL_GetTick>
 8004d20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d24:	f7fd ff10 	bl	8002b48 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e357      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d36:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d42:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d035      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d02e      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d60:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d6a:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d76:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d82:	4a18      	ldr	r2, [pc, #96]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d88:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d114      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fd fed8 	bl	8002b48 <HAL_GetTick>
 8004d98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f7fd fed4 	bl	8002b48 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e319      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0ee      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dca:	d111      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dd8:	4b04      	ldr	r3, [pc, #16]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004dda:	400b      	ands	r3, r1
 8004ddc:	4901      	ldr	r1, [pc, #4]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	608b      	str	r3, [r1, #8]
 8004de2:	e00b      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40007000 	.word	0x40007000
 8004dec:	0ffffcff 	.word	0x0ffffcff
 8004df0:	4bb1      	ldr	r3, [pc, #708]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4ab0      	ldr	r2, [pc, #704]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004df6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dfa:	6093      	str	r3, [r2, #8]
 8004dfc:	4bae      	ldr	r3, [pc, #696]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e08:	49ab      	ldr	r1, [pc, #684]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d010      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e1a:	4ba7      	ldr	r3, [pc, #668]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e20:	4aa5      	ldr	r2, [pc, #660]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e2a:	4ba3      	ldr	r3, [pc, #652]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	49a0      	ldr	r1, [pc, #640]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e48:	4b9b      	ldr	r3, [pc, #620]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e56:	4998      	ldr	r1, [pc, #608]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e6a:	4b93      	ldr	r3, [pc, #588]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e78:	498f      	ldr	r1, [pc, #572]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e8c:	4b8a      	ldr	r3, [pc, #552]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9a:	4987      	ldr	r1, [pc, #540]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eae:	4b82      	ldr	r3, [pc, #520]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	497e      	ldr	r1, [pc, #504]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ed0:	4b79      	ldr	r3, [pc, #484]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	f023 0203 	bic.w	r2, r3, #3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	4976      	ldr	r1, [pc, #472]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ef2:	4b71      	ldr	r3, [pc, #452]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef8:	f023 020c 	bic.w	r2, r3, #12
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f00:	496d      	ldr	r1, [pc, #436]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f14:	4b68      	ldr	r3, [pc, #416]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	4965      	ldr	r1, [pc, #404]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f36:	4b60      	ldr	r3, [pc, #384]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f44:	495c      	ldr	r1, [pc, #368]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f58:	4b57      	ldr	r3, [pc, #348]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	4954      	ldr	r1, [pc, #336]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f7a:	4b4f      	ldr	r3, [pc, #316]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	494b      	ldr	r1, [pc, #300]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f9c:	4b46      	ldr	r3, [pc, #280]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	4943      	ldr	r1, [pc, #268]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004fbe:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fcc:	493a      	ldr	r1, [pc, #232]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fe0:	4b35      	ldr	r3, [pc, #212]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fee:	4932      	ldr	r1, [pc, #200]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d011      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005002:	4b2d      	ldr	r3, [pc, #180]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005010:	4929      	ldr	r1, [pc, #164]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800501c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005020:	d101      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005022:	2301      	movs	r3, #1
 8005024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005032:	2301      	movs	r3, #1
 8005034:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005042:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005050:	4919      	ldr	r1, [pc, #100]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00b      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005064:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005074:	4910      	ldr	r1, [pc, #64]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d006      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80d9 	beq.w	8005242 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005096:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800509a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509c:	f7fd fd54 	bl	8002b48 <HAL_GetTick>
 80050a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050a2:	e00b      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050a4:	f7fd fd50 	bl	8002b48 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	; 0x64
 80050b0:	d904      	bls.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e197      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80050b6:	bf00      	nop
 80050b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050bc:	4b6c      	ldr	r3, [pc, #432]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ed      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d021      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d11d      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050dc:	4b64      	ldr	r3, [pc, #400]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e2:	0c1b      	lsrs	r3, r3, #16
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050ea:	4b61      	ldr	r3, [pc, #388]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f0:	0e1b      	lsrs	r3, r3, #24
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	019a      	lsls	r2, r3, #6
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	041b      	lsls	r3, r3, #16
 8005102:	431a      	orrs	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	061b      	lsls	r3, r3, #24
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	071b      	lsls	r3, r3, #28
 8005110:	4957      	ldr	r1, [pc, #348]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800512c:	d00a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005136:	2b00      	cmp	r3, #0
 8005138:	d02e      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005142:	d129      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005144:	4b4a      	ldr	r3, [pc, #296]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800514a:	0c1b      	lsrs	r3, r3, #16
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005152:	4b47      	ldr	r3, [pc, #284]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005158:	0f1b      	lsrs	r3, r3, #28
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	019a      	lsls	r2, r3, #6
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	061b      	lsls	r3, r3, #24
 8005172:	431a      	orrs	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	071b      	lsls	r3, r3, #28
 8005178:	493d      	ldr	r1, [pc, #244]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005180:	4b3b      	ldr	r3, [pc, #236]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005186:	f023 021f 	bic.w	r2, r3, #31
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	3b01      	subs	r3, #1
 8005190:	4937      	ldr	r1, [pc, #220]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01d      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051a4:	4b32      	ldr	r3, [pc, #200]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051aa:	0e1b      	lsrs	r3, r3, #24
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051b2:	4b2f      	ldr	r3, [pc, #188]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b8:	0f1b      	lsrs	r3, r3, #28
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	019a      	lsls	r2, r3, #6
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	431a      	orrs	r2, r3
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	431a      	orrs	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	071b      	lsls	r3, r3, #28
 80051d8:	4925      	ldr	r1, [pc, #148]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d011      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	019a      	lsls	r2, r3, #6
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	061b      	lsls	r3, r3, #24
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	071b      	lsls	r3, r3, #28
 8005208:	4919      	ldr	r1, [pc, #100]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005210:	4b17      	ldr	r3, [pc, #92]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005216:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800521a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521c:	f7fd fc94 	bl	8002b48 <HAL_GetTick>
 8005220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005224:	f7fd fc90 	bl	8002b48 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	; 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e0d7      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005236:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b01      	cmp	r3, #1
 8005246:	f040 80cd 	bne.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a08      	ldr	r2, [pc, #32]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005256:	f7fd fc77 	bl	8002b48 <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800525c:	e00a      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800525e:	f7fd fc73 	bl	8002b48 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b64      	cmp	r3, #100	; 0x64
 800526a:	d903      	bls.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e0ba      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005270:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005274:	4b5e      	ldr	r3, [pc, #376]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800527c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005280:	d0ed      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d02e      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d12a      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052aa:	4b51      	ldr	r3, [pc, #324]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	0c1b      	lsrs	r3, r3, #16
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052b8:	4b4d      	ldr	r3, [pc, #308]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052be:	0f1b      	lsrs	r3, r3, #28
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	019a      	lsls	r2, r3, #6
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	061b      	lsls	r3, r3, #24
 80052d8:	431a      	orrs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	071b      	lsls	r3, r3, #28
 80052de:	4944      	ldr	r1, [pc, #272]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052e6:	4b42      	ldr	r3, [pc, #264]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	3b01      	subs	r3, #1
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	493d      	ldr	r1, [pc, #244]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d022      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005314:	d11d      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005316:	4b36      	ldr	r3, [pc, #216]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	0e1b      	lsrs	r3, r3, #24
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005324:	4b32      	ldr	r3, [pc, #200]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	0f1b      	lsrs	r3, r3, #28
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	019a      	lsls	r2, r3, #6
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	431a      	orrs	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	061b      	lsls	r3, r3, #24
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	071b      	lsls	r3, r3, #28
 800534a:	4929      	ldr	r1, [pc, #164]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d028      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800535e:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	0e1b      	lsrs	r3, r3, #24
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800536c:	4b20      	ldr	r3, [pc, #128]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	019a      	lsls	r2, r3, #6
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	041b      	lsls	r3, r3, #16
 8005384:	431a      	orrs	r2, r3
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	071b      	lsls	r3, r3, #28
 8005392:	4917      	ldr	r1, [pc, #92]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800539a:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800539c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	4911      	ldr	r1, [pc, #68]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053b0:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a0e      	ldr	r2, [pc, #56]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053bc:	f7fd fbc4 	bl	8002b48 <HAL_GetTick>
 80053c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053c4:	f7fd fbc0 	bl	8002b48 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	; 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e007      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e2:	d1ef      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800

080053f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e081      	b.n	800550a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	7f5b      	ldrb	r3, [r3, #29]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d105      	bne.n	800541c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fd f956 	bl	80026c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	22ca      	movs	r2, #202	; 0xca
 8005428:	625a      	str	r2, [r3, #36]	; 0x24
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2253      	movs	r2, #83	; 0x53
 8005430:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 faac 	bl	8005990 <RTC_EnterInitMode>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	22ff      	movs	r2, #255	; 0xff
 8005444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2204      	movs	r2, #4
 800544a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e05c      	b.n	800550a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6899      	ldr	r1, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b2e      	ldr	r3, [pc, #184]	; (8005514 <HAL_RTC_Init+0x120>)
 800545c:	400b      	ands	r3, r1
 800545e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6899      	ldr	r1, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68d2      	ldr	r2, [r2, #12]
 8005486:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6919      	ldr	r1, [r3, #16]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	041a      	lsls	r2, r3, #16
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054aa:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10e      	bne.n	80054d8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa40 	bl	8005940 <HAL_RTC_WaitForSynchro>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d008      	beq.n	80054d8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	22ff      	movs	r2, #255	; 0xff
 80054cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2204      	movs	r2, #4
 80054d2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e018      	b.n	800550a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0208 	bic.w	r2, r2, #8
 80054e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	22ff      	movs	r2, #255	; 0xff
 8005500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005508:	2300      	movs	r3, #0
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	ff8fffbf 	.word	0xff8fffbf

08005518 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005518:	b590      	push	{r4, r7, lr}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	7f1b      	ldrb	r3, [r3, #28]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_RTC_SetTime+0x1c>
 8005530:	2302      	movs	r3, #2
 8005532:	e0a8      	b.n	8005686 <HAL_RTC_SetTime+0x16e>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2202      	movs	r2, #2
 800553e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d126      	bne.n	8005594 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2200      	movs	r2, #0
 8005558:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fa42 	bl	80059e8 <RTC_ByteToBcd2>
 8005564:	4603      	mov	r3, r0
 8005566:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	785b      	ldrb	r3, [r3, #1]
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fa3b 	bl	80059e8 <RTC_ByteToBcd2>
 8005572:	4603      	mov	r3, r0
 8005574:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005576:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	789b      	ldrb	r3, [r3, #2]
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fa33 	bl	80059e8 <RTC_ByteToBcd2>
 8005582:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005584:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	7b1b      	ldrb	r3, [r3, #12]
 800558c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	e018      	b.n	80055c6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2200      	movs	r2, #0
 80055a6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80055b4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80055ba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	7b1b      	ldrb	r3, [r3, #12]
 80055c0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	22ca      	movs	r2, #202	; 0xca
 80055cc:	625a      	str	r2, [r3, #36]	; 0x24
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2253      	movs	r2, #83	; 0x53
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 f9da 	bl	8005990 <RTC_EnterInitMode>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	22ff      	movs	r2, #255	; 0xff
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2204      	movs	r2, #4
 80055ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e045      	b.n	8005686 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	6979      	ldr	r1, [r7, #20]
 8005600:	4b23      	ldr	r3, [pc, #140]	; (8005690 <HAL_RTC_SetTime+0x178>)
 8005602:	400b      	ands	r3, r1
 8005604:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005614:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6899      	ldr	r1, [r3, #8]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	431a      	orrs	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800563c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d111      	bne.n	8005670 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f977 	bl	8005940 <HAL_RTC_WaitForSynchro>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00b      	beq.n	8005670 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	22ff      	movs	r2, #255	; 0xff
 800565e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2204      	movs	r2, #4
 8005664:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e00a      	b.n	8005686 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	22ff      	movs	r2, #255	; 0xff
 8005676:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005684:	2300      	movs	r3, #0
  }
}
 8005686:	4618      	mov	r0, r3
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	bd90      	pop	{r4, r7, pc}
 800568e:	bf00      	nop
 8005690:	007f7f7f 	.word	0x007f7f7f

08005694 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b22      	ldr	r3, [pc, #136]	; (800574c <HAL_RTC_GetTime+0xb8>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	0c1b      	lsrs	r3, r3, #16
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	0a1b      	lsrs	r3, r3, #8
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	0c1b      	lsrs	r3, r3, #16
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11a      	bne.n	8005742 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f987 	bl	8005a24 <RTC_Bcd2ToByte>
 8005716:	4603      	mov	r3, r0
 8005718:	461a      	mov	r2, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	785b      	ldrb	r3, [r3, #1]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f97e 	bl	8005a24 <RTC_Bcd2ToByte>
 8005728:	4603      	mov	r3, r0
 800572a:	461a      	mov	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	789b      	ldrb	r3, [r3, #2]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 f975 	bl	8005a24 <RTC_Bcd2ToByte>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	007f7f7f 	.word	0x007f7f7f

08005750 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	7f1b      	ldrb	r3, [r3, #28]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_RTC_SetDate+0x1c>
 8005768:	2302      	movs	r3, #2
 800576a:	e092      	b.n	8005892 <HAL_RTC_SetDate+0x142>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2202      	movs	r2, #2
 8005776:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10e      	bne.n	800579c <HAL_RTC_SetDate+0x4c>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b00      	cmp	r3, #0
 8005788:	d008      	beq.n	800579c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	f023 0310 	bic.w	r3, r3, #16
 8005792:	b2db      	uxtb	r3, r3
 8005794:	330a      	adds	r3, #10
 8005796:	b2da      	uxtb	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d11c      	bne.n	80057dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	78db      	ldrb	r3, [r3, #3]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 f91e 	bl	80059e8 <RTC_ByteToBcd2>
 80057ac:	4603      	mov	r3, r0
 80057ae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 f917 	bl	80059e8 <RTC_ByteToBcd2>
 80057ba:	4603      	mov	r3, r0
 80057bc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80057be:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	789b      	ldrb	r3, [r3, #2]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 f90f 	bl	80059e8 <RTC_ByteToBcd2>
 80057ca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80057cc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	e00e      	b.n	80057fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80057e8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80057ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	22ca      	movs	r2, #202	; 0xca
 8005800:	625a      	str	r2, [r3, #36]	; 0x24
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2253      	movs	r2, #83	; 0x53
 8005808:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f8c0 	bl	8005990 <RTC_EnterInitMode>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	22ff      	movs	r2, #255	; 0xff
 800581c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2204      	movs	r2, #4
 8005822:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e031      	b.n	8005892 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	6979      	ldr	r1, [r7, #20]
 8005834:	4b19      	ldr	r3, [pc, #100]	; (800589c <HAL_RTC_SetDate+0x14c>)
 8005836:	400b      	ands	r3, r1
 8005838:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005848:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d111      	bne.n	800587c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f871 	bl	8005940 <HAL_RTC_WaitForSynchro>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00b      	beq.n	800587c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	22ff      	movs	r2, #255	; 0xff
 800586a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2204      	movs	r2, #4
 8005870:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e00a      	b.n	8005892 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	22ff      	movs	r2, #255	; 0xff
 8005882:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005890:	2300      	movs	r3, #0
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	bd90      	pop	{r4, r7, pc}
 800589a:	bf00      	nop
 800589c:	00ffff3f 	.word	0x00ffff3f

080058a0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	4b21      	ldr	r3, [pc, #132]	; (800593c <HAL_RTC_GetDate+0x9c>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	0c1b      	lsrs	r3, r3, #16
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	0a1b      	lsrs	r3, r3, #8
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	0b5b      	lsrs	r3, r3, #13
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d11a      	bne.n	8005930 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	78db      	ldrb	r3, [r3, #3]
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f890 	bl	8005a24 <RTC_Bcd2ToByte>
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 f887 	bl	8005a24 <RTC_Bcd2ToByte>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	789b      	ldrb	r3, [r3, #2]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 f87e 	bl	8005a24 <RTC_Bcd2ToByte>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	00ffff3f 	.word	0x00ffff3f

08005940 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800595a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800595c:	f7fd f8f4 	bl	8002b48 <HAL_GetTick>
 8005960:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005962:	e009      	b.n	8005978 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005964:	f7fd f8f0 	bl	8002b48 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005972:	d901      	bls.n	8005978 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e007      	b.n	8005988 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0ee      	beq.n	8005964 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d119      	bne.n	80059de <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f04f 32ff 	mov.w	r2, #4294967295
 80059b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059b4:	f7fd f8c8 	bl	8002b48 <HAL_GetTick>
 80059b8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059ba:	e009      	b.n	80059d0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80059bc:	f7fd f8c4 	bl	8002b48 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ca:	d901      	bls.n	80059d0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e007      	b.n	80059e0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0ee      	beq.n	80059bc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80059f6:	e005      	b.n	8005a04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	3b0a      	subs	r3, #10
 8005a02:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	2b09      	cmp	r3, #9
 8005a08:	d8f6      	bhi.n	80059f8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	b2db      	uxtb	r3, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	4413      	add	r3, r2
 8005a52:	b2db      	uxtb	r3, r3
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e049      	b.n	8005b06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f841 	bl	8005b0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f000 fa00 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d001      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e054      	b.n	8005be6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d022      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b66:	d01d      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a22      	ldr	r2, [pc, #136]	; (8005bf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d018      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a21      	ldr	r2, [pc, #132]	; (8005bfc <HAL_TIM_Base_Start_IT+0xd8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d013      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00e      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <HAL_TIM_Base_Start_IT+0xe0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d009      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x80>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <HAL_TIM_Base_Start_IT+0xe8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d115      	bne.n	8005bd0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <HAL_TIM_Base_Start_IT+0xec>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b06      	cmp	r3, #6
 8005bb4:	d015      	beq.n	8005be2 <HAL_TIM_Base_Start_IT+0xbe>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbc:	d011      	beq.n	8005be2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bce:	e008      	b.n	8005be2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	e000      	b.n	8005be4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40010400 	.word	0x40010400
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40001800 	.word	0x40001800
 8005c10:	00010007 	.word	0x00010007

08005c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d122      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d11b      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0202 	mvn.w	r2, #2
 8005c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f905 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f8f7 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f908 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d122      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0204 	mvn.w	r2, #4
 8005c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f8db 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f8cd 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f8de 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d122      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d11b      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0208 	mvn.w	r2, #8
 8005ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2204      	movs	r2, #4
 8005cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f8b1 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005d04:	e005      	b.n	8005d12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8a3 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f8b4 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d122      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d11b      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0210 	mvn.w	r2, #16
 8005d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2208      	movs	r2, #8
 8005d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f887 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005d58:	e005      	b.n	8005d66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f879 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f88a 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d10e      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d107      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0201 	mvn.w	r2, #1
 8005d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fc fc58 	bl	8002648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da2:	2b80      	cmp	r3, #128	; 0x80
 8005da4:	d10e      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db0:	2b80      	cmp	r3, #128	; 0x80
 8005db2:	d107      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f91a 	bl	8005ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd2:	d10e      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dde:	2b80      	cmp	r3, #128	; 0x80
 8005de0:	d107      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f90d 	bl	800600c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	d10e      	bne.n	8005e1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	d107      	bne.n	8005e1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f838 	bl	8005e8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d10e      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d107      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f06f 0220 	mvn.w	r2, #32
 8005e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f8cd 	bl	8005fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a40      	ldr	r2, [pc, #256]	; (8005fb8 <TIM_Base_SetConfig+0x114>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d013      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec2:	d00f      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a3d      	ldr	r2, [pc, #244]	; (8005fbc <TIM_Base_SetConfig+0x118>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00b      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a3c      	ldr	r2, [pc, #240]	; (8005fc0 <TIM_Base_SetConfig+0x11c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a3b      	ldr	r2, [pc, #236]	; (8005fc4 <TIM_Base_SetConfig+0x120>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a3a      	ldr	r2, [pc, #232]	; (8005fc8 <TIM_Base_SetConfig+0x124>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d108      	bne.n	8005ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2f      	ldr	r2, [pc, #188]	; (8005fb8 <TIM_Base_SetConfig+0x114>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d02b      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f04:	d027      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2c      	ldr	r2, [pc, #176]	; (8005fbc <TIM_Base_SetConfig+0x118>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d023      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2b      	ldr	r2, [pc, #172]	; (8005fc0 <TIM_Base_SetConfig+0x11c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01f      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2a      	ldr	r2, [pc, #168]	; (8005fc4 <TIM_Base_SetConfig+0x120>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01b      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a29      	ldr	r2, [pc, #164]	; (8005fc8 <TIM_Base_SetConfig+0x124>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d017      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a28      	ldr	r2, [pc, #160]	; (8005fcc <TIM_Base_SetConfig+0x128>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a27      	ldr	r2, [pc, #156]	; (8005fd0 <TIM_Base_SetConfig+0x12c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00f      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a26      	ldr	r2, [pc, #152]	; (8005fd4 <TIM_Base_SetConfig+0x130>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00b      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a25      	ldr	r2, [pc, #148]	; (8005fd8 <TIM_Base_SetConfig+0x134>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d007      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a24      	ldr	r2, [pc, #144]	; (8005fdc <TIM_Base_SetConfig+0x138>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d003      	beq.n	8005f56 <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a23      	ldr	r2, [pc, #140]	; (8005fe0 <TIM_Base_SetConfig+0x13c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d108      	bne.n	8005f68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <TIM_Base_SetConfig+0x114>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_Base_SetConfig+0xf8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a0c      	ldr	r2, [pc, #48]	; (8005fc8 <TIM_Base_SetConfig+0x124>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d103      	bne.n	8005fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	615a      	str	r2, [r3, #20]
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40000400 	.word	0x40000400
 8005fc0:	40000800 	.word	0x40000800
 8005fc4:	40000c00 	.word	0x40000c00
 8005fc8:	40010400 	.word	0x40010400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800
 8005fd8:	40001800 	.word	0x40001800
 8005fdc:	40001c00 	.word	0x40001c00
 8005fe0:	40002000 	.word	0x40002000

08005fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e040      	b.n	80060b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fc fb5a 	bl	80026fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2224      	movs	r2, #36	; 0x24
 800604c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fc5c 	bl	800691c <UART_SetConfig>
 8006064:	4603      	mov	r3, r0
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e022      	b.n	80060b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 feb2 	bl	8006de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800608a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800609a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 ff39 	bl	8006f24 <UART_CheckIdleState>
 80060b2:	4603      	mov	r3, r0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	; 0x28
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	4613      	mov	r3, r2
 80060ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	f040 8081 	bne.w	80061d8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_UART_Transmit+0x26>
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e079      	b.n	80061da <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_UART_Transmit+0x38>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e072      	b.n	80061da <HAL_UART_Transmit+0x11e>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2221      	movs	r2, #33	; 0x21
 8006108:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800610a:	f7fc fd1d 	bl	8002b48 <HAL_GetTick>
 800610e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	88fa      	ldrh	r2, [r7, #6]
 800611c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006128:	d108      	bne.n	800613c <HAL_UART_Transmit+0x80>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	e003      	b.n	8006144 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800614c:	e02c      	b.n	80061a8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2200      	movs	r2, #0
 8006156:	2180      	movs	r1, #128	; 0x80
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 ff16 	bl	8006f8a <UART_WaitOnFlagUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e038      	b.n	80061da <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800617c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	3302      	adds	r3, #2
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	e007      	b.n	8006196 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	3301      	adds	r3, #1
 8006194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1cc      	bne.n	800614e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2200      	movs	r2, #0
 80061bc:	2140      	movs	r1, #64	; 0x40
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fee3 	bl	8006f8a <UART_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e005      	b.n	80061da <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e000      	b.n	80061da <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
  }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b08b      	sub	sp, #44	; 0x2c
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d156      	bne.n	80062a8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_UART_Transmit_IT+0x22>
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e04f      	b.n	80062aa <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_UART_Transmit_IT+0x34>
 8006214:	2302      	movs	r3, #2
 8006216:	e048      	b.n	80062aa <HAL_UART_Transmit_IT+0xc6>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	88fa      	ldrh	r2, [r7, #6]
 800622a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	88fa      	ldrh	r2, [r7, #6]
 8006232:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2221      	movs	r2, #33	; 0x21
 8006248:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006252:	d107      	bne.n	8006264 <HAL_UART_Transmit_IT+0x80>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d103      	bne.n	8006264 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <HAL_UART_Transmit_IT+0xd4>)
 8006260:	669a      	str	r2, [r3, #104]	; 0x68
 8006262:	e002      	b.n	800626a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4a15      	ldr	r2, [pc, #84]	; (80062bc <HAL_UART_Transmit_IT+0xd8>)
 8006268:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	613b      	str	r3, [r7, #16]
   return(result);
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	623b      	str	r3, [r7, #32]
 8006292:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	69f9      	ldr	r1, [r7, #28]
 8006296:	6a3a      	ldr	r2, [r7, #32]
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	61bb      	str	r3, [r7, #24]
   return(result);
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e6      	bne.n	8006272 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	e000      	b.n	80062aa <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80062a8:	2302      	movs	r3, #2
  }
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	372c      	adds	r7, #44	; 0x2c
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	08007451 	.word	0x08007451
 80062bc:	0800739b 	.word	0x0800739b

080062c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	4613      	mov	r3, r2
 80062cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d13d      	bne.n	8006352 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <HAL_UART_Receive_IT+0x22>
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e036      	b.n	8006354 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_UART_Receive_IT+0x34>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e02f      	b.n	8006354 <HAL_UART_Receive_IT+0x94>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d018      	beq.n	8006342 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	613b      	str	r3, [r7, #16]
   return(result);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	69f9      	ldr	r1, [r7, #28]
 8006334:	6a3a      	ldr	r2, [r7, #32]
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	61bb      	str	r3, [r7, #24]
   return(result);
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e6      	bne.n	8006310 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	461a      	mov	r2, r3
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 fee3 	bl	8007114 <UART_Start_Receive_IT>
 800634e:	4603      	mov	r3, r0
 8006350:	e000      	b.n	8006354 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006352:	2302      	movs	r3, #2
  }
}
 8006354:	4618      	mov	r0, r3
 8006356:	3728      	adds	r7, #40	; 0x28
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b0ba      	sub	sp, #232	; 0xe8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006382:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006386:	f640 030f 	movw	r3, #2063	; 0x80f
 800638a:	4013      	ands	r3, r2
 800638c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d115      	bne.n	80063c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00f      	beq.n	80063c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d009      	beq.n	80063c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 828f 	beq.w	80068d8 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
      }
      return;
 80063c2:	e289      	b.n	80068d8 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80063c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8117 	beq.w	80065fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80063da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80063de:	4b85      	ldr	r3, [pc, #532]	; (80065f4 <HAL_UART_IRQHandler+0x298>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 810a 	beq.w	80065fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d011      	beq.n	8006418 <HAL_UART_IRQHandler+0xbc>
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2201      	movs	r2, #1
 8006406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800640e:	f043 0201 	orr.w	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d011      	beq.n	8006448 <HAL_UART_IRQHandler+0xec>
 8006424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2202      	movs	r2, #2
 8006436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800643e:	f043 0204 	orr.w	r2, r3, #4
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d011      	beq.n	8006478 <HAL_UART_IRQHandler+0x11c>
 8006454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2204      	movs	r2, #4
 8006466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800646e:	f043 0202 	orr.w	r2, r3, #2
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d017      	beq.n	80064b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d105      	bne.n	800649c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006494:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2208      	movs	r2, #8
 80064a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064aa:	f043 0208 	orr.w	r2, r3, #8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d012      	beq.n	80064e6 <HAL_UART_IRQHandler+0x18a>
 80064c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00c      	beq.n	80064e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064dc:	f043 0220 	orr.w	r2, r3, #32
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 81f5 	beq.w	80068dc <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00d      	beq.n	800651a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652e:	2b40      	cmp	r3, #64	; 0x40
 8006530:	d005      	beq.n	800653e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006536:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800653a:	2b00      	cmp	r3, #0
 800653c:	d04f      	beq.n	80065de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 feb2 	bl	80072a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654e:	2b40      	cmp	r3, #64	; 0x40
 8006550:	d141      	bne.n	80065d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800656c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3308      	adds	r3, #8
 800657a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800657e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800658a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1d9      	bne.n	8006552 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d013      	beq.n	80065ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <HAL_UART_IRQHandler+0x29c>)
 80065ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fc fc4a 	bl	8002e4c <HAL_DMA_Abort_IT>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d017      	beq.n	80065ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80065c8:	4610      	mov	r0, r2
 80065ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	e00f      	b.n	80065ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f98e 	bl	80068f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d4:	e00b      	b.n	80065ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f98a 	bl	80068f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065dc:	e007      	b.n	80065ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f986 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80065ec:	e176      	b.n	80068dc <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ee:	bf00      	nop
    return;
 80065f0:	e174      	b.n	80068dc <HAL_UART_IRQHandler+0x580>
 80065f2:	bf00      	nop
 80065f4:	04000120 	.word	0x04000120
 80065f8:	0800736f 	.word	0x0800736f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006600:	2b01      	cmp	r3, #1
 8006602:	f040 8144 	bne.w	800688e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 813d 	beq.w	800688e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8136 	beq.w	800688e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2210      	movs	r2, #16
 8006628:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006634:	2b40      	cmp	r3, #64	; 0x40
 8006636:	f040 80b2 	bne.w	800679e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006646:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8148 	beq.w	80068e0 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800665a:	429a      	cmp	r2, r3
 800665c:	f080 8140 	bcs.w	80068e0 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006666:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006674:	f000 8085 	beq.w	8006782 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800668c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1da      	bne.n	8006678 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e1      	bne.n	80066c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3308      	adds	r3, #8
 8006704:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800670e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006722:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006724:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006728:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e3      	bne.n	80066fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006752:	f023 0310 	bic.w	r3, r3, #16
 8006756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006764:	65bb      	str	r3, [r7, #88]	; 0x58
 8006766:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800676a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e4      	bne.n	8006742 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677c:	4618      	mov	r0, r3
 800677e:	f7fc faf5 	bl	8002d6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800678e:	b29b      	uxth	r3, r3
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	b29b      	uxth	r3, r3
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f8b4 	bl	8006904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800679c:	e0a0      	b.n	80068e0 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 8092 	beq.w	80068e4 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80067c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 808d 	beq.w	80068e4 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067ec:	647b      	str	r3, [r7, #68]	; 0x44
 80067ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e4      	bne.n	80067ca <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3308      	adds	r3, #8
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	623b      	str	r3, [r7, #32]
   return(result);
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006824:	633a      	str	r2, [r7, #48]	; 0x30
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800682a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e3      	bne.n	8006800 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	60fb      	str	r3, [r7, #12]
   return(result);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0310 	bic.w	r3, r3, #16
 800685e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	69b9      	ldr	r1, [r7, #24]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	617b      	str	r3, [r7, #20]
   return(result);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e4      	bne.n	800684a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006880:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f83c 	bl	8006904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800688c:	e02a      	b.n	80068e4 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00e      	beq.n	80068b8 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800689a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01c      	beq.n	80068e8 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
    }
    return;
 80068b6:	e017      	b.n	80068e8 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d012      	beq.n	80068ea <HAL_UART_IRQHandler+0x58e>
 80068c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00c      	beq.n	80068ea <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fe1d 	bl	8007510 <UART_EndTransmit_IT>
    return;
 80068d6:	e008      	b.n	80068ea <HAL_UART_IRQHandler+0x58e>
      return;
 80068d8:	bf00      	nop
 80068da:	e006      	b.n	80068ea <HAL_UART_IRQHandler+0x58e>
    return;
 80068dc:	bf00      	nop
 80068de:	e004      	b.n	80068ea <HAL_UART_IRQHandler+0x58e>
      return;
 80068e0:	bf00      	nop
 80068e2:	e002      	b.n	80068ea <HAL_UART_IRQHandler+0x58e>
      return;
 80068e4:	bf00      	nop
 80068e6:	e000      	b.n	80068ea <HAL_UART_IRQHandler+0x58e>
    return;
 80068e8:	bf00      	nop
  }

}
 80068ea:	37e8      	adds	r7, #232	; 0xe8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4ba7      	ldr	r3, [pc, #668]	; (8006be4 <UART_SetConfig+0x2c8>)
 8006948:	4013      	ands	r3, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	6979      	ldr	r1, [r7, #20]
 8006950:	430b      	orrs	r3, r1
 8006952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	430a      	orrs	r2, r1
 800698c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a95      	ldr	r2, [pc, #596]	; (8006be8 <UART_SetConfig+0x2cc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d120      	bne.n	80069da <UART_SetConfig+0xbe>
 8006998:	4b94      	ldr	r3, [pc, #592]	; (8006bec <UART_SetConfig+0x2d0>)
 800699a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d816      	bhi.n	80069d4 <UART_SetConfig+0xb8>
 80069a6:	a201      	add	r2, pc, #4	; (adr r2, 80069ac <UART_SetConfig+0x90>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069bd 	.word	0x080069bd
 80069b0:	080069c9 	.word	0x080069c9
 80069b4:	080069c3 	.word	0x080069c3
 80069b8:	080069cf 	.word	0x080069cf
 80069bc:	2301      	movs	r3, #1
 80069be:	77fb      	strb	r3, [r7, #31]
 80069c0:	e14f      	b.n	8006c62 <UART_SetConfig+0x346>
 80069c2:	2302      	movs	r3, #2
 80069c4:	77fb      	strb	r3, [r7, #31]
 80069c6:	e14c      	b.n	8006c62 <UART_SetConfig+0x346>
 80069c8:	2304      	movs	r3, #4
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e149      	b.n	8006c62 <UART_SetConfig+0x346>
 80069ce:	2308      	movs	r3, #8
 80069d0:	77fb      	strb	r3, [r7, #31]
 80069d2:	e146      	b.n	8006c62 <UART_SetConfig+0x346>
 80069d4:	2310      	movs	r3, #16
 80069d6:	77fb      	strb	r3, [r7, #31]
 80069d8:	e143      	b.n	8006c62 <UART_SetConfig+0x346>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a84      	ldr	r2, [pc, #528]	; (8006bf0 <UART_SetConfig+0x2d4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d132      	bne.n	8006a4a <UART_SetConfig+0x12e>
 80069e4:	4b81      	ldr	r3, [pc, #516]	; (8006bec <UART_SetConfig+0x2d0>)
 80069e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ea:	f003 030c 	and.w	r3, r3, #12
 80069ee:	2b0c      	cmp	r3, #12
 80069f0:	d828      	bhi.n	8006a44 <UART_SetConfig+0x128>
 80069f2:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <UART_SetConfig+0xdc>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a2d 	.word	0x08006a2d
 80069fc:	08006a45 	.word	0x08006a45
 8006a00:	08006a45 	.word	0x08006a45
 8006a04:	08006a45 	.word	0x08006a45
 8006a08:	08006a39 	.word	0x08006a39
 8006a0c:	08006a45 	.word	0x08006a45
 8006a10:	08006a45 	.word	0x08006a45
 8006a14:	08006a45 	.word	0x08006a45
 8006a18:	08006a33 	.word	0x08006a33
 8006a1c:	08006a45 	.word	0x08006a45
 8006a20:	08006a45 	.word	0x08006a45
 8006a24:	08006a45 	.word	0x08006a45
 8006a28:	08006a3f 	.word	0x08006a3f
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e117      	b.n	8006c62 <UART_SetConfig+0x346>
 8006a32:	2302      	movs	r3, #2
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	e114      	b.n	8006c62 <UART_SetConfig+0x346>
 8006a38:	2304      	movs	r3, #4
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e111      	b.n	8006c62 <UART_SetConfig+0x346>
 8006a3e:	2308      	movs	r3, #8
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e10e      	b.n	8006c62 <UART_SetConfig+0x346>
 8006a44:	2310      	movs	r3, #16
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e10b      	b.n	8006c62 <UART_SetConfig+0x346>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a69      	ldr	r2, [pc, #420]	; (8006bf4 <UART_SetConfig+0x2d8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d120      	bne.n	8006a96 <UART_SetConfig+0x17a>
 8006a54:	4b65      	ldr	r3, [pc, #404]	; (8006bec <UART_SetConfig+0x2d0>)
 8006a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a5e:	2b30      	cmp	r3, #48	; 0x30
 8006a60:	d013      	beq.n	8006a8a <UART_SetConfig+0x16e>
 8006a62:	2b30      	cmp	r3, #48	; 0x30
 8006a64:	d814      	bhi.n	8006a90 <UART_SetConfig+0x174>
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d009      	beq.n	8006a7e <UART_SetConfig+0x162>
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	d810      	bhi.n	8006a90 <UART_SetConfig+0x174>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <UART_SetConfig+0x15c>
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d006      	beq.n	8006a84 <UART_SetConfig+0x168>
 8006a76:	e00b      	b.n	8006a90 <UART_SetConfig+0x174>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	e0f1      	b.n	8006c62 <UART_SetConfig+0x346>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	77fb      	strb	r3, [r7, #31]
 8006a82:	e0ee      	b.n	8006c62 <UART_SetConfig+0x346>
 8006a84:	2304      	movs	r3, #4
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e0eb      	b.n	8006c62 <UART_SetConfig+0x346>
 8006a8a:	2308      	movs	r3, #8
 8006a8c:	77fb      	strb	r3, [r7, #31]
 8006a8e:	e0e8      	b.n	8006c62 <UART_SetConfig+0x346>
 8006a90:	2310      	movs	r3, #16
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e0e5      	b.n	8006c62 <UART_SetConfig+0x346>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a57      	ldr	r2, [pc, #348]	; (8006bf8 <UART_SetConfig+0x2dc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d120      	bne.n	8006ae2 <UART_SetConfig+0x1c6>
 8006aa0:	4b52      	ldr	r3, [pc, #328]	; (8006bec <UART_SetConfig+0x2d0>)
 8006aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8006aac:	d013      	beq.n	8006ad6 <UART_SetConfig+0x1ba>
 8006aae:	2bc0      	cmp	r3, #192	; 0xc0
 8006ab0:	d814      	bhi.n	8006adc <UART_SetConfig+0x1c0>
 8006ab2:	2b80      	cmp	r3, #128	; 0x80
 8006ab4:	d009      	beq.n	8006aca <UART_SetConfig+0x1ae>
 8006ab6:	2b80      	cmp	r3, #128	; 0x80
 8006ab8:	d810      	bhi.n	8006adc <UART_SetConfig+0x1c0>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <UART_SetConfig+0x1a8>
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d006      	beq.n	8006ad0 <UART_SetConfig+0x1b4>
 8006ac2:	e00b      	b.n	8006adc <UART_SetConfig+0x1c0>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e0cb      	b.n	8006c62 <UART_SetConfig+0x346>
 8006aca:	2302      	movs	r3, #2
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e0c8      	b.n	8006c62 <UART_SetConfig+0x346>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e0c5      	b.n	8006c62 <UART_SetConfig+0x346>
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	e0c2      	b.n	8006c62 <UART_SetConfig+0x346>
 8006adc:	2310      	movs	r3, #16
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e0bf      	b.n	8006c62 <UART_SetConfig+0x346>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a45      	ldr	r2, [pc, #276]	; (8006bfc <UART_SetConfig+0x2e0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d125      	bne.n	8006b38 <UART_SetConfig+0x21c>
 8006aec:	4b3f      	ldr	r3, [pc, #252]	; (8006bec <UART_SetConfig+0x2d0>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006afa:	d017      	beq.n	8006b2c <UART_SetConfig+0x210>
 8006afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b00:	d817      	bhi.n	8006b32 <UART_SetConfig+0x216>
 8006b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b06:	d00b      	beq.n	8006b20 <UART_SetConfig+0x204>
 8006b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b0c:	d811      	bhi.n	8006b32 <UART_SetConfig+0x216>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <UART_SetConfig+0x1fe>
 8006b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b16:	d006      	beq.n	8006b26 <UART_SetConfig+0x20a>
 8006b18:	e00b      	b.n	8006b32 <UART_SetConfig+0x216>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	e0a0      	b.n	8006c62 <UART_SetConfig+0x346>
 8006b20:	2302      	movs	r3, #2
 8006b22:	77fb      	strb	r3, [r7, #31]
 8006b24:	e09d      	b.n	8006c62 <UART_SetConfig+0x346>
 8006b26:	2304      	movs	r3, #4
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e09a      	b.n	8006c62 <UART_SetConfig+0x346>
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	77fb      	strb	r3, [r7, #31]
 8006b30:	e097      	b.n	8006c62 <UART_SetConfig+0x346>
 8006b32:	2310      	movs	r3, #16
 8006b34:	77fb      	strb	r3, [r7, #31]
 8006b36:	e094      	b.n	8006c62 <UART_SetConfig+0x346>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a30      	ldr	r2, [pc, #192]	; (8006c00 <UART_SetConfig+0x2e4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d125      	bne.n	8006b8e <UART_SetConfig+0x272>
 8006b42:	4b2a      	ldr	r3, [pc, #168]	; (8006bec <UART_SetConfig+0x2d0>)
 8006b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b50:	d017      	beq.n	8006b82 <UART_SetConfig+0x266>
 8006b52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b56:	d817      	bhi.n	8006b88 <UART_SetConfig+0x26c>
 8006b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b5c:	d00b      	beq.n	8006b76 <UART_SetConfig+0x25a>
 8006b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b62:	d811      	bhi.n	8006b88 <UART_SetConfig+0x26c>
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <UART_SetConfig+0x254>
 8006b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b6c:	d006      	beq.n	8006b7c <UART_SetConfig+0x260>
 8006b6e:	e00b      	b.n	8006b88 <UART_SetConfig+0x26c>
 8006b70:	2301      	movs	r3, #1
 8006b72:	77fb      	strb	r3, [r7, #31]
 8006b74:	e075      	b.n	8006c62 <UART_SetConfig+0x346>
 8006b76:	2302      	movs	r3, #2
 8006b78:	77fb      	strb	r3, [r7, #31]
 8006b7a:	e072      	b.n	8006c62 <UART_SetConfig+0x346>
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e06f      	b.n	8006c62 <UART_SetConfig+0x346>
 8006b82:	2308      	movs	r3, #8
 8006b84:	77fb      	strb	r3, [r7, #31]
 8006b86:	e06c      	b.n	8006c62 <UART_SetConfig+0x346>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	77fb      	strb	r3, [r7, #31]
 8006b8c:	e069      	b.n	8006c62 <UART_SetConfig+0x346>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1c      	ldr	r2, [pc, #112]	; (8006c04 <UART_SetConfig+0x2e8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d137      	bne.n	8006c08 <UART_SetConfig+0x2ec>
 8006b98:	4b14      	ldr	r3, [pc, #80]	; (8006bec <UART_SetConfig+0x2d0>)
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ba2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ba6:	d017      	beq.n	8006bd8 <UART_SetConfig+0x2bc>
 8006ba8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bac:	d817      	bhi.n	8006bde <UART_SetConfig+0x2c2>
 8006bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb2:	d00b      	beq.n	8006bcc <UART_SetConfig+0x2b0>
 8006bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb8:	d811      	bhi.n	8006bde <UART_SetConfig+0x2c2>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <UART_SetConfig+0x2aa>
 8006bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc2:	d006      	beq.n	8006bd2 <UART_SetConfig+0x2b6>
 8006bc4:	e00b      	b.n	8006bde <UART_SetConfig+0x2c2>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e04a      	b.n	8006c62 <UART_SetConfig+0x346>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e047      	b.n	8006c62 <UART_SetConfig+0x346>
 8006bd2:	2304      	movs	r3, #4
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e044      	b.n	8006c62 <UART_SetConfig+0x346>
 8006bd8:	2308      	movs	r3, #8
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e041      	b.n	8006c62 <UART_SetConfig+0x346>
 8006bde:	2310      	movs	r3, #16
 8006be0:	77fb      	strb	r3, [r7, #31]
 8006be2:	e03e      	b.n	8006c62 <UART_SetConfig+0x346>
 8006be4:	efff69f3 	.word	0xefff69f3
 8006be8:	40011000 	.word	0x40011000
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	40004400 	.word	0x40004400
 8006bf4:	40004800 	.word	0x40004800
 8006bf8:	40004c00 	.word	0x40004c00
 8006bfc:	40005000 	.word	0x40005000
 8006c00:	40011400 	.word	0x40011400
 8006c04:	40007800 	.word	0x40007800
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a71      	ldr	r2, [pc, #452]	; (8006dd4 <UART_SetConfig+0x4b8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d125      	bne.n	8006c5e <UART_SetConfig+0x342>
 8006c12:	4b71      	ldr	r3, [pc, #452]	; (8006dd8 <UART_SetConfig+0x4bc>)
 8006c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c20:	d017      	beq.n	8006c52 <UART_SetConfig+0x336>
 8006c22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c26:	d817      	bhi.n	8006c58 <UART_SetConfig+0x33c>
 8006c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c2c:	d00b      	beq.n	8006c46 <UART_SetConfig+0x32a>
 8006c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c32:	d811      	bhi.n	8006c58 <UART_SetConfig+0x33c>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <UART_SetConfig+0x324>
 8006c38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c3c:	d006      	beq.n	8006c4c <UART_SetConfig+0x330>
 8006c3e:	e00b      	b.n	8006c58 <UART_SetConfig+0x33c>
 8006c40:	2300      	movs	r3, #0
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e00d      	b.n	8006c62 <UART_SetConfig+0x346>
 8006c46:	2302      	movs	r3, #2
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e00a      	b.n	8006c62 <UART_SetConfig+0x346>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e007      	b.n	8006c62 <UART_SetConfig+0x346>
 8006c52:	2308      	movs	r3, #8
 8006c54:	77fb      	strb	r3, [r7, #31]
 8006c56:	e004      	b.n	8006c62 <UART_SetConfig+0x346>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e001      	b.n	8006c62 <UART_SetConfig+0x346>
 8006c5e:	2310      	movs	r3, #16
 8006c60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6a:	d15a      	bne.n	8006d22 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006c6c:	7ffb      	ldrb	r3, [r7, #31]
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	d827      	bhi.n	8006cc2 <UART_SetConfig+0x3a6>
 8006c72:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <UART_SetConfig+0x35c>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006c9d 	.word	0x08006c9d
 8006c7c:	08006ca5 	.word	0x08006ca5
 8006c80:	08006cad 	.word	0x08006cad
 8006c84:	08006cc3 	.word	0x08006cc3
 8006c88:	08006cb3 	.word	0x08006cb3
 8006c8c:	08006cc3 	.word	0x08006cc3
 8006c90:	08006cc3 	.word	0x08006cc3
 8006c94:	08006cc3 	.word	0x08006cc3
 8006c98:	08006cbb 	.word	0x08006cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c9c:	f7fd ff60 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8006ca0:	61b8      	str	r0, [r7, #24]
        break;
 8006ca2:	e013      	b.n	8006ccc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ca4:	f7fd ff70 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8006ca8:	61b8      	str	r0, [r7, #24]
        break;
 8006caa:	e00f      	b.n	8006ccc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cac:	4b4b      	ldr	r3, [pc, #300]	; (8006ddc <UART_SetConfig+0x4c0>)
 8006cae:	61bb      	str	r3, [r7, #24]
        break;
 8006cb0:	e00c      	b.n	8006ccc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cb2:	f7fd fe93 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 8006cb6:	61b8      	str	r0, [r7, #24]
        break;
 8006cb8:	e008      	b.n	8006ccc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cbe:	61bb      	str	r3, [r7, #24]
        break;
 8006cc0:	e004      	b.n	8006ccc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	77bb      	strb	r3, [r7, #30]
        break;
 8006cca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d074      	beq.n	8006dbc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	005a      	lsls	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	085b      	lsrs	r3, r3, #1
 8006cdc:	441a      	add	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	2b0f      	cmp	r3, #15
 8006cec:	d916      	bls.n	8006d1c <UART_SetConfig+0x400>
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf4:	d212      	bcs.n	8006d1c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	f023 030f 	bic.w	r3, r3, #15
 8006cfe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	89fb      	ldrh	r3, [r7, #14]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	89fa      	ldrh	r2, [r7, #14]
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	e04f      	b.n	8006dbc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	77bb      	strb	r3, [r7, #30]
 8006d20:	e04c      	b.n	8006dbc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d22:	7ffb      	ldrb	r3, [r7, #31]
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d828      	bhi.n	8006d7a <UART_SetConfig+0x45e>
 8006d28:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <UART_SetConfig+0x414>)
 8006d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2e:	bf00      	nop
 8006d30:	08006d55 	.word	0x08006d55
 8006d34:	08006d5d 	.word	0x08006d5d
 8006d38:	08006d65 	.word	0x08006d65
 8006d3c:	08006d7b 	.word	0x08006d7b
 8006d40:	08006d6b 	.word	0x08006d6b
 8006d44:	08006d7b 	.word	0x08006d7b
 8006d48:	08006d7b 	.word	0x08006d7b
 8006d4c:	08006d7b 	.word	0x08006d7b
 8006d50:	08006d73 	.word	0x08006d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d54:	f7fd ff04 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 8006d58:	61b8      	str	r0, [r7, #24]
        break;
 8006d5a:	e013      	b.n	8006d84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d5c:	f7fd ff14 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8006d60:	61b8      	str	r0, [r7, #24]
        break;
 8006d62:	e00f      	b.n	8006d84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d64:	4b1d      	ldr	r3, [pc, #116]	; (8006ddc <UART_SetConfig+0x4c0>)
 8006d66:	61bb      	str	r3, [r7, #24]
        break;
 8006d68:	e00c      	b.n	8006d84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d6a:	f7fd fe37 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 8006d6e:	61b8      	str	r0, [r7, #24]
        break;
 8006d70:	e008      	b.n	8006d84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d76:	61bb      	str	r3, [r7, #24]
        break;
 8006d78:	e004      	b.n	8006d84 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	77bb      	strb	r3, [r7, #30]
        break;
 8006d82:	bf00      	nop
    }

    if (pclk != 0U)
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d018      	beq.n	8006dbc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	085a      	lsrs	r2, r3, #1
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	441a      	add	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b0f      	cmp	r3, #15
 8006da2:	d909      	bls.n	8006db8 <UART_SetConfig+0x49c>
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006daa:	d205      	bcs.n	8006db8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60da      	str	r2, [r3, #12]
 8006db6:	e001      	b.n	8006dbc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006dc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3720      	adds	r7, #32
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40007c00 	.word	0x40007c00
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	00f42400 	.word	0x00f42400

08006de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01a      	beq.n	8006ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ede:	d10a      	bne.n	8006ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00a      	beq.n	8006f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	605a      	str	r2, [r3, #4]
  }
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f34:	f7fb fe08 	bl	8002b48 <HAL_GetTick>
 8006f38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d10e      	bne.n	8006f66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f817 	bl	8006f8a <UART_WaitOnFlagUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e00d      	b.n	8006f82 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b09c      	sub	sp, #112	; 0x70
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9a:	e0a5      	b.n	80070e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa2:	f000 80a1 	beq.w	80070e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa6:	f7fb fdcf 	bl	8002b48 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d302      	bcc.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x32>
 8006fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d13e      	bne.n	800703a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fdc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fe0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e6      	bne.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	f023 0301 	bic.w	r3, r3, #1
 8007004:	663b      	str	r3, [r7, #96]	; 0x60
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3308      	adds	r3, #8
 800700c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800700e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007010:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800701c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e5      	bne.n	8006fee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2220      	movs	r2, #32
 8007026:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2220      	movs	r2, #32
 800702c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e067      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	d04f      	beq.n	80070e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007056:	d147      	bne.n	80070e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007060:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007076:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007080:	637b      	str	r3, [r7, #52]	; 0x34
 8007082:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e6      	bne.n	8007062 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3308      	adds	r3, #8
 800709a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	613b      	str	r3, [r7, #16]
   return(result);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3308      	adds	r3, #8
 80070b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070b4:	623a      	str	r2, [r7, #32]
 80070b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	69f9      	ldr	r1, [r7, #28]
 80070ba:	6a3a      	ldr	r2, [r7, #32]
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e5      	bne.n	8007094 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2220      	movs	r2, #32
 80070d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e010      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69da      	ldr	r2, [r3, #28]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4013      	ands	r3, r2
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	bf0c      	ite	eq
 80070f8:	2301      	moveq	r3, #1
 80070fa:	2300      	movne	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	461a      	mov	r2, r3
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	429a      	cmp	r2, r3
 8007104:	f43f af4a 	beq.w	8006f9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3770      	adds	r7, #112	; 0x70
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007114:	b480      	push	{r7}
 8007116:	b097      	sub	sp, #92	; 0x5c
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	88fa      	ldrh	r2, [r7, #6]
 800712c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	88fa      	ldrh	r2, [r7, #6]
 8007134:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007146:	d10e      	bne.n	8007166 <UART_Start_Receive_IT+0x52>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d105      	bne.n	800715c <UART_Start_Receive_IT+0x48>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007156:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800715a:	e02d      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	22ff      	movs	r2, #255	; 0xff
 8007160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007164:	e028      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10d      	bne.n	800718a <UART_Start_Receive_IT+0x76>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d104      	bne.n	8007180 <UART_Start_Receive_IT+0x6c>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	22ff      	movs	r2, #255	; 0xff
 800717a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800717e:	e01b      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	227f      	movs	r2, #127	; 0x7f
 8007184:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007188:	e016      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007192:	d10d      	bne.n	80071b0 <UART_Start_Receive_IT+0x9c>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <UART_Start_Receive_IT+0x92>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	227f      	movs	r2, #127	; 0x7f
 80071a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071a4:	e008      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	223f      	movs	r2, #63	; 0x3f
 80071aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071ae:	e003      	b.n	80071b8 <UART_Start_Receive_IT+0xa4>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2222      	movs	r2, #34	; 0x22
 80071c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3308      	adds	r3, #8
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d8:	f043 0301 	orr.w	r3, r3, #1
 80071dc:	657b      	str	r3, [r7, #84]	; 0x54
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3308      	adds	r3, #8
 80071e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80071e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e5      	bne.n	80071c6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007202:	d107      	bne.n	8007214 <UART_Start_Receive_IT+0x100>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d103      	bne.n	8007214 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4a24      	ldr	r2, [pc, #144]	; (80072a0 <UART_Start_Receive_IT+0x18c>)
 8007210:	665a      	str	r2, [r3, #100]	; 0x64
 8007212:	e002      	b.n	800721a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4a23      	ldr	r2, [pc, #140]	; (80072a4 <UART_Start_Receive_IT+0x190>)
 8007218:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d019      	beq.n	800725e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800723e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
 800724a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800724e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e6      	bne.n	800722a <UART_Start_Receive_IT+0x116>
 800725c:	e018      	b.n	8007290 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	613b      	str	r3, [r7, #16]
   return(result);
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f043 0320 	orr.w	r3, r3, #32
 8007272:	653b      	str	r3, [r7, #80]	; 0x50
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	461a      	mov	r2, r3
 800727a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800727c:	623b      	str	r3, [r7, #32]
 800727e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	69f9      	ldr	r1, [r7, #28]
 8007282:	6a3a      	ldr	r2, [r7, #32]
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	61bb      	str	r3, [r7, #24]
   return(result);
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e6      	bne.n	800725e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	375c      	adds	r7, #92	; 0x5c
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	080076c1 	.word	0x080076c1
 80072a4:	08007565 	.word	0x08007565

080072a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b095      	sub	sp, #84	; 0x54
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ce:	643b      	str	r3, [r7, #64]	; 0x40
 80072d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e6      	bne.n	80072b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3308      	adds	r3, #8
 80072e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e5      	bne.n	80072e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800731a:	2b01      	cmp	r3, #1
 800731c:	d118      	bne.n	8007350 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	60bb      	str	r3, [r7, #8]
   return(result);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f023 0310 	bic.w	r3, r3, #16
 8007332:	647b      	str	r3, [r7, #68]	; 0x44
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	461a      	mov	r2, r3
 800733a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	6979      	ldr	r1, [r7, #20]
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	e841 2300 	strex	r3, r2, [r1]
 8007348:	613b      	str	r3, [r7, #16]
   return(result);
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e6      	bne.n	800731e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2220      	movs	r2, #32
 8007354:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007362:	bf00      	nop
 8007364:	3754      	adds	r7, #84	; 0x54
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f7ff faaf 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800739a:	b480      	push	{r7}
 800739c:	b08f      	sub	sp, #60	; 0x3c
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a6:	2b21      	cmp	r3, #33	; 0x21
 80073a8:	d14c      	bne.n	8007444 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d132      	bne.n	800741c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ca:	637b      	str	r3, [r7, #52]	; 0x34
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073d6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e6      	bne.n	80073b6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fc:	633b      	str	r3, [r7, #48]	; 0x30
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6979      	ldr	r1, [r7, #20]
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	613b      	str	r3, [r7, #16]
   return(result);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e6      	bne.n	80073e8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800741a:	e013      	b.n	8007444 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007420:	781a      	ldrb	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007438:	b29b      	uxth	r3, r3
 800743a:	3b01      	subs	r3, #1
 800743c:	b29a      	uxth	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007444:	bf00      	nop
 8007446:	373c      	adds	r7, #60	; 0x3c
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007450:	b480      	push	{r7}
 8007452:	b091      	sub	sp, #68	; 0x44
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800745c:	2b21      	cmp	r3, #33	; 0x21
 800745e:	d151      	bne.n	8007504 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d132      	bne.n	80074d2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	623b      	str	r3, [r7, #32]
   return(result);
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007480:	63bb      	str	r3, [r7, #56]	; 0x38
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	633b      	str	r3, [r7, #48]	; 0x30
 800748c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e6      	bne.n	800746c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b2:	637b      	str	r3, [r7, #52]	; 0x34
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074bc:	61fb      	str	r3, [r7, #28]
 80074be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	69b9      	ldr	r1, [r7, #24]
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	617b      	str	r3, [r7, #20]
   return(result);
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80074d0:	e018      	b.n	8007504 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80074d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074e6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ec:	1c9a      	adds	r2, r3, #2
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007504:	bf00      	nop
 8007506:	3744      	adds	r7, #68	; 0x44
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	60bb      	str	r3, [r7, #8]
   return(result);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800752c:	61fb      	str	r3, [r7, #28]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6979      	ldr	r1, [r7, #20]
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	613b      	str	r3, [r7, #16]
   return(result);
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e6      	bne.n	8007518 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fa ff28 	bl	80023ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800755c:	bf00      	nop
 800755e:	3720      	adds	r7, #32
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b096      	sub	sp, #88	; 0x58
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007572:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800757a:	2b22      	cmp	r3, #34	; 0x22
 800757c:	f040 8094 	bne.w	80076a8 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800758a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800758e:	b2d9      	uxtb	r1, r3
 8007590:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007594:	b2da      	uxtb	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759a:	400a      	ands	r2, r1
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	3b01      	subs	r3, #1
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d177      	bne.n	80076b8 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075dc:	653b      	str	r3, [r7, #80]	; 0x50
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e6:	647b      	str	r3, [r7, #68]	; 0x44
 80075e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e6      	bne.n	80075c8 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3308      	adds	r3, #8
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	623b      	str	r3, [r7, #32]
   return(result);
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3308      	adds	r3, #8
 8007618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800761a:	633a      	str	r2, [r7, #48]	; 0x30
 800761c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e5      	bne.n	80075fa <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800763e:	2b01      	cmp	r3, #1
 8007640:	d12e      	bne.n	80076a0 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	60fb      	str	r3, [r7, #12]
   return(result);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f023 0310 	bic.w	r3, r3, #16
 800765c:	64bb      	str	r3, [r7, #72]	; 0x48
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	69b9      	ldr	r1, [r7, #24]
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	617b      	str	r3, [r7, #20]
   return(result);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e6      	bne.n	8007648 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b10      	cmp	r3, #16
 8007686:	d103      	bne.n	8007690 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2210      	movs	r2, #16
 800768e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7ff f933 	bl	8006904 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800769e:	e00b      	b.n	80076b8 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7fa fb8f 	bl	8001dc4 <HAL_UART_RxCpltCallback>
}
 80076a6:	e007      	b.n	80076b8 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0208 	orr.w	r2, r2, #8
 80076b6:	619a      	str	r2, [r3, #24]
}
 80076b8:	bf00      	nop
 80076ba:	3758      	adds	r7, #88	; 0x58
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b096      	sub	sp, #88	; 0x58
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d6:	2b22      	cmp	r3, #34	; 0x22
 80076d8:	f040 8094 	bne.w	8007804 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ea:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80076ec:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80076f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076f4:	4013      	ands	r3, r2
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007700:	1c9a      	adds	r2, r3, #2
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d177      	bne.n	8007814 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007742:	643b      	str	r3, [r7, #64]	; 0x40
 8007744:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e6      	bne.n	8007724 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3308      	adds	r3, #8
 800775c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	61fb      	str	r3, [r7, #28]
   return(result);
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	f023 0301 	bic.w	r3, r3, #1
 800776c:	64bb      	str	r3, [r7, #72]	; 0x48
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3308      	adds	r3, #8
 8007774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800777c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e5      	bne.n	8007756 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800779a:	2b01      	cmp	r3, #1
 800779c:	d12e      	bne.n	80077fc <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f023 0310 	bic.w	r3, r3, #16
 80077b8:	647b      	str	r3, [r7, #68]	; 0x44
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077c2:	61bb      	str	r3, [r7, #24]
 80077c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6979      	ldr	r1, [r7, #20]
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	613b      	str	r3, [r7, #16]
   return(result);
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e6      	bne.n	80077a4 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	f003 0310 	and.w	r3, r3, #16
 80077e0:	2b10      	cmp	r3, #16
 80077e2:	d103      	bne.n	80077ec <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2210      	movs	r2, #16
 80077ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff f885 	bl	8006904 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077fa:	e00b      	b.n	8007814 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7fa fae1 	bl	8001dc4 <HAL_UART_RxCpltCallback>
}
 8007802:	e007      	b.n	8007814 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0208 	orr.w	r2, r2, #8
 8007812:	619a      	str	r2, [r3, #24]
}
 8007814:	bf00      	nop
 8007816:	3758      	adds	r7, #88	; 0x58
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007822:	4b8c      	ldr	r3, [pc, #560]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007824:	22c0      	movs	r2, #192	; 0xc0
 8007826:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007828:	4b8a      	ldr	r3, [pc, #552]	; (8007a54 <MX_LWIP_Init+0x238>)
 800782a:	22a8      	movs	r2, #168	; 0xa8
 800782c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800782e:	4b89      	ldr	r3, [pc, #548]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007830:	2200      	movs	r2, #0
 8007832:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 55;
 8007834:	4b87      	ldr	r3, [pc, #540]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007836:	2237      	movs	r2, #55	; 0x37
 8007838:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800783a:	4b87      	ldr	r3, [pc, #540]	; (8007a58 <MX_LWIP_Init+0x23c>)
 800783c:	22ff      	movs	r2, #255	; 0xff
 800783e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007840:	4b85      	ldr	r3, [pc, #532]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007842:	22ff      	movs	r2, #255	; 0xff
 8007844:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007846:	4b84      	ldr	r3, [pc, #528]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007848:	22ff      	movs	r2, #255	; 0xff
 800784a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800784c:	4b82      	ldr	r3, [pc, #520]	; (8007a58 <MX_LWIP_Init+0x23c>)
 800784e:	2200      	movs	r2, #0
 8007850:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007852:	4b82      	ldr	r3, [pc, #520]	; (8007a5c <MX_LWIP_Init+0x240>)
 8007854:	22c0      	movs	r2, #192	; 0xc0
 8007856:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007858:	4b80      	ldr	r3, [pc, #512]	; (8007a5c <MX_LWIP_Init+0x240>)
 800785a:	22a8      	movs	r2, #168	; 0xa8
 800785c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800785e:	4b7f      	ldr	r3, [pc, #508]	; (8007a5c <MX_LWIP_Init+0x240>)
 8007860:	2200      	movs	r2, #0
 8007862:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007864:	4b7d      	ldr	r3, [pc, #500]	; (8007a5c <MX_LWIP_Init+0x240>)
 8007866:	2201      	movs	r2, #1
 8007868:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800786a:	2100      	movs	r1, #0
 800786c:	2000      	movs	r0, #0
 800786e:	f003 fcfd 	bl	800b26c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007872:	4b78      	ldr	r3, [pc, #480]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	061a      	lsls	r2, r3, #24
 8007878:	4b76      	ldr	r3, [pc, #472]	; (8007a54 <MX_LWIP_Init+0x238>)
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	041b      	lsls	r3, r3, #16
 800787e:	431a      	orrs	r2, r3
 8007880:	4b74      	ldr	r3, [pc, #464]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007882:	789b      	ldrb	r3, [r3, #2]
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	4313      	orrs	r3, r2
 8007888:	4a72      	ldr	r2, [pc, #456]	; (8007a54 <MX_LWIP_Init+0x238>)
 800788a:	78d2      	ldrb	r2, [r2, #3]
 800788c:	4313      	orrs	r3, r2
 800788e:	061a      	lsls	r2, r3, #24
 8007890:	4b70      	ldr	r3, [pc, #448]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	0619      	lsls	r1, r3, #24
 8007896:	4b6f      	ldr	r3, [pc, #444]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	041b      	lsls	r3, r3, #16
 800789c:	4319      	orrs	r1, r3
 800789e:	4b6d      	ldr	r3, [pc, #436]	; (8007a54 <MX_LWIP_Init+0x238>)
 80078a0:	789b      	ldrb	r3, [r3, #2]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	430b      	orrs	r3, r1
 80078a6:	496b      	ldr	r1, [pc, #428]	; (8007a54 <MX_LWIP_Init+0x238>)
 80078a8:	78c9      	ldrb	r1, [r1, #3]
 80078aa:	430b      	orrs	r3, r1
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078b2:	431a      	orrs	r2, r3
 80078b4:	4b67      	ldr	r3, [pc, #412]	; (8007a54 <MX_LWIP_Init+0x238>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	0619      	lsls	r1, r3, #24
 80078ba:	4b66      	ldr	r3, [pc, #408]	; (8007a54 <MX_LWIP_Init+0x238>)
 80078bc:	785b      	ldrb	r3, [r3, #1]
 80078be:	041b      	lsls	r3, r3, #16
 80078c0:	4319      	orrs	r1, r3
 80078c2:	4b64      	ldr	r3, [pc, #400]	; (8007a54 <MX_LWIP_Init+0x238>)
 80078c4:	789b      	ldrb	r3, [r3, #2]
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	430b      	orrs	r3, r1
 80078ca:	4962      	ldr	r1, [pc, #392]	; (8007a54 <MX_LWIP_Init+0x238>)
 80078cc:	78c9      	ldrb	r1, [r1, #3]
 80078ce:	430b      	orrs	r3, r1
 80078d0:	0a1b      	lsrs	r3, r3, #8
 80078d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80078d6:	431a      	orrs	r2, r3
 80078d8:	4b5e      	ldr	r3, [pc, #376]	; (8007a54 <MX_LWIP_Init+0x238>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	0619      	lsls	r1, r3, #24
 80078de:	4b5d      	ldr	r3, [pc, #372]	; (8007a54 <MX_LWIP_Init+0x238>)
 80078e0:	785b      	ldrb	r3, [r3, #1]
 80078e2:	041b      	lsls	r3, r3, #16
 80078e4:	4319      	orrs	r1, r3
 80078e6:	4b5b      	ldr	r3, [pc, #364]	; (8007a54 <MX_LWIP_Init+0x238>)
 80078e8:	789b      	ldrb	r3, [r3, #2]
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	430b      	orrs	r3, r1
 80078ee:	4959      	ldr	r1, [pc, #356]	; (8007a54 <MX_LWIP_Init+0x238>)
 80078f0:	78c9      	ldrb	r1, [r1, #3]
 80078f2:	430b      	orrs	r3, r1
 80078f4:	0e1b      	lsrs	r3, r3, #24
 80078f6:	4313      	orrs	r3, r2
 80078f8:	4a59      	ldr	r2, [pc, #356]	; (8007a60 <MX_LWIP_Init+0x244>)
 80078fa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80078fc:	4b56      	ldr	r3, [pc, #344]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	061a      	lsls	r2, r3, #24
 8007902:	4b55      	ldr	r3, [pc, #340]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	041b      	lsls	r3, r3, #16
 8007908:	431a      	orrs	r2, r3
 800790a:	4b53      	ldr	r3, [pc, #332]	; (8007a58 <MX_LWIP_Init+0x23c>)
 800790c:	789b      	ldrb	r3, [r3, #2]
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	4313      	orrs	r3, r2
 8007912:	4a51      	ldr	r2, [pc, #324]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007914:	78d2      	ldrb	r2, [r2, #3]
 8007916:	4313      	orrs	r3, r2
 8007918:	061a      	lsls	r2, r3, #24
 800791a:	4b4f      	ldr	r3, [pc, #316]	; (8007a58 <MX_LWIP_Init+0x23c>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	0619      	lsls	r1, r3, #24
 8007920:	4b4d      	ldr	r3, [pc, #308]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	041b      	lsls	r3, r3, #16
 8007926:	4319      	orrs	r1, r3
 8007928:	4b4b      	ldr	r3, [pc, #300]	; (8007a58 <MX_LWIP_Init+0x23c>)
 800792a:	789b      	ldrb	r3, [r3, #2]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	430b      	orrs	r3, r1
 8007930:	4949      	ldr	r1, [pc, #292]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007932:	78c9      	ldrb	r1, [r1, #3]
 8007934:	430b      	orrs	r3, r1
 8007936:	021b      	lsls	r3, r3, #8
 8007938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800793c:	431a      	orrs	r2, r3
 800793e:	4b46      	ldr	r3, [pc, #280]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	0619      	lsls	r1, r3, #24
 8007944:	4b44      	ldr	r3, [pc, #272]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007946:	785b      	ldrb	r3, [r3, #1]
 8007948:	041b      	lsls	r3, r3, #16
 800794a:	4319      	orrs	r1, r3
 800794c:	4b42      	ldr	r3, [pc, #264]	; (8007a58 <MX_LWIP_Init+0x23c>)
 800794e:	789b      	ldrb	r3, [r3, #2]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	430b      	orrs	r3, r1
 8007954:	4940      	ldr	r1, [pc, #256]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007956:	78c9      	ldrb	r1, [r1, #3]
 8007958:	430b      	orrs	r3, r1
 800795a:	0a1b      	lsrs	r3, r3, #8
 800795c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007960:	431a      	orrs	r2, r3
 8007962:	4b3d      	ldr	r3, [pc, #244]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	0619      	lsls	r1, r3, #24
 8007968:	4b3b      	ldr	r3, [pc, #236]	; (8007a58 <MX_LWIP_Init+0x23c>)
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	041b      	lsls	r3, r3, #16
 800796e:	4319      	orrs	r1, r3
 8007970:	4b39      	ldr	r3, [pc, #228]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007972:	789b      	ldrb	r3, [r3, #2]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	430b      	orrs	r3, r1
 8007978:	4937      	ldr	r1, [pc, #220]	; (8007a58 <MX_LWIP_Init+0x23c>)
 800797a:	78c9      	ldrb	r1, [r1, #3]
 800797c:	430b      	orrs	r3, r1
 800797e:	0e1b      	lsrs	r3, r3, #24
 8007980:	4313      	orrs	r3, r2
 8007982:	4a38      	ldr	r2, [pc, #224]	; (8007a64 <MX_LWIP_Init+0x248>)
 8007984:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007986:	4b35      	ldr	r3, [pc, #212]	; (8007a5c <MX_LWIP_Init+0x240>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	061a      	lsls	r2, r3, #24
 800798c:	4b33      	ldr	r3, [pc, #204]	; (8007a5c <MX_LWIP_Init+0x240>)
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	041b      	lsls	r3, r3, #16
 8007992:	431a      	orrs	r2, r3
 8007994:	4b31      	ldr	r3, [pc, #196]	; (8007a5c <MX_LWIP_Init+0x240>)
 8007996:	789b      	ldrb	r3, [r3, #2]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	4313      	orrs	r3, r2
 800799c:	4a2f      	ldr	r2, [pc, #188]	; (8007a5c <MX_LWIP_Init+0x240>)
 800799e:	78d2      	ldrb	r2, [r2, #3]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	061a      	lsls	r2, r3, #24
 80079a4:	4b2d      	ldr	r3, [pc, #180]	; (8007a5c <MX_LWIP_Init+0x240>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	0619      	lsls	r1, r3, #24
 80079aa:	4b2c      	ldr	r3, [pc, #176]	; (8007a5c <MX_LWIP_Init+0x240>)
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	041b      	lsls	r3, r3, #16
 80079b0:	4319      	orrs	r1, r3
 80079b2:	4b2a      	ldr	r3, [pc, #168]	; (8007a5c <MX_LWIP_Init+0x240>)
 80079b4:	789b      	ldrb	r3, [r3, #2]
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	430b      	orrs	r3, r1
 80079ba:	4928      	ldr	r1, [pc, #160]	; (8007a5c <MX_LWIP_Init+0x240>)
 80079bc:	78c9      	ldrb	r1, [r1, #3]
 80079be:	430b      	orrs	r3, r1
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079c6:	431a      	orrs	r2, r3
 80079c8:	4b24      	ldr	r3, [pc, #144]	; (8007a5c <MX_LWIP_Init+0x240>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	0619      	lsls	r1, r3, #24
 80079ce:	4b23      	ldr	r3, [pc, #140]	; (8007a5c <MX_LWIP_Init+0x240>)
 80079d0:	785b      	ldrb	r3, [r3, #1]
 80079d2:	041b      	lsls	r3, r3, #16
 80079d4:	4319      	orrs	r1, r3
 80079d6:	4b21      	ldr	r3, [pc, #132]	; (8007a5c <MX_LWIP_Init+0x240>)
 80079d8:	789b      	ldrb	r3, [r3, #2]
 80079da:	021b      	lsls	r3, r3, #8
 80079dc:	430b      	orrs	r3, r1
 80079de:	491f      	ldr	r1, [pc, #124]	; (8007a5c <MX_LWIP_Init+0x240>)
 80079e0:	78c9      	ldrb	r1, [r1, #3]
 80079e2:	430b      	orrs	r3, r1
 80079e4:	0a1b      	lsrs	r3, r3, #8
 80079e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079ea:	431a      	orrs	r2, r3
 80079ec:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <MX_LWIP_Init+0x240>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	0619      	lsls	r1, r3, #24
 80079f2:	4b1a      	ldr	r3, [pc, #104]	; (8007a5c <MX_LWIP_Init+0x240>)
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	041b      	lsls	r3, r3, #16
 80079f8:	4319      	orrs	r1, r3
 80079fa:	4b18      	ldr	r3, [pc, #96]	; (8007a5c <MX_LWIP_Init+0x240>)
 80079fc:	789b      	ldrb	r3, [r3, #2]
 80079fe:	021b      	lsls	r3, r3, #8
 8007a00:	430b      	orrs	r3, r1
 8007a02:	4916      	ldr	r1, [pc, #88]	; (8007a5c <MX_LWIP_Init+0x240>)
 8007a04:	78c9      	ldrb	r1, [r1, #3]
 8007a06:	430b      	orrs	r3, r1
 8007a08:	0e1b      	lsrs	r3, r3, #24
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	4a16      	ldr	r2, [pc, #88]	; (8007a68 <MX_LWIP_Init+0x24c>)
 8007a0e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007a10:	4b16      	ldr	r3, [pc, #88]	; (8007a6c <MX_LWIP_Init+0x250>)
 8007a12:	9302      	str	r3, [sp, #8]
 8007a14:	4b16      	ldr	r3, [pc, #88]	; (8007a70 <MX_LWIP_Init+0x254>)
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	4b12      	ldr	r3, [pc, #72]	; (8007a68 <MX_LWIP_Init+0x24c>)
 8007a1e:	4a11      	ldr	r2, [pc, #68]	; (8007a64 <MX_LWIP_Init+0x248>)
 8007a20:	490f      	ldr	r1, [pc, #60]	; (8007a60 <MX_LWIP_Init+0x244>)
 8007a22:	4814      	ldr	r0, [pc, #80]	; (8007a74 <MX_LWIP_Init+0x258>)
 8007a24:	f004 f9a6 	bl	800bd74 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007a28:	4812      	ldr	r0, [pc, #72]	; (8007a74 <MX_LWIP_Init+0x258>)
 8007a2a:	f004 fb53 	bl	800c0d4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007a2e:	4b11      	ldr	r3, [pc, #68]	; (8007a74 <MX_LWIP_Init+0x258>)
 8007a30:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007a34:	089b      	lsrs	r3, r3, #2
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007a40:	480c      	ldr	r0, [pc, #48]	; (8007a74 <MX_LWIP_Init+0x258>)
 8007a42:	f004 fb57 	bl	800c0f4 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007a46:	e002      	b.n	8007a4e <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8007a48:	480a      	ldr	r0, [pc, #40]	; (8007a74 <MX_LWIP_Init+0x258>)
 8007a4a:	f004 fbbf 	bl	800c1cc <netif_set_down>
}
 8007a4e:	bf00      	nop
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20004e2c 	.word	0x20004e2c
 8007a58:	20004e28 	.word	0x20004e28
 8007a5c:	20004df0 	.word	0x20004df0
 8007a60:	20004e24 	.word	0x20004e24
 8007a64:	20004e30 	.word	0x20004e30
 8007a68:	20004e34 	.word	0x20004e34
 8007a6c:	0800b1a9 	.word	0x0800b1a9
 8007a70:	08008091 	.word	0x08008091
 8007a74:	20004df4 	.word	0x20004df4

08007a78 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08e      	sub	sp, #56	; 0x38
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	605a      	str	r2, [r3, #4]
 8007a8a:	609a      	str	r2, [r3, #8]
 8007a8c:	60da      	str	r2, [r3, #12]
 8007a8e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a44      	ldr	r2, [pc, #272]	; (8007ba8 <HAL_ETH_MspInit+0x130>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	f040 8081 	bne.w	8007b9e <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007a9c:	4b43      	ldr	r3, [pc, #268]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa0:	4a42      	ldr	r2, [pc, #264]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8007aa8:	4b40      	ldr	r3, [pc, #256]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab0:	623b      	str	r3, [r7, #32]
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	4b3d      	ldr	r3, [pc, #244]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab8:	4a3c      	ldr	r2, [pc, #240]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007abe:	6313      	str	r3, [r2, #48]	; 0x30
 8007ac0:	4b3a      	ldr	r3, [pc, #232]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ac8:	61fb      	str	r3, [r7, #28]
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	4b37      	ldr	r3, [pc, #220]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad0:	4a36      	ldr	r2, [pc, #216]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8007ad8:	4b34      	ldr	r3, [pc, #208]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ae4:	4b31      	ldr	r3, [pc, #196]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	4a30      	ldr	r2, [pc, #192]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aee:	6313      	str	r3, [r2, #48]	; 0x30
 8007af0:	4b2e      	ldr	r3, [pc, #184]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007afc:	4b2b      	ldr	r3, [pc, #172]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	4a2a      	ldr	r2, [pc, #168]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007b02:	f043 0304 	orr.w	r3, r3, #4
 8007b06:	6313      	str	r3, [r2, #48]	; 0x30
 8007b08:	4b28      	ldr	r3, [pc, #160]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b14:	4b25      	ldr	r3, [pc, #148]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	4a24      	ldr	r2, [pc, #144]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007b1a:	f043 0301 	orr.w	r3, r3, #1
 8007b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8007b20:	4b22      	ldr	r3, [pc, #136]	; (8007bac <HAL_ETH_MspInit+0x134>)
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8007b2c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b32:	2302      	movs	r3, #2
 8007b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007b3e:	230b      	movs	r3, #11
 8007b40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b46:	4619      	mov	r1, r3
 8007b48:	4819      	ldr	r0, [pc, #100]	; (8007bb0 <HAL_ETH_MspInit+0x138>)
 8007b4a:	f7fc f991 	bl	8003e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007b4e:	2332      	movs	r3, #50	; 0x32
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b52:	2302      	movs	r3, #2
 8007b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007b5e:	230b      	movs	r3, #11
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b66:	4619      	mov	r1, r3
 8007b68:	4812      	ldr	r0, [pc, #72]	; (8007bb4 <HAL_ETH_MspInit+0x13c>)
 8007b6a:	f7fc f981 	bl	8003e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007b6e:	2386      	movs	r3, #134	; 0x86
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b72:	2302      	movs	r3, #2
 8007b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007b7e:	230b      	movs	r3, #11
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b86:	4619      	mov	r1, r3
 8007b88:	480b      	ldr	r0, [pc, #44]	; (8007bb8 <HAL_ETH_MspInit+0x140>)
 8007b8a:	f7fc f971 	bl	8003e70 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2105      	movs	r1, #5
 8007b92:	203d      	movs	r0, #61	; 0x3d
 8007b94:	f7fb f8c0 	bl	8002d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007b98:	203d      	movs	r0, #61	; 0x3d
 8007b9a:	f7fb f8d9 	bl	8002d50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	3738      	adds	r7, #56	; 0x38
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	40028000 	.word	0x40028000
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	40021800 	.word	0x40021800
 8007bb4:	40020800 	.word	0x40020800
 8007bb8:	40020000 	.word	0x40020000

08007bbc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8007bc4:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <HAL_ETH_RxCpltCallback+0x1c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f000 fc53 	bl	8008474 <osSemaphoreRelease>
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000cfc 	.word	0x20000cfc

08007bdc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007bdc:	b5b0      	push	{r4, r5, r7, lr}
 8007bde:	b090      	sub	sp, #64	; 0x40
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007be8:	4b60      	ldr	r3, [pc, #384]	; (8007d6c <low_level_init+0x190>)
 8007bea:	4a61      	ldr	r2, [pc, #388]	; (8007d70 <low_level_init+0x194>)
 8007bec:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007bee:	4b5f      	ldr	r3, [pc, #380]	; (8007d6c <low_level_init+0x190>)
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007bf4:	4b5d      	ldr	r3, [pc, #372]	; (8007d6c <low_level_init+0x190>)
 8007bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007bfa:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007bfc:	4b5b      	ldr	r3, [pc, #364]	; (8007d6c <low_level_init+0x190>)
 8007bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c02:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007c04:	4b59      	ldr	r3, [pc, #356]	; (8007d6c <low_level_init+0x190>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8007c10:	2380      	movs	r3, #128	; 0x80
 8007c12:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8007c16:	23e1      	movs	r3, #225	; 0xe1
 8007c18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8007c22:	2300      	movs	r3, #0
 8007c24:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8007c2e:	4a4f      	ldr	r2, [pc, #316]	; (8007d6c <low_level_init+0x190>)
 8007c30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c34:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8007c36:	4b4d      	ldr	r3, [pc, #308]	; (8007d6c <low_level_init+0x190>)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007c3c:	4b4b      	ldr	r3, [pc, #300]	; (8007d6c <low_level_init+0x190>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007c42:	4b4a      	ldr	r3, [pc, #296]	; (8007d6c <low_level_init+0x190>)
 8007c44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007c48:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007c4a:	4848      	ldr	r0, [pc, #288]	; (8007d6c <low_level_init+0x190>)
 8007c4c:	f7fb f920 	bl	8002e90 <HAL_ETH_Init>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8007c56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d108      	bne.n	8007c70 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007c64:	f043 0304 	orr.w	r3, r3, #4
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007c70:	2304      	movs	r3, #4
 8007c72:	4a40      	ldr	r2, [pc, #256]	; (8007d74 <low_level_init+0x198>)
 8007c74:	4940      	ldr	r1, [pc, #256]	; (8007d78 <low_level_init+0x19c>)
 8007c76:	483d      	ldr	r0, [pc, #244]	; (8007d6c <low_level_init+0x190>)
 8007c78:	f7fb faa4 	bl	80031c4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	4a3f      	ldr	r2, [pc, #252]	; (8007d7c <low_level_init+0x1a0>)
 8007c80:	493f      	ldr	r1, [pc, #252]	; (8007d80 <low_level_init+0x1a4>)
 8007c82:	483a      	ldr	r0, [pc, #232]	; (8007d6c <low_level_init+0x190>)
 8007c84:	f7fb fb07 	bl	8003296 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2206      	movs	r2, #6
 8007c8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007c90:	4b36      	ldr	r3, [pc, #216]	; (8007d6c <low_level_init+0x190>)
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	781a      	ldrb	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007c9c:	4b33      	ldr	r3, [pc, #204]	; (8007d6c <low_level_init+0x190>)
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	785a      	ldrb	r2, [r3, #1]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007ca8:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <low_level_init+0x190>)
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	789a      	ldrb	r2, [r3, #2]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007cb4:	4b2d      	ldr	r3, [pc, #180]	; (8007d6c <low_level_init+0x190>)
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	78da      	ldrb	r2, [r3, #3]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007cc0:	4b2a      	ldr	r3, [pc, #168]	; (8007d6c <low_level_init+0x190>)
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	791a      	ldrb	r2, [r3, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007ccc:	4b27      	ldr	r3, [pc, #156]	; (8007d6c <low_level_init+0x190>)
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	795a      	ldrb	r2, [r3, #5]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007cde:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007ce6:	f043 030a 	orr.w	r3, r3, #10
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fb37 	bl	8008374 <osSemaphoreCreate>
 8007d06:	4603      	mov	r3, r0
 8007d08:	4a1e      	ldr	r2, [pc, #120]	; (8007d84 <low_level_init+0x1a8>)
 8007d0a:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007d0c:	4b1e      	ldr	r3, [pc, #120]	; (8007d88 <low_level_init+0x1ac>)
 8007d0e:	f107 040c 	add.w	r4, r7, #12
 8007d12:	461d      	mov	r5, r3
 8007d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007d1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007d20:	f107 030c 	add.w	r3, r7, #12
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 fa28 	bl	800817c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007d2c:	480f      	ldr	r0, [pc, #60]	; (8007d6c <low_level_init+0x190>)
 8007d2e:	f7fb fdda 	bl	80038e6 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007d32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d36:	461a      	mov	r2, r3
 8007d38:	211d      	movs	r1, #29
 8007d3a:	480c      	ldr	r0, [pc, #48]	; (8007d6c <low_level_init+0x190>)
 8007d3c:	f7fb fd05 	bl	800374a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	f043 030b 	orr.w	r3, r3, #11
 8007d46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	211d      	movs	r1, #29
 8007d4e:	4807      	ldr	r0, [pc, #28]	; (8007d6c <low_level_init+0x190>)
 8007d50:	f7fb fd63 	bl	800381a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007d54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d58:	461a      	mov	r2, r3
 8007d5a:	211d      	movs	r1, #29
 8007d5c:	4803      	ldr	r0, [pc, #12]	; (8007d6c <low_level_init+0x190>)
 8007d5e:	f7fb fcf4 	bl	800374a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007d62:	bf00      	nop
 8007d64:	3740      	adds	r7, #64	; 0x40
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bdb0      	pop	{r4, r5, r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20006708 	.word	0x20006708
 8007d70:	40028000 	.word	0x40028000
 8007d74:	20006750 	.word	0x20006750
 8007d78:	20004e38 	.word	0x20004e38
 8007d7c:	20004eb8 	.word	0x20004eb8
 8007d80:	20006688 	.word	0x20006688
 8007d84:	20000cfc 	.word	0x20000cfc
 8007d88:	0801cc04 	.word	0x0801cc04

08007d8c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	; 0x28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007d96:	4b4b      	ldr	r3, [pc, #300]	; (8007ec4 <low_level_output+0x138>)
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007dae:	4b45      	ldr	r3, [pc, #276]	; (8007ec4 <low_level_output+0x138>)
 8007db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	623b      	str	r3, [r7, #32]
 8007dbc:	e05a      	b.n	8007e74 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	da03      	bge.n	8007dce <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007dc6:	23f8      	movs	r3, #248	; 0xf8
 8007dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007dcc:	e05c      	b.n	8007e88 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	895b      	ldrh	r3, [r3, #10]
 8007dd2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007dd8:	e02f      	b.n	8007e3a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	18d0      	adds	r0, r2, r3
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	18d1      	adds	r1, r2, r3
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007dee:	1a9b      	subs	r3, r3, r2
 8007df0:	461a      	mov	r2, r3
 8007df2:	f00d f8eb 	bl	8014fcc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	da03      	bge.n	8007e0c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007e04:	23f8      	movs	r3, #248	; 0xf8
 8007e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007e0a:	e03d      	b.n	8007e88 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4413      	add	r3, r2
 8007e18:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007e1c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007e28:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007e34:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d8c8      	bhi.n	8007dda <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007e48:	69fa      	ldr	r2, [r7, #28]
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	18d0      	adds	r0, r2, r3
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4413      	add	r3, r2
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	f00d f8b7 	bl	8014fcc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	623b      	str	r3, [r7, #32]
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1a1      	bne.n	8007dbe <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007e7a:	6979      	ldr	r1, [r7, #20]
 8007e7c:	4811      	ldr	r0, [pc, #68]	; (8007ec4 <low_level_output+0x138>)
 8007e7e:	f7fb fa77 	bl	8003370 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007e88:	4b0e      	ldr	r3, [pc, #56]	; (8007ec4 <low_level_output+0x138>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	f241 0314 	movw	r3, #4116	; 0x1014
 8007e90:	4413      	add	r3, r2
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00d      	beq.n	8007eb8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007e9c:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <low_level_output+0x138>)
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	f241 0314 	movw	r3, #4116	; 0x1014
 8007ea4:	4413      	add	r3, r2
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007eaa:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <low_level_output+0x138>)
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	f241 0304 	movw	r3, #4100	; 0x1004
 8007eb2:	4413      	add	r3, r2
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007eb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3728      	adds	r7, #40	; 0x28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20006708 	.word	0x20006708

08007ec8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08c      	sub	sp, #48	; 0x30
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007eec:	484f      	ldr	r0, [pc, #316]	; (800802c <low_level_input+0x164>)
 8007eee:	f7fb fb29 	bl	8003544 <HAL_ETH_GetReceivedFrame_IT>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <low_level_input+0x34>

    return NULL;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e092      	b.n	8008022 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007efc:	4b4b      	ldr	r3, [pc, #300]	; (800802c <low_level_input+0x164>)
 8007efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f00:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007f02:	4b4a      	ldr	r3, [pc, #296]	; (800802c <low_level_input+0x164>)
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007f08:	89fb      	ldrh	r3, [r7, #14]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d007      	beq.n	8007f1e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007f0e:	89fb      	ldrh	r3, [r7, #14]
 8007f10:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007f14:	4619      	mov	r1, r3
 8007f16:	2000      	movs	r0, #0
 8007f18:	f004 fa42 	bl	800c3a0 <pbuf_alloc>
 8007f1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d04b      	beq.n	8007fbc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007f24:	4b41      	ldr	r3, [pc, #260]	; (800802c <low_level_input+0x164>)
 8007f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f28:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f32:	e040      	b.n	8007fb6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	895b      	ldrh	r3, [r3, #10]
 8007f38:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007f3e:	e021      	b.n	8007f84 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	18d0      	adds	r0, r2, r3
 8007f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	18d1      	adds	r1, r2, r3
 8007f4e:	69fa      	ldr	r2, [r7, #28]
 8007f50:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	461a      	mov	r2, r3
 8007f58:	f00d f838 	bl	8014fcc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007f68:	69fa      	ldr	r2, [r7, #28]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007f72:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007f7e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d8d6      	bhi.n	8007f40 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	18d0      	adds	r0, r2, r3
 8007f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f00d f812 	bl	8014fcc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007fa8:	69fa      	ldr	r2, [r7, #28]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	4413      	add	r3, r2
 8007fae:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1bb      	bne.n	8007f34 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007fbc:	4b1b      	ldr	r3, [pc, #108]	; (800802c <low_level_input+0x164>)
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	613b      	str	r3, [r7, #16]
 8007fc6:	e00b      	b.n	8007fe0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	4b12      	ldr	r3, [pc, #72]	; (800802c <low_level_input+0x164>)
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d3ee      	bcc.n	8007fc8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007fea:	4b10      	ldr	r3, [pc, #64]	; (800802c <low_level_input+0x164>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007ff0:	4b0e      	ldr	r3, [pc, #56]	; (800802c <low_level_input+0x164>)
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	f241 0314 	movw	r3, #4116	; 0x1014
 8007ff8:	4413      	add	r3, r2
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00d      	beq.n	8008020 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008004:	4b09      	ldr	r3, [pc, #36]	; (800802c <low_level_input+0x164>)
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	f241 0314 	movw	r3, #4116	; 0x1014
 800800c:	4413      	add	r3, r2
 800800e:	2280      	movs	r2, #128	; 0x80
 8008010:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008012:	4b06      	ldr	r3, [pc, #24]	; (800802c <low_level_input+0x164>)
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	f241 0308 	movw	r3, #4104	; 0x1008
 800801a:	4413      	add	r3, r2
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008022:	4618      	mov	r0, r3
 8008024:	3730      	adds	r7, #48	; 0x30
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20006708 	.word	0x20006708

08008030 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800803c:	4b12      	ldr	r3, [pc, #72]	; (8008088 <ethernetif_input+0x58>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f04f 31ff 	mov.w	r1, #4294967295
 8008044:	4618      	mov	r0, r3
 8008046:	f000 f9c7 	bl	80083d8 <osSemaphoreWait>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1f5      	bne.n	800803c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8008050:	480e      	ldr	r0, [pc, #56]	; (800808c <ethernetif_input+0x5c>)
 8008052:	f00c ff25 	bl	8014ea0 <sys_mutex_lock>
        p = low_level_input( netif );
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f7ff ff36 	bl	8007ec8 <low_level_input>
 800805c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00a      	beq.n	800807a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	68f9      	ldr	r1, [r7, #12]
 800806a:	68b8      	ldr	r0, [r7, #8]
 800806c:	4798      	blx	r3
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8008074:	68b8      	ldr	r0, [r7, #8]
 8008076:	f004 fc77 	bl	800c968 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800807a:	4804      	ldr	r0, [pc, #16]	; (800808c <ethernetif_input+0x5c>)
 800807c:	f00c ff1f 	bl	8014ebe <sys_mutex_unlock>
      } while(p!=NULL);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e4      	bne.n	8008050 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008086:	e7d9      	b.n	800803c <ethernetif_input+0xc>
 8008088:	20000cfc 	.word	0x20000cfc
 800808c:	20007f20 	.word	0x20007f20

08008090 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d106      	bne.n	80080ac <ethernetif_init+0x1c>
 800809e:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <ethernetif_init+0x48>)
 80080a0:	f240 222b 	movw	r2, #555	; 0x22b
 80080a4:	490d      	ldr	r1, [pc, #52]	; (80080dc <ethernetif_init+0x4c>)
 80080a6:	480e      	ldr	r0, [pc, #56]	; (80080e0 <ethernetif_init+0x50>)
 80080a8:	f00d fa3e 	bl	8015528 <printf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2273      	movs	r2, #115	; 0x73
 80080b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2274      	movs	r2, #116	; 0x74
 80080b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a09      	ldr	r2, [pc, #36]	; (80080e4 <ethernetif_init+0x54>)
 80080c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a08      	ldr	r2, [pc, #32]	; (80080e8 <ethernetif_init+0x58>)
 80080c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff fd87 	bl	8007bdc <low_level_init>

  return ERR_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	0801cc20 	.word	0x0801cc20
 80080dc:	0801cc3c 	.word	0x0801cc3c
 80080e0:	0801cc4c 	.word	0x0801cc4c
 80080e4:	0801304d 	.word	0x0801304d
 80080e8:	08007d8d 	.word	0x08007d8d

080080ec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80080f0:	f7fa fd2a 	bl	8002b48 <HAL_GetTick>
 80080f4:	4603      	mov	r3, r0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	bd80      	pop	{r7, pc}

080080fa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	4603      	mov	r3, r0
 8008102:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800810c:	2b84      	cmp	r3, #132	; 0x84
 800810e:	d005      	beq.n	800811c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008110:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4413      	add	r3, r2
 8008118:	3303      	adds	r3, #3
 800811a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800811c:	68fb      	ldr	r3, [r7, #12]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008130:	f3ef 8305 	mrs	r3, IPSR
 8008134:	607b      	str	r3, [r7, #4]
  return(result);
 8008136:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008138:	2b00      	cmp	r3, #0
 800813a:	bf14      	ite	ne
 800813c:	2301      	movne	r3, #1
 800813e:	2300      	moveq	r3, #0
 8008140:	b2db      	uxtb	r3, r3
}
 8008142:	4618      	mov	r0, r3
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008152:	f001 fca5 	bl	8009aa0 <vTaskStartScheduler>
  
  return osOK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	bd80      	pop	{r7, pc}

0800815c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008160:	f7ff ffe3 	bl	800812a <inHandlerMode>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800816a:	f001 fdb9 	bl	8009ce0 <xTaskGetTickCountFromISR>
 800816e:	4603      	mov	r3, r0
 8008170:	e002      	b.n	8008178 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008172:	f001 fda5 	bl	8009cc0 <xTaskGetTickCount>
 8008176:	4603      	mov	r3, r0
  }
}
 8008178:	4618      	mov	r0, r3
 800817a:	bd80      	pop	{r7, pc}

0800817c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800817c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817e:	b089      	sub	sp, #36	; 0x24
 8008180:	af04      	add	r7, sp, #16
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d020      	beq.n	80081d0 <osThreadCreate+0x54>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d01c      	beq.n	80081d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685c      	ldr	r4, [r3, #4]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681d      	ldr	r5, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691e      	ldr	r6, [r3, #16]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff ffa6 	bl	80080fa <makeFreeRtosPriority>
 80081ae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081b8:	9202      	str	r2, [sp, #8]
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	9100      	str	r1, [sp, #0]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	4632      	mov	r2, r6
 80081c2:	4629      	mov	r1, r5
 80081c4:	4620      	mov	r0, r4
 80081c6:	f001 fa99 	bl	80096fc <xTaskCreateStatic>
 80081ca:	4603      	mov	r3, r0
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	e01c      	b.n	800820a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685c      	ldr	r4, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081dc:	b29e      	uxth	r6, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff ff88 	bl	80080fa <makeFreeRtosPriority>
 80081ea:	4602      	mov	r2, r0
 80081ec:	f107 030c 	add.w	r3, r7, #12
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	9200      	str	r2, [sp, #0]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	4632      	mov	r2, r6
 80081f8:	4629      	mov	r1, r5
 80081fa:	4620      	mov	r0, r4
 80081fc:	f001 fae1 	bl	80097c2 <xTaskCreate>
 8008200:	4603      	mov	r3, r0
 8008202:	2b01      	cmp	r3, #1
 8008204:	d001      	beq.n	800820a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008206:	2300      	movs	r3, #0
 8008208:	e000      	b.n	800820c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800820a:	68fb      	ldr	r3, [r7, #12]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008214 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <osDelay+0x16>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	e000      	b.n	800822c <osDelay+0x18>
 800822a:	2301      	movs	r3, #1
 800822c:	4618      	mov	r0, r3
 800822e:	f001 fc01 	bl	8009a34 <vTaskDelay>
  
  return osOK;
 8008232:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d007      	beq.n	800825c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	4619      	mov	r1, r3
 8008252:	2001      	movs	r0, #1
 8008254:	f000 fc53 	bl	8008afe <xQueueCreateMutexStatic>
 8008258:	4603      	mov	r3, r0
 800825a:	e003      	b.n	8008264 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800825c:	2001      	movs	r0, #1
 800825e:	f000 fc36 	bl	8008ace <xQueueCreateMutex>
 8008262:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008264:	4618      	mov	r0, r3
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008276:	2300      	movs	r3, #0
 8008278:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <osMutexWait+0x18>
    return osErrorParameter;
 8008280:	2380      	movs	r3, #128	; 0x80
 8008282:	e03a      	b.n	80082fa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828e:	d103      	bne.n	8008298 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008290:	f04f 33ff 	mov.w	r3, #4294967295
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	e009      	b.n	80082ac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d006      	beq.n	80082ac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <osMutexWait+0x40>
      ticks = 1;
 80082a8:	2301      	movs	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80082ac:	f7ff ff3d 	bl	800812a <inHandlerMode>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d017      	beq.n	80082e6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80082b6:	f107 0308 	add.w	r3, r7, #8
 80082ba:	461a      	mov	r2, r3
 80082bc:	2100      	movs	r1, #0
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 f86e 	bl	80093a0 <xQueueReceiveFromISR>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d001      	beq.n	80082ce <osMutexWait+0x62>
      return osErrorOS;
 80082ca:	23ff      	movs	r3, #255	; 0xff
 80082cc:	e015      	b.n	80082fa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d011      	beq.n	80082f8 <osMutexWait+0x8c>
 80082d4:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <osMutexWait+0x98>)
 80082d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	e008      	b.n	80082f8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80082e6:	68f9      	ldr	r1, [r7, #12]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 ff45 	bl	8009178 <xQueueSemaphoreTake>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d001      	beq.n	80082f8 <osMutexWait+0x8c>
    return osErrorOS;
 80082f4:	23ff      	movs	r3, #255	; 0xff
 80082f6:	e000      	b.n	80082fa <osMutexWait+0x8e>
  }
  
  return osOK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	e000ed04 	.word	0xe000ed04

08008308 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008314:	2300      	movs	r3, #0
 8008316:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008318:	f7ff ff07 	bl	800812a <inHandlerMode>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d016      	beq.n	8008350 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008322:	f107 0308 	add.w	r3, r7, #8
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fda9 	bl	8008e80 <xQueueGiveFromISR>
 800832e:	4603      	mov	r3, r0
 8008330:	2b01      	cmp	r3, #1
 8008332:	d001      	beq.n	8008338 <osMutexRelease+0x30>
      return osErrorOS;
 8008334:	23ff      	movs	r3, #255	; 0xff
 8008336:	e017      	b.n	8008368 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d013      	beq.n	8008366 <osMutexRelease+0x5e>
 800833e:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <osMutexRelease+0x68>)
 8008340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	e00a      	b.n	8008366 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008350:	2300      	movs	r3, #0
 8008352:	2200      	movs	r2, #0
 8008354:	2100      	movs	r1, #0
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fbec 	bl	8008b34 <xQueueGenericSend>
 800835c:	4603      	mov	r3, r0
 800835e:	2b01      	cmp	r3, #1
 8008360:	d001      	beq.n	8008366 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008362:	23ff      	movs	r3, #255	; 0xff
 8008364:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008366:	68fb      	ldr	r3, [r7, #12]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	e000ed04 	.word	0xe000ed04

08008374 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af02      	add	r7, sp, #8
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00f      	beq.n	80083a6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d10a      	bne.n	80083a2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2203      	movs	r2, #3
 8008392:	9200      	str	r2, [sp, #0]
 8008394:	2200      	movs	r2, #0
 8008396:	2100      	movs	r1, #0
 8008398:	2001      	movs	r0, #1
 800839a:	f000 fa9b 	bl	80088d4 <xQueueGenericCreateStatic>
 800839e:	4603      	mov	r3, r0
 80083a0:	e016      	b.n	80083d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	e014      	b.n	80083d0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d110      	bne.n	80083ce <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80083ac:	2203      	movs	r2, #3
 80083ae:	2100      	movs	r1, #0
 80083b0:	2001      	movs	r0, #1
 80083b2:	f000 fb11 	bl	80089d8 <xQueueGenericCreate>
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d005      	beq.n	80083ca <osSemaphoreCreate+0x56>
 80083be:	2300      	movs	r3, #0
 80083c0:	2200      	movs	r2, #0
 80083c2:	2100      	movs	r1, #0
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fbb5 	bl	8008b34 <xQueueGenericSend>
      return sema;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	e000      	b.n	80083d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80083ce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80083e2:	2300      	movs	r3, #0
 80083e4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80083ec:	2380      	movs	r3, #128	; 0x80
 80083ee:	e03a      	b.n	8008466 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80083f0:	2300      	movs	r3, #0
 80083f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fa:	d103      	bne.n	8008404 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80083fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	e009      	b.n	8008418 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d006      	beq.n	8008418 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <osSemaphoreWait+0x40>
      ticks = 1;
 8008414:	2301      	movs	r3, #1
 8008416:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008418:	f7ff fe87 	bl	800812a <inHandlerMode>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d017      	beq.n	8008452 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008422:	f107 0308 	add.w	r3, r7, #8
 8008426:	461a      	mov	r2, r3
 8008428:	2100      	movs	r1, #0
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 ffb8 	bl	80093a0 <xQueueReceiveFromISR>
 8008430:	4603      	mov	r3, r0
 8008432:	2b01      	cmp	r3, #1
 8008434:	d001      	beq.n	800843a <osSemaphoreWait+0x62>
      return osErrorOS;
 8008436:	23ff      	movs	r3, #255	; 0xff
 8008438:	e015      	b.n	8008466 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d011      	beq.n	8008464 <osSemaphoreWait+0x8c>
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <osSemaphoreWait+0x98>)
 8008442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	e008      	b.n	8008464 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008452:	68f9      	ldr	r1, [r7, #12]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fe8f 	bl	8009178 <xQueueSemaphoreTake>
 800845a:	4603      	mov	r3, r0
 800845c:	2b01      	cmp	r3, #1
 800845e:	d001      	beq.n	8008464 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008460:	23ff      	movs	r3, #255	; 0xff
 8008462:	e000      	b.n	8008466 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	e000ed04 	.word	0xe000ed04

08008474 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008480:	2300      	movs	r3, #0
 8008482:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008484:	f7ff fe51 	bl	800812a <inHandlerMode>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d016      	beq.n	80084bc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800848e:	f107 0308 	add.w	r3, r7, #8
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fcf3 	bl	8008e80 <xQueueGiveFromISR>
 800849a:	4603      	mov	r3, r0
 800849c:	2b01      	cmp	r3, #1
 800849e:	d001      	beq.n	80084a4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80084a0:	23ff      	movs	r3, #255	; 0xff
 80084a2:	e017      	b.n	80084d4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d013      	beq.n	80084d2 <osSemaphoreRelease+0x5e>
 80084aa:	4b0c      	ldr	r3, [pc, #48]	; (80084dc <osSemaphoreRelease+0x68>)
 80084ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	e00a      	b.n	80084d2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80084bc:	2300      	movs	r3, #0
 80084be:	2200      	movs	r2, #0
 80084c0:	2100      	movs	r1, #0
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fb36 	bl	8008b34 <xQueueGenericSend>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d001      	beq.n	80084d2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80084ce:	23ff      	movs	r3, #255	; 0xff
 80084d0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80084d2:	68fb      	ldr	r3, [r7, #12]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	e000ed04 	.word	0xe000ed04

080084e0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80084e0:	b590      	push	{r4, r7, lr}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d011      	beq.n	8008516 <osMessageCreate+0x36>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00d      	beq.n	8008516 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6859      	ldr	r1, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	2400      	movs	r4, #0
 800850c:	9400      	str	r4, [sp, #0]
 800850e:	f000 f9e1 	bl	80088d4 <xQueueGenericCreateStatic>
 8008512:	4603      	mov	r3, r0
 8008514:	e008      	b.n	8008528 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	4619      	mov	r1, r3
 8008522:	f000 fa59 	bl	80089d8 <xQueueGenericCreate>
 8008526:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bd90      	pop	{r4, r7, pc}

08008530 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800853c:	2300      	movs	r3, #0
 800853e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <osMessagePut+0x1e>
    ticks = 1;
 800854a:	2301      	movs	r3, #1
 800854c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800854e:	f7ff fdec 	bl	800812a <inHandlerMode>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d018      	beq.n	800858a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008558:	f107 0210 	add.w	r2, r7, #16
 800855c:	f107 0108 	add.w	r1, r7, #8
 8008560:	2300      	movs	r3, #0
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 fbec 	bl	8008d40 <xQueueGenericSendFromISR>
 8008568:	4603      	mov	r3, r0
 800856a:	2b01      	cmp	r3, #1
 800856c:	d001      	beq.n	8008572 <osMessagePut+0x42>
      return osErrorOS;
 800856e:	23ff      	movs	r3, #255	; 0xff
 8008570:	e018      	b.n	80085a4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d014      	beq.n	80085a2 <osMessagePut+0x72>
 8008578:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <osMessagePut+0x7c>)
 800857a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	e00b      	b.n	80085a2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800858a:	f107 0108 	add.w	r1, r7, #8
 800858e:	2300      	movs	r3, #0
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 face 	bl	8008b34 <xQueueGenericSend>
 8008598:	4603      	mov	r3, r0
 800859a:	2b01      	cmp	r3, #1
 800859c:	d001      	beq.n	80085a2 <osMessagePut+0x72>
      return osErrorOS;
 800859e:	23ff      	movs	r3, #255	; 0xff
 80085a0:	e000      	b.n	80085a4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	e000ed04 	.word	0xe000ed04

080085b0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80085b0:	b590      	push	{r4, r7, lr}
 80085b2:	b08b      	sub	sp, #44	; 0x2c
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10a      	bne.n	80085e0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80085ca:	2380      	movs	r3, #128	; 0x80
 80085cc:	617b      	str	r3, [r7, #20]
    return event;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	461c      	mov	r4, r3
 80085d2:	f107 0314 	add.w	r3, r7, #20
 80085d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80085da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085de:	e054      	b.n	800868a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80085e0:	2300      	movs	r3, #0
 80085e2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ee:	d103      	bne.n	80085f8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80085f0:	f04f 33ff 	mov.w	r3, #4294967295
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
 80085f6:	e009      	b.n	800860c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d006      	beq.n	800860c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <osMessageGet+0x5c>
      ticks = 1;
 8008608:	2301      	movs	r3, #1
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800860c:	f7ff fd8d 	bl	800812a <inHandlerMode>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d01c      	beq.n	8008650 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008616:	f107 0220 	add.w	r2, r7, #32
 800861a:	f107 0314 	add.w	r3, r7, #20
 800861e:	3304      	adds	r3, #4
 8008620:	4619      	mov	r1, r3
 8008622:	68b8      	ldr	r0, [r7, #8]
 8008624:	f000 febc 	bl	80093a0 <xQueueReceiveFromISR>
 8008628:	4603      	mov	r3, r0
 800862a:	2b01      	cmp	r3, #1
 800862c:	d102      	bne.n	8008634 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800862e:	2310      	movs	r3, #16
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	e001      	b.n	8008638 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01d      	beq.n	800867a <osMessageGet+0xca>
 800863e:	4b15      	ldr	r3, [pc, #84]	; (8008694 <osMessageGet+0xe4>)
 8008640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	e014      	b.n	800867a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008650:	f107 0314 	add.w	r3, r7, #20
 8008654:	3304      	adds	r3, #4
 8008656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008658:	4619      	mov	r1, r3
 800865a:	68b8      	ldr	r0, [r7, #8]
 800865c:	f000 fca6 	bl	8008fac <xQueueReceive>
 8008660:	4603      	mov	r3, r0
 8008662:	2b01      	cmp	r3, #1
 8008664:	d102      	bne.n	800866c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008666:	2310      	movs	r3, #16
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	e006      	b.n	800867a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <osMessageGet+0xc6>
 8008672:	2300      	movs	r3, #0
 8008674:	e000      	b.n	8008678 <osMessageGet+0xc8>
 8008676:	2340      	movs	r3, #64	; 0x40
 8008678:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	461c      	mov	r4, r3
 800867e:	f107 0314 	add.w	r3, r7, #20
 8008682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	372c      	adds	r7, #44	; 0x2c
 800868e:	46bd      	mov	sp, r7
 8008690:	bd90      	pop	{r4, r7, pc}
 8008692:	bf00      	nop
 8008694:	e000ed04 	.word	0xe000ed04

08008698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f103 0208 	add.w	r2, r3, #8
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295
 80086b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f103 0208 	add.w	r2, r3, #8
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f103 0208 	add.w	r2, r3, #8
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086f2:	b480      	push	{r7}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
}
 800872e:	bf00      	nop
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800873a:	b480      	push	{r7}
 800873c:	b085      	sub	sp, #20
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008750:	d103      	bne.n	800875a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	e00c      	b.n	8008774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3308      	adds	r3, #8
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	e002      	b.n	8008768 <vListInsert+0x2e>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	429a      	cmp	r2, r3
 8008772:	d2f6      	bcs.n	8008762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	601a      	str	r2, [r3, #0]
}
 80087a0:	bf00      	nop
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6892      	ldr	r2, [r2, #8]
 80087c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6852      	ldr	r2, [r2, #4]
 80087cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d103      	bne.n	80087e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	1e5a      	subs	r2, r3, #1
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10c      	bne.n	800882e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	b672      	cpsid	i
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	b662      	cpsie	i
 8008828:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800882a:	bf00      	nop
 800882c:	e7fe      	b.n	800882c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800882e:	f002 f8b5 	bl	800a99c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883a:	68f9      	ldr	r1, [r7, #12]
 800883c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800883e:	fb01 f303 	mul.w	r3, r1, r3
 8008842:	441a      	add	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885e:	3b01      	subs	r3, #1
 8008860:	68f9      	ldr	r1, [r7, #12]
 8008862:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008864:	fb01 f303 	mul.w	r3, r1, r3
 8008868:	441a      	add	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	22ff      	movs	r2, #255	; 0xff
 8008872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	22ff      	movs	r2, #255	; 0xff
 800887a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d114      	bne.n	80088ae <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01a      	beq.n	80088c2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3310      	adds	r3, #16
 8008890:	4618      	mov	r0, r3
 8008892:	f001 fb75 	bl	8009f80 <xTaskRemoveFromEventList>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d012      	beq.n	80088c2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800889c:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <xQueueGenericReset+0xd0>)
 800889e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	e009      	b.n	80088c2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3310      	adds	r3, #16
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff fef0 	bl	8008698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	3324      	adds	r3, #36	; 0x24
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff feeb 	bl	8008698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80088c2:	f002 f89f 	bl	800aa04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80088c6:	2301      	movs	r3, #1
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08e      	sub	sp, #56	; 0x38
 80088d8:	af02      	add	r7, sp, #8
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10c      	bne.n	8008902 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	b672      	cpsid	i
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	b662      	cpsie	i
 80088fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10c      	bne.n	8008922 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890c:	b672      	cpsid	i
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	b662      	cpsie	i
 800891c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <xQueueGenericCreateStatic+0x5a>
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <xQueueGenericCreateStatic+0x5e>
 800892e:	2301      	movs	r3, #1
 8008930:	e000      	b.n	8008934 <xQueueGenericCreateStatic+0x60>
 8008932:	2300      	movs	r3, #0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10c      	bne.n	8008952 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893c:	b672      	cpsid	i
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	b662      	cpsie	i
 800894c:	623b      	str	r3, [r7, #32]
}
 800894e:	bf00      	nop
 8008950:	e7fe      	b.n	8008950 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d102      	bne.n	800895e <xQueueGenericCreateStatic+0x8a>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <xQueueGenericCreateStatic+0x8e>
 800895e:	2301      	movs	r3, #1
 8008960:	e000      	b.n	8008964 <xQueueGenericCreateStatic+0x90>
 8008962:	2300      	movs	r3, #0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10c      	bne.n	8008982 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	b672      	cpsid	i
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	b662      	cpsie	i
 800897c:	61fb      	str	r3, [r7, #28]
}
 800897e:	bf00      	nop
 8008980:	e7fe      	b.n	8008980 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008982:	2348      	movs	r3, #72	; 0x48
 8008984:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b48      	cmp	r3, #72	; 0x48
 800898a:	d00c      	beq.n	80089a6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	b672      	cpsid	i
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	b662      	cpsie	i
 80089a0:	61bb      	str	r3, [r7, #24]
}
 80089a2:	bf00      	nop
 80089a4:	e7fe      	b.n	80089a4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80089ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00d      	beq.n	80089ce <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80089be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	4613      	mov	r3, r2
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 f847 	bl	8008a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3730      	adds	r7, #48	; 0x30
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08a      	sub	sp, #40	; 0x28
 80089dc:	af02      	add	r7, sp, #8
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	4613      	mov	r3, r2
 80089e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10c      	bne.n	8008a06 <xQueueGenericCreate+0x2e>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	b672      	cpsid	i
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	b662      	cpsie	i
 8008a00:	613b      	str	r3, [r7, #16]
}
 8008a02:	bf00      	nop
 8008a04:	e7fe      	b.n	8008a04 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d102      	bne.n	8008a12 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	e004      	b.n	8008a1c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	fb02 f303 	mul.w	r3, r2, r3
 8008a1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	3348      	adds	r3, #72	; 0x48
 8008a20:	4618      	mov	r0, r3
 8008a22:	f002 f8e7 	bl	800abf4 <pvPortMalloc>
 8008a26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d011      	beq.n	8008a52 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	3348      	adds	r3, #72	; 0x48
 8008a36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a40:	79fa      	ldrb	r2, [r7, #7]
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	4613      	mov	r3, r2
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 f805 	bl	8008a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a52:	69bb      	ldr	r3, [r7, #24]
	}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3720      	adds	r7, #32
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d103      	bne.n	8008a78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	e002      	b.n	8008a7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	69b8      	ldr	r0, [r7, #24]
 8008a8e:	f7ff feb7 	bl	8008800 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00e      	beq.n	8008ac6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008aba:	2300      	movs	r3, #0
 8008abc:	2200      	movs	r2, #0
 8008abe:	2100      	movs	r1, #0
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f837 	bl	8008b34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b086      	sub	sp, #24
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	617b      	str	r3, [r7, #20]
 8008adc:	2300      	movs	r3, #0
 8008ade:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6939      	ldr	r1, [r7, #16]
 8008ae6:	6978      	ldr	r0, [r7, #20]
 8008ae8:	f7ff ff76 	bl	80089d8 <xQueueGenericCreate>
 8008aec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7ff ffd3 	bl	8008a9a <prvInitialiseMutex>

		return xNewQueue;
 8008af4:	68fb      	ldr	r3, [r7, #12]
	}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b088      	sub	sp, #32
 8008b02:	af02      	add	r7, sp, #8
 8008b04:	4603      	mov	r3, r0
 8008b06:	6039      	str	r1, [r7, #0]
 8008b08:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	617b      	str	r3, [r7, #20]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	6939      	ldr	r1, [r7, #16]
 8008b1c:	6978      	ldr	r0, [r7, #20]
 8008b1e:	f7ff fed9 	bl	80088d4 <xQueueGenericCreateStatic>
 8008b22:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff ffb8 	bl	8008a9a <prvInitialiseMutex>

		return xNewQueue;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
	}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08e      	sub	sp, #56	; 0x38
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
 8008b40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b42:	2300      	movs	r3, #0
 8008b44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10c      	bne.n	8008b6a <xQueueGenericSend+0x36>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	b672      	cpsid	i
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	b662      	cpsie	i
 8008b64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b66:	bf00      	nop
 8008b68:	e7fe      	b.n	8008b68 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d103      	bne.n	8008b78 <xQueueGenericSend+0x44>
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <xQueueGenericSend+0x48>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e000      	b.n	8008b7e <xQueueGenericSend+0x4a>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10c      	bne.n	8008b9c <xQueueGenericSend+0x68>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	b672      	cpsid	i
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	b662      	cpsie	i
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d103      	bne.n	8008baa <xQueueGenericSend+0x76>
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d101      	bne.n	8008bae <xQueueGenericSend+0x7a>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e000      	b.n	8008bb0 <xQueueGenericSend+0x7c>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10c      	bne.n	8008bce <xQueueGenericSend+0x9a>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	b672      	cpsid	i
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	b662      	cpsie	i
 8008bc8:	623b      	str	r3, [r7, #32]
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bce:	f001 fb9b 	bl	800a308 <xTaskGetSchedulerState>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d102      	bne.n	8008bde <xQueueGenericSend+0xaa>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <xQueueGenericSend+0xae>
 8008bde:	2301      	movs	r3, #1
 8008be0:	e000      	b.n	8008be4 <xQueueGenericSend+0xb0>
 8008be2:	2300      	movs	r3, #0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10c      	bne.n	8008c02 <xQueueGenericSend+0xce>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	b672      	cpsid	i
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	b662      	cpsie	i
 8008bfc:	61fb      	str	r3, [r7, #28]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c02:	f001 fecb 	bl	800a99c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d302      	bcc.n	8008c18 <xQueueGenericSend+0xe4>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d129      	bne.n	8008c6c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	68b9      	ldr	r1, [r7, #8]
 8008c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c1e:	f000 fc5d 	bl	80094dc <prvCopyDataToQueue>
 8008c22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d010      	beq.n	8008c4e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	3324      	adds	r3, #36	; 0x24
 8008c30:	4618      	mov	r0, r3
 8008c32:	f001 f9a5 	bl	8009f80 <xTaskRemoveFromEventList>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d013      	beq.n	8008c64 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c3c:	4b3f      	ldr	r3, [pc, #252]	; (8008d3c <xQueueGenericSend+0x208>)
 8008c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	e00a      	b.n	8008c64 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d007      	beq.n	8008c64 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c54:	4b39      	ldr	r3, [pc, #228]	; (8008d3c <xQueueGenericSend+0x208>)
 8008c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c64:	f001 fece 	bl	800aa04 <vPortExitCritical>
				return pdPASS;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e063      	b.n	8008d34 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d103      	bne.n	8008c7a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c72:	f001 fec7 	bl	800aa04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	e05c      	b.n	8008d34 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d106      	bne.n	8008c8e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c80:	f107 0314 	add.w	r3, r7, #20
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 f9df 	bl	800a048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c8e:	f001 feb9 	bl	800aa04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c92:	f000 ff69 	bl	8009b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c96:	f001 fe81 	bl	800a99c <vPortEnterCritical>
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ca0:	b25b      	sxtb	r3, r3
 8008ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca6:	d103      	bne.n	8008cb0 <xQueueGenericSend+0x17c>
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cb6:	b25b      	sxtb	r3, r3
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbc:	d103      	bne.n	8008cc6 <xQueueGenericSend+0x192>
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cc6:	f001 fe9d 	bl	800aa04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cca:	1d3a      	adds	r2, r7, #4
 8008ccc:	f107 0314 	add.w	r3, r7, #20
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 f9ce 	bl	800a074 <xTaskCheckForTimeOut>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d124      	bne.n	8008d28 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008cde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ce0:	f000 fcf4 	bl	80096cc <prvIsQueueFull>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d018      	beq.n	8008d1c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	3310      	adds	r3, #16
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f001 f91e 	bl	8009f34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cfa:	f000 fc7f 	bl	80095fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008cfe:	f000 ff41 	bl	8009b84 <xTaskResumeAll>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f47f af7c 	bne.w	8008c02 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008d0a:	4b0c      	ldr	r3, [pc, #48]	; (8008d3c <xQueueGenericSend+0x208>)
 8008d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	e772      	b.n	8008c02 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d1e:	f000 fc6d 	bl	80095fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d22:	f000 ff2f 	bl	8009b84 <xTaskResumeAll>
 8008d26:	e76c      	b.n	8008c02 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d2a:	f000 fc67 	bl	80095fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d2e:	f000 ff29 	bl	8009b84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3738      	adds	r7, #56	; 0x38
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	e000ed04 	.word	0xe000ed04

08008d40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08e      	sub	sp, #56	; 0x38
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10c      	bne.n	8008d72 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	b672      	cpsid	i
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	b662      	cpsie	i
 8008d6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d103      	bne.n	8008d80 <xQueueGenericSendFromISR+0x40>
 8008d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <xQueueGenericSendFromISR+0x44>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e000      	b.n	8008d86 <xQueueGenericSendFromISR+0x46>
 8008d84:	2300      	movs	r3, #0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10c      	bne.n	8008da4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	b672      	cpsid	i
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	b662      	cpsie	i
 8008d9e:	623b      	str	r3, [r7, #32]
}
 8008da0:	bf00      	nop
 8008da2:	e7fe      	b.n	8008da2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d103      	bne.n	8008db2 <xQueueGenericSendFromISR+0x72>
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d101      	bne.n	8008db6 <xQueueGenericSendFromISR+0x76>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e000      	b.n	8008db8 <xQueueGenericSendFromISR+0x78>
 8008db6:	2300      	movs	r3, #0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10c      	bne.n	8008dd6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	b672      	cpsid	i
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	b662      	cpsie	i
 8008dd0:	61fb      	str	r3, [r7, #28]
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dd6:	f001 fec9 	bl	800ab6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008dda:	f3ef 8211 	mrs	r2, BASEPRI
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	b672      	cpsid	i
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	b662      	cpsie	i
 8008df2:	61ba      	str	r2, [r7, #24]
 8008df4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008df6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008df8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d302      	bcc.n	8008e0c <xQueueGenericSendFromISR+0xcc>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d12c      	bne.n	8008e66 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	68b9      	ldr	r1, [r7, #8]
 8008e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e1c:	f000 fb5e 	bl	80094dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e20:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e28:	d112      	bne.n	8008e50 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d016      	beq.n	8008e60 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	3324      	adds	r3, #36	; 0x24
 8008e36:	4618      	mov	r0, r3
 8008e38:	f001 f8a2 	bl	8009f80 <xTaskRemoveFromEventList>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00e      	beq.n	8008e60 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	e007      	b.n	8008e60 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e54:	3301      	adds	r3, #1
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	b25a      	sxtb	r2, r3
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e60:	2301      	movs	r3, #1
 8008e62:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008e64:	e001      	b.n	8008e6a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	637b      	str	r3, [r7, #52]	; 0x34
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3738      	adds	r7, #56	; 0x38
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08e      	sub	sp, #56	; 0x38
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10c      	bne.n	8008eae <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	b672      	cpsid	i
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	b662      	cpsie	i
 8008ea8:	623b      	str	r3, [r7, #32]
}
 8008eaa:	bf00      	nop
 8008eac:	e7fe      	b.n	8008eac <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00c      	beq.n	8008ed0 <xQueueGiveFromISR+0x50>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	b672      	cpsid	i
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	b662      	cpsie	i
 8008eca:	61fb      	str	r3, [r7, #28]
}
 8008ecc:	bf00      	nop
 8008ece:	e7fe      	b.n	8008ece <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d103      	bne.n	8008ee0 <xQueueGiveFromISR+0x60>
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <xQueueGiveFromISR+0x64>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e000      	b.n	8008ee6 <xQueueGiveFromISR+0x66>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10c      	bne.n	8008f04 <xQueueGiveFromISR+0x84>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	b672      	cpsid	i
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	b662      	cpsie	i
 8008efe:	61bb      	str	r3, [r7, #24]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f04:	f001 fe32 	bl	800ab6c <vPortValidateInterruptPriority>
	__asm volatile
 8008f08:	f3ef 8211 	mrs	r2, BASEPRI
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	b672      	cpsid	i
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	b662      	cpsie	i
 8008f20:	617a      	str	r2, [r7, #20]
 8008f22:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008f24:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f26:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d22b      	bcs.n	8008f90 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f52:	d112      	bne.n	8008f7a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d016      	beq.n	8008f8a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5e:	3324      	adds	r3, #36	; 0x24
 8008f60:	4618      	mov	r0, r3
 8008f62:	f001 f80d 	bl	8009f80 <xTaskRemoveFromEventList>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00e      	beq.n	8008f8a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00b      	beq.n	8008f8a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2201      	movs	r2, #1
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	e007      	b.n	8008f8a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f7e:	3301      	adds	r3, #1
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	b25a      	sxtb	r2, r3
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f8e:	e001      	b.n	8008f94 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f90:	2300      	movs	r3, #0
 8008f92:	637b      	str	r3, [r7, #52]	; 0x34
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f383 8811 	msr	BASEPRI, r3
}
 8008f9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3738      	adds	r7, #56	; 0x38
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08c      	sub	sp, #48	; 0x30
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10c      	bne.n	8008fe0 <xQueueReceive+0x34>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	b672      	cpsid	i
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	b662      	cpsie	i
 8008fda:	623b      	str	r3, [r7, #32]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d103      	bne.n	8008fee <xQueueReceive+0x42>
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <xQueueReceive+0x46>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e000      	b.n	8008ff4 <xQueueReceive+0x48>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10c      	bne.n	8009012 <xQueueReceive+0x66>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	b672      	cpsid	i
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	b662      	cpsie	i
 800900c:	61fb      	str	r3, [r7, #28]
}
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009012:	f001 f979 	bl	800a308 <xTaskGetSchedulerState>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <xQueueReceive+0x76>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <xQueueReceive+0x7a>
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <xQueueReceive+0x7c>
 8009026:	2300      	movs	r3, #0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10c      	bne.n	8009046 <xQueueReceive+0x9a>
	__asm volatile
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	b672      	cpsid	i
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	b662      	cpsie	i
 8009040:	61bb      	str	r3, [r7, #24]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009046:	f001 fca9 	bl	800a99c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	2b00      	cmp	r3, #0
 8009054:	d01f      	beq.n	8009096 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009056:	68b9      	ldr	r1, [r7, #8]
 8009058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905a:	f000 faa9 	bl	80095b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	1e5a      	subs	r2, r3, #1
 8009062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009064:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00f      	beq.n	800908e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	3310      	adds	r3, #16
 8009072:	4618      	mov	r0, r3
 8009074:	f000 ff84 	bl	8009f80 <xTaskRemoveFromEventList>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800907e:	4b3d      	ldr	r3, [pc, #244]	; (8009174 <xQueueReceive+0x1c8>)
 8009080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800908e:	f001 fcb9 	bl	800aa04 <vPortExitCritical>
				return pdPASS;
 8009092:	2301      	movs	r3, #1
 8009094:	e069      	b.n	800916a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d103      	bne.n	80090a4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800909c:	f001 fcb2 	bl	800aa04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090a0:	2300      	movs	r3, #0
 80090a2:	e062      	b.n	800916a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090aa:	f107 0310 	add.w	r3, r7, #16
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 ffca 	bl	800a048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090b8:	f001 fca4 	bl	800aa04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090bc:	f000 fd54 	bl	8009b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090c0:	f001 fc6c 	bl	800a99c <vPortEnterCritical>
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090ca:	b25b      	sxtb	r3, r3
 80090cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d0:	d103      	bne.n	80090da <xQueueReceive+0x12e>
 80090d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090e0:	b25b      	sxtb	r3, r3
 80090e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e6:	d103      	bne.n	80090f0 <xQueueReceive+0x144>
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090f0:	f001 fc88 	bl	800aa04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090f4:	1d3a      	adds	r2, r7, #4
 80090f6:	f107 0310 	add.w	r3, r7, #16
 80090fa:	4611      	mov	r1, r2
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 ffb9 	bl	800a074 <xTaskCheckForTimeOut>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d123      	bne.n	8009150 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800910a:	f000 fac9 	bl	80096a0 <prvIsQueueEmpty>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d017      	beq.n	8009144 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	3324      	adds	r3, #36	; 0x24
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	4611      	mov	r1, r2
 800911c:	4618      	mov	r0, r3
 800911e:	f000 ff09 	bl	8009f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009124:	f000 fa6a 	bl	80095fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009128:	f000 fd2c 	bl	8009b84 <xTaskResumeAll>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d189      	bne.n	8009046 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009132:	4b10      	ldr	r3, [pc, #64]	; (8009174 <xQueueReceive+0x1c8>)
 8009134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	e780      	b.n	8009046 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009146:	f000 fa59 	bl	80095fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800914a:	f000 fd1b 	bl	8009b84 <xTaskResumeAll>
 800914e:	e77a      	b.n	8009046 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009152:	f000 fa53 	bl	80095fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009156:	f000 fd15 	bl	8009b84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800915a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800915c:	f000 faa0 	bl	80096a0 <prvIsQueueEmpty>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	f43f af6f 	beq.w	8009046 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009168:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800916a:	4618      	mov	r0, r3
 800916c:	3730      	adds	r7, #48	; 0x30
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	e000ed04 	.word	0xe000ed04

08009178 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08e      	sub	sp, #56	; 0x38
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009182:	2300      	movs	r3, #0
 8009184:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800918a:	2300      	movs	r3, #0
 800918c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10c      	bne.n	80091ae <xQueueSemaphoreTake+0x36>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	b672      	cpsid	i
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	b662      	cpsie	i
 80091a8:	623b      	str	r3, [r7, #32]
}
 80091aa:	bf00      	nop
 80091ac:	e7fe      	b.n	80091ac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00c      	beq.n	80091d0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	b672      	cpsid	i
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	b662      	cpsie	i
 80091ca:	61fb      	str	r3, [r7, #28]
}
 80091cc:	bf00      	nop
 80091ce:	e7fe      	b.n	80091ce <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091d0:	f001 f89a 	bl	800a308 <xTaskGetSchedulerState>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d102      	bne.n	80091e0 <xQueueSemaphoreTake+0x68>
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <xQueueSemaphoreTake+0x6c>
 80091e0:	2301      	movs	r3, #1
 80091e2:	e000      	b.n	80091e6 <xQueueSemaphoreTake+0x6e>
 80091e4:	2300      	movs	r3, #0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10c      	bne.n	8009204 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ee:	b672      	cpsid	i
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	b662      	cpsie	i
 80091fe:	61bb      	str	r3, [r7, #24]
}
 8009200:	bf00      	nop
 8009202:	e7fe      	b.n	8009202 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009204:	f001 fbca 	bl	800a99c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009210:	2b00      	cmp	r3, #0
 8009212:	d024      	beq.n	800925e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	1e5a      	subs	r2, r3, #1
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800921c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d104      	bne.n	800922e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009224:	f001 fa36 	bl	800a694 <pvTaskIncrementMutexHeldCount>
 8009228:	4602      	mov	r2, r0
 800922a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00f      	beq.n	8009256 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009238:	3310      	adds	r3, #16
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fea0 	bl	8009f80 <xTaskRemoveFromEventList>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d007      	beq.n	8009256 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009246:	4b55      	ldr	r3, [pc, #340]	; (800939c <xQueueSemaphoreTake+0x224>)
 8009248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009256:	f001 fbd5 	bl	800aa04 <vPortExitCritical>
				return pdPASS;
 800925a:	2301      	movs	r3, #1
 800925c:	e099      	b.n	8009392 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d113      	bne.n	800928c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00c      	beq.n	8009284 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926e:	b672      	cpsid	i
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	b662      	cpsie	i
 800927e:	617b      	str	r3, [r7, #20]
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009284:	f001 fbbe 	bl	800aa04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009288:	2300      	movs	r3, #0
 800928a:	e082      	b.n	8009392 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800928c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928e:	2b00      	cmp	r3, #0
 8009290:	d106      	bne.n	80092a0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009292:	f107 030c 	add.w	r3, r7, #12
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fed6 	bl	800a048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800929c:	2301      	movs	r3, #1
 800929e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092a0:	f001 fbb0 	bl	800aa04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092a4:	f000 fc60 	bl	8009b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092a8:	f001 fb78 	bl	800a99c <vPortEnterCritical>
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092b2:	b25b      	sxtb	r3, r3
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d103      	bne.n	80092c2 <xQueueSemaphoreTake+0x14a>
 80092ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092c8:	b25b      	sxtb	r3, r3
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d103      	bne.n	80092d8 <xQueueSemaphoreTake+0x160>
 80092d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092d8:	f001 fb94 	bl	800aa04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092dc:	463a      	mov	r2, r7
 80092de:	f107 030c 	add.w	r3, r7, #12
 80092e2:	4611      	mov	r1, r2
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 fec5 	bl	800a074 <xTaskCheckForTimeOut>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d132      	bne.n	8009356 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092f2:	f000 f9d5 	bl	80096a0 <prvIsQueueEmpty>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d026      	beq.n	800934a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d109      	bne.n	8009318 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8009304:	f001 fb4a 	bl	800a99c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	4618      	mov	r0, r3
 800930e:	f001 f819 	bl	800a344 <xTaskPriorityInherit>
 8009312:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009314:	f001 fb76 	bl	800aa04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931a:	3324      	adds	r3, #36	; 0x24
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	4611      	mov	r1, r2
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fe07 	bl	8009f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009328:	f000 f968 	bl	80095fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800932c:	f000 fc2a 	bl	8009b84 <xTaskResumeAll>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	f47f af66 	bne.w	8009204 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8009338:	4b18      	ldr	r3, [pc, #96]	; (800939c <xQueueSemaphoreTake+0x224>)
 800933a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	e75c      	b.n	8009204 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800934a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800934c:	f000 f956 	bl	80095fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009350:	f000 fc18 	bl	8009b84 <xTaskResumeAll>
 8009354:	e756      	b.n	8009204 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009358:	f000 f950 	bl	80095fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800935c:	f000 fc12 	bl	8009b84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009362:	f000 f99d 	bl	80096a0 <prvIsQueueEmpty>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	f43f af4b 	beq.w	8009204 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00d      	beq.n	8009390 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8009374:	f001 fb12 	bl	800a99c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800937a:	f000 f897 	bl	80094ac <prvGetDisinheritPriorityAfterTimeout>
 800937e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009386:	4618      	mov	r0, r3
 8009388:	f001 f8e6 	bl	800a558 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800938c:	f001 fb3a 	bl	800aa04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009390:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009392:	4618      	mov	r0, r3
 8009394:	3738      	adds	r7, #56	; 0x38
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	e000ed04 	.word	0xe000ed04

080093a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08e      	sub	sp, #56	; 0x38
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10c      	bne.n	80093d0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	b672      	cpsid	i
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	b662      	cpsie	i
 80093ca:	623b      	str	r3, [r7, #32]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d103      	bne.n	80093de <xQueueReceiveFromISR+0x3e>
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <xQueueReceiveFromISR+0x42>
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <xQueueReceiveFromISR+0x44>
 80093e2:	2300      	movs	r3, #0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10c      	bne.n	8009402 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	b672      	cpsid	i
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	b662      	cpsie	i
 80093fc:	61fb      	str	r3, [r7, #28]
}
 80093fe:	bf00      	nop
 8009400:	e7fe      	b.n	8009400 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009402:	f001 fbb3 	bl	800ab6c <vPortValidateInterruptPriority>
	__asm volatile
 8009406:	f3ef 8211 	mrs	r2, BASEPRI
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	b672      	cpsid	i
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	b662      	cpsie	i
 800941e:	61ba      	str	r2, [r7, #24]
 8009420:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009422:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009424:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	2b00      	cmp	r3, #0
 8009430:	d02f      	beq.n	8009492 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800943c:	68b9      	ldr	r1, [r7, #8]
 800943e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009440:	f000 f8b6 	bl	80095b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	1e5a      	subs	r2, r3, #1
 8009448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800944c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009454:	d112      	bne.n	800947c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d016      	beq.n	800948c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	3310      	adds	r3, #16
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fd8c 	bl	8009f80 <xTaskRemoveFromEventList>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00e      	beq.n	800948c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00b      	beq.n	800948c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	e007      	b.n	800948c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800947c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009480:	3301      	adds	r3, #1
 8009482:	b2db      	uxtb	r3, r3
 8009484:	b25a      	sxtb	r2, r3
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800948c:	2301      	movs	r3, #1
 800948e:	637b      	str	r3, [r7, #52]	; 0x34
 8009490:	e001      	b.n	8009496 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8009492:	2300      	movs	r3, #0
 8009494:	637b      	str	r3, [r7, #52]	; 0x34
 8009496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009498:	613b      	str	r3, [r7, #16]
	__asm volatile
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f383 8811 	msr	BASEPRI, r3
}
 80094a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3738      	adds	r7, #56	; 0x38
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d006      	beq.n	80094ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f1c3 0307 	rsb	r3, r3, #7
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	e001      	b.n	80094ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80094ce:	68fb      	ldr	r3, [r7, #12]
	}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094e8:	2300      	movs	r3, #0
 80094ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10d      	bne.n	8009516 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d14d      	bne.n	800959e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 ff9c 	bl	800a444 <xTaskPriorityDisinherit>
 800950c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	609a      	str	r2, [r3, #8]
 8009514:	e043      	b.n	800959e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d119      	bne.n	8009550 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6858      	ldr	r0, [r3, #4]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009524:	461a      	mov	r2, r3
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	f00b fd50 	bl	8014fcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009534:	441a      	add	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	429a      	cmp	r2, r3
 8009544:	d32b      	bcc.n	800959e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	605a      	str	r2, [r3, #4]
 800954e:	e026      	b.n	800959e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	68d8      	ldr	r0, [r3, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009558:	461a      	mov	r2, r3
 800955a:	68b9      	ldr	r1, [r7, #8]
 800955c:	f00b fd36 	bl	8014fcc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009568:	425b      	negs	r3, r3
 800956a:	441a      	add	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	68da      	ldr	r2, [r3, #12]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d207      	bcs.n	800958c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009584:	425b      	negs	r3, r3
 8009586:	441a      	add	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b02      	cmp	r3, #2
 8009590:	d105      	bne.n	800959e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	3b01      	subs	r3, #1
 800959c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80095a6:	697b      	ldr	r3, [r7, #20]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d018      	beq.n	80095f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	441a      	add	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d303      	bcc.n	80095e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68d9      	ldr	r1, [r3, #12]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ec:	461a      	mov	r2, r3
 80095ee:	6838      	ldr	r0, [r7, #0]
 80095f0:	f00b fcec 	bl	8014fcc <memcpy>
	}
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009604:	f001 f9ca 	bl	800a99c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800960e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009610:	e011      	b.n	8009636 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009616:	2b00      	cmp	r3, #0
 8009618:	d012      	beq.n	8009640 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3324      	adds	r3, #36	; 0x24
 800961e:	4618      	mov	r0, r3
 8009620:	f000 fcae 	bl	8009f80 <xTaskRemoveFromEventList>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800962a:	f000 fd89 	bl	800a140 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	3b01      	subs	r3, #1
 8009632:	b2db      	uxtb	r3, r3
 8009634:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800963a:	2b00      	cmp	r3, #0
 800963c:	dce9      	bgt.n	8009612 <prvUnlockQueue+0x16>
 800963e:	e000      	b.n	8009642 <prvUnlockQueue+0x46>
					break;
 8009640:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	22ff      	movs	r2, #255	; 0xff
 8009646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800964a:	f001 f9db 	bl	800aa04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800964e:	f001 f9a5 	bl	800a99c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009658:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800965a:	e011      	b.n	8009680 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d012      	beq.n	800968a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3310      	adds	r3, #16
 8009668:	4618      	mov	r0, r3
 800966a:	f000 fc89 	bl	8009f80 <xTaskRemoveFromEventList>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009674:	f000 fd64 	bl	800a140 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	3b01      	subs	r3, #1
 800967c:	b2db      	uxtb	r3, r3
 800967e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009684:	2b00      	cmp	r3, #0
 8009686:	dce9      	bgt.n	800965c <prvUnlockQueue+0x60>
 8009688:	e000      	b.n	800968c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800968a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	22ff      	movs	r2, #255	; 0xff
 8009690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009694:	f001 f9b6 	bl	800aa04 <vPortExitCritical>
}
 8009698:	bf00      	nop
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096a8:	f001 f978 	bl	800a99c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d102      	bne.n	80096ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096b4:	2301      	movs	r3, #1
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	e001      	b.n	80096be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096be:	f001 f9a1 	bl	800aa04 <vPortExitCritical>

	return xReturn;
 80096c2:	68fb      	ldr	r3, [r7, #12]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096d4:	f001 f962 	bl	800a99c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d102      	bne.n	80096ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096e4:	2301      	movs	r3, #1
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	e001      	b.n	80096ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096ea:	2300      	movs	r3, #0
 80096ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096ee:	f001 f989 	bl	800aa04 <vPortExitCritical>

	return xReturn;
 80096f2:	68fb      	ldr	r3, [r7, #12]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08e      	sub	sp, #56	; 0x38
 8009700:	af04      	add	r7, sp, #16
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800970a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10c      	bne.n	800972a <xTaskCreateStatic+0x2e>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	b672      	cpsid	i
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	b662      	cpsie	i
 8009724:	623b      	str	r3, [r7, #32]
}
 8009726:	bf00      	nop
 8009728:	e7fe      	b.n	8009728 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10c      	bne.n	800974a <xTaskCreateStatic+0x4e>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	b672      	cpsid	i
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	b662      	cpsie	i
 8009744:	61fb      	str	r3, [r7, #28]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800974a:	2354      	movs	r3, #84	; 0x54
 800974c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2b54      	cmp	r3, #84	; 0x54
 8009752:	d00c      	beq.n	800976e <xTaskCreateStatic+0x72>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	b672      	cpsid	i
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	b662      	cpsie	i
 8009768:	61bb      	str	r3, [r7, #24]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800976e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	2b00      	cmp	r3, #0
 8009774:	d01e      	beq.n	80097b4 <xTaskCreateStatic+0xb8>
 8009776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01b      	beq.n	80097b4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009784:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	2202      	movs	r2, #2
 800978a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800978e:	2300      	movs	r3, #0
 8009790:	9303      	str	r3, [sp, #12]
 8009792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009794:	9302      	str	r3, [sp, #8]
 8009796:	f107 0314 	add.w	r3, r7, #20
 800979a:	9301      	str	r3, [sp, #4]
 800979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 f850 	bl	800984c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097ae:	f000 f8d7 	bl	8009960 <prvAddNewTaskToReadyList>
 80097b2:	e001      	b.n	80097b8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80097b4:	2300      	movs	r3, #0
 80097b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097b8:	697b      	ldr	r3, [r7, #20]
	}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3728      	adds	r7, #40	; 0x28
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b08c      	sub	sp, #48	; 0x30
 80097c6:	af04      	add	r7, sp, #16
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	603b      	str	r3, [r7, #0]
 80097ce:	4613      	mov	r3, r2
 80097d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097d2:	88fb      	ldrh	r3, [r7, #6]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f001 fa0c 	bl	800abf4 <pvPortMalloc>
 80097dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00e      	beq.n	8009802 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097e4:	2054      	movs	r0, #84	; 0x54
 80097e6:	f001 fa05 	bl	800abf4 <pvPortMalloc>
 80097ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	631a      	str	r2, [r3, #48]	; 0x30
 80097f8:	e005      	b.n	8009806 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097fa:	6978      	ldr	r0, [r7, #20]
 80097fc:	f001 fac4 	bl	800ad88 <vPortFree>
 8009800:	e001      	b.n	8009806 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009802:	2300      	movs	r3, #0
 8009804:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d017      	beq.n	800983c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009814:	88fa      	ldrh	r2, [r7, #6]
 8009816:	2300      	movs	r3, #0
 8009818:	9303      	str	r3, [sp, #12]
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	9302      	str	r3, [sp, #8]
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	68b9      	ldr	r1, [r7, #8]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f80e 	bl	800984c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009830:	69f8      	ldr	r0, [r7, #28]
 8009832:	f000 f895 	bl	8009960 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009836:	2301      	movs	r3, #1
 8009838:	61bb      	str	r3, [r7, #24]
 800983a:	e002      	b.n	8009842 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800983c:	f04f 33ff 	mov.w	r3, #4294967295
 8009840:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009842:	69bb      	ldr	r3, [r7, #24]
	}
 8009844:	4618      	mov	r0, r3
 8009846:	3720      	adds	r7, #32
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009864:	440b      	add	r3, r1
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	f023 0307 	bic.w	r3, r3, #7
 8009872:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00c      	beq.n	8009898 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	b672      	cpsid	i
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	b662      	cpsie	i
 8009892:	617b      	str	r3, [r7, #20]
}
 8009894:	bf00      	nop
 8009896:	e7fe      	b.n	8009896 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d01f      	beq.n	80098de <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800989e:	2300      	movs	r3, #0
 80098a0:	61fb      	str	r3, [r7, #28]
 80098a2:	e012      	b.n	80098ca <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	4413      	add	r3, r2
 80098aa:	7819      	ldrb	r1, [r3, #0]
 80098ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	4413      	add	r3, r2
 80098b2:	3334      	adds	r3, #52	; 0x34
 80098b4:	460a      	mov	r2, r1
 80098b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	4413      	add	r3, r2
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d006      	beq.n	80098d2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	3301      	adds	r3, #1
 80098c8:	61fb      	str	r3, [r7, #28]
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	2b0f      	cmp	r3, #15
 80098ce:	d9e9      	bls.n	80098a4 <prvInitialiseNewTask+0x58>
 80098d0:	e000      	b.n	80098d4 <prvInitialiseNewTask+0x88>
			{
				break;
 80098d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098dc:	e003      	b.n	80098e6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	2b06      	cmp	r3, #6
 80098ea:	d901      	bls.n	80098f0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098ec:	2306      	movs	r3, #6
 80098ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80098fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fe:	2200      	movs	r2, #0
 8009900:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	3304      	adds	r3, #4
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe fee6 	bl	80086d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990e:	3318      	adds	r3, #24
 8009910:	4618      	mov	r0, r3
 8009912:	f7fe fee1 	bl	80086d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	f1c3 0207 	rsb	r2, r3, #7
 8009922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009924:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	2200      	movs	r2, #0
 8009930:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	68f9      	ldr	r1, [r7, #12]
 800993e:	69b8      	ldr	r0, [r7, #24]
 8009940:	f000 ff22 	bl	800a788 <pxPortInitialiseStack>
 8009944:	4602      	mov	r2, r0
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009956:	bf00      	nop
 8009958:	3720      	adds	r7, #32
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009968:	f001 f818 	bl	800a99c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800996c:	4b2a      	ldr	r3, [pc, #168]	; (8009a18 <prvAddNewTaskToReadyList+0xb8>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3301      	adds	r3, #1
 8009972:	4a29      	ldr	r2, [pc, #164]	; (8009a18 <prvAddNewTaskToReadyList+0xb8>)
 8009974:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009976:	4b29      	ldr	r3, [pc, #164]	; (8009a1c <prvAddNewTaskToReadyList+0xbc>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d109      	bne.n	8009992 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800997e:	4a27      	ldr	r2, [pc, #156]	; (8009a1c <prvAddNewTaskToReadyList+0xbc>)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009984:	4b24      	ldr	r3, [pc, #144]	; (8009a18 <prvAddNewTaskToReadyList+0xb8>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d110      	bne.n	80099ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800998c:	f000 fbfc 	bl	800a188 <prvInitialiseTaskLists>
 8009990:	e00d      	b.n	80099ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009992:	4b23      	ldr	r3, [pc, #140]	; (8009a20 <prvAddNewTaskToReadyList+0xc0>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d109      	bne.n	80099ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800999a:	4b20      	ldr	r3, [pc, #128]	; (8009a1c <prvAddNewTaskToReadyList+0xbc>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d802      	bhi.n	80099ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099a8:	4a1c      	ldr	r2, [pc, #112]	; (8009a1c <prvAddNewTaskToReadyList+0xbc>)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099ae:	4b1d      	ldr	r3, [pc, #116]	; (8009a24 <prvAddNewTaskToReadyList+0xc4>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3301      	adds	r3, #1
 80099b4:	4a1b      	ldr	r2, [pc, #108]	; (8009a24 <prvAddNewTaskToReadyList+0xc4>)
 80099b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	2201      	movs	r2, #1
 80099be:	409a      	lsls	r2, r3
 80099c0:	4b19      	ldr	r3, [pc, #100]	; (8009a28 <prvAddNewTaskToReadyList+0xc8>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	4a18      	ldr	r2, [pc, #96]	; (8009a28 <prvAddNewTaskToReadyList+0xc8>)
 80099c8:	6013      	str	r3, [r2, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4a15      	ldr	r2, [pc, #84]	; (8009a2c <prvAddNewTaskToReadyList+0xcc>)
 80099d8:	441a      	add	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3304      	adds	r3, #4
 80099de:	4619      	mov	r1, r3
 80099e0:	4610      	mov	r0, r2
 80099e2:	f7fe fe86 	bl	80086f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099e6:	f001 f80d 	bl	800aa04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099ea:	4b0d      	ldr	r3, [pc, #52]	; (8009a20 <prvAddNewTaskToReadyList+0xc0>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00e      	beq.n	8009a10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099f2:	4b0a      	ldr	r3, [pc, #40]	; (8009a1c <prvAddNewTaskToReadyList+0xbc>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d207      	bcs.n	8009a10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a00:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <prvAddNewTaskToReadyList+0xd0>)
 8009a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a06:	601a      	str	r2, [r3, #0]
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	20000e00 	.word	0x20000e00
 8009a1c:	20000d00 	.word	0x20000d00
 8009a20:	20000e0c 	.word	0x20000e0c
 8009a24:	20000e1c 	.word	0x20000e1c
 8009a28:	20000e08 	.word	0x20000e08
 8009a2c:	20000d04 	.word	0x20000d04
 8009a30:	e000ed04 	.word	0xe000ed04

08009a34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d019      	beq.n	8009a7a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a46:	4b14      	ldr	r3, [pc, #80]	; (8009a98 <vTaskDelay+0x64>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00c      	beq.n	8009a68 <vTaskDelay+0x34>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	b672      	cpsid	i
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	b662      	cpsie	i
 8009a62:	60bb      	str	r3, [r7, #8]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009a68:	f000 f87e 	bl	8009b68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fe24 	bl	800a6bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a74:	f000 f886 	bl	8009b84 <xTaskResumeAll>
 8009a78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d107      	bne.n	8009a90 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009a80:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <vTaskDelay+0x68>)
 8009a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a90:	bf00      	nop
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	20000e28 	.word	0x20000e28
 8009a9c:	e000ed04 	.word	0xe000ed04

08009aa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08a      	sub	sp, #40	; 0x28
 8009aa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009aae:	463a      	mov	r2, r7
 8009ab0:	1d39      	adds	r1, r7, #4
 8009ab2:	f107 0308 	add.w	r3, r7, #8
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7f7 fa1c 	bl	8000ef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	9202      	str	r2, [sp, #8]
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	2300      	movs	r3, #0
 8009acc:	460a      	mov	r2, r1
 8009ace:	4920      	ldr	r1, [pc, #128]	; (8009b50 <vTaskStartScheduler+0xb0>)
 8009ad0:	4820      	ldr	r0, [pc, #128]	; (8009b54 <vTaskStartScheduler+0xb4>)
 8009ad2:	f7ff fe13 	bl	80096fc <xTaskCreateStatic>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4a1f      	ldr	r2, [pc, #124]	; (8009b58 <vTaskStartScheduler+0xb8>)
 8009ada:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009adc:	4b1e      	ldr	r3, [pc, #120]	; (8009b58 <vTaskStartScheduler+0xb8>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	617b      	str	r3, [r7, #20]
 8009ae8:	e001      	b.n	8009aee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d118      	bne.n	8009b26 <vTaskStartScheduler+0x86>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	b672      	cpsid	i
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	b662      	cpsie	i
 8009b08:	613b      	str	r3, [r7, #16]
}
 8009b0a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b0c:	4b13      	ldr	r3, [pc, #76]	; (8009b5c <vTaskStartScheduler+0xbc>)
 8009b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b14:	4b12      	ldr	r3, [pc, #72]	; (8009b60 <vTaskStartScheduler+0xc0>)
 8009b16:	2201      	movs	r2, #1
 8009b18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b1a:	4b12      	ldr	r3, [pc, #72]	; (8009b64 <vTaskStartScheduler+0xc4>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b20:	f000 febe 	bl	800a8a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b24:	e010      	b.n	8009b48 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2c:	d10c      	bne.n	8009b48 <vTaskStartScheduler+0xa8>
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	b672      	cpsid	i
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	b662      	cpsie	i
 8009b42:	60fb      	str	r3, [r7, #12]
}
 8009b44:	bf00      	nop
 8009b46:	e7fe      	b.n	8009b46 <vTaskStartScheduler+0xa6>
}
 8009b48:	bf00      	nop
 8009b4a:	3718      	adds	r7, #24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	0801cc74 	.word	0x0801cc74
 8009b54:	0800a159 	.word	0x0800a159
 8009b58:	20000e24 	.word	0x20000e24
 8009b5c:	20000e20 	.word	0x20000e20
 8009b60:	20000e0c 	.word	0x20000e0c
 8009b64:	20000e04 	.word	0x20000e04

08009b68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009b6c:	4b04      	ldr	r3, [pc, #16]	; (8009b80 <vTaskSuspendAll+0x18>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	3301      	adds	r3, #1
 8009b72:	4a03      	ldr	r2, [pc, #12]	; (8009b80 <vTaskSuspendAll+0x18>)
 8009b74:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009b76:	bf00      	nop
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	20000e28 	.word	0x20000e28

08009b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b92:	4b42      	ldr	r3, [pc, #264]	; (8009c9c <xTaskResumeAll+0x118>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10c      	bne.n	8009bb4 <xTaskResumeAll+0x30>
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9e:	b672      	cpsid	i
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	b662      	cpsie	i
 8009bae:	603b      	str	r3, [r7, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	e7fe      	b.n	8009bb2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009bb4:	f000 fef2 	bl	800a99c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009bb8:	4b38      	ldr	r3, [pc, #224]	; (8009c9c <xTaskResumeAll+0x118>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	4a37      	ldr	r2, [pc, #220]	; (8009c9c <xTaskResumeAll+0x118>)
 8009bc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bc2:	4b36      	ldr	r3, [pc, #216]	; (8009c9c <xTaskResumeAll+0x118>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d161      	bne.n	8009c8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bca:	4b35      	ldr	r3, [pc, #212]	; (8009ca0 <xTaskResumeAll+0x11c>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d05d      	beq.n	8009c8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bd2:	e02e      	b.n	8009c32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd4:	4b33      	ldr	r3, [pc, #204]	; (8009ca4 <xTaskResumeAll+0x120>)
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3318      	adds	r3, #24
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fe fde3 	bl	80087ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	3304      	adds	r3, #4
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe fdde 	bl	80087ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	409a      	lsls	r2, r3
 8009bf8:	4b2b      	ldr	r3, [pc, #172]	; (8009ca8 <xTaskResumeAll+0x124>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	4a2a      	ldr	r2, [pc, #168]	; (8009ca8 <xTaskResumeAll+0x124>)
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4a27      	ldr	r2, [pc, #156]	; (8009cac <xTaskResumeAll+0x128>)
 8009c10:	441a      	add	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4619      	mov	r1, r3
 8009c18:	4610      	mov	r0, r2
 8009c1a:	f7fe fd6a 	bl	80086f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c22:	4b23      	ldr	r3, [pc, #140]	; (8009cb0 <xTaskResumeAll+0x12c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d302      	bcc.n	8009c32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009c2c:	4b21      	ldr	r3, [pc, #132]	; (8009cb4 <xTaskResumeAll+0x130>)
 8009c2e:	2201      	movs	r2, #1
 8009c30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c32:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <xTaskResumeAll+0x120>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1cc      	bne.n	8009bd4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c40:	f000 fb42 	bl	800a2c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009c44:	4b1c      	ldr	r3, [pc, #112]	; (8009cb8 <xTaskResumeAll+0x134>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d010      	beq.n	8009c72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c50:	f000 f858 	bl	8009d04 <xTaskIncrementTick>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009c5a:	4b16      	ldr	r3, [pc, #88]	; (8009cb4 <xTaskResumeAll+0x130>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3b01      	subs	r3, #1
 8009c64:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1f1      	bne.n	8009c50 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009c6c:	4b12      	ldr	r3, [pc, #72]	; (8009cb8 <xTaskResumeAll+0x134>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c72:	4b10      	ldr	r3, [pc, #64]	; (8009cb4 <xTaskResumeAll+0x130>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c7e:	4b0f      	ldr	r3, [pc, #60]	; (8009cbc <xTaskResumeAll+0x138>)
 8009c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c8e:	f000 feb9 	bl	800aa04 <vPortExitCritical>

	return xAlreadyYielded;
 8009c92:	68bb      	ldr	r3, [r7, #8]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	20000e28 	.word	0x20000e28
 8009ca0:	20000e00 	.word	0x20000e00
 8009ca4:	20000dc0 	.word	0x20000dc0
 8009ca8:	20000e08 	.word	0x20000e08
 8009cac:	20000d04 	.word	0x20000d04
 8009cb0:	20000d00 	.word	0x20000d00
 8009cb4:	20000e14 	.word	0x20000e14
 8009cb8:	20000e10 	.word	0x20000e10
 8009cbc:	e000ed04 	.word	0xe000ed04

08009cc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b083      	sub	sp, #12
 8009cc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009cc6:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <xTaskGetTickCount+0x1c>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ccc:	687b      	ldr	r3, [r7, #4]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	20000e04 	.word	0x20000e04

08009ce0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ce6:	f000 ff41 	bl	800ab6c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009cea:	2300      	movs	r3, #0
 8009cec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009cee:	4b04      	ldr	r3, [pc, #16]	; (8009d00 <xTaskGetTickCountFromISR+0x20>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cf4:	683b      	ldr	r3, [r7, #0]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000e04 	.word	0x20000e04

08009d04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d0e:	4b4f      	ldr	r3, [pc, #316]	; (8009e4c <xTaskIncrementTick+0x148>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f040 808a 	bne.w	8009e2c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d18:	4b4d      	ldr	r3, [pc, #308]	; (8009e50 <xTaskIncrementTick+0x14c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d20:	4a4b      	ldr	r2, [pc, #300]	; (8009e50 <xTaskIncrementTick+0x14c>)
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d122      	bne.n	8009d72 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d2c:	4b49      	ldr	r3, [pc, #292]	; (8009e54 <xTaskIncrementTick+0x150>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00c      	beq.n	8009d50 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	b672      	cpsid	i
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	b662      	cpsie	i
 8009d4a:	603b      	str	r3, [r7, #0]
}
 8009d4c:	bf00      	nop
 8009d4e:	e7fe      	b.n	8009d4e <xTaskIncrementTick+0x4a>
 8009d50:	4b40      	ldr	r3, [pc, #256]	; (8009e54 <xTaskIncrementTick+0x150>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60fb      	str	r3, [r7, #12]
 8009d56:	4b40      	ldr	r3, [pc, #256]	; (8009e58 <xTaskIncrementTick+0x154>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a3e      	ldr	r2, [pc, #248]	; (8009e54 <xTaskIncrementTick+0x150>)
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	4a3e      	ldr	r2, [pc, #248]	; (8009e58 <xTaskIncrementTick+0x154>)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6013      	str	r3, [r2, #0]
 8009d64:	4b3d      	ldr	r3, [pc, #244]	; (8009e5c <xTaskIncrementTick+0x158>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	4a3c      	ldr	r2, [pc, #240]	; (8009e5c <xTaskIncrementTick+0x158>)
 8009d6c:	6013      	str	r3, [r2, #0]
 8009d6e:	f000 faab 	bl	800a2c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d72:	4b3b      	ldr	r3, [pc, #236]	; (8009e60 <xTaskIncrementTick+0x15c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d348      	bcc.n	8009e0e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d7c:	4b35      	ldr	r3, [pc, #212]	; (8009e54 <xTaskIncrementTick+0x150>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d104      	bne.n	8009d90 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d86:	4b36      	ldr	r3, [pc, #216]	; (8009e60 <xTaskIncrementTick+0x15c>)
 8009d88:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8c:	601a      	str	r2, [r3, #0]
					break;
 8009d8e:	e03e      	b.n	8009e0e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d90:	4b30      	ldr	r3, [pc, #192]	; (8009e54 <xTaskIncrementTick+0x150>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d203      	bcs.n	8009db0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009da8:	4a2d      	ldr	r2, [pc, #180]	; (8009e60 <xTaskIncrementTick+0x15c>)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009dae:	e02e      	b.n	8009e0e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe fcf9 	bl	80087ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d004      	beq.n	8009dcc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	3318      	adds	r3, #24
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fe fcf0 	bl	80087ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	409a      	lsls	r2, r3
 8009dd4:	4b23      	ldr	r3, [pc, #140]	; (8009e64 <xTaskIncrementTick+0x160>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	4a22      	ldr	r2, [pc, #136]	; (8009e64 <xTaskIncrementTick+0x160>)
 8009ddc:	6013      	str	r3, [r2, #0]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de2:	4613      	mov	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4a1f      	ldr	r2, [pc, #124]	; (8009e68 <xTaskIncrementTick+0x164>)
 8009dec:	441a      	add	r2, r3
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	3304      	adds	r3, #4
 8009df2:	4619      	mov	r1, r3
 8009df4:	4610      	mov	r0, r2
 8009df6:	f7fe fc7c 	bl	80086f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfe:	4b1b      	ldr	r3, [pc, #108]	; (8009e6c <xTaskIncrementTick+0x168>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d3b9      	bcc.n	8009d7c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e0c:	e7b6      	b.n	8009d7c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e0e:	4b17      	ldr	r3, [pc, #92]	; (8009e6c <xTaskIncrementTick+0x168>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e14:	4914      	ldr	r1, [pc, #80]	; (8009e68 <xTaskIncrementTick+0x164>)
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	440b      	add	r3, r1
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d907      	bls.n	8009e36 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009e26:	2301      	movs	r3, #1
 8009e28:	617b      	str	r3, [r7, #20]
 8009e2a:	e004      	b.n	8009e36 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e2c:	4b10      	ldr	r3, [pc, #64]	; (8009e70 <xTaskIncrementTick+0x16c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3301      	adds	r3, #1
 8009e32:	4a0f      	ldr	r2, [pc, #60]	; (8009e70 <xTaskIncrementTick+0x16c>)
 8009e34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009e36:	4b0f      	ldr	r3, [pc, #60]	; (8009e74 <xTaskIncrementTick+0x170>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e42:	697b      	ldr	r3, [r7, #20]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20000e28 	.word	0x20000e28
 8009e50:	20000e04 	.word	0x20000e04
 8009e54:	20000db8 	.word	0x20000db8
 8009e58:	20000dbc 	.word	0x20000dbc
 8009e5c:	20000e18 	.word	0x20000e18
 8009e60:	20000e20 	.word	0x20000e20
 8009e64:	20000e08 	.word	0x20000e08
 8009e68:	20000d04 	.word	0x20000d04
 8009e6c:	20000d00 	.word	0x20000d00
 8009e70:	20000e10 	.word	0x20000e10
 8009e74:	20000e14 	.word	0x20000e14

08009e78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b087      	sub	sp, #28
 8009e7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e7e:	4b28      	ldr	r3, [pc, #160]	; (8009f20 <vTaskSwitchContext+0xa8>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d003      	beq.n	8009e8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e86:	4b27      	ldr	r3, [pc, #156]	; (8009f24 <vTaskSwitchContext+0xac>)
 8009e88:	2201      	movs	r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e8c:	e041      	b.n	8009f12 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009e8e:	4b25      	ldr	r3, [pc, #148]	; (8009f24 <vTaskSwitchContext+0xac>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e94:	4b24      	ldr	r3, [pc, #144]	; (8009f28 <vTaskSwitchContext+0xb0>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	fab3 f383 	clz	r3, r3
 8009ea0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009ea2:	7afb      	ldrb	r3, [r7, #11]
 8009ea4:	f1c3 031f 	rsb	r3, r3, #31
 8009ea8:	617b      	str	r3, [r7, #20]
 8009eaa:	4920      	ldr	r1, [pc, #128]	; (8009f2c <vTaskSwitchContext+0xb4>)
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	440b      	add	r3, r1
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10c      	bne.n	8009ed8 <vTaskSwitchContext+0x60>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	b672      	cpsid	i
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	b662      	cpsie	i
 8009ed2:	607b      	str	r3, [r7, #4]
}
 8009ed4:	bf00      	nop
 8009ed6:	e7fe      	b.n	8009ed6 <vTaskSwitchContext+0x5e>
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	4613      	mov	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4a12      	ldr	r2, [pc, #72]	; (8009f2c <vTaskSwitchContext+0xb4>)
 8009ee4:	4413      	add	r3, r2
 8009ee6:	613b      	str	r3, [r7, #16]
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	605a      	str	r2, [r3, #4]
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	3308      	adds	r3, #8
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d104      	bne.n	8009f08 <vTaskSwitchContext+0x90>
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	605a      	str	r2, [r3, #4]
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	4a08      	ldr	r2, [pc, #32]	; (8009f30 <vTaskSwitchContext+0xb8>)
 8009f10:	6013      	str	r3, [r2, #0]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	20000e28 	.word	0x20000e28
 8009f24:	20000e14 	.word	0x20000e14
 8009f28:	20000e08 	.word	0x20000e08
 8009f2c:	20000d04 	.word	0x20000d04
 8009f30:	20000d00 	.word	0x20000d00

08009f34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10c      	bne.n	8009f5e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	b672      	cpsid	i
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	b662      	cpsie	i
 8009f58:	60fb      	str	r3, [r7, #12]
}
 8009f5a:	bf00      	nop
 8009f5c:	e7fe      	b.n	8009f5c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f5e:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <vTaskPlaceOnEventList+0x48>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3318      	adds	r3, #24
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7fe fbe7 	bl	800873a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	6838      	ldr	r0, [r7, #0]
 8009f70:	f000 fba4 	bl	800a6bc <prvAddCurrentTaskToDelayedList>
}
 8009f74:	bf00      	nop
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	20000d00 	.word	0x20000d00

08009f80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d10c      	bne.n	8009fb0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9a:	b672      	cpsid	i
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	b662      	cpsie	i
 8009faa:	60fb      	str	r3, [r7, #12]
}
 8009fac:	bf00      	nop
 8009fae:	e7fe      	b.n	8009fae <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	3318      	adds	r3, #24
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fe fbf9 	bl	80087ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fba:	4b1d      	ldr	r3, [pc, #116]	; (800a030 <xTaskRemoveFromEventList+0xb0>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d11c      	bne.n	8009ffc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fe fbf0 	bl	80087ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	409a      	lsls	r2, r3
 8009fd4:	4b17      	ldr	r3, [pc, #92]	; (800a034 <xTaskRemoveFromEventList+0xb4>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	4a16      	ldr	r2, [pc, #88]	; (800a034 <xTaskRemoveFromEventList+0xb4>)
 8009fdc:	6013      	str	r3, [r2, #0]
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4a13      	ldr	r2, [pc, #76]	; (800a038 <xTaskRemoveFromEventList+0xb8>)
 8009fec:	441a      	add	r2, r3
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	4610      	mov	r0, r2
 8009ff6:	f7fe fb7c 	bl	80086f2 <vListInsertEnd>
 8009ffa:	e005      	b.n	800a008 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	3318      	adds	r3, #24
 800a000:	4619      	mov	r1, r3
 800a002:	480e      	ldr	r0, [pc, #56]	; (800a03c <xTaskRemoveFromEventList+0xbc>)
 800a004:	f7fe fb75 	bl	80086f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a00c:	4b0c      	ldr	r3, [pc, #48]	; (800a040 <xTaskRemoveFromEventList+0xc0>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a012:	429a      	cmp	r2, r3
 800a014:	d905      	bls.n	800a022 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a016:	2301      	movs	r3, #1
 800a018:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a01a:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <xTaskRemoveFromEventList+0xc4>)
 800a01c:	2201      	movs	r2, #1
 800a01e:	601a      	str	r2, [r3, #0]
 800a020:	e001      	b.n	800a026 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a022:	2300      	movs	r3, #0
 800a024:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a026:	697b      	ldr	r3, [r7, #20]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20000e28 	.word	0x20000e28
 800a034:	20000e08 	.word	0x20000e08
 800a038:	20000d04 	.word	0x20000d04
 800a03c:	20000dc0 	.word	0x20000dc0
 800a040:	20000d00 	.word	0x20000d00
 800a044:	20000e14 	.word	0x20000e14

0800a048 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a050:	4b06      	ldr	r3, [pc, #24]	; (800a06c <vTaskInternalSetTimeOutState+0x24>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a058:	4b05      	ldr	r3, [pc, #20]	; (800a070 <vTaskInternalSetTimeOutState+0x28>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	605a      	str	r2, [r3, #4]
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	20000e18 	.word	0x20000e18
 800a070:	20000e04 	.word	0x20000e04

0800a074 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b088      	sub	sp, #32
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10c      	bne.n	800a09e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a088:	b672      	cpsid	i
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	b662      	cpsie	i
 800a098:	613b      	str	r3, [r7, #16]
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10c      	bne.n	800a0be <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	b672      	cpsid	i
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	b662      	cpsie	i
 800a0b8:	60fb      	str	r3, [r7, #12]
}
 800a0ba:	bf00      	nop
 800a0bc:	e7fe      	b.n	800a0bc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a0be:	f000 fc6d 	bl	800a99c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a0c2:	4b1d      	ldr	r3, [pc, #116]	; (800a138 <xTaskCheckForTimeOut+0xc4>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	69ba      	ldr	r2, [r7, #24]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0da:	d102      	bne.n	800a0e2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	61fb      	str	r3, [r7, #28]
 800a0e0:	e023      	b.n	800a12a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	4b15      	ldr	r3, [pc, #84]	; (800a13c <xTaskCheckForTimeOut+0xc8>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d007      	beq.n	800a0fe <xTaskCheckForTimeOut+0x8a>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	69ba      	ldr	r2, [r7, #24]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d302      	bcc.n	800a0fe <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	61fb      	str	r3, [r7, #28]
 800a0fc:	e015      	b.n	800a12a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	429a      	cmp	r2, r3
 800a106:	d20b      	bcs.n	800a120 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	1ad2      	subs	r2, r2, r3
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff ff97 	bl	800a048 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a11a:	2300      	movs	r3, #0
 800a11c:	61fb      	str	r3, [r7, #28]
 800a11e:	e004      	b.n	800a12a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a126:	2301      	movs	r3, #1
 800a128:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a12a:	f000 fc6b 	bl	800aa04 <vPortExitCritical>

	return xReturn;
 800a12e:	69fb      	ldr	r3, [r7, #28]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3720      	adds	r7, #32
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	20000e04 	.word	0x20000e04
 800a13c:	20000e18 	.word	0x20000e18

0800a140 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a144:	4b03      	ldr	r3, [pc, #12]	; (800a154 <vTaskMissedYield+0x14>)
 800a146:	2201      	movs	r2, #1
 800a148:	601a      	str	r2, [r3, #0]
}
 800a14a:	bf00      	nop
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	20000e14 	.word	0x20000e14

0800a158 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a160:	f000 f852 	bl	800a208 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a164:	4b06      	ldr	r3, [pc, #24]	; (800a180 <prvIdleTask+0x28>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d9f9      	bls.n	800a160 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a16c:	4b05      	ldr	r3, [pc, #20]	; (800a184 <prvIdleTask+0x2c>)
 800a16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a17c:	e7f0      	b.n	800a160 <prvIdleTask+0x8>
 800a17e:	bf00      	nop
 800a180:	20000d04 	.word	0x20000d04
 800a184:	e000ed04 	.word	0xe000ed04

0800a188 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a18e:	2300      	movs	r3, #0
 800a190:	607b      	str	r3, [r7, #4]
 800a192:	e00c      	b.n	800a1ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4a12      	ldr	r2, [pc, #72]	; (800a1e8 <prvInitialiseTaskLists+0x60>)
 800a1a0:	4413      	add	r3, r2
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe fa78 	bl	8008698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	607b      	str	r3, [r7, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b06      	cmp	r3, #6
 800a1b2:	d9ef      	bls.n	800a194 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a1b4:	480d      	ldr	r0, [pc, #52]	; (800a1ec <prvInitialiseTaskLists+0x64>)
 800a1b6:	f7fe fa6f 	bl	8008698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a1ba:	480d      	ldr	r0, [pc, #52]	; (800a1f0 <prvInitialiseTaskLists+0x68>)
 800a1bc:	f7fe fa6c 	bl	8008698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a1c0:	480c      	ldr	r0, [pc, #48]	; (800a1f4 <prvInitialiseTaskLists+0x6c>)
 800a1c2:	f7fe fa69 	bl	8008698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a1c6:	480c      	ldr	r0, [pc, #48]	; (800a1f8 <prvInitialiseTaskLists+0x70>)
 800a1c8:	f7fe fa66 	bl	8008698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a1cc:	480b      	ldr	r0, [pc, #44]	; (800a1fc <prvInitialiseTaskLists+0x74>)
 800a1ce:	f7fe fa63 	bl	8008698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a1d2:	4b0b      	ldr	r3, [pc, #44]	; (800a200 <prvInitialiseTaskLists+0x78>)
 800a1d4:	4a05      	ldr	r2, [pc, #20]	; (800a1ec <prvInitialiseTaskLists+0x64>)
 800a1d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1d8:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <prvInitialiseTaskLists+0x7c>)
 800a1da:	4a05      	ldr	r2, [pc, #20]	; (800a1f0 <prvInitialiseTaskLists+0x68>)
 800a1dc:	601a      	str	r2, [r3, #0]
}
 800a1de:	bf00      	nop
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20000d04 	.word	0x20000d04
 800a1ec:	20000d90 	.word	0x20000d90
 800a1f0:	20000da4 	.word	0x20000da4
 800a1f4:	20000dc0 	.word	0x20000dc0
 800a1f8:	20000dd4 	.word	0x20000dd4
 800a1fc:	20000dec 	.word	0x20000dec
 800a200:	20000db8 	.word	0x20000db8
 800a204:	20000dbc 	.word	0x20000dbc

0800a208 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a20e:	e019      	b.n	800a244 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a210:	f000 fbc4 	bl	800a99c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a214:	4b10      	ldr	r3, [pc, #64]	; (800a258 <prvCheckTasksWaitingTermination+0x50>)
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	3304      	adds	r3, #4
 800a220:	4618      	mov	r0, r3
 800a222:	f7fe fac3 	bl	80087ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a226:	4b0d      	ldr	r3, [pc, #52]	; (800a25c <prvCheckTasksWaitingTermination+0x54>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	4a0b      	ldr	r2, [pc, #44]	; (800a25c <prvCheckTasksWaitingTermination+0x54>)
 800a22e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a230:	4b0b      	ldr	r3, [pc, #44]	; (800a260 <prvCheckTasksWaitingTermination+0x58>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3b01      	subs	r3, #1
 800a236:	4a0a      	ldr	r2, [pc, #40]	; (800a260 <prvCheckTasksWaitingTermination+0x58>)
 800a238:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a23a:	f000 fbe3 	bl	800aa04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f810 	bl	800a264 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a244:	4b06      	ldr	r3, [pc, #24]	; (800a260 <prvCheckTasksWaitingTermination+0x58>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1e1      	bne.n	800a210 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a24c:	bf00      	nop
 800a24e:	bf00      	nop
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	20000dd4 	.word	0x20000dd4
 800a25c:	20000e00 	.word	0x20000e00
 800a260:	20000de8 	.word	0x20000de8

0800a264 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a272:	2b00      	cmp	r3, #0
 800a274:	d108      	bne.n	800a288 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fd84 	bl	800ad88 <vPortFree>
				vPortFree( pxTCB );
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fd81 	bl	800ad88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a286:	e01a      	b.n	800a2be <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d103      	bne.n	800a29a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fd78 	bl	800ad88 <vPortFree>
	}
 800a298:	e011      	b.n	800a2be <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d00c      	beq.n	800a2be <prvDeleteTCB+0x5a>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	b672      	cpsid	i
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	b662      	cpsie	i
 800a2b8:	60fb      	str	r3, [r7, #12]
}
 800a2ba:	bf00      	nop
 800a2bc:	e7fe      	b.n	800a2bc <prvDeleteTCB+0x58>
	}
 800a2be:	bf00      	nop
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2ce:	4b0c      	ldr	r3, [pc, #48]	; (800a300 <prvResetNextTaskUnblockTime+0x38>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2d8:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <prvResetNextTaskUnblockTime+0x3c>)
 800a2da:	f04f 32ff 	mov.w	r2, #4294967295
 800a2de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a2e0:	e008      	b.n	800a2f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e2:	4b07      	ldr	r3, [pc, #28]	; (800a300 <prvResetNextTaskUnblockTime+0x38>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	4a04      	ldr	r2, [pc, #16]	; (800a304 <prvResetNextTaskUnblockTime+0x3c>)
 800a2f2:	6013      	str	r3, [r2, #0]
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	20000db8 	.word	0x20000db8
 800a304:	20000e20 	.word	0x20000e20

0800a308 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a30e:	4b0b      	ldr	r3, [pc, #44]	; (800a33c <xTaskGetSchedulerState+0x34>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d102      	bne.n	800a31c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a316:	2301      	movs	r3, #1
 800a318:	607b      	str	r3, [r7, #4]
 800a31a:	e008      	b.n	800a32e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a31c:	4b08      	ldr	r3, [pc, #32]	; (800a340 <xTaskGetSchedulerState+0x38>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d102      	bne.n	800a32a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a324:	2302      	movs	r3, #2
 800a326:	607b      	str	r3, [r7, #4]
 800a328:	e001      	b.n	800a32e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a32a:	2300      	movs	r3, #0
 800a32c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a32e:	687b      	ldr	r3, [r7, #4]
	}
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	20000e0c 	.word	0x20000e0c
 800a340:	20000e28 	.word	0x20000e28

0800a344 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a350:	2300      	movs	r3, #0
 800a352:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d069      	beq.n	800a42e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35e:	4b36      	ldr	r3, [pc, #216]	; (800a438 <xTaskPriorityInherit+0xf4>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a364:	429a      	cmp	r2, r3
 800a366:	d259      	bcs.n	800a41c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	db06      	blt.n	800a37e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a370:	4b31      	ldr	r3, [pc, #196]	; (800a438 <xTaskPriorityInherit+0xf4>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a376:	f1c3 0207 	rsb	r2, r3, #7
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	6959      	ldr	r1, [r3, #20]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a386:	4613      	mov	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4a2b      	ldr	r2, [pc, #172]	; (800a43c <xTaskPriorityInherit+0xf8>)
 800a390:	4413      	add	r3, r2
 800a392:	4299      	cmp	r1, r3
 800a394:	d13a      	bne.n	800a40c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	3304      	adds	r3, #4
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe fa06 	bl	80087ac <uxListRemove>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d115      	bne.n	800a3d2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3aa:	4924      	ldr	r1, [pc, #144]	; (800a43c <xTaskPriorityInherit+0xf8>)
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	440b      	add	r3, r1
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10a      	bne.n	800a3d2 <xTaskPriorityInherit+0x8e>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c6:	43da      	mvns	r2, r3
 800a3c8:	4b1d      	ldr	r3, [pc, #116]	; (800a440 <xTaskPriorityInherit+0xfc>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	4a1c      	ldr	r2, [pc, #112]	; (800a440 <xTaskPriorityInherit+0xfc>)
 800a3d0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a3d2:	4b19      	ldr	r3, [pc, #100]	; (800a438 <xTaskPriorityInherit+0xf4>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	409a      	lsls	r2, r3
 800a3e4:	4b16      	ldr	r3, [pc, #88]	; (800a440 <xTaskPriorityInherit+0xfc>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	4a15      	ldr	r2, [pc, #84]	; (800a440 <xTaskPriorityInherit+0xfc>)
 800a3ec:	6013      	str	r3, [r2, #0]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4a10      	ldr	r2, [pc, #64]	; (800a43c <xTaskPriorityInherit+0xf8>)
 800a3fc:	441a      	add	r2, r3
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	3304      	adds	r3, #4
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f7fe f974 	bl	80086f2 <vListInsertEnd>
 800a40a:	e004      	b.n	800a416 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <xTaskPriorityInherit+0xf4>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a416:	2301      	movs	r3, #1
 800a418:	60fb      	str	r3, [r7, #12]
 800a41a:	e008      	b.n	800a42e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a420:	4b05      	ldr	r3, [pc, #20]	; (800a438 <xTaskPriorityInherit+0xf4>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	429a      	cmp	r2, r3
 800a428:	d201      	bcs.n	800a42e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a42a:	2301      	movs	r3, #1
 800a42c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a42e:	68fb      	ldr	r3, [r7, #12]
	}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000d00 	.word	0x20000d00
 800a43c:	20000d04 	.word	0x20000d04
 800a440:	20000e08 	.word	0x20000e08

0800a444 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d072      	beq.n	800a540 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a45a:	4b3c      	ldr	r3, [pc, #240]	; (800a54c <xTaskPriorityDisinherit+0x108>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	429a      	cmp	r2, r3
 800a462:	d00c      	beq.n	800a47e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	b672      	cpsid	i
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	b662      	cpsie	i
 800a478:	60fb      	str	r3, [r7, #12]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10c      	bne.n	800a4a0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48a:	b672      	cpsid	i
 800a48c:	f383 8811 	msr	BASEPRI, r3
 800a490:	f3bf 8f6f 	isb	sy
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	b662      	cpsie	i
 800a49a:	60bb      	str	r3, [r7, #8]
}
 800a49c:	bf00      	nop
 800a49e:	e7fe      	b.n	800a49e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4a4:	1e5a      	subs	r2, r3, #1
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d044      	beq.n	800a540 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d140      	bne.n	800a540 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe f972 	bl	80087ac <uxListRemove>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d115      	bne.n	800a4fa <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d2:	491f      	ldr	r1, [pc, #124]	; (800a550 <xTaskPriorityDisinherit+0x10c>)
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	440b      	add	r3, r1
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <xTaskPriorityDisinherit+0xb6>
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ee:	43da      	mvns	r2, r3
 800a4f0:	4b18      	ldr	r3, [pc, #96]	; (800a554 <xTaskPriorityDisinherit+0x110>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	4a17      	ldr	r2, [pc, #92]	; (800a554 <xTaskPriorityDisinherit+0x110>)
 800a4f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a506:	f1c3 0207 	rsb	r2, r3, #7
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a512:	2201      	movs	r2, #1
 800a514:	409a      	lsls	r2, r3
 800a516:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <xTaskPriorityDisinherit+0x110>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	4a0d      	ldr	r2, [pc, #52]	; (800a554 <xTaskPriorityDisinherit+0x110>)
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a524:	4613      	mov	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4a08      	ldr	r2, [pc, #32]	; (800a550 <xTaskPriorityDisinherit+0x10c>)
 800a52e:	441a      	add	r2, r3
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	3304      	adds	r3, #4
 800a534:	4619      	mov	r1, r3
 800a536:	4610      	mov	r0, r2
 800a538:	f7fe f8db 	bl	80086f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a53c:	2301      	movs	r3, #1
 800a53e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a540:	697b      	ldr	r3, [r7, #20]
	}
 800a542:	4618      	mov	r0, r3
 800a544:	3718      	adds	r7, #24
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000d00 	.word	0x20000d00
 800a550:	20000d04 	.word	0x20000d04
 800a554:	20000e08 	.word	0x20000e08

0800a558 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a566:	2301      	movs	r3, #1
 800a568:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 8087 	beq.w	800a680 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10c      	bne.n	800a594 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	b672      	cpsid	i
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	b662      	cpsie	i
 800a58e:	60fb      	str	r3, [r7, #12]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d902      	bls.n	800a5a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	61fb      	str	r3, [r7, #28]
 800a5a2:	e002      	b.n	800a5aa <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ae:	69fa      	ldr	r2, [r7, #28]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d065      	beq.n	800a680 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d160      	bne.n	800a680 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a5be:	4b32      	ldr	r3, [pc, #200]	; (800a688 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d10c      	bne.n	800a5e2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	b672      	cpsid	i
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	b662      	cpsie	i
 800a5dc:	60bb      	str	r3, [r7, #8]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	69fa      	ldr	r2, [r7, #28]
 800a5ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	db04      	blt.n	800a600 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	f1c3 0207 	rsb	r2, r3, #7
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	6959      	ldr	r1, [r3, #20]
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4a1f      	ldr	r2, [pc, #124]	; (800a68c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a610:	4413      	add	r3, r2
 800a612:	4299      	cmp	r1, r3
 800a614:	d134      	bne.n	800a680 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	3304      	adds	r3, #4
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe f8c6 	bl	80087ac <uxListRemove>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d115      	bne.n	800a652 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62a:	4918      	ldr	r1, [pc, #96]	; (800a68c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	440b      	add	r3, r1
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10a      	bne.n	800a652 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	2201      	movs	r2, #1
 800a642:	fa02 f303 	lsl.w	r3, r2, r3
 800a646:	43da      	mvns	r2, r3
 800a648:	4b11      	ldr	r3, [pc, #68]	; (800a690 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4013      	ands	r3, r2
 800a64e:	4a10      	ldr	r2, [pc, #64]	; (800a690 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a650:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	2201      	movs	r2, #1
 800a658:	409a      	lsls	r2, r3
 800a65a:	4b0d      	ldr	r3, [pc, #52]	; (800a690 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4313      	orrs	r3, r2
 800a660:	4a0b      	ldr	r2, [pc, #44]	; (800a690 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a662:	6013      	str	r3, [r2, #0]
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4a06      	ldr	r2, [pc, #24]	; (800a68c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a672:	441a      	add	r2, r3
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	3304      	adds	r3, #4
 800a678:	4619      	mov	r1, r3
 800a67a:	4610      	mov	r0, r2
 800a67c:	f7fe f839 	bl	80086f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a680:	bf00      	nop
 800a682:	3720      	adds	r7, #32
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20000d00 	.word	0x20000d00
 800a68c:	20000d04 	.word	0x20000d04
 800a690:	20000e08 	.word	0x20000e08

0800a694 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a694:	b480      	push	{r7}
 800a696:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a698:	4b07      	ldr	r3, [pc, #28]	; (800a6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d004      	beq.n	800a6aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a6a0:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6a6:	3201      	adds	r2, #1
 800a6a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a6aa:	4b03      	ldr	r3, [pc, #12]	; (800a6b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
	}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	20000d00 	.word	0x20000d00

0800a6bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a6c6:	4b29      	ldr	r3, [pc, #164]	; (800a76c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6cc:	4b28      	ldr	r3, [pc, #160]	; (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe f86a 	bl	80087ac <uxListRemove>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10b      	bne.n	800a6f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a6de:	4b24      	ldr	r3, [pc, #144]	; (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ea:	43da      	mvns	r2, r3
 800a6ec:	4b21      	ldr	r3, [pc, #132]	; (800a774 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	4a20      	ldr	r2, [pc, #128]	; (800a774 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a6f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fc:	d10a      	bne.n	800a714 <prvAddCurrentTaskToDelayedList+0x58>
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d007      	beq.n	800a714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a704:	4b1a      	ldr	r3, [pc, #104]	; (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	3304      	adds	r3, #4
 800a70a:	4619      	mov	r1, r3
 800a70c:	481a      	ldr	r0, [pc, #104]	; (800a778 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a70e:	f7fd fff0 	bl	80086f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a712:	e026      	b.n	800a762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4413      	add	r3, r2
 800a71a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a71c:	4b14      	ldr	r3, [pc, #80]	; (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d209      	bcs.n	800a740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a72c:	4b13      	ldr	r3, [pc, #76]	; (800a77c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	4b0f      	ldr	r3, [pc, #60]	; (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3304      	adds	r3, #4
 800a736:	4619      	mov	r1, r3
 800a738:	4610      	mov	r0, r2
 800a73a:	f7fd fffe 	bl	800873a <vListInsert>
}
 800a73e:	e010      	b.n	800a762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a740:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	4b0a      	ldr	r3, [pc, #40]	; (800a770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3304      	adds	r3, #4
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f7fd fff4 	bl	800873a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a752:	4b0c      	ldr	r3, [pc, #48]	; (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d202      	bcs.n	800a762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a75c:	4a09      	ldr	r2, [pc, #36]	; (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	6013      	str	r3, [r2, #0]
}
 800a762:	bf00      	nop
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	20000e04 	.word	0x20000e04
 800a770:	20000d00 	.word	0x20000d00
 800a774:	20000e08 	.word	0x20000e08
 800a778:	20000dec 	.word	0x20000dec
 800a77c:	20000dbc 	.word	0x20000dbc
 800a780:	20000db8 	.word	0x20000db8
 800a784:	20000e20 	.word	0x20000e20

0800a788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	3b04      	subs	r3, #4
 800a798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a7a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3b04      	subs	r3, #4
 800a7a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	f023 0201 	bic.w	r2, r3, #1
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3b04      	subs	r3, #4
 800a7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7b8:	4a0c      	ldr	r2, [pc, #48]	; (800a7ec <pxPortInitialiseStack+0x64>)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3b14      	subs	r3, #20
 800a7c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3b04      	subs	r3, #4
 800a7ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f06f 0202 	mvn.w	r2, #2
 800a7d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	3b20      	subs	r3, #32
 800a7dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7de:	68fb      	ldr	r3, [r7, #12]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	0800a7f1 	.word	0x0800a7f1

0800a7f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7fa:	4b14      	ldr	r3, [pc, #80]	; (800a84c <prvTaskExitError+0x5c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a802:	d00c      	beq.n	800a81e <prvTaskExitError+0x2e>
	__asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	b672      	cpsid	i
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	b662      	cpsie	i
 800a818:	60fb      	str	r3, [r7, #12]
}
 800a81a:	bf00      	nop
 800a81c:	e7fe      	b.n	800a81c <prvTaskExitError+0x2c>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	b672      	cpsid	i
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	b662      	cpsie	i
 800a832:	60bb      	str	r3, [r7, #8]
}
 800a834:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a836:	bf00      	nop
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d0fc      	beq.n	800a838 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a83e:	bf00      	nop
 800a840:	bf00      	nop
 800a842:	3714      	adds	r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	2000001c 	.word	0x2000001c

0800a850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a850:	4b07      	ldr	r3, [pc, #28]	; (800a870 <pxCurrentTCBConst2>)
 800a852:	6819      	ldr	r1, [r3, #0]
 800a854:	6808      	ldr	r0, [r1, #0]
 800a856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85a:	f380 8809 	msr	PSP, r0
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f04f 0000 	mov.w	r0, #0
 800a866:	f380 8811 	msr	BASEPRI, r0
 800a86a:	4770      	bx	lr
 800a86c:	f3af 8000 	nop.w

0800a870 <pxCurrentTCBConst2>:
 800a870:	20000d00 	.word	0x20000d00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a874:	bf00      	nop
 800a876:	bf00      	nop

0800a878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a878:	4808      	ldr	r0, [pc, #32]	; (800a89c <prvPortStartFirstTask+0x24>)
 800a87a:	6800      	ldr	r0, [r0, #0]
 800a87c:	6800      	ldr	r0, [r0, #0]
 800a87e:	f380 8808 	msr	MSP, r0
 800a882:	f04f 0000 	mov.w	r0, #0
 800a886:	f380 8814 	msr	CONTROL, r0
 800a88a:	b662      	cpsie	i
 800a88c:	b661      	cpsie	f
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	df00      	svc	0
 800a898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a89a:	bf00      	nop
 800a89c:	e000ed08 	.word	0xe000ed08

0800a8a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8a6:	4b37      	ldr	r3, [pc, #220]	; (800a984 <xPortStartScheduler+0xe4>)
 800a8a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	22ff      	movs	r2, #255	; 0xff
 800a8b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8c0:	78fb      	ldrb	r3, [r7, #3]
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	4b2f      	ldr	r3, [pc, #188]	; (800a988 <xPortStartScheduler+0xe8>)
 800a8cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8ce:	4b2f      	ldr	r3, [pc, #188]	; (800a98c <xPortStartScheduler+0xec>)
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8d4:	e009      	b.n	800a8ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a8d6:	4b2d      	ldr	r3, [pc, #180]	; (800a98c <xPortStartScheduler+0xec>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	4a2b      	ldr	r2, [pc, #172]	; (800a98c <xPortStartScheduler+0xec>)
 800a8de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8e0:	78fb      	ldrb	r3, [r7, #3]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8f2:	2b80      	cmp	r3, #128	; 0x80
 800a8f4:	d0ef      	beq.n	800a8d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8f6:	4b25      	ldr	r3, [pc, #148]	; (800a98c <xPortStartScheduler+0xec>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f1c3 0307 	rsb	r3, r3, #7
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d00c      	beq.n	800a91c <xPortStartScheduler+0x7c>
	__asm volatile
 800a902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a906:	b672      	cpsid	i
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	b662      	cpsie	i
 800a916:	60bb      	str	r3, [r7, #8]
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a91c:	4b1b      	ldr	r3, [pc, #108]	; (800a98c <xPortStartScheduler+0xec>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	021b      	lsls	r3, r3, #8
 800a922:	4a1a      	ldr	r2, [pc, #104]	; (800a98c <xPortStartScheduler+0xec>)
 800a924:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a926:	4b19      	ldr	r3, [pc, #100]	; (800a98c <xPortStartScheduler+0xec>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a92e:	4a17      	ldr	r2, [pc, #92]	; (800a98c <xPortStartScheduler+0xec>)
 800a930:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	b2da      	uxtb	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a93a:	4b15      	ldr	r3, [pc, #84]	; (800a990 <xPortStartScheduler+0xf0>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a14      	ldr	r2, [pc, #80]	; (800a990 <xPortStartScheduler+0xf0>)
 800a940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a944:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a946:	4b12      	ldr	r3, [pc, #72]	; (800a990 <xPortStartScheduler+0xf0>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a11      	ldr	r2, [pc, #68]	; (800a990 <xPortStartScheduler+0xf0>)
 800a94c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a950:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a952:	f000 f8dd 	bl	800ab10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a956:	4b0f      	ldr	r3, [pc, #60]	; (800a994 <xPortStartScheduler+0xf4>)
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a95c:	f000 f8fc 	bl	800ab58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a960:	4b0d      	ldr	r3, [pc, #52]	; (800a998 <xPortStartScheduler+0xf8>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a0c      	ldr	r2, [pc, #48]	; (800a998 <xPortStartScheduler+0xf8>)
 800a966:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a96a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a96c:	f7ff ff84 	bl	800a878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a970:	f7ff fa82 	bl	8009e78 <vTaskSwitchContext>
	prvTaskExitError();
 800a974:	f7ff ff3c 	bl	800a7f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	e000e400 	.word	0xe000e400
 800a988:	20000e2c 	.word	0x20000e2c
 800a98c:	20000e30 	.word	0x20000e30
 800a990:	e000ed20 	.word	0xe000ed20
 800a994:	2000001c 	.word	0x2000001c
 800a998:	e000ef34 	.word	0xe000ef34

0800a99c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	b672      	cpsid	i
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	b662      	cpsie	i
 800a9b6:	607b      	str	r3, [r7, #4]
}
 800a9b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9ba:	4b10      	ldr	r3, [pc, #64]	; (800a9fc <vPortEnterCritical+0x60>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	4a0e      	ldr	r2, [pc, #56]	; (800a9fc <vPortEnterCritical+0x60>)
 800a9c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9c4:	4b0d      	ldr	r3, [pc, #52]	; (800a9fc <vPortEnterCritical+0x60>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d111      	bne.n	800a9f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9cc:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <vPortEnterCritical+0x64>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00c      	beq.n	800a9f0 <vPortEnterCritical+0x54>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9da:	b672      	cpsid	i
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	b662      	cpsie	i
 800a9ea:	603b      	str	r3, [r7, #0]
}
 800a9ec:	bf00      	nop
 800a9ee:	e7fe      	b.n	800a9ee <vPortEnterCritical+0x52>
	}
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	2000001c 	.word	0x2000001c
 800aa00:	e000ed04 	.word	0xe000ed04

0800aa04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa0a:	4b13      	ldr	r3, [pc, #76]	; (800aa58 <vPortExitCritical+0x54>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10c      	bne.n	800aa2c <vPortExitCritical+0x28>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa16:	b672      	cpsid	i
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	b662      	cpsie	i
 800aa26:	607b      	str	r3, [r7, #4]
}
 800aa28:	bf00      	nop
 800aa2a:	e7fe      	b.n	800aa2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <vPortExitCritical+0x54>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3b01      	subs	r3, #1
 800aa32:	4a09      	ldr	r2, [pc, #36]	; (800aa58 <vPortExitCritical+0x54>)
 800aa34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa36:	4b08      	ldr	r3, [pc, #32]	; (800aa58 <vPortExitCritical+0x54>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d105      	bne.n	800aa4a <vPortExitCritical+0x46>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	f383 8811 	msr	BASEPRI, r3
}
 800aa48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa4a:	bf00      	nop
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	2000001c 	.word	0x2000001c
 800aa5c:	00000000 	.word	0x00000000

0800aa60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa60:	f3ef 8009 	mrs	r0, PSP
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	4b15      	ldr	r3, [pc, #84]	; (800aac0 <pxCurrentTCBConst>)
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	f01e 0f10 	tst.w	lr, #16
 800aa70:	bf08      	it	eq
 800aa72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7a:	6010      	str	r0, [r2, #0]
 800aa7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa84:	b672      	cpsid	i
 800aa86:	f380 8811 	msr	BASEPRI, r0
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	b662      	cpsie	i
 800aa94:	f7ff f9f0 	bl	8009e78 <vTaskSwitchContext>
 800aa98:	f04f 0000 	mov.w	r0, #0
 800aa9c:	f380 8811 	msr	BASEPRI, r0
 800aaa0:	bc09      	pop	{r0, r3}
 800aaa2:	6819      	ldr	r1, [r3, #0]
 800aaa4:	6808      	ldr	r0, [r1, #0]
 800aaa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaaa:	f01e 0f10 	tst.w	lr, #16
 800aaae:	bf08      	it	eq
 800aab0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aab4:	f380 8809 	msr	PSP, r0
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop

0800aac0 <pxCurrentTCBConst>:
 800aac0:	20000d00 	.word	0x20000d00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aac4:	bf00      	nop
 800aac6:	bf00      	nop

0800aac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	b672      	cpsid	i
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	b662      	cpsie	i
 800aae2:	607b      	str	r3, [r7, #4]
}
 800aae4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aae6:	f7ff f90d 	bl	8009d04 <xTaskIncrementTick>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d003      	beq.n	800aaf8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aaf0:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <SysTick_Handler+0x44>)
 800aaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	2300      	movs	r3, #0
 800aafa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	f383 8811 	msr	BASEPRI, r3
}
 800ab02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab04:	bf00      	nop
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	e000ed04 	.word	0xe000ed04

0800ab10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab10:	b480      	push	{r7}
 800ab12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab14:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <vPortSetupTimerInterrupt+0x34>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab1a:	4b0b      	ldr	r3, [pc, #44]	; (800ab48 <vPortSetupTimerInterrupt+0x38>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab20:	4b0a      	ldr	r3, [pc, #40]	; (800ab4c <vPortSetupTimerInterrupt+0x3c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a0a      	ldr	r2, [pc, #40]	; (800ab50 <vPortSetupTimerInterrupt+0x40>)
 800ab26:	fba2 2303 	umull	r2, r3, r2, r3
 800ab2a:	099b      	lsrs	r3, r3, #6
 800ab2c:	4a09      	ldr	r2, [pc, #36]	; (800ab54 <vPortSetupTimerInterrupt+0x44>)
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab32:	4b04      	ldr	r3, [pc, #16]	; (800ab44 <vPortSetupTimerInterrupt+0x34>)
 800ab34:	2207      	movs	r2, #7
 800ab36:	601a      	str	r2, [r3, #0]
}
 800ab38:	bf00      	nop
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	e000e010 	.word	0xe000e010
 800ab48:	e000e018 	.word	0xe000e018
 800ab4c:	20000010 	.word	0x20000010
 800ab50:	10624dd3 	.word	0x10624dd3
 800ab54:	e000e014 	.word	0xe000e014

0800ab58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab68 <vPortEnableVFP+0x10>
 800ab5c:	6801      	ldr	r1, [r0, #0]
 800ab5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab62:	6001      	str	r1, [r0, #0]
 800ab64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab66:	bf00      	nop
 800ab68:	e000ed88 	.word	0xe000ed88

0800ab6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab72:	f3ef 8305 	mrs	r3, IPSR
 800ab76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2b0f      	cmp	r3, #15
 800ab7c:	d916      	bls.n	800abac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab7e:	4a19      	ldr	r2, [pc, #100]	; (800abe4 <vPortValidateInterruptPriority+0x78>)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4413      	add	r3, r2
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab88:	4b17      	ldr	r3, [pc, #92]	; (800abe8 <vPortValidateInterruptPriority+0x7c>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	7afa      	ldrb	r2, [r7, #11]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d20c      	bcs.n	800abac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ab92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab96:	b672      	cpsid	i
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	b662      	cpsie	i
 800aba6:	607b      	str	r3, [r7, #4]
}
 800aba8:	bf00      	nop
 800abaa:	e7fe      	b.n	800abaa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abac:	4b0f      	ldr	r3, [pc, #60]	; (800abec <vPortValidateInterruptPriority+0x80>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abb4:	4b0e      	ldr	r3, [pc, #56]	; (800abf0 <vPortValidateInterruptPriority+0x84>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d90c      	bls.n	800abd6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	b672      	cpsid	i
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	b662      	cpsie	i
 800abd0:	603b      	str	r3, [r7, #0]
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <vPortValidateInterruptPriority+0x68>
	}
 800abd6:	bf00      	nop
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	e000e3f0 	.word	0xe000e3f0
 800abe8:	20000e2c 	.word	0x20000e2c
 800abec:	e000ed0c 	.word	0xe000ed0c
 800abf0:	20000e30 	.word	0x20000e30

0800abf4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08a      	sub	sp, #40	; 0x28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac00:	f7fe ffb2 	bl	8009b68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac04:	4b5b      	ldr	r3, [pc, #364]	; (800ad74 <pvPortMalloc+0x180>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac0c:	f000 f91a 	bl	800ae44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac10:	4b59      	ldr	r3, [pc, #356]	; (800ad78 <pvPortMalloc+0x184>)
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4013      	ands	r3, r2
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f040 8092 	bne.w	800ad42 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01f      	beq.n	800ac64 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ac24:	2208      	movs	r2, #8
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4413      	add	r3, r2
 800ac2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f003 0307 	and.w	r3, r3, #7
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d016      	beq.n	800ac64 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f023 0307 	bic.w	r3, r3, #7
 800ac3c:	3308      	adds	r3, #8
 800ac3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f003 0307 	and.w	r3, r3, #7
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00c      	beq.n	800ac64 <pvPortMalloc+0x70>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	b672      	cpsid	i
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	b662      	cpsie	i
 800ac5e:	617b      	str	r3, [r7, #20]
}
 800ac60:	bf00      	nop
 800ac62:	e7fe      	b.n	800ac62 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d06b      	beq.n	800ad42 <pvPortMalloc+0x14e>
 800ac6a:	4b44      	ldr	r3, [pc, #272]	; (800ad7c <pvPortMalloc+0x188>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d866      	bhi.n	800ad42 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac74:	4b42      	ldr	r3, [pc, #264]	; (800ad80 <pvPortMalloc+0x18c>)
 800ac76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac78:	4b41      	ldr	r3, [pc, #260]	; (800ad80 <pvPortMalloc+0x18c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac7e:	e004      	b.n	800ac8a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ac80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d903      	bls.n	800ac9c <pvPortMalloc+0xa8>
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1f1      	bne.n	800ac80 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac9c:	4b35      	ldr	r3, [pc, #212]	; (800ad74 <pvPortMalloc+0x180>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d04d      	beq.n	800ad42 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2208      	movs	r2, #8
 800acac:	4413      	add	r3, r2
 800acae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	6a3b      	ldr	r3, [r7, #32]
 800acb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	1ad2      	subs	r2, r2, r3
 800acc0:	2308      	movs	r3, #8
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d921      	bls.n	800ad0c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4413      	add	r3, r2
 800acce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	f003 0307 	and.w	r3, r3, #7
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00c      	beq.n	800acf4 <pvPortMalloc+0x100>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	b672      	cpsid	i
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	b662      	cpsie	i
 800acee:	613b      	str	r3, [r7, #16]
}
 800acf0:	bf00      	nop
 800acf2:	e7fe      	b.n	800acf2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	1ad2      	subs	r2, r2, r3
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad06:	69b8      	ldr	r0, [r7, #24]
 800ad08:	f000 f8fe 	bl	800af08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad0c:	4b1b      	ldr	r3, [pc, #108]	; (800ad7c <pvPortMalloc+0x188>)
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	4a19      	ldr	r2, [pc, #100]	; (800ad7c <pvPortMalloc+0x188>)
 800ad18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad1a:	4b18      	ldr	r3, [pc, #96]	; (800ad7c <pvPortMalloc+0x188>)
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	4b19      	ldr	r3, [pc, #100]	; (800ad84 <pvPortMalloc+0x190>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d203      	bcs.n	800ad2e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad26:	4b15      	ldr	r3, [pc, #84]	; (800ad7c <pvPortMalloc+0x188>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a16      	ldr	r2, [pc, #88]	; (800ad84 <pvPortMalloc+0x190>)
 800ad2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	685a      	ldr	r2, [r3, #4]
 800ad32:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <pvPortMalloc+0x184>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	431a      	orrs	r2, r3
 800ad38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	2200      	movs	r2, #0
 800ad40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad42:	f7fe ff1f 	bl	8009b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	f003 0307 	and.w	r3, r3, #7
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00c      	beq.n	800ad6a <pvPortMalloc+0x176>
	__asm volatile
 800ad50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad54:	b672      	cpsid	i
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	b662      	cpsie	i
 800ad64:	60fb      	str	r3, [r7, #12]
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <pvPortMalloc+0x174>
	return pvReturn;
 800ad6a:	69fb      	ldr	r3, [r7, #28]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3728      	adds	r7, #40	; 0x28
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20004a3c 	.word	0x20004a3c
 800ad78:	20004a48 	.word	0x20004a48
 800ad7c:	20004a40 	.word	0x20004a40
 800ad80:	20004a34 	.word	0x20004a34
 800ad84:	20004a44 	.word	0x20004a44

0800ad88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d04c      	beq.n	800ae34 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad9a:	2308      	movs	r3, #8
 800ad9c:	425b      	negs	r3, r3
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	4413      	add	r3, r2
 800ada2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	4b23      	ldr	r3, [pc, #140]	; (800ae3c <vPortFree+0xb4>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4013      	ands	r3, r2
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10c      	bne.n	800add0 <vPortFree+0x48>
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	b672      	cpsid	i
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	b662      	cpsie	i
 800adca:	60fb      	str	r3, [r7, #12]
}
 800adcc:	bf00      	nop
 800adce:	e7fe      	b.n	800adce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00c      	beq.n	800adf2 <vPortFree+0x6a>
	__asm volatile
 800add8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800addc:	b672      	cpsid	i
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	b662      	cpsie	i
 800adec:	60bb      	str	r3, [r7, #8]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	685a      	ldr	r2, [r3, #4]
 800adf6:	4b11      	ldr	r3, [pc, #68]	; (800ae3c <vPortFree+0xb4>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4013      	ands	r3, r2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d019      	beq.n	800ae34 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d115      	bne.n	800ae34 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	4b0b      	ldr	r3, [pc, #44]	; (800ae3c <vPortFree+0xb4>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	43db      	mvns	r3, r3
 800ae12:	401a      	ands	r2, r3
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae18:	f7fe fea6 	bl	8009b68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <vPortFree+0xb8>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4413      	add	r3, r2
 800ae26:	4a06      	ldr	r2, [pc, #24]	; (800ae40 <vPortFree+0xb8>)
 800ae28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae2a:	6938      	ldr	r0, [r7, #16]
 800ae2c:	f000 f86c 	bl	800af08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ae30:	f7fe fea8 	bl	8009b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae34:	bf00      	nop
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20004a48 	.word	0x20004a48
 800ae40:	20004a40 	.word	0x20004a40

0800ae44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae50:	4b27      	ldr	r3, [pc, #156]	; (800aef0 <prvHeapInit+0xac>)
 800ae52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f003 0307 	and.w	r3, r3, #7
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00c      	beq.n	800ae78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3307      	adds	r3, #7
 800ae62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f023 0307 	bic.w	r3, r3, #7
 800ae6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	4a1f      	ldr	r2, [pc, #124]	; (800aef0 <prvHeapInit+0xac>)
 800ae74:	4413      	add	r3, r2
 800ae76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae7c:	4a1d      	ldr	r2, [pc, #116]	; (800aef4 <prvHeapInit+0xb0>)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae82:	4b1c      	ldr	r3, [pc, #112]	; (800aef4 <prvHeapInit+0xb0>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae90:	2208      	movs	r2, #8
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	1a9b      	subs	r3, r3, r2
 800ae96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f023 0307 	bic.w	r3, r3, #7
 800ae9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	4a15      	ldr	r2, [pc, #84]	; (800aef8 <prvHeapInit+0xb4>)
 800aea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aea6:	4b14      	ldr	r3, [pc, #80]	; (800aef8 <prvHeapInit+0xb4>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aeae:	4b12      	ldr	r3, [pc, #72]	; (800aef8 <prvHeapInit+0xb4>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	1ad2      	subs	r2, r2, r3
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aec4:	4b0c      	ldr	r3, [pc, #48]	; (800aef8 <prvHeapInit+0xb4>)
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	4a0a      	ldr	r2, [pc, #40]	; (800aefc <prvHeapInit+0xb8>)
 800aed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	4a09      	ldr	r2, [pc, #36]	; (800af00 <prvHeapInit+0xbc>)
 800aeda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aedc:	4b09      	ldr	r3, [pc, #36]	; (800af04 <prvHeapInit+0xc0>)
 800aede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aee2:	601a      	str	r2, [r3, #0]
}
 800aee4:	bf00      	nop
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	20000e34 	.word	0x20000e34
 800aef4:	20004a34 	.word	0x20004a34
 800aef8:	20004a3c 	.word	0x20004a3c
 800aefc:	20004a44 	.word	0x20004a44
 800af00:	20004a40 	.word	0x20004a40
 800af04:	20004a48 	.word	0x20004a48

0800af08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af10:	4b28      	ldr	r3, [pc, #160]	; (800afb4 <prvInsertBlockIntoFreeList+0xac>)
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	e002      	b.n	800af1c <prvInsertBlockIntoFreeList+0x14>
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	429a      	cmp	r2, r3
 800af24:	d8f7      	bhi.n	800af16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	4413      	add	r3, r2
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	429a      	cmp	r2, r3
 800af36:	d108      	bne.n	800af4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	685a      	ldr	r2, [r3, #4]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	441a      	add	r2, r3
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	441a      	add	r2, r3
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d118      	bne.n	800af90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	4b15      	ldr	r3, [pc, #84]	; (800afb8 <prvInsertBlockIntoFreeList+0xb0>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	429a      	cmp	r2, r3
 800af68:	d00d      	beq.n	800af86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	685a      	ldr	r2, [r3, #4]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	441a      	add	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	601a      	str	r2, [r3, #0]
 800af84:	e008      	b.n	800af98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af86:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <prvInsertBlockIntoFreeList+0xb0>)
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	e003      	b.n	800af98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d002      	beq.n	800afa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afa6:	bf00      	nop
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	20004a34 	.word	0x20004a34
 800afb8:	20004a3c 	.word	0x20004a3c

0800afbc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800afc6:	f007 fa03 	bl	80123d0 <sys_timeouts_sleeptime>
 800afca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd2:	d10b      	bne.n	800afec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800afd4:	4813      	ldr	r0, [pc, #76]	; (800b024 <tcpip_timeouts_mbox_fetch+0x68>)
 800afd6:	f009 ff72 	bl	8014ebe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800afda:	2200      	movs	r2, #0
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f009 fee4 	bl	8014dac <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800afe4:	480f      	ldr	r0, [pc, #60]	; (800b024 <tcpip_timeouts_mbox_fetch+0x68>)
 800afe6:	f009 ff5b 	bl	8014ea0 <sys_mutex_lock>
    return;
 800afea:	e018      	b.n	800b01e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d102      	bne.n	800aff8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800aff2:	f007 f9b3 	bl	801235c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800aff6:	e7e6      	b.n	800afc6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800aff8:	480a      	ldr	r0, [pc, #40]	; (800b024 <tcpip_timeouts_mbox_fetch+0x68>)
 800affa:	f009 ff60 	bl	8014ebe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f009 fed2 	bl	8014dac <sys_arch_mbox_fetch>
 800b008:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b00a:	4806      	ldr	r0, [pc, #24]	; (800b024 <tcpip_timeouts_mbox_fetch+0x68>)
 800b00c:	f009 ff48 	bl	8014ea0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b016:	d102      	bne.n	800b01e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b018:	f007 f9a0 	bl	801235c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b01c:	e7d3      	b.n	800afc6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	20007f20 	.word	0x20007f20

0800b028 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b030:	4810      	ldr	r0, [pc, #64]	; (800b074 <tcpip_thread+0x4c>)
 800b032:	f009 ff35 	bl	8014ea0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b036:	4b10      	ldr	r3, [pc, #64]	; (800b078 <tcpip_thread+0x50>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d005      	beq.n	800b04a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b03e:	4b0e      	ldr	r3, [pc, #56]	; (800b078 <tcpip_thread+0x50>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a0e      	ldr	r2, [pc, #56]	; (800b07c <tcpip_thread+0x54>)
 800b044:	6812      	ldr	r2, [r2, #0]
 800b046:	4610      	mov	r0, r2
 800b048:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b04a:	f107 030c 	add.w	r3, r7, #12
 800b04e:	4619      	mov	r1, r3
 800b050:	480b      	ldr	r0, [pc, #44]	; (800b080 <tcpip_thread+0x58>)
 800b052:	f7ff ffb3 	bl	800afbc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d106      	bne.n	800b06a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b05c:	4b09      	ldr	r3, [pc, #36]	; (800b084 <tcpip_thread+0x5c>)
 800b05e:	2291      	movs	r2, #145	; 0x91
 800b060:	4909      	ldr	r1, [pc, #36]	; (800b088 <tcpip_thread+0x60>)
 800b062:	480a      	ldr	r0, [pc, #40]	; (800b08c <tcpip_thread+0x64>)
 800b064:	f00a fa60 	bl	8015528 <printf>
      continue;
 800b068:	e003      	b.n	800b072 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 f80f 	bl	800b090 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b072:	e7ea      	b.n	800b04a <tcpip_thread+0x22>
 800b074:	20007f20 	.word	0x20007f20
 800b078:	20004a4c 	.word	0x20004a4c
 800b07c:	20004a50 	.word	0x20004a50
 800b080:	20004a54 	.word	0x20004a54
 800b084:	0801cc7c 	.word	0x0801cc7c
 800b088:	0801ccac 	.word	0x0801ccac
 800b08c:	0801cccc 	.word	0x0801cccc

0800b090 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d026      	beq.n	800b0ee <tcpip_thread_handle_msg+0x5e>
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	dc2b      	bgt.n	800b0fc <tcpip_thread_handle_msg+0x6c>
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <tcpip_thread_handle_msg+0x1e>
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d015      	beq.n	800b0d8 <tcpip_thread_handle_msg+0x48>
 800b0ac:	e026      	b.n	800b0fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	6850      	ldr	r0, [r2, #4]
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	6892      	ldr	r2, [r2, #8]
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	4798      	blx	r3
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d004      	beq.n	800b0ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 fc4d 	bl	800c968 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	2009      	movs	r0, #9
 800b0d2:	f000 fe1d 	bl	800bd10 <memp_free>
      break;
 800b0d6:	e018      	b.n	800b10a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	6892      	ldr	r2, [r2, #8]
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	2008      	movs	r0, #8
 800b0e8:	f000 fe12 	bl	800bd10 <memp_free>
      break;
 800b0ec:	e00d      	b.n	800b10a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	6892      	ldr	r2, [r2, #8]
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	4798      	blx	r3
      break;
 800b0fa:	e006      	b.n	800b10a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b0fc:	4b05      	ldr	r3, [pc, #20]	; (800b114 <tcpip_thread_handle_msg+0x84>)
 800b0fe:	22cf      	movs	r2, #207	; 0xcf
 800b100:	4905      	ldr	r1, [pc, #20]	; (800b118 <tcpip_thread_handle_msg+0x88>)
 800b102:	4806      	ldr	r0, [pc, #24]	; (800b11c <tcpip_thread_handle_msg+0x8c>)
 800b104:	f00a fa10 	bl	8015528 <printf>
      break;
 800b108:	bf00      	nop
  }
}
 800b10a:	bf00      	nop
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	0801cc7c 	.word	0x0801cc7c
 800b118:	0801ccac 	.word	0x0801ccac
 800b11c:	0801cccc 	.word	0x0801cccc

0800b120 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b12c:	481a      	ldr	r0, [pc, #104]	; (800b198 <tcpip_inpkt+0x78>)
 800b12e:	f009 fe7c 	bl	8014e2a <sys_mbox_valid>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d105      	bne.n	800b144 <tcpip_inpkt+0x24>
 800b138:	4b18      	ldr	r3, [pc, #96]	; (800b19c <tcpip_inpkt+0x7c>)
 800b13a:	22fc      	movs	r2, #252	; 0xfc
 800b13c:	4918      	ldr	r1, [pc, #96]	; (800b1a0 <tcpip_inpkt+0x80>)
 800b13e:	4819      	ldr	r0, [pc, #100]	; (800b1a4 <tcpip_inpkt+0x84>)
 800b140:	f00a f9f2 	bl	8015528 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b144:	2009      	movs	r0, #9
 800b146:	f000 fd91 	bl	800bc6c <memp_malloc>
 800b14a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b152:	f04f 33ff 	mov.w	r3, #4294967295
 800b156:	e01a      	b.n	800b18e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2200      	movs	r2, #0
 800b15c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b170:	6979      	ldr	r1, [r7, #20]
 800b172:	4809      	ldr	r0, [pc, #36]	; (800b198 <tcpip_inpkt+0x78>)
 800b174:	f009 fe00 	bl	8014d78 <sys_mbox_trypost>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d006      	beq.n	800b18c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b17e:	6979      	ldr	r1, [r7, #20]
 800b180:	2009      	movs	r0, #9
 800b182:	f000 fdc5 	bl	800bd10 <memp_free>
    return ERR_MEM;
 800b186:	f04f 33ff 	mov.w	r3, #4294967295
 800b18a:	e000      	b.n	800b18e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b18c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20004a54 	.word	0x20004a54
 800b19c:	0801cc7c 	.word	0x0801cc7c
 800b1a0:	0801ccf4 	.word	0x0801ccf4
 800b1a4:	0801cccc 	.word	0x0801cccc

0800b1a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b1b8:	f003 0318 	and.w	r3, r3, #24
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d006      	beq.n	800b1ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b1c0:	4a08      	ldr	r2, [pc, #32]	; (800b1e4 <tcpip_input+0x3c>)
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7ff ffab 	bl	800b120 <tcpip_inpkt>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	e005      	b.n	800b1da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b1ce:	4a06      	ldr	r2, [pc, #24]	; (800b1e8 <tcpip_input+0x40>)
 800b1d0:	6839      	ldr	r1, [r7, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff ffa4 	bl	800b120 <tcpip_inpkt>
 800b1d8:	4603      	mov	r3, r0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	08014b89 	.word	0x08014b89
 800b1e8:	08013a9d 	.word	0x08013a9d

0800b1ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b1f6:	4819      	ldr	r0, [pc, #100]	; (800b25c <tcpip_try_callback+0x70>)
 800b1f8:	f009 fe17 	bl	8014e2a <sys_mbox_valid>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d106      	bne.n	800b210 <tcpip_try_callback+0x24>
 800b202:	4b17      	ldr	r3, [pc, #92]	; (800b260 <tcpip_try_callback+0x74>)
 800b204:	f240 125d 	movw	r2, #349	; 0x15d
 800b208:	4916      	ldr	r1, [pc, #88]	; (800b264 <tcpip_try_callback+0x78>)
 800b20a:	4817      	ldr	r0, [pc, #92]	; (800b268 <tcpip_try_callback+0x7c>)
 800b20c:	f00a f98c 	bl	8015528 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b210:	2008      	movs	r0, #8
 800b212:	f000 fd2b 	bl	800bc6c <memp_malloc>
 800b216:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d102      	bne.n	800b224 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b21e:	f04f 33ff 	mov.w	r3, #4294967295
 800b222:	e017      	b.n	800b254 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b236:	68f9      	ldr	r1, [r7, #12]
 800b238:	4808      	ldr	r0, [pc, #32]	; (800b25c <tcpip_try_callback+0x70>)
 800b23a:	f009 fd9d 	bl	8014d78 <sys_mbox_trypost>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d006      	beq.n	800b252 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b244:	68f9      	ldr	r1, [r7, #12]
 800b246:	2008      	movs	r0, #8
 800b248:	f000 fd62 	bl	800bd10 <memp_free>
    return ERR_MEM;
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295
 800b250:	e000      	b.n	800b254 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3710      	adds	r7, #16
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	20004a54 	.word	0x20004a54
 800b260:	0801cc7c 	.word	0x0801cc7c
 800b264:	0801ccf4 	.word	0x0801ccf4
 800b268:	0801cccc 	.word	0x0801cccc

0800b26c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af02      	add	r7, sp, #8
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b276:	f000 f871 	bl	800b35c <lwip_init>

  tcpip_init_done = initfunc;
 800b27a:	4a17      	ldr	r2, [pc, #92]	; (800b2d8 <tcpip_init+0x6c>)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b280:	4a16      	ldr	r2, [pc, #88]	; (800b2dc <tcpip_init+0x70>)
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b286:	2106      	movs	r1, #6
 800b288:	4815      	ldr	r0, [pc, #84]	; (800b2e0 <tcpip_init+0x74>)
 800b28a:	f009 fd53 	bl	8014d34 <sys_mbox_new>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d006      	beq.n	800b2a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b294:	4b13      	ldr	r3, [pc, #76]	; (800b2e4 <tcpip_init+0x78>)
 800b296:	f240 2261 	movw	r2, #609	; 0x261
 800b29a:	4913      	ldr	r1, [pc, #76]	; (800b2e8 <tcpip_init+0x7c>)
 800b29c:	4813      	ldr	r0, [pc, #76]	; (800b2ec <tcpip_init+0x80>)
 800b29e:	f00a f943 	bl	8015528 <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b2a2:	4813      	ldr	r0, [pc, #76]	; (800b2f0 <tcpip_init+0x84>)
 800b2a4:	f009 fde0 	bl	8014e68 <sys_mutex_new>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d006      	beq.n	800b2bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b2ae:	4b0d      	ldr	r3, [pc, #52]	; (800b2e4 <tcpip_init+0x78>)
 800b2b0:	f240 2265 	movw	r2, #613	; 0x265
 800b2b4:	490f      	ldr	r1, [pc, #60]	; (800b2f4 <tcpip_init+0x88>)
 800b2b6:	480d      	ldr	r0, [pc, #52]	; (800b2ec <tcpip_init+0x80>)
 800b2b8:	f00a f936 	bl	8015528 <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b2bc:	2300      	movs	r3, #0
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	490c      	ldr	r1, [pc, #48]	; (800b2f8 <tcpip_init+0x8c>)
 800b2c8:	480c      	ldr	r0, [pc, #48]	; (800b2fc <tcpip_init+0x90>)
 800b2ca:	f009 fe05 	bl	8014ed8 <sys_thread_new>
}
 800b2ce:	bf00      	nop
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	20004a4c 	.word	0x20004a4c
 800b2dc:	20004a50 	.word	0x20004a50
 800b2e0:	20004a54 	.word	0x20004a54
 800b2e4:	0801cc7c 	.word	0x0801cc7c
 800b2e8:	0801cd04 	.word	0x0801cd04
 800b2ec:	0801cccc 	.word	0x0801cccc
 800b2f0:	20007f20 	.word	0x20007f20
 800b2f4:	0801cd28 	.word	0x0801cd28
 800b2f8:	0800b029 	.word	0x0800b029
 800b2fc:	0801cd4c 	.word	0x0801cd4c

0800b300 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	4603      	mov	r3, r0
 800b308:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b30a:	88fb      	ldrh	r3, [r7, #6]
 800b30c:	021b      	lsls	r3, r3, #8
 800b30e:	b21a      	sxth	r2, r3
 800b310:	88fb      	ldrh	r3, [r7, #6]
 800b312:	0a1b      	lsrs	r3, r3, #8
 800b314:	b29b      	uxth	r3, r3
 800b316:	b21b      	sxth	r3, r3
 800b318:	4313      	orrs	r3, r2
 800b31a:	b21b      	sxth	r3, r3
 800b31c:	b29b      	uxth	r3, r3
}
 800b31e:	4618      	mov	r0, r3
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	061a      	lsls	r2, r3, #24
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	021b      	lsls	r3, r3, #8
 800b33a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b33e:	431a      	orrs	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	0a1b      	lsrs	r3, r3, #8
 800b344:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b348:	431a      	orrs	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	0e1b      	lsrs	r3, r3, #24
 800b34e:	4313      	orrs	r3, r2
}
 800b350:	4618      	mov	r0, r3
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b366:	f009 fd71 	bl	8014e4c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b36a:	f000 f8d5 	bl	800b518 <mem_init>
  memp_init();
 800b36e:	f000 fc31 	bl	800bbd4 <memp_init>
  pbuf_init();
  netif_init();
 800b372:	f000 fcf7 	bl	800bd64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b376:	f007 f863 	bl	8012440 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b37a:	f001 fd8f 	bl	800ce9c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b37e:	f006 ffa5 	bl	80122cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b382:	bf00      	nop
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	4603      	mov	r3, r0
 800b394:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b396:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <ptr_to_mem+0x20>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	88fb      	ldrh	r3, [r7, #6]
 800b39c:	4413      	add	r3, r2
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	20004a58 	.word	0x20004a58

0800b3b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b3b8:	4b05      	ldr	r3, [pc, #20]	; (800b3d0 <mem_to_ptr+0x20>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	b29b      	uxth	r3, r3
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	370c      	adds	r7, #12
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	20004a58 	.word	0x20004a58

0800b3d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b3d4:	b590      	push	{r4, r7, lr}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b3dc:	4b45      	ldr	r3, [pc, #276]	; (800b4f4 <plug_holes+0x120>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d206      	bcs.n	800b3f4 <plug_holes+0x20>
 800b3e6:	4b44      	ldr	r3, [pc, #272]	; (800b4f8 <plug_holes+0x124>)
 800b3e8:	f240 12df 	movw	r2, #479	; 0x1df
 800b3ec:	4943      	ldr	r1, [pc, #268]	; (800b4fc <plug_holes+0x128>)
 800b3ee:	4844      	ldr	r0, [pc, #272]	; (800b500 <plug_holes+0x12c>)
 800b3f0:	f00a f89a 	bl	8015528 <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b3f4:	4b43      	ldr	r3, [pc, #268]	; (800b504 <plug_holes+0x130>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d306      	bcc.n	800b40c <plug_holes+0x38>
 800b3fe:	4b3e      	ldr	r3, [pc, #248]	; (800b4f8 <plug_holes+0x124>)
 800b400:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b404:	4940      	ldr	r1, [pc, #256]	; (800b508 <plug_holes+0x134>)
 800b406:	483e      	ldr	r0, [pc, #248]	; (800b500 <plug_holes+0x12c>)
 800b408:	f00a f88e 	bl	8015528 <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	791b      	ldrb	r3, [r3, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d006      	beq.n	800b422 <plug_holes+0x4e>
 800b414:	4b38      	ldr	r3, [pc, #224]	; (800b4f8 <plug_holes+0x124>)
 800b416:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b41a:	493c      	ldr	r1, [pc, #240]	; (800b50c <plug_holes+0x138>)
 800b41c:	4838      	ldr	r0, [pc, #224]	; (800b500 <plug_holes+0x12c>)
 800b41e:	f00a f883 	bl	8015528 <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b42a:	d906      	bls.n	800b43a <plug_holes+0x66>
 800b42c:	4b32      	ldr	r3, [pc, #200]	; (800b4f8 <plug_holes+0x124>)
 800b42e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b432:	4937      	ldr	r1, [pc, #220]	; (800b510 <plug_holes+0x13c>)
 800b434:	4832      	ldr	r0, [pc, #200]	; (800b500 <plug_holes+0x12c>)
 800b436:	f00a f877 	bl	8015528 <printf>

  nmem = ptr_to_mem(mem->next);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	881b      	ldrh	r3, [r3, #0]
 800b43e:	4618      	mov	r0, r3
 800b440:	f7ff ffa4 	bl	800b38c <ptr_to_mem>
 800b444:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d024      	beq.n	800b498 <plug_holes+0xc4>
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	791b      	ldrb	r3, [r3, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d120      	bne.n	800b498 <plug_holes+0xc4>
 800b456:	4b2b      	ldr	r3, [pc, #172]	; (800b504 <plug_holes+0x130>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d01b      	beq.n	800b498 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b460:	4b2c      	ldr	r3, [pc, #176]	; (800b514 <plug_holes+0x140>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	429a      	cmp	r2, r3
 800b468:	d102      	bne.n	800b470 <plug_holes+0x9c>
      lfree = mem;
 800b46a:	4a2a      	ldr	r2, [pc, #168]	; (800b514 <plug_holes+0x140>)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	881a      	ldrh	r2, [r3, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b480:	d00a      	beq.n	800b498 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	4618      	mov	r0, r3
 800b488:	f7ff ff80 	bl	800b38c <ptr_to_mem>
 800b48c:	4604      	mov	r4, r0
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7ff ff8e 	bl	800b3b0 <mem_to_ptr>
 800b494:	4603      	mov	r3, r0
 800b496:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	885b      	ldrh	r3, [r3, #2]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7ff ff75 	bl	800b38c <ptr_to_mem>
 800b4a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d01f      	beq.n	800b4ec <plug_holes+0x118>
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	791b      	ldrb	r3, [r3, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d11b      	bne.n	800b4ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b4b4:	4b17      	ldr	r3, [pc, #92]	; (800b514 <plug_holes+0x140>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d102      	bne.n	800b4c4 <plug_holes+0xf0>
      lfree = pmem;
 800b4be:	4a15      	ldr	r2, [pc, #84]	; (800b514 <plug_holes+0x140>)
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	881a      	ldrh	r2, [r3, #0]
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	881b      	ldrh	r3, [r3, #0]
 800b4d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4d4:	d00a      	beq.n	800b4ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7ff ff56 	bl	800b38c <ptr_to_mem>
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	68b8      	ldr	r0, [r7, #8]
 800b4e4:	f7ff ff64 	bl	800b3b0 <mem_to_ptr>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b4ec:	bf00      	nop
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd90      	pop	{r4, r7, pc}
 800b4f4:	20004a58 	.word	0x20004a58
 800b4f8:	0801cd5c 	.word	0x0801cd5c
 800b4fc:	0801cd8c 	.word	0x0801cd8c
 800b500:	0801cda4 	.word	0x0801cda4
 800b504:	20004a5c 	.word	0x20004a5c
 800b508:	0801cdcc 	.word	0x0801cdcc
 800b50c:	0801cde8 	.word	0x0801cde8
 800b510:	0801ce04 	.word	0x0801ce04
 800b514:	20004a64 	.word	0x20004a64

0800b518 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b51e:	4b1f      	ldr	r3, [pc, #124]	; (800b59c <mem_init+0x84>)
 800b520:	3303      	adds	r3, #3
 800b522:	f023 0303 	bic.w	r3, r3, #3
 800b526:	461a      	mov	r2, r3
 800b528:	4b1d      	ldr	r3, [pc, #116]	; (800b5a0 <mem_init+0x88>)
 800b52a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b52c:	4b1c      	ldr	r3, [pc, #112]	; (800b5a0 <mem_init+0x88>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b538:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b546:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b54a:	f7ff ff1f 	bl	800b38c <ptr_to_mem>
 800b54e:	4603      	mov	r3, r0
 800b550:	4a14      	ldr	r2, [pc, #80]	; (800b5a4 <mem_init+0x8c>)
 800b552:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b554:	4b13      	ldr	r3, [pc, #76]	; (800b5a4 <mem_init+0x8c>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2201      	movs	r2, #1
 800b55a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b55c:	4b11      	ldr	r3, [pc, #68]	; (800b5a4 <mem_init+0x8c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b564:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b566:	4b0f      	ldr	r3, [pc, #60]	; (800b5a4 <mem_init+0x8c>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b56e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b570:	4b0b      	ldr	r3, [pc, #44]	; (800b5a0 <mem_init+0x88>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a0c      	ldr	r2, [pc, #48]	; (800b5a8 <mem_init+0x90>)
 800b576:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b578:	480c      	ldr	r0, [pc, #48]	; (800b5ac <mem_init+0x94>)
 800b57a:	f009 fc75 	bl	8014e68 <sys_mutex_new>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d006      	beq.n	800b592 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b584:	4b0a      	ldr	r3, [pc, #40]	; (800b5b0 <mem_init+0x98>)
 800b586:	f240 221f 	movw	r2, #543	; 0x21f
 800b58a:	490a      	ldr	r1, [pc, #40]	; (800b5b4 <mem_init+0x9c>)
 800b58c:	480a      	ldr	r0, [pc, #40]	; (800b5b8 <mem_init+0xa0>)
 800b58e:	f009 ffcb 	bl	8015528 <printf>
  }
}
 800b592:	bf00      	nop
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	20007f3c 	.word	0x20007f3c
 800b5a0:	20004a58 	.word	0x20004a58
 800b5a4:	20004a5c 	.word	0x20004a5c
 800b5a8:	20004a64 	.word	0x20004a64
 800b5ac:	20004a60 	.word	0x20004a60
 800b5b0:	0801cd5c 	.word	0x0801cd5c
 800b5b4:	0801ce30 	.word	0x0801ce30
 800b5b8:	0801cda4 	.word	0x0801cda4

0800b5bc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff fef3 	bl	800b3b0 <mem_to_ptr>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	881b      	ldrh	r3, [r3, #0]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff feda 	bl	800b38c <ptr_to_mem>
 800b5d8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	885b      	ldrh	r3, [r3, #2]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7ff fed4 	bl	800b38c <ptr_to_mem>
 800b5e4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	881b      	ldrh	r3, [r3, #0]
 800b5ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b5ee:	d818      	bhi.n	800b622 <mem_link_valid+0x66>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	885b      	ldrh	r3, [r3, #2]
 800b5f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b5f8:	d813      	bhi.n	800b622 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b5fe:	8afa      	ldrh	r2, [r7, #22]
 800b600:	429a      	cmp	r2, r3
 800b602:	d004      	beq.n	800b60e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	8afa      	ldrh	r2, [r7, #22]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d109      	bne.n	800b622 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b60e:	4b08      	ldr	r3, [pc, #32]	; (800b630 <mem_link_valid+0x74>)
 800b610:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	429a      	cmp	r2, r3
 800b616:	d006      	beq.n	800b626 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	885b      	ldrh	r3, [r3, #2]
 800b61c:	8afa      	ldrh	r2, [r7, #22]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d001      	beq.n	800b626 <mem_link_valid+0x6a>
    return 0;
 800b622:	2300      	movs	r3, #0
 800b624:	e000      	b.n	800b628 <mem_link_valid+0x6c>
  }
  return 1;
 800b626:	2301      	movs	r3, #1
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	20004a5c 	.word	0x20004a5c

0800b634 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d070      	beq.n	800b724 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f003 0303 	and.w	r3, r3, #3
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00d      	beq.n	800b668 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b64c:	4b37      	ldr	r3, [pc, #220]	; (800b72c <mem_free+0xf8>)
 800b64e:	f240 2273 	movw	r2, #627	; 0x273
 800b652:	4937      	ldr	r1, [pc, #220]	; (800b730 <mem_free+0xfc>)
 800b654:	4837      	ldr	r0, [pc, #220]	; (800b734 <mem_free+0x100>)
 800b656:	f009 ff67 	bl	8015528 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b65a:	f009 fc63 	bl	8014f24 <sys_arch_protect>
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f009 fc6d 	bl	8014f40 <sys_arch_unprotect>
    return;
 800b666:	e05e      	b.n	800b726 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3b08      	subs	r3, #8
 800b66c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b66e:	4b32      	ldr	r3, [pc, #200]	; (800b738 <mem_free+0x104>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	69fa      	ldr	r2, [r7, #28]
 800b674:	429a      	cmp	r2, r3
 800b676:	d306      	bcc.n	800b686 <mem_free+0x52>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f103 020c 	add.w	r2, r3, #12
 800b67e:	4b2f      	ldr	r3, [pc, #188]	; (800b73c <mem_free+0x108>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	429a      	cmp	r2, r3
 800b684:	d90d      	bls.n	800b6a2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b686:	4b29      	ldr	r3, [pc, #164]	; (800b72c <mem_free+0xf8>)
 800b688:	f240 227f 	movw	r2, #639	; 0x27f
 800b68c:	492c      	ldr	r1, [pc, #176]	; (800b740 <mem_free+0x10c>)
 800b68e:	4829      	ldr	r0, [pc, #164]	; (800b734 <mem_free+0x100>)
 800b690:	f009 ff4a 	bl	8015528 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b694:	f009 fc46 	bl	8014f24 <sys_arch_protect>
 800b698:	6138      	str	r0, [r7, #16]
 800b69a:	6938      	ldr	r0, [r7, #16]
 800b69c:	f009 fc50 	bl	8014f40 <sys_arch_unprotect>
    return;
 800b6a0:	e041      	b.n	800b726 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b6a2:	4828      	ldr	r0, [pc, #160]	; (800b744 <mem_free+0x110>)
 800b6a4:	f009 fbfc 	bl	8014ea0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	791b      	ldrb	r3, [r3, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d110      	bne.n	800b6d2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b6b0:	4b1e      	ldr	r3, [pc, #120]	; (800b72c <mem_free+0xf8>)
 800b6b2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b6b6:	4924      	ldr	r1, [pc, #144]	; (800b748 <mem_free+0x114>)
 800b6b8:	481e      	ldr	r0, [pc, #120]	; (800b734 <mem_free+0x100>)
 800b6ba:	f009 ff35 	bl	8015528 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800b6be:	4821      	ldr	r0, [pc, #132]	; (800b744 <mem_free+0x110>)
 800b6c0:	f009 fbfd 	bl	8014ebe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b6c4:	f009 fc2e 	bl	8014f24 <sys_arch_protect>
 800b6c8:	6178      	str	r0, [r7, #20]
 800b6ca:	6978      	ldr	r0, [r7, #20]
 800b6cc:	f009 fc38 	bl	8014f40 <sys_arch_unprotect>
    return;
 800b6d0:	e029      	b.n	800b726 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b6d2:	69f8      	ldr	r0, [r7, #28]
 800b6d4:	f7ff ff72 	bl	800b5bc <mem_link_valid>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d110      	bne.n	800b700 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b6de:	4b13      	ldr	r3, [pc, #76]	; (800b72c <mem_free+0xf8>)
 800b6e0:	f240 2295 	movw	r2, #661	; 0x295
 800b6e4:	4919      	ldr	r1, [pc, #100]	; (800b74c <mem_free+0x118>)
 800b6e6:	4813      	ldr	r0, [pc, #76]	; (800b734 <mem_free+0x100>)
 800b6e8:	f009 ff1e 	bl	8015528 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800b6ec:	4815      	ldr	r0, [pc, #84]	; (800b744 <mem_free+0x110>)
 800b6ee:	f009 fbe6 	bl	8014ebe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b6f2:	f009 fc17 	bl	8014f24 <sys_arch_protect>
 800b6f6:	61b8      	str	r0, [r7, #24]
 800b6f8:	69b8      	ldr	r0, [r7, #24]
 800b6fa:	f009 fc21 	bl	8014f40 <sys_arch_unprotect>
    return;
 800b6fe:	e012      	b.n	800b726 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	2200      	movs	r2, #0
 800b704:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b706:	4b12      	ldr	r3, [pc, #72]	; (800b750 <mem_free+0x11c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	69fa      	ldr	r2, [r7, #28]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d202      	bcs.n	800b716 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b710:	4a0f      	ldr	r2, [pc, #60]	; (800b750 <mem_free+0x11c>)
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b716:	69f8      	ldr	r0, [r7, #28]
 800b718:	f7ff fe5c 	bl	800b3d4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b71c:	4809      	ldr	r0, [pc, #36]	; (800b744 <mem_free+0x110>)
 800b71e:	f009 fbce 	bl	8014ebe <sys_mutex_unlock>
 800b722:	e000      	b.n	800b726 <mem_free+0xf2>
    return;
 800b724:	bf00      	nop
}
 800b726:	3720      	adds	r7, #32
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	0801cd5c 	.word	0x0801cd5c
 800b730:	0801ce4c 	.word	0x0801ce4c
 800b734:	0801cda4 	.word	0x0801cda4
 800b738:	20004a58 	.word	0x20004a58
 800b73c:	20004a5c 	.word	0x20004a5c
 800b740:	0801ce70 	.word	0x0801ce70
 800b744:	20004a60 	.word	0x20004a60
 800b748:	0801ce8c 	.word	0x0801ce8c
 800b74c:	0801ceb4 	.word	0x0801ceb4
 800b750:	20004a64 	.word	0x20004a64

0800b754 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b760:	887b      	ldrh	r3, [r7, #2]
 800b762:	3303      	adds	r3, #3
 800b764:	b29b      	uxth	r3, r3
 800b766:	f023 0303 	bic.w	r3, r3, #3
 800b76a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b76c:	8bfb      	ldrh	r3, [r7, #30]
 800b76e:	2b0b      	cmp	r3, #11
 800b770:	d801      	bhi.n	800b776 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b772:	230c      	movs	r3, #12
 800b774:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b776:	8bfb      	ldrh	r3, [r7, #30]
 800b778:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b77c:	d803      	bhi.n	800b786 <mem_trim+0x32>
 800b77e:	8bfa      	ldrh	r2, [r7, #30]
 800b780:	887b      	ldrh	r3, [r7, #2]
 800b782:	429a      	cmp	r2, r3
 800b784:	d201      	bcs.n	800b78a <mem_trim+0x36>
    return NULL;
 800b786:	2300      	movs	r3, #0
 800b788:	e0d8      	b.n	800b93c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b78a:	4b6e      	ldr	r3, [pc, #440]	; (800b944 <mem_trim+0x1f0>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	429a      	cmp	r2, r3
 800b792:	d304      	bcc.n	800b79e <mem_trim+0x4a>
 800b794:	4b6c      	ldr	r3, [pc, #432]	; (800b948 <mem_trim+0x1f4>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d306      	bcc.n	800b7ac <mem_trim+0x58>
 800b79e:	4b6b      	ldr	r3, [pc, #428]	; (800b94c <mem_trim+0x1f8>)
 800b7a0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b7a4:	496a      	ldr	r1, [pc, #424]	; (800b950 <mem_trim+0x1fc>)
 800b7a6:	486b      	ldr	r0, [pc, #428]	; (800b954 <mem_trim+0x200>)
 800b7a8:	f009 febe 	bl	8015528 <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b7ac:	4b65      	ldr	r3, [pc, #404]	; (800b944 <mem_trim+0x1f0>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d304      	bcc.n	800b7c0 <mem_trim+0x6c>
 800b7b6:	4b64      	ldr	r3, [pc, #400]	; (800b948 <mem_trim+0x1f4>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d307      	bcc.n	800b7d0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b7c0:	f009 fbb0 	bl	8014f24 <sys_arch_protect>
 800b7c4:	60b8      	str	r0, [r7, #8]
 800b7c6:	68b8      	ldr	r0, [r7, #8]
 800b7c8:	f009 fbba 	bl	8014f40 <sys_arch_unprotect>
    return rmem;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	e0b5      	b.n	800b93c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3b08      	subs	r3, #8
 800b7d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b7d6:	69b8      	ldr	r0, [r7, #24]
 800b7d8:	f7ff fdea 	bl	800b3b0 <mem_to_ptr>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	881a      	ldrh	r2, [r3, #0]
 800b7e4:	8afb      	ldrh	r3, [r7, #22]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	3b08      	subs	r3, #8
 800b7ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b7ee:	8bfa      	ldrh	r2, [r7, #30]
 800b7f0:	8abb      	ldrh	r3, [r7, #20]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d906      	bls.n	800b804 <mem_trim+0xb0>
 800b7f6:	4b55      	ldr	r3, [pc, #340]	; (800b94c <mem_trim+0x1f8>)
 800b7f8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b7fc:	4956      	ldr	r1, [pc, #344]	; (800b958 <mem_trim+0x204>)
 800b7fe:	4855      	ldr	r0, [pc, #340]	; (800b954 <mem_trim+0x200>)
 800b800:	f009 fe92 	bl	8015528 <printf>
  if (newsize > size) {
 800b804:	8bfa      	ldrh	r2, [r7, #30]
 800b806:	8abb      	ldrh	r3, [r7, #20]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d901      	bls.n	800b810 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b80c:	2300      	movs	r3, #0
 800b80e:	e095      	b.n	800b93c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b810:	8bfa      	ldrh	r2, [r7, #30]
 800b812:	8abb      	ldrh	r3, [r7, #20]
 800b814:	429a      	cmp	r2, r3
 800b816:	d101      	bne.n	800b81c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	e08f      	b.n	800b93c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b81c:	484f      	ldr	r0, [pc, #316]	; (800b95c <mem_trim+0x208>)
 800b81e:	f009 fb3f 	bl	8014ea0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	881b      	ldrh	r3, [r3, #0]
 800b826:	4618      	mov	r0, r3
 800b828:	f7ff fdb0 	bl	800b38c <ptr_to_mem>
 800b82c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	791b      	ldrb	r3, [r3, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d13f      	bne.n	800b8b6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	881b      	ldrh	r3, [r3, #0]
 800b83a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b83e:	d106      	bne.n	800b84e <mem_trim+0xfa>
 800b840:	4b42      	ldr	r3, [pc, #264]	; (800b94c <mem_trim+0x1f8>)
 800b842:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b846:	4946      	ldr	r1, [pc, #280]	; (800b960 <mem_trim+0x20c>)
 800b848:	4842      	ldr	r0, [pc, #264]	; (800b954 <mem_trim+0x200>)
 800b84a:	f009 fe6d 	bl	8015528 <printf>
    /* remember the old next pointer */
    next = mem2->next;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	881b      	ldrh	r3, [r3, #0]
 800b852:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b854:	8afa      	ldrh	r2, [r7, #22]
 800b856:	8bfb      	ldrh	r3, [r7, #30]
 800b858:	4413      	add	r3, r2
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	3308      	adds	r3, #8
 800b85e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b860:	4b40      	ldr	r3, [pc, #256]	; (800b964 <mem_trim+0x210>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	429a      	cmp	r2, r3
 800b868:	d106      	bne.n	800b878 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b86a:	89fb      	ldrh	r3, [r7, #14]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7ff fd8d 	bl	800b38c <ptr_to_mem>
 800b872:	4603      	mov	r3, r0
 800b874:	4a3b      	ldr	r2, [pc, #236]	; (800b964 <mem_trim+0x210>)
 800b876:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b878:	89fb      	ldrh	r3, [r7, #14]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7ff fd86 	bl	800b38c <ptr_to_mem>
 800b880:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	2200      	movs	r2, #0
 800b886:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	89ba      	ldrh	r2, [r7, #12]
 800b88c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	8afa      	ldrh	r2, [r7, #22]
 800b892:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	89fa      	ldrh	r2, [r7, #14]
 800b898:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8a2:	d047      	beq.n	800b934 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7ff fd6f 	bl	800b38c <ptr_to_mem>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	89fb      	ldrh	r3, [r7, #14]
 800b8b2:	8053      	strh	r3, [r2, #2]
 800b8b4:	e03e      	b.n	800b934 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b8b6:	8bfb      	ldrh	r3, [r7, #30]
 800b8b8:	f103 0214 	add.w	r2, r3, #20
 800b8bc:	8abb      	ldrh	r3, [r7, #20]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d838      	bhi.n	800b934 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b8c2:	8afa      	ldrh	r2, [r7, #22]
 800b8c4:	8bfb      	ldrh	r3, [r7, #30]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	881b      	ldrh	r3, [r3, #0]
 800b8d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8d6:	d106      	bne.n	800b8e6 <mem_trim+0x192>
 800b8d8:	4b1c      	ldr	r3, [pc, #112]	; (800b94c <mem_trim+0x1f8>)
 800b8da:	f240 3216 	movw	r2, #790	; 0x316
 800b8de:	4920      	ldr	r1, [pc, #128]	; (800b960 <mem_trim+0x20c>)
 800b8e0:	481c      	ldr	r0, [pc, #112]	; (800b954 <mem_trim+0x200>)
 800b8e2:	f009 fe21 	bl	8015528 <printf>
    mem2 = ptr_to_mem(ptr2);
 800b8e6:	89fb      	ldrh	r3, [r7, #14]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff fd4f 	bl	800b38c <ptr_to_mem>
 800b8ee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b8f0:	4b1c      	ldr	r3, [pc, #112]	; (800b964 <mem_trim+0x210>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d202      	bcs.n	800b900 <mem_trim+0x1ac>
      lfree = mem2;
 800b8fa:	4a1a      	ldr	r2, [pc, #104]	; (800b964 <mem_trim+0x210>)
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	2200      	movs	r2, #0
 800b904:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	881a      	ldrh	r2, [r3, #0]
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	8afa      	ldrh	r2, [r7, #22]
 800b912:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	89fa      	ldrh	r2, [r7, #14]
 800b918:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b922:	d007      	beq.n	800b934 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	881b      	ldrh	r3, [r3, #0]
 800b928:	4618      	mov	r0, r3
 800b92a:	f7ff fd2f 	bl	800b38c <ptr_to_mem>
 800b92e:	4602      	mov	r2, r0
 800b930:	89fb      	ldrh	r3, [r7, #14]
 800b932:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b934:	4809      	ldr	r0, [pc, #36]	; (800b95c <mem_trim+0x208>)
 800b936:	f009 fac2 	bl	8014ebe <sys_mutex_unlock>
  return rmem;
 800b93a:	687b      	ldr	r3, [r7, #4]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3720      	adds	r7, #32
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	20004a58 	.word	0x20004a58
 800b948:	20004a5c 	.word	0x20004a5c
 800b94c:	0801cd5c 	.word	0x0801cd5c
 800b950:	0801cee8 	.word	0x0801cee8
 800b954:	0801cda4 	.word	0x0801cda4
 800b958:	0801cf00 	.word	0x0801cf00
 800b95c:	20004a60 	.word	0x20004a60
 800b960:	0801cf20 	.word	0x0801cf20
 800b964:	20004a64 	.word	0x20004a64

0800b968 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b088      	sub	sp, #32
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	4603      	mov	r3, r0
 800b970:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b972:	88fb      	ldrh	r3, [r7, #6]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d101      	bne.n	800b97c <mem_malloc+0x14>
    return NULL;
 800b978:	2300      	movs	r3, #0
 800b97a:	e0e2      	b.n	800bb42 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b97c:	88fb      	ldrh	r3, [r7, #6]
 800b97e:	3303      	adds	r3, #3
 800b980:	b29b      	uxth	r3, r3
 800b982:	f023 0303 	bic.w	r3, r3, #3
 800b986:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b988:	8bbb      	ldrh	r3, [r7, #28]
 800b98a:	2b0b      	cmp	r3, #11
 800b98c:	d801      	bhi.n	800b992 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b98e:	230c      	movs	r3, #12
 800b990:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b992:	8bbb      	ldrh	r3, [r7, #28]
 800b994:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b998:	d803      	bhi.n	800b9a2 <mem_malloc+0x3a>
 800b99a:	8bba      	ldrh	r2, [r7, #28]
 800b99c:	88fb      	ldrh	r3, [r7, #6]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d201      	bcs.n	800b9a6 <mem_malloc+0x3e>
    return NULL;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	e0cd      	b.n	800bb42 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b9a6:	4869      	ldr	r0, [pc, #420]	; (800bb4c <mem_malloc+0x1e4>)
 800b9a8:	f009 fa7a 	bl	8014ea0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b9ac:	4b68      	ldr	r3, [pc, #416]	; (800bb50 <mem_malloc+0x1e8>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7ff fcfd 	bl	800b3b0 <mem_to_ptr>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	83fb      	strh	r3, [r7, #30]
 800b9ba:	e0b7      	b.n	800bb2c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b9bc:	8bfb      	ldrh	r3, [r7, #30]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff fce4 	bl	800b38c <ptr_to_mem>
 800b9c4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	791b      	ldrb	r3, [r3, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f040 80a7 	bne.w	800bb1e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	881b      	ldrh	r3, [r3, #0]
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	8bfb      	ldrh	r3, [r7, #30]
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	f1a3 0208 	sub.w	r2, r3, #8
 800b9de:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	f0c0 809c 	bcc.w	800bb1e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	8bfb      	ldrh	r3, [r7, #30]
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	f1a3 0208 	sub.w	r2, r3, #8
 800b9f4:	8bbb      	ldrh	r3, [r7, #28]
 800b9f6:	3314      	adds	r3, #20
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d333      	bcc.n	800ba64 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b9fc:	8bfa      	ldrh	r2, [r7, #30]
 800b9fe:	8bbb      	ldrh	r3, [r7, #28]
 800ba00:	4413      	add	r3, r2
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	3308      	adds	r3, #8
 800ba06:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ba08:	8a7b      	ldrh	r3, [r7, #18]
 800ba0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba0e:	d106      	bne.n	800ba1e <mem_malloc+0xb6>
 800ba10:	4b50      	ldr	r3, [pc, #320]	; (800bb54 <mem_malloc+0x1ec>)
 800ba12:	f240 3287 	movw	r2, #903	; 0x387
 800ba16:	4950      	ldr	r1, [pc, #320]	; (800bb58 <mem_malloc+0x1f0>)
 800ba18:	4850      	ldr	r0, [pc, #320]	; (800bb5c <mem_malloc+0x1f4>)
 800ba1a:	f009 fd85 	bl	8015528 <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ba1e:	8a7b      	ldrh	r3, [r7, #18]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7ff fcb3 	bl	800b38c <ptr_to_mem>
 800ba26:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	881a      	ldrh	r2, [r3, #0]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	8bfa      	ldrh	r2, [r7, #30]
 800ba3a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	8a7a      	ldrh	r2, [r7, #18]
 800ba40:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	2201      	movs	r2, #1
 800ba46:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba50:	d00b      	beq.n	800ba6a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	881b      	ldrh	r3, [r3, #0]
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7ff fc98 	bl	800b38c <ptr_to_mem>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	8a7b      	ldrh	r3, [r7, #18]
 800ba60:	8053      	strh	r3, [r2, #2]
 800ba62:	e002      	b.n	800ba6a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	2201      	movs	r2, #1
 800ba68:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ba6a:	4b39      	ldr	r3, [pc, #228]	; (800bb50 <mem_malloc+0x1e8>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d127      	bne.n	800bac4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ba74:	4b36      	ldr	r3, [pc, #216]	; (800bb50 <mem_malloc+0x1e8>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ba7a:	e005      	b.n	800ba88 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	881b      	ldrh	r3, [r3, #0]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7ff fc83 	bl	800b38c <ptr_to_mem>
 800ba86:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	791b      	ldrb	r3, [r3, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d004      	beq.n	800ba9a <mem_malloc+0x132>
 800ba90:	4b33      	ldr	r3, [pc, #204]	; (800bb60 <mem_malloc+0x1f8>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	69ba      	ldr	r2, [r7, #24]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d1f0      	bne.n	800ba7c <mem_malloc+0x114>
          }
          lfree = cur;
 800ba9a:	4a2d      	ldr	r2, [pc, #180]	; (800bb50 <mem_malloc+0x1e8>)
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800baa0:	4b2b      	ldr	r3, [pc, #172]	; (800bb50 <mem_malloc+0x1e8>)
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	4b2e      	ldr	r3, [pc, #184]	; (800bb60 <mem_malloc+0x1f8>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d00b      	beq.n	800bac4 <mem_malloc+0x15c>
 800baac:	4b28      	ldr	r3, [pc, #160]	; (800bb50 <mem_malloc+0x1e8>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	791b      	ldrb	r3, [r3, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d006      	beq.n	800bac4 <mem_malloc+0x15c>
 800bab6:	4b27      	ldr	r3, [pc, #156]	; (800bb54 <mem_malloc+0x1ec>)
 800bab8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800babc:	4929      	ldr	r1, [pc, #164]	; (800bb64 <mem_malloc+0x1fc>)
 800babe:	4827      	ldr	r0, [pc, #156]	; (800bb5c <mem_malloc+0x1f4>)
 800bac0:	f009 fd32 	bl	8015528 <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bac4:	4821      	ldr	r0, [pc, #132]	; (800bb4c <mem_malloc+0x1e4>)
 800bac6:	f009 f9fa 	bl	8014ebe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800baca:	8bba      	ldrh	r2, [r7, #28]
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	4413      	add	r3, r2
 800bad0:	3308      	adds	r3, #8
 800bad2:	4a23      	ldr	r2, [pc, #140]	; (800bb60 <mem_malloc+0x1f8>)
 800bad4:	6812      	ldr	r2, [r2, #0]
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d906      	bls.n	800bae8 <mem_malloc+0x180>
 800bada:	4b1e      	ldr	r3, [pc, #120]	; (800bb54 <mem_malloc+0x1ec>)
 800badc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bae0:	4921      	ldr	r1, [pc, #132]	; (800bb68 <mem_malloc+0x200>)
 800bae2:	481e      	ldr	r0, [pc, #120]	; (800bb5c <mem_malloc+0x1f4>)
 800bae4:	f009 fd20 	bl	8015528 <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	f003 0303 	and.w	r3, r3, #3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d006      	beq.n	800bb00 <mem_malloc+0x198>
 800baf2:	4b18      	ldr	r3, [pc, #96]	; (800bb54 <mem_malloc+0x1ec>)
 800baf4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800baf8:	491c      	ldr	r1, [pc, #112]	; (800bb6c <mem_malloc+0x204>)
 800bafa:	4818      	ldr	r0, [pc, #96]	; (800bb5c <mem_malloc+0x1f4>)
 800bafc:	f009 fd14 	bl	8015528 <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	f003 0303 	and.w	r3, r3, #3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d006      	beq.n	800bb18 <mem_malloc+0x1b0>
 800bb0a:	4b12      	ldr	r3, [pc, #72]	; (800bb54 <mem_malloc+0x1ec>)
 800bb0c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bb10:	4917      	ldr	r1, [pc, #92]	; (800bb70 <mem_malloc+0x208>)
 800bb12:	4812      	ldr	r0, [pc, #72]	; (800bb5c <mem_malloc+0x1f4>)
 800bb14:	f009 fd08 	bl	8015528 <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	3308      	adds	r3, #8
 800bb1c:	e011      	b.n	800bb42 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bb1e:	8bfb      	ldrh	r3, [r7, #30]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7ff fc33 	bl	800b38c <ptr_to_mem>
 800bb26:	4603      	mov	r3, r0
 800bb28:	881b      	ldrh	r3, [r3, #0]
 800bb2a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bb2c:	8bfa      	ldrh	r2, [r7, #30]
 800bb2e:	8bbb      	ldrh	r3, [r7, #28]
 800bb30:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bb34:	429a      	cmp	r2, r3
 800bb36:	f4ff af41 	bcc.w	800b9bc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bb3a:	4804      	ldr	r0, [pc, #16]	; (800bb4c <mem_malloc+0x1e4>)
 800bb3c:	f009 f9bf 	bl	8014ebe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3720      	adds	r7, #32
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20004a60 	.word	0x20004a60
 800bb50:	20004a64 	.word	0x20004a64
 800bb54:	0801cd5c 	.word	0x0801cd5c
 800bb58:	0801cf20 	.word	0x0801cf20
 800bb5c:	0801cda4 	.word	0x0801cda4
 800bb60:	20004a5c 	.word	0x20004a5c
 800bb64:	0801cf34 	.word	0x0801cf34
 800bb68:	0801cf50 	.word	0x0801cf50
 800bb6c:	0801cf80 	.word	0x0801cf80
 800bb70:	0801cfb0 	.word	0x0801cfb0

0800bb74 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	2200      	movs	r2, #0
 800bb82:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	3303      	adds	r3, #3
 800bb8a:	f023 0303 	bic.w	r3, r3, #3
 800bb8e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bb90:	2300      	movs	r3, #0
 800bb92:	60fb      	str	r3, [r7, #12]
 800bb94:	e011      	b.n	800bbba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	461a      	mov	r2, r3
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	60fb      	str	r3, [r7, #12]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	885b      	ldrh	r3, [r3, #2]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	dbe7      	blt.n	800bb96 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bbc6:	bf00      	nop
 800bbc8:	bf00      	nop
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bbda:	2300      	movs	r3, #0
 800bbdc:	80fb      	strh	r3, [r7, #6]
 800bbde:	e009      	b.n	800bbf4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bbe0:	88fb      	ldrh	r3, [r7, #6]
 800bbe2:	4a08      	ldr	r2, [pc, #32]	; (800bc04 <memp_init+0x30>)
 800bbe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7ff ffc3 	bl	800bb74 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	80fb      	strh	r3, [r7, #6]
 800bbf4:	88fb      	ldrh	r3, [r7, #6]
 800bbf6:	2b0c      	cmp	r3, #12
 800bbf8:	d9f2      	bls.n	800bbe0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bbfa:	bf00      	nop
 800bbfc:	bf00      	nop
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	0801f7b8 	.word	0x0801f7b8

0800bc08 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bc10:	f009 f988 	bl	8014f24 <sys_arch_protect>
 800bc14:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d015      	beq.n	800bc50 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	6812      	ldr	r2, [r2, #0]
 800bc2c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	f003 0303 	and.w	r3, r3, #3
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d006      	beq.n	800bc46 <do_memp_malloc_pool+0x3e>
 800bc38:	4b09      	ldr	r3, [pc, #36]	; (800bc60 <do_memp_malloc_pool+0x58>)
 800bc3a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800bc3e:	4909      	ldr	r1, [pc, #36]	; (800bc64 <do_memp_malloc_pool+0x5c>)
 800bc40:	4809      	ldr	r0, [pc, #36]	; (800bc68 <do_memp_malloc_pool+0x60>)
 800bc42:	f009 fc71 	bl	8015528 <printf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f009 f97a 	bl	8014f40 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	e003      	b.n	800bc58 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f009 f975 	bl	8014f40 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	0801cfd4 	.word	0x0801cfd4
 800bc64:	0801d004 	.word	0x0801d004
 800bc68:	0801d028 	.word	0x0801d028

0800bc6c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	4603      	mov	r3, r0
 800bc74:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bc76:	79fb      	ldrb	r3, [r7, #7]
 800bc78:	2b0c      	cmp	r3, #12
 800bc7a:	d908      	bls.n	800bc8e <memp_malloc+0x22>
 800bc7c:	4b0a      	ldr	r3, [pc, #40]	; (800bca8 <memp_malloc+0x3c>)
 800bc7e:	f240 1257 	movw	r2, #343	; 0x157
 800bc82:	490a      	ldr	r1, [pc, #40]	; (800bcac <memp_malloc+0x40>)
 800bc84:	480a      	ldr	r0, [pc, #40]	; (800bcb0 <memp_malloc+0x44>)
 800bc86:	f009 fc4f 	bl	8015528 <printf>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	e008      	b.n	800bca0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	4a08      	ldr	r2, [pc, #32]	; (800bcb4 <memp_malloc+0x48>)
 800bc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff ffb6 	bl	800bc08 <do_memp_malloc_pool>
 800bc9c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	0801cfd4 	.word	0x0801cfd4
 800bcac:	0801d064 	.word	0x0801d064
 800bcb0:	0801d028 	.word	0x0801d028
 800bcb4:	0801f7b8 	.word	0x0801f7b8

0800bcb8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	f003 0303 	and.w	r3, r3, #3
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d006      	beq.n	800bcda <do_memp_free_pool+0x22>
 800bccc:	4b0d      	ldr	r3, [pc, #52]	; (800bd04 <do_memp_free_pool+0x4c>)
 800bcce:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bcd2:	490d      	ldr	r1, [pc, #52]	; (800bd08 <do_memp_free_pool+0x50>)
 800bcd4:	480d      	ldr	r0, [pc, #52]	; (800bd0c <do_memp_free_pool+0x54>)
 800bcd6:	f009 fc27 	bl	8015528 <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bcde:	f009 f921 	bl	8014f24 <sys_arch_protect>
 800bce2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bcf6:	68b8      	ldr	r0, [r7, #8]
 800bcf8:	f009 f922 	bl	8014f40 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bcfc:	bf00      	nop
 800bcfe:	3710      	adds	r7, #16
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	0801cfd4 	.word	0x0801cfd4
 800bd08:	0801d084 	.word	0x0801d084
 800bd0c:	0801d028 	.word	0x0801d028

0800bd10 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	4603      	mov	r3, r0
 800bd18:	6039      	str	r1, [r7, #0]
 800bd1a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bd1c:	79fb      	ldrb	r3, [r7, #7]
 800bd1e:	2b0c      	cmp	r3, #12
 800bd20:	d907      	bls.n	800bd32 <memp_free+0x22>
 800bd22:	4b0c      	ldr	r3, [pc, #48]	; (800bd54 <memp_free+0x44>)
 800bd24:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bd28:	490b      	ldr	r1, [pc, #44]	; (800bd58 <memp_free+0x48>)
 800bd2a:	480c      	ldr	r0, [pc, #48]	; (800bd5c <memp_free+0x4c>)
 800bd2c:	f009 fbfc 	bl	8015528 <printf>
 800bd30:	e00c      	b.n	800bd4c <memp_free+0x3c>

  if (mem == NULL) {
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d008      	beq.n	800bd4a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bd38:	79fb      	ldrb	r3, [r7, #7]
 800bd3a:	4a09      	ldr	r2, [pc, #36]	; (800bd60 <memp_free+0x50>)
 800bd3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7ff ffb8 	bl	800bcb8 <do_memp_free_pool>
 800bd48:	e000      	b.n	800bd4c <memp_free+0x3c>
    return;
 800bd4a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	0801cfd4 	.word	0x0801cfd4
 800bd58:	0801d0a4 	.word	0x0801d0a4
 800bd5c:	0801d028 	.word	0x0801d028
 800bd60:	0801f7b8 	.word	0x0801f7b8

0800bd64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bd64:	b480      	push	{r7}
 800bd66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bd68:	bf00      	nop
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
	...

0800bd74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
 800bd80:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d108      	bne.n	800bd9a <netif_add+0x26>
 800bd88:	4b56      	ldr	r3, [pc, #344]	; (800bee4 <netif_add+0x170>)
 800bd8a:	f240 1227 	movw	r2, #295	; 0x127
 800bd8e:	4956      	ldr	r1, [pc, #344]	; (800bee8 <netif_add+0x174>)
 800bd90:	4856      	ldr	r0, [pc, #344]	; (800beec <netif_add+0x178>)
 800bd92:	f009 fbc9 	bl	8015528 <printf>
 800bd96:	2300      	movs	r3, #0
 800bd98:	e09f      	b.n	800beda <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d108      	bne.n	800bdb2 <netif_add+0x3e>
 800bda0:	4b50      	ldr	r3, [pc, #320]	; (800bee4 <netif_add+0x170>)
 800bda2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bda6:	4952      	ldr	r1, [pc, #328]	; (800bef0 <netif_add+0x17c>)
 800bda8:	4850      	ldr	r0, [pc, #320]	; (800beec <netif_add+0x178>)
 800bdaa:	f009 fbbd 	bl	8015528 <printf>
 800bdae:	2300      	movs	r3, #0
 800bdb0:	e093      	b.n	800beda <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bdb8:	4b4e      	ldr	r3, [pc, #312]	; (800bef4 <netif_add+0x180>)
 800bdba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bdc2:	4b4c      	ldr	r3, [pc, #304]	; (800bef4 <netif_add+0x180>)
 800bdc4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d101      	bne.n	800bdd0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bdcc:	4b49      	ldr	r3, [pc, #292]	; (800bef4 <netif_add+0x180>)
 800bdce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	4a44      	ldr	r2, [pc, #272]	; (800bef8 <netif_add+0x184>)
 800bde6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2200      	movs	r2, #0
 800bdec:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6a3a      	ldr	r2, [r7, #32]
 800bdfa:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800bdfc:	4b3f      	ldr	r3, [pc, #252]	; (800befc <netif_add+0x188>)
 800bdfe:	781a      	ldrb	r2, [r3, #0]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be0a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	68b9      	ldr	r1, [r7, #8]
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f000 f914 	bl	800c040 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	4798      	blx	r3
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d001      	beq.n	800be28 <netif_add+0xb4>
    return NULL;
 800be24:	2300      	movs	r3, #0
 800be26:	e058      	b.n	800beda <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be2e:	2bff      	cmp	r3, #255	; 0xff
 800be30:	d103      	bne.n	800be3a <netif_add+0xc6>
        netif->num = 0;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800be3e:	4b30      	ldr	r3, [pc, #192]	; (800bf00 <netif_add+0x18c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	e02b      	b.n	800be9e <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d106      	bne.n	800be5c <netif_add+0xe8>
 800be4e:	4b25      	ldr	r3, [pc, #148]	; (800bee4 <netif_add+0x170>)
 800be50:	f240 128b 	movw	r2, #395	; 0x18b
 800be54:	492b      	ldr	r1, [pc, #172]	; (800bf04 <netif_add+0x190>)
 800be56:	4825      	ldr	r0, [pc, #148]	; (800beec <netif_add+0x178>)
 800be58:	f009 fb66 	bl	8015528 <printf>
        num_netifs++;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	3301      	adds	r3, #1
 800be60:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	2bff      	cmp	r3, #255	; 0xff
 800be66:	dd06      	ble.n	800be76 <netif_add+0x102>
 800be68:	4b1e      	ldr	r3, [pc, #120]	; (800bee4 <netif_add+0x170>)
 800be6a:	f240 128d 	movw	r2, #397	; 0x18d
 800be6e:	4926      	ldr	r1, [pc, #152]	; (800bf08 <netif_add+0x194>)
 800be70:	481e      	ldr	r0, [pc, #120]	; (800beec <netif_add+0x178>)
 800be72:	f009 fb59 	bl	8015528 <printf>
        if (netif2->num == netif->num) {
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be82:	429a      	cmp	r2, r3
 800be84:	d108      	bne.n	800be98 <netif_add+0x124>
          netif->num++;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be8c:	3301      	adds	r3, #1
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800be96:	e005      	b.n	800bea4 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1d0      	bne.n	800be46 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1be      	bne.n	800be28 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800beb0:	2bfe      	cmp	r3, #254	; 0xfe
 800beb2:	d103      	bne.n	800bebc <netif_add+0x148>
    netif_num = 0;
 800beb4:	4b11      	ldr	r3, [pc, #68]	; (800befc <netif_add+0x188>)
 800beb6:	2200      	movs	r2, #0
 800beb8:	701a      	strb	r2, [r3, #0]
 800beba:	e006      	b.n	800beca <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bec2:	3301      	adds	r3, #1
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	4b0d      	ldr	r3, [pc, #52]	; (800befc <netif_add+0x188>)
 800bec8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800beca:	4b0d      	ldr	r3, [pc, #52]	; (800bf00 <netif_add+0x18c>)
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bed2:	4a0b      	ldr	r2, [pc, #44]	; (800bf00 <netif_add+0x18c>)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bed8:	68fb      	ldr	r3, [r7, #12]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	0801d0c0 	.word	0x0801d0c0
 800bee8:	0801d154 	.word	0x0801d154
 800beec:	0801d110 	.word	0x0801d110
 800bef0:	0801d170 	.word	0x0801d170
 800bef4:	0801f82c 	.word	0x0801f82c
 800bef8:	0800c231 	.word	0x0800c231
 800befc:	20004a9c 	.word	0x20004a9c
 800bf00:	2000b628 	.word	0x2000b628
 800bf04:	0801d194 	.word	0x0801d194
 800bf08:	0801d1a8 	.word	0x0801d1a8

0800bf0c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f002 fb07 	bl	800e52c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f006 fc17 	bl	8012754 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bf26:	bf00      	nop
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
	...

0800bf30 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d106      	bne.n	800bf50 <netif_do_set_ipaddr+0x20>
 800bf42:	4b1d      	ldr	r3, [pc, #116]	; (800bfb8 <netif_do_set_ipaddr+0x88>)
 800bf44:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bf48:	491c      	ldr	r1, [pc, #112]	; (800bfbc <netif_do_set_ipaddr+0x8c>)
 800bf4a:	481d      	ldr	r0, [pc, #116]	; (800bfc0 <netif_do_set_ipaddr+0x90>)
 800bf4c:	f009 faec 	bl	8015528 <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d106      	bne.n	800bf64 <netif_do_set_ipaddr+0x34>
 800bf56:	4b18      	ldr	r3, [pc, #96]	; (800bfb8 <netif_do_set_ipaddr+0x88>)
 800bf58:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bf5c:	4917      	ldr	r1, [pc, #92]	; (800bfbc <netif_do_set_ipaddr+0x8c>)
 800bf5e:	4818      	ldr	r0, [pc, #96]	; (800bfc0 <netif_do_set_ipaddr+0x90>)
 800bf60:	f009 fae2 	bl	8015528 <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d01c      	beq.n	800bfac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bf82:	f107 0314 	add.w	r3, r7, #20
 800bf86:	4619      	mov	r1, r3
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7ff ffbf 	bl	800bf0c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <netif_do_set_ipaddr+0x6a>
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	e000      	b.n	800bf9c <netif_do_set_ipaddr+0x6c>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f000 f8d2 	bl	800c14c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e000      	b.n	800bfae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	0801d0c0 	.word	0x0801d0c0
 800bfbc:	0801d1d8 	.word	0x0801d1d8
 800bfc0:	0801d110 	.word	0x0801d110

0800bfc4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d00a      	beq.n	800bff4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <netif_do_set_netmask+0x26>
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	e000      	b.n	800bfec <netif_do_set_netmask+0x28>
 800bfea:	2300      	movs	r3, #0
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bff0:	2301      	movs	r3, #1
 800bff2:	e000      	b.n	800bff6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3714      	adds	r7, #20
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr

0800c002 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c002:	b480      	push	{r7}
 800c004:	b085      	sub	sp, #20
 800c006:	af00      	add	r7, sp, #0
 800c008:	60f8      	str	r0, [r7, #12]
 800c00a:	60b9      	str	r1, [r7, #8]
 800c00c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	330c      	adds	r3, #12
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d00a      	beq.n	800c032 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d002      	beq.n	800c028 <netif_do_set_gw+0x26>
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	e000      	b.n	800c02a <netif_do_set_gw+0x28>
 800c028:	2300      	movs	r3, #0
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c02e:	2301      	movs	r3, #1
 800c030:	e000      	b.n	800c034 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b088      	sub	sp, #32
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c04e:	2300      	movs	r3, #0
 800c050:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c05c:	4b1c      	ldr	r3, [pc, #112]	; (800c0d0 <netif_set_addr+0x90>)
 800c05e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d101      	bne.n	800c06a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c066:	4b1a      	ldr	r3, [pc, #104]	; (800c0d0 <netif_set_addr+0x90>)
 800c068:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c070:	4b17      	ldr	r3, [pc, #92]	; (800c0d0 <netif_set_addr+0x90>)
 800c072:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d003      	beq.n	800c082 <netif_set_addr+0x42>
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d101      	bne.n	800c086 <netif_set_addr+0x46>
 800c082:	2301      	movs	r3, #1
 800c084:	e000      	b.n	800c088 <netif_set_addr+0x48>
 800c086:	2300      	movs	r3, #0
 800c088:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d006      	beq.n	800c09e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c090:	f107 0310 	add.w	r3, r7, #16
 800c094:	461a      	mov	r2, r3
 800c096:	68b9      	ldr	r1, [r7, #8]
 800c098:	68f8      	ldr	r0, [r7, #12]
 800c09a:	f7ff ff49 	bl	800bf30 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c09e:	69fa      	ldr	r2, [r7, #28]
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f7ff ff8e 	bl	800bfc4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c0a8:	69ba      	ldr	r2, [r7, #24]
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f7ff ffa8 	bl	800c002 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d106      	bne.n	800c0c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c0b8:	f107 0310 	add.w	r3, r7, #16
 800c0bc:	461a      	mov	r2, r3
 800c0be:	68b9      	ldr	r1, [r7, #8]
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f7ff ff35 	bl	800bf30 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c0c6:	bf00      	nop
 800c0c8:	3720      	adds	r7, #32
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	0801f82c 	.word	0x0801f82c

0800c0d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c0dc:	4a04      	ldr	r2, [pc, #16]	; (800c0f0 <netif_set_default+0x1c>)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c0e2:	bf00      	nop
 800c0e4:	370c      	adds	r7, #12
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	2000b62c 	.word	0x2000b62c

0800c0f4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d107      	bne.n	800c112 <netif_set_up+0x1e>
 800c102:	4b0f      	ldr	r3, [pc, #60]	; (800c140 <netif_set_up+0x4c>)
 800c104:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c108:	490e      	ldr	r1, [pc, #56]	; (800c144 <netif_set_up+0x50>)
 800c10a:	480f      	ldr	r0, [pc, #60]	; (800c148 <netif_set_up+0x54>)
 800c10c:	f009 fa0c 	bl	8015528 <printf>
 800c110:	e013      	b.n	800c13a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c118:	f003 0301 	and.w	r3, r3, #1
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10c      	bne.n	800c13a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c126:	f043 0301 	orr.w	r3, r3, #1
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c132:	2103      	movs	r1, #3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f809 	bl	800c14c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	0801d0c0 	.word	0x0801d0c0
 800c144:	0801d248 	.word	0x0801d248
 800c148:	0801d110 	.word	0x0801d110

0800c14c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d106      	bne.n	800c16c <netif_issue_reports+0x20>
 800c15e:	4b18      	ldr	r3, [pc, #96]	; (800c1c0 <netif_issue_reports+0x74>)
 800c160:	f240 326d 	movw	r2, #877	; 0x36d
 800c164:	4917      	ldr	r1, [pc, #92]	; (800c1c4 <netif_issue_reports+0x78>)
 800c166:	4818      	ldr	r0, [pc, #96]	; (800c1c8 <netif_issue_reports+0x7c>)
 800c168:	f009 f9de 	bl	8015528 <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c172:	f003 0304 	and.w	r3, r3, #4
 800c176:	2b00      	cmp	r3, #0
 800c178:	d01e      	beq.n	800c1b8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c180:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c184:	2b00      	cmp	r3, #0
 800c186:	d017      	beq.n	800c1b8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d013      	beq.n	800c1ba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	3304      	adds	r3, #4
 800c196:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00e      	beq.n	800c1ba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c1a2:	f003 0308 	and.w	r3, r3, #8
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d007      	beq.n	800c1ba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f007 fa39 	bl	8013628 <etharp_request>
 800c1b6:	e000      	b.n	800c1ba <netif_issue_reports+0x6e>
    return;
 800c1b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	0801d0c0 	.word	0x0801d0c0
 800c1c4:	0801d264 	.word	0x0801d264
 800c1c8:	0801d110 	.word	0x0801d110

0800c1cc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d107      	bne.n	800c1ea <netif_set_down+0x1e>
 800c1da:	4b12      	ldr	r3, [pc, #72]	; (800c224 <netif_set_down+0x58>)
 800c1dc:	f240 329b 	movw	r2, #923	; 0x39b
 800c1e0:	4911      	ldr	r1, [pc, #68]	; (800c228 <netif_set_down+0x5c>)
 800c1e2:	4812      	ldr	r0, [pc, #72]	; (800c22c <netif_set_down+0x60>)
 800c1e4:	f009 f9a0 	bl	8015528 <printf>
 800c1e8:	e019      	b.n	800c21e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d012      	beq.n	800c21e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c1fe:	f023 0301 	bic.w	r3, r3, #1
 800c202:	b2da      	uxtb	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c210:	f003 0308 	and.w	r3, r3, #8
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f006 fdc3 	bl	8012da4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	0801d0c0 	.word	0x0801d0c0
 800c228:	0801d288 	.word	0x0801d288
 800c22c:	0801d110 	.word	0x0801d110

0800c230 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c23c:	f06f 030b 	mvn.w	r3, #11
}
 800c240:	4618      	mov	r0, r3
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	4603      	mov	r3, r0
 800c254:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c256:	79fb      	ldrb	r3, [r7, #7]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d013      	beq.n	800c284 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c25c:	4b0d      	ldr	r3, [pc, #52]	; (800c294 <netif_get_by_index+0x48>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	60fb      	str	r3, [r7, #12]
 800c262:	e00c      	b.n	800c27e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c26a:	3301      	adds	r3, #1
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	79fa      	ldrb	r2, [r7, #7]
 800c270:	429a      	cmp	r2, r3
 800c272:	d101      	bne.n	800c278 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	e006      	b.n	800c286 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	60fb      	str	r3, [r7, #12]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1ef      	bne.n	800c264 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3714      	adds	r7, #20
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	2000b628 	.word	0x2000b628

0800c298 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c29e:	f008 fe41 	bl	8014f24 <sys_arch_protect>
 800c2a2:	6038      	str	r0, [r7, #0]
 800c2a4:	4b0d      	ldr	r3, [pc, #52]	; (800c2dc <pbuf_free_ooseq+0x44>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	701a      	strb	r2, [r3, #0]
 800c2aa:	6838      	ldr	r0, [r7, #0]
 800c2ac:	f008 fe48 	bl	8014f40 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c2b0:	4b0b      	ldr	r3, [pc, #44]	; (800c2e0 <pbuf_free_ooseq+0x48>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	607b      	str	r3, [r7, #4]
 800c2b6:	e00a      	b.n	800c2ce <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d003      	beq.n	800c2c8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f002 f971 	bl	800e5a8 <tcp_free_ooseq>
      return;
 800c2c6:	e005      	b.n	800c2d4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	607b      	str	r3, [r7, #4]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1f1      	bne.n	800c2b8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	2000b630 	.word	0x2000b630
 800c2e0:	2000b638 	.word	0x2000b638

0800c2e4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c2ec:	f7ff ffd4 	bl	800c298 <pbuf_free_ooseq>
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c2fe:	f008 fe11 	bl	8014f24 <sys_arch_protect>
 800c302:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c304:	4b0f      	ldr	r3, [pc, #60]	; (800c344 <pbuf_pool_is_empty+0x4c>)
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c30a:	4b0e      	ldr	r3, [pc, #56]	; (800c344 <pbuf_pool_is_empty+0x4c>)
 800c30c:	2201      	movs	r2, #1
 800c30e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f008 fe15 	bl	8014f40 <sys_arch_unprotect>

  if (!queued) {
 800c316:	78fb      	ldrb	r3, [r7, #3]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10f      	bne.n	800c33c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c31c:	2100      	movs	r1, #0
 800c31e:	480a      	ldr	r0, [pc, #40]	; (800c348 <pbuf_pool_is_empty+0x50>)
 800c320:	f7fe ff64 	bl	800b1ec <tcpip_try_callback>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d008      	beq.n	800c33c <pbuf_pool_is_empty+0x44>
 800c32a:	f008 fdfb 	bl	8014f24 <sys_arch_protect>
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	4b04      	ldr	r3, [pc, #16]	; (800c344 <pbuf_pool_is_empty+0x4c>)
 800c332:	2200      	movs	r2, #0
 800c334:	701a      	strb	r2, [r3, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f008 fe02 	bl	8014f40 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c33c:	bf00      	nop
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	2000b630 	.word	0x2000b630
 800c348:	0800c2e5 	.word	0x0800c2e5

0800c34c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	4611      	mov	r1, r2
 800c358:	461a      	mov	r2, r3
 800c35a:	460b      	mov	r3, r1
 800c35c:	80fb      	strh	r3, [r7, #6]
 800c35e:	4613      	mov	r3, r2
 800c360:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	88fa      	ldrh	r2, [r7, #6]
 800c372:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	88ba      	ldrh	r2, [r7, #4]
 800c378:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c37a:	8b3b      	ldrh	r3, [r7, #24]
 800c37c:	b2da      	uxtb	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	7f3a      	ldrb	r2, [r7, #28]
 800c386:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2201      	movs	r2, #1
 800c38c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2200      	movs	r2, #0
 800c392:	73da      	strb	r2, [r3, #15]
}
 800c394:	bf00      	nop
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08c      	sub	sp, #48	; 0x30
 800c3a4:	af02      	add	r7, sp, #8
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	71fb      	strb	r3, [r7, #7]
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	80bb      	strh	r3, [r7, #4]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c3b2:	79fb      	ldrb	r3, [r7, #7]
 800c3b4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c3b6:	887b      	ldrh	r3, [r7, #2]
 800c3b8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c3bc:	d07f      	beq.n	800c4be <pbuf_alloc+0x11e>
 800c3be:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c3c2:	f300 80c8 	bgt.w	800c556 <pbuf_alloc+0x1b6>
 800c3c6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c3ca:	d010      	beq.n	800c3ee <pbuf_alloc+0x4e>
 800c3cc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c3d0:	f300 80c1 	bgt.w	800c556 <pbuf_alloc+0x1b6>
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d002      	beq.n	800c3de <pbuf_alloc+0x3e>
 800c3d8:	2b41      	cmp	r3, #65	; 0x41
 800c3da:	f040 80bc 	bne.w	800c556 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c3de:	887a      	ldrh	r2, [r7, #2]
 800c3e0:	88bb      	ldrh	r3, [r7, #4]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	f000 f8d1 	bl	800c58c <pbuf_alloc_reference>
 800c3ea:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c3ec:	e0bd      	b.n	800c56a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c3f6:	88bb      	ldrh	r3, [r7, #4]
 800c3f8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c3fa:	200c      	movs	r0, #12
 800c3fc:	f7ff fc36 	bl	800bc6c <memp_malloc>
 800c400:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d109      	bne.n	800c41c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c408:	f7ff ff76 	bl	800c2f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d002      	beq.n	800c418 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c412:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c414:	f000 faa8 	bl	800c968 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c418:	2300      	movs	r3, #0
 800c41a:	e0a7      	b.n	800c56c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c41c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c41e:	3303      	adds	r3, #3
 800c420:	b29b      	uxth	r3, r3
 800c422:	f023 0303 	bic.w	r3, r3, #3
 800c426:	b29b      	uxth	r3, r3
 800c428:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	8b7a      	ldrh	r2, [r7, #26]
 800c430:	4293      	cmp	r3, r2
 800c432:	bf28      	it	cs
 800c434:	4613      	movcs	r3, r2
 800c436:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c438:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c43a:	3310      	adds	r3, #16
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	4413      	add	r3, r2
 800c440:	3303      	adds	r3, #3
 800c442:	f023 0303 	bic.w	r3, r3, #3
 800c446:	4618      	mov	r0, r3
 800c448:	89f9      	ldrh	r1, [r7, #14]
 800c44a:	8b7a      	ldrh	r2, [r7, #26]
 800c44c:	2300      	movs	r3, #0
 800c44e:	9301      	str	r3, [sp, #4]
 800c450:	887b      	ldrh	r3, [r7, #2]
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	460b      	mov	r3, r1
 800c456:	4601      	mov	r1, r0
 800c458:	6938      	ldr	r0, [r7, #16]
 800c45a:	f7ff ff77 	bl	800c34c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f003 0303 	and.w	r3, r3, #3
 800c466:	2b00      	cmp	r3, #0
 800c468:	d006      	beq.n	800c478 <pbuf_alloc+0xd8>
 800c46a:	4b42      	ldr	r3, [pc, #264]	; (800c574 <pbuf_alloc+0x1d4>)
 800c46c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c470:	4941      	ldr	r1, [pc, #260]	; (800c578 <pbuf_alloc+0x1d8>)
 800c472:	4842      	ldr	r0, [pc, #264]	; (800c57c <pbuf_alloc+0x1dc>)
 800c474:	f009 f858 	bl	8015528 <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c478:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c47a:	3303      	adds	r3, #3
 800c47c:	f023 0303 	bic.w	r3, r3, #3
 800c480:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c484:	d106      	bne.n	800c494 <pbuf_alloc+0xf4>
 800c486:	4b3b      	ldr	r3, [pc, #236]	; (800c574 <pbuf_alloc+0x1d4>)
 800c488:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c48c:	493c      	ldr	r1, [pc, #240]	; (800c580 <pbuf_alloc+0x1e0>)
 800c48e:	483b      	ldr	r0, [pc, #236]	; (800c57c <pbuf_alloc+0x1dc>)
 800c490:	f009 f84a 	bl	8015528 <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	2b00      	cmp	r3, #0
 800c498:	d102      	bne.n	800c4a0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
 800c49e:	e002      	b.n	800c4a6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	693a      	ldr	r2, [r7, #16]
 800c4a4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c4aa:	8b7a      	ldrh	r2, [r7, #26]
 800c4ac:	89fb      	ldrh	r3, [r7, #14]
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c4b6:	8b7b      	ldrh	r3, [r7, #26]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d19e      	bne.n	800c3fa <pbuf_alloc+0x5a>
      break;
 800c4bc:	e055      	b.n	800c56a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c4be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4c0:	3303      	adds	r3, #3
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	f023 0303 	bic.w	r3, r3, #3
 800c4c8:	b29a      	uxth	r2, r3
 800c4ca:	88bb      	ldrh	r3, [r7, #4]
 800c4cc:	3303      	adds	r3, #3
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	f023 0303 	bic.w	r3, r3, #3
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	4413      	add	r3, r2
 800c4d8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c4da:	8b3b      	ldrh	r3, [r7, #24]
 800c4dc:	3310      	adds	r3, #16
 800c4de:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c4e0:	8b3a      	ldrh	r2, [r7, #24]
 800c4e2:	88bb      	ldrh	r3, [r7, #4]
 800c4e4:	3303      	adds	r3, #3
 800c4e6:	f023 0303 	bic.w	r3, r3, #3
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d306      	bcc.n	800c4fc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c4ee:	8afa      	ldrh	r2, [r7, #22]
 800c4f0:	88bb      	ldrh	r3, [r7, #4]
 800c4f2:	3303      	adds	r3, #3
 800c4f4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d201      	bcs.n	800c500 <pbuf_alloc+0x160>
        return NULL;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	e035      	b.n	800c56c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c500:	8afb      	ldrh	r3, [r7, #22]
 800c502:	4618      	mov	r0, r3
 800c504:	f7ff fa30 	bl	800b968 <mem_malloc>
 800c508:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d101      	bne.n	800c514 <pbuf_alloc+0x174>
        return NULL;
 800c510:	2300      	movs	r3, #0
 800c512:	e02b      	b.n	800c56c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c514:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c516:	3310      	adds	r3, #16
 800c518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c51a:	4413      	add	r3, r2
 800c51c:	3303      	adds	r3, #3
 800c51e:	f023 0303 	bic.w	r3, r3, #3
 800c522:	4618      	mov	r0, r3
 800c524:	88b9      	ldrh	r1, [r7, #4]
 800c526:	88ba      	ldrh	r2, [r7, #4]
 800c528:	2300      	movs	r3, #0
 800c52a:	9301      	str	r3, [sp, #4]
 800c52c:	887b      	ldrh	r3, [r7, #2]
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	460b      	mov	r3, r1
 800c532:	4601      	mov	r1, r0
 800c534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c536:	f7ff ff09 	bl	800c34c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	f003 0303 	and.w	r3, r3, #3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d010      	beq.n	800c568 <pbuf_alloc+0x1c8>
 800c546:	4b0b      	ldr	r3, [pc, #44]	; (800c574 <pbuf_alloc+0x1d4>)
 800c548:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c54c:	490d      	ldr	r1, [pc, #52]	; (800c584 <pbuf_alloc+0x1e4>)
 800c54e:	480b      	ldr	r0, [pc, #44]	; (800c57c <pbuf_alloc+0x1dc>)
 800c550:	f008 ffea 	bl	8015528 <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c554:	e008      	b.n	800c568 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c556:	4b07      	ldr	r3, [pc, #28]	; (800c574 <pbuf_alloc+0x1d4>)
 800c558:	f240 1227 	movw	r2, #295	; 0x127
 800c55c:	490a      	ldr	r1, [pc, #40]	; (800c588 <pbuf_alloc+0x1e8>)
 800c55e:	4807      	ldr	r0, [pc, #28]	; (800c57c <pbuf_alloc+0x1dc>)
 800c560:	f008 ffe2 	bl	8015528 <printf>
      return NULL;
 800c564:	2300      	movs	r3, #0
 800c566:	e001      	b.n	800c56c <pbuf_alloc+0x1cc>
      break;
 800c568:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3728      	adds	r7, #40	; 0x28
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	0801d2f0 	.word	0x0801d2f0
 800c578:	0801d320 	.word	0x0801d320
 800c57c:	0801d350 	.word	0x0801d350
 800c580:	0801d378 	.word	0x0801d378
 800c584:	0801d3ac 	.word	0x0801d3ac
 800c588:	0801d3d8 	.word	0x0801d3d8

0800c58c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af02      	add	r7, sp, #8
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	460b      	mov	r3, r1
 800c596:	807b      	strh	r3, [r7, #2]
 800c598:	4613      	mov	r3, r2
 800c59a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c59c:	883b      	ldrh	r3, [r7, #0]
 800c59e:	2b41      	cmp	r3, #65	; 0x41
 800c5a0:	d009      	beq.n	800c5b6 <pbuf_alloc_reference+0x2a>
 800c5a2:	883b      	ldrh	r3, [r7, #0]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d006      	beq.n	800c5b6 <pbuf_alloc_reference+0x2a>
 800c5a8:	4b0f      	ldr	r3, [pc, #60]	; (800c5e8 <pbuf_alloc_reference+0x5c>)
 800c5aa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c5ae:	490f      	ldr	r1, [pc, #60]	; (800c5ec <pbuf_alloc_reference+0x60>)
 800c5b0:	480f      	ldr	r0, [pc, #60]	; (800c5f0 <pbuf_alloc_reference+0x64>)
 800c5b2:	f008 ffb9 	bl	8015528 <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c5b6:	200b      	movs	r0, #11
 800c5b8:	f7ff fb58 	bl	800bc6c <memp_malloc>
 800c5bc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	e00b      	b.n	800c5e0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c5c8:	8879      	ldrh	r1, [r7, #2]
 800c5ca:	887a      	ldrh	r2, [r7, #2]
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	883b      	ldrh	r3, [r7, #0]
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	6879      	ldr	r1, [r7, #4]
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7ff feb7 	bl	800c34c <pbuf_init_alloced_pbuf>
  return p;
 800c5de:	68fb      	ldr	r3, [r7, #12]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	0801d2f0 	.word	0x0801d2f0
 800c5ec:	0801d3f4 	.word	0x0801d3f4
 800c5f0:	0801d350 	.word	0x0801d350

0800c5f4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b088      	sub	sp, #32
 800c5f8:	af02      	add	r7, sp, #8
 800c5fa:	607b      	str	r3, [r7, #4]
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	73fb      	strb	r3, [r7, #15]
 800c600:	460b      	mov	r3, r1
 800c602:	81bb      	strh	r3, [r7, #12]
 800c604:	4613      	mov	r3, r2
 800c606:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c60c:	8a7b      	ldrh	r3, [r7, #18]
 800c60e:	3303      	adds	r3, #3
 800c610:	f023 0203 	bic.w	r2, r3, #3
 800c614:	89bb      	ldrh	r3, [r7, #12]
 800c616:	441a      	add	r2, r3
 800c618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d901      	bls.n	800c622 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c61e:	2300      	movs	r3, #0
 800c620:	e018      	b.n	800c654 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c622:	6a3b      	ldr	r3, [r7, #32]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d007      	beq.n	800c638 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c628:	8a7b      	ldrh	r3, [r7, #18]
 800c62a:	3303      	adds	r3, #3
 800c62c:	f023 0303 	bic.w	r3, r3, #3
 800c630:	6a3a      	ldr	r2, [r7, #32]
 800c632:	4413      	add	r3, r2
 800c634:	617b      	str	r3, [r7, #20]
 800c636:	e001      	b.n	800c63c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c638:	2300      	movs	r3, #0
 800c63a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	89b9      	ldrh	r1, [r7, #12]
 800c640:	89ba      	ldrh	r2, [r7, #12]
 800c642:	2302      	movs	r3, #2
 800c644:	9301      	str	r3, [sp, #4]
 800c646:	897b      	ldrh	r3, [r7, #10]
 800c648:	9300      	str	r3, [sp, #0]
 800c64a:	460b      	mov	r3, r1
 800c64c:	6979      	ldr	r1, [r7, #20]
 800c64e:	f7ff fe7d 	bl	800c34c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c652:	687b      	ldr	r3, [r7, #4]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3718      	adds	r7, #24
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	460b      	mov	r3, r1
 800c666:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d106      	bne.n	800c67c <pbuf_realloc+0x20>
 800c66e:	4b3a      	ldr	r3, [pc, #232]	; (800c758 <pbuf_realloc+0xfc>)
 800c670:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c674:	4939      	ldr	r1, [pc, #228]	; (800c75c <pbuf_realloc+0x100>)
 800c676:	483a      	ldr	r0, [pc, #232]	; (800c760 <pbuf_realloc+0x104>)
 800c678:	f008 ff56 	bl	8015528 <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	891b      	ldrh	r3, [r3, #8]
 800c680:	887a      	ldrh	r2, [r7, #2]
 800c682:	429a      	cmp	r2, r3
 800c684:	d263      	bcs.n	800c74e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	891a      	ldrh	r2, [r3, #8]
 800c68a:	887b      	ldrh	r3, [r7, #2]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c690:	887b      	ldrh	r3, [r7, #2]
 800c692:	817b      	strh	r3, [r7, #10]
  q = p;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c698:	e018      	b.n	800c6cc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	895b      	ldrh	r3, [r3, #10]
 800c69e:	897a      	ldrh	r2, [r7, #10]
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	891a      	ldrh	r2, [r3, #8]
 800c6a8:	893b      	ldrh	r3, [r7, #8]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	b29a      	uxth	r2, r3
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d106      	bne.n	800c6cc <pbuf_realloc+0x70>
 800c6be:	4b26      	ldr	r3, [pc, #152]	; (800c758 <pbuf_realloc+0xfc>)
 800c6c0:	f240 12af 	movw	r2, #431	; 0x1af
 800c6c4:	4927      	ldr	r1, [pc, #156]	; (800c764 <pbuf_realloc+0x108>)
 800c6c6:	4826      	ldr	r0, [pc, #152]	; (800c760 <pbuf_realloc+0x104>)
 800c6c8:	f008 ff2e 	bl	8015528 <printf>
  while (rem_len > q->len) {
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	895b      	ldrh	r3, [r3, #10]
 800c6d0:	897a      	ldrh	r2, [r7, #10]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d8e1      	bhi.n	800c69a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	7b1b      	ldrb	r3, [r3, #12]
 800c6da:	f003 030f 	and.w	r3, r3, #15
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d121      	bne.n	800c726 <pbuf_realloc+0xca>
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	895b      	ldrh	r3, [r3, #10]
 800c6e6:	897a      	ldrh	r2, [r7, #10]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d01c      	beq.n	800c726 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	7b5b      	ldrb	r3, [r3, #13]
 800c6f0:	f003 0302 	and.w	r3, r3, #2
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d116      	bne.n	800c726 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	b29a      	uxth	r2, r3
 800c702:	897b      	ldrh	r3, [r7, #10]
 800c704:	4413      	add	r3, r2
 800c706:	b29b      	uxth	r3, r3
 800c708:	4619      	mov	r1, r3
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7ff f822 	bl	800b754 <mem_trim>
 800c710:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d106      	bne.n	800c726 <pbuf_realloc+0xca>
 800c718:	4b0f      	ldr	r3, [pc, #60]	; (800c758 <pbuf_realloc+0xfc>)
 800c71a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c71e:	4912      	ldr	r1, [pc, #72]	; (800c768 <pbuf_realloc+0x10c>)
 800c720:	480f      	ldr	r0, [pc, #60]	; (800c760 <pbuf_realloc+0x104>)
 800c722:	f008 ff01 	bl	8015528 <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	897a      	ldrh	r2, [r7, #10]
 800c72a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	895a      	ldrh	r2, [r3, #10]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d004      	beq.n	800c746 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4618      	mov	r0, r3
 800c742:	f000 f911 	bl	800c968 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2200      	movs	r2, #0
 800c74a:	601a      	str	r2, [r3, #0]
 800c74c:	e000      	b.n	800c750 <pbuf_realloc+0xf4>
    return;
 800c74e:	bf00      	nop

}
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	0801d2f0 	.word	0x0801d2f0
 800c75c:	0801d408 	.word	0x0801d408
 800c760:	0801d350 	.word	0x0801d350
 800c764:	0801d420 	.word	0x0801d420
 800c768:	0801d438 	.word	0x0801d438

0800c76c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	4613      	mov	r3, r2
 800c778:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d106      	bne.n	800c78e <pbuf_add_header_impl+0x22>
 800c780:	4b2b      	ldr	r3, [pc, #172]	; (800c830 <pbuf_add_header_impl+0xc4>)
 800c782:	f240 12df 	movw	r2, #479	; 0x1df
 800c786:	492b      	ldr	r1, [pc, #172]	; (800c834 <pbuf_add_header_impl+0xc8>)
 800c788:	482b      	ldr	r0, [pc, #172]	; (800c838 <pbuf_add_header_impl+0xcc>)
 800c78a:	f008 fecd 	bl	8015528 <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d003      	beq.n	800c79c <pbuf_add_header_impl+0x30>
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c79a:	d301      	bcc.n	800c7a0 <pbuf_add_header_impl+0x34>
    return 1;
 800c79c:	2301      	movs	r3, #1
 800c79e:	e043      	b.n	800c828 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d101      	bne.n	800c7aa <pbuf_add_header_impl+0x3e>
    return 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e03e      	b.n	800c828 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	891a      	ldrh	r2, [r3, #8]
 800c7b2:	8a7b      	ldrh	r3, [r7, #18]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	8a7a      	ldrh	r2, [r7, #18]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d901      	bls.n	800c7c2 <pbuf_add_header_impl+0x56>
    return 1;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e032      	b.n	800c828 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	7b1b      	ldrb	r3, [r3, #12]
 800c7c6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c7c8:	8a3b      	ldrh	r3, [r7, #16]
 800c7ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00c      	beq.n	800c7ec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	685a      	ldr	r2, [r3, #4]
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	425b      	negs	r3, r3
 800c7da:	4413      	add	r3, r2
 800c7dc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	3310      	adds	r3, #16
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d20d      	bcs.n	800c804 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e01d      	b.n	800c828 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c7ec:	79fb      	ldrb	r3, [r7, #7]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d006      	beq.n	800c800 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	425b      	negs	r3, r3
 800c7fa:	4413      	add	r3, r2
 800c7fc:	617b      	str	r3, [r7, #20]
 800c7fe:	e001      	b.n	800c804 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c800:	2301      	movs	r3, #1
 800c802:	e011      	b.n	800c828 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	895a      	ldrh	r2, [r3, #10]
 800c80e:	8a7b      	ldrh	r3, [r7, #18]
 800c810:	4413      	add	r3, r2
 800c812:	b29a      	uxth	r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	891a      	ldrh	r2, [r3, #8]
 800c81c:	8a7b      	ldrh	r3, [r7, #18]
 800c81e:	4413      	add	r3, r2
 800c820:	b29a      	uxth	r2, r3
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	811a      	strh	r2, [r3, #8]


  return 0;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3718      	adds	r7, #24
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	0801d2f0 	.word	0x0801d2f0
 800c834:	0801d454 	.word	0x0801d454
 800c838:	0801d350 	.word	0x0801d350

0800c83c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c846:	2200      	movs	r2, #0
 800c848:	6839      	ldr	r1, [r7, #0]
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7ff ff8e 	bl	800c76c <pbuf_add_header_impl>
 800c850:	4603      	mov	r3, r0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
	...

0800c85c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d106      	bne.n	800c87a <pbuf_remove_header+0x1e>
 800c86c:	4b20      	ldr	r3, [pc, #128]	; (800c8f0 <pbuf_remove_header+0x94>)
 800c86e:	f240 224b 	movw	r2, #587	; 0x24b
 800c872:	4920      	ldr	r1, [pc, #128]	; (800c8f4 <pbuf_remove_header+0x98>)
 800c874:	4820      	ldr	r0, [pc, #128]	; (800c8f8 <pbuf_remove_header+0x9c>)
 800c876:	f008 fe57 	bl	8015528 <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <pbuf_remove_header+0x2c>
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c886:	d301      	bcc.n	800c88c <pbuf_remove_header+0x30>
    return 1;
 800c888:	2301      	movs	r3, #1
 800c88a:	e02c      	b.n	800c8e6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d101      	bne.n	800c896 <pbuf_remove_header+0x3a>
    return 0;
 800c892:	2300      	movs	r3, #0
 800c894:	e027      	b.n	800c8e6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	895b      	ldrh	r3, [r3, #10]
 800c89e:	89fa      	ldrh	r2, [r7, #14]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d908      	bls.n	800c8b6 <pbuf_remove_header+0x5a>
 800c8a4:	4b12      	ldr	r3, [pc, #72]	; (800c8f0 <pbuf_remove_header+0x94>)
 800c8a6:	f240 2255 	movw	r2, #597	; 0x255
 800c8aa:	4914      	ldr	r1, [pc, #80]	; (800c8fc <pbuf_remove_header+0xa0>)
 800c8ac:	4812      	ldr	r0, [pc, #72]	; (800c8f8 <pbuf_remove_header+0x9c>)
 800c8ae:	f008 fe3b 	bl	8015528 <printf>
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e017      	b.n	800c8e6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	441a      	add	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	895a      	ldrh	r2, [r3, #10]
 800c8cc:	89fb      	ldrh	r3, [r7, #14]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	891a      	ldrh	r2, [r3, #8]
 800c8da:	89fb      	ldrh	r3, [r7, #14]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	0801d2f0 	.word	0x0801d2f0
 800c8f4:	0801d454 	.word	0x0801d454
 800c8f8:	0801d350 	.word	0x0801d350
 800c8fc:	0801d460 	.word	0x0801d460

0800c900 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	460b      	mov	r3, r1
 800c90a:	807b      	strh	r3, [r7, #2]
 800c90c:	4613      	mov	r3, r2
 800c90e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c910:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c914:	2b00      	cmp	r3, #0
 800c916:	da08      	bge.n	800c92a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c918:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c91c:	425b      	negs	r3, r3
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7ff ff9b 	bl	800c85c <pbuf_remove_header>
 800c926:	4603      	mov	r3, r0
 800c928:	e007      	b.n	800c93a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c92a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c92e:	787a      	ldrb	r2, [r7, #1]
 800c930:	4619      	mov	r1, r3
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f7ff ff1a 	bl	800c76c <pbuf_add_header_impl>
 800c938:	4603      	mov	r3, r0
  }
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b082      	sub	sp, #8
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	460b      	mov	r3, r1
 800c94c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c94e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c952:	2201      	movs	r2, #1
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f7ff ffd2 	bl	800c900 <pbuf_header_impl>
 800c95c:	4603      	mov	r3, r0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
	...

0800c968 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b088      	sub	sp, #32
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10b      	bne.n	800c98e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d106      	bne.n	800c98a <pbuf_free+0x22>
 800c97c:	4b3b      	ldr	r3, [pc, #236]	; (800ca6c <pbuf_free+0x104>)
 800c97e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c982:	493b      	ldr	r1, [pc, #236]	; (800ca70 <pbuf_free+0x108>)
 800c984:	483b      	ldr	r0, [pc, #236]	; (800ca74 <pbuf_free+0x10c>)
 800c986:	f008 fdcf 	bl	8015528 <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	e069      	b.n	800ca62 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c992:	e062      	b.n	800ca5a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c994:	f008 fac6 	bl	8014f24 <sys_arch_protect>
 800c998:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	7b9b      	ldrb	r3, [r3, #14]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d106      	bne.n	800c9b0 <pbuf_free+0x48>
 800c9a2:	4b32      	ldr	r3, [pc, #200]	; (800ca6c <pbuf_free+0x104>)
 800c9a4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c9a8:	4933      	ldr	r1, [pc, #204]	; (800ca78 <pbuf_free+0x110>)
 800c9aa:	4832      	ldr	r0, [pc, #200]	; (800ca74 <pbuf_free+0x10c>)
 800c9ac:	f008 fdbc 	bl	8015528 <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	7b9b      	ldrb	r3, [r3, #14]
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	739a      	strb	r2, [r3, #14]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7b9b      	ldrb	r3, [r3, #14]
 800c9c0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c9c2:	69b8      	ldr	r0, [r7, #24]
 800c9c4:	f008 fabc 	bl	8014f40 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c9c8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d143      	bne.n	800ca56 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	7b1b      	ldrb	r3, [r3, #12]
 800c9d8:	f003 030f 	and.w	r3, r3, #15
 800c9dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	7b5b      	ldrb	r3, [r3, #13]
 800c9e2:	f003 0302 	and.w	r3, r3, #2
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d011      	beq.n	800ca0e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d106      	bne.n	800ca04 <pbuf_free+0x9c>
 800c9f6:	4b1d      	ldr	r3, [pc, #116]	; (800ca6c <pbuf_free+0x104>)
 800c9f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c9fc:	491f      	ldr	r1, [pc, #124]	; (800ca7c <pbuf_free+0x114>)
 800c9fe:	481d      	ldr	r0, [pc, #116]	; (800ca74 <pbuf_free+0x10c>)
 800ca00:	f008 fd92 	bl	8015528 <printf>
        pc->custom_free_function(p);
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	4798      	blx	r3
 800ca0c:	e01d      	b.n	800ca4a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d104      	bne.n	800ca1e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ca14:	6879      	ldr	r1, [r7, #4]
 800ca16:	200c      	movs	r0, #12
 800ca18:	f7ff f97a 	bl	800bd10 <memp_free>
 800ca1c:	e015      	b.n	800ca4a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ca1e:	7bfb      	ldrb	r3, [r7, #15]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d104      	bne.n	800ca2e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ca24:	6879      	ldr	r1, [r7, #4]
 800ca26:	200b      	movs	r0, #11
 800ca28:	f7ff f972 	bl	800bd10 <memp_free>
 800ca2c:	e00d      	b.n	800ca4a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ca2e:	7bfb      	ldrb	r3, [r7, #15]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d103      	bne.n	800ca3c <pbuf_free+0xd4>
          mem_free(p);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f7fe fdfd 	bl	800b634 <mem_free>
 800ca3a:	e006      	b.n	800ca4a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ca3c:	4b0b      	ldr	r3, [pc, #44]	; (800ca6c <pbuf_free+0x104>)
 800ca3e:	f240 320f 	movw	r2, #783	; 0x30f
 800ca42:	490f      	ldr	r1, [pc, #60]	; (800ca80 <pbuf_free+0x118>)
 800ca44:	480b      	ldr	r0, [pc, #44]	; (800ca74 <pbuf_free+0x10c>)
 800ca46:	f008 fd6f 	bl	8015528 <printf>
        }
      }
      count++;
 800ca4a:	7ffb      	ldrb	r3, [r7, #31]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	607b      	str	r3, [r7, #4]
 800ca54:	e001      	b.n	800ca5a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ca56:	2300      	movs	r3, #0
 800ca58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d199      	bne.n	800c994 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ca60:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3720      	adds	r7, #32
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	0801d2f0 	.word	0x0801d2f0
 800ca70:	0801d454 	.word	0x0801d454
 800ca74:	0801d350 	.word	0x0801d350
 800ca78:	0801d480 	.word	0x0801d480
 800ca7c:	0801d498 	.word	0x0801d498
 800ca80:	0801d4bc 	.word	0x0801d4bc

0800ca84 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ca90:	e005      	b.n	800ca9e <pbuf_clen+0x1a>
    ++len;
 800ca92:	89fb      	ldrh	r3, [r7, #14]
 800ca94:	3301      	adds	r3, #1
 800ca96:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1f6      	bne.n	800ca92 <pbuf_clen+0xe>
  }
  return len;
 800caa4:	89fb      	ldrh	r3, [r7, #14]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
	...

0800cab4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d016      	beq.n	800caf0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cac2:	f008 fa2f 	bl	8014f24 <sys_arch_protect>
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7b9b      	ldrb	r3, [r3, #14]
 800cacc:	3301      	adds	r3, #1
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	739a      	strb	r2, [r3, #14]
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f008 fa33 	bl	8014f40 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	7b9b      	ldrb	r3, [r3, #14]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d106      	bne.n	800caf0 <pbuf_ref+0x3c>
 800cae2:	4b05      	ldr	r3, [pc, #20]	; (800caf8 <pbuf_ref+0x44>)
 800cae4:	f240 3242 	movw	r2, #834	; 0x342
 800cae8:	4904      	ldr	r1, [pc, #16]	; (800cafc <pbuf_ref+0x48>)
 800caea:	4805      	ldr	r0, [pc, #20]	; (800cb00 <pbuf_ref+0x4c>)
 800caec:	f008 fd1c 	bl	8015528 <printf>
  }
}
 800caf0:	bf00      	nop
 800caf2:	3710      	adds	r7, #16
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	0801d2f0 	.word	0x0801d2f0
 800cafc:	0801d4d0 	.word	0x0801d4d0
 800cb00:	0801d350 	.word	0x0801d350

0800cb04 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <pbuf_cat+0x16>
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d107      	bne.n	800cb2a <pbuf_cat+0x26>
 800cb1a:	4b20      	ldr	r3, [pc, #128]	; (800cb9c <pbuf_cat+0x98>)
 800cb1c:	f240 3259 	movw	r2, #857	; 0x359
 800cb20:	491f      	ldr	r1, [pc, #124]	; (800cba0 <pbuf_cat+0x9c>)
 800cb22:	4820      	ldr	r0, [pc, #128]	; (800cba4 <pbuf_cat+0xa0>)
 800cb24:	f008 fd00 	bl	8015528 <printf>
 800cb28:	e034      	b.n	800cb94 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	e00a      	b.n	800cb46 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	891a      	ldrh	r2, [r3, #8]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	891b      	ldrh	r3, [r3, #8]
 800cb38:	4413      	add	r3, r2
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	60fb      	str	r3, [r7, #12]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1f0      	bne.n	800cb30 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	891a      	ldrh	r2, [r3, #8]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	895b      	ldrh	r3, [r3, #10]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d006      	beq.n	800cb68 <pbuf_cat+0x64>
 800cb5a:	4b10      	ldr	r3, [pc, #64]	; (800cb9c <pbuf_cat+0x98>)
 800cb5c:	f240 3262 	movw	r2, #866	; 0x362
 800cb60:	4911      	ldr	r1, [pc, #68]	; (800cba8 <pbuf_cat+0xa4>)
 800cb62:	4810      	ldr	r0, [pc, #64]	; (800cba4 <pbuf_cat+0xa0>)
 800cb64:	f008 fce0 	bl	8015528 <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d006      	beq.n	800cb7e <pbuf_cat+0x7a>
 800cb70:	4b0a      	ldr	r3, [pc, #40]	; (800cb9c <pbuf_cat+0x98>)
 800cb72:	f240 3263 	movw	r2, #867	; 0x363
 800cb76:	490d      	ldr	r1, [pc, #52]	; (800cbac <pbuf_cat+0xa8>)
 800cb78:	480a      	ldr	r0, [pc, #40]	; (800cba4 <pbuf_cat+0xa0>)
 800cb7a:	f008 fcd5 	bl	8015528 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	891a      	ldrh	r2, [r3, #8]
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	891b      	ldrh	r3, [r3, #8]
 800cb86:	4413      	add	r3, r2
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	683a      	ldr	r2, [r7, #0]
 800cb92:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	0801d2f0 	.word	0x0801d2f0
 800cba0:	0801d4e4 	.word	0x0801d4e4
 800cba4:	0801d350 	.word	0x0801d350
 800cba8:	0801d51c 	.word	0x0801d51c
 800cbac:	0801d54c 	.word	0x0801d54c

0800cbb0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	617b      	str	r3, [r7, #20]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d008      	beq.n	800cbda <pbuf_copy+0x2a>
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d005      	beq.n	800cbda <pbuf_copy+0x2a>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	891a      	ldrh	r2, [r3, #8]
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	891b      	ldrh	r3, [r3, #8]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d209      	bcs.n	800cbee <pbuf_copy+0x3e>
 800cbda:	4b57      	ldr	r3, [pc, #348]	; (800cd38 <pbuf_copy+0x188>)
 800cbdc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800cbe0:	4956      	ldr	r1, [pc, #344]	; (800cd3c <pbuf_copy+0x18c>)
 800cbe2:	4857      	ldr	r0, [pc, #348]	; (800cd40 <pbuf_copy+0x190>)
 800cbe4:	f008 fca0 	bl	8015528 <printf>
 800cbe8:	f06f 030f 	mvn.w	r3, #15
 800cbec:	e09f      	b.n	800cd2e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	895b      	ldrh	r3, [r3, #10]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	1ad2      	subs	r2, r2, r3
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	895b      	ldrh	r3, [r3, #10]
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	1acb      	subs	r3, r1, r3
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d306      	bcc.n	800cc14 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	895b      	ldrh	r3, [r3, #10]
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	1ad3      	subs	r3, r2, r3
 800cc10:	60fb      	str	r3, [r7, #12]
 800cc12:	e005      	b.n	800cc20 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	895b      	ldrh	r3, [r3, #10]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	18d0      	adds	r0, r2, r3
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	685a      	ldr	r2, [r3, #4]
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	4413      	add	r3, r2
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	4619      	mov	r1, r3
 800cc34:	f008 f9ca 	bl	8014fcc <memcpy>
    offset_to += len;
 800cc38:	697a      	ldr	r2, [r7, #20]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	4413      	add	r3, r2
 800cc46:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	895b      	ldrh	r3, [r3, #10]
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d906      	bls.n	800cc62 <pbuf_copy+0xb2>
 800cc54:	4b38      	ldr	r3, [pc, #224]	; (800cd38 <pbuf_copy+0x188>)
 800cc56:	f240 32d9 	movw	r2, #985	; 0x3d9
 800cc5a:	493a      	ldr	r1, [pc, #232]	; (800cd44 <pbuf_copy+0x194>)
 800cc5c:	4838      	ldr	r0, [pc, #224]	; (800cd40 <pbuf_copy+0x190>)
 800cc5e:	f008 fc63 	bl	8015528 <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	895b      	ldrh	r3, [r3, #10]
 800cc66:	461a      	mov	r2, r3
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d906      	bls.n	800cc7c <pbuf_copy+0xcc>
 800cc6e:	4b32      	ldr	r3, [pc, #200]	; (800cd38 <pbuf_copy+0x188>)
 800cc70:	f240 32da 	movw	r2, #986	; 0x3da
 800cc74:	4934      	ldr	r1, [pc, #208]	; (800cd48 <pbuf_copy+0x198>)
 800cc76:	4832      	ldr	r0, [pc, #200]	; (800cd40 <pbuf_copy+0x190>)
 800cc78:	f008 fc56 	bl	8015528 <printf>
    if (offset_from >= p_from->len) {
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	895b      	ldrh	r3, [r3, #10]
 800cc80:	461a      	mov	r2, r3
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d304      	bcc.n	800cc92 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	895b      	ldrh	r3, [r3, #10]
 800cc96:	461a      	mov	r2, r3
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d114      	bne.n	800ccc8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10c      	bne.n	800ccc8 <pbuf_copy+0x118>
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d009      	beq.n	800ccc8 <pbuf_copy+0x118>
 800ccb4:	4b20      	ldr	r3, [pc, #128]	; (800cd38 <pbuf_copy+0x188>)
 800ccb6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ccba:	4924      	ldr	r1, [pc, #144]	; (800cd4c <pbuf_copy+0x19c>)
 800ccbc:	4820      	ldr	r0, [pc, #128]	; (800cd40 <pbuf_copy+0x190>)
 800ccbe:	f008 fc33 	bl	8015528 <printf>
 800ccc2:	f06f 030f 	mvn.w	r3, #15
 800ccc6:	e032      	b.n	800cd2e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d013      	beq.n	800ccf6 <pbuf_copy+0x146>
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	895a      	ldrh	r2, [r3, #10]
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	891b      	ldrh	r3, [r3, #8]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d10d      	bne.n	800ccf6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d009      	beq.n	800ccf6 <pbuf_copy+0x146>
 800cce2:	4b15      	ldr	r3, [pc, #84]	; (800cd38 <pbuf_copy+0x188>)
 800cce4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800cce8:	4919      	ldr	r1, [pc, #100]	; (800cd50 <pbuf_copy+0x1a0>)
 800ccea:	4815      	ldr	r0, [pc, #84]	; (800cd40 <pbuf_copy+0x190>)
 800ccec:	f008 fc1c 	bl	8015528 <printf>
 800ccf0:	f06f 0305 	mvn.w	r3, #5
 800ccf4:	e01b      	b.n	800cd2e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d013      	beq.n	800cd24 <pbuf_copy+0x174>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	895a      	ldrh	r2, [r3, #10]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	891b      	ldrh	r3, [r3, #8]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d10d      	bne.n	800cd24 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d009      	beq.n	800cd24 <pbuf_copy+0x174>
 800cd10:	4b09      	ldr	r3, [pc, #36]	; (800cd38 <pbuf_copy+0x188>)
 800cd12:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cd16:	490e      	ldr	r1, [pc, #56]	; (800cd50 <pbuf_copy+0x1a0>)
 800cd18:	4809      	ldr	r0, [pc, #36]	; (800cd40 <pbuf_copy+0x190>)
 800cd1a:	f008 fc05 	bl	8015528 <printf>
 800cd1e:	f06f 0305 	mvn.w	r3, #5
 800cd22:	e004      	b.n	800cd2e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f47f af61 	bne.w	800cbee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3718      	adds	r7, #24
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	0801d2f0 	.word	0x0801d2f0
 800cd3c:	0801d598 	.word	0x0801d598
 800cd40:	0801d350 	.word	0x0801d350
 800cd44:	0801d5c8 	.word	0x0801d5c8
 800cd48:	0801d5e0 	.word	0x0801d5e0
 800cd4c:	0801d5fc 	.word	0x0801d5fc
 800cd50:	0801d60c 	.word	0x0801d60c

0800cd54 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b088      	sub	sp, #32
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	4611      	mov	r1, r2
 800cd60:	461a      	mov	r2, r3
 800cd62:	460b      	mov	r3, r1
 800cd64:	80fb      	strh	r3, [r7, #6]
 800cd66:	4613      	mov	r3, r2
 800cd68:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d108      	bne.n	800cd8a <pbuf_copy_partial+0x36>
 800cd78:	4b2b      	ldr	r3, [pc, #172]	; (800ce28 <pbuf_copy_partial+0xd4>)
 800cd7a:	f240 420a 	movw	r2, #1034	; 0x40a
 800cd7e:	492b      	ldr	r1, [pc, #172]	; (800ce2c <pbuf_copy_partial+0xd8>)
 800cd80:	482b      	ldr	r0, [pc, #172]	; (800ce30 <pbuf_copy_partial+0xdc>)
 800cd82:	f008 fbd1 	bl	8015528 <printf>
 800cd86:	2300      	movs	r3, #0
 800cd88:	e04a      	b.n	800ce20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d108      	bne.n	800cda2 <pbuf_copy_partial+0x4e>
 800cd90:	4b25      	ldr	r3, [pc, #148]	; (800ce28 <pbuf_copy_partial+0xd4>)
 800cd92:	f240 420b 	movw	r2, #1035	; 0x40b
 800cd96:	4927      	ldr	r1, [pc, #156]	; (800ce34 <pbuf_copy_partial+0xe0>)
 800cd98:	4825      	ldr	r0, [pc, #148]	; (800ce30 <pbuf_copy_partial+0xdc>)
 800cd9a:	f008 fbc5 	bl	8015528 <printf>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	e03e      	b.n	800ce20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	61fb      	str	r3, [r7, #28]
 800cda6:	e034      	b.n	800ce12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cda8:	88bb      	ldrh	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00a      	beq.n	800cdc4 <pbuf_copy_partial+0x70>
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	895b      	ldrh	r3, [r3, #10]
 800cdb2:	88ba      	ldrh	r2, [r7, #4]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d305      	bcc.n	800cdc4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	895b      	ldrh	r3, [r3, #10]
 800cdbc:	88ba      	ldrh	r2, [r7, #4]
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	80bb      	strh	r3, [r7, #4]
 800cdc2:	e023      	b.n	800ce0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	895a      	ldrh	r2, [r3, #10]
 800cdc8:	88bb      	ldrh	r3, [r7, #4]
 800cdca:	1ad3      	subs	r3, r2, r3
 800cdcc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cdce:	8b3a      	ldrh	r2, [r7, #24]
 800cdd0:	88fb      	ldrh	r3, [r7, #6]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d901      	bls.n	800cdda <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cdd6:	88fb      	ldrh	r3, [r7, #6]
 800cdd8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cdda:	8b7b      	ldrh	r3, [r7, #26]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	18d0      	adds	r0, r2, r3
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	685a      	ldr	r2, [r3, #4]
 800cde4:	88bb      	ldrh	r3, [r7, #4]
 800cde6:	4413      	add	r3, r2
 800cde8:	8b3a      	ldrh	r2, [r7, #24]
 800cdea:	4619      	mov	r1, r3
 800cdec:	f008 f8ee 	bl	8014fcc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cdf0:	8afa      	ldrh	r2, [r7, #22]
 800cdf2:	8b3b      	ldrh	r3, [r7, #24]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cdf8:	8b7a      	ldrh	r2, [r7, #26]
 800cdfa:	8b3b      	ldrh	r3, [r7, #24]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ce00:	88fa      	ldrh	r2, [r7, #6]
 800ce02:	8b3b      	ldrh	r3, [r7, #24]
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	61fb      	str	r3, [r7, #28]
 800ce12:	88fb      	ldrh	r3, [r7, #6]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d002      	beq.n	800ce1e <pbuf_copy_partial+0xca>
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1c4      	bne.n	800cda8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ce1e:	8afb      	ldrh	r3, [r7, #22]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3720      	adds	r7, #32
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	0801d2f0 	.word	0x0801d2f0
 800ce2c:	0801d638 	.word	0x0801d638
 800ce30:	0801d350 	.word	0x0801d350
 800ce34:	0801d658 	.word	0x0801d658

0800ce38 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	4603      	mov	r3, r0
 800ce40:	603a      	str	r2, [r7, #0]
 800ce42:	71fb      	strb	r3, [r7, #7]
 800ce44:	460b      	mov	r3, r1
 800ce46:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	8919      	ldrh	r1, [r3, #8]
 800ce4c:	88ba      	ldrh	r2, [r7, #4]
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff faa5 	bl	800c3a0 <pbuf_alloc>
 800ce56:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d101      	bne.n	800ce62 <pbuf_clone+0x2a>
    return NULL;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e011      	b.n	800ce86 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f7ff fea3 	bl	800cbb0 <pbuf_copy>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ce6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d006      	beq.n	800ce84 <pbuf_clone+0x4c>
 800ce76:	4b06      	ldr	r3, [pc, #24]	; (800ce90 <pbuf_clone+0x58>)
 800ce78:	f240 5224 	movw	r2, #1316	; 0x524
 800ce7c:	4905      	ldr	r1, [pc, #20]	; (800ce94 <pbuf_clone+0x5c>)
 800ce7e:	4806      	ldr	r0, [pc, #24]	; (800ce98 <pbuf_clone+0x60>)
 800ce80:	f008 fb52 	bl	8015528 <printf>
  return q;
 800ce84:	68fb      	ldr	r3, [r7, #12]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	0801d2f0 	.word	0x0801d2f0
 800ce94:	0801d764 	.word	0x0801d764
 800ce98:	0801d350 	.word	0x0801d350

0800ce9c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cea0:	f008 fb54 	bl	801554c <rand>
 800cea4:	4603      	mov	r3, r0
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	4b01      	ldr	r3, [pc, #4]	; (800cebc <tcp_init+0x20>)
 800ceb6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ceb8:	bf00      	nop
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	20000020 	.word	0x20000020

0800cec0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	7d1b      	ldrb	r3, [r3, #20]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d105      	bne.n	800cedc <tcp_free+0x1c>
 800ced0:	4b06      	ldr	r3, [pc, #24]	; (800ceec <tcp_free+0x2c>)
 800ced2:	22d4      	movs	r2, #212	; 0xd4
 800ced4:	4906      	ldr	r1, [pc, #24]	; (800cef0 <tcp_free+0x30>)
 800ced6:	4807      	ldr	r0, [pc, #28]	; (800cef4 <tcp_free+0x34>)
 800ced8:	f008 fb26 	bl	8015528 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	2001      	movs	r0, #1
 800cee0:	f7fe ff16 	bl	800bd10 <memp_free>
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	0801d7f0 	.word	0x0801d7f0
 800cef0:	0801d820 	.word	0x0801d820
 800cef4:	0801d834 	.word	0x0801d834

0800cef8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	7d1b      	ldrb	r3, [r3, #20]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d105      	bne.n	800cf14 <tcp_free_listen+0x1c>
 800cf08:	4b06      	ldr	r3, [pc, #24]	; (800cf24 <tcp_free_listen+0x2c>)
 800cf0a:	22df      	movs	r2, #223	; 0xdf
 800cf0c:	4906      	ldr	r1, [pc, #24]	; (800cf28 <tcp_free_listen+0x30>)
 800cf0e:	4807      	ldr	r0, [pc, #28]	; (800cf2c <tcp_free_listen+0x34>)
 800cf10:	f008 fb0a 	bl	8015528 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cf14:	6879      	ldr	r1, [r7, #4]
 800cf16:	2002      	movs	r0, #2
 800cf18:	f7fe fefa 	bl	800bd10 <memp_free>
}
 800cf1c:	bf00      	nop
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	0801d7f0 	.word	0x0801d7f0
 800cf28:	0801d85c 	.word	0x0801d85c
 800cf2c:	0801d834 	.word	0x0801d834

0800cf30 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cf34:	f000 fea2 	bl	800dc7c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cf38:	4b07      	ldr	r3, [pc, #28]	; (800cf58 <tcp_tmr+0x28>)
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <tcp_tmr+0x28>)
 800cf42:	701a      	strb	r2, [r3, #0]
 800cf44:	4b04      	ldr	r3, [pc, #16]	; (800cf58 <tcp_tmr+0x28>)
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	f003 0301 	and.w	r3, r3, #1
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d001      	beq.n	800cf54 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cf50:	f000 fb54 	bl	800d5fc <tcp_slowtmr>
  }
}
 800cf54:	bf00      	nop
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	20004a9d 	.word	0x20004a9d

0800cf5c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d105      	bne.n	800cf78 <tcp_remove_listener+0x1c>
 800cf6c:	4b0d      	ldr	r3, [pc, #52]	; (800cfa4 <tcp_remove_listener+0x48>)
 800cf6e:	22ff      	movs	r2, #255	; 0xff
 800cf70:	490d      	ldr	r1, [pc, #52]	; (800cfa8 <tcp_remove_listener+0x4c>)
 800cf72:	480e      	ldr	r0, [pc, #56]	; (800cfac <tcp_remove_listener+0x50>)
 800cf74:	f008 fad8 	bl	8015528 <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	60fb      	str	r3, [r7, #12]
 800cf7c:	e00a      	b.n	800cf94 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d102      	bne.n	800cf8e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	60fb      	str	r3, [r7, #12]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1f1      	bne.n	800cf7e <tcp_remove_listener+0x22>
    }
  }
}
 800cf9a:	bf00      	nop
 800cf9c:	bf00      	nop
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	0801d7f0 	.word	0x0801d7f0
 800cfa8:	0801d878 	.word	0x0801d878
 800cfac:	0801d834 	.word	0x0801d834

0800cfb0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d106      	bne.n	800cfcc <tcp_listen_closed+0x1c>
 800cfbe:	4b14      	ldr	r3, [pc, #80]	; (800d010 <tcp_listen_closed+0x60>)
 800cfc0:	f240 1211 	movw	r2, #273	; 0x111
 800cfc4:	4913      	ldr	r1, [pc, #76]	; (800d014 <tcp_listen_closed+0x64>)
 800cfc6:	4814      	ldr	r0, [pc, #80]	; (800d018 <tcp_listen_closed+0x68>)
 800cfc8:	f008 faae 	bl	8015528 <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	7d1b      	ldrb	r3, [r3, #20]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d006      	beq.n	800cfe2 <tcp_listen_closed+0x32>
 800cfd4:	4b0e      	ldr	r3, [pc, #56]	; (800d010 <tcp_listen_closed+0x60>)
 800cfd6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cfda:	4910      	ldr	r1, [pc, #64]	; (800d01c <tcp_listen_closed+0x6c>)
 800cfdc:	480e      	ldr	r0, [pc, #56]	; (800d018 <tcp_listen_closed+0x68>)
 800cfde:	f008 faa3 	bl	8015528 <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	60fb      	str	r3, [r7, #12]
 800cfe6:	e00b      	b.n	800d000 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cfe8:	4a0d      	ldr	r2, [pc, #52]	; (800d020 <tcp_listen_closed+0x70>)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	6879      	ldr	r1, [r7, #4]
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7ff ffb1 	bl	800cf5c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	3301      	adds	r3, #1
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2b03      	cmp	r3, #3
 800d004:	d9f0      	bls.n	800cfe8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d006:	bf00      	nop
 800d008:	bf00      	nop
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	0801d7f0 	.word	0x0801d7f0
 800d014:	0801d8a0 	.word	0x0801d8a0
 800d018:	0801d834 	.word	0x0801d834
 800d01c:	0801d8ac 	.word	0x0801d8ac
 800d020:	0801f804 	.word	0x0801f804

0800d024 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d024:	b5b0      	push	{r4, r5, r7, lr}
 800d026:	b088      	sub	sp, #32
 800d028:	af04      	add	r7, sp, #16
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	460b      	mov	r3, r1
 800d02e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d106      	bne.n	800d044 <tcp_close_shutdown+0x20>
 800d036:	4b63      	ldr	r3, [pc, #396]	; (800d1c4 <tcp_close_shutdown+0x1a0>)
 800d038:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d03c:	4962      	ldr	r1, [pc, #392]	; (800d1c8 <tcp_close_shutdown+0x1a4>)
 800d03e:	4863      	ldr	r0, [pc, #396]	; (800d1cc <tcp_close_shutdown+0x1a8>)
 800d040:	f008 fa72 	bl	8015528 <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d044:	78fb      	ldrb	r3, [r7, #3]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d066      	beq.n	800d118 <tcp_close_shutdown+0xf4>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	7d1b      	ldrb	r3, [r3, #20]
 800d04e:	2b04      	cmp	r3, #4
 800d050:	d003      	beq.n	800d05a <tcp_close_shutdown+0x36>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	7d1b      	ldrb	r3, [r3, #20]
 800d056:	2b07      	cmp	r3, #7
 800d058:	d15e      	bne.n	800d118 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d104      	bne.n	800d06c <tcp_close_shutdown+0x48>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d066:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d06a:	d055      	beq.n	800d118 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	8b5b      	ldrh	r3, [r3, #26]
 800d070:	f003 0310 	and.w	r3, r3, #16
 800d074:	2b00      	cmp	r3, #0
 800d076:	d106      	bne.n	800d086 <tcp_close_shutdown+0x62>
 800d078:	4b52      	ldr	r3, [pc, #328]	; (800d1c4 <tcp_close_shutdown+0x1a0>)
 800d07a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d07e:	4954      	ldr	r1, [pc, #336]	; (800d1d0 <tcp_close_shutdown+0x1ac>)
 800d080:	4852      	ldr	r0, [pc, #328]	; (800d1cc <tcp_close_shutdown+0x1a8>)
 800d082:	f008 fa51 	bl	8015528 <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d08e:	687d      	ldr	r5, [r7, #4]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	3304      	adds	r3, #4
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	8ad2      	ldrh	r2, [r2, #22]
 800d098:	6879      	ldr	r1, [r7, #4]
 800d09a:	8b09      	ldrh	r1, [r1, #24]
 800d09c:	9102      	str	r1, [sp, #8]
 800d09e:	9201      	str	r2, [sp, #4]
 800d0a0:	9300      	str	r3, [sp, #0]
 800d0a2:	462b      	mov	r3, r5
 800d0a4:	4622      	mov	r2, r4
 800d0a6:	4601      	mov	r1, r0
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f004 fe8d 	bl	8011dc8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f001 f8c6 	bl	800e240 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d0b4:	4b47      	ldr	r3, [pc, #284]	; (800d1d4 <tcp_close_shutdown+0x1b0>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d105      	bne.n	800d0ca <tcp_close_shutdown+0xa6>
 800d0be:	4b45      	ldr	r3, [pc, #276]	; (800d1d4 <tcp_close_shutdown+0x1b0>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	4a43      	ldr	r2, [pc, #268]	; (800d1d4 <tcp_close_shutdown+0x1b0>)
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	e013      	b.n	800d0f2 <tcp_close_shutdown+0xce>
 800d0ca:	4b42      	ldr	r3, [pc, #264]	; (800d1d4 <tcp_close_shutdown+0x1b0>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	60fb      	str	r3, [r7, #12]
 800d0d0:	e00c      	b.n	800d0ec <tcp_close_shutdown+0xc8>
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d104      	bne.n	800d0e6 <tcp_close_shutdown+0xc2>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	68da      	ldr	r2, [r3, #12]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	60da      	str	r2, [r3, #12]
 800d0e4:	e005      	b.n	800d0f2 <tcp_close_shutdown+0xce>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	60fb      	str	r3, [r7, #12]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1ef      	bne.n	800d0d2 <tcp_close_shutdown+0xae>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	60da      	str	r2, [r3, #12]
 800d0f8:	4b37      	ldr	r3, [pc, #220]	; (800d1d8 <tcp_close_shutdown+0x1b4>)
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d0fe:	4b37      	ldr	r3, [pc, #220]	; (800d1dc <tcp_close_shutdown+0x1b8>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	429a      	cmp	r2, r3
 800d106:	d102      	bne.n	800d10e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d108:	f003 fd5a 	bl	8010bc0 <tcp_trigger_input_pcb_close>
 800d10c:	e002      	b.n	800d114 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7ff fed6 	bl	800cec0 <tcp_free>
      }
      return ERR_OK;
 800d114:	2300      	movs	r3, #0
 800d116:	e050      	b.n	800d1ba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	7d1b      	ldrb	r3, [r3, #20]
 800d11c:	2b02      	cmp	r3, #2
 800d11e:	d03b      	beq.n	800d198 <tcp_close_shutdown+0x174>
 800d120:	2b02      	cmp	r3, #2
 800d122:	dc44      	bgt.n	800d1ae <tcp_close_shutdown+0x18a>
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <tcp_close_shutdown+0x10a>
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d02a      	beq.n	800d182 <tcp_close_shutdown+0x15e>
 800d12c:	e03f      	b.n	800d1ae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	8adb      	ldrh	r3, [r3, #22]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d021      	beq.n	800d17a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d136:	4b2a      	ldr	r3, [pc, #168]	; (800d1e0 <tcp_close_shutdown+0x1bc>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d105      	bne.n	800d14c <tcp_close_shutdown+0x128>
 800d140:	4b27      	ldr	r3, [pc, #156]	; (800d1e0 <tcp_close_shutdown+0x1bc>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	4a26      	ldr	r2, [pc, #152]	; (800d1e0 <tcp_close_shutdown+0x1bc>)
 800d148:	6013      	str	r3, [r2, #0]
 800d14a:	e013      	b.n	800d174 <tcp_close_shutdown+0x150>
 800d14c:	4b24      	ldr	r3, [pc, #144]	; (800d1e0 <tcp_close_shutdown+0x1bc>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	60bb      	str	r3, [r7, #8]
 800d152:	e00c      	b.n	800d16e <tcp_close_shutdown+0x14a>
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d104      	bne.n	800d168 <tcp_close_shutdown+0x144>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	68da      	ldr	r2, [r3, #12]
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	60da      	str	r2, [r3, #12]
 800d166:	e005      	b.n	800d174 <tcp_close_shutdown+0x150>
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	60bb      	str	r3, [r7, #8]
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1ef      	bne.n	800d154 <tcp_close_shutdown+0x130>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7ff fea0 	bl	800cec0 <tcp_free>
      break;
 800d180:	e01a      	b.n	800d1b8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f7ff ff14 	bl	800cfb0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d188:	6879      	ldr	r1, [r7, #4]
 800d18a:	4816      	ldr	r0, [pc, #88]	; (800d1e4 <tcp_close_shutdown+0x1c0>)
 800d18c:	f001 f8a8 	bl	800e2e0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff feb1 	bl	800cef8 <tcp_free_listen>
      break;
 800d196:	e00f      	b.n	800d1b8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d198:	6879      	ldr	r1, [r7, #4]
 800d19a:	480e      	ldr	r0, [pc, #56]	; (800d1d4 <tcp_close_shutdown+0x1b0>)
 800d19c:	f001 f8a0 	bl	800e2e0 <tcp_pcb_remove>
 800d1a0:	4b0d      	ldr	r3, [pc, #52]	; (800d1d8 <tcp_close_shutdown+0x1b4>)
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7ff fe8a 	bl	800cec0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d1ac:	e004      	b.n	800d1b8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f81a 	bl	800d1e8 <tcp_close_shutdown_fin>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	e000      	b.n	800d1ba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bdb0      	pop	{r4, r5, r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	0801d7f0 	.word	0x0801d7f0
 800d1c8:	0801d8c4 	.word	0x0801d8c4
 800d1cc:	0801d834 	.word	0x0801d834
 800d1d0:	0801d8e4 	.word	0x0801d8e4
 800d1d4:	2000b638 	.word	0x2000b638
 800d1d8:	2000b634 	.word	0x2000b634
 800d1dc:	2000b64c 	.word	0x2000b64c
 800d1e0:	2000b644 	.word	0x2000b644
 800d1e4:	2000b640 	.word	0x2000b640

0800d1e8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d106      	bne.n	800d204 <tcp_close_shutdown_fin+0x1c>
 800d1f6:	4b2e      	ldr	r3, [pc, #184]	; (800d2b0 <tcp_close_shutdown_fin+0xc8>)
 800d1f8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d1fc:	492d      	ldr	r1, [pc, #180]	; (800d2b4 <tcp_close_shutdown_fin+0xcc>)
 800d1fe:	482e      	ldr	r0, [pc, #184]	; (800d2b8 <tcp_close_shutdown_fin+0xd0>)
 800d200:	f008 f992 	bl	8015528 <printf>

  switch (pcb->state) {
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	7d1b      	ldrb	r3, [r3, #20]
 800d208:	2b07      	cmp	r3, #7
 800d20a:	d020      	beq.n	800d24e <tcp_close_shutdown_fin+0x66>
 800d20c:	2b07      	cmp	r3, #7
 800d20e:	dc2b      	bgt.n	800d268 <tcp_close_shutdown_fin+0x80>
 800d210:	2b03      	cmp	r3, #3
 800d212:	d002      	beq.n	800d21a <tcp_close_shutdown_fin+0x32>
 800d214:	2b04      	cmp	r3, #4
 800d216:	d00d      	beq.n	800d234 <tcp_close_shutdown_fin+0x4c>
 800d218:	e026      	b.n	800d268 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f003 fee2 	bl	8010fe4 <tcp_send_fin>
 800d220:	4603      	mov	r3, r0
 800d222:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d11f      	bne.n	800d26c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2205      	movs	r2, #5
 800d230:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d232:	e01b      	b.n	800d26c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f003 fed5 	bl	8010fe4 <tcp_send_fin>
 800d23a:	4603      	mov	r3, r0
 800d23c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d114      	bne.n	800d270 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2205      	movs	r2, #5
 800d24a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d24c:	e010      	b.n	800d270 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f003 fec8 	bl	8010fe4 <tcp_send_fin>
 800d254:	4603      	mov	r3, r0
 800d256:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d109      	bne.n	800d274 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2209      	movs	r2, #9
 800d264:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d266:	e005      	b.n	800d274 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d268:	2300      	movs	r3, #0
 800d26a:	e01c      	b.n	800d2a6 <tcp_close_shutdown_fin+0xbe>
      break;
 800d26c:	bf00      	nop
 800d26e:	e002      	b.n	800d276 <tcp_close_shutdown_fin+0x8e>
      break;
 800d270:	bf00      	nop
 800d272:	e000      	b.n	800d276 <tcp_close_shutdown_fin+0x8e>
      break;
 800d274:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d103      	bne.n	800d286 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f003 ffee 	bl	8011260 <tcp_output>
 800d284:	e00d      	b.n	800d2a2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28e:	d108      	bne.n	800d2a2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	8b5b      	ldrh	r3, [r3, #26]
 800d294:	f043 0308 	orr.w	r3, r3, #8
 800d298:	b29a      	uxth	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	e001      	b.n	800d2a6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d2a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	0801d7f0 	.word	0x0801d7f0
 800d2b4:	0801d8a0 	.word	0x0801d8a0
 800d2b8:	0801d834 	.word	0x0801d834

0800d2bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d109      	bne.n	800d2de <tcp_close+0x22>
 800d2ca:	4b0f      	ldr	r3, [pc, #60]	; (800d308 <tcp_close+0x4c>)
 800d2cc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d2d0:	490e      	ldr	r1, [pc, #56]	; (800d30c <tcp_close+0x50>)
 800d2d2:	480f      	ldr	r0, [pc, #60]	; (800d310 <tcp_close+0x54>)
 800d2d4:	f008 f928 	bl	8015528 <printf>
 800d2d8:	f06f 030f 	mvn.w	r3, #15
 800d2dc:	e00f      	b.n	800d2fe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	7d1b      	ldrb	r3, [r3, #20]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d006      	beq.n	800d2f4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	8b5b      	ldrh	r3, [r3, #26]
 800d2ea:	f043 0310 	orr.w	r3, r3, #16
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d2f4:	2101      	movs	r1, #1
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f7ff fe94 	bl	800d024 <tcp_close_shutdown>
 800d2fc:	4603      	mov	r3, r0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	0801d7f0 	.word	0x0801d7f0
 800d30c:	0801d900 	.word	0x0801d900
 800d310:	0801d834 	.word	0x0801d834

0800d314 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08e      	sub	sp, #56	; 0x38
 800d318:	af04      	add	r7, sp, #16
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d107      	bne.n	800d334 <tcp_abandon+0x20>
 800d324:	4b52      	ldr	r3, [pc, #328]	; (800d470 <tcp_abandon+0x15c>)
 800d326:	f240 223d 	movw	r2, #573	; 0x23d
 800d32a:	4952      	ldr	r1, [pc, #328]	; (800d474 <tcp_abandon+0x160>)
 800d32c:	4852      	ldr	r0, [pc, #328]	; (800d478 <tcp_abandon+0x164>)
 800d32e:	f008 f8fb 	bl	8015528 <printf>
 800d332:	e099      	b.n	800d468 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	7d1b      	ldrb	r3, [r3, #20]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d106      	bne.n	800d34a <tcp_abandon+0x36>
 800d33c:	4b4c      	ldr	r3, [pc, #304]	; (800d470 <tcp_abandon+0x15c>)
 800d33e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d342:	494e      	ldr	r1, [pc, #312]	; (800d47c <tcp_abandon+0x168>)
 800d344:	484c      	ldr	r0, [pc, #304]	; (800d478 <tcp_abandon+0x164>)
 800d346:	f008 f8ef 	bl	8015528 <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	7d1b      	ldrb	r3, [r3, #20]
 800d34e:	2b0a      	cmp	r3, #10
 800d350:	d107      	bne.n	800d362 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d352:	6879      	ldr	r1, [r7, #4]
 800d354:	484a      	ldr	r0, [pc, #296]	; (800d480 <tcp_abandon+0x16c>)
 800d356:	f000 ffc3 	bl	800e2e0 <tcp_pcb_remove>
    tcp_free(pcb);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7ff fdb0 	bl	800cec0 <tcp_free>
 800d360:	e082      	b.n	800d468 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d362:	2300      	movs	r3, #0
 800d364:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d366:	2300      	movs	r3, #0
 800d368:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d36e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d374:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d37c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	691b      	ldr	r3, [r3, #16]
 800d382:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	7d1b      	ldrb	r3, [r3, #20]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d126      	bne.n	800d3da <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	8adb      	ldrh	r3, [r3, #22]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d02e      	beq.n	800d3f2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d394:	4b3b      	ldr	r3, [pc, #236]	; (800d484 <tcp_abandon+0x170>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d105      	bne.n	800d3aa <tcp_abandon+0x96>
 800d39e:	4b39      	ldr	r3, [pc, #228]	; (800d484 <tcp_abandon+0x170>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	4a37      	ldr	r2, [pc, #220]	; (800d484 <tcp_abandon+0x170>)
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	e013      	b.n	800d3d2 <tcp_abandon+0xbe>
 800d3aa:	4b36      	ldr	r3, [pc, #216]	; (800d484 <tcp_abandon+0x170>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	61fb      	str	r3, [r7, #28]
 800d3b0:	e00c      	b.n	800d3cc <tcp_abandon+0xb8>
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d104      	bne.n	800d3c6 <tcp_abandon+0xb2>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	68da      	ldr	r2, [r3, #12]
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	60da      	str	r2, [r3, #12]
 800d3c4:	e005      	b.n	800d3d2 <tcp_abandon+0xbe>
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	61fb      	str	r3, [r7, #28]
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d1ef      	bne.n	800d3b2 <tcp_abandon+0x9e>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	60da      	str	r2, [r3, #12]
 800d3d8:	e00b      	b.n	800d3f2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	8adb      	ldrh	r3, [r3, #22]
 800d3e2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d3e4:	6879      	ldr	r1, [r7, #4]
 800d3e6:	4828      	ldr	r0, [pc, #160]	; (800d488 <tcp_abandon+0x174>)
 800d3e8:	f000 ff7a 	bl	800e2e0 <tcp_pcb_remove>
 800d3ec:	4b27      	ldr	r3, [pc, #156]	; (800d48c <tcp_abandon+0x178>)
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d004      	beq.n	800d404 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 fd1c 	bl	800de3c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d004      	beq.n	800d416 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d410:	4618      	mov	r0, r3
 800d412:	f000 fd13 	bl	800de3c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d004      	beq.n	800d428 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fd0a 	bl	800de3c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00e      	beq.n	800d44c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d42e:	6879      	ldr	r1, [r7, #4]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	3304      	adds	r3, #4
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	8b12      	ldrh	r2, [r2, #24]
 800d438:	9202      	str	r2, [sp, #8]
 800d43a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d43c:	9201      	str	r2, [sp, #4]
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	460b      	mov	r3, r1
 800d442:	697a      	ldr	r2, [r7, #20]
 800d444:	69b9      	ldr	r1, [r7, #24]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f004 fcbe 	bl	8011dc8 <tcp_rst>
    }
    last_state = pcb->state;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7d1b      	ldrb	r3, [r3, #20]
 800d450:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7ff fd34 	bl	800cec0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d004      	beq.n	800d468 <tcp_abandon+0x154>
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	f06f 010c 	mvn.w	r1, #12
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	4798      	blx	r3
  }
}
 800d468:	3728      	adds	r7, #40	; 0x28
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	0801d7f0 	.word	0x0801d7f0
 800d474:	0801d934 	.word	0x0801d934
 800d478:	0801d834 	.word	0x0801d834
 800d47c:	0801d950 	.word	0x0801d950
 800d480:	2000b648 	.word	0x2000b648
 800d484:	2000b644 	.word	0x2000b644
 800d488:	2000b638 	.word	0x2000b638
 800d48c:	2000b634 	.word	0x2000b634

0800d490 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d498:	2101      	movs	r1, #1
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7ff ff3a 	bl	800d314 <tcp_abandon>
}
 800d4a0:	bf00      	nop
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d106      	bne.n	800d4c4 <tcp_update_rcv_ann_wnd+0x1c>
 800d4b6:	4b25      	ldr	r3, [pc, #148]	; (800d54c <tcp_update_rcv_ann_wnd+0xa4>)
 800d4b8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d4bc:	4924      	ldr	r1, [pc, #144]	; (800d550 <tcp_update_rcv_ann_wnd+0xa8>)
 800d4be:	4825      	ldr	r0, [pc, #148]	; (800d554 <tcp_update_rcv_ann_wnd+0xac>)
 800d4c0:	f008 f832 	bl	8015528 <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d4cc:	4413      	add	r3, r2
 800d4ce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d4d8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d4dc:	bf28      	it	cs
 800d4de:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d4e2:	b292      	uxth	r2, r2
 800d4e4:	4413      	add	r3, r2
 800d4e6:	68fa      	ldr	r2, [r7, #12]
 800d4e8:	1ad3      	subs	r3, r2, r3
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	db08      	blt.n	800d500 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	e020      	b.n	800d542 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d508:	1ad3      	subs	r3, r2, r3
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	dd03      	ble.n	800d516 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d514:	e014      	b.n	800d540 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51e:	1ad3      	subs	r3, r2, r3
 800d520:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d528:	d306      	bcc.n	800d538 <tcp_update_rcv_ann_wnd+0x90>
 800d52a:	4b08      	ldr	r3, [pc, #32]	; (800d54c <tcp_update_rcv_ann_wnd+0xa4>)
 800d52c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d530:	4909      	ldr	r1, [pc, #36]	; (800d558 <tcp_update_rcv_ann_wnd+0xb0>)
 800d532:	4808      	ldr	r0, [pc, #32]	; (800d554 <tcp_update_rcv_ann_wnd+0xac>)
 800d534:	f007 fff8 	bl	8015528 <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d540:	2300      	movs	r3, #0
  }
}
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	0801d7f0 	.word	0x0801d7f0
 800d550:	0801da4c 	.word	0x0801da4c
 800d554:	0801d834 	.word	0x0801d834
 800d558:	0801da70 	.word	0x0801da70

0800d55c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	460b      	mov	r3, r1
 800d566:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d107      	bne.n	800d57e <tcp_recved+0x22>
 800d56e:	4b1f      	ldr	r3, [pc, #124]	; (800d5ec <tcp_recved+0x90>)
 800d570:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d574:	491e      	ldr	r1, [pc, #120]	; (800d5f0 <tcp_recved+0x94>)
 800d576:	481f      	ldr	r0, [pc, #124]	; (800d5f4 <tcp_recved+0x98>)
 800d578:	f007 ffd6 	bl	8015528 <printf>
 800d57c:	e032      	b.n	800d5e4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	7d1b      	ldrb	r3, [r3, #20]
 800d582:	2b01      	cmp	r3, #1
 800d584:	d106      	bne.n	800d594 <tcp_recved+0x38>
 800d586:	4b19      	ldr	r3, [pc, #100]	; (800d5ec <tcp_recved+0x90>)
 800d588:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d58c:	491a      	ldr	r1, [pc, #104]	; (800d5f8 <tcp_recved+0x9c>)
 800d58e:	4819      	ldr	r0, [pc, #100]	; (800d5f4 <tcp_recved+0x98>)
 800d590:	f007 ffca 	bl	8015528 <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d598:	887b      	ldrh	r3, [r7, #2]
 800d59a:	4413      	add	r3, r2
 800d59c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d59e:	89fb      	ldrh	r3, [r7, #14]
 800d5a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d5a4:	d804      	bhi.n	800d5b0 <tcp_recved+0x54>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5aa:	89fa      	ldrh	r2, [r7, #14]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d204      	bcs.n	800d5ba <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d5b6:	851a      	strh	r2, [r3, #40]	; 0x28
 800d5b8:	e002      	b.n	800d5c0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	89fa      	ldrh	r2, [r7, #14]
 800d5be:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7ff ff71 	bl	800d4a8 <tcp_update_rcv_ann_wnd>
 800d5c6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d5ce:	d309      	bcc.n	800d5e4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	8b5b      	ldrh	r3, [r3, #26]
 800d5d4:	f043 0302 	orr.w	r3, r3, #2
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f003 fe3e 	bl	8011260 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	0801d7f0 	.word	0x0801d7f0
 800d5f0:	0801da8c 	.word	0x0801da8c
 800d5f4:	0801d834 	.word	0x0801d834
 800d5f8:	0801daa4 	.word	0x0801daa4

0800d5fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d5fc:	b5b0      	push	{r4, r5, r7, lr}
 800d5fe:	b090      	sub	sp, #64	; 0x40
 800d600:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d608:	4b94      	ldr	r3, [pc, #592]	; (800d85c <tcp_slowtmr+0x260>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	3301      	adds	r3, #1
 800d60e:	4a93      	ldr	r2, [pc, #588]	; (800d85c <tcp_slowtmr+0x260>)
 800d610:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d612:	4b93      	ldr	r3, [pc, #588]	; (800d860 <tcp_slowtmr+0x264>)
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	3301      	adds	r3, #1
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	4b91      	ldr	r3, [pc, #580]	; (800d860 <tcp_slowtmr+0x264>)
 800d61c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d61e:	2300      	movs	r3, #0
 800d620:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d622:	4b90      	ldr	r3, [pc, #576]	; (800d864 <tcp_slowtmr+0x268>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d628:	e29d      	b.n	800db66 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62c:	7d1b      	ldrb	r3, [r3, #20]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d106      	bne.n	800d640 <tcp_slowtmr+0x44>
 800d632:	4b8d      	ldr	r3, [pc, #564]	; (800d868 <tcp_slowtmr+0x26c>)
 800d634:	f240 42be 	movw	r2, #1214	; 0x4be
 800d638:	498c      	ldr	r1, [pc, #560]	; (800d86c <tcp_slowtmr+0x270>)
 800d63a:	488d      	ldr	r0, [pc, #564]	; (800d870 <tcp_slowtmr+0x274>)
 800d63c:	f007 ff74 	bl	8015528 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d642:	7d1b      	ldrb	r3, [r3, #20]
 800d644:	2b01      	cmp	r3, #1
 800d646:	d106      	bne.n	800d656 <tcp_slowtmr+0x5a>
 800d648:	4b87      	ldr	r3, [pc, #540]	; (800d868 <tcp_slowtmr+0x26c>)
 800d64a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d64e:	4989      	ldr	r1, [pc, #548]	; (800d874 <tcp_slowtmr+0x278>)
 800d650:	4887      	ldr	r0, [pc, #540]	; (800d870 <tcp_slowtmr+0x274>)
 800d652:	f007 ff69 	bl	8015528 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d658:	7d1b      	ldrb	r3, [r3, #20]
 800d65a:	2b0a      	cmp	r3, #10
 800d65c:	d106      	bne.n	800d66c <tcp_slowtmr+0x70>
 800d65e:	4b82      	ldr	r3, [pc, #520]	; (800d868 <tcp_slowtmr+0x26c>)
 800d660:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d664:	4984      	ldr	r1, [pc, #528]	; (800d878 <tcp_slowtmr+0x27c>)
 800d666:	4882      	ldr	r0, [pc, #520]	; (800d870 <tcp_slowtmr+0x274>)
 800d668:	f007 ff5e 	bl	8015528 <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66e:	7f9a      	ldrb	r2, [r3, #30]
 800d670:	4b7b      	ldr	r3, [pc, #492]	; (800d860 <tcp_slowtmr+0x264>)
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	429a      	cmp	r2, r3
 800d676:	d105      	bne.n	800d684 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d682:	e270      	b.n	800db66 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d684:	4b76      	ldr	r3, [pc, #472]	; (800d860 <tcp_slowtmr+0x264>)
 800d686:	781a      	ldrb	r2, [r3, #0]
 800d688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d68c:	2300      	movs	r3, #0
 800d68e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d692:	2300      	movs	r3, #0
 800d694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69a:	7d1b      	ldrb	r3, [r3, #20]
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d10a      	bne.n	800d6b6 <tcp_slowtmr+0xba>
 800d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6a6:	2b05      	cmp	r3, #5
 800d6a8:	d905      	bls.n	800d6b6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d6aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6b4:	e11e      	b.n	800d8f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6bc:	2b0b      	cmp	r3, #11
 800d6be:	d905      	bls.n	800d6cc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6ca:	e113      	b.n	800d8f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d075      	beq.n	800d7c2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d006      	beq.n	800d6ec <tcp_slowtmr+0xf0>
 800d6de:	4b62      	ldr	r3, [pc, #392]	; (800d868 <tcp_slowtmr+0x26c>)
 800d6e0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d6e4:	4965      	ldr	r1, [pc, #404]	; (800d87c <tcp_slowtmr+0x280>)
 800d6e6:	4862      	ldr	r0, [pc, #392]	; (800d870 <tcp_slowtmr+0x274>)
 800d6e8:	f007 ff1e 	bl	8015528 <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d106      	bne.n	800d702 <tcp_slowtmr+0x106>
 800d6f4:	4b5c      	ldr	r3, [pc, #368]	; (800d868 <tcp_slowtmr+0x26c>)
 800d6f6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d6fa:	4961      	ldr	r1, [pc, #388]	; (800d880 <tcp_slowtmr+0x284>)
 800d6fc:	485c      	ldr	r0, [pc, #368]	; (800d870 <tcp_slowtmr+0x274>)
 800d6fe:	f007 ff13 	bl	8015528 <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d704:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d708:	2b0b      	cmp	r3, #11
 800d70a:	d905      	bls.n	800d718 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d710:	3301      	adds	r3, #1
 800d712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d716:	e0ed      	b.n	800d8f4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d71e:	3b01      	subs	r3, #1
 800d720:	4a58      	ldr	r2, [pc, #352]	; (800d884 <tcp_slowtmr+0x288>)
 800d722:	5cd3      	ldrb	r3, [r2, r3]
 800d724:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d72c:	7c7a      	ldrb	r2, [r7, #17]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d907      	bls.n	800d742 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d734:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d738:	3301      	adds	r3, #1
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d744:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d748:	7c7a      	ldrb	r2, [r7, #17]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	f200 80d2 	bhi.w	800d8f4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d750:	2301      	movs	r3, #1
 800d752:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d108      	bne.n	800d770 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d75e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d760:	f004 fc26 	bl	8011fb0 <tcp_zero_window_probe>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d014      	beq.n	800d794 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d76a:	2300      	movs	r3, #0
 800d76c:	623b      	str	r3, [r7, #32]
 800d76e:	e011      	b.n	800d794 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d776:	4619      	mov	r1, r3
 800d778:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d77a:	f003 faeb 	bl	8010d54 <tcp_split_unsent_seg>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d107      	bne.n	800d794 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d786:	f003 fd6b 	bl	8011260 <tcp_output>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d790:	2300      	movs	r3, #0
 800d792:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d794:	6a3b      	ldr	r3, [r7, #32]
 800d796:	2b00      	cmp	r3, #0
 800d798:	f000 80ac 	beq.w	800d8f4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d7aa:	2b06      	cmp	r3, #6
 800d7ac:	f200 80a2 	bhi.w	800d8f4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	b2da      	uxtb	r2, r3
 800d7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d7c0:	e098      	b.n	800d8f4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	db0f      	blt.n	800d7ec <tcp_slowtmr+0x1f0>
 800d7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d008      	beq.n	800d7ec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	b21a      	sxth	r2, r3
 800d7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	db7b      	blt.n	800d8f4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d7fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7fe:	f004 f821 	bl	8011844 <tcp_rexmit_rto_prepare>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d007      	beq.n	800d818 <tcp_slowtmr+0x21c>
 800d808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d171      	bne.n	800d8f4 <tcp_slowtmr+0x2f8>
 800d810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d814:	2b00      	cmp	r3, #0
 800d816:	d06d      	beq.n	800d8f4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81a:	7d1b      	ldrb	r3, [r3, #20]
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d03a      	beq.n	800d896 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d822:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d826:	2b0c      	cmp	r3, #12
 800d828:	bf28      	it	cs
 800d82a:	230c      	movcs	r3, #12
 800d82c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d834:	10db      	asrs	r3, r3, #3
 800d836:	b21b      	sxth	r3, r3
 800d838:	461a      	mov	r2, r3
 800d83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d840:	4413      	add	r3, r2
 800d842:	7efa      	ldrb	r2, [r7, #27]
 800d844:	4910      	ldr	r1, [pc, #64]	; (800d888 <tcp_slowtmr+0x28c>)
 800d846:	5c8a      	ldrb	r2, [r1, r2]
 800d848:	4093      	lsls	r3, r2
 800d84a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d852:	4293      	cmp	r3, r2
 800d854:	dc1a      	bgt.n	800d88c <tcp_slowtmr+0x290>
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	b21a      	sxth	r2, r3
 800d85a:	e019      	b.n	800d890 <tcp_slowtmr+0x294>
 800d85c:	2000b63c 	.word	0x2000b63c
 800d860:	20004a9e 	.word	0x20004a9e
 800d864:	2000b638 	.word	0x2000b638
 800d868:	0801d7f0 	.word	0x0801d7f0
 800d86c:	0801db34 	.word	0x0801db34
 800d870:	0801d834 	.word	0x0801d834
 800d874:	0801db60 	.word	0x0801db60
 800d878:	0801db8c 	.word	0x0801db8c
 800d87c:	0801dbbc 	.word	0x0801dbbc
 800d880:	0801dbf0 	.word	0x0801dbf0
 800d884:	0801f7fc 	.word	0x0801f7fc
 800d888:	0801f7ec 	.word	0x0801f7ec
 800d88c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d892:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d898:	2200      	movs	r2, #0
 800d89a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	bf28      	it	cs
 800d8ac:	4613      	movcs	r3, r2
 800d8ae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d8b0:	8a7b      	ldrh	r3, [r7, #18]
 800d8b2:	085b      	lsrs	r3, r3, #1
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8c6:	005b      	lsls	r3, r3, #1
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d206      	bcs.n	800d8dc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8d2:	005b      	lsls	r3, r3, #1
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8de:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d8ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8f0:	f004 f818 	bl	8011924 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	7d1b      	ldrb	r3, [r3, #20]
 800d8f8:	2b06      	cmp	r3, #6
 800d8fa:	d111      	bne.n	800d920 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fe:	8b5b      	ldrh	r3, [r3, #26]
 800d900:	f003 0310 	and.w	r3, r3, #16
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00b      	beq.n	800d920 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d908:	4b9c      	ldr	r3, [pc, #624]	; (800db7c <tcp_slowtmr+0x580>)
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	6a1b      	ldr	r3, [r3, #32]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	2b28      	cmp	r3, #40	; 0x28
 800d914:	d904      	bls.n	800d920 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d91a:	3301      	adds	r3, #1
 800d91c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d922:	7a5b      	ldrb	r3, [r3, #9]
 800d924:	f003 0308 	and.w	r3, r3, #8
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d04a      	beq.n	800d9c2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d930:	2b04      	cmp	r3, #4
 800d932:	d003      	beq.n	800d93c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d936:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d938:	2b07      	cmp	r3, #7
 800d93a:	d142      	bne.n	800d9c2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d93c:	4b8f      	ldr	r3, [pc, #572]	; (800db7c <tcp_slowtmr+0x580>)
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d942:	6a1b      	ldr	r3, [r3, #32]
 800d944:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d948:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d94c:	4b8c      	ldr	r3, [pc, #560]	; (800db80 <tcp_slowtmr+0x584>)
 800d94e:	440b      	add	r3, r1
 800d950:	498c      	ldr	r1, [pc, #560]	; (800db84 <tcp_slowtmr+0x588>)
 800d952:	fba1 1303 	umull	r1, r3, r1, r3
 800d956:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d958:	429a      	cmp	r2, r3
 800d95a:	d90a      	bls.n	800d972 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d960:	3301      	adds	r3, #1
 800d962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d96a:	3301      	adds	r3, #1
 800d96c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d970:	e027      	b.n	800d9c2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d972:	4b82      	ldr	r3, [pc, #520]	; (800db7c <tcp_slowtmr+0x580>)
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d978:	6a1b      	ldr	r3, [r3, #32]
 800d97a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d984:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d988:	4618      	mov	r0, r3
 800d98a:	4b7f      	ldr	r3, [pc, #508]	; (800db88 <tcp_slowtmr+0x58c>)
 800d98c:	fb03 f300 	mul.w	r3, r3, r0
 800d990:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d992:	497c      	ldr	r1, [pc, #496]	; (800db84 <tcp_slowtmr+0x588>)
 800d994:	fba1 1303 	umull	r1, r3, r1, r3
 800d998:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d911      	bls.n	800d9c2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d99e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9a0:	f004 fac6 	bl	8011f30 <tcp_keepalive>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d9aa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d107      	bne.n	800d9c2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9be:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d011      	beq.n	800d9ee <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d9ca:	4b6c      	ldr	r3, [pc, #432]	; (800db7c <tcp_slowtmr+0x580>)
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d0:	6a1b      	ldr	r3, [r3, #32]
 800d9d2:	1ad2      	subs	r2, r2, r3
 800d9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d9da:	4619      	mov	r1, r3
 800d9dc:	460b      	mov	r3, r1
 800d9de:	005b      	lsls	r3, r3, #1
 800d9e0:	440b      	add	r3, r1
 800d9e2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d302      	bcc.n	800d9ee <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d9e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9ea:	f000 fddd 	bl	800e5a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f0:	7d1b      	ldrb	r3, [r3, #20]
 800d9f2:	2b03      	cmp	r3, #3
 800d9f4:	d10b      	bne.n	800da0e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9f6:	4b61      	ldr	r3, [pc, #388]	; (800db7c <tcp_slowtmr+0x580>)
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fc:	6a1b      	ldr	r3, [r3, #32]
 800d9fe:	1ad3      	subs	r3, r2, r3
 800da00:	2b28      	cmp	r3, #40	; 0x28
 800da02:	d904      	bls.n	800da0e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800da04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da08:	3301      	adds	r3, #1
 800da0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da10:	7d1b      	ldrb	r3, [r3, #20]
 800da12:	2b09      	cmp	r3, #9
 800da14:	d10b      	bne.n	800da2e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800da16:	4b59      	ldr	r3, [pc, #356]	; (800db7c <tcp_slowtmr+0x580>)
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1c:	6a1b      	ldr	r3, [r3, #32]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	2bf0      	cmp	r3, #240	; 0xf0
 800da22:	d904      	bls.n	800da2e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800da24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da28:	3301      	adds	r3, #1
 800da2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800da2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da32:	2b00      	cmp	r3, #0
 800da34:	d060      	beq.n	800daf8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da3c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800da3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da40:	f000 fbfe 	bl	800e240 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800da44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da46:	2b00      	cmp	r3, #0
 800da48:	d010      	beq.n	800da6c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800da4a:	4b50      	ldr	r3, [pc, #320]	; (800db8c <tcp_slowtmr+0x590>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da50:	429a      	cmp	r2, r3
 800da52:	d106      	bne.n	800da62 <tcp_slowtmr+0x466>
 800da54:	4b4e      	ldr	r3, [pc, #312]	; (800db90 <tcp_slowtmr+0x594>)
 800da56:	f240 526d 	movw	r2, #1389	; 0x56d
 800da5a:	494e      	ldr	r1, [pc, #312]	; (800db94 <tcp_slowtmr+0x598>)
 800da5c:	484e      	ldr	r0, [pc, #312]	; (800db98 <tcp_slowtmr+0x59c>)
 800da5e:	f007 fd63 	bl	8015528 <printf>
        prev->next = pcb->next;
 800da62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da64:	68da      	ldr	r2, [r3, #12]
 800da66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da68:	60da      	str	r2, [r3, #12]
 800da6a:	e00f      	b.n	800da8c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800da6c:	4b47      	ldr	r3, [pc, #284]	; (800db8c <tcp_slowtmr+0x590>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da72:	429a      	cmp	r2, r3
 800da74:	d006      	beq.n	800da84 <tcp_slowtmr+0x488>
 800da76:	4b46      	ldr	r3, [pc, #280]	; (800db90 <tcp_slowtmr+0x594>)
 800da78:	f240 5271 	movw	r2, #1393	; 0x571
 800da7c:	4947      	ldr	r1, [pc, #284]	; (800db9c <tcp_slowtmr+0x5a0>)
 800da7e:	4846      	ldr	r0, [pc, #280]	; (800db98 <tcp_slowtmr+0x59c>)
 800da80:	f007 fd52 	bl	8015528 <printf>
        tcp_active_pcbs = pcb->next;
 800da84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	4a40      	ldr	r2, [pc, #256]	; (800db8c <tcp_slowtmr+0x590>)
 800da8a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800da8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da90:	2b00      	cmp	r3, #0
 800da92:	d013      	beq.n	800dabc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800da94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da96:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800da98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800da9c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800da9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa0:	3304      	adds	r3, #4
 800daa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daa4:	8ad2      	ldrh	r2, [r2, #22]
 800daa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800daa8:	8b09      	ldrh	r1, [r1, #24]
 800daaa:	9102      	str	r1, [sp, #8]
 800daac:	9201      	str	r2, [sp, #4]
 800daae:	9300      	str	r3, [sp, #0]
 800dab0:	462b      	mov	r3, r5
 800dab2:	4622      	mov	r2, r4
 800dab4:	4601      	mov	r1, r0
 800dab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dab8:	f004 f986 	bl	8011dc8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800dabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800dac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac4:	7d1b      	ldrb	r3, [r3, #20]
 800dac6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800dac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daca:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800dacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dad2:	6838      	ldr	r0, [r7, #0]
 800dad4:	f7ff f9f4 	bl	800cec0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800dad8:	4b31      	ldr	r3, [pc, #196]	; (800dba0 <tcp_slowtmr+0x5a4>)
 800dada:	2200      	movs	r2, #0
 800dadc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d004      	beq.n	800daee <tcp_slowtmr+0x4f2>
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f06f 010c 	mvn.w	r1, #12
 800daea:	68b8      	ldr	r0, [r7, #8]
 800daec:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800daee:	4b2c      	ldr	r3, [pc, #176]	; (800dba0 <tcp_slowtmr+0x5a4>)
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d037      	beq.n	800db66 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800daf6:	e592      	b.n	800d61e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800db02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db04:	7f1b      	ldrb	r3, [r3, #28]
 800db06:	3301      	adds	r3, #1
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800db0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db10:	7f1a      	ldrb	r2, [r3, #28]
 800db12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db14:	7f5b      	ldrb	r3, [r3, #29]
 800db16:	429a      	cmp	r2, r3
 800db18:	d325      	bcc.n	800db66 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800db1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1c:	2200      	movs	r2, #0
 800db1e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800db20:	4b1f      	ldr	r3, [pc, #124]	; (800dba0 <tcp_slowtmr+0x5a4>)
 800db22:	2200      	movs	r2, #0
 800db24:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800db26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00b      	beq.n	800db48 <tcp_slowtmr+0x54c>
 800db30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db38:	6912      	ldr	r2, [r2, #16]
 800db3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db3c:	4610      	mov	r0, r2
 800db3e:	4798      	blx	r3
 800db40:	4603      	mov	r3, r0
 800db42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800db46:	e002      	b.n	800db4e <tcp_slowtmr+0x552>
 800db48:	2300      	movs	r3, #0
 800db4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800db4e:	4b14      	ldr	r3, [pc, #80]	; (800dba0 <tcp_slowtmr+0x5a4>)
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d000      	beq.n	800db58 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800db56:	e562      	b.n	800d61e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800db58:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d102      	bne.n	800db66 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800db60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db62:	f003 fb7d 	bl	8011260 <tcp_output>
  while (pcb != NULL) {
 800db66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f47f ad5e 	bne.w	800d62a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800db6e:	2300      	movs	r3, #0
 800db70:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800db72:	4b0c      	ldr	r3, [pc, #48]	; (800dba4 <tcp_slowtmr+0x5a8>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800db78:	e069      	b.n	800dc4e <tcp_slowtmr+0x652>
 800db7a:	bf00      	nop
 800db7c:	2000b63c 	.word	0x2000b63c
 800db80:	000a4cb8 	.word	0x000a4cb8
 800db84:	10624dd3 	.word	0x10624dd3
 800db88:	000124f8 	.word	0x000124f8
 800db8c:	2000b638 	.word	0x2000b638
 800db90:	0801d7f0 	.word	0x0801d7f0
 800db94:	0801dc28 	.word	0x0801dc28
 800db98:	0801d834 	.word	0x0801d834
 800db9c:	0801dc54 	.word	0x0801dc54
 800dba0:	2000b634 	.word	0x2000b634
 800dba4:	2000b648 	.word	0x2000b648
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbaa:	7d1b      	ldrb	r3, [r3, #20]
 800dbac:	2b0a      	cmp	r3, #10
 800dbae:	d006      	beq.n	800dbbe <tcp_slowtmr+0x5c2>
 800dbb0:	4b2b      	ldr	r3, [pc, #172]	; (800dc60 <tcp_slowtmr+0x664>)
 800dbb2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800dbb6:	492b      	ldr	r1, [pc, #172]	; (800dc64 <tcp_slowtmr+0x668>)
 800dbb8:	482b      	ldr	r0, [pc, #172]	; (800dc68 <tcp_slowtmr+0x66c>)
 800dbba:	f007 fcb5 	bl	8015528 <printf>
    pcb_remove = 0;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dbc4:	4b29      	ldr	r3, [pc, #164]	; (800dc6c <tcp_slowtmr+0x670>)
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	6a1b      	ldr	r3, [r3, #32]
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	2bf0      	cmp	r3, #240	; 0xf0
 800dbd0:	d904      	bls.n	800dbdc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800dbd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dbdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d02f      	beq.n	800dc44 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dbe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbe6:	f000 fb2b 	bl	800e240 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d010      	beq.n	800dc12 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dbf0:	4b1f      	ldr	r3, [pc, #124]	; (800dc70 <tcp_slowtmr+0x674>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d106      	bne.n	800dc08 <tcp_slowtmr+0x60c>
 800dbfa:	4b19      	ldr	r3, [pc, #100]	; (800dc60 <tcp_slowtmr+0x664>)
 800dbfc:	f240 52af 	movw	r2, #1455	; 0x5af
 800dc00:	491c      	ldr	r1, [pc, #112]	; (800dc74 <tcp_slowtmr+0x678>)
 800dc02:	4819      	ldr	r0, [pc, #100]	; (800dc68 <tcp_slowtmr+0x66c>)
 800dc04:	f007 fc90 	bl	8015528 <printf>
        prev->next = pcb->next;
 800dc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0a:	68da      	ldr	r2, [r3, #12]
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	60da      	str	r2, [r3, #12]
 800dc10:	e00f      	b.n	800dc32 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dc12:	4b17      	ldr	r3, [pc, #92]	; (800dc70 <tcp_slowtmr+0x674>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d006      	beq.n	800dc2a <tcp_slowtmr+0x62e>
 800dc1c:	4b10      	ldr	r3, [pc, #64]	; (800dc60 <tcp_slowtmr+0x664>)
 800dc1e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800dc22:	4915      	ldr	r1, [pc, #84]	; (800dc78 <tcp_slowtmr+0x67c>)
 800dc24:	4810      	ldr	r0, [pc, #64]	; (800dc68 <tcp_slowtmr+0x66c>)
 800dc26:	f007 fc7f 	bl	8015528 <printf>
        tcp_tw_pcbs = pcb->next;
 800dc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	4a10      	ldr	r2, [pc, #64]	; (800dc70 <tcp_slowtmr+0x674>)
 800dc30:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800dc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc34:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800dc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dc3c:	69f8      	ldr	r0, [r7, #28]
 800dc3e:	f7ff f93f 	bl	800cec0 <tcp_free>
 800dc42:	e004      	b.n	800dc4e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800dc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1a9      	bne.n	800dba8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800dc54:	bf00      	nop
 800dc56:	bf00      	nop
 800dc58:	3730      	adds	r7, #48	; 0x30
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bdb0      	pop	{r4, r5, r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	0801d7f0 	.word	0x0801d7f0
 800dc64:	0801dc80 	.word	0x0801dc80
 800dc68:	0801d834 	.word	0x0801d834
 800dc6c:	2000b63c 	.word	0x2000b63c
 800dc70:	2000b648 	.word	0x2000b648
 800dc74:	0801dcb0 	.word	0x0801dcb0
 800dc78:	0801dcd8 	.word	0x0801dcd8

0800dc7c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dc82:	4b2d      	ldr	r3, [pc, #180]	; (800dd38 <tcp_fasttmr+0xbc>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	3301      	adds	r3, #1
 800dc88:	b2da      	uxtb	r2, r3
 800dc8a:	4b2b      	ldr	r3, [pc, #172]	; (800dd38 <tcp_fasttmr+0xbc>)
 800dc8c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dc8e:	4b2b      	ldr	r3, [pc, #172]	; (800dd3c <tcp_fasttmr+0xc0>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dc94:	e048      	b.n	800dd28 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	7f9a      	ldrb	r2, [r3, #30]
 800dc9a:	4b27      	ldr	r3, [pc, #156]	; (800dd38 <tcp_fasttmr+0xbc>)
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d03f      	beq.n	800dd22 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dca2:	4b25      	ldr	r3, [pc, #148]	; (800dd38 <tcp_fasttmr+0xbc>)
 800dca4:	781a      	ldrb	r2, [r3, #0]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	8b5b      	ldrh	r3, [r3, #26]
 800dcae:	f003 0301 	and.w	r3, r3, #1
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d010      	beq.n	800dcd8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	8b5b      	ldrh	r3, [r3, #26]
 800dcba:	f043 0302 	orr.w	r3, r3, #2
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f003 facb 	bl	8011260 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	8b5b      	ldrh	r3, [r3, #26]
 800dcce:	f023 0303 	bic.w	r3, r3, #3
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	8b5b      	ldrh	r3, [r3, #26]
 800dcdc:	f003 0308 	and.w	r3, r3, #8
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d009      	beq.n	800dcf8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	8b5b      	ldrh	r3, [r3, #26]
 800dce8:	f023 0308 	bic.w	r3, r3, #8
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f7ff fa78 	bl	800d1e8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00a      	beq.n	800dd1c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800dd06:	4b0e      	ldr	r3, [pc, #56]	; (800dd40 <tcp_fasttmr+0xc4>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 f819 	bl	800dd44 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dd12:	4b0b      	ldr	r3, [pc, #44]	; (800dd40 <tcp_fasttmr+0xc4>)
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d000      	beq.n	800dd1c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dd1a:	e7b8      	b.n	800dc8e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	607b      	str	r3, [r7, #4]
 800dd20:	e002      	b.n	800dd28 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d1b3      	bne.n	800dc96 <tcp_fasttmr+0x1a>
    }
  }
}
 800dd2e:	bf00      	nop
 800dd30:	bf00      	nop
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	20004a9e 	.word	0x20004a9e
 800dd3c:	2000b638 	.word	0x2000b638
 800dd40:	2000b634 	.word	0x2000b634

0800dd44 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dd44:	b590      	push	{r4, r7, lr}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d109      	bne.n	800dd66 <tcp_process_refused_data+0x22>
 800dd52:	4b37      	ldr	r3, [pc, #220]	; (800de30 <tcp_process_refused_data+0xec>)
 800dd54:	f240 6209 	movw	r2, #1545	; 0x609
 800dd58:	4936      	ldr	r1, [pc, #216]	; (800de34 <tcp_process_refused_data+0xf0>)
 800dd5a:	4837      	ldr	r0, [pc, #220]	; (800de38 <tcp_process_refused_data+0xf4>)
 800dd5c:	f007 fbe4 	bl	8015528 <printf>
 800dd60:	f06f 030f 	mvn.w	r3, #15
 800dd64:	e060      	b.n	800de28 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd6a:	7b5b      	ldrb	r3, [r3, #13]
 800dd6c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd72:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d00b      	beq.n	800dd9c <tcp_process_refused_data+0x58>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6918      	ldr	r0, [r3, #16]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	6879      	ldr	r1, [r7, #4]
 800dd94:	47a0      	blx	r4
 800dd96:	4603      	mov	r3, r0
 800dd98:	73fb      	strb	r3, [r7, #15]
 800dd9a:	e007      	b.n	800ddac <tcp_process_refused_data+0x68>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	6879      	ldr	r1, [r7, #4]
 800dda2:	2000      	movs	r0, #0
 800dda4:	f000 f8a4 	bl	800def0 <tcp_recv_null>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ddac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d12a      	bne.n	800de0a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ddb4:	7bbb      	ldrb	r3, [r7, #14]
 800ddb6:	f003 0320 	and.w	r3, r3, #32
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d033      	beq.n	800de26 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddc2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ddc6:	d005      	beq.n	800ddd4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddcc:	3301      	adds	r3, #1
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d00b      	beq.n	800ddf6 <tcp_process_refused_data+0xb2>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6918      	ldr	r0, [r3, #16]
 800dde8:	2300      	movs	r3, #0
 800ddea:	2200      	movs	r2, #0
 800ddec:	6879      	ldr	r1, [r7, #4]
 800ddee:	47a0      	blx	r4
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	73fb      	strb	r3, [r7, #15]
 800ddf4:	e001      	b.n	800ddfa <tcp_process_refused_data+0xb6>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ddfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddfe:	f113 0f0d 	cmn.w	r3, #13
 800de02:	d110      	bne.n	800de26 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800de04:	f06f 030c 	mvn.w	r3, #12
 800de08:	e00e      	b.n	800de28 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800de0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de0e:	f113 0f0d 	cmn.w	r3, #13
 800de12:	d102      	bne.n	800de1a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800de14:	f06f 030c 	mvn.w	r3, #12
 800de18:	e006      	b.n	800de28 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	68ba      	ldr	r2, [r7, #8]
 800de1e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800de20:	f06f 0304 	mvn.w	r3, #4
 800de24:	e000      	b.n	800de28 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800de26:	2300      	movs	r3, #0
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3714      	adds	r7, #20
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd90      	pop	{r4, r7, pc}
 800de30:	0801d7f0 	.word	0x0801d7f0
 800de34:	0801dd00 	.word	0x0801dd00
 800de38:	0801d834 	.word	0x0801d834

0800de3c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800de44:	e007      	b.n	800de56 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f80a 	bl	800de66 <tcp_seg_free>
    seg = next;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1f4      	bne.n	800de46 <tcp_segs_free+0xa>
  }
}
 800de5c:	bf00      	nop
 800de5e:	bf00      	nop
 800de60:	3710      	adds	r7, #16
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800de66:	b580      	push	{r7, lr}
 800de68:	b082      	sub	sp, #8
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00c      	beq.n	800de8e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d004      	beq.n	800de86 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	4618      	mov	r0, r3
 800de82:	f7fe fd71 	bl	800c968 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800de86:	6879      	ldr	r1, [r7, #4]
 800de88:	2003      	movs	r0, #3
 800de8a:	f7fd ff41 	bl	800bd10 <memp_free>
  }
}
 800de8e:	bf00      	nop
 800de90:	3708      	adds	r7, #8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
	...

0800de98 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d106      	bne.n	800deb4 <tcp_seg_copy+0x1c>
 800dea6:	4b0f      	ldr	r3, [pc, #60]	; (800dee4 <tcp_seg_copy+0x4c>)
 800dea8:	f240 6282 	movw	r2, #1666	; 0x682
 800deac:	490e      	ldr	r1, [pc, #56]	; (800dee8 <tcp_seg_copy+0x50>)
 800deae:	480f      	ldr	r0, [pc, #60]	; (800deec <tcp_seg_copy+0x54>)
 800deb0:	f007 fb3a 	bl	8015528 <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800deb4:	2003      	movs	r0, #3
 800deb6:	f7fd fed9 	bl	800bc6c <memp_malloc>
 800deba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d101      	bne.n	800dec6 <tcp_seg_copy+0x2e>
    return NULL;
 800dec2:	2300      	movs	r3, #0
 800dec4:	e00a      	b.n	800dedc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dec6:	2210      	movs	r2, #16
 800dec8:	6879      	ldr	r1, [r7, #4]
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f007 f87e 	bl	8014fcc <memcpy>
  pbuf_ref(cseg->p);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7fe fded 	bl	800cab4 <pbuf_ref>
  return cseg;
 800deda:	68fb      	ldr	r3, [r7, #12]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	0801d7f0 	.word	0x0801d7f0
 800dee8:	0801dd44 	.word	0x0801dd44
 800deec:	0801d834 	.word	0x0801d834

0800def0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
 800defc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d109      	bne.n	800df18 <tcp_recv_null+0x28>
 800df04:	4b12      	ldr	r3, [pc, #72]	; (800df50 <tcp_recv_null+0x60>)
 800df06:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800df0a:	4912      	ldr	r1, [pc, #72]	; (800df54 <tcp_recv_null+0x64>)
 800df0c:	4812      	ldr	r0, [pc, #72]	; (800df58 <tcp_recv_null+0x68>)
 800df0e:	f007 fb0b 	bl	8015528 <printf>
 800df12:	f06f 030f 	mvn.w	r3, #15
 800df16:	e016      	b.n	800df46 <tcp_recv_null+0x56>

  if (p != NULL) {
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d009      	beq.n	800df32 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	891b      	ldrh	r3, [r3, #8]
 800df22:	4619      	mov	r1, r3
 800df24:	68b8      	ldr	r0, [r7, #8]
 800df26:	f7ff fb19 	bl	800d55c <tcp_recved>
    pbuf_free(p);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7fe fd1c 	bl	800c968 <pbuf_free>
 800df30:	e008      	b.n	800df44 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800df32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d104      	bne.n	800df44 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800df3a:	68b8      	ldr	r0, [r7, #8]
 800df3c:	f7ff f9be 	bl	800d2bc <tcp_close>
 800df40:	4603      	mov	r3, r0
 800df42:	e000      	b.n	800df46 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	0801d7f0 	.word	0x0801d7f0
 800df54:	0801dd60 	.word	0x0801dd60
 800df58:	0801d834 	.word	0x0801d834

0800df5c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b086      	sub	sp, #24
 800df60:	af00      	add	r7, sp, #0
 800df62:	4603      	mov	r3, r0
 800df64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800df66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	db01      	blt.n	800df72 <tcp_kill_prio+0x16>
 800df6e:	79fb      	ldrb	r3, [r7, #7]
 800df70:	e000      	b.n	800df74 <tcp_kill_prio+0x18>
 800df72:	237f      	movs	r3, #127	; 0x7f
 800df74:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800df76:	7afb      	ldrb	r3, [r7, #11]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d034      	beq.n	800dfe6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800df7c:	7afb      	ldrb	r3, [r7, #11]
 800df7e:	3b01      	subs	r3, #1
 800df80:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800df82:	2300      	movs	r3, #0
 800df84:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800df86:	2300      	movs	r3, #0
 800df88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df8a:	4b19      	ldr	r3, [pc, #100]	; (800dff0 <tcp_kill_prio+0x94>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	617b      	str	r3, [r7, #20]
 800df90:	e01f      	b.n	800dfd2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	7d5b      	ldrb	r3, [r3, #21]
 800df96:	7afa      	ldrb	r2, [r7, #11]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d80c      	bhi.n	800dfb6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dfa0:	7afa      	ldrb	r2, [r7, #11]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d112      	bne.n	800dfcc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dfa6:	4b13      	ldr	r3, [pc, #76]	; (800dff4 <tcp_kill_prio+0x98>)
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	6a1b      	ldr	r3, [r3, #32]
 800dfae:	1ad3      	subs	r3, r2, r3
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d80a      	bhi.n	800dfcc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dfb6:	4b0f      	ldr	r3, [pc, #60]	; (800dff4 <tcp_kill_prio+0x98>)
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	6a1b      	ldr	r3, [r3, #32]
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	7d5b      	ldrb	r3, [r3, #21]
 800dfca:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	617b      	str	r3, [r7, #20]
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1dc      	bne.n	800df92 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d004      	beq.n	800dfe8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dfde:	6938      	ldr	r0, [r7, #16]
 800dfe0:	f7ff fa56 	bl	800d490 <tcp_abort>
 800dfe4:	e000      	b.n	800dfe8 <tcp_kill_prio+0x8c>
    return;
 800dfe6:	bf00      	nop
  }
}
 800dfe8:	3718      	adds	r7, #24
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	2000b638 	.word	0x2000b638
 800dff4:	2000b63c 	.word	0x2000b63c

0800dff8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	4603      	mov	r3, r0
 800e000:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e002:	79fb      	ldrb	r3, [r7, #7]
 800e004:	2b08      	cmp	r3, #8
 800e006:	d009      	beq.n	800e01c <tcp_kill_state+0x24>
 800e008:	79fb      	ldrb	r3, [r7, #7]
 800e00a:	2b09      	cmp	r3, #9
 800e00c:	d006      	beq.n	800e01c <tcp_kill_state+0x24>
 800e00e:	4b1a      	ldr	r3, [pc, #104]	; (800e078 <tcp_kill_state+0x80>)
 800e010:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e014:	4919      	ldr	r1, [pc, #100]	; (800e07c <tcp_kill_state+0x84>)
 800e016:	481a      	ldr	r0, [pc, #104]	; (800e080 <tcp_kill_state+0x88>)
 800e018:	f007 fa86 	bl	8015528 <printf>

  inactivity = 0;
 800e01c:	2300      	movs	r3, #0
 800e01e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e020:	2300      	movs	r3, #0
 800e022:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e024:	4b17      	ldr	r3, [pc, #92]	; (800e084 <tcp_kill_state+0x8c>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	617b      	str	r3, [r7, #20]
 800e02a:	e017      	b.n	800e05c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	7d1b      	ldrb	r3, [r3, #20]
 800e030:	79fa      	ldrb	r2, [r7, #7]
 800e032:	429a      	cmp	r2, r3
 800e034:	d10f      	bne.n	800e056 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e036:	4b14      	ldr	r3, [pc, #80]	; (800e088 <tcp_kill_state+0x90>)
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	1ad3      	subs	r3, r2, r3
 800e040:	68fa      	ldr	r2, [r7, #12]
 800e042:	429a      	cmp	r2, r3
 800e044:	d807      	bhi.n	800e056 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e046:	4b10      	ldr	r3, [pc, #64]	; (800e088 <tcp_kill_state+0x90>)
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	6a1b      	ldr	r3, [r3, #32]
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	617b      	str	r3, [r7, #20]
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1e4      	bne.n	800e02c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d003      	beq.n	800e070 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e068:	2100      	movs	r1, #0
 800e06a:	6938      	ldr	r0, [r7, #16]
 800e06c:	f7ff f952 	bl	800d314 <tcp_abandon>
  }
}
 800e070:	bf00      	nop
 800e072:	3718      	adds	r7, #24
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	0801d7f0 	.word	0x0801d7f0
 800e07c:	0801dd7c 	.word	0x0801dd7c
 800e080:	0801d834 	.word	0x0801d834
 800e084:	2000b638 	.word	0x2000b638
 800e088:	2000b63c 	.word	0x2000b63c

0800e08c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e092:	2300      	movs	r3, #0
 800e094:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e096:	2300      	movs	r3, #0
 800e098:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e09a:	4b12      	ldr	r3, [pc, #72]	; (800e0e4 <tcp_kill_timewait+0x58>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	60fb      	str	r3, [r7, #12]
 800e0a0:	e012      	b.n	800e0c8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e0a2:	4b11      	ldr	r3, [pc, #68]	; (800e0e8 <tcp_kill_timewait+0x5c>)
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6a1b      	ldr	r3, [r3, #32]
 800e0aa:	1ad3      	subs	r3, r2, r3
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d807      	bhi.n	800e0c2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e0b2:	4b0d      	ldr	r3, [pc, #52]	; (800e0e8 <tcp_kill_timewait+0x5c>)
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6a1b      	ldr	r3, [r3, #32]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	60fb      	str	r3, [r7, #12]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d1e9      	bne.n	800e0a2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d002      	beq.n	800e0da <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e0d4:	68b8      	ldr	r0, [r7, #8]
 800e0d6:	f7ff f9db 	bl	800d490 <tcp_abort>
  }
}
 800e0da:	bf00      	nop
 800e0dc:	3710      	adds	r7, #16
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	2000b648 	.word	0x2000b648
 800e0e8:	2000b63c 	.word	0x2000b63c

0800e0ec <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e0f2:	4b10      	ldr	r3, [pc, #64]	; (800e134 <tcp_handle_closepend+0x48>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e0f8:	e014      	b.n	800e124 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	8b5b      	ldrh	r3, [r3, #26]
 800e104:	f003 0308 	and.w	r3, r3, #8
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d009      	beq.n	800e120 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	8b5b      	ldrh	r3, [r3, #26]
 800e110:	f023 0308 	bic.w	r3, r3, #8
 800e114:	b29a      	uxth	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7ff f864 	bl	800d1e8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d1e7      	bne.n	800e0fa <tcp_handle_closepend+0xe>
  }
}
 800e12a:	bf00      	nop
 800e12c:	bf00      	nop
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	2000b638 	.word	0x2000b638

0800e138 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	4603      	mov	r3, r0
 800e140:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e142:	2001      	movs	r0, #1
 800e144:	f7fd fd92 	bl	800bc6c <memp_malloc>
 800e148:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d126      	bne.n	800e19e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e150:	f7ff ffcc 	bl	800e0ec <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e154:	f7ff ff9a 	bl	800e08c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e158:	2001      	movs	r0, #1
 800e15a:	f7fd fd87 	bl	800bc6c <memp_malloc>
 800e15e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d11b      	bne.n	800e19e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e166:	2009      	movs	r0, #9
 800e168:	f7ff ff46 	bl	800dff8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e16c:	2001      	movs	r0, #1
 800e16e:	f7fd fd7d 	bl	800bc6c <memp_malloc>
 800e172:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d111      	bne.n	800e19e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e17a:	2008      	movs	r0, #8
 800e17c:	f7ff ff3c 	bl	800dff8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e180:	2001      	movs	r0, #1
 800e182:	f7fd fd73 	bl	800bc6c <memp_malloc>
 800e186:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d107      	bne.n	800e19e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e18e:	79fb      	ldrb	r3, [r7, #7]
 800e190:	4618      	mov	r0, r3
 800e192:	f7ff fee3 	bl	800df5c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e196:	2001      	movs	r0, #1
 800e198:	f7fd fd68 	bl	800bc6c <memp_malloc>
 800e19c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d03f      	beq.n	800e224 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e1a4:	229c      	movs	r2, #156	; 0x9c
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	f006 ff37 	bl	801501c <memset>
    pcb->prio = prio;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	79fa      	ldrb	r2, [r7, #7]
 800e1b2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e1ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e1c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	22ff      	movs	r2, #255	; 0xff
 800e1d2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e1da:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2206      	movs	r2, #6
 800e1e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2206      	movs	r2, #6
 800e1e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1f0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e1fa:	4b0d      	ldr	r3, [pc, #52]	; (800e230 <tcp_alloc+0xf8>)
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e202:	4b0c      	ldr	r3, [pc, #48]	; (800e234 <tcp_alloc+0xfc>)
 800e204:	781a      	ldrb	r2, [r3, #0]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e210:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	4a08      	ldr	r2, [pc, #32]	; (800e238 <tcp_alloc+0x100>)
 800e218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	4a07      	ldr	r2, [pc, #28]	; (800e23c <tcp_alloc+0x104>)
 800e220:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e224:	68fb      	ldr	r3, [r7, #12]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	2000b63c 	.word	0x2000b63c
 800e234:	20004a9e 	.word	0x20004a9e
 800e238:	0800def1 	.word	0x0800def1
 800e23c:	006ddd00 	.word	0x006ddd00

0800e240 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d107      	bne.n	800e25e <tcp_pcb_purge+0x1e>
 800e24e:	4b21      	ldr	r3, [pc, #132]	; (800e2d4 <tcp_pcb_purge+0x94>)
 800e250:	f640 0251 	movw	r2, #2129	; 0x851
 800e254:	4920      	ldr	r1, [pc, #128]	; (800e2d8 <tcp_pcb_purge+0x98>)
 800e256:	4821      	ldr	r0, [pc, #132]	; (800e2dc <tcp_pcb_purge+0x9c>)
 800e258:	f007 f966 	bl	8015528 <printf>
 800e25c:	e037      	b.n	800e2ce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	7d1b      	ldrb	r3, [r3, #20]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d033      	beq.n	800e2ce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e26a:	2b0a      	cmp	r3, #10
 800e26c:	d02f      	beq.n	800e2ce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e272:	2b01      	cmp	r3, #1
 800e274:	d02b      	beq.n	800e2ce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d007      	beq.n	800e28e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e282:	4618      	mov	r0, r3
 800e284:	f7fe fb70 	bl	800c968 <pbuf_free>
      pcb->refused_data = NULL;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e292:	2b00      	cmp	r3, #0
 800e294:	d002      	beq.n	800e29c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 f986 	bl	800e5a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2a2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7ff fdc7 	bl	800de3c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7ff fdc2 	bl	800de3c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	66da      	str	r2, [r3, #108]	; 0x6c
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	0801d7f0 	.word	0x0801d7f0
 800e2d8:	0801de3c 	.word	0x0801de3c
 800e2dc:	0801d834 	.word	0x0801d834

0800e2e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d106      	bne.n	800e2fe <tcp_pcb_remove+0x1e>
 800e2f0:	4b3e      	ldr	r3, [pc, #248]	; (800e3ec <tcp_pcb_remove+0x10c>)
 800e2f2:	f640 0283 	movw	r2, #2179	; 0x883
 800e2f6:	493e      	ldr	r1, [pc, #248]	; (800e3f0 <tcp_pcb_remove+0x110>)
 800e2f8:	483e      	ldr	r0, [pc, #248]	; (800e3f4 <tcp_pcb_remove+0x114>)
 800e2fa:	f007 f915 	bl	8015528 <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d106      	bne.n	800e312 <tcp_pcb_remove+0x32>
 800e304:	4b39      	ldr	r3, [pc, #228]	; (800e3ec <tcp_pcb_remove+0x10c>)
 800e306:	f640 0284 	movw	r2, #2180	; 0x884
 800e30a:	493b      	ldr	r1, [pc, #236]	; (800e3f8 <tcp_pcb_remove+0x118>)
 800e30c:	4839      	ldr	r0, [pc, #228]	; (800e3f4 <tcp_pcb_remove+0x114>)
 800e30e:	f007 f90b 	bl	8015528 <printf>

  TCP_RMV(pcblist, pcb);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	683a      	ldr	r2, [r7, #0]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d105      	bne.n	800e328 <tcp_pcb_remove+0x48>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	68da      	ldr	r2, [r3, #12]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	601a      	str	r2, [r3, #0]
 800e326:	e013      	b.n	800e350 <tcp_pcb_remove+0x70>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	60fb      	str	r3, [r7, #12]
 800e32e:	e00c      	b.n	800e34a <tcp_pcb_remove+0x6a>
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	68db      	ldr	r3, [r3, #12]
 800e334:	683a      	ldr	r2, [r7, #0]
 800e336:	429a      	cmp	r2, r3
 800e338:	d104      	bne.n	800e344 <tcp_pcb_remove+0x64>
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	68da      	ldr	r2, [r3, #12]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	60da      	str	r2, [r3, #12]
 800e342:	e005      	b.n	800e350 <tcp_pcb_remove+0x70>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	60fb      	str	r3, [r7, #12]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1ef      	bne.n	800e330 <tcp_pcb_remove+0x50>
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	2200      	movs	r2, #0
 800e354:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e356:	6838      	ldr	r0, [r7, #0]
 800e358:	f7ff ff72 	bl	800e240 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	7d1b      	ldrb	r3, [r3, #20]
 800e360:	2b0a      	cmp	r3, #10
 800e362:	d013      	beq.n	800e38c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e368:	2b01      	cmp	r3, #1
 800e36a:	d00f      	beq.n	800e38c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	8b5b      	ldrh	r3, [r3, #26]
 800e370:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e374:	2b00      	cmp	r3, #0
 800e376:	d009      	beq.n	800e38c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	8b5b      	ldrh	r3, [r3, #26]
 800e37c:	f043 0302 	orr.w	r3, r3, #2
 800e380:	b29a      	uxth	r2, r3
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e386:	6838      	ldr	r0, [r7, #0]
 800e388:	f002 ff6a 	bl	8011260 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	7d1b      	ldrb	r3, [r3, #20]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d020      	beq.n	800e3d6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d006      	beq.n	800e3aa <tcp_pcb_remove+0xca>
 800e39c:	4b13      	ldr	r3, [pc, #76]	; (800e3ec <tcp_pcb_remove+0x10c>)
 800e39e:	f640 0293 	movw	r2, #2195	; 0x893
 800e3a2:	4916      	ldr	r1, [pc, #88]	; (800e3fc <tcp_pcb_remove+0x11c>)
 800e3a4:	4813      	ldr	r0, [pc, #76]	; (800e3f4 <tcp_pcb_remove+0x114>)
 800e3a6:	f007 f8bf 	bl	8015528 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d006      	beq.n	800e3c0 <tcp_pcb_remove+0xe0>
 800e3b2:	4b0e      	ldr	r3, [pc, #56]	; (800e3ec <tcp_pcb_remove+0x10c>)
 800e3b4:	f640 0294 	movw	r2, #2196	; 0x894
 800e3b8:	4911      	ldr	r1, [pc, #68]	; (800e400 <tcp_pcb_remove+0x120>)
 800e3ba:	480e      	ldr	r0, [pc, #56]	; (800e3f4 <tcp_pcb_remove+0x114>)
 800e3bc:	f007 f8b4 	bl	8015528 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d006      	beq.n	800e3d6 <tcp_pcb_remove+0xf6>
 800e3c8:	4b08      	ldr	r3, [pc, #32]	; (800e3ec <tcp_pcb_remove+0x10c>)
 800e3ca:	f640 0296 	movw	r2, #2198	; 0x896
 800e3ce:	490d      	ldr	r1, [pc, #52]	; (800e404 <tcp_pcb_remove+0x124>)
 800e3d0:	4808      	ldr	r0, [pc, #32]	; (800e3f4 <tcp_pcb_remove+0x114>)
 800e3d2:	f007 f8a9 	bl	8015528 <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e3e2:	bf00      	nop
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	0801d7f0 	.word	0x0801d7f0
 800e3f0:	0801de58 	.word	0x0801de58
 800e3f4:	0801d834 	.word	0x0801d834
 800e3f8:	0801de74 	.word	0x0801de74
 800e3fc:	0801de94 	.word	0x0801de94
 800e400:	0801deac 	.word	0x0801deac
 800e404:	0801dec8 	.word	0x0801dec8

0800e408 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d106      	bne.n	800e424 <tcp_next_iss+0x1c>
 800e416:	4b0a      	ldr	r3, [pc, #40]	; (800e440 <tcp_next_iss+0x38>)
 800e418:	f640 02af 	movw	r2, #2223	; 0x8af
 800e41c:	4909      	ldr	r1, [pc, #36]	; (800e444 <tcp_next_iss+0x3c>)
 800e41e:	480a      	ldr	r0, [pc, #40]	; (800e448 <tcp_next_iss+0x40>)
 800e420:	f007 f882 	bl	8015528 <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e424:	4b09      	ldr	r3, [pc, #36]	; (800e44c <tcp_next_iss+0x44>)
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	4b09      	ldr	r3, [pc, #36]	; (800e450 <tcp_next_iss+0x48>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4413      	add	r3, r2
 800e42e:	4a07      	ldr	r2, [pc, #28]	; (800e44c <tcp_next_iss+0x44>)
 800e430:	6013      	str	r3, [r2, #0]
  return iss;
 800e432:	4b06      	ldr	r3, [pc, #24]	; (800e44c <tcp_next_iss+0x44>)
 800e434:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e436:	4618      	mov	r0, r3
 800e438:	3708      	adds	r7, #8
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	0801d7f0 	.word	0x0801d7f0
 800e444:	0801dee0 	.word	0x0801dee0
 800e448:	0801d834 	.word	0x0801d834
 800e44c:	20000024 	.word	0x20000024
 800e450:	2000b63c 	.word	0x2000b63c

0800e454 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b086      	sub	sp, #24
 800e458:	af00      	add	r7, sp, #0
 800e45a:	4603      	mov	r3, r0
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d106      	bne.n	800e476 <tcp_eff_send_mss_netif+0x22>
 800e468:	4b14      	ldr	r3, [pc, #80]	; (800e4bc <tcp_eff_send_mss_netif+0x68>)
 800e46a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e46e:	4914      	ldr	r1, [pc, #80]	; (800e4c0 <tcp_eff_send_mss_netif+0x6c>)
 800e470:	4814      	ldr	r0, [pc, #80]	; (800e4c4 <tcp_eff_send_mss_netif+0x70>)
 800e472:	f007 f859 	bl	8015528 <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d101      	bne.n	800e480 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e47c:	89fb      	ldrh	r3, [r7, #14]
 800e47e:	e019      	b.n	800e4b4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	8c1b      	ldrh	r3, [r3, #32]
 800e484:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e486:	8afb      	ldrh	r3, [r7, #22]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d012      	beq.n	800e4b2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e48c:	2328      	movs	r3, #40	; 0x28
 800e48e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e490:	8afa      	ldrh	r2, [r7, #22]
 800e492:	8abb      	ldrh	r3, [r7, #20]
 800e494:	429a      	cmp	r2, r3
 800e496:	d904      	bls.n	800e4a2 <tcp_eff_send_mss_netif+0x4e>
 800e498:	8afa      	ldrh	r2, [r7, #22]
 800e49a:	8abb      	ldrh	r3, [r7, #20]
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	e000      	b.n	800e4a4 <tcp_eff_send_mss_netif+0x50>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e4a6:	8a7a      	ldrh	r2, [r7, #18]
 800e4a8:	89fb      	ldrh	r3, [r7, #14]
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	bf28      	it	cs
 800e4ae:	4613      	movcs	r3, r2
 800e4b0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e4b2:	89fb      	ldrh	r3, [r7, #14]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3718      	adds	r7, #24
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	0801d7f0 	.word	0x0801d7f0
 800e4c0:	0801defc 	.word	0x0801defc
 800e4c4:	0801d834 	.word	0x0801d834

0800e4c8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d119      	bne.n	800e510 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e4dc:	4b10      	ldr	r3, [pc, #64]	; (800e520 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e4de:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e4e2:	4910      	ldr	r1, [pc, #64]	; (800e524 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e4e4:	4810      	ldr	r0, [pc, #64]	; (800e528 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e4e6:	f007 f81f 	bl	8015528 <printf>

  while (pcb != NULL) {
 800e4ea:	e011      	b.n	800e510 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d108      	bne.n	800e50a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f7fe ffc6 	bl	800d490 <tcp_abort>
      pcb = next;
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	60fb      	str	r3, [r7, #12]
 800e508:	e002      	b.n	800e510 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d1ea      	bne.n	800e4ec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e516:	bf00      	nop
 800e518:	bf00      	nop
 800e51a:	3710      	adds	r7, #16
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	0801d7f0 	.word	0x0801d7f0
 800e524:	0801df24 	.word	0x0801df24
 800e528:	0801d834 	.word	0x0801d834

0800e52c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d02a      	beq.n	800e592 <tcp_netif_ip_addr_changed+0x66>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d026      	beq.n	800e592 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e544:	4b15      	ldr	r3, [pc, #84]	; (800e59c <tcp_netif_ip_addr_changed+0x70>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4619      	mov	r1, r3
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7ff ffbc 	bl	800e4c8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e550:	4b13      	ldr	r3, [pc, #76]	; (800e5a0 <tcp_netif_ip_addr_changed+0x74>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4619      	mov	r1, r3
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7ff ffb6 	bl	800e4c8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d017      	beq.n	800e592 <tcp_netif_ip_addr_changed+0x66>
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d013      	beq.n	800e592 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e56a:	4b0e      	ldr	r3, [pc, #56]	; (800e5a4 <tcp_netif_ip_addr_changed+0x78>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	60fb      	str	r3, [r7, #12]
 800e570:	e00c      	b.n	800e58c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d103      	bne.n	800e586 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d1ef      	bne.n	800e572 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e592:	bf00      	nop
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	2000b638 	.word	0x2000b638
 800e5a0:	2000b644 	.word	0x2000b644
 800e5a4:	2000b640 	.word	0x2000b640

0800e5a8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d007      	beq.n	800e5c8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7ff fc3d 	bl	800de3c <tcp_segs_free>
    pcb->ooseq = NULL;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e5c8:	bf00      	nop
 800e5ca:	3708      	adds	r7, #8
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e5d0:	b590      	push	{r4, r7, lr}
 800e5d2:	b08d      	sub	sp, #52	; 0x34
 800e5d4:	af04      	add	r7, sp, #16
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d105      	bne.n	800e5ec <tcp_input+0x1c>
 800e5e0:	4b9b      	ldr	r3, [pc, #620]	; (800e850 <tcp_input+0x280>)
 800e5e2:	2283      	movs	r2, #131	; 0x83
 800e5e4:	499b      	ldr	r1, [pc, #620]	; (800e854 <tcp_input+0x284>)
 800e5e6:	489c      	ldr	r0, [pc, #624]	; (800e858 <tcp_input+0x288>)
 800e5e8:	f006 ff9e 	bl	8015528 <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	4a9a      	ldr	r2, [pc, #616]	; (800e85c <tcp_input+0x28c>)
 800e5f2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	895b      	ldrh	r3, [r3, #10]
 800e5f8:	2b13      	cmp	r3, #19
 800e5fa:	f240 83c4 	bls.w	800ed86 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e5fe:	4b98      	ldr	r3, [pc, #608]	; (800e860 <tcp_input+0x290>)
 800e600:	695b      	ldr	r3, [r3, #20]
 800e602:	4a97      	ldr	r2, [pc, #604]	; (800e860 <tcp_input+0x290>)
 800e604:	6812      	ldr	r2, [r2, #0]
 800e606:	4611      	mov	r1, r2
 800e608:	4618      	mov	r0, r3
 800e60a:	f005 fc43 	bl	8013e94 <ip4_addr_isbroadcast_u32>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	f040 83ba 	bne.w	800ed8a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e616:	4b92      	ldr	r3, [pc, #584]	; (800e860 <tcp_input+0x290>)
 800e618:	695b      	ldr	r3, [r3, #20]
 800e61a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e61e:	2be0      	cmp	r3, #224	; 0xe0
 800e620:	f000 83b3 	beq.w	800ed8a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e624:	4b8d      	ldr	r3, [pc, #564]	; (800e85c <tcp_input+0x28c>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	899b      	ldrh	r3, [r3, #12]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fc fe67 	bl	800b300 <lwip_htons>
 800e632:	4603      	mov	r3, r0
 800e634:	0b1b      	lsrs	r3, r3, #12
 800e636:	b29b      	uxth	r3, r3
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	009b      	lsls	r3, r3, #2
 800e63c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e63e:	7cbb      	ldrb	r3, [r7, #18]
 800e640:	2b13      	cmp	r3, #19
 800e642:	f240 83a4 	bls.w	800ed8e <tcp_input+0x7be>
 800e646:	7cbb      	ldrb	r3, [r7, #18]
 800e648:	b29a      	uxth	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	891b      	ldrh	r3, [r3, #8]
 800e64e:	429a      	cmp	r2, r3
 800e650:	f200 839d 	bhi.w	800ed8e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e654:	7cbb      	ldrb	r3, [r7, #18]
 800e656:	b29b      	uxth	r3, r3
 800e658:	3b14      	subs	r3, #20
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	4b81      	ldr	r3, [pc, #516]	; (800e864 <tcp_input+0x294>)
 800e65e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e660:	4b81      	ldr	r3, [pc, #516]	; (800e868 <tcp_input+0x298>)
 800e662:	2200      	movs	r2, #0
 800e664:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	895a      	ldrh	r2, [r3, #10]
 800e66a:	7cbb      	ldrb	r3, [r7, #18]
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	429a      	cmp	r2, r3
 800e670:	d309      	bcc.n	800e686 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e672:	4b7c      	ldr	r3, [pc, #496]	; (800e864 <tcp_input+0x294>)
 800e674:	881a      	ldrh	r2, [r3, #0]
 800e676:	4b7d      	ldr	r3, [pc, #500]	; (800e86c <tcp_input+0x29c>)
 800e678:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e67a:	7cbb      	ldrb	r3, [r7, #18]
 800e67c:	4619      	mov	r1, r3
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f7fe f8ec 	bl	800c85c <pbuf_remove_header>
 800e684:	e04e      	b.n	800e724 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d105      	bne.n	800e69a <tcp_input+0xca>
 800e68e:	4b70      	ldr	r3, [pc, #448]	; (800e850 <tcp_input+0x280>)
 800e690:	22c2      	movs	r2, #194	; 0xc2
 800e692:	4977      	ldr	r1, [pc, #476]	; (800e870 <tcp_input+0x2a0>)
 800e694:	4870      	ldr	r0, [pc, #448]	; (800e858 <tcp_input+0x288>)
 800e696:	f006 ff47 	bl	8015528 <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e69a:	2114      	movs	r1, #20
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7fe f8dd 	bl	800c85c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	895a      	ldrh	r2, [r3, #10]
 800e6a6:	4b71      	ldr	r3, [pc, #452]	; (800e86c <tcp_input+0x29c>)
 800e6a8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e6aa:	4b6e      	ldr	r3, [pc, #440]	; (800e864 <tcp_input+0x294>)
 800e6ac:	881a      	ldrh	r2, [r3, #0]
 800e6ae:	4b6f      	ldr	r3, [pc, #444]	; (800e86c <tcp_input+0x29c>)
 800e6b0:	881b      	ldrh	r3, [r3, #0]
 800e6b2:	1ad3      	subs	r3, r2, r3
 800e6b4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e6b6:	4b6d      	ldr	r3, [pc, #436]	; (800e86c <tcp_input+0x29c>)
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7fe f8cd 	bl	800c85c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	895b      	ldrh	r3, [r3, #10]
 800e6c8:	8a3a      	ldrh	r2, [r7, #16]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	f200 8361 	bhi.w	800ed92 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	4a64      	ldr	r2, [pc, #400]	; (800e868 <tcp_input+0x298>)
 800e6d8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	8a3a      	ldrh	r2, [r7, #16]
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fe f8ba 	bl	800c85c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	891a      	ldrh	r2, [r3, #8]
 800e6ec:	8a3b      	ldrh	r3, [r7, #16]
 800e6ee:	1ad3      	subs	r3, r2, r3
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	895b      	ldrh	r3, [r3, #10]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d005      	beq.n	800e70a <tcp_input+0x13a>
 800e6fe:	4b54      	ldr	r3, [pc, #336]	; (800e850 <tcp_input+0x280>)
 800e700:	22df      	movs	r2, #223	; 0xdf
 800e702:	495c      	ldr	r1, [pc, #368]	; (800e874 <tcp_input+0x2a4>)
 800e704:	4854      	ldr	r0, [pc, #336]	; (800e858 <tcp_input+0x288>)
 800e706:	f006 ff0f 	bl	8015528 <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	891a      	ldrh	r2, [r3, #8]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	891b      	ldrh	r3, [r3, #8]
 800e714:	429a      	cmp	r2, r3
 800e716:	d005      	beq.n	800e724 <tcp_input+0x154>
 800e718:	4b4d      	ldr	r3, [pc, #308]	; (800e850 <tcp_input+0x280>)
 800e71a:	22e0      	movs	r2, #224	; 0xe0
 800e71c:	4956      	ldr	r1, [pc, #344]	; (800e878 <tcp_input+0x2a8>)
 800e71e:	484e      	ldr	r0, [pc, #312]	; (800e858 <tcp_input+0x288>)
 800e720:	f006 ff02 	bl	8015528 <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e724:	4b4d      	ldr	r3, [pc, #308]	; (800e85c <tcp_input+0x28c>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	881b      	ldrh	r3, [r3, #0]
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	4a4b      	ldr	r2, [pc, #300]	; (800e85c <tcp_input+0x28c>)
 800e72e:	6814      	ldr	r4, [r2, #0]
 800e730:	4618      	mov	r0, r3
 800e732:	f7fc fde5 	bl	800b300 <lwip_htons>
 800e736:	4603      	mov	r3, r0
 800e738:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e73a:	4b48      	ldr	r3, [pc, #288]	; (800e85c <tcp_input+0x28c>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	885b      	ldrh	r3, [r3, #2]
 800e740:	b29b      	uxth	r3, r3
 800e742:	4a46      	ldr	r2, [pc, #280]	; (800e85c <tcp_input+0x28c>)
 800e744:	6814      	ldr	r4, [r2, #0]
 800e746:	4618      	mov	r0, r3
 800e748:	f7fc fdda 	bl	800b300 <lwip_htons>
 800e74c:	4603      	mov	r3, r0
 800e74e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e750:	4b42      	ldr	r3, [pc, #264]	; (800e85c <tcp_input+0x28c>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	4a41      	ldr	r2, [pc, #260]	; (800e85c <tcp_input+0x28c>)
 800e758:	6814      	ldr	r4, [r2, #0]
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fc fde5 	bl	800b32a <lwip_htonl>
 800e760:	4603      	mov	r3, r0
 800e762:	6063      	str	r3, [r4, #4]
 800e764:	6863      	ldr	r3, [r4, #4]
 800e766:	4a45      	ldr	r2, [pc, #276]	; (800e87c <tcp_input+0x2ac>)
 800e768:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e76a:	4b3c      	ldr	r3, [pc, #240]	; (800e85c <tcp_input+0x28c>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	689b      	ldr	r3, [r3, #8]
 800e770:	4a3a      	ldr	r2, [pc, #232]	; (800e85c <tcp_input+0x28c>)
 800e772:	6814      	ldr	r4, [r2, #0]
 800e774:	4618      	mov	r0, r3
 800e776:	f7fc fdd8 	bl	800b32a <lwip_htonl>
 800e77a:	4603      	mov	r3, r0
 800e77c:	60a3      	str	r3, [r4, #8]
 800e77e:	68a3      	ldr	r3, [r4, #8]
 800e780:	4a3f      	ldr	r2, [pc, #252]	; (800e880 <tcp_input+0x2b0>)
 800e782:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e784:	4b35      	ldr	r3, [pc, #212]	; (800e85c <tcp_input+0x28c>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	89db      	ldrh	r3, [r3, #14]
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	4a33      	ldr	r2, [pc, #204]	; (800e85c <tcp_input+0x28c>)
 800e78e:	6814      	ldr	r4, [r2, #0]
 800e790:	4618      	mov	r0, r3
 800e792:	f7fc fdb5 	bl	800b300 <lwip_htons>
 800e796:	4603      	mov	r3, r0
 800e798:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e79a:	4b30      	ldr	r3, [pc, #192]	; (800e85c <tcp_input+0x28c>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	899b      	ldrh	r3, [r3, #12]
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7fc fdac 	bl	800b300 <lwip_htons>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7b0:	b2da      	uxtb	r2, r3
 800e7b2:	4b34      	ldr	r3, [pc, #208]	; (800e884 <tcp_input+0x2b4>)
 800e7b4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	891a      	ldrh	r2, [r3, #8]
 800e7ba:	4b33      	ldr	r3, [pc, #204]	; (800e888 <tcp_input+0x2b8>)
 800e7bc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e7be:	4b31      	ldr	r3, [pc, #196]	; (800e884 <tcp_input+0x2b4>)
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	f003 0303 	and.w	r3, r3, #3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d00c      	beq.n	800e7e4 <tcp_input+0x214>
    tcplen++;
 800e7ca:	4b2f      	ldr	r3, [pc, #188]	; (800e888 <tcp_input+0x2b8>)
 800e7cc:	881b      	ldrh	r3, [r3, #0]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	4b2d      	ldr	r3, [pc, #180]	; (800e888 <tcp_input+0x2b8>)
 800e7d4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	891a      	ldrh	r2, [r3, #8]
 800e7da:	4b2b      	ldr	r3, [pc, #172]	; (800e888 <tcp_input+0x2b8>)
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	f200 82d9 	bhi.w	800ed96 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7e8:	4b28      	ldr	r3, [pc, #160]	; (800e88c <tcp_input+0x2bc>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	61fb      	str	r3, [r7, #28]
 800e7ee:	e09d      	b.n	800e92c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	7d1b      	ldrb	r3, [r3, #20]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d105      	bne.n	800e804 <tcp_input+0x234>
 800e7f8:	4b15      	ldr	r3, [pc, #84]	; (800e850 <tcp_input+0x280>)
 800e7fa:	22fb      	movs	r2, #251	; 0xfb
 800e7fc:	4924      	ldr	r1, [pc, #144]	; (800e890 <tcp_input+0x2c0>)
 800e7fe:	4816      	ldr	r0, [pc, #88]	; (800e858 <tcp_input+0x288>)
 800e800:	f006 fe92 	bl	8015528 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	7d1b      	ldrb	r3, [r3, #20]
 800e808:	2b0a      	cmp	r3, #10
 800e80a:	d105      	bne.n	800e818 <tcp_input+0x248>
 800e80c:	4b10      	ldr	r3, [pc, #64]	; (800e850 <tcp_input+0x280>)
 800e80e:	22fc      	movs	r2, #252	; 0xfc
 800e810:	4920      	ldr	r1, [pc, #128]	; (800e894 <tcp_input+0x2c4>)
 800e812:	4811      	ldr	r0, [pc, #68]	; (800e858 <tcp_input+0x288>)
 800e814:	f006 fe88 	bl	8015528 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	7d1b      	ldrb	r3, [r3, #20]
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d105      	bne.n	800e82c <tcp_input+0x25c>
 800e820:	4b0b      	ldr	r3, [pc, #44]	; (800e850 <tcp_input+0x280>)
 800e822:	22fd      	movs	r2, #253	; 0xfd
 800e824:	491c      	ldr	r1, [pc, #112]	; (800e898 <tcp_input+0x2c8>)
 800e826:	480c      	ldr	r0, [pc, #48]	; (800e858 <tcp_input+0x288>)
 800e828:	f006 fe7e 	bl	8015528 <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	7a1b      	ldrb	r3, [r3, #8]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d033      	beq.n	800e89c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e834:	69fb      	ldr	r3, [r7, #28]
 800e836:	7a1a      	ldrb	r2, [r3, #8]
 800e838:	4b09      	ldr	r3, [pc, #36]	; (800e860 <tcp_input+0x290>)
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e840:	3301      	adds	r3, #1
 800e842:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e844:	429a      	cmp	r2, r3
 800e846:	d029      	beq.n	800e89c <tcp_input+0x2cc>
      prev = pcb;
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	61bb      	str	r3, [r7, #24]
      continue;
 800e84c:	e06b      	b.n	800e926 <tcp_input+0x356>
 800e84e:	bf00      	nop
 800e850:	0801df58 	.word	0x0801df58
 800e854:	0801df8c 	.word	0x0801df8c
 800e858:	0801dfa4 	.word	0x0801dfa4
 800e85c:	20004ab0 	.word	0x20004ab0
 800e860:	20007f24 	.word	0x20007f24
 800e864:	20004ab4 	.word	0x20004ab4
 800e868:	20004ab8 	.word	0x20004ab8
 800e86c:	20004ab6 	.word	0x20004ab6
 800e870:	0801dfcc 	.word	0x0801dfcc
 800e874:	0801dfdc 	.word	0x0801dfdc
 800e878:	0801dfe8 	.word	0x0801dfe8
 800e87c:	20004ac0 	.word	0x20004ac0
 800e880:	20004ac4 	.word	0x20004ac4
 800e884:	20004acc 	.word	0x20004acc
 800e888:	20004aca 	.word	0x20004aca
 800e88c:	2000b638 	.word	0x2000b638
 800e890:	0801e008 	.word	0x0801e008
 800e894:	0801e030 	.word	0x0801e030
 800e898:	0801e05c 	.word	0x0801e05c
    }

    if (pcb->remote_port == tcphdr->src &&
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	8b1a      	ldrh	r2, [r3, #24]
 800e8a0:	4b94      	ldr	r3, [pc, #592]	; (800eaf4 <tcp_input+0x524>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	881b      	ldrh	r3, [r3, #0]
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d13a      	bne.n	800e922 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	8ada      	ldrh	r2, [r3, #22]
 800e8b0:	4b90      	ldr	r3, [pc, #576]	; (800eaf4 <tcp_input+0x524>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	885b      	ldrh	r3, [r3, #2]
 800e8b6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d132      	bne.n	800e922 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	4b8d      	ldr	r3, [pc, #564]	; (800eaf8 <tcp_input+0x528>)
 800e8c2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d12c      	bne.n	800e922 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	4b8a      	ldr	r3, [pc, #552]	; (800eaf8 <tcp_input+0x528>)
 800e8ce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d126      	bne.n	800e922 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	69fa      	ldr	r2, [r7, #28]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d106      	bne.n	800e8ec <tcp_input+0x31c>
 800e8de:	4b87      	ldr	r3, [pc, #540]	; (800eafc <tcp_input+0x52c>)
 800e8e0:	f240 120d 	movw	r2, #269	; 0x10d
 800e8e4:	4986      	ldr	r1, [pc, #536]	; (800eb00 <tcp_input+0x530>)
 800e8e6:	4887      	ldr	r0, [pc, #540]	; (800eb04 <tcp_input+0x534>)
 800e8e8:	f006 fe1e 	bl	8015528 <printf>
      if (prev != NULL) {
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00a      	beq.n	800e908 <tcp_input+0x338>
        prev->next = pcb->next;
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	68da      	ldr	r2, [r3, #12]
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e8fa:	4b83      	ldr	r3, [pc, #524]	; (800eb08 <tcp_input+0x538>)
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e902:	4a81      	ldr	r2, [pc, #516]	; (800eb08 <tcp_input+0x538>)
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	69fa      	ldr	r2, [r7, #28]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d111      	bne.n	800e936 <tcp_input+0x366>
 800e912:	4b7a      	ldr	r3, [pc, #488]	; (800eafc <tcp_input+0x52c>)
 800e914:	f240 1215 	movw	r2, #277	; 0x115
 800e918:	497c      	ldr	r1, [pc, #496]	; (800eb0c <tcp_input+0x53c>)
 800e91a:	487a      	ldr	r0, [pc, #488]	; (800eb04 <tcp_input+0x534>)
 800e91c:	f006 fe04 	bl	8015528 <printf>
      break;
 800e920:	e009      	b.n	800e936 <tcp_input+0x366>
    }
    prev = pcb;
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	68db      	ldr	r3, [r3, #12]
 800e92a:	61fb      	str	r3, [r7, #28]
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f47f af5e 	bne.w	800e7f0 <tcp_input+0x220>
 800e934:	e000      	b.n	800e938 <tcp_input+0x368>
      break;
 800e936:	bf00      	nop
  }

  if (pcb == NULL) {
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f040 8095 	bne.w	800ea6a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e940:	4b73      	ldr	r3, [pc, #460]	; (800eb10 <tcp_input+0x540>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	61fb      	str	r3, [r7, #28]
 800e946:	e03f      	b.n	800e9c8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	7d1b      	ldrb	r3, [r3, #20]
 800e94c:	2b0a      	cmp	r3, #10
 800e94e:	d006      	beq.n	800e95e <tcp_input+0x38e>
 800e950:	4b6a      	ldr	r3, [pc, #424]	; (800eafc <tcp_input+0x52c>)
 800e952:	f240 121f 	movw	r2, #287	; 0x11f
 800e956:	496f      	ldr	r1, [pc, #444]	; (800eb14 <tcp_input+0x544>)
 800e958:	486a      	ldr	r0, [pc, #424]	; (800eb04 <tcp_input+0x534>)
 800e95a:	f006 fde5 	bl	8015528 <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	7a1b      	ldrb	r3, [r3, #8]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d009      	beq.n	800e97a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	7a1a      	ldrb	r2, [r3, #8]
 800e96a:	4b63      	ldr	r3, [pc, #396]	; (800eaf8 <tcp_input+0x528>)
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e972:	3301      	adds	r3, #1
 800e974:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e976:	429a      	cmp	r2, r3
 800e978:	d122      	bne.n	800e9c0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	8b1a      	ldrh	r2, [r3, #24]
 800e97e:	4b5d      	ldr	r3, [pc, #372]	; (800eaf4 <tcp_input+0x524>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	881b      	ldrh	r3, [r3, #0]
 800e984:	b29b      	uxth	r3, r3
 800e986:	429a      	cmp	r2, r3
 800e988:	d11b      	bne.n	800e9c2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	8ada      	ldrh	r2, [r3, #22]
 800e98e:	4b59      	ldr	r3, [pc, #356]	; (800eaf4 <tcp_input+0x524>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	885b      	ldrh	r3, [r3, #2]
 800e994:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e996:	429a      	cmp	r2, r3
 800e998:	d113      	bne.n	800e9c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	685a      	ldr	r2, [r3, #4]
 800e99e:	4b56      	ldr	r3, [pc, #344]	; (800eaf8 <tcp_input+0x528>)
 800e9a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d10d      	bne.n	800e9c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	4b53      	ldr	r3, [pc, #332]	; (800eaf8 <tcp_input+0x528>)
 800e9ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d107      	bne.n	800e9c2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e9b2:	69f8      	ldr	r0, [r7, #28]
 800e9b4:	f000 fb54 	bl	800f060 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f7fd ffd5 	bl	800c968 <pbuf_free>
        return;
 800e9be:	e1f0      	b.n	800eda2 <tcp_input+0x7d2>
        continue;
 800e9c0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	61fb      	str	r3, [r7, #28]
 800e9c8:	69fb      	ldr	r3, [r7, #28]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d1bc      	bne.n	800e948 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e9d2:	4b51      	ldr	r3, [pc, #324]	; (800eb18 <tcp_input+0x548>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	617b      	str	r3, [r7, #20]
 800e9d8:	e02a      	b.n	800ea30 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	7a1b      	ldrb	r3, [r3, #8]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00c      	beq.n	800e9fc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	7a1a      	ldrb	r2, [r3, #8]
 800e9e6:	4b44      	ldr	r3, [pc, #272]	; (800eaf8 <tcp_input+0x528>)
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d002      	beq.n	800e9fc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	61bb      	str	r3, [r7, #24]
        continue;
 800e9fa:	e016      	b.n	800ea2a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	8ada      	ldrh	r2, [r3, #22]
 800ea00:	4b3c      	ldr	r3, [pc, #240]	; (800eaf4 <tcp_input+0x524>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	885b      	ldrh	r3, [r3, #2]
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d10c      	bne.n	800ea26 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	4b39      	ldr	r3, [pc, #228]	; (800eaf8 <tcp_input+0x528>)
 800ea12:	695b      	ldr	r3, [r3, #20]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d00f      	beq.n	800ea38 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00d      	beq.n	800ea3a <tcp_input+0x46a>
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d009      	beq.n	800ea3a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	617b      	str	r3, [r7, #20]
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1d1      	bne.n	800e9da <tcp_input+0x40a>
 800ea36:	e000      	b.n	800ea3a <tcp_input+0x46a>
            break;
 800ea38:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d014      	beq.n	800ea6a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00a      	beq.n	800ea5c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	68da      	ldr	r2, [r3, #12]
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ea4e:	4b32      	ldr	r3, [pc, #200]	; (800eb18 <tcp_input+0x548>)
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ea56:	4a30      	ldr	r2, [pc, #192]	; (800eb18 <tcp_input+0x548>)
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ea5c:	6978      	ldr	r0, [r7, #20]
 800ea5e:	f000 fa01 	bl	800ee64 <tcp_listen_input>
      }
      pbuf_free(p);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f7fd ff80 	bl	800c968 <pbuf_free>
      return;
 800ea68:	e19b      	b.n	800eda2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	f000 8160 	beq.w	800ed32 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ea72:	4b2a      	ldr	r3, [pc, #168]	; (800eb1c <tcp_input+0x54c>)
 800ea74:	2200      	movs	r2, #0
 800ea76:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	891a      	ldrh	r2, [r3, #8]
 800ea7c:	4b27      	ldr	r3, [pc, #156]	; (800eb1c <tcp_input+0x54c>)
 800ea7e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ea80:	4a26      	ldr	r2, [pc, #152]	; (800eb1c <tcp_input+0x54c>)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ea86:	4b1b      	ldr	r3, [pc, #108]	; (800eaf4 <tcp_input+0x524>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4a24      	ldr	r2, [pc, #144]	; (800eb1c <tcp_input+0x54c>)
 800ea8c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ea8e:	4b24      	ldr	r3, [pc, #144]	; (800eb20 <tcp_input+0x550>)
 800ea90:	2200      	movs	r2, #0
 800ea92:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ea94:	4b23      	ldr	r3, [pc, #140]	; (800eb24 <tcp_input+0x554>)
 800ea96:	2200      	movs	r2, #0
 800ea98:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ea9a:	4b23      	ldr	r3, [pc, #140]	; (800eb28 <tcp_input+0x558>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800eaa0:	4b22      	ldr	r3, [pc, #136]	; (800eb2c <tcp_input+0x55c>)
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	f003 0308 	and.w	r3, r3, #8
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d006      	beq.n	800eaba <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	7b5b      	ldrb	r3, [r3, #13]
 800eab0:	f043 0301 	orr.w	r3, r3, #1
 800eab4:	b2da      	uxtb	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d038      	beq.n	800eb34 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800eac2:	69f8      	ldr	r0, [r7, #28]
 800eac4:	f7ff f93e 	bl	800dd44 <tcp_process_refused_data>
 800eac8:	4603      	mov	r3, r0
 800eaca:	f113 0f0d 	cmn.w	r3, #13
 800eace:	d007      	beq.n	800eae0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d02d      	beq.n	800eb34 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ead8:	4b15      	ldr	r3, [pc, #84]	; (800eb30 <tcp_input+0x560>)
 800eada:	881b      	ldrh	r3, [r3, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d029      	beq.n	800eb34 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f040 8104 	bne.w	800ecf2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800eaea:	69f8      	ldr	r0, [r7, #28]
 800eaec:	f003 f9be 	bl	8011e6c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800eaf0:	e0ff      	b.n	800ecf2 <tcp_input+0x722>
 800eaf2:	bf00      	nop
 800eaf4:	20004ab0 	.word	0x20004ab0
 800eaf8:	20007f24 	.word	0x20007f24
 800eafc:	0801df58 	.word	0x0801df58
 800eb00:	0801e084 	.word	0x0801e084
 800eb04:	0801dfa4 	.word	0x0801dfa4
 800eb08:	2000b638 	.word	0x2000b638
 800eb0c:	0801e0b0 	.word	0x0801e0b0
 800eb10:	2000b648 	.word	0x2000b648
 800eb14:	0801e0dc 	.word	0x0801e0dc
 800eb18:	2000b640 	.word	0x2000b640
 800eb1c:	20004aa0 	.word	0x20004aa0
 800eb20:	20004ad0 	.word	0x20004ad0
 800eb24:	20004acd 	.word	0x20004acd
 800eb28:	20004ac8 	.word	0x20004ac8
 800eb2c:	20004acc 	.word	0x20004acc
 800eb30:	20004aca 	.word	0x20004aca
      }
    }
    tcp_input_pcb = pcb;
 800eb34:	4a9c      	ldr	r2, [pc, #624]	; (800eda8 <tcp_input+0x7d8>)
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eb3a:	69f8      	ldr	r0, [r7, #28]
 800eb3c:	f000 fb0a 	bl	800f154 <tcp_process>
 800eb40:	4603      	mov	r3, r0
 800eb42:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eb44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb48:	f113 0f0d 	cmn.w	r3, #13
 800eb4c:	f000 80d3 	beq.w	800ecf6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800eb50:	4b96      	ldr	r3, [pc, #600]	; (800edac <tcp_input+0x7dc>)
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	f003 0308 	and.w	r3, r3, #8
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d015      	beq.n	800eb88 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d008      	beq.n	800eb78 <tcp_input+0x5a8>
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb6c:	69fa      	ldr	r2, [r7, #28]
 800eb6e:	6912      	ldr	r2, [r2, #16]
 800eb70:	f06f 010d 	mvn.w	r1, #13
 800eb74:	4610      	mov	r0, r2
 800eb76:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eb78:	69f9      	ldr	r1, [r7, #28]
 800eb7a:	488d      	ldr	r0, [pc, #564]	; (800edb0 <tcp_input+0x7e0>)
 800eb7c:	f7ff fbb0 	bl	800e2e0 <tcp_pcb_remove>
        tcp_free(pcb);
 800eb80:	69f8      	ldr	r0, [r7, #28]
 800eb82:	f7fe f99d 	bl	800cec0 <tcp_free>
 800eb86:	e0c1      	b.n	800ed0c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800eb8c:	4b89      	ldr	r3, [pc, #548]	; (800edb4 <tcp_input+0x7e4>)
 800eb8e:	881b      	ldrh	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d01d      	beq.n	800ebd0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800eb94:	4b87      	ldr	r3, [pc, #540]	; (800edb4 <tcp_input+0x7e4>)
 800eb96:	881b      	ldrh	r3, [r3, #0]
 800eb98:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d00a      	beq.n	800ebba <tcp_input+0x5ea>
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebaa:	69fa      	ldr	r2, [r7, #28]
 800ebac:	6910      	ldr	r0, [r2, #16]
 800ebae:	89fa      	ldrh	r2, [r7, #14]
 800ebb0:	69f9      	ldr	r1, [r7, #28]
 800ebb2:	4798      	blx	r3
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	74fb      	strb	r3, [r7, #19]
 800ebb8:	e001      	b.n	800ebbe <tcp_input+0x5ee>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ebbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebc2:	f113 0f0d 	cmn.w	r3, #13
 800ebc6:	f000 8098 	beq.w	800ecfa <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ebca:	4b7a      	ldr	r3, [pc, #488]	; (800edb4 <tcp_input+0x7e4>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ebd0:	69f8      	ldr	r0, [r7, #28]
 800ebd2:	f000 f907 	bl	800ede4 <tcp_input_delayed_close>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f040 8090 	bne.w	800ecfe <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ebde:	4b76      	ldr	r3, [pc, #472]	; (800edb8 <tcp_input+0x7e8>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d041      	beq.n	800ec6a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d006      	beq.n	800ebfc <tcp_input+0x62c>
 800ebee:	4b73      	ldr	r3, [pc, #460]	; (800edbc <tcp_input+0x7ec>)
 800ebf0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ebf4:	4972      	ldr	r1, [pc, #456]	; (800edc0 <tcp_input+0x7f0>)
 800ebf6:	4873      	ldr	r0, [pc, #460]	; (800edc4 <tcp_input+0x7f4>)
 800ebf8:	f006 fc96 	bl	8015528 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	8b5b      	ldrh	r3, [r3, #26]
 800ec00:	f003 0310 	and.w	r3, r3, #16
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d008      	beq.n	800ec1a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ec08:	4b6b      	ldr	r3, [pc, #428]	; (800edb8 <tcp_input+0x7e8>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7fd feab 	bl	800c968 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ec12:	69f8      	ldr	r0, [r7, #28]
 800ec14:	f7fe fc3c 	bl	800d490 <tcp_abort>
            goto aborted;
 800ec18:	e078      	b.n	800ed0c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00c      	beq.n	800ec3e <tcp_input+0x66e>
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ec2a:	69fb      	ldr	r3, [r7, #28]
 800ec2c:	6918      	ldr	r0, [r3, #16]
 800ec2e:	4b62      	ldr	r3, [pc, #392]	; (800edb8 <tcp_input+0x7e8>)
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	2300      	movs	r3, #0
 800ec34:	69f9      	ldr	r1, [r7, #28]
 800ec36:	47a0      	blx	r4
 800ec38:	4603      	mov	r3, r0
 800ec3a:	74fb      	strb	r3, [r7, #19]
 800ec3c:	e008      	b.n	800ec50 <tcp_input+0x680>
 800ec3e:	4b5e      	ldr	r3, [pc, #376]	; (800edb8 <tcp_input+0x7e8>)
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	2300      	movs	r3, #0
 800ec44:	69f9      	ldr	r1, [r7, #28]
 800ec46:	2000      	movs	r0, #0
 800ec48:	f7ff f952 	bl	800def0 <tcp_recv_null>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ec50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec54:	f113 0f0d 	cmn.w	r3, #13
 800ec58:	d053      	beq.n	800ed02 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ec5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d003      	beq.n	800ec6a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ec62:	4b55      	ldr	r3, [pc, #340]	; (800edb8 <tcp_input+0x7e8>)
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	69fb      	ldr	r3, [r7, #28]
 800ec68:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ec6a:	4b50      	ldr	r3, [pc, #320]	; (800edac <tcp_input+0x7dc>)
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	f003 0320 	and.w	r3, r3, #32
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d030      	beq.n	800ecd8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ec76:	69fb      	ldr	r3, [r7, #28]
 800ec78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d009      	beq.n	800ec92 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec82:	7b5a      	ldrb	r2, [r3, #13]
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec88:	f042 0220 	orr.w	r2, r2, #32
 800ec8c:	b2d2      	uxtb	r2, r2
 800ec8e:	735a      	strb	r2, [r3, #13]
 800ec90:	e022      	b.n	800ecd8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec9a:	d005      	beq.n	800eca8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eca0:	3301      	adds	r3, #1
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00b      	beq.n	800ecca <tcp_input+0x6fa>
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	6918      	ldr	r0, [r3, #16]
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	69f9      	ldr	r1, [r7, #28]
 800ecc2:	47a0      	blx	r4
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	74fb      	strb	r3, [r7, #19]
 800ecc8:	e001      	b.n	800ecce <tcp_input+0x6fe>
 800ecca:	2300      	movs	r3, #0
 800eccc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ecce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ecd2:	f113 0f0d 	cmn.w	r3, #13
 800ecd6:	d016      	beq.n	800ed06 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ecd8:	4b33      	ldr	r3, [pc, #204]	; (800eda8 <tcp_input+0x7d8>)
 800ecda:	2200      	movs	r2, #0
 800ecdc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ecde:	69f8      	ldr	r0, [r7, #28]
 800ece0:	f000 f880 	bl	800ede4 <tcp_input_delayed_close>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10f      	bne.n	800ed0a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ecea:	69f8      	ldr	r0, [r7, #28]
 800ecec:	f002 fab8 	bl	8011260 <tcp_output>
 800ecf0:	e00c      	b.n	800ed0c <tcp_input+0x73c>
        goto aborted;
 800ecf2:	bf00      	nop
 800ecf4:	e00a      	b.n	800ed0c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ecf6:	bf00      	nop
 800ecf8:	e008      	b.n	800ed0c <tcp_input+0x73c>
              goto aborted;
 800ecfa:	bf00      	nop
 800ecfc:	e006      	b.n	800ed0c <tcp_input+0x73c>
          goto aborted;
 800ecfe:	bf00      	nop
 800ed00:	e004      	b.n	800ed0c <tcp_input+0x73c>
            goto aborted;
 800ed02:	bf00      	nop
 800ed04:	e002      	b.n	800ed0c <tcp_input+0x73c>
              goto aborted;
 800ed06:	bf00      	nop
 800ed08:	e000      	b.n	800ed0c <tcp_input+0x73c>
          goto aborted;
 800ed0a:	bf00      	nop
    tcp_input_pcb = NULL;
 800ed0c:	4b26      	ldr	r3, [pc, #152]	; (800eda8 <tcp_input+0x7d8>)
 800ed0e:	2200      	movs	r2, #0
 800ed10:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ed12:	4b29      	ldr	r3, [pc, #164]	; (800edb8 <tcp_input+0x7e8>)
 800ed14:	2200      	movs	r2, #0
 800ed16:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ed18:	4b2b      	ldr	r3, [pc, #172]	; (800edc8 <tcp_input+0x7f8>)
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d03f      	beq.n	800eda0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800ed20:	4b29      	ldr	r3, [pc, #164]	; (800edc8 <tcp_input+0x7f8>)
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7fd fe1f 	bl	800c968 <pbuf_free>
      inseg.p = NULL;
 800ed2a:	4b27      	ldr	r3, [pc, #156]	; (800edc8 <tcp_input+0x7f8>)
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ed30:	e036      	b.n	800eda0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ed32:	4b26      	ldr	r3, [pc, #152]	; (800edcc <tcp_input+0x7fc>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	899b      	ldrh	r3, [r3, #12]
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fc fae0 	bl	800b300 <lwip_htons>
 800ed40:	4603      	mov	r3, r0
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	f003 0304 	and.w	r3, r3, #4
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d118      	bne.n	800ed7e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed4c:	4b20      	ldr	r3, [pc, #128]	; (800edd0 <tcp_input+0x800>)
 800ed4e:	6819      	ldr	r1, [r3, #0]
 800ed50:	4b20      	ldr	r3, [pc, #128]	; (800edd4 <tcp_input+0x804>)
 800ed52:	881b      	ldrh	r3, [r3, #0]
 800ed54:	461a      	mov	r2, r3
 800ed56:	4b20      	ldr	r3, [pc, #128]	; (800edd8 <tcp_input+0x808>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed5c:	4b1b      	ldr	r3, [pc, #108]	; (800edcc <tcp_input+0x7fc>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed60:	885b      	ldrh	r3, [r3, #2]
 800ed62:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed64:	4a19      	ldr	r2, [pc, #100]	; (800edcc <tcp_input+0x7fc>)
 800ed66:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed68:	8812      	ldrh	r2, [r2, #0]
 800ed6a:	b292      	uxth	r2, r2
 800ed6c:	9202      	str	r2, [sp, #8]
 800ed6e:	9301      	str	r3, [sp, #4]
 800ed70:	4b1a      	ldr	r3, [pc, #104]	; (800eddc <tcp_input+0x80c>)
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	4b1a      	ldr	r3, [pc, #104]	; (800ede0 <tcp_input+0x810>)
 800ed76:	4602      	mov	r2, r0
 800ed78:	2000      	movs	r0, #0
 800ed7a:	f003 f825 	bl	8011dc8 <tcp_rst>
    pbuf_free(p);
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7fd fdf2 	bl	800c968 <pbuf_free>
  return;
 800ed84:	e00c      	b.n	800eda0 <tcp_input+0x7d0>
    goto dropped;
 800ed86:	bf00      	nop
 800ed88:	e006      	b.n	800ed98 <tcp_input+0x7c8>
    goto dropped;
 800ed8a:	bf00      	nop
 800ed8c:	e004      	b.n	800ed98 <tcp_input+0x7c8>
    goto dropped;
 800ed8e:	bf00      	nop
 800ed90:	e002      	b.n	800ed98 <tcp_input+0x7c8>
      goto dropped;
 800ed92:	bf00      	nop
 800ed94:	e000      	b.n	800ed98 <tcp_input+0x7c8>
      goto dropped;
 800ed96:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f7fd fde5 	bl	800c968 <pbuf_free>
 800ed9e:	e000      	b.n	800eda2 <tcp_input+0x7d2>
  return;
 800eda0:	bf00      	nop
}
 800eda2:	3724      	adds	r7, #36	; 0x24
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd90      	pop	{r4, r7, pc}
 800eda8:	2000b64c 	.word	0x2000b64c
 800edac:	20004acd 	.word	0x20004acd
 800edb0:	2000b638 	.word	0x2000b638
 800edb4:	20004ac8 	.word	0x20004ac8
 800edb8:	20004ad0 	.word	0x20004ad0
 800edbc:	0801df58 	.word	0x0801df58
 800edc0:	0801e10c 	.word	0x0801e10c
 800edc4:	0801dfa4 	.word	0x0801dfa4
 800edc8:	20004aa0 	.word	0x20004aa0
 800edcc:	20004ab0 	.word	0x20004ab0
 800edd0:	20004ac4 	.word	0x20004ac4
 800edd4:	20004aca 	.word	0x20004aca
 800edd8:	20004ac0 	.word	0x20004ac0
 800eddc:	20007f34 	.word	0x20007f34
 800ede0:	20007f38 	.word	0x20007f38

0800ede4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d106      	bne.n	800ee00 <tcp_input_delayed_close+0x1c>
 800edf2:	4b17      	ldr	r3, [pc, #92]	; (800ee50 <tcp_input_delayed_close+0x6c>)
 800edf4:	f240 225a 	movw	r2, #602	; 0x25a
 800edf8:	4916      	ldr	r1, [pc, #88]	; (800ee54 <tcp_input_delayed_close+0x70>)
 800edfa:	4817      	ldr	r0, [pc, #92]	; (800ee58 <tcp_input_delayed_close+0x74>)
 800edfc:	f006 fb94 	bl	8015528 <printf>

  if (recv_flags & TF_CLOSED) {
 800ee00:	4b16      	ldr	r3, [pc, #88]	; (800ee5c <tcp_input_delayed_close+0x78>)
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	f003 0310 	and.w	r3, r3, #16
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d01c      	beq.n	800ee46 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	8b5b      	ldrh	r3, [r3, #26]
 800ee10:	f003 0310 	and.w	r3, r3, #16
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10d      	bne.n	800ee34 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d008      	beq.n	800ee34 <tcp_input_delayed_close+0x50>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	6912      	ldr	r2, [r2, #16]
 800ee2c:	f06f 010e 	mvn.w	r1, #14
 800ee30:	4610      	mov	r0, r2
 800ee32:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ee34:	6879      	ldr	r1, [r7, #4]
 800ee36:	480a      	ldr	r0, [pc, #40]	; (800ee60 <tcp_input_delayed_close+0x7c>)
 800ee38:	f7ff fa52 	bl	800e2e0 <tcp_pcb_remove>
    tcp_free(pcb);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7fe f83f 	bl	800cec0 <tcp_free>
    return 1;
 800ee42:	2301      	movs	r3, #1
 800ee44:	e000      	b.n	800ee48 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ee46:	2300      	movs	r3, #0
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	0801df58 	.word	0x0801df58
 800ee54:	0801e128 	.word	0x0801e128
 800ee58:	0801dfa4 	.word	0x0801dfa4
 800ee5c:	20004acd 	.word	0x20004acd
 800ee60:	2000b638 	.word	0x2000b638

0800ee64 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ee64:	b590      	push	{r4, r7, lr}
 800ee66:	b08b      	sub	sp, #44	; 0x2c
 800ee68:	af04      	add	r7, sp, #16
 800ee6a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ee6c:	4b6f      	ldr	r3, [pc, #444]	; (800f02c <tcp_listen_input+0x1c8>)
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	f003 0304 	and.w	r3, r3, #4
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f040 80d2 	bne.w	800f01e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d106      	bne.n	800ee8e <tcp_listen_input+0x2a>
 800ee80:	4b6b      	ldr	r3, [pc, #428]	; (800f030 <tcp_listen_input+0x1cc>)
 800ee82:	f240 2281 	movw	r2, #641	; 0x281
 800ee86:	496b      	ldr	r1, [pc, #428]	; (800f034 <tcp_listen_input+0x1d0>)
 800ee88:	486b      	ldr	r0, [pc, #428]	; (800f038 <tcp_listen_input+0x1d4>)
 800ee8a:	f006 fb4d 	bl	8015528 <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ee8e:	4b67      	ldr	r3, [pc, #412]	; (800f02c <tcp_listen_input+0x1c8>)
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	f003 0310 	and.w	r3, r3, #16
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d019      	beq.n	800eece <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee9a:	4b68      	ldr	r3, [pc, #416]	; (800f03c <tcp_listen_input+0x1d8>)
 800ee9c:	6819      	ldr	r1, [r3, #0]
 800ee9e:	4b68      	ldr	r3, [pc, #416]	; (800f040 <tcp_listen_input+0x1dc>)
 800eea0:	881b      	ldrh	r3, [r3, #0]
 800eea2:	461a      	mov	r2, r3
 800eea4:	4b67      	ldr	r3, [pc, #412]	; (800f044 <tcp_listen_input+0x1e0>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eeaa:	4b67      	ldr	r3, [pc, #412]	; (800f048 <tcp_listen_input+0x1e4>)
 800eeac:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeae:	885b      	ldrh	r3, [r3, #2]
 800eeb0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eeb2:	4a65      	ldr	r2, [pc, #404]	; (800f048 <tcp_listen_input+0x1e4>)
 800eeb4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeb6:	8812      	ldrh	r2, [r2, #0]
 800eeb8:	b292      	uxth	r2, r2
 800eeba:	9202      	str	r2, [sp, #8]
 800eebc:	9301      	str	r3, [sp, #4]
 800eebe:	4b63      	ldr	r3, [pc, #396]	; (800f04c <tcp_listen_input+0x1e8>)
 800eec0:	9300      	str	r3, [sp, #0]
 800eec2:	4b63      	ldr	r3, [pc, #396]	; (800f050 <tcp_listen_input+0x1ec>)
 800eec4:	4602      	mov	r2, r0
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f002 ff7e 	bl	8011dc8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800eecc:	e0a9      	b.n	800f022 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800eece:	4b57      	ldr	r3, [pc, #348]	; (800f02c <tcp_listen_input+0x1c8>)
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	f003 0302 	and.w	r3, r3, #2
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	f000 80a3 	beq.w	800f022 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	7d5b      	ldrb	r3, [r3, #21]
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7ff f929 	bl	800e138 <tcp_alloc>
 800eee6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d111      	bne.n	800ef12 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	699b      	ldr	r3, [r3, #24]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00a      	beq.n	800ef0c <tcp_listen_input+0xa8>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	699b      	ldr	r3, [r3, #24]
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	6910      	ldr	r0, [r2, #16]
 800eefe:	f04f 32ff 	mov.w	r2, #4294967295
 800ef02:	2100      	movs	r1, #0
 800ef04:	4798      	blx	r3
 800ef06:	4603      	mov	r3, r0
 800ef08:	73bb      	strb	r3, [r7, #14]
      return;
 800ef0a:	e08b      	b.n	800f024 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ef0c:	23f0      	movs	r3, #240	; 0xf0
 800ef0e:	73bb      	strb	r3, [r7, #14]
      return;
 800ef10:	e088      	b.n	800f024 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ef12:	4b50      	ldr	r3, [pc, #320]	; (800f054 <tcp_listen_input+0x1f0>)
 800ef14:	695a      	ldr	r2, [r3, #20]
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ef1a:	4b4e      	ldr	r3, [pc, #312]	; (800f054 <tcp_listen_input+0x1f0>)
 800ef1c:	691a      	ldr	r2, [r3, #16]
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	8ada      	ldrh	r2, [r3, #22]
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ef2a:	4b47      	ldr	r3, [pc, #284]	; (800f048 <tcp_listen_input+0x1e4>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	881b      	ldrh	r3, [r3, #0]
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	2203      	movs	r2, #3
 800ef3a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ef3c:	4b41      	ldr	r3, [pc, #260]	; (800f044 <tcp_listen_input+0x1e0>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	1c5a      	adds	r2, r3, #1
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ef4e:	6978      	ldr	r0, [r7, #20]
 800ef50:	f7ff fa5a 	bl	800e408 <tcp_next_iss>
 800ef54:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	693a      	ldr	r2, [r7, #16]
 800ef5a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	693a      	ldr	r2, [r7, #16]
 800ef60:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	693a      	ldr	r2, [r7, #16]
 800ef66:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	693a      	ldr	r2, [r7, #16]
 800ef6c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ef6e:	4b35      	ldr	r3, [pc, #212]	; (800f044 <tcp_listen_input+0x1e0>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	1e5a      	subs	r2, r3, #1
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	691a      	ldr	r2, [r3, #16]
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	7a5b      	ldrb	r3, [r3, #9]
 800ef8a:	f003 030c 	and.w	r3, r3, #12
 800ef8e:	b2da      	uxtb	r2, r3
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	7a1a      	ldrb	r2, [r3, #8]
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ef9c:	4b2e      	ldr	r3, [pc, #184]	; (800f058 <tcp_listen_input+0x1f4>)
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	60da      	str	r2, [r3, #12]
 800efa4:	4a2c      	ldr	r2, [pc, #176]	; (800f058 <tcp_listen_input+0x1f4>)
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	6013      	str	r3, [r2, #0]
 800efaa:	f003 f8cf 	bl	801214c <tcp_timer_needed>
 800efae:	4b2b      	ldr	r3, [pc, #172]	; (800f05c <tcp_listen_input+0x1f8>)
 800efb0:	2201      	movs	r2, #1
 800efb2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800efb4:	6978      	ldr	r0, [r7, #20]
 800efb6:	f001 fd8d 	bl	8010ad4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800efba:	4b23      	ldr	r3, [pc, #140]	; (800f048 <tcp_listen_input+0x1e4>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	89db      	ldrh	r3, [r3, #14]
 800efc0:	b29a      	uxth	r2, r3
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	3304      	adds	r3, #4
 800efdc:	4618      	mov	r0, r3
 800efde:	f004 fcc3 	bl	8013968 <ip4_route>
 800efe2:	4601      	mov	r1, r0
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	3304      	adds	r3, #4
 800efe8:	461a      	mov	r2, r3
 800efea:	4620      	mov	r0, r4
 800efec:	f7ff fa32 	bl	800e454 <tcp_eff_send_mss_netif>
 800eff0:	4603      	mov	r3, r0
 800eff2:	461a      	mov	r2, r3
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800eff8:	2112      	movs	r1, #18
 800effa:	6978      	ldr	r0, [r7, #20]
 800effc:	f002 f842 	bl	8011084 <tcp_enqueue_flags>
 800f000:	4603      	mov	r3, r0
 800f002:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d004      	beq.n	800f016 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f00c:	2100      	movs	r1, #0
 800f00e:	6978      	ldr	r0, [r7, #20]
 800f010:	f7fe f980 	bl	800d314 <tcp_abandon>
      return;
 800f014:	e006      	b.n	800f024 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f016:	6978      	ldr	r0, [r7, #20]
 800f018:	f002 f922 	bl	8011260 <tcp_output>
  return;
 800f01c:	e001      	b.n	800f022 <tcp_listen_input+0x1be>
    return;
 800f01e:	bf00      	nop
 800f020:	e000      	b.n	800f024 <tcp_listen_input+0x1c0>
  return;
 800f022:	bf00      	nop
}
 800f024:	371c      	adds	r7, #28
 800f026:	46bd      	mov	sp, r7
 800f028:	bd90      	pop	{r4, r7, pc}
 800f02a:	bf00      	nop
 800f02c:	20004acc 	.word	0x20004acc
 800f030:	0801df58 	.word	0x0801df58
 800f034:	0801e150 	.word	0x0801e150
 800f038:	0801dfa4 	.word	0x0801dfa4
 800f03c:	20004ac4 	.word	0x20004ac4
 800f040:	20004aca 	.word	0x20004aca
 800f044:	20004ac0 	.word	0x20004ac0
 800f048:	20004ab0 	.word	0x20004ab0
 800f04c:	20007f34 	.word	0x20007f34
 800f050:	20007f38 	.word	0x20007f38
 800f054:	20007f24 	.word	0x20007f24
 800f058:	2000b638 	.word	0x2000b638
 800f05c:	2000b634 	.word	0x2000b634

0800f060 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af04      	add	r7, sp, #16
 800f066:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f068:	4b2f      	ldr	r3, [pc, #188]	; (800f128 <tcp_timewait_input+0xc8>)
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	f003 0304 	and.w	r3, r3, #4
 800f070:	2b00      	cmp	r3, #0
 800f072:	d153      	bne.n	800f11c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d106      	bne.n	800f088 <tcp_timewait_input+0x28>
 800f07a:	4b2c      	ldr	r3, [pc, #176]	; (800f12c <tcp_timewait_input+0xcc>)
 800f07c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f080:	492b      	ldr	r1, [pc, #172]	; (800f130 <tcp_timewait_input+0xd0>)
 800f082:	482c      	ldr	r0, [pc, #176]	; (800f134 <tcp_timewait_input+0xd4>)
 800f084:	f006 fa50 	bl	8015528 <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f088:	4b27      	ldr	r3, [pc, #156]	; (800f128 <tcp_timewait_input+0xc8>)
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	f003 0302 	and.w	r3, r3, #2
 800f090:	2b00      	cmp	r3, #0
 800f092:	d02a      	beq.n	800f0ea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f094:	4b28      	ldr	r3, [pc, #160]	; (800f138 <tcp_timewait_input+0xd8>)
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	db2d      	blt.n	800f0fe <tcp_timewait_input+0x9e>
 800f0a2:	4b25      	ldr	r3, [pc, #148]	; (800f138 <tcp_timewait_input+0xd8>)
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0aa:	6879      	ldr	r1, [r7, #4]
 800f0ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f0ae:	440b      	add	r3, r1
 800f0b0:	1ad3      	subs	r3, r2, r3
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	dc23      	bgt.n	800f0fe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0b6:	4b21      	ldr	r3, [pc, #132]	; (800f13c <tcp_timewait_input+0xdc>)
 800f0b8:	6819      	ldr	r1, [r3, #0]
 800f0ba:	4b21      	ldr	r3, [pc, #132]	; (800f140 <tcp_timewait_input+0xe0>)
 800f0bc:	881b      	ldrh	r3, [r3, #0]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	4b1d      	ldr	r3, [pc, #116]	; (800f138 <tcp_timewait_input+0xd8>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0c6:	4b1f      	ldr	r3, [pc, #124]	; (800f144 <tcp_timewait_input+0xe4>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0ca:	885b      	ldrh	r3, [r3, #2]
 800f0cc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f0ce:	4a1d      	ldr	r2, [pc, #116]	; (800f144 <tcp_timewait_input+0xe4>)
 800f0d0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f0d2:	8812      	ldrh	r2, [r2, #0]
 800f0d4:	b292      	uxth	r2, r2
 800f0d6:	9202      	str	r2, [sp, #8]
 800f0d8:	9301      	str	r3, [sp, #4]
 800f0da:	4b1b      	ldr	r3, [pc, #108]	; (800f148 <tcp_timewait_input+0xe8>)
 800f0dc:	9300      	str	r3, [sp, #0]
 800f0de:	4b1b      	ldr	r3, [pc, #108]	; (800f14c <tcp_timewait_input+0xec>)
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f002 fe70 	bl	8011dc8 <tcp_rst>
      return;
 800f0e8:	e01b      	b.n	800f122 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f0ea:	4b0f      	ldr	r3, [pc, #60]	; (800f128 <tcp_timewait_input+0xc8>)
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	f003 0301 	and.w	r3, r3, #1
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d003      	beq.n	800f0fe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f0f6:	4b16      	ldr	r3, [pc, #88]	; (800f150 <tcp_timewait_input+0xf0>)
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f0fe:	4b10      	ldr	r3, [pc, #64]	; (800f140 <tcp_timewait_input+0xe0>)
 800f100:	881b      	ldrh	r3, [r3, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00c      	beq.n	800f120 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	8b5b      	ldrh	r3, [r3, #26]
 800f10a:	f043 0302 	orr.w	r3, r3, #2
 800f10e:	b29a      	uxth	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f002 f8a3 	bl	8011260 <tcp_output>
  }
  return;
 800f11a:	e001      	b.n	800f120 <tcp_timewait_input+0xc0>
    return;
 800f11c:	bf00      	nop
 800f11e:	e000      	b.n	800f122 <tcp_timewait_input+0xc2>
  return;
 800f120:	bf00      	nop
}
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	20004acc 	.word	0x20004acc
 800f12c:	0801df58 	.word	0x0801df58
 800f130:	0801e170 	.word	0x0801e170
 800f134:	0801dfa4 	.word	0x0801dfa4
 800f138:	20004ac0 	.word	0x20004ac0
 800f13c:	20004ac4 	.word	0x20004ac4
 800f140:	20004aca 	.word	0x20004aca
 800f144:	20004ab0 	.word	0x20004ab0
 800f148:	20007f34 	.word	0x20007f34
 800f14c:	20007f38 	.word	0x20007f38
 800f150:	2000b63c 	.word	0x2000b63c

0800f154 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f154:	b590      	push	{r4, r7, lr}
 800f156:	b08d      	sub	sp, #52	; 0x34
 800f158:	af04      	add	r7, sp, #16
 800f15a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f15c:	2300      	movs	r3, #0
 800f15e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f160:	2300      	movs	r3, #0
 800f162:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d106      	bne.n	800f178 <tcp_process+0x24>
 800f16a:	4ba5      	ldr	r3, [pc, #660]	; (800f400 <tcp_process+0x2ac>)
 800f16c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f170:	49a4      	ldr	r1, [pc, #656]	; (800f404 <tcp_process+0x2b0>)
 800f172:	48a5      	ldr	r0, [pc, #660]	; (800f408 <tcp_process+0x2b4>)
 800f174:	f006 f9d8 	bl	8015528 <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f178:	4ba4      	ldr	r3, [pc, #656]	; (800f40c <tcp_process+0x2b8>)
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	f003 0304 	and.w	r3, r3, #4
 800f180:	2b00      	cmp	r3, #0
 800f182:	d04e      	beq.n	800f222 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	7d1b      	ldrb	r3, [r3, #20]
 800f188:	2b02      	cmp	r3, #2
 800f18a:	d108      	bne.n	800f19e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f190:	4b9f      	ldr	r3, [pc, #636]	; (800f410 <tcp_process+0x2bc>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	429a      	cmp	r2, r3
 800f196:	d123      	bne.n	800f1e0 <tcp_process+0x8c>
        acceptable = 1;
 800f198:	2301      	movs	r3, #1
 800f19a:	76fb      	strb	r3, [r7, #27]
 800f19c:	e020      	b.n	800f1e0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1a2:	4b9c      	ldr	r3, [pc, #624]	; (800f414 <tcp_process+0x2c0>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d102      	bne.n	800f1b0 <tcp_process+0x5c>
        acceptable = 1;
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	76fb      	strb	r3, [r7, #27]
 800f1ae:	e017      	b.n	800f1e0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f1b0:	4b98      	ldr	r3, [pc, #608]	; (800f414 <tcp_process+0x2c0>)
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b8:	1ad3      	subs	r3, r2, r3
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	db10      	blt.n	800f1e0 <tcp_process+0x8c>
 800f1be:	4b95      	ldr	r3, [pc, #596]	; (800f414 <tcp_process+0x2c0>)
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c6:	6879      	ldr	r1, [r7, #4]
 800f1c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f1ca:	440b      	add	r3, r1
 800f1cc:	1ad3      	subs	r3, r2, r3
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	dc06      	bgt.n	800f1e0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	8b5b      	ldrh	r3, [r3, #26]
 800f1d6:	f043 0302 	orr.w	r3, r3, #2
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f1e0:	7efb      	ldrb	r3, [r7, #27]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d01b      	beq.n	800f21e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	7d1b      	ldrb	r3, [r3, #20]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d106      	bne.n	800f1fc <tcp_process+0xa8>
 800f1ee:	4b84      	ldr	r3, [pc, #528]	; (800f400 <tcp_process+0x2ac>)
 800f1f0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f1f4:	4988      	ldr	r1, [pc, #544]	; (800f418 <tcp_process+0x2c4>)
 800f1f6:	4884      	ldr	r0, [pc, #528]	; (800f408 <tcp_process+0x2b4>)
 800f1f8:	f006 f996 	bl	8015528 <printf>
      recv_flags |= TF_RESET;
 800f1fc:	4b87      	ldr	r3, [pc, #540]	; (800f41c <tcp_process+0x2c8>)
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	f043 0308 	orr.w	r3, r3, #8
 800f204:	b2da      	uxtb	r2, r3
 800f206:	4b85      	ldr	r3, [pc, #532]	; (800f41c <tcp_process+0x2c8>)
 800f208:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	8b5b      	ldrh	r3, [r3, #26]
 800f20e:	f023 0301 	bic.w	r3, r3, #1
 800f212:	b29a      	uxth	r2, r3
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f218:	f06f 030d 	mvn.w	r3, #13
 800f21c:	e37a      	b.n	800f914 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f21e:	2300      	movs	r3, #0
 800f220:	e378      	b.n	800f914 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f222:	4b7a      	ldr	r3, [pc, #488]	; (800f40c <tcp_process+0x2b8>)
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	f003 0302 	and.w	r3, r3, #2
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d010      	beq.n	800f250 <tcp_process+0xfc>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	7d1b      	ldrb	r3, [r3, #20]
 800f232:	2b02      	cmp	r3, #2
 800f234:	d00c      	beq.n	800f250 <tcp_process+0xfc>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	7d1b      	ldrb	r3, [r3, #20]
 800f23a:	2b03      	cmp	r3, #3
 800f23c:	d008      	beq.n	800f250 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	8b5b      	ldrh	r3, [r3, #26]
 800f242:	f043 0302 	orr.w	r3, r3, #2
 800f246:	b29a      	uxth	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	e361      	b.n	800f914 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	8b5b      	ldrh	r3, [r3, #26]
 800f254:	f003 0310 	and.w	r3, r3, #16
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d103      	bne.n	800f264 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f25c:	4b70      	ldr	r3, [pc, #448]	; (800f420 <tcp_process+0x2cc>)
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2200      	movs	r2, #0
 800f268:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f001 fc2d 	bl	8010ad4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	7d1b      	ldrb	r3, [r3, #20]
 800f27e:	3b02      	subs	r3, #2
 800f280:	2b07      	cmp	r3, #7
 800f282:	f200 8337 	bhi.w	800f8f4 <tcp_process+0x7a0>
 800f286:	a201      	add	r2, pc, #4	; (adr r2, 800f28c <tcp_process+0x138>)
 800f288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28c:	0800f2ad 	.word	0x0800f2ad
 800f290:	0800f4dd 	.word	0x0800f4dd
 800f294:	0800f655 	.word	0x0800f655
 800f298:	0800f67f 	.word	0x0800f67f
 800f29c:	0800f7a3 	.word	0x0800f7a3
 800f2a0:	0800f655 	.word	0x0800f655
 800f2a4:	0800f82f 	.word	0x0800f82f
 800f2a8:	0800f8bf 	.word	0x0800f8bf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f2ac:	4b57      	ldr	r3, [pc, #348]	; (800f40c <tcp_process+0x2b8>)
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	f003 0310 	and.w	r3, r3, #16
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f000 80e4 	beq.w	800f482 <tcp_process+0x32e>
 800f2ba:	4b54      	ldr	r3, [pc, #336]	; (800f40c <tcp_process+0x2b8>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	f003 0302 	and.w	r3, r3, #2
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 80dd 	beq.w	800f482 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2cc:	1c5a      	adds	r2, r3, #1
 800f2ce:	4b50      	ldr	r3, [pc, #320]	; (800f410 <tcp_process+0x2bc>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	f040 80d5 	bne.w	800f482 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f2d8:	4b4e      	ldr	r3, [pc, #312]	; (800f414 <tcp_process+0x2c0>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	1c5a      	adds	r2, r3, #1
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f2ea:	4b49      	ldr	r3, [pc, #292]	; (800f410 <tcp_process+0x2bc>)
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f2f2:	4b4c      	ldr	r3, [pc, #304]	; (800f424 <tcp_process+0x2d0>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	89db      	ldrh	r3, [r3, #14]
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f30c:	4b41      	ldr	r3, [pc, #260]	; (800f414 <tcp_process+0x2c0>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	1e5a      	subs	r2, r3, #1
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2204      	movs	r2, #4
 800f31a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	3304      	adds	r3, #4
 800f324:	4618      	mov	r0, r3
 800f326:	f004 fb1f 	bl	8013968 <ip4_route>
 800f32a:	4601      	mov	r1, r0
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	3304      	adds	r3, #4
 800f330:	461a      	mov	r2, r3
 800f332:	4620      	mov	r0, r4
 800f334:	f7ff f88e 	bl	800e454 <tcp_eff_send_mss_netif>
 800f338:	4603      	mov	r3, r0
 800f33a:	461a      	mov	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f344:	009a      	lsls	r2, r3, #2
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f34a:	005b      	lsls	r3, r3, #1
 800f34c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f350:	428b      	cmp	r3, r1
 800f352:	bf38      	it	cc
 800f354:	460b      	movcc	r3, r1
 800f356:	429a      	cmp	r2, r3
 800f358:	d204      	bcs.n	800f364 <tcp_process+0x210>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	b29b      	uxth	r3, r3
 800f362:	e00d      	b.n	800f380 <tcp_process+0x22c>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f368:	005b      	lsls	r3, r3, #1
 800f36a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f36e:	4293      	cmp	r3, r2
 800f370:	d904      	bls.n	800f37c <tcp_process+0x228>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f376:	005b      	lsls	r3, r3, #1
 800f378:	b29b      	uxth	r3, r3
 800f37a:	e001      	b.n	800f380 <tcp_process+0x22c>
 800f37c:	f241 131c 	movw	r3, #4380	; 0x111c
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d106      	bne.n	800f39e <tcp_process+0x24a>
 800f390:	4b1b      	ldr	r3, [pc, #108]	; (800f400 <tcp_process+0x2ac>)
 800f392:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f396:	4924      	ldr	r1, [pc, #144]	; (800f428 <tcp_process+0x2d4>)
 800f398:	481b      	ldr	r0, [pc, #108]	; (800f408 <tcp_process+0x2b4>)
 800f39a:	f006 f8c5 	bl	8015528 <printf>
        --pcb->snd_queuelen;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	b29a      	uxth	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3b2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d111      	bne.n	800f3de <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3be:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d106      	bne.n	800f3d4 <tcp_process+0x280>
 800f3c6:	4b0e      	ldr	r3, [pc, #56]	; (800f400 <tcp_process+0x2ac>)
 800f3c8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f3cc:	4917      	ldr	r1, [pc, #92]	; (800f42c <tcp_process+0x2d8>)
 800f3ce:	480e      	ldr	r0, [pc, #56]	; (800f408 <tcp_process+0x2b4>)
 800f3d0:	f006 f8aa 	bl	8015528 <printf>
          pcb->unsent = rseg->next;
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	66da      	str	r2, [r3, #108]	; 0x6c
 800f3dc:	e003      	b.n	800f3e6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f3e6:	69f8      	ldr	r0, [r7, #28]
 800f3e8:	f7fe fd3d 	bl	800de66 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d11d      	bne.n	800f430 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3fa:	861a      	strh	r2, [r3, #48]	; 0x30
 800f3fc:	e01f      	b.n	800f43e <tcp_process+0x2ea>
 800f3fe:	bf00      	nop
 800f400:	0801df58 	.word	0x0801df58
 800f404:	0801e190 	.word	0x0801e190
 800f408:	0801dfa4 	.word	0x0801dfa4
 800f40c:	20004acc 	.word	0x20004acc
 800f410:	20004ac4 	.word	0x20004ac4
 800f414:	20004ac0 	.word	0x20004ac0
 800f418:	0801e1ac 	.word	0x0801e1ac
 800f41c:	20004acd 	.word	0x20004acd
 800f420:	2000b63c 	.word	0x2000b63c
 800f424:	20004ab0 	.word	0x20004ab0
 800f428:	0801e1cc 	.word	0x0801e1cc
 800f42c:	0801e1e4 	.word	0x0801e1e4
        } else {
          pcb->rtime = 0;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2200      	movs	r2, #0
 800f434:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00a      	beq.n	800f45e <tcp_process+0x30a>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f44e:	687a      	ldr	r2, [r7, #4]
 800f450:	6910      	ldr	r0, [r2, #16]
 800f452:	2200      	movs	r2, #0
 800f454:	6879      	ldr	r1, [r7, #4]
 800f456:	4798      	blx	r3
 800f458:	4603      	mov	r3, r0
 800f45a:	76bb      	strb	r3, [r7, #26]
 800f45c:	e001      	b.n	800f462 <tcp_process+0x30e>
 800f45e:	2300      	movs	r3, #0
 800f460:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f462:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f466:	f113 0f0d 	cmn.w	r3, #13
 800f46a:	d102      	bne.n	800f472 <tcp_process+0x31e>
          return ERR_ABRT;
 800f46c:	f06f 030c 	mvn.w	r3, #12
 800f470:	e250      	b.n	800f914 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	8b5b      	ldrh	r3, [r3, #26]
 800f476:	f043 0302 	orr.w	r3, r3, #2
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f480:	e23a      	b.n	800f8f8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f482:	4b9d      	ldr	r3, [pc, #628]	; (800f6f8 <tcp_process+0x5a4>)
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	f003 0310 	and.w	r3, r3, #16
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f000 8234 	beq.w	800f8f8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f490:	4b9a      	ldr	r3, [pc, #616]	; (800f6fc <tcp_process+0x5a8>)
 800f492:	6819      	ldr	r1, [r3, #0]
 800f494:	4b9a      	ldr	r3, [pc, #616]	; (800f700 <tcp_process+0x5ac>)
 800f496:	881b      	ldrh	r3, [r3, #0]
 800f498:	461a      	mov	r2, r3
 800f49a:	4b9a      	ldr	r3, [pc, #616]	; (800f704 <tcp_process+0x5b0>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4a0:	4b99      	ldr	r3, [pc, #612]	; (800f708 <tcp_process+0x5b4>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4a4:	885b      	ldrh	r3, [r3, #2]
 800f4a6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4a8:	4a97      	ldr	r2, [pc, #604]	; (800f708 <tcp_process+0x5b4>)
 800f4aa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4ac:	8812      	ldrh	r2, [r2, #0]
 800f4ae:	b292      	uxth	r2, r2
 800f4b0:	9202      	str	r2, [sp, #8]
 800f4b2:	9301      	str	r3, [sp, #4]
 800f4b4:	4b95      	ldr	r3, [pc, #596]	; (800f70c <tcp_process+0x5b8>)
 800f4b6:	9300      	str	r3, [sp, #0]
 800f4b8:	4b95      	ldr	r3, [pc, #596]	; (800f710 <tcp_process+0x5bc>)
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f002 fc83 	bl	8011dc8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f4c8:	2b05      	cmp	r3, #5
 800f4ca:	f200 8215 	bhi.w	800f8f8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f002 fa4d 	bl	8011974 <tcp_rexmit_rto>
      break;
 800f4da:	e20d      	b.n	800f8f8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f4dc:	4b86      	ldr	r3, [pc, #536]	; (800f6f8 <tcp_process+0x5a4>)
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	f003 0310 	and.w	r3, r3, #16
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f000 80a1 	beq.w	800f62c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f4ea:	4b84      	ldr	r3, [pc, #528]	; (800f6fc <tcp_process+0x5a8>)
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4f2:	1ad3      	subs	r3, r2, r3
 800f4f4:	3b01      	subs	r3, #1
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	db7e      	blt.n	800f5f8 <tcp_process+0x4a4>
 800f4fa:	4b80      	ldr	r3, [pc, #512]	; (800f6fc <tcp_process+0x5a8>)
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f502:	1ad3      	subs	r3, r2, r3
 800f504:	2b00      	cmp	r3, #0
 800f506:	dc77      	bgt.n	800f5f8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2204      	movs	r2, #4
 800f50c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f512:	2b00      	cmp	r3, #0
 800f514:	d102      	bne.n	800f51c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f516:	23fa      	movs	r3, #250	; 0xfa
 800f518:	76bb      	strb	r3, [r7, #26]
 800f51a:	e01d      	b.n	800f558 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f520:	699b      	ldr	r3, [r3, #24]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d106      	bne.n	800f534 <tcp_process+0x3e0>
 800f526:	4b7b      	ldr	r3, [pc, #492]	; (800f714 <tcp_process+0x5c0>)
 800f528:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f52c:	497a      	ldr	r1, [pc, #488]	; (800f718 <tcp_process+0x5c4>)
 800f52e:	487b      	ldr	r0, [pc, #492]	; (800f71c <tcp_process+0x5c8>)
 800f530:	f005 fffa 	bl	8015528 <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00a      	beq.n	800f554 <tcp_process+0x400>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f542:	699b      	ldr	r3, [r3, #24]
 800f544:	687a      	ldr	r2, [r7, #4]
 800f546:	6910      	ldr	r0, [r2, #16]
 800f548:	2200      	movs	r2, #0
 800f54a:	6879      	ldr	r1, [r7, #4]
 800f54c:	4798      	blx	r3
 800f54e:	4603      	mov	r3, r0
 800f550:	76bb      	strb	r3, [r7, #26]
 800f552:	e001      	b.n	800f558 <tcp_process+0x404>
 800f554:	23f0      	movs	r3, #240	; 0xf0
 800f556:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f558:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00a      	beq.n	800f576 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f560:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f564:	f113 0f0d 	cmn.w	r3, #13
 800f568:	d002      	beq.n	800f570 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f7fd ff90 	bl	800d490 <tcp_abort>
            }
            return ERR_ABRT;
 800f570:	f06f 030c 	mvn.w	r3, #12
 800f574:	e1ce      	b.n	800f914 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 fae0 	bl	800fb3c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f57c:	4b68      	ldr	r3, [pc, #416]	; (800f720 <tcp_process+0x5cc>)
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d005      	beq.n	800f590 <tcp_process+0x43c>
            recv_acked--;
 800f584:	4b66      	ldr	r3, [pc, #408]	; (800f720 <tcp_process+0x5cc>)
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	3b01      	subs	r3, #1
 800f58a:	b29a      	uxth	r2, r3
 800f58c:	4b64      	ldr	r3, [pc, #400]	; (800f720 <tcp_process+0x5cc>)
 800f58e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f594:	009a      	lsls	r2, r3, #2
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f59a:	005b      	lsls	r3, r3, #1
 800f59c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f5a0:	428b      	cmp	r3, r1
 800f5a2:	bf38      	it	cc
 800f5a4:	460b      	movcc	r3, r1
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d204      	bcs.n	800f5b4 <tcp_process+0x460>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	e00d      	b.n	800f5d0 <tcp_process+0x47c>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5b8:	005b      	lsls	r3, r3, #1
 800f5ba:	f241 121c 	movw	r2, #4380	; 0x111c
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d904      	bls.n	800f5cc <tcp_process+0x478>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5c6:	005b      	lsls	r3, r3, #1
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	e001      	b.n	800f5d0 <tcp_process+0x47c>
 800f5cc:	f241 131c 	movw	r3, #4380	; 0x111c
 800f5d0:	687a      	ldr	r2, [r7, #4]
 800f5d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f5d6:	4b53      	ldr	r3, [pc, #332]	; (800f724 <tcp_process+0x5d0>)
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	f003 0320 	and.w	r3, r3, #32
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d037      	beq.n	800f652 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	8b5b      	ldrh	r3, [r3, #26]
 800f5e6:	f043 0302 	orr.w	r3, r3, #2
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2207      	movs	r2, #7
 800f5f4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f5f6:	e02c      	b.n	800f652 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5f8:	4b40      	ldr	r3, [pc, #256]	; (800f6fc <tcp_process+0x5a8>)
 800f5fa:	6819      	ldr	r1, [r3, #0]
 800f5fc:	4b40      	ldr	r3, [pc, #256]	; (800f700 <tcp_process+0x5ac>)
 800f5fe:	881b      	ldrh	r3, [r3, #0]
 800f600:	461a      	mov	r2, r3
 800f602:	4b40      	ldr	r3, [pc, #256]	; (800f704 <tcp_process+0x5b0>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f608:	4b3f      	ldr	r3, [pc, #252]	; (800f708 <tcp_process+0x5b4>)
 800f60a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f60c:	885b      	ldrh	r3, [r3, #2]
 800f60e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f610:	4a3d      	ldr	r2, [pc, #244]	; (800f708 <tcp_process+0x5b4>)
 800f612:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f614:	8812      	ldrh	r2, [r2, #0]
 800f616:	b292      	uxth	r2, r2
 800f618:	9202      	str	r2, [sp, #8]
 800f61a:	9301      	str	r3, [sp, #4]
 800f61c:	4b3b      	ldr	r3, [pc, #236]	; (800f70c <tcp_process+0x5b8>)
 800f61e:	9300      	str	r3, [sp, #0]
 800f620:	4b3b      	ldr	r3, [pc, #236]	; (800f710 <tcp_process+0x5bc>)
 800f622:	4602      	mov	r2, r0
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f002 fbcf 	bl	8011dc8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f62a:	e167      	b.n	800f8fc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f62c:	4b32      	ldr	r3, [pc, #200]	; (800f6f8 <tcp_process+0x5a4>)
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	f003 0302 	and.w	r3, r3, #2
 800f634:	2b00      	cmp	r3, #0
 800f636:	f000 8161 	beq.w	800f8fc <tcp_process+0x7a8>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f63e:	1e5a      	subs	r2, r3, #1
 800f640:	4b30      	ldr	r3, [pc, #192]	; (800f704 <tcp_process+0x5b0>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	429a      	cmp	r2, r3
 800f646:	f040 8159 	bne.w	800f8fc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f002 f9b4 	bl	80119b8 <tcp_rexmit>
      break;
 800f650:	e154      	b.n	800f8fc <tcp_process+0x7a8>
 800f652:	e153      	b.n	800f8fc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f000 fa71 	bl	800fb3c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f65a:	4b32      	ldr	r3, [pc, #200]	; (800f724 <tcp_process+0x5d0>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	f003 0320 	and.w	r3, r3, #32
 800f662:	2b00      	cmp	r3, #0
 800f664:	f000 814c 	beq.w	800f900 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	8b5b      	ldrh	r3, [r3, #26]
 800f66c:	f043 0302 	orr.w	r3, r3, #2
 800f670:	b29a      	uxth	r2, r3
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2207      	movs	r2, #7
 800f67a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f67c:	e140      	b.n	800f900 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 fa5c 	bl	800fb3c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f684:	4b27      	ldr	r3, [pc, #156]	; (800f724 <tcp_process+0x5d0>)
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	f003 0320 	and.w	r3, r3, #32
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d071      	beq.n	800f774 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f690:	4b19      	ldr	r3, [pc, #100]	; (800f6f8 <tcp_process+0x5a4>)
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	f003 0310 	and.w	r3, r3, #16
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d060      	beq.n	800f75e <tcp_process+0x60a>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6a0:	4b16      	ldr	r3, [pc, #88]	; (800f6fc <tcp_process+0x5a8>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d15a      	bne.n	800f75e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d156      	bne.n	800f75e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	8b5b      	ldrh	r3, [r3, #26]
 800f6b4:	f043 0302 	orr.w	r3, r3, #2
 800f6b8:	b29a      	uxth	r2, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f7fe fdbe 	bl	800e240 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f6c4:	4b18      	ldr	r3, [pc, #96]	; (800f728 <tcp_process+0x5d4>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	687a      	ldr	r2, [r7, #4]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d105      	bne.n	800f6da <tcp_process+0x586>
 800f6ce:	4b16      	ldr	r3, [pc, #88]	; (800f728 <tcp_process+0x5d4>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	4a14      	ldr	r2, [pc, #80]	; (800f728 <tcp_process+0x5d4>)
 800f6d6:	6013      	str	r3, [r2, #0]
 800f6d8:	e02e      	b.n	800f738 <tcp_process+0x5e4>
 800f6da:	4b13      	ldr	r3, [pc, #76]	; (800f728 <tcp_process+0x5d4>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	617b      	str	r3, [r7, #20]
 800f6e0:	e027      	b.n	800f732 <tcp_process+0x5de>
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d11f      	bne.n	800f72c <tcp_process+0x5d8>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	68da      	ldr	r2, [r3, #12]
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	60da      	str	r2, [r3, #12]
 800f6f4:	e020      	b.n	800f738 <tcp_process+0x5e4>
 800f6f6:	bf00      	nop
 800f6f8:	20004acc 	.word	0x20004acc
 800f6fc:	20004ac4 	.word	0x20004ac4
 800f700:	20004aca 	.word	0x20004aca
 800f704:	20004ac0 	.word	0x20004ac0
 800f708:	20004ab0 	.word	0x20004ab0
 800f70c:	20007f34 	.word	0x20007f34
 800f710:	20007f38 	.word	0x20007f38
 800f714:	0801df58 	.word	0x0801df58
 800f718:	0801e1f8 	.word	0x0801e1f8
 800f71c:	0801dfa4 	.word	0x0801dfa4
 800f720:	20004ac8 	.word	0x20004ac8
 800f724:	20004acd 	.word	0x20004acd
 800f728:	2000b638 	.word	0x2000b638
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	617b      	str	r3, [r7, #20]
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d1d4      	bne.n	800f6e2 <tcp_process+0x58e>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2200      	movs	r2, #0
 800f73c:	60da      	str	r2, [r3, #12]
 800f73e:	4b77      	ldr	r3, [pc, #476]	; (800f91c <tcp_process+0x7c8>)
 800f740:	2201      	movs	r2, #1
 800f742:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	220a      	movs	r2, #10
 800f748:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f74a:	4b75      	ldr	r3, [pc, #468]	; (800f920 <tcp_process+0x7cc>)
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	60da      	str	r2, [r3, #12]
 800f752:	4a73      	ldr	r2, [pc, #460]	; (800f920 <tcp_process+0x7cc>)
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6013      	str	r3, [r2, #0]
 800f758:	f002 fcf8 	bl	801214c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f75c:	e0d2      	b.n	800f904 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	8b5b      	ldrh	r3, [r3, #26]
 800f762:	f043 0302 	orr.w	r3, r3, #2
 800f766:	b29a      	uxth	r2, r3
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2208      	movs	r2, #8
 800f770:	751a      	strb	r2, [r3, #20]
      break;
 800f772:	e0c7      	b.n	800f904 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f774:	4b6b      	ldr	r3, [pc, #428]	; (800f924 <tcp_process+0x7d0>)
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	f003 0310 	and.w	r3, r3, #16
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f000 80c1 	beq.w	800f904 <tcp_process+0x7b0>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f786:	4b68      	ldr	r3, [pc, #416]	; (800f928 <tcp_process+0x7d4>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	f040 80ba 	bne.w	800f904 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f794:	2b00      	cmp	r3, #0
 800f796:	f040 80b5 	bne.w	800f904 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2206      	movs	r2, #6
 800f79e:	751a      	strb	r2, [r3, #20]
      break;
 800f7a0:	e0b0      	b.n	800f904 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 f9ca 	bl	800fb3c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f7a8:	4b60      	ldr	r3, [pc, #384]	; (800f92c <tcp_process+0x7d8>)
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	f003 0320 	and.w	r3, r3, #32
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f000 80a9 	beq.w	800f908 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	8b5b      	ldrh	r3, [r3, #26]
 800f7ba:	f043 0302 	orr.w	r3, r3, #2
 800f7be:	b29a      	uxth	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f7fe fd3b 	bl	800e240 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f7ca:	4b59      	ldr	r3, [pc, #356]	; (800f930 <tcp_process+0x7dc>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d105      	bne.n	800f7e0 <tcp_process+0x68c>
 800f7d4:	4b56      	ldr	r3, [pc, #344]	; (800f930 <tcp_process+0x7dc>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	4a55      	ldr	r2, [pc, #340]	; (800f930 <tcp_process+0x7dc>)
 800f7dc:	6013      	str	r3, [r2, #0]
 800f7de:	e013      	b.n	800f808 <tcp_process+0x6b4>
 800f7e0:	4b53      	ldr	r3, [pc, #332]	; (800f930 <tcp_process+0x7dc>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	613b      	str	r3, [r7, #16]
 800f7e6:	e00c      	b.n	800f802 <tcp_process+0x6ae>
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	68db      	ldr	r3, [r3, #12]
 800f7ec:	687a      	ldr	r2, [r7, #4]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d104      	bne.n	800f7fc <tcp_process+0x6a8>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	68da      	ldr	r2, [r3, #12]
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	60da      	str	r2, [r3, #12]
 800f7fa:	e005      	b.n	800f808 <tcp_process+0x6b4>
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	68db      	ldr	r3, [r3, #12]
 800f800:	613b      	str	r3, [r7, #16]
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1ef      	bne.n	800f7e8 <tcp_process+0x694>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	60da      	str	r2, [r3, #12]
 800f80e:	4b43      	ldr	r3, [pc, #268]	; (800f91c <tcp_process+0x7c8>)
 800f810:	2201      	movs	r2, #1
 800f812:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	220a      	movs	r2, #10
 800f818:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f81a:	4b41      	ldr	r3, [pc, #260]	; (800f920 <tcp_process+0x7cc>)
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	60da      	str	r2, [r3, #12]
 800f822:	4a3f      	ldr	r2, [pc, #252]	; (800f920 <tcp_process+0x7cc>)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6013      	str	r3, [r2, #0]
 800f828:	f002 fc90 	bl	801214c <tcp_timer_needed>
      }
      break;
 800f82c:	e06c      	b.n	800f908 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 f984 	bl	800fb3c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f834:	4b3b      	ldr	r3, [pc, #236]	; (800f924 <tcp_process+0x7d0>)
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	f003 0310 	and.w	r3, r3, #16
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d065      	beq.n	800f90c <tcp_process+0x7b8>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f844:	4b38      	ldr	r3, [pc, #224]	; (800f928 <tcp_process+0x7d4>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d15f      	bne.n	800f90c <tcp_process+0x7b8>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f850:	2b00      	cmp	r3, #0
 800f852:	d15b      	bne.n	800f90c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f7fe fcf3 	bl	800e240 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f85a:	4b35      	ldr	r3, [pc, #212]	; (800f930 <tcp_process+0x7dc>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	429a      	cmp	r2, r3
 800f862:	d105      	bne.n	800f870 <tcp_process+0x71c>
 800f864:	4b32      	ldr	r3, [pc, #200]	; (800f930 <tcp_process+0x7dc>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	68db      	ldr	r3, [r3, #12]
 800f86a:	4a31      	ldr	r2, [pc, #196]	; (800f930 <tcp_process+0x7dc>)
 800f86c:	6013      	str	r3, [r2, #0]
 800f86e:	e013      	b.n	800f898 <tcp_process+0x744>
 800f870:	4b2f      	ldr	r3, [pc, #188]	; (800f930 <tcp_process+0x7dc>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	60fb      	str	r3, [r7, #12]
 800f876:	e00c      	b.n	800f892 <tcp_process+0x73e>
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d104      	bne.n	800f88c <tcp_process+0x738>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	68da      	ldr	r2, [r3, #12]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	60da      	str	r2, [r3, #12]
 800f88a:	e005      	b.n	800f898 <tcp_process+0x744>
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	60fb      	str	r3, [r7, #12]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d1ef      	bne.n	800f878 <tcp_process+0x724>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	60da      	str	r2, [r3, #12]
 800f89e:	4b1f      	ldr	r3, [pc, #124]	; (800f91c <tcp_process+0x7c8>)
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	220a      	movs	r2, #10
 800f8a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f8aa:	4b1d      	ldr	r3, [pc, #116]	; (800f920 <tcp_process+0x7cc>)
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	60da      	str	r2, [r3, #12]
 800f8b2:	4a1b      	ldr	r2, [pc, #108]	; (800f920 <tcp_process+0x7cc>)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6013      	str	r3, [r2, #0]
 800f8b8:	f002 fc48 	bl	801214c <tcp_timer_needed>
      }
      break;
 800f8bc:	e026      	b.n	800f90c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f93c 	bl	800fb3c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f8c4:	4b17      	ldr	r3, [pc, #92]	; (800f924 <tcp_process+0x7d0>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	f003 0310 	and.w	r3, r3, #16
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d01f      	beq.n	800f910 <tcp_process+0x7bc>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f8d4:	4b14      	ldr	r3, [pc, #80]	; (800f928 <tcp_process+0x7d4>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d119      	bne.n	800f910 <tcp_process+0x7bc>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d115      	bne.n	800f910 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f8e4:	4b11      	ldr	r3, [pc, #68]	; (800f92c <tcp_process+0x7d8>)
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	f043 0310 	orr.w	r3, r3, #16
 800f8ec:	b2da      	uxtb	r2, r3
 800f8ee:	4b0f      	ldr	r3, [pc, #60]	; (800f92c <tcp_process+0x7d8>)
 800f8f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f8f2:	e00d      	b.n	800f910 <tcp_process+0x7bc>
    default:
      break;
 800f8f4:	bf00      	nop
 800f8f6:	e00c      	b.n	800f912 <tcp_process+0x7be>
      break;
 800f8f8:	bf00      	nop
 800f8fa:	e00a      	b.n	800f912 <tcp_process+0x7be>
      break;
 800f8fc:	bf00      	nop
 800f8fe:	e008      	b.n	800f912 <tcp_process+0x7be>
      break;
 800f900:	bf00      	nop
 800f902:	e006      	b.n	800f912 <tcp_process+0x7be>
      break;
 800f904:	bf00      	nop
 800f906:	e004      	b.n	800f912 <tcp_process+0x7be>
      break;
 800f908:	bf00      	nop
 800f90a:	e002      	b.n	800f912 <tcp_process+0x7be>
      break;
 800f90c:	bf00      	nop
 800f90e:	e000      	b.n	800f912 <tcp_process+0x7be>
      break;
 800f910:	bf00      	nop
  }
  return ERR_OK;
 800f912:	2300      	movs	r3, #0
}
 800f914:	4618      	mov	r0, r3
 800f916:	3724      	adds	r7, #36	; 0x24
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd90      	pop	{r4, r7, pc}
 800f91c:	2000b634 	.word	0x2000b634
 800f920:	2000b648 	.word	0x2000b648
 800f924:	20004acc 	.word	0x20004acc
 800f928:	20004ac4 	.word	0x20004ac4
 800f92c:	20004acd 	.word	0x20004acd
 800f930:	2000b638 	.word	0x2000b638

0800f934 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f934:	b590      	push	{r4, r7, lr}
 800f936:	b085      	sub	sp, #20
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d106      	bne.n	800f952 <tcp_oos_insert_segment+0x1e>
 800f944:	4b3b      	ldr	r3, [pc, #236]	; (800fa34 <tcp_oos_insert_segment+0x100>)
 800f946:	f240 421f 	movw	r2, #1055	; 0x41f
 800f94a:	493b      	ldr	r1, [pc, #236]	; (800fa38 <tcp_oos_insert_segment+0x104>)
 800f94c:	483b      	ldr	r0, [pc, #236]	; (800fa3c <tcp_oos_insert_segment+0x108>)
 800f94e:	f005 fdeb 	bl	8015528 <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	899b      	ldrh	r3, [r3, #12]
 800f958:	b29b      	uxth	r3, r3
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7fb fcd0 	bl	800b300 <lwip_htons>
 800f960:	4603      	mov	r3, r0
 800f962:	b2db      	uxtb	r3, r3
 800f964:	f003 0301 	and.w	r3, r3, #1
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d028      	beq.n	800f9be <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f96c:	6838      	ldr	r0, [r7, #0]
 800f96e:	f7fe fa65 	bl	800de3c <tcp_segs_free>
    next = NULL;
 800f972:	2300      	movs	r3, #0
 800f974:	603b      	str	r3, [r7, #0]
 800f976:	e056      	b.n	800fa26 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	899b      	ldrh	r3, [r3, #12]
 800f97e:	b29b      	uxth	r3, r3
 800f980:	4618      	mov	r0, r3
 800f982:	f7fb fcbd 	bl	800b300 <lwip_htons>
 800f986:	4603      	mov	r3, r0
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	f003 0301 	and.w	r3, r3, #1
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d00d      	beq.n	800f9ae <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	899b      	ldrh	r3, [r3, #12]
 800f998:	b29c      	uxth	r4, r3
 800f99a:	2001      	movs	r0, #1
 800f99c:	f7fb fcb0 	bl	800b300 <lwip_htons>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	68db      	ldr	r3, [r3, #12]
 800f9a8:	4322      	orrs	r2, r4
 800f9aa:	b292      	uxth	r2, r2
 800f9ac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f7fe fa54 	bl	800de66 <tcp_seg_free>
    while (next &&
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d00e      	beq.n	800f9e2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	891b      	ldrh	r3, [r3, #8]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	4b1d      	ldr	r3, [pc, #116]	; (800fa40 <tcp_oos_insert_segment+0x10c>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	441a      	add	r2, r3
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	6839      	ldr	r1, [r7, #0]
 800f9d8:	8909      	ldrh	r1, [r1, #8]
 800f9da:	440b      	add	r3, r1
 800f9dc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	daca      	bge.n	800f978 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d01e      	beq.n	800fa26 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	891b      	ldrh	r3, [r3, #8]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	4b14      	ldr	r3, [pc, #80]	; (800fa40 <tcp_oos_insert_segment+0x10c>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	441a      	add	r2, r3
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	dd12      	ble.n	800fa26 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	685b      	ldr	r3, [r3, #4]
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	4b0d      	ldr	r3, [pc, #52]	; (800fa40 <tcp_oos_insert_segment+0x10c>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	1ad3      	subs	r3, r2, r3
 800fa10:	b29a      	uxth	r2, r3
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	685a      	ldr	r2, [r3, #4]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	891b      	ldrh	r3, [r3, #8]
 800fa1e:	4619      	mov	r1, r3
 800fa20:	4610      	mov	r0, r2
 800fa22:	f7fc fe1b 	bl	800c65c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	683a      	ldr	r2, [r7, #0]
 800fa2a:	601a      	str	r2, [r3, #0]
}
 800fa2c:	bf00      	nop
 800fa2e:	3714      	adds	r7, #20
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd90      	pop	{r4, r7, pc}
 800fa34:	0801df58 	.word	0x0801df58
 800fa38:	0801e218 	.word	0x0801e218
 800fa3c:	0801dfa4 	.word	0x0801dfa4
 800fa40:	20004ac0 	.word	0x20004ac0

0800fa44 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fa44:	b5b0      	push	{r4, r5, r7, lr}
 800fa46:	b086      	sub	sp, #24
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	607a      	str	r2, [r7, #4]
 800fa50:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fa52:	e03e      	b.n	800fad2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fd f80e 	bl	800ca84 <pbuf_clen>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa72:	8a7a      	ldrh	r2, [r7, #18]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d906      	bls.n	800fa86 <tcp_free_acked_segments+0x42>
 800fa78:	4b2a      	ldr	r3, [pc, #168]	; (800fb24 <tcp_free_acked_segments+0xe0>)
 800fa7a:	f240 4257 	movw	r2, #1111	; 0x457
 800fa7e:	492a      	ldr	r1, [pc, #168]	; (800fb28 <tcp_free_acked_segments+0xe4>)
 800fa80:	482a      	ldr	r0, [pc, #168]	; (800fb2c <tcp_free_acked_segments+0xe8>)
 800fa82:	f005 fd51 	bl	8015528 <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800fa8c:	8a7b      	ldrh	r3, [r7, #18]
 800fa8e:	1ad3      	subs	r3, r2, r3
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	891a      	ldrh	r2, [r3, #8]
 800fa9c:	4b24      	ldr	r3, [pc, #144]	; (800fb30 <tcp_free_acked_segments+0xec>)
 800fa9e:	881b      	ldrh	r3, [r3, #0]
 800faa0:	4413      	add	r3, r2
 800faa2:	b29a      	uxth	r2, r3
 800faa4:	4b22      	ldr	r3, [pc, #136]	; (800fb30 <tcp_free_acked_segments+0xec>)
 800faa6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800faa8:	6978      	ldr	r0, [r7, #20]
 800faaa:	f7fe f9dc 	bl	800de66 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d00c      	beq.n	800fad2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d109      	bne.n	800fad2 <tcp_free_acked_segments+0x8e>
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d106      	bne.n	800fad2 <tcp_free_acked_segments+0x8e>
 800fac4:	4b17      	ldr	r3, [pc, #92]	; (800fb24 <tcp_free_acked_segments+0xe0>)
 800fac6:	f240 4261 	movw	r2, #1121	; 0x461
 800faca:	491a      	ldr	r1, [pc, #104]	; (800fb34 <tcp_free_acked_segments+0xf0>)
 800facc:	4817      	ldr	r0, [pc, #92]	; (800fb2c <tcp_free_acked_segments+0xe8>)
 800face:	f005 fd2b 	bl	8015528 <printf>
  while (seg_list != NULL &&
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d020      	beq.n	800fb1a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	68db      	ldr	r3, [r3, #12]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fb fc23 	bl	800b32a <lwip_htonl>
 800fae4:	4604      	mov	r4, r0
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	891b      	ldrh	r3, [r3, #8]
 800faea:	461d      	mov	r5, r3
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	899b      	ldrh	r3, [r3, #12]
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7fb fc03 	bl	800b300 <lwip_htons>
 800fafa:	4603      	mov	r3, r0
 800fafc:	b2db      	uxtb	r3, r3
 800fafe:	f003 0303 	and.w	r3, r3, #3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d001      	beq.n	800fb0a <tcp_free_acked_segments+0xc6>
 800fb06:	2301      	movs	r3, #1
 800fb08:	e000      	b.n	800fb0c <tcp_free_acked_segments+0xc8>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	442b      	add	r3, r5
 800fb0e:	18e2      	adds	r2, r4, r3
 800fb10:	4b09      	ldr	r3, [pc, #36]	; (800fb38 <tcp_free_acked_segments+0xf4>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	dd9c      	ble.n	800fa54 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fb1a:	68bb      	ldr	r3, [r7, #8]
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3718      	adds	r7, #24
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bdb0      	pop	{r4, r5, r7, pc}
 800fb24:	0801df58 	.word	0x0801df58
 800fb28:	0801e240 	.word	0x0801e240
 800fb2c:	0801dfa4 	.word	0x0801dfa4
 800fb30:	20004ac8 	.word	0x20004ac8
 800fb34:	0801e268 	.word	0x0801e268
 800fb38:	20004ac4 	.word	0x20004ac4

0800fb3c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fb3c:	b5b0      	push	{r4, r5, r7, lr}
 800fb3e:	b094      	sub	sp, #80	; 0x50
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fb44:	2300      	movs	r3, #0
 800fb46:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d106      	bne.n	800fb5c <tcp_receive+0x20>
 800fb4e:	4ba6      	ldr	r3, [pc, #664]	; (800fde8 <tcp_receive+0x2ac>)
 800fb50:	f240 427b 	movw	r2, #1147	; 0x47b
 800fb54:	49a5      	ldr	r1, [pc, #660]	; (800fdec <tcp_receive+0x2b0>)
 800fb56:	48a6      	ldr	r0, [pc, #664]	; (800fdf0 <tcp_receive+0x2b4>)
 800fb58:	f005 fce6 	bl	8015528 <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	7d1b      	ldrb	r3, [r3, #20]
 800fb60:	2b03      	cmp	r3, #3
 800fb62:	d806      	bhi.n	800fb72 <tcp_receive+0x36>
 800fb64:	4ba0      	ldr	r3, [pc, #640]	; (800fde8 <tcp_receive+0x2ac>)
 800fb66:	f240 427c 	movw	r2, #1148	; 0x47c
 800fb6a:	49a2      	ldr	r1, [pc, #648]	; (800fdf4 <tcp_receive+0x2b8>)
 800fb6c:	48a0      	ldr	r0, [pc, #640]	; (800fdf0 <tcp_receive+0x2b4>)
 800fb6e:	f005 fcdb 	bl	8015528 <printf>

  if (flags & TCP_ACK) {
 800fb72:	4ba1      	ldr	r3, [pc, #644]	; (800fdf8 <tcp_receive+0x2bc>)
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	f003 0310 	and.w	r3, r3, #16
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	f000 8263 	beq.w	8010046 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb86:	461a      	mov	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb8c:	4413      	add	r3, r2
 800fb8e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb94:	4b99      	ldr	r3, [pc, #612]	; (800fdfc <tcp_receive+0x2c0>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	1ad3      	subs	r3, r2, r3
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	db1b      	blt.n	800fbd6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fba2:	4b96      	ldr	r3, [pc, #600]	; (800fdfc <tcp_receive+0x2c0>)
 800fba4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d106      	bne.n	800fbb8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fbae:	4b94      	ldr	r3, [pc, #592]	; (800fe00 <tcp_receive+0x2c4>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	1ad3      	subs	r3, r2, r3
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	db0e      	blt.n	800fbd6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fbbc:	4b90      	ldr	r3, [pc, #576]	; (800fe00 <tcp_receive+0x2c4>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d125      	bne.n	800fc10 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fbc4:	4b8f      	ldr	r3, [pc, #572]	; (800fe04 <tcp_receive+0x2c8>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	89db      	ldrh	r3, [r3, #14]
 800fbca:	b29a      	uxth	r2, r3
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d91c      	bls.n	800fc10 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fbd6:	4b8b      	ldr	r3, [pc, #556]	; (800fe04 <tcp_receive+0x2c8>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	89db      	ldrh	r3, [r3, #14]
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d205      	bcs.n	800fc00 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fc00:	4b7e      	ldr	r3, [pc, #504]	; (800fdfc <tcp_receive+0x2c0>)
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fc08:	4b7d      	ldr	r3, [pc, #500]	; (800fe00 <tcp_receive+0x2c4>)
 800fc0a:	681a      	ldr	r2, [r3, #0]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fc10:	4b7b      	ldr	r3, [pc, #492]	; (800fe00 <tcp_receive+0x2c4>)
 800fc12:	681a      	ldr	r2, [r3, #0]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	dc58      	bgt.n	800fcd0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fc1e:	4b7a      	ldr	r3, [pc, #488]	; (800fe08 <tcp_receive+0x2cc>)
 800fc20:	881b      	ldrh	r3, [r3, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d14b      	bne.n	800fcbe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fc30:	4413      	add	r3, r2
 800fc32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d142      	bne.n	800fcbe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	db3d      	blt.n	800fcbe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc46:	4b6e      	ldr	r3, [pc, #440]	; (800fe00 <tcp_receive+0x2c4>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d137      	bne.n	800fcbe <tcp_receive+0x182>
              found_dupack = 1;
 800fc4e:	2301      	movs	r3, #1
 800fc50:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc58:	2bff      	cmp	r3, #255	; 0xff
 800fc5a:	d007      	beq.n	800fc6c <tcp_receive+0x130>
                ++pcb->dupacks;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc62:	3301      	adds	r3, #1
 800fc64:	b2da      	uxtb	r2, r3
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc72:	2b03      	cmp	r3, #3
 800fc74:	d91b      	bls.n	800fcae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc80:	4413      	add	r3, r2
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d30a      	bcc.n	800fca4 <tcp_receive+0x168>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc98:	4413      	add	r3, r2
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fca2:	e004      	b.n	800fcae <tcp_receive+0x172>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fcb4:	2b02      	cmp	r3, #2
 800fcb6:	d902      	bls.n	800fcbe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f001 fee9 	bl	8011a90 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fcbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	f040 8160 	bne.w	800ff86 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fcce:	e15a      	b.n	800ff86 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fcd0:	4b4b      	ldr	r3, [pc, #300]	; (800fe00 <tcp_receive+0x2c4>)
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcd8:	1ad3      	subs	r3, r2, r3
 800fcda:	3b01      	subs	r3, #1
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	f2c0 814d 	blt.w	800ff7c <tcp_receive+0x440>
 800fce2:	4b47      	ldr	r3, [pc, #284]	; (800fe00 <tcp_receive+0x2c4>)
 800fce4:	681a      	ldr	r2, [r3, #0]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcea:	1ad3      	subs	r3, r2, r3
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	f300 8145 	bgt.w	800ff7c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	8b5b      	ldrh	r3, [r3, #26]
 800fcf6:	f003 0304 	and.w	r3, r3, #4
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d010      	beq.n	800fd20 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	8b5b      	ldrh	r3, [r3, #26]
 800fd02:	f023 0304 	bic.w	r3, r3, #4
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2200      	movs	r2, #0
 800fd24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd2e:	10db      	asrs	r3, r3, #3
 800fd30:	b21b      	sxth	r3, r3
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	4413      	add	r3, r2
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	b21a      	sxth	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fd48:	4b2d      	ldr	r3, [pc, #180]	; (800fe00 <tcp_receive+0x2c4>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	b29a      	uxth	r2, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	1ad3      	subs	r3, r2, r3
 800fd56:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fd60:	4b27      	ldr	r3, [pc, #156]	; (800fe00 <tcp_receive+0x2c4>)
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	7d1b      	ldrb	r3, [r3, #20]
 800fd6c:	2b03      	cmp	r3, #3
 800fd6e:	f240 8096 	bls.w	800fe9e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d244      	bcs.n	800fe0c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	8b5b      	ldrh	r3, [r3, #26]
 800fd86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d001      	beq.n	800fd92 <tcp_receive+0x256>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e000      	b.n	800fd94 <tcp_receive+0x258>
 800fd92:	2302      	movs	r3, #2
 800fd94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fd98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fd9c:	b29a      	uxth	r2, r3
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fda2:	fb12 f303 	smulbb	r3, r2, r3
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	bf28      	it	cs
 800fdae:	4613      	movcs	r3, r2
 800fdb0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fdb8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fdba:	4413      	add	r3, r2
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d309      	bcc.n	800fddc <tcp_receive+0x2a0>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fdce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fdd0:	4413      	add	r3, r2
 800fdd2:	b29a      	uxth	r2, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fdda:	e060      	b.n	800fe9e <tcp_receive+0x362>
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fde2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fde6:	e05a      	b.n	800fe9e <tcp_receive+0x362>
 800fde8:	0801df58 	.word	0x0801df58
 800fdec:	0801e288 	.word	0x0801e288
 800fdf0:	0801dfa4 	.word	0x0801dfa4
 800fdf4:	0801e2a4 	.word	0x0801e2a4
 800fdf8:	20004acc 	.word	0x20004acc
 800fdfc:	20004ac0 	.word	0x20004ac0
 800fe00:	20004ac4 	.word	0x20004ac4
 800fe04:	20004ab0 	.word	0x20004ab0
 800fe08:	20004aca 	.word	0x20004aca
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fe12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fe14:	4413      	add	r3, r2
 800fe16:	b29a      	uxth	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d309      	bcc.n	800fe36 <tcp_receive+0x2fa>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fe28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fe2a:	4413      	add	r3, r2
 800fe2c:	b29a      	uxth	r2, r3
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fe34:	e004      	b.n	800fe40 <tcp_receive+0x304>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d326      	bcc.n	800fe9e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe5c:	1ad3      	subs	r3, r2, r3
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe70:	4413      	add	r3, r2
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d30a      	bcc.n	800fe94 <tcp_receive+0x358>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe88:	4413      	add	r3, r2
 800fe8a:	b29a      	uxth	r2, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fe92:	e004      	b.n	800fe9e <tcp_receive+0x362>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea6:	4a98      	ldr	r2, [pc, #608]	; (8010108 <tcp_receive+0x5cc>)
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7ff fdcb 	bl	800fa44 <tcp_free_acked_segments>
 800feae:	4602      	mov	r2, r0
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800febc:	4a93      	ldr	r2, [pc, #588]	; (801010c <tcp_receive+0x5d0>)
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f7ff fdc0 	bl	800fa44 <tcp_free_acked_segments>
 800fec4:	4602      	mov	r2, r0
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d104      	bne.n	800fedc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fed8:	861a      	strh	r2, [r3, #48]	; 0x30
 800feda:	e002      	b.n	800fee2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2200      	movs	r2, #0
 800fee6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feec:	2b00      	cmp	r3, #0
 800feee:	d103      	bne.n	800fef8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2200      	movs	r2, #0
 800fef4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fefe:	4b84      	ldr	r3, [pc, #528]	; (8010110 <tcp_receive+0x5d4>)
 800ff00:	881b      	ldrh	r3, [r3, #0]
 800ff02:	4413      	add	r3, r2
 800ff04:	b29a      	uxth	r2, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	8b5b      	ldrh	r3, [r3, #26]
 800ff10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d035      	beq.n	800ff84 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d118      	bne.n	800ff52 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00c      	beq.n	800ff42 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fb f9f8 	bl	800b32a <lwip_htonl>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	dc20      	bgt.n	800ff84 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	8b5b      	ldrh	r3, [r3, #26]
 800ff46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ff4a:	b29a      	uxth	r2, r3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff50:	e018      	b.n	800ff84 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fb f9e3 	bl	800b32a <lwip_htonl>
 800ff64:	4603      	mov	r3, r0
 800ff66:	1ae3      	subs	r3, r4, r3
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	dc0b      	bgt.n	800ff84 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	8b5b      	ldrh	r3, [r3, #26]
 800ff70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff7a:	e003      	b.n	800ff84 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f001 ff75 	bl	8011e6c <tcp_send_empty_ack>
 800ff82:	e000      	b.n	800ff86 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff84:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d05b      	beq.n	8010046 <tcp_receive+0x50a>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff92:	4b60      	ldr	r3, [pc, #384]	; (8010114 <tcp_receive+0x5d8>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	da54      	bge.n	8010046 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ff9c:	4b5e      	ldr	r3, [pc, #376]	; (8010118 <tcp_receive+0x5dc>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	b29a      	uxth	r2, r3
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	1ad3      	subs	r3, r2, r3
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ffb0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ffba:	10db      	asrs	r3, r3, #3
 800ffbc:	b21b      	sxth	r3, r3
 800ffbe:	b29b      	uxth	r3, r3
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ffce:	b29a      	uxth	r2, r3
 800ffd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ffd4:	4413      	add	r3, r2
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	b21a      	sxth	r2, r3
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ffde:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	da05      	bge.n	800fff2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ffe6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ffea:	425b      	negs	r3, r3
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fff2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fffc:	109b      	asrs	r3, r3, #2
 800fffe:	b21b      	sxth	r3, r3
 8010000:	b29b      	uxth	r3, r3
 8010002:	1ad3      	subs	r3, r2, r3
 8010004:	b29b      	uxth	r3, r3
 8010006:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010010:	b29a      	uxth	r2, r3
 8010012:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010016:	4413      	add	r3, r2
 8010018:	b29b      	uxth	r3, r3
 801001a:	b21a      	sxth	r2, r3
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010026:	10db      	asrs	r3, r3, #3
 8010028:	b21b      	sxth	r3, r3
 801002a:	b29a      	uxth	r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010032:	b29b      	uxth	r3, r3
 8010034:	4413      	add	r3, r2
 8010036:	b29b      	uxth	r3, r3
 8010038:	b21a      	sxth	r2, r3
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2200      	movs	r2, #0
 8010044:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010046:	4b35      	ldr	r3, [pc, #212]	; (801011c <tcp_receive+0x5e0>)
 8010048:	881b      	ldrh	r3, [r3, #0]
 801004a:	2b00      	cmp	r3, #0
 801004c:	f000 84e1 	beq.w	8010a12 <tcp_receive+0xed6>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	7d1b      	ldrb	r3, [r3, #20]
 8010054:	2b06      	cmp	r3, #6
 8010056:	f200 84dc 	bhi.w	8010a12 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801005e:	4b30      	ldr	r3, [pc, #192]	; (8010120 <tcp_receive+0x5e4>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	3b01      	subs	r3, #1
 8010066:	2b00      	cmp	r3, #0
 8010068:	f2c0 808e 	blt.w	8010188 <tcp_receive+0x64c>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010070:	4b2a      	ldr	r3, [pc, #168]	; (801011c <tcp_receive+0x5e0>)
 8010072:	881b      	ldrh	r3, [r3, #0]
 8010074:	4619      	mov	r1, r3
 8010076:	4b2a      	ldr	r3, [pc, #168]	; (8010120 <tcp_receive+0x5e4>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	440b      	add	r3, r1
 801007c:	1ad3      	subs	r3, r2, r3
 801007e:	3301      	adds	r3, #1
 8010080:	2b00      	cmp	r3, #0
 8010082:	f300 8081 	bgt.w	8010188 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010086:	4b27      	ldr	r3, [pc, #156]	; (8010124 <tcp_receive+0x5e8>)
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010090:	4b23      	ldr	r3, [pc, #140]	; (8010120 <tcp_receive+0x5e4>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	1ad3      	subs	r3, r2, r3
 8010096:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010098:	4b22      	ldr	r3, [pc, #136]	; (8010124 <tcp_receive+0x5e8>)
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d106      	bne.n	80100ae <tcp_receive+0x572>
 80100a0:	4b21      	ldr	r3, [pc, #132]	; (8010128 <tcp_receive+0x5ec>)
 80100a2:	f240 5294 	movw	r2, #1428	; 0x594
 80100a6:	4921      	ldr	r1, [pc, #132]	; (801012c <tcp_receive+0x5f0>)
 80100a8:	4821      	ldr	r0, [pc, #132]	; (8010130 <tcp_receive+0x5f4>)
 80100aa:	f005 fa3d 	bl	8015528 <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80100ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80100b4:	4293      	cmp	r3, r2
 80100b6:	d906      	bls.n	80100c6 <tcp_receive+0x58a>
 80100b8:	4b1b      	ldr	r3, [pc, #108]	; (8010128 <tcp_receive+0x5ec>)
 80100ba:	f240 5295 	movw	r2, #1429	; 0x595
 80100be:	491d      	ldr	r1, [pc, #116]	; (8010134 <tcp_receive+0x5f8>)
 80100c0:	481b      	ldr	r0, [pc, #108]	; (8010130 <tcp_receive+0x5f4>)
 80100c2:	f005 fa31 	bl	8015528 <printf>
      off = (u16_t)off32;
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80100cc:	4b15      	ldr	r3, [pc, #84]	; (8010124 <tcp_receive+0x5e8>)
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	891b      	ldrh	r3, [r3, #8]
 80100d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d906      	bls.n	80100e8 <tcp_receive+0x5ac>
 80100da:	4b13      	ldr	r3, [pc, #76]	; (8010128 <tcp_receive+0x5ec>)
 80100dc:	f240 5297 	movw	r2, #1431	; 0x597
 80100e0:	4915      	ldr	r1, [pc, #84]	; (8010138 <tcp_receive+0x5fc>)
 80100e2:	4813      	ldr	r0, [pc, #76]	; (8010130 <tcp_receive+0x5f4>)
 80100e4:	f005 fa20 	bl	8015528 <printf>
      inseg.len -= off;
 80100e8:	4b0e      	ldr	r3, [pc, #56]	; (8010124 <tcp_receive+0x5e8>)
 80100ea:	891a      	ldrh	r2, [r3, #8]
 80100ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80100f0:	1ad3      	subs	r3, r2, r3
 80100f2:	b29a      	uxth	r2, r3
 80100f4:	4b0b      	ldr	r3, [pc, #44]	; (8010124 <tcp_receive+0x5e8>)
 80100f6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80100f8:	4b0a      	ldr	r3, [pc, #40]	; (8010124 <tcp_receive+0x5e8>)
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	891a      	ldrh	r2, [r3, #8]
 80100fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010106:	e029      	b.n	801015c <tcp_receive+0x620>
 8010108:	0801e2c0 	.word	0x0801e2c0
 801010c:	0801e2c8 	.word	0x0801e2c8
 8010110:	20004ac8 	.word	0x20004ac8
 8010114:	20004ac4 	.word	0x20004ac4
 8010118:	2000b63c 	.word	0x2000b63c
 801011c:	20004aca 	.word	0x20004aca
 8010120:	20004ac0 	.word	0x20004ac0
 8010124:	20004aa0 	.word	0x20004aa0
 8010128:	0801df58 	.word	0x0801df58
 801012c:	0801e2d0 	.word	0x0801e2d0
 8010130:	0801dfa4 	.word	0x0801dfa4
 8010134:	0801e2e0 	.word	0x0801e2e0
 8010138:	0801e2f0 	.word	0x0801e2f0
        off -= p->len;
 801013c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801013e:	895b      	ldrh	r3, [r3, #10]
 8010140:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010144:	1ad3      	subs	r3, r2, r3
 8010146:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801014a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801014c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801014e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010152:	2200      	movs	r2, #0
 8010154:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801015c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801015e:	895b      	ldrh	r3, [r3, #10]
 8010160:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010164:	429a      	cmp	r2, r3
 8010166:	d8e9      	bhi.n	801013c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010168:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801016c:	4619      	mov	r1, r3
 801016e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010170:	f7fc fb74 	bl	800c85c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010178:	4a91      	ldr	r2, [pc, #580]	; (80103c0 <tcp_receive+0x884>)
 801017a:	6013      	str	r3, [r2, #0]
 801017c:	4b91      	ldr	r3, [pc, #580]	; (80103c4 <tcp_receive+0x888>)
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	4a8f      	ldr	r2, [pc, #572]	; (80103c0 <tcp_receive+0x884>)
 8010182:	6812      	ldr	r2, [r2, #0]
 8010184:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010186:	e00d      	b.n	80101a4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010188:	4b8d      	ldr	r3, [pc, #564]	; (80103c0 <tcp_receive+0x884>)
 801018a:	681a      	ldr	r2, [r3, #0]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010190:	1ad3      	subs	r3, r2, r3
 8010192:	2b00      	cmp	r3, #0
 8010194:	da06      	bge.n	80101a4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	8b5b      	ldrh	r3, [r3, #26]
 801019a:	f043 0302 	orr.w	r3, r3, #2
 801019e:	b29a      	uxth	r2, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101a4:	4b86      	ldr	r3, [pc, #536]	; (80103c0 <tcp_receive+0x884>)
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ac:	1ad3      	subs	r3, r2, r3
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	f2c0 842a 	blt.w	8010a08 <tcp_receive+0xecc>
 80101b4:	4b82      	ldr	r3, [pc, #520]	; (80103c0 <tcp_receive+0x884>)
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101bc:	6879      	ldr	r1, [r7, #4]
 80101be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101c0:	440b      	add	r3, r1
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	3301      	adds	r3, #1
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	f300 841e 	bgt.w	8010a08 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101d0:	4b7b      	ldr	r3, [pc, #492]	; (80103c0 <tcp_receive+0x884>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	f040 829a 	bne.w	801070e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80101da:	4b7a      	ldr	r3, [pc, #488]	; (80103c4 <tcp_receive+0x888>)
 80101dc:	891c      	ldrh	r4, [r3, #8]
 80101de:	4b79      	ldr	r3, [pc, #484]	; (80103c4 <tcp_receive+0x888>)
 80101e0:	68db      	ldr	r3, [r3, #12]
 80101e2:	899b      	ldrh	r3, [r3, #12]
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7fb f88a 	bl	800b300 <lwip_htons>
 80101ec:	4603      	mov	r3, r0
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	f003 0303 	and.w	r3, r3, #3
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d001      	beq.n	80101fc <tcp_receive+0x6c0>
 80101f8:	2301      	movs	r3, #1
 80101fa:	e000      	b.n	80101fe <tcp_receive+0x6c2>
 80101fc:	2300      	movs	r3, #0
 80101fe:	4423      	add	r3, r4
 8010200:	b29a      	uxth	r2, r3
 8010202:	4b71      	ldr	r3, [pc, #452]	; (80103c8 <tcp_receive+0x88c>)
 8010204:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801020a:	4b6f      	ldr	r3, [pc, #444]	; (80103c8 <tcp_receive+0x88c>)
 801020c:	881b      	ldrh	r3, [r3, #0]
 801020e:	429a      	cmp	r2, r3
 8010210:	d275      	bcs.n	80102fe <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010212:	4b6c      	ldr	r3, [pc, #432]	; (80103c4 <tcp_receive+0x888>)
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	899b      	ldrh	r3, [r3, #12]
 8010218:	b29b      	uxth	r3, r3
 801021a:	4618      	mov	r0, r3
 801021c:	f7fb f870 	bl	800b300 <lwip_htons>
 8010220:	4603      	mov	r3, r0
 8010222:	b2db      	uxtb	r3, r3
 8010224:	f003 0301 	and.w	r3, r3, #1
 8010228:	2b00      	cmp	r3, #0
 801022a:	d01f      	beq.n	801026c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801022c:	4b65      	ldr	r3, [pc, #404]	; (80103c4 <tcp_receive+0x888>)
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	899b      	ldrh	r3, [r3, #12]
 8010232:	b29b      	uxth	r3, r3
 8010234:	b21b      	sxth	r3, r3
 8010236:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801023a:	b21c      	sxth	r4, r3
 801023c:	4b61      	ldr	r3, [pc, #388]	; (80103c4 <tcp_receive+0x888>)
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	899b      	ldrh	r3, [r3, #12]
 8010242:	b29b      	uxth	r3, r3
 8010244:	4618      	mov	r0, r3
 8010246:	f7fb f85b 	bl	800b300 <lwip_htons>
 801024a:	4603      	mov	r3, r0
 801024c:	b2db      	uxtb	r3, r3
 801024e:	b29b      	uxth	r3, r3
 8010250:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010254:	b29b      	uxth	r3, r3
 8010256:	4618      	mov	r0, r3
 8010258:	f7fb f852 	bl	800b300 <lwip_htons>
 801025c:	4603      	mov	r3, r0
 801025e:	b21b      	sxth	r3, r3
 8010260:	4323      	orrs	r3, r4
 8010262:	b21a      	sxth	r2, r3
 8010264:	4b57      	ldr	r3, [pc, #348]	; (80103c4 <tcp_receive+0x888>)
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	b292      	uxth	r2, r2
 801026a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010270:	4b54      	ldr	r3, [pc, #336]	; (80103c4 <tcp_receive+0x888>)
 8010272:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010274:	4b53      	ldr	r3, [pc, #332]	; (80103c4 <tcp_receive+0x888>)
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	899b      	ldrh	r3, [r3, #12]
 801027a:	b29b      	uxth	r3, r3
 801027c:	4618      	mov	r0, r3
 801027e:	f7fb f83f 	bl	800b300 <lwip_htons>
 8010282:	4603      	mov	r3, r0
 8010284:	b2db      	uxtb	r3, r3
 8010286:	f003 0302 	and.w	r3, r3, #2
 801028a:	2b00      	cmp	r3, #0
 801028c:	d005      	beq.n	801029a <tcp_receive+0x75e>
            inseg.len -= 1;
 801028e:	4b4d      	ldr	r3, [pc, #308]	; (80103c4 <tcp_receive+0x888>)
 8010290:	891b      	ldrh	r3, [r3, #8]
 8010292:	3b01      	subs	r3, #1
 8010294:	b29a      	uxth	r2, r3
 8010296:	4b4b      	ldr	r3, [pc, #300]	; (80103c4 <tcp_receive+0x888>)
 8010298:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801029a:	4b4a      	ldr	r3, [pc, #296]	; (80103c4 <tcp_receive+0x888>)
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	4a49      	ldr	r2, [pc, #292]	; (80103c4 <tcp_receive+0x888>)
 80102a0:	8912      	ldrh	r2, [r2, #8]
 80102a2:	4611      	mov	r1, r2
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7fc f9d9 	bl	800c65c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80102aa:	4b46      	ldr	r3, [pc, #280]	; (80103c4 <tcp_receive+0x888>)
 80102ac:	891c      	ldrh	r4, [r3, #8]
 80102ae:	4b45      	ldr	r3, [pc, #276]	; (80103c4 <tcp_receive+0x888>)
 80102b0:	68db      	ldr	r3, [r3, #12]
 80102b2:	899b      	ldrh	r3, [r3, #12]
 80102b4:	b29b      	uxth	r3, r3
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7fb f822 	bl	800b300 <lwip_htons>
 80102bc:	4603      	mov	r3, r0
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	f003 0303 	and.w	r3, r3, #3
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d001      	beq.n	80102cc <tcp_receive+0x790>
 80102c8:	2301      	movs	r3, #1
 80102ca:	e000      	b.n	80102ce <tcp_receive+0x792>
 80102cc:	2300      	movs	r3, #0
 80102ce:	4423      	add	r3, r4
 80102d0:	b29a      	uxth	r2, r3
 80102d2:	4b3d      	ldr	r3, [pc, #244]	; (80103c8 <tcp_receive+0x88c>)
 80102d4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80102d6:	4b3c      	ldr	r3, [pc, #240]	; (80103c8 <tcp_receive+0x88c>)
 80102d8:	881b      	ldrh	r3, [r3, #0]
 80102da:	461a      	mov	r2, r3
 80102dc:	4b38      	ldr	r3, [pc, #224]	; (80103c0 <tcp_receive+0x884>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	441a      	add	r2, r3
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e6:	6879      	ldr	r1, [r7, #4]
 80102e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80102ea:	440b      	add	r3, r1
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d006      	beq.n	80102fe <tcp_receive+0x7c2>
 80102f0:	4b36      	ldr	r3, [pc, #216]	; (80103cc <tcp_receive+0x890>)
 80102f2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80102f6:	4936      	ldr	r1, [pc, #216]	; (80103d0 <tcp_receive+0x894>)
 80102f8:	4836      	ldr	r0, [pc, #216]	; (80103d4 <tcp_receive+0x898>)
 80102fa:	f005 f915 	bl	8015528 <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010302:	2b00      	cmp	r3, #0
 8010304:	f000 80e7 	beq.w	80104d6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010308:	4b2e      	ldr	r3, [pc, #184]	; (80103c4 <tcp_receive+0x888>)
 801030a:	68db      	ldr	r3, [r3, #12]
 801030c:	899b      	ldrh	r3, [r3, #12]
 801030e:	b29b      	uxth	r3, r3
 8010310:	4618      	mov	r0, r3
 8010312:	f7fa fff5 	bl	800b300 <lwip_htons>
 8010316:	4603      	mov	r3, r0
 8010318:	b2db      	uxtb	r3, r3
 801031a:	f003 0301 	and.w	r3, r3, #1
 801031e:	2b00      	cmp	r3, #0
 8010320:	d010      	beq.n	8010344 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010322:	e00a      	b.n	801033a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010328:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010334:	68f8      	ldr	r0, [r7, #12]
 8010336:	f7fd fd96 	bl	800de66 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801033e:	2b00      	cmp	r3, #0
 8010340:	d1f0      	bne.n	8010324 <tcp_receive+0x7e8>
 8010342:	e0c8      	b.n	80104d6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010348:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801034a:	e052      	b.n	80103f2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801034c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	899b      	ldrh	r3, [r3, #12]
 8010352:	b29b      	uxth	r3, r3
 8010354:	4618      	mov	r0, r3
 8010356:	f7fa ffd3 	bl	800b300 <lwip_htons>
 801035a:	4603      	mov	r3, r0
 801035c:	b2db      	uxtb	r3, r3
 801035e:	f003 0301 	and.w	r3, r3, #1
 8010362:	2b00      	cmp	r3, #0
 8010364:	d03d      	beq.n	80103e2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010366:	4b17      	ldr	r3, [pc, #92]	; (80103c4 <tcp_receive+0x888>)
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	899b      	ldrh	r3, [r3, #12]
 801036c:	b29b      	uxth	r3, r3
 801036e:	4618      	mov	r0, r3
 8010370:	f7fa ffc6 	bl	800b300 <lwip_htons>
 8010374:	4603      	mov	r3, r0
 8010376:	b2db      	uxtb	r3, r3
 8010378:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801037c:	2b00      	cmp	r3, #0
 801037e:	d130      	bne.n	80103e2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010380:	4b10      	ldr	r3, [pc, #64]	; (80103c4 <tcp_receive+0x888>)
 8010382:	68db      	ldr	r3, [r3, #12]
 8010384:	899b      	ldrh	r3, [r3, #12]
 8010386:	b29c      	uxth	r4, r3
 8010388:	2001      	movs	r0, #1
 801038a:	f7fa ffb9 	bl	800b300 <lwip_htons>
 801038e:	4603      	mov	r3, r0
 8010390:	461a      	mov	r2, r3
 8010392:	4b0c      	ldr	r3, [pc, #48]	; (80103c4 <tcp_receive+0x888>)
 8010394:	68db      	ldr	r3, [r3, #12]
 8010396:	4322      	orrs	r2, r4
 8010398:	b292      	uxth	r2, r2
 801039a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801039c:	4b09      	ldr	r3, [pc, #36]	; (80103c4 <tcp_receive+0x888>)
 801039e:	891c      	ldrh	r4, [r3, #8]
 80103a0:	4b08      	ldr	r3, [pc, #32]	; (80103c4 <tcp_receive+0x888>)
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	899b      	ldrh	r3, [r3, #12]
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fa ffa9 	bl	800b300 <lwip_htons>
 80103ae:	4603      	mov	r3, r0
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	f003 0303 	and.w	r3, r3, #3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d00e      	beq.n	80103d8 <tcp_receive+0x89c>
 80103ba:	2301      	movs	r3, #1
 80103bc:	e00d      	b.n	80103da <tcp_receive+0x89e>
 80103be:	bf00      	nop
 80103c0:	20004ac0 	.word	0x20004ac0
 80103c4:	20004aa0 	.word	0x20004aa0
 80103c8:	20004aca 	.word	0x20004aca
 80103cc:	0801df58 	.word	0x0801df58
 80103d0:	0801e300 	.word	0x0801e300
 80103d4:	0801dfa4 	.word	0x0801dfa4
 80103d8:	2300      	movs	r3, #0
 80103da:	4423      	add	r3, r4
 80103dc:	b29a      	uxth	r2, r3
 80103de:	4b98      	ldr	r3, [pc, #608]	; (8010640 <tcp_receive+0xb04>)
 80103e0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80103e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103e4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80103e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80103ec:	6938      	ldr	r0, [r7, #16]
 80103ee:	f7fd fd3a 	bl	800de66 <tcp_seg_free>
            while (next &&
 80103f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d00e      	beq.n	8010416 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80103f8:	4b91      	ldr	r3, [pc, #580]	; (8010640 <tcp_receive+0xb04>)
 80103fa:	881b      	ldrh	r3, [r3, #0]
 80103fc:	461a      	mov	r2, r3
 80103fe:	4b91      	ldr	r3, [pc, #580]	; (8010644 <tcp_receive+0xb08>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	441a      	add	r2, r3
 8010404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801040c:	8909      	ldrh	r1, [r1, #8]
 801040e:	440b      	add	r3, r1
 8010410:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010412:	2b00      	cmp	r3, #0
 8010414:	da9a      	bge.n	801034c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010418:	2b00      	cmp	r3, #0
 801041a:	d059      	beq.n	80104d0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801041c:	4b88      	ldr	r3, [pc, #544]	; (8010640 <tcp_receive+0xb04>)
 801041e:	881b      	ldrh	r3, [r3, #0]
 8010420:	461a      	mov	r2, r3
 8010422:	4b88      	ldr	r3, [pc, #544]	; (8010644 <tcp_receive+0xb08>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	441a      	add	r2, r3
 8010428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801042a:	68db      	ldr	r3, [r3, #12]
 801042c:	685b      	ldr	r3, [r3, #4]
 801042e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010430:	2b00      	cmp	r3, #0
 8010432:	dd4d      	ble.n	80104d0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010436:	68db      	ldr	r3, [r3, #12]
 8010438:	685b      	ldr	r3, [r3, #4]
 801043a:	b29a      	uxth	r2, r3
 801043c:	4b81      	ldr	r3, [pc, #516]	; (8010644 <tcp_receive+0xb08>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	b29b      	uxth	r3, r3
 8010442:	1ad3      	subs	r3, r2, r3
 8010444:	b29a      	uxth	r2, r3
 8010446:	4b80      	ldr	r3, [pc, #512]	; (8010648 <tcp_receive+0xb0c>)
 8010448:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801044a:	4b7f      	ldr	r3, [pc, #508]	; (8010648 <tcp_receive+0xb0c>)
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	899b      	ldrh	r3, [r3, #12]
 8010450:	b29b      	uxth	r3, r3
 8010452:	4618      	mov	r0, r3
 8010454:	f7fa ff54 	bl	800b300 <lwip_htons>
 8010458:	4603      	mov	r3, r0
 801045a:	b2db      	uxtb	r3, r3
 801045c:	f003 0302 	and.w	r3, r3, #2
 8010460:	2b00      	cmp	r3, #0
 8010462:	d005      	beq.n	8010470 <tcp_receive+0x934>
                inseg.len -= 1;
 8010464:	4b78      	ldr	r3, [pc, #480]	; (8010648 <tcp_receive+0xb0c>)
 8010466:	891b      	ldrh	r3, [r3, #8]
 8010468:	3b01      	subs	r3, #1
 801046a:	b29a      	uxth	r2, r3
 801046c:	4b76      	ldr	r3, [pc, #472]	; (8010648 <tcp_receive+0xb0c>)
 801046e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010470:	4b75      	ldr	r3, [pc, #468]	; (8010648 <tcp_receive+0xb0c>)
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	4a74      	ldr	r2, [pc, #464]	; (8010648 <tcp_receive+0xb0c>)
 8010476:	8912      	ldrh	r2, [r2, #8]
 8010478:	4611      	mov	r1, r2
 801047a:	4618      	mov	r0, r3
 801047c:	f7fc f8ee 	bl	800c65c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010480:	4b71      	ldr	r3, [pc, #452]	; (8010648 <tcp_receive+0xb0c>)
 8010482:	891c      	ldrh	r4, [r3, #8]
 8010484:	4b70      	ldr	r3, [pc, #448]	; (8010648 <tcp_receive+0xb0c>)
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	899b      	ldrh	r3, [r3, #12]
 801048a:	b29b      	uxth	r3, r3
 801048c:	4618      	mov	r0, r3
 801048e:	f7fa ff37 	bl	800b300 <lwip_htons>
 8010492:	4603      	mov	r3, r0
 8010494:	b2db      	uxtb	r3, r3
 8010496:	f003 0303 	and.w	r3, r3, #3
 801049a:	2b00      	cmp	r3, #0
 801049c:	d001      	beq.n	80104a2 <tcp_receive+0x966>
 801049e:	2301      	movs	r3, #1
 80104a0:	e000      	b.n	80104a4 <tcp_receive+0x968>
 80104a2:	2300      	movs	r3, #0
 80104a4:	4423      	add	r3, r4
 80104a6:	b29a      	uxth	r2, r3
 80104a8:	4b65      	ldr	r3, [pc, #404]	; (8010640 <tcp_receive+0xb04>)
 80104aa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80104ac:	4b64      	ldr	r3, [pc, #400]	; (8010640 <tcp_receive+0xb04>)
 80104ae:	881b      	ldrh	r3, [r3, #0]
 80104b0:	461a      	mov	r2, r3
 80104b2:	4b64      	ldr	r3, [pc, #400]	; (8010644 <tcp_receive+0xb08>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	441a      	add	r2, r3
 80104b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d006      	beq.n	80104d0 <tcp_receive+0x994>
 80104c2:	4b62      	ldr	r3, [pc, #392]	; (801064c <tcp_receive+0xb10>)
 80104c4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80104c8:	4961      	ldr	r1, [pc, #388]	; (8010650 <tcp_receive+0xb14>)
 80104ca:	4862      	ldr	r0, [pc, #392]	; (8010654 <tcp_receive+0xb18>)
 80104cc:	f005 f82c 	bl	8015528 <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104d4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80104d6:	4b5a      	ldr	r3, [pc, #360]	; (8010640 <tcp_receive+0xb04>)
 80104d8:	881b      	ldrh	r3, [r3, #0]
 80104da:	461a      	mov	r2, r3
 80104dc:	4b59      	ldr	r3, [pc, #356]	; (8010644 <tcp_receive+0xb08>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	441a      	add	r2, r3
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80104ea:	4b55      	ldr	r3, [pc, #340]	; (8010640 <tcp_receive+0xb04>)
 80104ec:	881b      	ldrh	r3, [r3, #0]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d206      	bcs.n	8010500 <tcp_receive+0x9c4>
 80104f2:	4b56      	ldr	r3, [pc, #344]	; (801064c <tcp_receive+0xb10>)
 80104f4:	f240 6207 	movw	r2, #1543	; 0x607
 80104f8:	4957      	ldr	r1, [pc, #348]	; (8010658 <tcp_receive+0xb1c>)
 80104fa:	4856      	ldr	r0, [pc, #344]	; (8010654 <tcp_receive+0xb18>)
 80104fc:	f005 f814 	bl	8015528 <printf>
        pcb->rcv_wnd -= tcplen;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010504:	4b4e      	ldr	r3, [pc, #312]	; (8010640 <tcp_receive+0xb04>)
 8010506:	881b      	ldrh	r3, [r3, #0]
 8010508:	1ad3      	subs	r3, r2, r3
 801050a:	b29a      	uxth	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f7fc ffc9 	bl	800d4a8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010516:	4b4c      	ldr	r3, [pc, #304]	; (8010648 <tcp_receive+0xb0c>)
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	891b      	ldrh	r3, [r3, #8]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d006      	beq.n	801052e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010520:	4b49      	ldr	r3, [pc, #292]	; (8010648 <tcp_receive+0xb0c>)
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	4a4d      	ldr	r2, [pc, #308]	; (801065c <tcp_receive+0xb20>)
 8010526:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010528:	4b47      	ldr	r3, [pc, #284]	; (8010648 <tcp_receive+0xb0c>)
 801052a:	2200      	movs	r2, #0
 801052c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801052e:	4b46      	ldr	r3, [pc, #280]	; (8010648 <tcp_receive+0xb0c>)
 8010530:	68db      	ldr	r3, [r3, #12]
 8010532:	899b      	ldrh	r3, [r3, #12]
 8010534:	b29b      	uxth	r3, r3
 8010536:	4618      	mov	r0, r3
 8010538:	f7fa fee2 	bl	800b300 <lwip_htons>
 801053c:	4603      	mov	r3, r0
 801053e:	b2db      	uxtb	r3, r3
 8010540:	f003 0301 	and.w	r3, r3, #1
 8010544:	2b00      	cmp	r3, #0
 8010546:	f000 80b8 	beq.w	80106ba <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801054a:	4b45      	ldr	r3, [pc, #276]	; (8010660 <tcp_receive+0xb24>)
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	f043 0320 	orr.w	r3, r3, #32
 8010552:	b2da      	uxtb	r2, r3
 8010554:	4b42      	ldr	r3, [pc, #264]	; (8010660 <tcp_receive+0xb24>)
 8010556:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010558:	e0af      	b.n	80106ba <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801055e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	4a36      	ldr	r2, [pc, #216]	; (8010644 <tcp_receive+0xb08>)
 801056a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	891b      	ldrh	r3, [r3, #8]
 8010570:	461c      	mov	r4, r3
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	899b      	ldrh	r3, [r3, #12]
 8010578:	b29b      	uxth	r3, r3
 801057a:	4618      	mov	r0, r3
 801057c:	f7fa fec0 	bl	800b300 <lwip_htons>
 8010580:	4603      	mov	r3, r0
 8010582:	b2db      	uxtb	r3, r3
 8010584:	f003 0303 	and.w	r3, r3, #3
 8010588:	2b00      	cmp	r3, #0
 801058a:	d001      	beq.n	8010590 <tcp_receive+0xa54>
 801058c:	2301      	movs	r3, #1
 801058e:	e000      	b.n	8010592 <tcp_receive+0xa56>
 8010590:	2300      	movs	r3, #0
 8010592:	191a      	adds	r2, r3, r4
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010598:	441a      	add	r2, r3
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105a2:	461c      	mov	r4, r3
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	891b      	ldrh	r3, [r3, #8]
 80105a8:	461d      	mov	r5, r3
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	899b      	ldrh	r3, [r3, #12]
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7fa fea4 	bl	800b300 <lwip_htons>
 80105b8:	4603      	mov	r3, r0
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	f003 0303 	and.w	r3, r3, #3
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d001      	beq.n	80105c8 <tcp_receive+0xa8c>
 80105c4:	2301      	movs	r3, #1
 80105c6:	e000      	b.n	80105ca <tcp_receive+0xa8e>
 80105c8:	2300      	movs	r3, #0
 80105ca:	442b      	add	r3, r5
 80105cc:	429c      	cmp	r4, r3
 80105ce:	d206      	bcs.n	80105de <tcp_receive+0xaa2>
 80105d0:	4b1e      	ldr	r3, [pc, #120]	; (801064c <tcp_receive+0xb10>)
 80105d2:	f240 622b 	movw	r2, #1579	; 0x62b
 80105d6:	4923      	ldr	r1, [pc, #140]	; (8010664 <tcp_receive+0xb28>)
 80105d8:	481e      	ldr	r0, [pc, #120]	; (8010654 <tcp_receive+0xb18>)
 80105da:	f004 ffa5 	bl	8015528 <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	891b      	ldrh	r3, [r3, #8]
 80105e2:	461c      	mov	r4, r3
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	899b      	ldrh	r3, [r3, #12]
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7fa fe87 	bl	800b300 <lwip_htons>
 80105f2:	4603      	mov	r3, r0
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	f003 0303 	and.w	r3, r3, #3
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d001      	beq.n	8010602 <tcp_receive+0xac6>
 80105fe:	2301      	movs	r3, #1
 8010600:	e000      	b.n	8010604 <tcp_receive+0xac8>
 8010602:	2300      	movs	r3, #0
 8010604:	1919      	adds	r1, r3, r4
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801060a:	b28b      	uxth	r3, r1
 801060c:	1ad3      	subs	r3, r2, r3
 801060e:	b29a      	uxth	r2, r3
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f7fc ff47 	bl	800d4a8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	891b      	ldrh	r3, [r3, #8]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d028      	beq.n	8010676 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010624:	4b0d      	ldr	r3, [pc, #52]	; (801065c <tcp_receive+0xb20>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d01d      	beq.n	8010668 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801062c:	4b0b      	ldr	r3, [pc, #44]	; (801065c <tcp_receive+0xb20>)
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	4619      	mov	r1, r3
 8010636:	4610      	mov	r0, r2
 8010638:	f7fc fa64 	bl	800cb04 <pbuf_cat>
 801063c:	e018      	b.n	8010670 <tcp_receive+0xb34>
 801063e:	bf00      	nop
 8010640:	20004aca 	.word	0x20004aca
 8010644:	20004ac0 	.word	0x20004ac0
 8010648:	20004aa0 	.word	0x20004aa0
 801064c:	0801df58 	.word	0x0801df58
 8010650:	0801e338 	.word	0x0801e338
 8010654:	0801dfa4 	.word	0x0801dfa4
 8010658:	0801e374 	.word	0x0801e374
 801065c:	20004ad0 	.word	0x20004ad0
 8010660:	20004acd 	.word	0x20004acd
 8010664:	0801e394 	.word	0x0801e394
            } else {
              recv_data = cseg->p;
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	4a70      	ldr	r2, [pc, #448]	; (8010830 <tcp_receive+0xcf4>)
 801066e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	2200      	movs	r2, #0
 8010674:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	68db      	ldr	r3, [r3, #12]
 801067a:	899b      	ldrh	r3, [r3, #12]
 801067c:	b29b      	uxth	r3, r3
 801067e:	4618      	mov	r0, r3
 8010680:	f7fa fe3e 	bl	800b300 <lwip_htons>
 8010684:	4603      	mov	r3, r0
 8010686:	b2db      	uxtb	r3, r3
 8010688:	f003 0301 	and.w	r3, r3, #1
 801068c:	2b00      	cmp	r3, #0
 801068e:	d00d      	beq.n	80106ac <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010690:	4b68      	ldr	r3, [pc, #416]	; (8010834 <tcp_receive+0xcf8>)
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	f043 0320 	orr.w	r3, r3, #32
 8010698:	b2da      	uxtb	r2, r3
 801069a:	4b66      	ldr	r3, [pc, #408]	; (8010834 <tcp_receive+0xcf8>)
 801069c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	7d1b      	ldrb	r3, [r3, #20]
 80106a2:	2b04      	cmp	r3, #4
 80106a4:	d102      	bne.n	80106ac <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2207      	movs	r2, #7
 80106aa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	681a      	ldr	r2, [r3, #0]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80106b4:	68b8      	ldr	r0, [r7, #8]
 80106b6:	f7fd fbd6 	bl	800de66 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d008      	beq.n	80106d4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106c6:	68db      	ldr	r3, [r3, #12]
 80106c8:	685a      	ldr	r2, [r3, #4]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80106ce:	429a      	cmp	r2, r3
 80106d0:	f43f af43 	beq.w	801055a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	8b5b      	ldrh	r3, [r3, #26]
 80106d8:	f003 0301 	and.w	r3, r3, #1
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00e      	beq.n	80106fe <tcp_receive+0xbc2>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	8b5b      	ldrh	r3, [r3, #26]
 80106e4:	f023 0301 	bic.w	r3, r3, #1
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	835a      	strh	r2, [r3, #26]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	8b5b      	ldrh	r3, [r3, #26]
 80106f2:	f043 0302 	orr.w	r3, r3, #2
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80106fc:	e188      	b.n	8010a10 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	8b5b      	ldrh	r3, [r3, #26]
 8010702:	f043 0301 	orr.w	r3, r3, #1
 8010706:	b29a      	uxth	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801070c:	e180      	b.n	8010a10 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010712:	2b00      	cmp	r3, #0
 8010714:	d106      	bne.n	8010724 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010716:	4848      	ldr	r0, [pc, #288]	; (8010838 <tcp_receive+0xcfc>)
 8010718:	f7fd fbbe 	bl	800de98 <tcp_seg_copy>
 801071c:	4602      	mov	r2, r0
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	675a      	str	r2, [r3, #116]	; 0x74
 8010722:	e16d      	b.n	8010a00 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010724:	2300      	movs	r3, #0
 8010726:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801072c:	63bb      	str	r3, [r7, #56]	; 0x38
 801072e:	e157      	b.n	80109e0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8010730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	685a      	ldr	r2, [r3, #4]
 8010736:	4b41      	ldr	r3, [pc, #260]	; (801083c <tcp_receive+0xd00>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	429a      	cmp	r2, r3
 801073c:	d11d      	bne.n	801077a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801073e:	4b3e      	ldr	r3, [pc, #248]	; (8010838 <tcp_receive+0xcfc>)
 8010740:	891a      	ldrh	r2, [r3, #8]
 8010742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010744:	891b      	ldrh	r3, [r3, #8]
 8010746:	429a      	cmp	r2, r3
 8010748:	f240 814f 	bls.w	80109ea <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801074c:	483a      	ldr	r0, [pc, #232]	; (8010838 <tcp_receive+0xcfc>)
 801074e:	f7fd fba3 	bl	800de98 <tcp_seg_copy>
 8010752:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	2b00      	cmp	r3, #0
 8010758:	f000 8149 	beq.w	80109ee <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801075c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801075e:	2b00      	cmp	r3, #0
 8010760:	d003      	beq.n	801076a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010764:	697a      	ldr	r2, [r7, #20]
 8010766:	601a      	str	r2, [r3, #0]
 8010768:	e002      	b.n	8010770 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	697a      	ldr	r2, [r7, #20]
 801076e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010770:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010772:	6978      	ldr	r0, [r7, #20]
 8010774:	f7ff f8de 	bl	800f934 <tcp_oos_insert_segment>
                }
                break;
 8010778:	e139      	b.n	80109ee <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801077a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801077c:	2b00      	cmp	r3, #0
 801077e:	d117      	bne.n	80107b0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010780:	4b2e      	ldr	r3, [pc, #184]	; (801083c <tcp_receive+0xd00>)
 8010782:	681a      	ldr	r2, [r3, #0]
 8010784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	1ad3      	subs	r3, r2, r3
 801078c:	2b00      	cmp	r3, #0
 801078e:	da57      	bge.n	8010840 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010790:	4829      	ldr	r0, [pc, #164]	; (8010838 <tcp_receive+0xcfc>)
 8010792:	f7fd fb81 	bl	800de98 <tcp_seg_copy>
 8010796:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	2b00      	cmp	r3, #0
 801079c:	f000 8129 	beq.w	80109f2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	69ba      	ldr	r2, [r7, #24]
 80107a4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80107a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80107a8:	69b8      	ldr	r0, [r7, #24]
 80107aa:	f7ff f8c3 	bl	800f934 <tcp_oos_insert_segment>
                  }
                  break;
 80107ae:	e120      	b.n	80109f2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80107b0:	4b22      	ldr	r3, [pc, #136]	; (801083c <tcp_receive+0xd00>)
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	1ad3      	subs	r3, r2, r3
 80107bc:	3b01      	subs	r3, #1
 80107be:	2b00      	cmp	r3, #0
 80107c0:	db3e      	blt.n	8010840 <tcp_receive+0xd04>
 80107c2:	4b1e      	ldr	r3, [pc, #120]	; (801083c <tcp_receive+0xd00>)
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	3301      	adds	r3, #1
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	dc35      	bgt.n	8010840 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80107d4:	4818      	ldr	r0, [pc, #96]	; (8010838 <tcp_receive+0xcfc>)
 80107d6:	f7fd fb5f 	bl	800de98 <tcp_seg_copy>
 80107da:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	f000 8109 	beq.w	80109f6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80107e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107ec:	8912      	ldrh	r2, [r2, #8]
 80107ee:	441a      	add	r2, r3
 80107f0:	4b12      	ldr	r3, [pc, #72]	; (801083c <tcp_receive+0xd00>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	1ad3      	subs	r3, r2, r3
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	dd12      	ble.n	8010820 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80107fa:	4b10      	ldr	r3, [pc, #64]	; (801083c <tcp_receive+0xd00>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	b29a      	uxth	r2, r3
 8010800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010802:	68db      	ldr	r3, [r3, #12]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	b29b      	uxth	r3, r3
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	b29a      	uxth	r2, r3
 801080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801080e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010812:	685a      	ldr	r2, [r3, #4]
 8010814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010816:	891b      	ldrh	r3, [r3, #8]
 8010818:	4619      	mov	r1, r3
 801081a:	4610      	mov	r0, r2
 801081c:	f7fb ff1e 	bl	800c65c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010822:	69fa      	ldr	r2, [r7, #28]
 8010824:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010828:	69f8      	ldr	r0, [r7, #28]
 801082a:	f7ff f883 	bl	800f934 <tcp_oos_insert_segment>
                  }
                  break;
 801082e:	e0e2      	b.n	80109f6 <tcp_receive+0xeba>
 8010830:	20004ad0 	.word	0x20004ad0
 8010834:	20004acd 	.word	0x20004acd
 8010838:	20004aa0 	.word	0x20004aa0
 801083c:	20004ac0 	.word	0x20004ac0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010842:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	f040 80c6 	bne.w	80109da <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801084e:	4b80      	ldr	r3, [pc, #512]	; (8010a50 <tcp_receive+0xf14>)
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010854:	68db      	ldr	r3, [r3, #12]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801085a:	2b00      	cmp	r3, #0
 801085c:	f340 80bd 	ble.w	80109da <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010862:	68db      	ldr	r3, [r3, #12]
 8010864:	899b      	ldrh	r3, [r3, #12]
 8010866:	b29b      	uxth	r3, r3
 8010868:	4618      	mov	r0, r3
 801086a:	f7fa fd49 	bl	800b300 <lwip_htons>
 801086e:	4603      	mov	r3, r0
 8010870:	b2db      	uxtb	r3, r3
 8010872:	f003 0301 	and.w	r3, r3, #1
 8010876:	2b00      	cmp	r3, #0
 8010878:	f040 80bf 	bne.w	80109fa <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801087c:	4875      	ldr	r0, [pc, #468]	; (8010a54 <tcp_receive+0xf18>)
 801087e:	f7fd fb0b 	bl	800de98 <tcp_seg_copy>
 8010882:	4602      	mov	r2, r0
 8010884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010886:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	f000 80b6 	beq.w	80109fe <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010894:	68db      	ldr	r3, [r3, #12]
 8010896:	685b      	ldr	r3, [r3, #4]
 8010898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801089a:	8912      	ldrh	r2, [r2, #8]
 801089c:	441a      	add	r2, r3
 801089e:	4b6c      	ldr	r3, [pc, #432]	; (8010a50 <tcp_receive+0xf14>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	dd12      	ble.n	80108ce <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80108a8:	4b69      	ldr	r3, [pc, #420]	; (8010a50 <tcp_receive+0xf14>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	b29a      	uxth	r2, r3
 80108ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	1ad3      	subs	r3, r2, r3
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80108be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c0:	685a      	ldr	r2, [r3, #4]
 80108c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c4:	891b      	ldrh	r3, [r3, #8]
 80108c6:	4619      	mov	r1, r3
 80108c8:	4610      	mov	r0, r2
 80108ca:	f7fb fec7 	bl	800c65c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80108ce:	4b62      	ldr	r3, [pc, #392]	; (8010a58 <tcp_receive+0xf1c>)
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	461a      	mov	r2, r3
 80108d4:	4b5e      	ldr	r3, [pc, #376]	; (8010a50 <tcp_receive+0xf14>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	441a      	add	r2, r3
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108de:	6879      	ldr	r1, [r7, #4]
 80108e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80108e2:	440b      	add	r3, r1
 80108e4:	1ad3      	subs	r3, r2, r3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	f340 8089 	ble.w	80109fe <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80108ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	68db      	ldr	r3, [r3, #12]
 80108f2:	899b      	ldrh	r3, [r3, #12]
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fa fd02 	bl	800b300 <lwip_htons>
 80108fc:	4603      	mov	r3, r0
 80108fe:	b2db      	uxtb	r3, r3
 8010900:	f003 0301 	and.w	r3, r3, #1
 8010904:	2b00      	cmp	r3, #0
 8010906:	d022      	beq.n	801094e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	68db      	ldr	r3, [r3, #12]
 801090e:	899b      	ldrh	r3, [r3, #12]
 8010910:	b29b      	uxth	r3, r3
 8010912:	b21b      	sxth	r3, r3
 8010914:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010918:	b21c      	sxth	r4, r3
 801091a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	68db      	ldr	r3, [r3, #12]
 8010920:	899b      	ldrh	r3, [r3, #12]
 8010922:	b29b      	uxth	r3, r3
 8010924:	4618      	mov	r0, r3
 8010926:	f7fa fceb 	bl	800b300 <lwip_htons>
 801092a:	4603      	mov	r3, r0
 801092c:	b2db      	uxtb	r3, r3
 801092e:	b29b      	uxth	r3, r3
 8010930:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010934:	b29b      	uxth	r3, r3
 8010936:	4618      	mov	r0, r3
 8010938:	f7fa fce2 	bl	800b300 <lwip_htons>
 801093c:	4603      	mov	r3, r0
 801093e:	b21b      	sxth	r3, r3
 8010940:	4323      	orrs	r3, r4
 8010942:	b21a      	sxth	r2, r3
 8010944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	b292      	uxth	r2, r2
 801094c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010952:	b29a      	uxth	r2, r3
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010958:	4413      	add	r3, r2
 801095a:	b299      	uxth	r1, r3
 801095c:	4b3c      	ldr	r3, [pc, #240]	; (8010a50 <tcp_receive+0xf14>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	b29a      	uxth	r2, r3
 8010962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	1a8a      	subs	r2, r1, r2
 8010968:	b292      	uxth	r2, r2
 801096a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801096c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	685a      	ldr	r2, [r3, #4]
 8010972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	891b      	ldrh	r3, [r3, #8]
 8010978:	4619      	mov	r1, r3
 801097a:	4610      	mov	r0, r2
 801097c:	f7fb fe6e 	bl	800c65c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	891c      	ldrh	r4, [r3, #8]
 8010986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	899b      	ldrh	r3, [r3, #12]
 801098e:	b29b      	uxth	r3, r3
 8010990:	4618      	mov	r0, r3
 8010992:	f7fa fcb5 	bl	800b300 <lwip_htons>
 8010996:	4603      	mov	r3, r0
 8010998:	b2db      	uxtb	r3, r3
 801099a:	f003 0303 	and.w	r3, r3, #3
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d001      	beq.n	80109a6 <tcp_receive+0xe6a>
 80109a2:	2301      	movs	r3, #1
 80109a4:	e000      	b.n	80109a8 <tcp_receive+0xe6c>
 80109a6:	2300      	movs	r3, #0
 80109a8:	4423      	add	r3, r4
 80109aa:	b29a      	uxth	r2, r3
 80109ac:	4b2a      	ldr	r3, [pc, #168]	; (8010a58 <tcp_receive+0xf1c>)
 80109ae:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80109b0:	4b29      	ldr	r3, [pc, #164]	; (8010a58 <tcp_receive+0xf1c>)
 80109b2:	881b      	ldrh	r3, [r3, #0]
 80109b4:	461a      	mov	r2, r3
 80109b6:	4b26      	ldr	r3, [pc, #152]	; (8010a50 <tcp_receive+0xf14>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	441a      	add	r2, r3
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109c0:	6879      	ldr	r1, [r7, #4]
 80109c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80109c4:	440b      	add	r3, r1
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d019      	beq.n	80109fe <tcp_receive+0xec2>
 80109ca:	4b24      	ldr	r3, [pc, #144]	; (8010a5c <tcp_receive+0xf20>)
 80109cc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80109d0:	4923      	ldr	r1, [pc, #140]	; (8010a60 <tcp_receive+0xf24>)
 80109d2:	4824      	ldr	r0, [pc, #144]	; (8010a64 <tcp_receive+0xf28>)
 80109d4:	f004 fda8 	bl	8015528 <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80109d8:	e011      	b.n	80109fe <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80109da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	63bb      	str	r3, [r7, #56]	; 0x38
 80109e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	f47f aea4 	bne.w	8010730 <tcp_receive+0xbf4>
 80109e8:	e00a      	b.n	8010a00 <tcp_receive+0xec4>
                break;
 80109ea:	bf00      	nop
 80109ec:	e008      	b.n	8010a00 <tcp_receive+0xec4>
                break;
 80109ee:	bf00      	nop
 80109f0:	e006      	b.n	8010a00 <tcp_receive+0xec4>
                  break;
 80109f2:	bf00      	nop
 80109f4:	e004      	b.n	8010a00 <tcp_receive+0xec4>
                  break;
 80109f6:	bf00      	nop
 80109f8:	e002      	b.n	8010a00 <tcp_receive+0xec4>
                  break;
 80109fa:	bf00      	nop
 80109fc:	e000      	b.n	8010a00 <tcp_receive+0xec4>
                break;
 80109fe:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f001 fa33 	bl	8011e6c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010a06:	e003      	b.n	8010a10 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f001 fa2f 	bl	8011e6c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a0e:	e01a      	b.n	8010a46 <tcp_receive+0xf0a>
 8010a10:	e019      	b.n	8010a46 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010a12:	4b0f      	ldr	r3, [pc, #60]	; (8010a50 <tcp_receive+0xf14>)
 8010a14:	681a      	ldr	r2, [r3, #0]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a1a:	1ad3      	subs	r3, r2, r3
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	db0a      	blt.n	8010a36 <tcp_receive+0xefa>
 8010a20:	4b0b      	ldr	r3, [pc, #44]	; (8010a50 <tcp_receive+0xf14>)
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a28:	6879      	ldr	r1, [r7, #4]
 8010a2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a2c:	440b      	add	r3, r1
 8010a2e:	1ad3      	subs	r3, r2, r3
 8010a30:	3301      	adds	r3, #1
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	dd07      	ble.n	8010a46 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	8b5b      	ldrh	r3, [r3, #26]
 8010a3a:	f043 0302 	orr.w	r3, r3, #2
 8010a3e:	b29a      	uxth	r2, r3
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010a44:	e7ff      	b.n	8010a46 <tcp_receive+0xf0a>
 8010a46:	bf00      	nop
 8010a48:	3750      	adds	r7, #80	; 0x50
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	20004ac0 	.word	0x20004ac0
 8010a54:	20004aa0 	.word	0x20004aa0
 8010a58:	20004aca 	.word	0x20004aca
 8010a5c:	0801df58 	.word	0x0801df58
 8010a60:	0801e300 	.word	0x0801e300
 8010a64:	0801dfa4 	.word	0x0801dfa4

08010a68 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010a6e:	4b15      	ldr	r3, [pc, #84]	; (8010ac4 <tcp_get_next_optbyte+0x5c>)
 8010a70:	881b      	ldrh	r3, [r3, #0]
 8010a72:	1c5a      	adds	r2, r3, #1
 8010a74:	b291      	uxth	r1, r2
 8010a76:	4a13      	ldr	r2, [pc, #76]	; (8010ac4 <tcp_get_next_optbyte+0x5c>)
 8010a78:	8011      	strh	r1, [r2, #0]
 8010a7a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010a7c:	4b12      	ldr	r3, [pc, #72]	; (8010ac8 <tcp_get_next_optbyte+0x60>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d004      	beq.n	8010a8e <tcp_get_next_optbyte+0x26>
 8010a84:	4b11      	ldr	r3, [pc, #68]	; (8010acc <tcp_get_next_optbyte+0x64>)
 8010a86:	881b      	ldrh	r3, [r3, #0]
 8010a88:	88fa      	ldrh	r2, [r7, #6]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d208      	bcs.n	8010aa0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010a8e:	4b10      	ldr	r3, [pc, #64]	; (8010ad0 <tcp_get_next_optbyte+0x68>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	3314      	adds	r3, #20
 8010a94:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010a96:	88fb      	ldrh	r3, [r7, #6]
 8010a98:	683a      	ldr	r2, [r7, #0]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	e00b      	b.n	8010ab8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010aa0:	88fb      	ldrh	r3, [r7, #6]
 8010aa2:	b2da      	uxtb	r2, r3
 8010aa4:	4b09      	ldr	r3, [pc, #36]	; (8010acc <tcp_get_next_optbyte+0x64>)
 8010aa6:	881b      	ldrh	r3, [r3, #0]
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	1ad3      	subs	r3, r2, r3
 8010aac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010aae:	4b06      	ldr	r3, [pc, #24]	; (8010ac8 <tcp_get_next_optbyte+0x60>)
 8010ab0:	681a      	ldr	r2, [r3, #0]
 8010ab2:	797b      	ldrb	r3, [r7, #5]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	370c      	adds	r7, #12
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr
 8010ac4:	20004abc 	.word	0x20004abc
 8010ac8:	20004ab8 	.word	0x20004ab8
 8010acc:	20004ab6 	.word	0x20004ab6
 8010ad0:	20004ab0 	.word	0x20004ab0

08010ad4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b084      	sub	sp, #16
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d106      	bne.n	8010af0 <tcp_parseopt+0x1c>
 8010ae2:	4b32      	ldr	r3, [pc, #200]	; (8010bac <tcp_parseopt+0xd8>)
 8010ae4:	f240 727d 	movw	r2, #1917	; 0x77d
 8010ae8:	4931      	ldr	r1, [pc, #196]	; (8010bb0 <tcp_parseopt+0xdc>)
 8010aea:	4832      	ldr	r0, [pc, #200]	; (8010bb4 <tcp_parseopt+0xe0>)
 8010aec:	f004 fd1c 	bl	8015528 <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010af0:	4b31      	ldr	r3, [pc, #196]	; (8010bb8 <tcp_parseopt+0xe4>)
 8010af2:	881b      	ldrh	r3, [r3, #0]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d055      	beq.n	8010ba4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010af8:	4b30      	ldr	r3, [pc, #192]	; (8010bbc <tcp_parseopt+0xe8>)
 8010afa:	2200      	movs	r2, #0
 8010afc:	801a      	strh	r2, [r3, #0]
 8010afe:	e045      	b.n	8010b8c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010b00:	f7ff ffb2 	bl	8010a68 <tcp_get_next_optbyte>
 8010b04:	4603      	mov	r3, r0
 8010b06:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010b08:	7bfb      	ldrb	r3, [r7, #15]
 8010b0a:	2b02      	cmp	r3, #2
 8010b0c:	d006      	beq.n	8010b1c <tcp_parseopt+0x48>
 8010b0e:	2b02      	cmp	r3, #2
 8010b10:	dc2b      	bgt.n	8010b6a <tcp_parseopt+0x96>
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d041      	beq.n	8010b9a <tcp_parseopt+0xc6>
 8010b16:	2b01      	cmp	r3, #1
 8010b18:	d127      	bne.n	8010b6a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010b1a:	e037      	b.n	8010b8c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010b1c:	f7ff ffa4 	bl	8010a68 <tcp_get_next_optbyte>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b04      	cmp	r3, #4
 8010b24:	d13b      	bne.n	8010b9e <tcp_parseopt+0xca>
 8010b26:	4b25      	ldr	r3, [pc, #148]	; (8010bbc <tcp_parseopt+0xe8>)
 8010b28:	881b      	ldrh	r3, [r3, #0]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	4a22      	ldr	r2, [pc, #136]	; (8010bb8 <tcp_parseopt+0xe4>)
 8010b2e:	8812      	ldrh	r2, [r2, #0]
 8010b30:	4293      	cmp	r3, r2
 8010b32:	da34      	bge.n	8010b9e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010b34:	f7ff ff98 	bl	8010a68 <tcp_get_next_optbyte>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	021b      	lsls	r3, r3, #8
 8010b3e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010b40:	f7ff ff92 	bl	8010a68 <tcp_get_next_optbyte>
 8010b44:	4603      	mov	r3, r0
 8010b46:	b29a      	uxth	r2, r3
 8010b48:	89bb      	ldrh	r3, [r7, #12]
 8010b4a:	4313      	orrs	r3, r2
 8010b4c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010b4e:	89bb      	ldrh	r3, [r7, #12]
 8010b50:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010b54:	d804      	bhi.n	8010b60 <tcp_parseopt+0x8c>
 8010b56:	89bb      	ldrh	r3, [r7, #12]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d001      	beq.n	8010b60 <tcp_parseopt+0x8c>
 8010b5c:	89ba      	ldrh	r2, [r7, #12]
 8010b5e:	e001      	b.n	8010b64 <tcp_parseopt+0x90>
 8010b60:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010b68:	e010      	b.n	8010b8c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010b6a:	f7ff ff7d 	bl	8010a68 <tcp_get_next_optbyte>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010b72:	7afb      	ldrb	r3, [r7, #11]
 8010b74:	2b01      	cmp	r3, #1
 8010b76:	d914      	bls.n	8010ba2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010b78:	7afb      	ldrb	r3, [r7, #11]
 8010b7a:	b29a      	uxth	r2, r3
 8010b7c:	4b0f      	ldr	r3, [pc, #60]	; (8010bbc <tcp_parseopt+0xe8>)
 8010b7e:	881b      	ldrh	r3, [r3, #0]
 8010b80:	4413      	add	r3, r2
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	3b02      	subs	r3, #2
 8010b86:	b29a      	uxth	r2, r3
 8010b88:	4b0c      	ldr	r3, [pc, #48]	; (8010bbc <tcp_parseopt+0xe8>)
 8010b8a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010b8c:	4b0b      	ldr	r3, [pc, #44]	; (8010bbc <tcp_parseopt+0xe8>)
 8010b8e:	881a      	ldrh	r2, [r3, #0]
 8010b90:	4b09      	ldr	r3, [pc, #36]	; (8010bb8 <tcp_parseopt+0xe4>)
 8010b92:	881b      	ldrh	r3, [r3, #0]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d3b3      	bcc.n	8010b00 <tcp_parseopt+0x2c>
 8010b98:	e004      	b.n	8010ba4 <tcp_parseopt+0xd0>
          return;
 8010b9a:	bf00      	nop
 8010b9c:	e002      	b.n	8010ba4 <tcp_parseopt+0xd0>
            return;
 8010b9e:	bf00      	nop
 8010ba0:	e000      	b.n	8010ba4 <tcp_parseopt+0xd0>
            return;
 8010ba2:	bf00      	nop
      }
    }
  }
}
 8010ba4:	3710      	adds	r7, #16
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	0801df58 	.word	0x0801df58
 8010bb0:	0801e3bc 	.word	0x0801e3bc
 8010bb4:	0801dfa4 	.word	0x0801dfa4
 8010bb8:	20004ab4 	.word	0x20004ab4
 8010bbc:	20004abc 	.word	0x20004abc

08010bc0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010bc4:	4b05      	ldr	r3, [pc, #20]	; (8010bdc <tcp_trigger_input_pcb_close+0x1c>)
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	f043 0310 	orr.w	r3, r3, #16
 8010bcc:	b2da      	uxtb	r2, r3
 8010bce:	4b03      	ldr	r3, [pc, #12]	; (8010bdc <tcp_trigger_input_pcb_close+0x1c>)
 8010bd0:	701a      	strb	r2, [r3, #0]
}
 8010bd2:	bf00      	nop
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr
 8010bdc:	20004acd 	.word	0x20004acd

08010be0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	60b9      	str	r1, [r7, #8]
 8010bea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d00a      	beq.n	8010c08 <tcp_route+0x28>
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	7a1b      	ldrb	r3, [r3, #8]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d006      	beq.n	8010c08 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	7a1b      	ldrb	r3, [r3, #8]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fb fb24 	bl	800c24c <netif_get_by_index>
 8010c04:	4603      	mov	r3, r0
 8010c06:	e003      	b.n	8010c10 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f002 fead 	bl	8013968 <ip4_route>
 8010c0e:	4603      	mov	r3, r0
  }
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010c18:	b590      	push	{r4, r7, lr}
 8010c1a:	b087      	sub	sp, #28
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	603b      	str	r3, [r7, #0]
 8010c24:	4613      	mov	r3, r2
 8010c26:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d105      	bne.n	8010c3a <tcp_create_segment+0x22>
 8010c2e:	4b44      	ldr	r3, [pc, #272]	; (8010d40 <tcp_create_segment+0x128>)
 8010c30:	22a3      	movs	r2, #163	; 0xa3
 8010c32:	4944      	ldr	r1, [pc, #272]	; (8010d44 <tcp_create_segment+0x12c>)
 8010c34:	4844      	ldr	r0, [pc, #272]	; (8010d48 <tcp_create_segment+0x130>)
 8010c36:	f004 fc77 	bl	8015528 <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d105      	bne.n	8010c4c <tcp_create_segment+0x34>
 8010c40:	4b3f      	ldr	r3, [pc, #252]	; (8010d40 <tcp_create_segment+0x128>)
 8010c42:	22a4      	movs	r2, #164	; 0xa4
 8010c44:	4941      	ldr	r1, [pc, #260]	; (8010d4c <tcp_create_segment+0x134>)
 8010c46:	4840      	ldr	r0, [pc, #256]	; (8010d48 <tcp_create_segment+0x130>)
 8010c48:	f004 fc6e 	bl	8015528 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010c4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010c50:	009b      	lsls	r3, r3, #2
 8010c52:	b2db      	uxtb	r3, r3
 8010c54:	f003 0304 	and.w	r3, r3, #4
 8010c58:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010c5a:	2003      	movs	r0, #3
 8010c5c:	f7fb f806 	bl	800bc6c <memp_malloc>
 8010c60:	6138      	str	r0, [r7, #16]
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d104      	bne.n	8010c72 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010c68:	68b8      	ldr	r0, [r7, #8]
 8010c6a:	f7fb fe7d 	bl	800c968 <pbuf_free>
    return NULL;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	e061      	b.n	8010d36 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010c78:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	68ba      	ldr	r2, [r7, #8]
 8010c84:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	891a      	ldrh	r2, [r3, #8]
 8010c8a:	7dfb      	ldrb	r3, [r7, #23]
 8010c8c:	b29b      	uxth	r3, r3
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d205      	bcs.n	8010c9e <tcp_create_segment+0x86>
 8010c92:	4b2b      	ldr	r3, [pc, #172]	; (8010d40 <tcp_create_segment+0x128>)
 8010c94:	22b0      	movs	r2, #176	; 0xb0
 8010c96:	492e      	ldr	r1, [pc, #184]	; (8010d50 <tcp_create_segment+0x138>)
 8010c98:	482b      	ldr	r0, [pc, #172]	; (8010d48 <tcp_create_segment+0x130>)
 8010c9a:	f004 fc45 	bl	8015528 <printf>
  seg->len = p->tot_len - optlen;
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	891a      	ldrh	r2, [r3, #8]
 8010ca2:	7dfb      	ldrb	r3, [r7, #23]
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	1ad3      	subs	r3, r2, r3
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010cae:	2114      	movs	r1, #20
 8010cb0:	68b8      	ldr	r0, [r7, #8]
 8010cb2:	f7fb fdc3 	bl	800c83c <pbuf_add_header>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d004      	beq.n	8010cc6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010cbc:	6938      	ldr	r0, [r7, #16]
 8010cbe:	f7fd f8d2 	bl	800de66 <tcp_seg_free>
    return NULL;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	e037      	b.n	8010d36 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	685a      	ldr	r2, [r3, #4]
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	8ada      	ldrh	r2, [r3, #22]
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	68dc      	ldr	r4, [r3, #12]
 8010cd8:	4610      	mov	r0, r2
 8010cda:	f7fa fb11 	bl	800b300 <lwip_htons>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	8b1a      	ldrh	r2, [r3, #24]
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	68dc      	ldr	r4, [r3, #12]
 8010cea:	4610      	mov	r0, r2
 8010cec:	f7fa fb08 	bl	800b300 <lwip_htons>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	68dc      	ldr	r4, [r3, #12]
 8010cf8:	6838      	ldr	r0, [r7, #0]
 8010cfa:	f7fa fb16 	bl	800b32a <lwip_htonl>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010d02:	7dfb      	ldrb	r3, [r7, #23]
 8010d04:	089b      	lsrs	r3, r3, #2
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	3305      	adds	r3, #5
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	031b      	lsls	r3, r3, #12
 8010d10:	b29a      	uxth	r2, r3
 8010d12:	79fb      	ldrb	r3, [r7, #7]
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	4313      	orrs	r3, r2
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	68dc      	ldr	r4, [r3, #12]
 8010d1e:	4610      	mov	r0, r2
 8010d20:	f7fa faee 	bl	800b300 <lwip_htons>
 8010d24:	4603      	mov	r3, r0
 8010d26:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	749a      	strb	r2, [r3, #18]
 8010d30:	2200      	movs	r2, #0
 8010d32:	74da      	strb	r2, [r3, #19]
  return seg;
 8010d34:	693b      	ldr	r3, [r7, #16]
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	371c      	adds	r7, #28
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd90      	pop	{r4, r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	0801e3d8 	.word	0x0801e3d8
 8010d44:	0801e40c 	.word	0x0801e40c
 8010d48:	0801e42c 	.word	0x0801e42c
 8010d4c:	0801e454 	.word	0x0801e454
 8010d50:	0801e478 	.word	0x0801e478

08010d54 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010d54:	b590      	push	{r4, r7, lr}
 8010d56:	b08b      	sub	sp, #44	; 0x2c
 8010d58:	af02      	add	r7, sp, #8
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010d60:	2300      	movs	r3, #0
 8010d62:	61fb      	str	r3, [r7, #28]
 8010d64:	2300      	movs	r3, #0
 8010d66:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d106      	bne.n	8010d80 <tcp_split_unsent_seg+0x2c>
 8010d72:	4b95      	ldr	r3, [pc, #596]	; (8010fc8 <tcp_split_unsent_seg+0x274>)
 8010d74:	f240 324b 	movw	r2, #843	; 0x34b
 8010d78:	4994      	ldr	r1, [pc, #592]	; (8010fcc <tcp_split_unsent_seg+0x278>)
 8010d7a:	4895      	ldr	r0, [pc, #596]	; (8010fd0 <tcp_split_unsent_seg+0x27c>)
 8010d7c:	f004 fbd4 	bl	8015528 <printf>

  useg = pcb->unsent;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d84:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d102      	bne.n	8010d92 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d90:	e116      	b.n	8010fc0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010d92:	887b      	ldrh	r3, [r7, #2]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d109      	bne.n	8010dac <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010d98:	4b8b      	ldr	r3, [pc, #556]	; (8010fc8 <tcp_split_unsent_seg+0x274>)
 8010d9a:	f240 3253 	movw	r2, #851	; 0x353
 8010d9e:	498d      	ldr	r1, [pc, #564]	; (8010fd4 <tcp_split_unsent_seg+0x280>)
 8010da0:	488b      	ldr	r0, [pc, #556]	; (8010fd0 <tcp_split_unsent_seg+0x27c>)
 8010da2:	f004 fbc1 	bl	8015528 <printf>
    return ERR_VAL;
 8010da6:	f06f 0305 	mvn.w	r3, #5
 8010daa:	e109      	b.n	8010fc0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	891b      	ldrh	r3, [r3, #8]
 8010db0:	887a      	ldrh	r2, [r7, #2]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d301      	bcc.n	8010dba <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010db6:	2300      	movs	r3, #0
 8010db8:	e102      	b.n	8010fc0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dbe:	887a      	ldrh	r2, [r7, #2]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d906      	bls.n	8010dd2 <tcp_split_unsent_seg+0x7e>
 8010dc4:	4b80      	ldr	r3, [pc, #512]	; (8010fc8 <tcp_split_unsent_seg+0x274>)
 8010dc6:	f240 325b 	movw	r2, #859	; 0x35b
 8010dca:	4983      	ldr	r1, [pc, #524]	; (8010fd8 <tcp_split_unsent_seg+0x284>)
 8010dcc:	4880      	ldr	r0, [pc, #512]	; (8010fd0 <tcp_split_unsent_seg+0x27c>)
 8010dce:	f004 fbab 	bl	8015528 <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	891b      	ldrh	r3, [r3, #8]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d106      	bne.n	8010de8 <tcp_split_unsent_seg+0x94>
 8010dda:	4b7b      	ldr	r3, [pc, #492]	; (8010fc8 <tcp_split_unsent_seg+0x274>)
 8010ddc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010de0:	497e      	ldr	r1, [pc, #504]	; (8010fdc <tcp_split_unsent_seg+0x288>)
 8010de2:	487b      	ldr	r0, [pc, #492]	; (8010fd0 <tcp_split_unsent_seg+0x27c>)
 8010de4:	f004 fba0 	bl	8015528 <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	7a9b      	ldrb	r3, [r3, #10]
 8010dec:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010dee:	7bfb      	ldrb	r3, [r7, #15]
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	f003 0304 	and.w	r3, r3, #4
 8010df8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	891a      	ldrh	r2, [r3, #8]
 8010dfe:	887b      	ldrh	r3, [r7, #2]
 8010e00:	1ad3      	subs	r3, r2, r3
 8010e02:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010e04:	7bbb      	ldrb	r3, [r7, #14]
 8010e06:	b29a      	uxth	r2, r3
 8010e08:	89bb      	ldrh	r3, [r7, #12]
 8010e0a:	4413      	add	r3, r2
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e12:	4619      	mov	r1, r3
 8010e14:	2036      	movs	r0, #54	; 0x36
 8010e16:	f7fb fac3 	bl	800c3a0 <pbuf_alloc>
 8010e1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f000 80b7 	beq.w	8010f92 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	891a      	ldrh	r2, [r3, #8]
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	891b      	ldrh	r3, [r3, #8]
 8010e2e:	1ad3      	subs	r3, r2, r3
 8010e30:	b29a      	uxth	r2, r3
 8010e32:	887b      	ldrh	r3, [r7, #2]
 8010e34:	4413      	add	r3, r2
 8010e36:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	6858      	ldr	r0, [r3, #4]
 8010e3c:	693b      	ldr	r3, [r7, #16]
 8010e3e:	685a      	ldr	r2, [r3, #4]
 8010e40:	7bbb      	ldrb	r3, [r7, #14]
 8010e42:	18d1      	adds	r1, r2, r3
 8010e44:	897b      	ldrh	r3, [r7, #10]
 8010e46:	89ba      	ldrh	r2, [r7, #12]
 8010e48:	f7fb ff84 	bl	800cd54 <pbuf_copy_partial>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	461a      	mov	r2, r3
 8010e50:	89bb      	ldrh	r3, [r7, #12]
 8010e52:	4293      	cmp	r3, r2
 8010e54:	f040 809f 	bne.w	8010f96 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	68db      	ldr	r3, [r3, #12]
 8010e5c:	899b      	ldrh	r3, [r3, #12]
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7fa fa4d 	bl	800b300 <lwip_htons>
 8010e66:	4603      	mov	r3, r0
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e6e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010e70:	2300      	movs	r3, #0
 8010e72:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010e74:	7efb      	ldrb	r3, [r7, #27]
 8010e76:	f003 0308 	and.w	r3, r3, #8
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d007      	beq.n	8010e8e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010e7e:	7efb      	ldrb	r3, [r7, #27]
 8010e80:	f023 0308 	bic.w	r3, r3, #8
 8010e84:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010e86:	7ebb      	ldrb	r3, [r7, #26]
 8010e88:	f043 0308 	orr.w	r3, r3, #8
 8010e8c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010e8e:	7efb      	ldrb	r3, [r7, #27]
 8010e90:	f003 0301 	and.w	r3, r3, #1
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d007      	beq.n	8010ea8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010e98:	7efb      	ldrb	r3, [r7, #27]
 8010e9a:	f023 0301 	bic.w	r3, r3, #1
 8010e9e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010ea0:	7ebb      	ldrb	r3, [r7, #26]
 8010ea2:	f043 0301 	orr.w	r3, r3, #1
 8010ea6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fa fa3b 	bl	800b32a <lwip_htonl>
 8010eb4:	4602      	mov	r2, r0
 8010eb6:	887b      	ldrh	r3, [r7, #2]
 8010eb8:	18d1      	adds	r1, r2, r3
 8010eba:	7eba      	ldrb	r2, [r7, #26]
 8010ebc:	7bfb      	ldrb	r3, [r7, #15]
 8010ebe:	9300      	str	r3, [sp, #0]
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	6939      	ldr	r1, [r7, #16]
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f7ff fea7 	bl	8010c18 <tcp_create_segment>
 8010eca:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d063      	beq.n	8010f9a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fb fdd4 	bl	800ca84 <pbuf_clen>
 8010edc:	4603      	mov	r3, r0
 8010ede:	461a      	mov	r2, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ee6:	1a9b      	subs	r3, r3, r2
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	6858      	ldr	r0, [r3, #4]
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	685b      	ldr	r3, [r3, #4]
 8010ef8:	891a      	ldrh	r2, [r3, #8]
 8010efa:	89bb      	ldrh	r3, [r7, #12]
 8010efc:	1ad3      	subs	r3, r2, r3
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	4619      	mov	r1, r3
 8010f02:	f7fb fbab 	bl	800c65c <pbuf_realloc>
  useg->len -= remainder;
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	891a      	ldrh	r2, [r3, #8]
 8010f0a:	89bb      	ldrh	r3, [r7, #12]
 8010f0c:	1ad3      	subs	r3, r2, r3
 8010f0e:	b29a      	uxth	r2, r3
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	899b      	ldrh	r3, [r3, #12]
 8010f1a:	b29c      	uxth	r4, r3
 8010f1c:	7efb      	ldrb	r3, [r7, #27]
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7fa f9ed 	bl	800b300 <lwip_htons>
 8010f26:	4603      	mov	r3, r0
 8010f28:	461a      	mov	r2, r3
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	68db      	ldr	r3, [r3, #12]
 8010f2e:	4322      	orrs	r2, r4
 8010f30:	b292      	uxth	r2, r2
 8010f32:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7fb fda3 	bl	800ca84 <pbuf_clen>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	461a      	mov	r2, r3
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f48:	4413      	add	r3, r2
 8010f4a:	b29a      	uxth	r2, r3
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	685b      	ldr	r3, [r3, #4]
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7fb fd94 	bl	800ca84 <pbuf_clen>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	461a      	mov	r2, r3
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f66:	4413      	add	r3, r2
 8010f68:	b29a      	uxth	r2, r3
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010f70:	697b      	ldr	r3, [r7, #20]
 8010f72:	681a      	ldr	r2, [r3, #0]
 8010f74:	69fb      	ldr	r3, [r7, #28]
 8010f76:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	69fa      	ldr	r2, [r7, #28]
 8010f7c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010f7e:	69fb      	ldr	r3, [r7, #28]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d103      	bne.n	8010f8e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	e016      	b.n	8010fc0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010f92:	bf00      	nop
 8010f94:	e002      	b.n	8010f9c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f96:	bf00      	nop
 8010f98:	e000      	b.n	8010f9c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f9a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010f9c:	69fb      	ldr	r3, [r7, #28]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d006      	beq.n	8010fb0 <tcp_split_unsent_seg+0x25c>
 8010fa2:	4b09      	ldr	r3, [pc, #36]	; (8010fc8 <tcp_split_unsent_seg+0x274>)
 8010fa4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010fa8:	490d      	ldr	r1, [pc, #52]	; (8010fe0 <tcp_split_unsent_seg+0x28c>)
 8010faa:	4809      	ldr	r0, [pc, #36]	; (8010fd0 <tcp_split_unsent_seg+0x27c>)
 8010fac:	f004 fabc 	bl	8015528 <printf>
  if (p != NULL) {
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d002      	beq.n	8010fbc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010fb6:	6938      	ldr	r0, [r7, #16]
 8010fb8:	f7fb fcd6 	bl	800c968 <pbuf_free>
  }

  return ERR_MEM;
 8010fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3724      	adds	r7, #36	; 0x24
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd90      	pop	{r4, r7, pc}
 8010fc8:	0801e3d8 	.word	0x0801e3d8
 8010fcc:	0801e76c 	.word	0x0801e76c
 8010fd0:	0801e42c 	.word	0x0801e42c
 8010fd4:	0801e790 	.word	0x0801e790
 8010fd8:	0801e7b4 	.word	0x0801e7b4
 8010fdc:	0801e7c4 	.word	0x0801e7c4
 8010fe0:	0801e7d4 	.word	0x0801e7d4

08010fe4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010fe4:	b590      	push	{r4, r7, lr}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d106      	bne.n	8011000 <tcp_send_fin+0x1c>
 8010ff2:	4b21      	ldr	r3, [pc, #132]	; (8011078 <tcp_send_fin+0x94>)
 8010ff4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010ff8:	4920      	ldr	r1, [pc, #128]	; (801107c <tcp_send_fin+0x98>)
 8010ffa:	4821      	ldr	r0, [pc, #132]	; (8011080 <tcp_send_fin+0x9c>)
 8010ffc:	f004 fa94 	bl	8015528 <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011004:	2b00      	cmp	r3, #0
 8011006:	d02e      	beq.n	8011066 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801100c:	60fb      	str	r3, [r7, #12]
 801100e:	e002      	b.n	8011016 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d1f8      	bne.n	8011010 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	68db      	ldr	r3, [r3, #12]
 8011022:	899b      	ldrh	r3, [r3, #12]
 8011024:	b29b      	uxth	r3, r3
 8011026:	4618      	mov	r0, r3
 8011028:	f7fa f96a 	bl	800b300 <lwip_htons>
 801102c:	4603      	mov	r3, r0
 801102e:	b2db      	uxtb	r3, r3
 8011030:	f003 0307 	and.w	r3, r3, #7
 8011034:	2b00      	cmp	r3, #0
 8011036:	d116      	bne.n	8011066 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	899b      	ldrh	r3, [r3, #12]
 801103e:	b29c      	uxth	r4, r3
 8011040:	2001      	movs	r0, #1
 8011042:	f7fa f95d 	bl	800b300 <lwip_htons>
 8011046:	4603      	mov	r3, r0
 8011048:	461a      	mov	r2, r3
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	68db      	ldr	r3, [r3, #12]
 801104e:	4322      	orrs	r2, r4
 8011050:	b292      	uxth	r2, r2
 8011052:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	8b5b      	ldrh	r3, [r3, #26]
 8011058:	f043 0320 	orr.w	r3, r3, #32
 801105c:	b29a      	uxth	r2, r3
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011062:	2300      	movs	r3, #0
 8011064:	e004      	b.n	8011070 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011066:	2101      	movs	r1, #1
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f000 f80b 	bl	8011084 <tcp_enqueue_flags>
 801106e:	4603      	mov	r3, r0
}
 8011070:	4618      	mov	r0, r3
 8011072:	3714      	adds	r7, #20
 8011074:	46bd      	mov	sp, r7
 8011076:	bd90      	pop	{r4, r7, pc}
 8011078:	0801e3d8 	.word	0x0801e3d8
 801107c:	0801e7e0 	.word	0x0801e7e0
 8011080:	0801e42c 	.word	0x0801e42c

08011084 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b08a      	sub	sp, #40	; 0x28
 8011088:	af02      	add	r7, sp, #8
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	460b      	mov	r3, r1
 801108e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011090:	2300      	movs	r3, #0
 8011092:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011094:	2300      	movs	r3, #0
 8011096:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011098:	78fb      	ldrb	r3, [r7, #3]
 801109a:	f003 0303 	and.w	r3, r3, #3
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d106      	bne.n	80110b0 <tcp_enqueue_flags+0x2c>
 80110a2:	4b67      	ldr	r3, [pc, #412]	; (8011240 <tcp_enqueue_flags+0x1bc>)
 80110a4:	f240 4211 	movw	r2, #1041	; 0x411
 80110a8:	4966      	ldr	r1, [pc, #408]	; (8011244 <tcp_enqueue_flags+0x1c0>)
 80110aa:	4867      	ldr	r0, [pc, #412]	; (8011248 <tcp_enqueue_flags+0x1c4>)
 80110ac:	f004 fa3c 	bl	8015528 <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d106      	bne.n	80110c4 <tcp_enqueue_flags+0x40>
 80110b6:	4b62      	ldr	r3, [pc, #392]	; (8011240 <tcp_enqueue_flags+0x1bc>)
 80110b8:	f240 4213 	movw	r2, #1043	; 0x413
 80110bc:	4963      	ldr	r1, [pc, #396]	; (801124c <tcp_enqueue_flags+0x1c8>)
 80110be:	4862      	ldr	r0, [pc, #392]	; (8011248 <tcp_enqueue_flags+0x1c4>)
 80110c0:	f004 fa32 	bl	8015528 <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80110c4:	78fb      	ldrb	r3, [r7, #3]
 80110c6:	f003 0302 	and.w	r3, r3, #2
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d001      	beq.n	80110d2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80110ce:	2301      	movs	r3, #1
 80110d0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80110d2:	7ffb      	ldrb	r3, [r7, #31]
 80110d4:	009b      	lsls	r3, r3, #2
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	f003 0304 	and.w	r3, r3, #4
 80110dc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80110de:	7dfb      	ldrb	r3, [r7, #23]
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80110e6:	4619      	mov	r1, r3
 80110e8:	2036      	movs	r0, #54	; 0x36
 80110ea:	f7fb f959 	bl	800c3a0 <pbuf_alloc>
 80110ee:	6138      	str	r0, [r7, #16]
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d109      	bne.n	801110a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	8b5b      	ldrh	r3, [r3, #26]
 80110fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110fe:	b29a      	uxth	r2, r3
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011104:	f04f 33ff 	mov.w	r3, #4294967295
 8011108:	e095      	b.n	8011236 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	895a      	ldrh	r2, [r3, #10]
 801110e:	7dfb      	ldrb	r3, [r7, #23]
 8011110:	b29b      	uxth	r3, r3
 8011112:	429a      	cmp	r2, r3
 8011114:	d206      	bcs.n	8011124 <tcp_enqueue_flags+0xa0>
 8011116:	4b4a      	ldr	r3, [pc, #296]	; (8011240 <tcp_enqueue_flags+0x1bc>)
 8011118:	f240 4239 	movw	r2, #1081	; 0x439
 801111c:	494c      	ldr	r1, [pc, #304]	; (8011250 <tcp_enqueue_flags+0x1cc>)
 801111e:	484a      	ldr	r0, [pc, #296]	; (8011248 <tcp_enqueue_flags+0x1c4>)
 8011120:	f004 fa02 	bl	8015528 <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011128:	78fa      	ldrb	r2, [r7, #3]
 801112a:	7ffb      	ldrb	r3, [r7, #31]
 801112c:	9300      	str	r3, [sp, #0]
 801112e:	460b      	mov	r3, r1
 8011130:	6939      	ldr	r1, [r7, #16]
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f7ff fd70 	bl	8010c18 <tcp_create_segment>
 8011138:	60f8      	str	r0, [r7, #12]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d109      	bne.n	8011154 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	8b5b      	ldrh	r3, [r3, #26]
 8011144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011148:	b29a      	uxth	r2, r3
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801114e:	f04f 33ff 	mov.w	r3, #4294967295
 8011152:	e070      	b.n	8011236 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	68db      	ldr	r3, [r3, #12]
 8011158:	f003 0303 	and.w	r3, r3, #3
 801115c:	2b00      	cmp	r3, #0
 801115e:	d006      	beq.n	801116e <tcp_enqueue_flags+0xea>
 8011160:	4b37      	ldr	r3, [pc, #220]	; (8011240 <tcp_enqueue_flags+0x1bc>)
 8011162:	f240 4242 	movw	r2, #1090	; 0x442
 8011166:	493b      	ldr	r1, [pc, #236]	; (8011254 <tcp_enqueue_flags+0x1d0>)
 8011168:	4837      	ldr	r0, [pc, #220]	; (8011248 <tcp_enqueue_flags+0x1c4>)
 801116a:	f004 f9dd 	bl	8015528 <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	891b      	ldrh	r3, [r3, #8]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d006      	beq.n	8011184 <tcp_enqueue_flags+0x100>
 8011176:	4b32      	ldr	r3, [pc, #200]	; (8011240 <tcp_enqueue_flags+0x1bc>)
 8011178:	f240 4243 	movw	r2, #1091	; 0x443
 801117c:	4936      	ldr	r1, [pc, #216]	; (8011258 <tcp_enqueue_flags+0x1d4>)
 801117e:	4832      	ldr	r0, [pc, #200]	; (8011248 <tcp_enqueue_flags+0x1c4>)
 8011180:	f004 f9d2 	bl	8015528 <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011188:	2b00      	cmp	r3, #0
 801118a:	d103      	bne.n	8011194 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	68fa      	ldr	r2, [r7, #12]
 8011190:	66da      	str	r2, [r3, #108]	; 0x6c
 8011192:	e00d      	b.n	80111b0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011198:	61bb      	str	r3, [r7, #24]
 801119a:	e002      	b.n	80111a2 <tcp_enqueue_flags+0x11e>
 801119c:	69bb      	ldr	r3, [r7, #24]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	61bb      	str	r3, [r7, #24]
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d1f8      	bne.n	801119c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80111aa:	69bb      	ldr	r3, [r7, #24]
 80111ac:	68fa      	ldr	r2, [r7, #12]
 80111ae:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2200      	movs	r2, #0
 80111b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80111b8:	78fb      	ldrb	r3, [r7, #3]
 80111ba:	f003 0302 	and.w	r3, r3, #2
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d104      	bne.n	80111cc <tcp_enqueue_flags+0x148>
 80111c2:	78fb      	ldrb	r3, [r7, #3]
 80111c4:	f003 0301 	and.w	r3, r3, #1
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d004      	beq.n	80111d6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80111d0:	1c5a      	adds	r2, r3, #1
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80111d6:	78fb      	ldrb	r3, [r7, #3]
 80111d8:	f003 0301 	and.w	r3, r3, #1
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d006      	beq.n	80111ee <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	8b5b      	ldrh	r3, [r3, #26]
 80111e4:	f043 0320 	orr.w	r3, r3, #32
 80111e8:	b29a      	uxth	r2, r3
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7fb fc46 	bl	800ca84 <pbuf_clen>
 80111f8:	4603      	mov	r3, r0
 80111fa:	461a      	mov	r2, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011202:	4413      	add	r3, r2
 8011204:	b29a      	uxth	r2, r3
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011212:	2b00      	cmp	r3, #0
 8011214:	d00e      	beq.n	8011234 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801121a:	2b00      	cmp	r3, #0
 801121c:	d10a      	bne.n	8011234 <tcp_enqueue_flags+0x1b0>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011222:	2b00      	cmp	r3, #0
 8011224:	d106      	bne.n	8011234 <tcp_enqueue_flags+0x1b0>
 8011226:	4b06      	ldr	r3, [pc, #24]	; (8011240 <tcp_enqueue_flags+0x1bc>)
 8011228:	f240 4265 	movw	r2, #1125	; 0x465
 801122c:	490b      	ldr	r1, [pc, #44]	; (801125c <tcp_enqueue_flags+0x1d8>)
 801122e:	4806      	ldr	r0, [pc, #24]	; (8011248 <tcp_enqueue_flags+0x1c4>)
 8011230:	f004 f97a 	bl	8015528 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011234:	2300      	movs	r3, #0
}
 8011236:	4618      	mov	r0, r3
 8011238:	3720      	adds	r7, #32
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}
 801123e:	bf00      	nop
 8011240:	0801e3d8 	.word	0x0801e3d8
 8011244:	0801e7fc 	.word	0x0801e7fc
 8011248:	0801e42c 	.word	0x0801e42c
 801124c:	0801e854 	.word	0x0801e854
 8011250:	0801e874 	.word	0x0801e874
 8011254:	0801e8b0 	.word	0x0801e8b0
 8011258:	0801e8c8 	.word	0x0801e8c8
 801125c:	0801e8f4 	.word	0x0801e8f4

08011260 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011260:	b5b0      	push	{r4, r5, r7, lr}
 8011262:	b08a      	sub	sp, #40	; 0x28
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d106      	bne.n	801127c <tcp_output+0x1c>
 801126e:	4b9e      	ldr	r3, [pc, #632]	; (80114e8 <tcp_output+0x288>)
 8011270:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011274:	499d      	ldr	r1, [pc, #628]	; (80114ec <tcp_output+0x28c>)
 8011276:	489e      	ldr	r0, [pc, #632]	; (80114f0 <tcp_output+0x290>)
 8011278:	f004 f956 	bl	8015528 <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	7d1b      	ldrb	r3, [r3, #20]
 8011280:	2b01      	cmp	r3, #1
 8011282:	d106      	bne.n	8011292 <tcp_output+0x32>
 8011284:	4b98      	ldr	r3, [pc, #608]	; (80114e8 <tcp_output+0x288>)
 8011286:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801128a:	499a      	ldr	r1, [pc, #616]	; (80114f4 <tcp_output+0x294>)
 801128c:	4898      	ldr	r0, [pc, #608]	; (80114f0 <tcp_output+0x290>)
 801128e:	f004 f94b 	bl	8015528 <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011292:	4b99      	ldr	r3, [pc, #612]	; (80114f8 <tcp_output+0x298>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	429a      	cmp	r2, r3
 801129a:	d101      	bne.n	80112a0 <tcp_output+0x40>
    return ERR_OK;
 801129c:	2300      	movs	r3, #0
 801129e:	e1ce      	b.n	801163e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112ac:	4293      	cmp	r3, r2
 80112ae:	bf28      	it	cs
 80112b0:	4613      	movcs	r3, r2
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80112bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d10b      	bne.n	80112da <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	8b5b      	ldrh	r3, [r3, #26]
 80112c6:	f003 0302 	and.w	r3, r3, #2
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f000 81aa 	beq.w	8011624 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f000 fdcb 	bl	8011e6c <tcp_send_empty_ack>
 80112d6:	4603      	mov	r3, r0
 80112d8:	e1b1      	b.n	801163e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80112da:	6879      	ldr	r1, [r7, #4]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	3304      	adds	r3, #4
 80112e0:	461a      	mov	r2, r3
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f7ff fc7c 	bl	8010be0 <tcp_route>
 80112e8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d102      	bne.n	80112f6 <tcp_output+0x96>
    return ERR_RTE;
 80112f0:	f06f 0303 	mvn.w	r3, #3
 80112f4:	e1a3      	b.n	801163e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d003      	beq.n	8011304 <tcp_output+0xa4>
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d111      	bne.n	8011328 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d002      	beq.n	8011310 <tcp_output+0xb0>
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	3304      	adds	r3, #4
 801130e:	e000      	b.n	8011312 <tcp_output+0xb2>
 8011310:	2300      	movs	r3, #0
 8011312:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d102      	bne.n	8011320 <tcp_output+0xc0>
      return ERR_RTE;
 801131a:	f06f 0303 	mvn.w	r3, #3
 801131e:	e18e      	b.n	801163e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	4618      	mov	r0, r3
 8011330:	f7f9 fffb 	bl	800b32a <lwip_htonl>
 8011334:	4602      	mov	r2, r0
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801133e:	8912      	ldrh	r2, [r2, #8]
 8011340:	4413      	add	r3, r2
 8011342:	69ba      	ldr	r2, [r7, #24]
 8011344:	429a      	cmp	r2, r3
 8011346:	d227      	bcs.n	8011398 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801134e:	461a      	mov	r2, r3
 8011350:	69bb      	ldr	r3, [r7, #24]
 8011352:	4293      	cmp	r3, r2
 8011354:	d114      	bne.n	8011380 <tcp_output+0x120>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801135a:	2b00      	cmp	r3, #0
 801135c:	d110      	bne.n	8011380 <tcp_output+0x120>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011364:	2b00      	cmp	r3, #0
 8011366:	d10b      	bne.n	8011380 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2200      	movs	r2, #0
 801136c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2201      	movs	r2, #1
 8011374:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2200      	movs	r2, #0
 801137c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	8b5b      	ldrh	r3, [r3, #26]
 8011384:	f003 0302 	and.w	r3, r3, #2
 8011388:	2b00      	cmp	r3, #0
 801138a:	f000 814d 	beq.w	8011628 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f000 fd6c 	bl	8011e6c <tcp_send_empty_ack>
 8011394:	4603      	mov	r3, r0
 8011396:	e152      	b.n	801163e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2200      	movs	r2, #0
 801139c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113a4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80113a6:	6a3b      	ldr	r3, [r7, #32]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f000 811c 	beq.w	80115e6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80113ae:	e002      	b.n	80113b6 <tcp_output+0x156>
 80113b0:	6a3b      	ldr	r3, [r7, #32]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	623b      	str	r3, [r7, #32]
 80113b6:	6a3b      	ldr	r3, [r7, #32]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d1f8      	bne.n	80113b0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80113be:	e112      	b.n	80115e6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80113c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	899b      	ldrh	r3, [r3, #12]
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7f9 ff99 	bl	800b300 <lwip_htons>
 80113ce:	4603      	mov	r3, r0
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	f003 0304 	and.w	r3, r3, #4
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d006      	beq.n	80113e8 <tcp_output+0x188>
 80113da:	4b43      	ldr	r3, [pc, #268]	; (80114e8 <tcp_output+0x288>)
 80113dc:	f240 5236 	movw	r2, #1334	; 0x536
 80113e0:	4946      	ldr	r1, [pc, #280]	; (80114fc <tcp_output+0x29c>)
 80113e2:	4843      	ldr	r0, [pc, #268]	; (80114f0 <tcp_output+0x290>)
 80113e4:	f004 f8a0 	bl	8015528 <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d01f      	beq.n	8011430 <tcp_output+0x1d0>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	8b5b      	ldrh	r3, [r3, #26]
 80113f4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d119      	bne.n	8011430 <tcp_output+0x1d0>
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011400:	2b00      	cmp	r3, #0
 8011402:	d00b      	beq.n	801141c <tcp_output+0x1bc>
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d110      	bne.n	8011430 <tcp_output+0x1d0>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011412:	891a      	ldrh	r2, [r3, #8]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011418:	429a      	cmp	r2, r3
 801141a:	d209      	bcs.n	8011430 <tcp_output+0x1d0>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011422:	2b00      	cmp	r3, #0
 8011424:	d004      	beq.n	8011430 <tcp_output+0x1d0>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801142c:	2b08      	cmp	r3, #8
 801142e:	d901      	bls.n	8011434 <tcp_output+0x1d4>
 8011430:	2301      	movs	r3, #1
 8011432:	e000      	b.n	8011436 <tcp_output+0x1d6>
 8011434:	2300      	movs	r3, #0
 8011436:	2b00      	cmp	r3, #0
 8011438:	d106      	bne.n	8011448 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	8b5b      	ldrh	r3, [r3, #26]
 801143e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011442:	2b00      	cmp	r3, #0
 8011444:	f000 80e4 	beq.w	8011610 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	7d1b      	ldrb	r3, [r3, #20]
 801144c:	2b02      	cmp	r3, #2
 801144e:	d00d      	beq.n	801146c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011452:	68db      	ldr	r3, [r3, #12]
 8011454:	899b      	ldrh	r3, [r3, #12]
 8011456:	b29c      	uxth	r4, r3
 8011458:	2010      	movs	r0, #16
 801145a:	f7f9 ff51 	bl	800b300 <lwip_htons>
 801145e:	4603      	mov	r3, r0
 8011460:	461a      	mov	r2, r3
 8011462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	4322      	orrs	r2, r4
 8011468:	b292      	uxth	r2, r2
 801146a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801146c:	697a      	ldr	r2, [r7, #20]
 801146e:	6879      	ldr	r1, [r7, #4]
 8011470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011472:	f000 f909 	bl	8011688 <tcp_output_segment>
 8011476:	4603      	mov	r3, r0
 8011478:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d009      	beq.n	8011496 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	8b5b      	ldrh	r3, [r3, #26]
 8011486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801148a:	b29a      	uxth	r2, r3
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	835a      	strh	r2, [r3, #26]
      return err;
 8011490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011494:	e0d3      	b.n	801163e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	7d1b      	ldrb	r3, [r3, #20]
 80114a2:	2b02      	cmp	r3, #2
 80114a4:	d006      	beq.n	80114b4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	8b5b      	ldrh	r3, [r3, #26]
 80114aa:	f023 0303 	bic.w	r3, r3, #3
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80114b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7f9 ff35 	bl	800b32a <lwip_htonl>
 80114c0:	4604      	mov	r4, r0
 80114c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c4:	891b      	ldrh	r3, [r3, #8]
 80114c6:	461d      	mov	r5, r3
 80114c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	899b      	ldrh	r3, [r3, #12]
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7f9 ff15 	bl	800b300 <lwip_htons>
 80114d6:	4603      	mov	r3, r0
 80114d8:	b2db      	uxtb	r3, r3
 80114da:	f003 0303 	and.w	r3, r3, #3
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d00e      	beq.n	8011500 <tcp_output+0x2a0>
 80114e2:	2301      	movs	r3, #1
 80114e4:	e00d      	b.n	8011502 <tcp_output+0x2a2>
 80114e6:	bf00      	nop
 80114e8:	0801e3d8 	.word	0x0801e3d8
 80114ec:	0801e91c 	.word	0x0801e91c
 80114f0:	0801e42c 	.word	0x0801e42c
 80114f4:	0801e934 	.word	0x0801e934
 80114f8:	2000b64c 	.word	0x2000b64c
 80114fc:	0801e95c 	.word	0x0801e95c
 8011500:	2300      	movs	r3, #0
 8011502:	442b      	add	r3, r5
 8011504:	4423      	add	r3, r4
 8011506:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	1ad3      	subs	r3, r2, r3
 8011510:	2b00      	cmp	r3, #0
 8011512:	da02      	bge.n	801151a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	68ba      	ldr	r2, [r7, #8]
 8011518:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151c:	891b      	ldrh	r3, [r3, #8]
 801151e:	461c      	mov	r4, r3
 8011520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	899b      	ldrh	r3, [r3, #12]
 8011526:	b29b      	uxth	r3, r3
 8011528:	4618      	mov	r0, r3
 801152a:	f7f9 fee9 	bl	800b300 <lwip_htons>
 801152e:	4603      	mov	r3, r0
 8011530:	b2db      	uxtb	r3, r3
 8011532:	f003 0303 	and.w	r3, r3, #3
 8011536:	2b00      	cmp	r3, #0
 8011538:	d001      	beq.n	801153e <tcp_output+0x2de>
 801153a:	2301      	movs	r3, #1
 801153c:	e000      	b.n	8011540 <tcp_output+0x2e0>
 801153e:	2300      	movs	r3, #0
 8011540:	4423      	add	r3, r4
 8011542:	2b00      	cmp	r3, #0
 8011544:	d049      	beq.n	80115da <tcp_output+0x37a>
      seg->next = NULL;
 8011546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011548:	2200      	movs	r2, #0
 801154a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011550:	2b00      	cmp	r3, #0
 8011552:	d105      	bne.n	8011560 <tcp_output+0x300>
        pcb->unacked = seg;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011558:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155c:	623b      	str	r3, [r7, #32]
 801155e:	e03f      	b.n	80115e0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011562:	68db      	ldr	r3, [r3, #12]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	4618      	mov	r0, r3
 8011568:	f7f9 fedf 	bl	800b32a <lwip_htonl>
 801156c:	4604      	mov	r4, r0
 801156e:	6a3b      	ldr	r3, [r7, #32]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	4618      	mov	r0, r3
 8011576:	f7f9 fed8 	bl	800b32a <lwip_htonl>
 801157a:	4603      	mov	r3, r0
 801157c:	1ae3      	subs	r3, r4, r3
 801157e:	2b00      	cmp	r3, #0
 8011580:	da24      	bge.n	80115cc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	3370      	adds	r3, #112	; 0x70
 8011586:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011588:	e002      	b.n	8011590 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801158a:	69fb      	ldr	r3, [r7, #28]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d011      	beq.n	80115bc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	68db      	ldr	r3, [r3, #12]
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7f9 fec2 	bl	800b32a <lwip_htonl>
 80115a6:	4604      	mov	r4, r0
 80115a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115aa:	68db      	ldr	r3, [r3, #12]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7f9 febb 	bl	800b32a <lwip_htonl>
 80115b4:	4603      	mov	r3, r0
 80115b6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	dbe6      	blt.n	801158a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80115c4:	69fb      	ldr	r3, [r7, #28]
 80115c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115c8:	601a      	str	r2, [r3, #0]
 80115ca:	e009      	b.n	80115e0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80115cc:	6a3b      	ldr	r3, [r7, #32]
 80115ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115d0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80115d2:	6a3b      	ldr	r3, [r7, #32]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	623b      	str	r3, [r7, #32]
 80115d8:	e002      	b.n	80115e0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80115da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115dc:	f7fc fc43 	bl	800de66 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115e4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80115e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d012      	beq.n	8011612 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80115ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	685b      	ldr	r3, [r3, #4]
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7f9 fe99 	bl	800b32a <lwip_htonl>
 80115f8:	4602      	mov	r2, r0
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115fe:	1ad3      	subs	r3, r2, r3
 8011600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011602:	8912      	ldrh	r2, [r2, #8]
 8011604:	4413      	add	r3, r2
  while (seg != NULL &&
 8011606:	69ba      	ldr	r2, [r7, #24]
 8011608:	429a      	cmp	r2, r3
 801160a:	f4bf aed9 	bcs.w	80113c0 <tcp_output+0x160>
 801160e:	e000      	b.n	8011612 <tcp_output+0x3b2>
      break;
 8011610:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011616:	2b00      	cmp	r3, #0
 8011618:	d108      	bne.n	801162c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2200      	movs	r2, #0
 801161e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011622:	e004      	b.n	801162e <tcp_output+0x3ce>
    goto output_done;
 8011624:	bf00      	nop
 8011626:	e002      	b.n	801162e <tcp_output+0x3ce>
    goto output_done;
 8011628:	bf00      	nop
 801162a:	e000      	b.n	801162e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801162c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	8b5b      	ldrh	r3, [r3, #26]
 8011632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011636:	b29a      	uxth	r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801163c:	2300      	movs	r3, #0
}
 801163e:	4618      	mov	r0, r3
 8011640:	3728      	adds	r7, #40	; 0x28
 8011642:	46bd      	mov	sp, r7
 8011644:	bdb0      	pop	{r4, r5, r7, pc}
 8011646:	bf00      	nop

08011648 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b082      	sub	sp, #8
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d106      	bne.n	8011664 <tcp_output_segment_busy+0x1c>
 8011656:	4b09      	ldr	r3, [pc, #36]	; (801167c <tcp_output_segment_busy+0x34>)
 8011658:	f240 529a 	movw	r2, #1434	; 0x59a
 801165c:	4908      	ldr	r1, [pc, #32]	; (8011680 <tcp_output_segment_busy+0x38>)
 801165e:	4809      	ldr	r0, [pc, #36]	; (8011684 <tcp_output_segment_busy+0x3c>)
 8011660:	f003 ff62 	bl	8015528 <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	685b      	ldr	r3, [r3, #4]
 8011668:	7b9b      	ldrb	r3, [r3, #14]
 801166a:	2b01      	cmp	r3, #1
 801166c:	d001      	beq.n	8011672 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801166e:	2301      	movs	r3, #1
 8011670:	e000      	b.n	8011674 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011672:	2300      	movs	r3, #0
}
 8011674:	4618      	mov	r0, r3
 8011676:	3708      	adds	r7, #8
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}
 801167c:	0801e3d8 	.word	0x0801e3d8
 8011680:	0801e974 	.word	0x0801e974
 8011684:	0801e42c 	.word	0x0801e42c

08011688 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011688:	b5b0      	push	{r4, r5, r7, lr}
 801168a:	b08c      	sub	sp, #48	; 0x30
 801168c:	af04      	add	r7, sp, #16
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d106      	bne.n	80116a8 <tcp_output_segment+0x20>
 801169a:	4b63      	ldr	r3, [pc, #396]	; (8011828 <tcp_output_segment+0x1a0>)
 801169c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80116a0:	4962      	ldr	r1, [pc, #392]	; (801182c <tcp_output_segment+0x1a4>)
 80116a2:	4863      	ldr	r0, [pc, #396]	; (8011830 <tcp_output_segment+0x1a8>)
 80116a4:	f003 ff40 	bl	8015528 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d106      	bne.n	80116bc <tcp_output_segment+0x34>
 80116ae:	4b5e      	ldr	r3, [pc, #376]	; (8011828 <tcp_output_segment+0x1a0>)
 80116b0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80116b4:	495f      	ldr	r1, [pc, #380]	; (8011834 <tcp_output_segment+0x1ac>)
 80116b6:	485e      	ldr	r0, [pc, #376]	; (8011830 <tcp_output_segment+0x1a8>)
 80116b8:	f003 ff36 	bl	8015528 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d106      	bne.n	80116d0 <tcp_output_segment+0x48>
 80116c2:	4b59      	ldr	r3, [pc, #356]	; (8011828 <tcp_output_segment+0x1a0>)
 80116c4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80116c8:	495b      	ldr	r1, [pc, #364]	; (8011838 <tcp_output_segment+0x1b0>)
 80116ca:	4859      	ldr	r0, [pc, #356]	; (8011830 <tcp_output_segment+0x1a8>)
 80116cc:	f003 ff2c 	bl	8015528 <printf>

  if (tcp_output_segment_busy(seg)) {
 80116d0:	68f8      	ldr	r0, [r7, #12]
 80116d2:	f7ff ffb9 	bl	8011648 <tcp_output_segment_busy>
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d001      	beq.n	80116e0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80116dc:	2300      	movs	r3, #0
 80116de:	e09f      	b.n	8011820 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	68dc      	ldr	r4, [r3, #12]
 80116e8:	4610      	mov	r0, r2
 80116ea:	f7f9 fe1e 	bl	800b32a <lwip_htonl>
 80116ee:	4603      	mov	r3, r0
 80116f0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	68dc      	ldr	r4, [r3, #12]
 80116fa:	4610      	mov	r0, r2
 80116fc:	f7f9 fe00 	bl	800b300 <lwip_htons>
 8011700:	4603      	mov	r3, r0
 8011702:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011708:	68ba      	ldr	r2, [r7, #8]
 801170a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801170c:	441a      	add	r2, r3
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	68db      	ldr	r3, [r3, #12]
 8011716:	3314      	adds	r3, #20
 8011718:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	7a9b      	ldrb	r3, [r3, #10]
 801171e:	f003 0301 	and.w	r3, r3, #1
 8011722:	2b00      	cmp	r3, #0
 8011724:	d015      	beq.n	8011752 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	3304      	adds	r3, #4
 801172a:	461a      	mov	r2, r3
 801172c:	6879      	ldr	r1, [r7, #4]
 801172e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011732:	f7fc fe8f 	bl	800e454 <tcp_eff_send_mss_netif>
 8011736:	4603      	mov	r3, r0
 8011738:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801173a:	8b7b      	ldrh	r3, [r7, #26]
 801173c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011740:	4618      	mov	r0, r3
 8011742:	f7f9 fdf2 	bl	800b32a <lwip_htonl>
 8011746:	4602      	mov	r2, r0
 8011748:	69fb      	ldr	r3, [r7, #28]
 801174a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	3304      	adds	r3, #4
 8011750:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011758:	2b00      	cmp	r3, #0
 801175a:	da02      	bge.n	8011762 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	2200      	movs	r2, #0
 8011760:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011766:	2b00      	cmp	r3, #0
 8011768:	d10c      	bne.n	8011784 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801176a:	4b34      	ldr	r3, [pc, #208]	; (801183c <tcp_output_segment+0x1b4>)
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	685b      	ldr	r3, [r3, #4]
 8011778:	4618      	mov	r0, r3
 801177a:	f7f9 fdd6 	bl	800b32a <lwip_htonl>
 801177e:	4602      	mov	r2, r0
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	68da      	ldr	r2, [r3, #12]
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	1ad3      	subs	r3, r2, r3
 8011790:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	8959      	ldrh	r1, [r3, #10]
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	8b3a      	ldrh	r2, [r7, #24]
 801179e:	1a8a      	subs	r2, r1, r2
 80117a0:	b292      	uxth	r2, r2
 80117a2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	8919      	ldrh	r1, [r3, #8]
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	8b3a      	ldrh	r2, [r7, #24]
 80117b0:	1a8a      	subs	r2, r1, r2
 80117b2:	b292      	uxth	r2, r2
 80117b4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	68fa      	ldr	r2, [r7, #12]
 80117bc:	68d2      	ldr	r2, [r2, #12]
 80117be:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	2200      	movs	r2, #0
 80117c6:	741a      	strb	r2, [r3, #16]
 80117c8:	2200      	movs	r2, #0
 80117ca:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	68db      	ldr	r3, [r3, #12]
 80117d0:	f103 0214 	add.w	r2, r3, #20
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	7a9b      	ldrb	r3, [r3, #10]
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	f003 0304 	and.w	r3, r3, #4
 80117de:	4413      	add	r3, r2
 80117e0:	69fa      	ldr	r2, [r7, #28]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d006      	beq.n	80117f4 <tcp_output_segment+0x16c>
 80117e6:	4b10      	ldr	r3, [pc, #64]	; (8011828 <tcp_output_segment+0x1a0>)
 80117e8:	f240 621c 	movw	r2, #1564	; 0x61c
 80117ec:	4914      	ldr	r1, [pc, #80]	; (8011840 <tcp_output_segment+0x1b8>)
 80117ee:	4810      	ldr	r0, [pc, #64]	; (8011830 <tcp_output_segment+0x1a8>)
 80117f0:	f003 fe9a 	bl	8015528 <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	6858      	ldr	r0, [r3, #4]
 80117f8:	68b9      	ldr	r1, [r7, #8]
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	1d1c      	adds	r4, r3, #4
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	7add      	ldrb	r5, [r3, #11]
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	7a9b      	ldrb	r3, [r3, #10]
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	9202      	str	r2, [sp, #8]
 801180a:	2206      	movs	r2, #6
 801180c:	9201      	str	r2, [sp, #4]
 801180e:	9300      	str	r3, [sp, #0]
 8011810:	462b      	mov	r3, r5
 8011812:	4622      	mov	r2, r4
 8011814:	f002 fa66 	bl	8013ce4 <ip4_output_if>
 8011818:	4603      	mov	r3, r0
 801181a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801181c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011820:	4618      	mov	r0, r3
 8011822:	3720      	adds	r7, #32
 8011824:	46bd      	mov	sp, r7
 8011826:	bdb0      	pop	{r4, r5, r7, pc}
 8011828:	0801e3d8 	.word	0x0801e3d8
 801182c:	0801e99c 	.word	0x0801e99c
 8011830:	0801e42c 	.word	0x0801e42c
 8011834:	0801e9bc 	.word	0x0801e9bc
 8011838:	0801e9dc 	.word	0x0801e9dc
 801183c:	2000b63c 	.word	0x2000b63c
 8011840:	0801ea00 	.word	0x0801ea00

08011844 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011844:	b5b0      	push	{r4, r5, r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d106      	bne.n	8011860 <tcp_rexmit_rto_prepare+0x1c>
 8011852:	4b31      	ldr	r3, [pc, #196]	; (8011918 <tcp_rexmit_rto_prepare+0xd4>)
 8011854:	f240 6263 	movw	r2, #1635	; 0x663
 8011858:	4930      	ldr	r1, [pc, #192]	; (801191c <tcp_rexmit_rto_prepare+0xd8>)
 801185a:	4831      	ldr	r0, [pc, #196]	; (8011920 <tcp_rexmit_rto_prepare+0xdc>)
 801185c:	f003 fe64 	bl	8015528 <printf>

  if (pcb->unacked == NULL) {
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011864:	2b00      	cmp	r3, #0
 8011866:	d102      	bne.n	801186e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011868:	f06f 0305 	mvn.w	r3, #5
 801186c:	e050      	b.n	8011910 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011872:	60fb      	str	r3, [r7, #12]
 8011874:	e00b      	b.n	801188e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	f7ff fee6 	bl	8011648 <tcp_output_segment_busy>
 801187c:	4603      	mov	r3, r0
 801187e:	2b00      	cmp	r3, #0
 8011880:	d002      	beq.n	8011888 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011882:	f06f 0305 	mvn.w	r3, #5
 8011886:	e043      	b.n	8011910 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	60fb      	str	r3, [r7, #12]
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d1ef      	bne.n	8011876 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011896:	68f8      	ldr	r0, [r7, #12]
 8011898:	f7ff fed6 	bl	8011648 <tcp_output_segment_busy>
 801189c:	4603      	mov	r3, r0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d002      	beq.n	80118a8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80118a2:	f06f 0305 	mvn.w	r3, #5
 80118a6:	e033      	b.n	8011910 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2200      	movs	r2, #0
 80118bc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	8b5b      	ldrh	r3, [r3, #26]
 80118c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7f9 fd29 	bl	800b32a <lwip_htonl>
 80118d8:	4604      	mov	r4, r0
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	891b      	ldrh	r3, [r3, #8]
 80118de:	461d      	mov	r5, r3
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	899b      	ldrh	r3, [r3, #12]
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7f9 fd09 	bl	800b300 <lwip_htons>
 80118ee:	4603      	mov	r3, r0
 80118f0:	b2db      	uxtb	r3, r3
 80118f2:	f003 0303 	and.w	r3, r3, #3
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d001      	beq.n	80118fe <tcp_rexmit_rto_prepare+0xba>
 80118fa:	2301      	movs	r3, #1
 80118fc:	e000      	b.n	8011900 <tcp_rexmit_rto_prepare+0xbc>
 80118fe:	2300      	movs	r3, #0
 8011900:	442b      	add	r3, r5
 8011902:	18e2      	adds	r2, r4, r3
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2200      	movs	r2, #0
 801190c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801190e:	2300      	movs	r3, #0
}
 8011910:	4618      	mov	r0, r3
 8011912:	3710      	adds	r7, #16
 8011914:	46bd      	mov	sp, r7
 8011916:	bdb0      	pop	{r4, r5, r7, pc}
 8011918:	0801e3d8 	.word	0x0801e3d8
 801191c:	0801ea14 	.word	0x0801ea14
 8011920:	0801e42c 	.word	0x0801e42c

08011924 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d106      	bne.n	8011940 <tcp_rexmit_rto_commit+0x1c>
 8011932:	4b0d      	ldr	r3, [pc, #52]	; (8011968 <tcp_rexmit_rto_commit+0x44>)
 8011934:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011938:	490c      	ldr	r1, [pc, #48]	; (801196c <tcp_rexmit_rto_commit+0x48>)
 801193a:	480d      	ldr	r0, [pc, #52]	; (8011970 <tcp_rexmit_rto_commit+0x4c>)
 801193c:	f003 fdf4 	bl	8015528 <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011946:	2bff      	cmp	r3, #255	; 0xff
 8011948:	d007      	beq.n	801195a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011950:	3301      	adds	r3, #1
 8011952:	b2da      	uxtb	r2, r3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f7ff fc80 	bl	8011260 <tcp_output>
}
 8011960:	bf00      	nop
 8011962:	3708      	adds	r7, #8
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}
 8011968:	0801e3d8 	.word	0x0801e3d8
 801196c:	0801ea38 	.word	0x0801ea38
 8011970:	0801e42c 	.word	0x0801e42c

08011974 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d106      	bne.n	8011990 <tcp_rexmit_rto+0x1c>
 8011982:	4b0a      	ldr	r3, [pc, #40]	; (80119ac <tcp_rexmit_rto+0x38>)
 8011984:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011988:	4909      	ldr	r1, [pc, #36]	; (80119b0 <tcp_rexmit_rto+0x3c>)
 801198a:	480a      	ldr	r0, [pc, #40]	; (80119b4 <tcp_rexmit_rto+0x40>)
 801198c:	f003 fdcc 	bl	8015528 <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7ff ff57 	bl	8011844 <tcp_rexmit_rto_prepare>
 8011996:	4603      	mov	r3, r0
 8011998:	2b00      	cmp	r3, #0
 801199a:	d102      	bne.n	80119a2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7ff ffc1 	bl	8011924 <tcp_rexmit_rto_commit>
  }
}
 80119a2:	bf00      	nop
 80119a4:	3708      	adds	r7, #8
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	0801e3d8 	.word	0x0801e3d8
 80119b0:	0801ea5c 	.word	0x0801ea5c
 80119b4:	0801e42c 	.word	0x0801e42c

080119b8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80119b8:	b590      	push	{r4, r7, lr}
 80119ba:	b085      	sub	sp, #20
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d106      	bne.n	80119d4 <tcp_rexmit+0x1c>
 80119c6:	4b2f      	ldr	r3, [pc, #188]	; (8011a84 <tcp_rexmit+0xcc>)
 80119c8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80119cc:	492e      	ldr	r1, [pc, #184]	; (8011a88 <tcp_rexmit+0xd0>)
 80119ce:	482f      	ldr	r0, [pc, #188]	; (8011a8c <tcp_rexmit+0xd4>)
 80119d0:	f003 fdaa 	bl	8015528 <printf>

  if (pcb->unacked == NULL) {
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d102      	bne.n	80119e2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80119dc:	f06f 0305 	mvn.w	r3, #5
 80119e0:	e04c      	b.n	8011a7c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119e6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80119e8:	68b8      	ldr	r0, [r7, #8]
 80119ea:	f7ff fe2d 	bl	8011648 <tcp_output_segment_busy>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d002      	beq.n	80119fa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80119f4:	f06f 0305 	mvn.w	r3, #5
 80119f8:	e040      	b.n	8011a7c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	681a      	ldr	r2, [r3, #0]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	336c      	adds	r3, #108	; 0x6c
 8011a06:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a08:	e002      	b.n	8011a10 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d011      	beq.n	8011a3c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7f9 fc82 	bl	800b32a <lwip_htonl>
 8011a26:	4604      	mov	r4, r0
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7f9 fc7b 	bl	800b32a <lwip_htonl>
 8011a34:	4603      	mov	r3, r0
 8011a36:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	dbe6      	blt.n	8011a0a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	681a      	ldr	r2, [r3, #0]
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	68ba      	ldr	r2, [r7, #8]
 8011a48:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d103      	bne.n	8011a5a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2200      	movs	r2, #0
 8011a56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a60:	2bff      	cmp	r3, #255	; 0xff
 8011a62:	d007      	beq.n	8011a74 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	b2da      	uxtb	r2, r3
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011a7a:	2300      	movs	r3, #0
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3714      	adds	r7, #20
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd90      	pop	{r4, r7, pc}
 8011a84:	0801e3d8 	.word	0x0801e3d8
 8011a88:	0801ea78 	.word	0x0801ea78
 8011a8c:	0801e42c 	.word	0x0801e42c

08011a90 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d106      	bne.n	8011aac <tcp_rexmit_fast+0x1c>
 8011a9e:	4b2a      	ldr	r3, [pc, #168]	; (8011b48 <tcp_rexmit_fast+0xb8>)
 8011aa0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011aa4:	4929      	ldr	r1, [pc, #164]	; (8011b4c <tcp_rexmit_fast+0xbc>)
 8011aa6:	482a      	ldr	r0, [pc, #168]	; (8011b50 <tcp_rexmit_fast+0xc0>)
 8011aa8:	f003 fd3e 	bl	8015528 <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d045      	beq.n	8011b40 <tcp_rexmit_fast+0xb0>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	8b5b      	ldrh	r3, [r3, #26]
 8011ab8:	f003 0304 	and.w	r3, r3, #4
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d13f      	bne.n	8011b40 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7ff ff79 	bl	80119b8 <tcp_rexmit>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d139      	bne.n	8011b40 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	bf28      	it	cs
 8011adc:	4613      	movcs	r3, r2
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	da00      	bge.n	8011ae6 <tcp_rexmit_fast+0x56>
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	105b      	asrs	r3, r3, #1
 8011ae8:	b29a      	uxth	r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011af6:	461a      	mov	r2, r3
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011afc:	005b      	lsls	r3, r3, #1
 8011afe:	429a      	cmp	r2, r3
 8011b00:	d206      	bcs.n	8011b10 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b06:	005b      	lsls	r3, r3, #1
 8011b08:	b29a      	uxth	r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	0049      	lsls	r1, r1, #1
 8011b1e:	440b      	add	r3, r1
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	4413      	add	r3, r2
 8011b24:	b29a      	uxth	r2, r3
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	8b5b      	ldrh	r3, [r3, #26]
 8011b30:	f043 0304 	orr.w	r3, r3, #4
 8011b34:	b29a      	uxth	r2, r3
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011b40:	bf00      	nop
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	0801e3d8 	.word	0x0801e3d8
 8011b4c:	0801ea90 	.word	0x0801ea90
 8011b50:	0801e42c 	.word	0x0801e42c

08011b54 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b086      	sub	sp, #24
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	607b      	str	r3, [r7, #4]
 8011b5e:	460b      	mov	r3, r1
 8011b60:	817b      	strh	r3, [r7, #10]
 8011b62:	4613      	mov	r3, r2
 8011b64:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011b66:	897a      	ldrh	r2, [r7, #10]
 8011b68:	893b      	ldrh	r3, [r7, #8]
 8011b6a:	4413      	add	r3, r2
 8011b6c:	b29b      	uxth	r3, r3
 8011b6e:	3314      	adds	r3, #20
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b76:	4619      	mov	r1, r3
 8011b78:	2022      	movs	r0, #34	; 0x22
 8011b7a:	f7fa fc11 	bl	800c3a0 <pbuf_alloc>
 8011b7e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d04d      	beq.n	8011c22 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011b86:	897b      	ldrh	r3, [r7, #10]
 8011b88:	3313      	adds	r3, #19
 8011b8a:	697a      	ldr	r2, [r7, #20]
 8011b8c:	8952      	ldrh	r2, [r2, #10]
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	db06      	blt.n	8011ba0 <tcp_output_alloc_header_common+0x4c>
 8011b92:	4b26      	ldr	r3, [pc, #152]	; (8011c2c <tcp_output_alloc_header_common+0xd8>)
 8011b94:	f240 7223 	movw	r2, #1827	; 0x723
 8011b98:	4925      	ldr	r1, [pc, #148]	; (8011c30 <tcp_output_alloc_header_common+0xdc>)
 8011b9a:	4826      	ldr	r0, [pc, #152]	; (8011c34 <tcp_output_alloc_header_common+0xe0>)
 8011b9c:	f003 fcc4 	bl	8015528 <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	685b      	ldr	r3, [r3, #4]
 8011ba4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011ba6:	8c3b      	ldrh	r3, [r7, #32]
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7f9 fba9 	bl	800b300 <lwip_htons>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f7f9 fba1 	bl	800b300 <lwip_htons>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	687a      	ldr	r2, [r7, #4]
 8011bca:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f7f9 fbac 	bl	800b32a <lwip_htonl>
 8011bd2:	4602      	mov	r2, r0
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011bd8:	897b      	ldrh	r3, [r7, #10]
 8011bda:	089b      	lsrs	r3, r3, #2
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	3305      	adds	r3, #5
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	031b      	lsls	r3, r3, #12
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	4313      	orrs	r3, r2
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7f9 fb85 	bl	800b300 <lwip_htons>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011bfe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7f9 fb7d 	bl	800b300 <lwip_htons>
 8011c06:	4603      	mov	r3, r0
 8011c08:	461a      	mov	r2, r3
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	2200      	movs	r2, #0
 8011c12:	741a      	strb	r2, [r3, #16]
 8011c14:	2200      	movs	r2, #0
 8011c16:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	749a      	strb	r2, [r3, #18]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011c22:	697b      	ldr	r3, [r7, #20]
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3718      	adds	r7, #24
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	0801e3d8 	.word	0x0801e3d8
 8011c30:	0801eab0 	.word	0x0801eab0
 8011c34:	0801e42c 	.word	0x0801e42c

08011c38 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011c38:	b5b0      	push	{r4, r5, r7, lr}
 8011c3a:	b08a      	sub	sp, #40	; 0x28
 8011c3c:	af04      	add	r7, sp, #16
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	607b      	str	r3, [r7, #4]
 8011c42:	460b      	mov	r3, r1
 8011c44:	817b      	strh	r3, [r7, #10]
 8011c46:	4613      	mov	r3, r2
 8011c48:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d106      	bne.n	8011c5e <tcp_output_alloc_header+0x26>
 8011c50:	4b15      	ldr	r3, [pc, #84]	; (8011ca8 <tcp_output_alloc_header+0x70>)
 8011c52:	f240 7242 	movw	r2, #1858	; 0x742
 8011c56:	4915      	ldr	r1, [pc, #84]	; (8011cac <tcp_output_alloc_header+0x74>)
 8011c58:	4815      	ldr	r0, [pc, #84]	; (8011cb0 <tcp_output_alloc_header+0x78>)
 8011c5a:	f003 fc65 	bl	8015528 <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	8adb      	ldrh	r3, [r3, #22]
 8011c66:	68fa      	ldr	r2, [r7, #12]
 8011c68:	8b12      	ldrh	r2, [r2, #24]
 8011c6a:	68f9      	ldr	r1, [r7, #12]
 8011c6c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011c6e:	893d      	ldrh	r5, [r7, #8]
 8011c70:	897c      	ldrh	r4, [r7, #10]
 8011c72:	9103      	str	r1, [sp, #12]
 8011c74:	2110      	movs	r1, #16
 8011c76:	9102      	str	r1, [sp, #8]
 8011c78:	9201      	str	r2, [sp, #4]
 8011c7a:	9300      	str	r3, [sp, #0]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	462a      	mov	r2, r5
 8011c80:	4621      	mov	r1, r4
 8011c82:	f7ff ff67 	bl	8011b54 <tcp_output_alloc_header_common>
 8011c86:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d006      	beq.n	8011c9c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c92:	68fa      	ldr	r2, [r7, #12]
 8011c94:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011c96:	441a      	add	r2, r3
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011c9c:	697b      	ldr	r3, [r7, #20]
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3718      	adds	r7, #24
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	0801e3d8 	.word	0x0801e3d8
 8011cac:	0801eae0 	.word	0x0801eae0
 8011cb0:	0801e42c 	.word	0x0801e42c

08011cb4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b088      	sub	sp, #32
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	4611      	mov	r1, r2
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	460b      	mov	r3, r1
 8011cc4:	71fb      	strb	r3, [r7, #7]
 8011cc6:	4613      	mov	r3, r2
 8011cc8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d106      	bne.n	8011ce2 <tcp_output_fill_options+0x2e>
 8011cd4:	4b13      	ldr	r3, [pc, #76]	; (8011d24 <tcp_output_fill_options+0x70>)
 8011cd6:	f240 7256 	movw	r2, #1878	; 0x756
 8011cda:	4913      	ldr	r1, [pc, #76]	; (8011d28 <tcp_output_fill_options+0x74>)
 8011cdc:	4813      	ldr	r0, [pc, #76]	; (8011d2c <tcp_output_fill_options+0x78>)
 8011cde:	f003 fc23 	bl	8015528 <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011ce8:	69bb      	ldr	r3, [r7, #24]
 8011cea:	3314      	adds	r3, #20
 8011cec:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011cee:	69bb      	ldr	r3, [r7, #24]
 8011cf0:	f103 0214 	add.w	r2, r3, #20
 8011cf4:	8bfb      	ldrh	r3, [r7, #30]
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	79fb      	ldrb	r3, [r7, #7]
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	f003 0304 	and.w	r3, r3, #4
 8011d02:	440b      	add	r3, r1
 8011d04:	4413      	add	r3, r2
 8011d06:	697a      	ldr	r2, [r7, #20]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d006      	beq.n	8011d1a <tcp_output_fill_options+0x66>
 8011d0c:	4b05      	ldr	r3, [pc, #20]	; (8011d24 <tcp_output_fill_options+0x70>)
 8011d0e:	f240 7275 	movw	r2, #1909	; 0x775
 8011d12:	4907      	ldr	r1, [pc, #28]	; (8011d30 <tcp_output_fill_options+0x7c>)
 8011d14:	4805      	ldr	r0, [pc, #20]	; (8011d2c <tcp_output_fill_options+0x78>)
 8011d16:	f003 fc07 	bl	8015528 <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011d1a:	bf00      	nop
 8011d1c:	3720      	adds	r7, #32
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	0801e3d8 	.word	0x0801e3d8
 8011d28:	0801eb08 	.word	0x0801eb08
 8011d2c:	0801e42c 	.word	0x0801e42c
 8011d30:	0801ea00 	.word	0x0801ea00

08011d34 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b08a      	sub	sp, #40	; 0x28
 8011d38:	af04      	add	r7, sp, #16
 8011d3a:	60f8      	str	r0, [r7, #12]
 8011d3c:	60b9      	str	r1, [r7, #8]
 8011d3e:	607a      	str	r2, [r7, #4]
 8011d40:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d106      	bne.n	8011d56 <tcp_output_control_segment+0x22>
 8011d48:	4b1c      	ldr	r3, [pc, #112]	; (8011dbc <tcp_output_control_segment+0x88>)
 8011d4a:	f240 7287 	movw	r2, #1927	; 0x787
 8011d4e:	491c      	ldr	r1, [pc, #112]	; (8011dc0 <tcp_output_control_segment+0x8c>)
 8011d50:	481c      	ldr	r0, [pc, #112]	; (8011dc4 <tcp_output_control_segment+0x90>)
 8011d52:	f003 fbe9 	bl	8015528 <printf>

  netif = tcp_route(pcb, src, dst);
 8011d56:	683a      	ldr	r2, [r7, #0]
 8011d58:	6879      	ldr	r1, [r7, #4]
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	f7fe ff40 	bl	8010be0 <tcp_route>
 8011d60:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d102      	bne.n	8011d6e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011d68:	23fc      	movs	r3, #252	; 0xfc
 8011d6a:	75fb      	strb	r3, [r7, #23]
 8011d6c:	e01c      	b.n	8011da8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d006      	beq.n	8011d82 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	7adb      	ldrb	r3, [r3, #11]
 8011d78:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	7a9b      	ldrb	r3, [r3, #10]
 8011d7e:	757b      	strb	r3, [r7, #21]
 8011d80:	e003      	b.n	8011d8a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011d82:	23ff      	movs	r3, #255	; 0xff
 8011d84:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011d86:	2300      	movs	r3, #0
 8011d88:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011d8a:	7dba      	ldrb	r2, [r7, #22]
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	9302      	str	r3, [sp, #8]
 8011d90:	2306      	movs	r3, #6
 8011d92:	9301      	str	r3, [sp, #4]
 8011d94:	7d7b      	ldrb	r3, [r7, #21]
 8011d96:	9300      	str	r3, [sp, #0]
 8011d98:	4613      	mov	r3, r2
 8011d9a:	683a      	ldr	r2, [r7, #0]
 8011d9c:	6879      	ldr	r1, [r7, #4]
 8011d9e:	68b8      	ldr	r0, [r7, #8]
 8011da0:	f001 ffa0 	bl	8013ce4 <ip4_output_if>
 8011da4:	4603      	mov	r3, r0
 8011da6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011da8:	68b8      	ldr	r0, [r7, #8]
 8011daa:	f7fa fddd 	bl	800c968 <pbuf_free>
  return err;
 8011dae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3718      	adds	r7, #24
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	0801e3d8 	.word	0x0801e3d8
 8011dc0:	0801eb30 	.word	0x0801eb30
 8011dc4:	0801e42c 	.word	0x0801e42c

08011dc8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011dc8:	b590      	push	{r4, r7, lr}
 8011dca:	b08b      	sub	sp, #44	; 0x2c
 8011dcc:	af04      	add	r7, sp, #16
 8011dce:	60f8      	str	r0, [r7, #12]
 8011dd0:	60b9      	str	r1, [r7, #8]
 8011dd2:	607a      	str	r2, [r7, #4]
 8011dd4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d106      	bne.n	8011dea <tcp_rst+0x22>
 8011ddc:	4b1f      	ldr	r3, [pc, #124]	; (8011e5c <tcp_rst+0x94>)
 8011dde:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011de2:	491f      	ldr	r1, [pc, #124]	; (8011e60 <tcp_rst+0x98>)
 8011de4:	481f      	ldr	r0, [pc, #124]	; (8011e64 <tcp_rst+0x9c>)
 8011de6:	f003 fb9f 	bl	8015528 <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d106      	bne.n	8011dfe <tcp_rst+0x36>
 8011df0:	4b1a      	ldr	r3, [pc, #104]	; (8011e5c <tcp_rst+0x94>)
 8011df2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011df6:	491c      	ldr	r1, [pc, #112]	; (8011e68 <tcp_rst+0xa0>)
 8011df8:	481a      	ldr	r0, [pc, #104]	; (8011e64 <tcp_rst+0x9c>)
 8011dfa:	f003 fb95 	bl	8015528 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011dfe:	2300      	movs	r3, #0
 8011e00:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011e02:	f246 0308 	movw	r3, #24584	; 0x6008
 8011e06:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011e08:	7dfb      	ldrb	r3, [r7, #23]
 8011e0a:	b29c      	uxth	r4, r3
 8011e0c:	68b8      	ldr	r0, [r7, #8]
 8011e0e:	f7f9 fa8c 	bl	800b32a <lwip_htonl>
 8011e12:	4602      	mov	r2, r0
 8011e14:	8abb      	ldrh	r3, [r7, #20]
 8011e16:	9303      	str	r3, [sp, #12]
 8011e18:	2314      	movs	r3, #20
 8011e1a:	9302      	str	r3, [sp, #8]
 8011e1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011e1e:	9301      	str	r3, [sp, #4]
 8011e20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	4613      	mov	r3, r2
 8011e26:	2200      	movs	r2, #0
 8011e28:	4621      	mov	r1, r4
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7ff fe92 	bl	8011b54 <tcp_output_alloc_header_common>
 8011e30:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d00c      	beq.n	8011e52 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e38:	7dfb      	ldrb	r3, [r7, #23]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	6939      	ldr	r1, [r7, #16]
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	f7ff ff38 	bl	8011cb4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e46:	683a      	ldr	r2, [r7, #0]
 8011e48:	6939      	ldr	r1, [r7, #16]
 8011e4a:	68f8      	ldr	r0, [r7, #12]
 8011e4c:	f7ff ff72 	bl	8011d34 <tcp_output_control_segment>
 8011e50:	e000      	b.n	8011e54 <tcp_rst+0x8c>
    return;
 8011e52:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011e54:	371c      	adds	r7, #28
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd90      	pop	{r4, r7, pc}
 8011e5a:	bf00      	nop
 8011e5c:	0801e3d8 	.word	0x0801e3d8
 8011e60:	0801eb5c 	.word	0x0801eb5c
 8011e64:	0801e42c 	.word	0x0801e42c
 8011e68:	0801eb78 	.word	0x0801eb78

08011e6c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011e6c:	b590      	push	{r4, r7, lr}
 8011e6e:	b087      	sub	sp, #28
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011e74:	2300      	movs	r3, #0
 8011e76:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d106      	bne.n	8011e90 <tcp_send_empty_ack+0x24>
 8011e82:	4b28      	ldr	r3, [pc, #160]	; (8011f24 <tcp_send_empty_ack+0xb8>)
 8011e84:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011e88:	4927      	ldr	r1, [pc, #156]	; (8011f28 <tcp_send_empty_ack+0xbc>)
 8011e8a:	4828      	ldr	r0, [pc, #160]	; (8011f2c <tcp_send_empty_ack+0xc0>)
 8011e8c:	f003 fb4c 	bl	8015528 <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e90:	7dfb      	ldrb	r3, [r7, #23]
 8011e92:	009b      	lsls	r3, r3, #2
 8011e94:	b2db      	uxtb	r3, r3
 8011e96:	f003 0304 	and.w	r3, r3, #4
 8011e9a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011e9c:	7d7b      	ldrb	r3, [r7, #21]
 8011e9e:	b29c      	uxth	r4, r3
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7f9 fa40 	bl	800b32a <lwip_htonl>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2200      	movs	r2, #0
 8011eae:	4621      	mov	r1, r4
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f7ff fec1 	bl	8011c38 <tcp_output_alloc_header>
 8011eb6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d109      	bne.n	8011ed2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	8b5b      	ldrh	r3, [r3, #26]
 8011ec2:	f043 0303 	orr.w	r3, r3, #3
 8011ec6:	b29a      	uxth	r2, r3
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011ecc:	f06f 0301 	mvn.w	r3, #1
 8011ed0:	e023      	b.n	8011f1a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011ed2:	7dbb      	ldrb	r3, [r7, #22]
 8011ed4:	7dfa      	ldrb	r2, [r7, #23]
 8011ed6:	6939      	ldr	r1, [r7, #16]
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f7ff feeb 	bl	8011cb4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	3304      	adds	r3, #4
 8011ee4:	6939      	ldr	r1, [r7, #16]
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f7ff ff24 	bl	8011d34 <tcp_output_control_segment>
 8011eec:	4603      	mov	r3, r0
 8011eee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d007      	beq.n	8011f08 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	8b5b      	ldrh	r3, [r3, #26]
 8011efc:	f043 0303 	orr.w	r3, r3, #3
 8011f00:	b29a      	uxth	r2, r3
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	835a      	strh	r2, [r3, #26]
 8011f06:	e006      	b.n	8011f16 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	8b5b      	ldrh	r3, [r3, #26]
 8011f0c:	f023 0303 	bic.w	r3, r3, #3
 8011f10:	b29a      	uxth	r2, r3
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	371c      	adds	r7, #28
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd90      	pop	{r4, r7, pc}
 8011f22:	bf00      	nop
 8011f24:	0801e3d8 	.word	0x0801e3d8
 8011f28:	0801eb94 	.word	0x0801eb94
 8011f2c:	0801e42c 	.word	0x0801e42c

08011f30 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011f30:	b590      	push	{r4, r7, lr}
 8011f32:	b087      	sub	sp, #28
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f38:	2300      	movs	r3, #0
 8011f3a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d106      	bne.n	8011f50 <tcp_keepalive+0x20>
 8011f42:	4b18      	ldr	r3, [pc, #96]	; (8011fa4 <tcp_keepalive+0x74>)
 8011f44:	f640 0224 	movw	r2, #2084	; 0x824
 8011f48:	4917      	ldr	r1, [pc, #92]	; (8011fa8 <tcp_keepalive+0x78>)
 8011f4a:	4818      	ldr	r0, [pc, #96]	; (8011fac <tcp_keepalive+0x7c>)
 8011f4c:	f003 faec 	bl	8015528 <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011f50:	7dfb      	ldrb	r3, [r7, #23]
 8011f52:	b29c      	uxth	r4, r3
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f58:	3b01      	subs	r3, #1
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7f9 f9e5 	bl	800b32a <lwip_htonl>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2200      	movs	r2, #0
 8011f64:	4621      	mov	r1, r4
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f7ff fe66 	bl	8011c38 <tcp_output_alloc_header>
 8011f6c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d102      	bne.n	8011f7a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011f74:	f04f 33ff 	mov.w	r3, #4294967295
 8011f78:	e010      	b.n	8011f9c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	6939      	ldr	r1, [r7, #16]
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f7ff fe97 	bl	8011cb4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	3304      	adds	r3, #4
 8011f8c:	6939      	ldr	r1, [r7, #16]
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f7ff fed0 	bl	8011d34 <tcp_output_control_segment>
 8011f94:	4603      	mov	r3, r0
 8011f96:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	371c      	adds	r7, #28
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd90      	pop	{r4, r7, pc}
 8011fa4:	0801e3d8 	.word	0x0801e3d8
 8011fa8:	0801ebb4 	.word	0x0801ebb4
 8011fac:	0801e42c 	.word	0x0801e42c

08011fb0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011fb0:	b590      	push	{r4, r7, lr}
 8011fb2:	b08b      	sub	sp, #44	; 0x2c
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011fb8:	2300      	movs	r3, #0
 8011fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d106      	bne.n	8011fd2 <tcp_zero_window_probe+0x22>
 8011fc4:	4b4c      	ldr	r3, [pc, #304]	; (80120f8 <tcp_zero_window_probe+0x148>)
 8011fc6:	f640 024f 	movw	r2, #2127	; 0x84f
 8011fca:	494c      	ldr	r1, [pc, #304]	; (80120fc <tcp_zero_window_probe+0x14c>)
 8011fcc:	484c      	ldr	r0, [pc, #304]	; (8012100 <tcp_zero_window_probe+0x150>)
 8011fce:	f003 faab 	bl	8015528 <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fd6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011fd8:	6a3b      	ldr	r3, [r7, #32]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d101      	bne.n	8011fe2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	e086      	b.n	80120f0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011fe8:	2bff      	cmp	r3, #255	; 0xff
 8011fea:	d007      	beq.n	8011ffc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011ff2:	3301      	adds	r3, #1
 8011ff4:	b2da      	uxtb	r2, r3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011ffc:	6a3b      	ldr	r3, [r7, #32]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	899b      	ldrh	r3, [r3, #12]
 8012002:	b29b      	uxth	r3, r3
 8012004:	4618      	mov	r0, r3
 8012006:	f7f9 f97b 	bl	800b300 <lwip_htons>
 801200a:	4603      	mov	r3, r0
 801200c:	b2db      	uxtb	r3, r3
 801200e:	f003 0301 	and.w	r3, r3, #1
 8012012:	2b00      	cmp	r3, #0
 8012014:	d005      	beq.n	8012022 <tcp_zero_window_probe+0x72>
 8012016:	6a3b      	ldr	r3, [r7, #32]
 8012018:	891b      	ldrh	r3, [r3, #8]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d101      	bne.n	8012022 <tcp_zero_window_probe+0x72>
 801201e:	2301      	movs	r3, #1
 8012020:	e000      	b.n	8012024 <tcp_zero_window_probe+0x74>
 8012022:	2300      	movs	r3, #0
 8012024:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012026:	7ffb      	ldrb	r3, [r7, #31]
 8012028:	2b00      	cmp	r3, #0
 801202a:	bf0c      	ite	eq
 801202c:	2301      	moveq	r3, #1
 801202e:	2300      	movne	r3, #0
 8012030:	b2db      	uxtb	r3, r3
 8012032:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012038:	b299      	uxth	r1, r3
 801203a:	6a3b      	ldr	r3, [r7, #32]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	685b      	ldr	r3, [r3, #4]
 8012040:	8bba      	ldrh	r2, [r7, #28]
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f7ff fdf8 	bl	8011c38 <tcp_output_alloc_header>
 8012048:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d102      	bne.n	8012056 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012050:	f04f 33ff 	mov.w	r3, #4294967295
 8012054:	e04c      	b.n	80120f0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801205c:	7ffb      	ldrb	r3, [r7, #31]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d011      	beq.n	8012086 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	899b      	ldrh	r3, [r3, #12]
 8012066:	b29b      	uxth	r3, r3
 8012068:	b21b      	sxth	r3, r3
 801206a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801206e:	b21c      	sxth	r4, r3
 8012070:	2011      	movs	r0, #17
 8012072:	f7f9 f945 	bl	800b300 <lwip_htons>
 8012076:	4603      	mov	r3, r0
 8012078:	b21b      	sxth	r3, r3
 801207a:	4323      	orrs	r3, r4
 801207c:	b21b      	sxth	r3, r3
 801207e:	b29a      	uxth	r2, r3
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	819a      	strh	r2, [r3, #12]
 8012084:	e010      	b.n	80120a8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012086:	69bb      	ldr	r3, [r7, #24]
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	3314      	adds	r3, #20
 801208c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801208e:	6a3b      	ldr	r3, [r7, #32]
 8012090:	6858      	ldr	r0, [r3, #4]
 8012092:	6a3b      	ldr	r3, [r7, #32]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	891a      	ldrh	r2, [r3, #8]
 8012098:	6a3b      	ldr	r3, [r7, #32]
 801209a:	891b      	ldrh	r3, [r3, #8]
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	b29b      	uxth	r3, r3
 80120a0:	2201      	movs	r2, #1
 80120a2:	6939      	ldr	r1, [r7, #16]
 80120a4:	f7fa fe56 	bl	800cd54 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80120a8:	6a3b      	ldr	r3, [r7, #32]
 80120aa:	68db      	ldr	r3, [r3, #12]
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7f9 f93b 	bl	800b32a <lwip_htonl>
 80120b4:	4603      	mov	r3, r0
 80120b6:	3301      	adds	r3, #1
 80120b8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	1ad3      	subs	r3, r2, r3
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	da02      	bge.n	80120cc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	68fa      	ldr	r2, [r7, #12]
 80120ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80120cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120d0:	2200      	movs	r2, #0
 80120d2:	69b9      	ldr	r1, [r7, #24]
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f7ff fded 	bl	8011cb4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80120da:	687a      	ldr	r2, [r7, #4]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	3304      	adds	r3, #4
 80120e0:	69b9      	ldr	r1, [r7, #24]
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f7ff fe26 	bl	8011d34 <tcp_output_control_segment>
 80120e8:	4603      	mov	r3, r0
 80120ea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80120ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	372c      	adds	r7, #44	; 0x2c
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd90      	pop	{r4, r7, pc}
 80120f8:	0801e3d8 	.word	0x0801e3d8
 80120fc:	0801ebd0 	.word	0x0801ebd0
 8012100:	0801e42c 	.word	0x0801e42c

08012104 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b082      	sub	sp, #8
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801210c:	f7fa ff10 	bl	800cf30 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012110:	4b0a      	ldr	r3, [pc, #40]	; (801213c <tcpip_tcp_timer+0x38>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d103      	bne.n	8012120 <tcpip_tcp_timer+0x1c>
 8012118:	4b09      	ldr	r3, [pc, #36]	; (8012140 <tcpip_tcp_timer+0x3c>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d005      	beq.n	801212c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012120:	2200      	movs	r2, #0
 8012122:	4908      	ldr	r1, [pc, #32]	; (8012144 <tcpip_tcp_timer+0x40>)
 8012124:	20fa      	movs	r0, #250	; 0xfa
 8012126:	f000 f8f3 	bl	8012310 <sys_timeout>
 801212a:	e003      	b.n	8012134 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801212c:	4b06      	ldr	r3, [pc, #24]	; (8012148 <tcpip_tcp_timer+0x44>)
 801212e:	2200      	movs	r2, #0
 8012130:	601a      	str	r2, [r3, #0]
  }
}
 8012132:	bf00      	nop
 8012134:	bf00      	nop
 8012136:	3708      	adds	r7, #8
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}
 801213c:	2000b638 	.word	0x2000b638
 8012140:	2000b648 	.word	0x2000b648
 8012144:	08012105 	.word	0x08012105
 8012148:	20004adc 	.word	0x20004adc

0801214c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012150:	4b0a      	ldr	r3, [pc, #40]	; (801217c <tcp_timer_needed+0x30>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d10f      	bne.n	8012178 <tcp_timer_needed+0x2c>
 8012158:	4b09      	ldr	r3, [pc, #36]	; (8012180 <tcp_timer_needed+0x34>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d103      	bne.n	8012168 <tcp_timer_needed+0x1c>
 8012160:	4b08      	ldr	r3, [pc, #32]	; (8012184 <tcp_timer_needed+0x38>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d007      	beq.n	8012178 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012168:	4b04      	ldr	r3, [pc, #16]	; (801217c <tcp_timer_needed+0x30>)
 801216a:	2201      	movs	r2, #1
 801216c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801216e:	2200      	movs	r2, #0
 8012170:	4905      	ldr	r1, [pc, #20]	; (8012188 <tcp_timer_needed+0x3c>)
 8012172:	20fa      	movs	r0, #250	; 0xfa
 8012174:	f000 f8cc 	bl	8012310 <sys_timeout>
  }
}
 8012178:	bf00      	nop
 801217a:	bd80      	pop	{r7, pc}
 801217c:	20004adc 	.word	0x20004adc
 8012180:	2000b638 	.word	0x2000b638
 8012184:	2000b648 	.word	0x2000b648
 8012188:	08012105 	.word	0x08012105

0801218c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b086      	sub	sp, #24
 8012190:	af00      	add	r7, sp, #0
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012198:	200a      	movs	r0, #10
 801219a:	f7f9 fd67 	bl	800bc6c <memp_malloc>
 801219e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d109      	bne.n	80121ba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d151      	bne.n	8012250 <sys_timeout_abs+0xc4>
 80121ac:	4b2a      	ldr	r3, [pc, #168]	; (8012258 <sys_timeout_abs+0xcc>)
 80121ae:	22be      	movs	r2, #190	; 0xbe
 80121b0:	492a      	ldr	r1, [pc, #168]	; (801225c <sys_timeout_abs+0xd0>)
 80121b2:	482b      	ldr	r0, [pc, #172]	; (8012260 <sys_timeout_abs+0xd4>)
 80121b4:	f003 f9b8 	bl	8015528 <printf>
    return;
 80121b8:	e04a      	b.n	8012250 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	2200      	movs	r2, #0
 80121be:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	68ba      	ldr	r2, [r7, #8]
 80121c4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	68fa      	ldr	r2, [r7, #12]
 80121d0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80121d2:	4b24      	ldr	r3, [pc, #144]	; (8012264 <sys_timeout_abs+0xd8>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d103      	bne.n	80121e2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80121da:	4a22      	ldr	r2, [pc, #136]	; (8012264 <sys_timeout_abs+0xd8>)
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	6013      	str	r3, [r2, #0]
    return;
 80121e0:	e037      	b.n	8012252 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	685a      	ldr	r2, [r3, #4]
 80121e6:	4b1f      	ldr	r3, [pc, #124]	; (8012264 <sys_timeout_abs+0xd8>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	1ad3      	subs	r3, r2, r3
 80121ee:	0fdb      	lsrs	r3, r3, #31
 80121f0:	f003 0301 	and.w	r3, r3, #1
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d007      	beq.n	801220a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80121fa:	4b1a      	ldr	r3, [pc, #104]	; (8012264 <sys_timeout_abs+0xd8>)
 80121fc:	681a      	ldr	r2, [r3, #0]
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012202:	4a18      	ldr	r2, [pc, #96]	; (8012264 <sys_timeout_abs+0xd8>)
 8012204:	693b      	ldr	r3, [r7, #16]
 8012206:	6013      	str	r3, [r2, #0]
 8012208:	e023      	b.n	8012252 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801220a:	4b16      	ldr	r3, [pc, #88]	; (8012264 <sys_timeout_abs+0xd8>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	617b      	str	r3, [r7, #20]
 8012210:	e01a      	b.n	8012248 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d00b      	beq.n	8012232 <sys_timeout_abs+0xa6>
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	685a      	ldr	r2, [r3, #4]
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	0fdb      	lsrs	r3, r3, #31
 8012228:	f003 0301 	and.w	r3, r3, #1
 801222c:	b2db      	uxtb	r3, r3
 801222e:	2b00      	cmp	r3, #0
 8012230:	d007      	beq.n	8012242 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	681a      	ldr	r2, [r3, #0]
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	693a      	ldr	r2, [r7, #16]
 801223e:	601a      	str	r2, [r3, #0]
        break;
 8012240:	e007      	b.n	8012252 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	617b      	str	r3, [r7, #20]
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d1e1      	bne.n	8012212 <sys_timeout_abs+0x86>
 801224e:	e000      	b.n	8012252 <sys_timeout_abs+0xc6>
    return;
 8012250:	bf00      	nop
      }
    }
  }
}
 8012252:	3718      	adds	r7, #24
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}
 8012258:	0801ebf4 	.word	0x0801ebf4
 801225c:	0801ec28 	.word	0x0801ec28
 8012260:	0801ec68 	.word	0x0801ec68
 8012264:	20004ad4 	.word	0x20004ad4

08012268 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b086      	sub	sp, #24
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	685b      	ldr	r3, [r3, #4]
 8012278:	4798      	blx	r3

  now = sys_now();
 801227a:	f7f5 ff37 	bl	80080ec <sys_now>
 801227e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	681a      	ldr	r2, [r3, #0]
 8012284:	4b0f      	ldr	r3, [pc, #60]	; (80122c4 <lwip_cyclic_timer+0x5c>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	4413      	add	r3, r2
 801228a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801228c:	68fa      	ldr	r2, [r7, #12]
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	0fdb      	lsrs	r3, r3, #31
 8012294:	f003 0301 	and.w	r3, r3, #1
 8012298:	b2db      	uxtb	r3, r3
 801229a:	2b00      	cmp	r3, #0
 801229c:	d009      	beq.n	80122b2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	4413      	add	r3, r2
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	4907      	ldr	r1, [pc, #28]	; (80122c8 <lwip_cyclic_timer+0x60>)
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7ff ff6e 	bl	801218c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80122b0:	e004      	b.n	80122bc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80122b2:	687a      	ldr	r2, [r7, #4]
 80122b4:	4904      	ldr	r1, [pc, #16]	; (80122c8 <lwip_cyclic_timer+0x60>)
 80122b6:	68f8      	ldr	r0, [r7, #12]
 80122b8:	f7ff ff68 	bl	801218c <sys_timeout_abs>
}
 80122bc:	bf00      	nop
 80122be:	3718      	adds	r7, #24
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}
 80122c4:	20004ad8 	.word	0x20004ad8
 80122c8:	08012269 	.word	0x08012269

080122cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122d2:	2301      	movs	r3, #1
 80122d4:	607b      	str	r3, [r7, #4]
 80122d6:	e00e      	b.n	80122f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80122d8:	4a0b      	ldr	r2, [pc, #44]	; (8012308 <sys_timeouts_init+0x3c>)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	00db      	lsls	r3, r3, #3
 80122e4:	4a08      	ldr	r2, [pc, #32]	; (8012308 <sys_timeouts_init+0x3c>)
 80122e6:	4413      	add	r3, r2
 80122e8:	461a      	mov	r2, r3
 80122ea:	4908      	ldr	r1, [pc, #32]	; (801230c <sys_timeouts_init+0x40>)
 80122ec:	f000 f810 	bl	8012310 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	3301      	adds	r3, #1
 80122f4:	607b      	str	r3, [r7, #4]
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2b02      	cmp	r3, #2
 80122fa:	d9ed      	bls.n	80122d8 <sys_timeouts_init+0xc>
  }
}
 80122fc:	bf00      	nop
 80122fe:	bf00      	nop
 8012300:	3708      	adds	r7, #8
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	0801f814 	.word	0x0801f814
 801230c:	08012269 	.word	0x08012269

08012310 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b086      	sub	sp, #24
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012322:	d306      	bcc.n	8012332 <sys_timeout+0x22>
 8012324:	4b0a      	ldr	r3, [pc, #40]	; (8012350 <sys_timeout+0x40>)
 8012326:	f240 1229 	movw	r2, #297	; 0x129
 801232a:	490a      	ldr	r1, [pc, #40]	; (8012354 <sys_timeout+0x44>)
 801232c:	480a      	ldr	r0, [pc, #40]	; (8012358 <sys_timeout+0x48>)
 801232e:	f003 f8fb 	bl	8015528 <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012332:	f7f5 fedb 	bl	80080ec <sys_now>
 8012336:	4602      	mov	r2, r0
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	4413      	add	r3, r2
 801233c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801233e:	687a      	ldr	r2, [r7, #4]
 8012340:	68b9      	ldr	r1, [r7, #8]
 8012342:	6978      	ldr	r0, [r7, #20]
 8012344:	f7ff ff22 	bl	801218c <sys_timeout_abs>
#endif
}
 8012348:	bf00      	nop
 801234a:	3718      	adds	r7, #24
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}
 8012350:	0801ebf4 	.word	0x0801ebf4
 8012354:	0801ec90 	.word	0x0801ec90
 8012358:	0801ec68 	.word	0x0801ec68

0801235c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012362:	f7f5 fec3 	bl	80080ec <sys_now>
 8012366:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012368:	4b17      	ldr	r3, [pc, #92]	; (80123c8 <sys_check_timeouts+0x6c>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d022      	beq.n	80123ba <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	685b      	ldr	r3, [r3, #4]
 8012378:	68fa      	ldr	r2, [r7, #12]
 801237a:	1ad3      	subs	r3, r2, r3
 801237c:	0fdb      	lsrs	r3, r3, #31
 801237e:	f003 0301 	and.w	r3, r3, #1
 8012382:	b2db      	uxtb	r3, r3
 8012384:	2b00      	cmp	r3, #0
 8012386:	d11a      	bne.n	80123be <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	4a0e      	ldr	r2, [pc, #56]	; (80123c8 <sys_check_timeouts+0x6c>)
 801238e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	689b      	ldr	r3, [r3, #8]
 8012394:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	68db      	ldr	r3, [r3, #12]
 801239a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	4a0a      	ldr	r2, [pc, #40]	; (80123cc <sys_check_timeouts+0x70>)
 80123a2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80123a4:	68b9      	ldr	r1, [r7, #8]
 80123a6:	200a      	movs	r0, #10
 80123a8:	f7f9 fcb2 	bl	800bd10 <memp_free>
    if (handler != NULL) {
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d0da      	beq.n	8012368 <sys_check_timeouts+0xc>
      handler(arg);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6838      	ldr	r0, [r7, #0]
 80123b6:	4798      	blx	r3
  do {
 80123b8:	e7d6      	b.n	8012368 <sys_check_timeouts+0xc>
      return;
 80123ba:	bf00      	nop
 80123bc:	e000      	b.n	80123c0 <sys_check_timeouts+0x64>
      return;
 80123be:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80123c0:	3710      	adds	r7, #16
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	20004ad4 	.word	0x20004ad4
 80123cc:	20004ad8 	.word	0x20004ad8

080123d0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80123d6:	4b16      	ldr	r3, [pc, #88]	; (8012430 <sys_timeouts_sleeptime+0x60>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d102      	bne.n	80123e4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80123de:	f04f 33ff 	mov.w	r3, #4294967295
 80123e2:	e020      	b.n	8012426 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80123e4:	f7f5 fe82 	bl	80080ec <sys_now>
 80123e8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80123ea:	4b11      	ldr	r3, [pc, #68]	; (8012430 <sys_timeouts_sleeptime+0x60>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	685a      	ldr	r2, [r3, #4]
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	1ad3      	subs	r3, r2, r3
 80123f4:	0fdb      	lsrs	r3, r3, #31
 80123f6:	f003 0301 	and.w	r3, r3, #1
 80123fa:	b2db      	uxtb	r3, r3
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d001      	beq.n	8012404 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012400:	2300      	movs	r3, #0
 8012402:	e010      	b.n	8012426 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012404:	4b0a      	ldr	r3, [pc, #40]	; (8012430 <sys_timeouts_sleeptime+0x60>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	685a      	ldr	r2, [r3, #4]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	2b00      	cmp	r3, #0
 8012414:	da06      	bge.n	8012424 <sys_timeouts_sleeptime+0x54>
 8012416:	4b07      	ldr	r3, [pc, #28]	; (8012434 <sys_timeouts_sleeptime+0x64>)
 8012418:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801241c:	4906      	ldr	r1, [pc, #24]	; (8012438 <sys_timeouts_sleeptime+0x68>)
 801241e:	4807      	ldr	r0, [pc, #28]	; (801243c <sys_timeouts_sleeptime+0x6c>)
 8012420:	f003 f882 	bl	8015528 <printf>
    return ret;
 8012424:	683b      	ldr	r3, [r7, #0]
  }
}
 8012426:	4618      	mov	r0, r3
 8012428:	3708      	adds	r7, #8
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop
 8012430:	20004ad4 	.word	0x20004ad4
 8012434:	0801ebf4 	.word	0x0801ebf4
 8012438:	0801ecc8 	.word	0x0801ecc8
 801243c:	0801ec68 	.word	0x0801ec68

08012440 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012444:	f003 f882 	bl	801554c <rand>
 8012448:	4603      	mov	r3, r0
 801244a:	b29b      	uxth	r3, r3
 801244c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012450:	b29b      	uxth	r3, r3
 8012452:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012456:	b29a      	uxth	r2, r3
 8012458:	4b01      	ldr	r3, [pc, #4]	; (8012460 <udp_init+0x20>)
 801245a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801245c:	bf00      	nop
 801245e:	bd80      	pop	{r7, pc}
 8012460:	20000028 	.word	0x20000028

08012464 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b084      	sub	sp, #16
 8012468:	af00      	add	r7, sp, #0
 801246a:	60f8      	str	r0, [r7, #12]
 801246c:	60b9      	str	r1, [r7, #8]
 801246e:	4613      	mov	r3, r2
 8012470:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d105      	bne.n	8012484 <udp_input_local_match+0x20>
 8012478:	4b27      	ldr	r3, [pc, #156]	; (8012518 <udp_input_local_match+0xb4>)
 801247a:	2287      	movs	r2, #135	; 0x87
 801247c:	4927      	ldr	r1, [pc, #156]	; (801251c <udp_input_local_match+0xb8>)
 801247e:	4828      	ldr	r0, [pc, #160]	; (8012520 <udp_input_local_match+0xbc>)
 8012480:	f003 f852 	bl	8015528 <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d105      	bne.n	8012496 <udp_input_local_match+0x32>
 801248a:	4b23      	ldr	r3, [pc, #140]	; (8012518 <udp_input_local_match+0xb4>)
 801248c:	2288      	movs	r2, #136	; 0x88
 801248e:	4925      	ldr	r1, [pc, #148]	; (8012524 <udp_input_local_match+0xc0>)
 8012490:	4823      	ldr	r0, [pc, #140]	; (8012520 <udp_input_local_match+0xbc>)
 8012492:	f003 f849 	bl	8015528 <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	7a1b      	ldrb	r3, [r3, #8]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d00b      	beq.n	80124b6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	7a1a      	ldrb	r2, [r3, #8]
 80124a2:	4b21      	ldr	r3, [pc, #132]	; (8012528 <udp_input_local_match+0xc4>)
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80124aa:	3301      	adds	r3, #1
 80124ac:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d001      	beq.n	80124b6 <udp_input_local_match+0x52>
    return 0;
 80124b2:	2300      	movs	r3, #0
 80124b4:	e02b      	b.n	801250e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80124b6:	79fb      	ldrb	r3, [r7, #7]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d018      	beq.n	80124ee <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d013      	beq.n	80124ea <udp_input_local_match+0x86>
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d00f      	beq.n	80124ea <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80124ca:	4b17      	ldr	r3, [pc, #92]	; (8012528 <udp_input_local_match+0xc4>)
 80124cc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124d2:	d00a      	beq.n	80124ea <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	681a      	ldr	r2, [r3, #0]
 80124d8:	4b13      	ldr	r3, [pc, #76]	; (8012528 <udp_input_local_match+0xc4>)
 80124da:	695b      	ldr	r3, [r3, #20]
 80124dc:	405a      	eors	r2, r3
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	3308      	adds	r3, #8
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d110      	bne.n	801250c <udp_input_local_match+0xa8>
          return 1;
 80124ea:	2301      	movs	r3, #1
 80124ec:	e00f      	b.n	801250e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d009      	beq.n	8012508 <udp_input_local_match+0xa4>
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d005      	beq.n	8012508 <udp_input_local_match+0xa4>
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	681a      	ldr	r2, [r3, #0]
 8012500:	4b09      	ldr	r3, [pc, #36]	; (8012528 <udp_input_local_match+0xc4>)
 8012502:	695b      	ldr	r3, [r3, #20]
 8012504:	429a      	cmp	r2, r3
 8012506:	d101      	bne.n	801250c <udp_input_local_match+0xa8>
        return 1;
 8012508:	2301      	movs	r3, #1
 801250a:	e000      	b.n	801250e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801250c:	2300      	movs	r3, #0
}
 801250e:	4618      	mov	r0, r3
 8012510:	3710      	adds	r7, #16
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	0801ecdc 	.word	0x0801ecdc
 801251c:	0801ed0c 	.word	0x0801ed0c
 8012520:	0801ed30 	.word	0x0801ed30
 8012524:	0801ed58 	.word	0x0801ed58
 8012528:	20007f24 	.word	0x20007f24

0801252c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801252c:	b590      	push	{r4, r7, lr}
 801252e:	b08d      	sub	sp, #52	; 0x34
 8012530:	af02      	add	r7, sp, #8
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012536:	2300      	movs	r3, #0
 8012538:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d105      	bne.n	801254c <udp_input+0x20>
 8012540:	4b7c      	ldr	r3, [pc, #496]	; (8012734 <udp_input+0x208>)
 8012542:	22cf      	movs	r2, #207	; 0xcf
 8012544:	497c      	ldr	r1, [pc, #496]	; (8012738 <udp_input+0x20c>)
 8012546:	487d      	ldr	r0, [pc, #500]	; (801273c <udp_input+0x210>)
 8012548:	f002 ffee 	bl	8015528 <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d105      	bne.n	801255e <udp_input+0x32>
 8012552:	4b78      	ldr	r3, [pc, #480]	; (8012734 <udp_input+0x208>)
 8012554:	22d0      	movs	r2, #208	; 0xd0
 8012556:	497a      	ldr	r1, [pc, #488]	; (8012740 <udp_input+0x214>)
 8012558:	4878      	ldr	r0, [pc, #480]	; (801273c <udp_input+0x210>)
 801255a:	f002 ffe5 	bl	8015528 <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	895b      	ldrh	r3, [r3, #10]
 8012562:	2b07      	cmp	r3, #7
 8012564:	d803      	bhi.n	801256e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f7fa f9fe 	bl	800c968 <pbuf_free>
    goto end;
 801256c:	e0de      	b.n	801272c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012574:	4b73      	ldr	r3, [pc, #460]	; (8012744 <udp_input+0x218>)
 8012576:	695b      	ldr	r3, [r3, #20]
 8012578:	4a72      	ldr	r2, [pc, #456]	; (8012744 <udp_input+0x218>)
 801257a:	6812      	ldr	r2, [r2, #0]
 801257c:	4611      	mov	r1, r2
 801257e:	4618      	mov	r0, r3
 8012580:	f001 fc88 	bl	8013e94 <ip4_addr_isbroadcast_u32>
 8012584:	4603      	mov	r3, r0
 8012586:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	881b      	ldrh	r3, [r3, #0]
 801258c:	b29b      	uxth	r3, r3
 801258e:	4618      	mov	r0, r3
 8012590:	f7f8 feb6 	bl	800b300 <lwip_htons>
 8012594:	4603      	mov	r3, r0
 8012596:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	885b      	ldrh	r3, [r3, #2]
 801259c:	b29b      	uxth	r3, r3
 801259e:	4618      	mov	r0, r3
 80125a0:	f7f8 feae 	bl	800b300 <lwip_htons>
 80125a4:	4603      	mov	r3, r0
 80125a6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80125a8:	2300      	movs	r3, #0
 80125aa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80125ac:	2300      	movs	r3, #0
 80125ae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80125b0:	2300      	movs	r3, #0
 80125b2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80125b4:	4b64      	ldr	r3, [pc, #400]	; (8012748 <udp_input+0x21c>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	627b      	str	r3, [r7, #36]	; 0x24
 80125ba:	e054      	b.n	8012666 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80125bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125be:	8a5b      	ldrh	r3, [r3, #18]
 80125c0:	89fa      	ldrh	r2, [r7, #14]
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d14a      	bne.n	801265c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80125c6:	7cfb      	ldrb	r3, [r7, #19]
 80125c8:	461a      	mov	r2, r3
 80125ca:	6839      	ldr	r1, [r7, #0]
 80125cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125ce:	f7ff ff49 	bl	8012464 <udp_input_local_match>
 80125d2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d041      	beq.n	801265c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80125d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125da:	7c1b      	ldrb	r3, [r3, #16]
 80125dc:	f003 0304 	and.w	r3, r3, #4
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d11d      	bne.n	8012620 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d102      	bne.n	80125f0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80125ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ec:	61fb      	str	r3, [r7, #28]
 80125ee:	e017      	b.n	8012620 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80125f0:	7cfb      	ldrb	r3, [r7, #19]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d014      	beq.n	8012620 <udp_input+0xf4>
 80125f6:	4b53      	ldr	r3, [pc, #332]	; (8012744 <udp_input+0x218>)
 80125f8:	695b      	ldr	r3, [r3, #20]
 80125fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125fe:	d10f      	bne.n	8012620 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012600:	69fb      	ldr	r3, [r7, #28]
 8012602:	681a      	ldr	r2, [r3, #0]
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	3304      	adds	r3, #4
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	429a      	cmp	r2, r3
 801260c:	d008      	beq.n	8012620 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012610:	681a      	ldr	r2, [r3, #0]
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	3304      	adds	r3, #4
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	429a      	cmp	r2, r3
 801261a:	d101      	bne.n	8012620 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801261e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012622:	8a9b      	ldrh	r3, [r3, #20]
 8012624:	8a3a      	ldrh	r2, [r7, #16]
 8012626:	429a      	cmp	r2, r3
 8012628:	d118      	bne.n	801265c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801262e:	2b00      	cmp	r3, #0
 8012630:	d005      	beq.n	801263e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012634:	685a      	ldr	r2, [r3, #4]
 8012636:	4b43      	ldr	r3, [pc, #268]	; (8012744 <udp_input+0x218>)
 8012638:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801263a:	429a      	cmp	r2, r3
 801263c:	d10e      	bne.n	801265c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801263e:	6a3b      	ldr	r3, [r7, #32]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d014      	beq.n	801266e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012646:	68da      	ldr	r2, [r3, #12]
 8012648:	6a3b      	ldr	r3, [r7, #32]
 801264a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801264c:	4b3e      	ldr	r3, [pc, #248]	; (8012748 <udp_input+0x21c>)
 801264e:	681a      	ldr	r2, [r3, #0]
 8012650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012652:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012654:	4a3c      	ldr	r2, [pc, #240]	; (8012748 <udp_input+0x21c>)
 8012656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012658:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801265a:	e008      	b.n	801266e <udp_input+0x142>
      }
    }

    prev = pcb;
 801265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012662:	68db      	ldr	r3, [r3, #12]
 8012664:	627b      	str	r3, [r7, #36]	; 0x24
 8012666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012668:	2b00      	cmp	r3, #0
 801266a:	d1a7      	bne.n	80125bc <udp_input+0x90>
 801266c:	e000      	b.n	8012670 <udp_input+0x144>
        break;
 801266e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012672:	2b00      	cmp	r3, #0
 8012674:	d101      	bne.n	801267a <udp_input+0x14e>
    pcb = uncon_pcb;
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <udp_input+0x15a>
    for_us = 1;
 8012680:	2301      	movs	r3, #1
 8012682:	76fb      	strb	r3, [r7, #27]
 8012684:	e00a      	b.n	801269c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	3304      	adds	r3, #4
 801268a:	681a      	ldr	r2, [r3, #0]
 801268c:	4b2d      	ldr	r3, [pc, #180]	; (8012744 <udp_input+0x218>)
 801268e:	695b      	ldr	r3, [r3, #20]
 8012690:	429a      	cmp	r2, r3
 8012692:	bf0c      	ite	eq
 8012694:	2301      	moveq	r3, #1
 8012696:	2300      	movne	r3, #0
 8012698:	b2db      	uxtb	r3, r3
 801269a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801269c:	7efb      	ldrb	r3, [r7, #27]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d041      	beq.n	8012726 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80126a2:	2108      	movs	r1, #8
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f7fa f8d9 	bl	800c85c <pbuf_remove_header>
 80126aa:	4603      	mov	r3, r0
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d00a      	beq.n	80126c6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80126b0:	4b20      	ldr	r3, [pc, #128]	; (8012734 <udp_input+0x208>)
 80126b2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80126b6:	4925      	ldr	r1, [pc, #148]	; (801274c <udp_input+0x220>)
 80126b8:	4820      	ldr	r0, [pc, #128]	; (801273c <udp_input+0x210>)
 80126ba:	f002 ff35 	bl	8015528 <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f7fa f952 	bl	800c968 <pbuf_free>
      goto end;
 80126c4:	e032      	b.n	801272c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80126c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d012      	beq.n	80126f2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80126cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ce:	699b      	ldr	r3, [r3, #24]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d00a      	beq.n	80126ea <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80126d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d6:	699c      	ldr	r4, [r3, #24]
 80126d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126da:	69d8      	ldr	r0, [r3, #28]
 80126dc:	8a3b      	ldrh	r3, [r7, #16]
 80126de:	9300      	str	r3, [sp, #0]
 80126e0:	4b1b      	ldr	r3, [pc, #108]	; (8012750 <udp_input+0x224>)
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80126e8:	e021      	b.n	801272e <udp_input+0x202>
        pbuf_free(p);
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f7fa f93c 	bl	800c968 <pbuf_free>
        goto end;
 80126f0:	e01c      	b.n	801272c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80126f2:	7cfb      	ldrb	r3, [r7, #19]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d112      	bne.n	801271e <udp_input+0x1f2>
 80126f8:	4b12      	ldr	r3, [pc, #72]	; (8012744 <udp_input+0x218>)
 80126fa:	695b      	ldr	r3, [r3, #20]
 80126fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012700:	2be0      	cmp	r3, #224	; 0xe0
 8012702:	d00c      	beq.n	801271e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012704:	4b0f      	ldr	r3, [pc, #60]	; (8012744 <udp_input+0x218>)
 8012706:	899b      	ldrh	r3, [r3, #12]
 8012708:	3308      	adds	r3, #8
 801270a:	b29b      	uxth	r3, r3
 801270c:	b21b      	sxth	r3, r3
 801270e:	4619      	mov	r1, r3
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f7fa f916 	bl	800c942 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012716:	2103      	movs	r1, #3
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f001 f89b 	bl	8013854 <icmp_dest_unreach>
      pbuf_free(p);
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f7fa f922 	bl	800c968 <pbuf_free>
  return;
 8012724:	e003      	b.n	801272e <udp_input+0x202>
    pbuf_free(p);
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f7fa f91e 	bl	800c968 <pbuf_free>
  return;
 801272c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801272e:	372c      	adds	r7, #44	; 0x2c
 8012730:	46bd      	mov	sp, r7
 8012732:	bd90      	pop	{r4, r7, pc}
 8012734:	0801ecdc 	.word	0x0801ecdc
 8012738:	0801ed80 	.word	0x0801ed80
 801273c:	0801ed30 	.word	0x0801ed30
 8012740:	0801ed98 	.word	0x0801ed98
 8012744:	20007f24 	.word	0x20007f24
 8012748:	2000b650 	.word	0x2000b650
 801274c:	0801edb4 	.word	0x0801edb4
 8012750:	20007f34 	.word	0x20007f34

08012754 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012754:	b480      	push	{r7}
 8012756:	b085      	sub	sp, #20
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d01e      	beq.n	80127a2 <udp_netif_ip_addr_changed+0x4e>
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d01a      	beq.n	80127a2 <udp_netif_ip_addr_changed+0x4e>
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d017      	beq.n	80127a2 <udp_netif_ip_addr_changed+0x4e>
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d013      	beq.n	80127a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801277a:	4b0d      	ldr	r3, [pc, #52]	; (80127b0 <udp_netif_ip_addr_changed+0x5c>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	60fb      	str	r3, [r7, #12]
 8012780:	e00c      	b.n	801279c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	681a      	ldr	r2, [r3, #0]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	429a      	cmp	r2, r3
 801278c:	d103      	bne.n	8012796 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	60fb      	str	r3, [r7, #12]
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d1ef      	bne.n	8012782 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80127a2:	bf00      	nop
 80127a4:	3714      	adds	r7, #20
 80127a6:	46bd      	mov	sp, r7
 80127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	2000b650 	.word	0x2000b650

080127b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80127bc:	4915      	ldr	r1, [pc, #84]	; (8012814 <etharp_free_entry+0x60>)
 80127be:	687a      	ldr	r2, [r7, #4]
 80127c0:	4613      	mov	r3, r2
 80127c2:	005b      	lsls	r3, r3, #1
 80127c4:	4413      	add	r3, r2
 80127c6:	00db      	lsls	r3, r3, #3
 80127c8:	440b      	add	r3, r1
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d013      	beq.n	80127f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80127d0:	4910      	ldr	r1, [pc, #64]	; (8012814 <etharp_free_entry+0x60>)
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	4613      	mov	r3, r2
 80127d6:	005b      	lsls	r3, r3, #1
 80127d8:	4413      	add	r3, r2
 80127da:	00db      	lsls	r3, r3, #3
 80127dc:	440b      	add	r3, r1
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7fa f8c1 	bl	800c968 <pbuf_free>
    arp_table[i].q = NULL;
 80127e6:	490b      	ldr	r1, [pc, #44]	; (8012814 <etharp_free_entry+0x60>)
 80127e8:	687a      	ldr	r2, [r7, #4]
 80127ea:	4613      	mov	r3, r2
 80127ec:	005b      	lsls	r3, r3, #1
 80127ee:	4413      	add	r3, r2
 80127f0:	00db      	lsls	r3, r3, #3
 80127f2:	440b      	add	r3, r1
 80127f4:	2200      	movs	r2, #0
 80127f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80127f8:	4906      	ldr	r1, [pc, #24]	; (8012814 <etharp_free_entry+0x60>)
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	4613      	mov	r3, r2
 80127fe:	005b      	lsls	r3, r3, #1
 8012800:	4413      	add	r3, r2
 8012802:	00db      	lsls	r3, r3, #3
 8012804:	440b      	add	r3, r1
 8012806:	3314      	adds	r3, #20
 8012808:	2200      	movs	r2, #0
 801280a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801280c:	bf00      	nop
 801280e:	3708      	adds	r7, #8
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}
 8012814:	20004ae0 	.word	0x20004ae0

08012818 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801281e:	2300      	movs	r3, #0
 8012820:	607b      	str	r3, [r7, #4]
 8012822:	e096      	b.n	8012952 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012824:	494f      	ldr	r1, [pc, #316]	; (8012964 <etharp_tmr+0x14c>)
 8012826:	687a      	ldr	r2, [r7, #4]
 8012828:	4613      	mov	r3, r2
 801282a:	005b      	lsls	r3, r3, #1
 801282c:	4413      	add	r3, r2
 801282e:	00db      	lsls	r3, r3, #3
 8012830:	440b      	add	r3, r1
 8012832:	3314      	adds	r3, #20
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012838:	78fb      	ldrb	r3, [r7, #3]
 801283a:	2b00      	cmp	r3, #0
 801283c:	f000 8086 	beq.w	801294c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012840:	4948      	ldr	r1, [pc, #288]	; (8012964 <etharp_tmr+0x14c>)
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	4613      	mov	r3, r2
 8012846:	005b      	lsls	r3, r3, #1
 8012848:	4413      	add	r3, r2
 801284a:	00db      	lsls	r3, r3, #3
 801284c:	440b      	add	r3, r1
 801284e:	3312      	adds	r3, #18
 8012850:	881b      	ldrh	r3, [r3, #0]
 8012852:	3301      	adds	r3, #1
 8012854:	b298      	uxth	r0, r3
 8012856:	4943      	ldr	r1, [pc, #268]	; (8012964 <etharp_tmr+0x14c>)
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	4613      	mov	r3, r2
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	4413      	add	r3, r2
 8012860:	00db      	lsls	r3, r3, #3
 8012862:	440b      	add	r3, r1
 8012864:	3312      	adds	r3, #18
 8012866:	4602      	mov	r2, r0
 8012868:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801286a:	493e      	ldr	r1, [pc, #248]	; (8012964 <etharp_tmr+0x14c>)
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	4613      	mov	r3, r2
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	4413      	add	r3, r2
 8012874:	00db      	lsls	r3, r3, #3
 8012876:	440b      	add	r3, r1
 8012878:	3312      	adds	r3, #18
 801287a:	881b      	ldrh	r3, [r3, #0]
 801287c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012880:	d215      	bcs.n	80128ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012882:	4938      	ldr	r1, [pc, #224]	; (8012964 <etharp_tmr+0x14c>)
 8012884:	687a      	ldr	r2, [r7, #4]
 8012886:	4613      	mov	r3, r2
 8012888:	005b      	lsls	r3, r3, #1
 801288a:	4413      	add	r3, r2
 801288c:	00db      	lsls	r3, r3, #3
 801288e:	440b      	add	r3, r1
 8012890:	3314      	adds	r3, #20
 8012892:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012894:	2b01      	cmp	r3, #1
 8012896:	d10e      	bne.n	80128b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012898:	4932      	ldr	r1, [pc, #200]	; (8012964 <etharp_tmr+0x14c>)
 801289a:	687a      	ldr	r2, [r7, #4]
 801289c:	4613      	mov	r3, r2
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	4413      	add	r3, r2
 80128a2:	00db      	lsls	r3, r3, #3
 80128a4:	440b      	add	r3, r1
 80128a6:	3312      	adds	r3, #18
 80128a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80128aa:	2b04      	cmp	r3, #4
 80128ac:	d903      	bls.n	80128b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f7ff ff80 	bl	80127b4 <etharp_free_entry>
 80128b4:	e04a      	b.n	801294c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80128b6:	492b      	ldr	r1, [pc, #172]	; (8012964 <etharp_tmr+0x14c>)
 80128b8:	687a      	ldr	r2, [r7, #4]
 80128ba:	4613      	mov	r3, r2
 80128bc:	005b      	lsls	r3, r3, #1
 80128be:	4413      	add	r3, r2
 80128c0:	00db      	lsls	r3, r3, #3
 80128c2:	440b      	add	r3, r1
 80128c4:	3314      	adds	r3, #20
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	2b03      	cmp	r3, #3
 80128ca:	d10a      	bne.n	80128e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80128cc:	4925      	ldr	r1, [pc, #148]	; (8012964 <etharp_tmr+0x14c>)
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	4613      	mov	r3, r2
 80128d2:	005b      	lsls	r3, r3, #1
 80128d4:	4413      	add	r3, r2
 80128d6:	00db      	lsls	r3, r3, #3
 80128d8:	440b      	add	r3, r1
 80128da:	3314      	adds	r3, #20
 80128dc:	2204      	movs	r2, #4
 80128de:	701a      	strb	r2, [r3, #0]
 80128e0:	e034      	b.n	801294c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80128e2:	4920      	ldr	r1, [pc, #128]	; (8012964 <etharp_tmr+0x14c>)
 80128e4:	687a      	ldr	r2, [r7, #4]
 80128e6:	4613      	mov	r3, r2
 80128e8:	005b      	lsls	r3, r3, #1
 80128ea:	4413      	add	r3, r2
 80128ec:	00db      	lsls	r3, r3, #3
 80128ee:	440b      	add	r3, r1
 80128f0:	3314      	adds	r3, #20
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	2b04      	cmp	r3, #4
 80128f6:	d10a      	bne.n	801290e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80128f8:	491a      	ldr	r1, [pc, #104]	; (8012964 <etharp_tmr+0x14c>)
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	4613      	mov	r3, r2
 80128fe:	005b      	lsls	r3, r3, #1
 8012900:	4413      	add	r3, r2
 8012902:	00db      	lsls	r3, r3, #3
 8012904:	440b      	add	r3, r1
 8012906:	3314      	adds	r3, #20
 8012908:	2202      	movs	r2, #2
 801290a:	701a      	strb	r2, [r3, #0]
 801290c:	e01e      	b.n	801294c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801290e:	4915      	ldr	r1, [pc, #84]	; (8012964 <etharp_tmr+0x14c>)
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	4613      	mov	r3, r2
 8012914:	005b      	lsls	r3, r3, #1
 8012916:	4413      	add	r3, r2
 8012918:	00db      	lsls	r3, r3, #3
 801291a:	440b      	add	r3, r1
 801291c:	3314      	adds	r3, #20
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	2b01      	cmp	r3, #1
 8012922:	d113      	bne.n	801294c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012924:	490f      	ldr	r1, [pc, #60]	; (8012964 <etharp_tmr+0x14c>)
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	4613      	mov	r3, r2
 801292a:	005b      	lsls	r3, r3, #1
 801292c:	4413      	add	r3, r2
 801292e:	00db      	lsls	r3, r3, #3
 8012930:	440b      	add	r3, r1
 8012932:	3308      	adds	r3, #8
 8012934:	6818      	ldr	r0, [r3, #0]
 8012936:	687a      	ldr	r2, [r7, #4]
 8012938:	4613      	mov	r3, r2
 801293a:	005b      	lsls	r3, r3, #1
 801293c:	4413      	add	r3, r2
 801293e:	00db      	lsls	r3, r3, #3
 8012940:	4a08      	ldr	r2, [pc, #32]	; (8012964 <etharp_tmr+0x14c>)
 8012942:	4413      	add	r3, r2
 8012944:	3304      	adds	r3, #4
 8012946:	4619      	mov	r1, r3
 8012948:	f000 fe6e 	bl	8013628 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	3301      	adds	r3, #1
 8012950:	607b      	str	r3, [r7, #4]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2b09      	cmp	r3, #9
 8012956:	f77f af65 	ble.w	8012824 <etharp_tmr+0xc>
      }
    }
  }
}
 801295a:	bf00      	nop
 801295c:	bf00      	nop
 801295e:	3708      	adds	r7, #8
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}
 8012964:	20004ae0 	.word	0x20004ae0

08012968 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b08a      	sub	sp, #40	; 0x28
 801296c:	af00      	add	r7, sp, #0
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	460b      	mov	r3, r1
 8012972:	607a      	str	r2, [r7, #4]
 8012974:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012976:	230a      	movs	r3, #10
 8012978:	84fb      	strh	r3, [r7, #38]	; 0x26
 801297a:	230a      	movs	r3, #10
 801297c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801297e:	230a      	movs	r3, #10
 8012980:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012982:	2300      	movs	r3, #0
 8012984:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012986:	230a      	movs	r3, #10
 8012988:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801298a:	2300      	movs	r3, #0
 801298c:	83bb      	strh	r3, [r7, #28]
 801298e:	2300      	movs	r3, #0
 8012990:	837b      	strh	r3, [r7, #26]
 8012992:	2300      	movs	r3, #0
 8012994:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012996:	2300      	movs	r3, #0
 8012998:	843b      	strh	r3, [r7, #32]
 801299a:	e0ae      	b.n	8012afa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801299c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129a0:	49a6      	ldr	r1, [pc, #664]	; (8012c3c <etharp_find_entry+0x2d4>)
 80129a2:	4613      	mov	r3, r2
 80129a4:	005b      	lsls	r3, r3, #1
 80129a6:	4413      	add	r3, r2
 80129a8:	00db      	lsls	r3, r3, #3
 80129aa:	440b      	add	r3, r1
 80129ac:	3314      	adds	r3, #20
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80129b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80129b6:	2b0a      	cmp	r3, #10
 80129b8:	d105      	bne.n	80129c6 <etharp_find_entry+0x5e>
 80129ba:	7dfb      	ldrb	r3, [r7, #23]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d102      	bne.n	80129c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80129c0:	8c3b      	ldrh	r3, [r7, #32]
 80129c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80129c4:	e095      	b.n	8012af2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80129c6:	7dfb      	ldrb	r3, [r7, #23]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	f000 8092 	beq.w	8012af2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80129ce:	7dfb      	ldrb	r3, [r7, #23]
 80129d0:	2b01      	cmp	r3, #1
 80129d2:	d009      	beq.n	80129e8 <etharp_find_entry+0x80>
 80129d4:	7dfb      	ldrb	r3, [r7, #23]
 80129d6:	2b01      	cmp	r3, #1
 80129d8:	d806      	bhi.n	80129e8 <etharp_find_entry+0x80>
 80129da:	4b99      	ldr	r3, [pc, #612]	; (8012c40 <etharp_find_entry+0x2d8>)
 80129dc:	f240 1223 	movw	r2, #291	; 0x123
 80129e0:	4998      	ldr	r1, [pc, #608]	; (8012c44 <etharp_find_entry+0x2dc>)
 80129e2:	4899      	ldr	r0, [pc, #612]	; (8012c48 <etharp_find_entry+0x2e0>)
 80129e4:	f002 fda0 	bl	8015528 <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d020      	beq.n	8012a30 <etharp_find_entry+0xc8>
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	6819      	ldr	r1, [r3, #0]
 80129f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129f6:	4891      	ldr	r0, [pc, #580]	; (8012c3c <etharp_find_entry+0x2d4>)
 80129f8:	4613      	mov	r3, r2
 80129fa:	005b      	lsls	r3, r3, #1
 80129fc:	4413      	add	r3, r2
 80129fe:	00db      	lsls	r3, r3, #3
 8012a00:	4403      	add	r3, r0
 8012a02:	3304      	adds	r3, #4
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	4299      	cmp	r1, r3
 8012a08:	d112      	bne.n	8012a30 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d00c      	beq.n	8012a2a <etharp_find_entry+0xc2>
 8012a10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a14:	4989      	ldr	r1, [pc, #548]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012a16:	4613      	mov	r3, r2
 8012a18:	005b      	lsls	r3, r3, #1
 8012a1a:	4413      	add	r3, r2
 8012a1c:	00db      	lsls	r3, r3, #3
 8012a1e:	440b      	add	r3, r1
 8012a20:	3308      	adds	r3, #8
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	687a      	ldr	r2, [r7, #4]
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d102      	bne.n	8012a30 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012a2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a2e:	e100      	b.n	8012c32 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012a30:	7dfb      	ldrb	r3, [r7, #23]
 8012a32:	2b01      	cmp	r3, #1
 8012a34:	d140      	bne.n	8012ab8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012a36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a3a:	4980      	ldr	r1, [pc, #512]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012a3c:	4613      	mov	r3, r2
 8012a3e:	005b      	lsls	r3, r3, #1
 8012a40:	4413      	add	r3, r2
 8012a42:	00db      	lsls	r3, r3, #3
 8012a44:	440b      	add	r3, r1
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d01a      	beq.n	8012a82 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012a4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a50:	497a      	ldr	r1, [pc, #488]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012a52:	4613      	mov	r3, r2
 8012a54:	005b      	lsls	r3, r3, #1
 8012a56:	4413      	add	r3, r2
 8012a58:	00db      	lsls	r3, r3, #3
 8012a5a:	440b      	add	r3, r1
 8012a5c:	3312      	adds	r3, #18
 8012a5e:	881b      	ldrh	r3, [r3, #0]
 8012a60:	8bba      	ldrh	r2, [r7, #28]
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d845      	bhi.n	8012af2 <etharp_find_entry+0x18a>
            old_queue = i;
 8012a66:	8c3b      	ldrh	r3, [r7, #32]
 8012a68:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012a6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a6e:	4973      	ldr	r1, [pc, #460]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012a70:	4613      	mov	r3, r2
 8012a72:	005b      	lsls	r3, r3, #1
 8012a74:	4413      	add	r3, r2
 8012a76:	00db      	lsls	r3, r3, #3
 8012a78:	440b      	add	r3, r1
 8012a7a:	3312      	adds	r3, #18
 8012a7c:	881b      	ldrh	r3, [r3, #0]
 8012a7e:	83bb      	strh	r3, [r7, #28]
 8012a80:	e037      	b.n	8012af2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012a82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a86:	496d      	ldr	r1, [pc, #436]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012a88:	4613      	mov	r3, r2
 8012a8a:	005b      	lsls	r3, r3, #1
 8012a8c:	4413      	add	r3, r2
 8012a8e:	00db      	lsls	r3, r3, #3
 8012a90:	440b      	add	r3, r1
 8012a92:	3312      	adds	r3, #18
 8012a94:	881b      	ldrh	r3, [r3, #0]
 8012a96:	8b7a      	ldrh	r2, [r7, #26]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d82a      	bhi.n	8012af2 <etharp_find_entry+0x18a>
            old_pending = i;
 8012a9c:	8c3b      	ldrh	r3, [r7, #32]
 8012a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012aa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012aa4:	4965      	ldr	r1, [pc, #404]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012aa6:	4613      	mov	r3, r2
 8012aa8:	005b      	lsls	r3, r3, #1
 8012aaa:	4413      	add	r3, r2
 8012aac:	00db      	lsls	r3, r3, #3
 8012aae:	440b      	add	r3, r1
 8012ab0:	3312      	adds	r3, #18
 8012ab2:	881b      	ldrh	r3, [r3, #0]
 8012ab4:	837b      	strh	r3, [r7, #26]
 8012ab6:	e01c      	b.n	8012af2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012ab8:	7dfb      	ldrb	r3, [r7, #23]
 8012aba:	2b01      	cmp	r3, #1
 8012abc:	d919      	bls.n	8012af2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012abe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ac2:	495e      	ldr	r1, [pc, #376]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012ac4:	4613      	mov	r3, r2
 8012ac6:	005b      	lsls	r3, r3, #1
 8012ac8:	4413      	add	r3, r2
 8012aca:	00db      	lsls	r3, r3, #3
 8012acc:	440b      	add	r3, r1
 8012ace:	3312      	adds	r3, #18
 8012ad0:	881b      	ldrh	r3, [r3, #0]
 8012ad2:	8b3a      	ldrh	r2, [r7, #24]
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d80c      	bhi.n	8012af2 <etharp_find_entry+0x18a>
            old_stable = i;
 8012ad8:	8c3b      	ldrh	r3, [r7, #32]
 8012ada:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012adc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ae0:	4956      	ldr	r1, [pc, #344]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012ae2:	4613      	mov	r3, r2
 8012ae4:	005b      	lsls	r3, r3, #1
 8012ae6:	4413      	add	r3, r2
 8012ae8:	00db      	lsls	r3, r3, #3
 8012aea:	440b      	add	r3, r1
 8012aec:	3312      	adds	r3, #18
 8012aee:	881b      	ldrh	r3, [r3, #0]
 8012af0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012af2:	8c3b      	ldrh	r3, [r7, #32]
 8012af4:	3301      	adds	r3, #1
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	843b      	strh	r3, [r7, #32]
 8012afa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012afe:	2b09      	cmp	r3, #9
 8012b00:	f77f af4c 	ble.w	801299c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012b04:	7afb      	ldrb	r3, [r7, #11]
 8012b06:	f003 0302 	and.w	r3, r3, #2
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d108      	bne.n	8012b20 <etharp_find_entry+0x1b8>
 8012b0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012b12:	2b0a      	cmp	r3, #10
 8012b14:	d107      	bne.n	8012b26 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012b16:	7afb      	ldrb	r3, [r7, #11]
 8012b18:	f003 0301 	and.w	r3, r3, #1
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d102      	bne.n	8012b26 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012b20:	f04f 33ff 	mov.w	r3, #4294967295
 8012b24:	e085      	b.n	8012c32 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012b26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012b2a:	2b09      	cmp	r3, #9
 8012b2c:	dc02      	bgt.n	8012b34 <etharp_find_entry+0x1cc>
    i = empty;
 8012b2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b30:	843b      	strh	r3, [r7, #32]
 8012b32:	e039      	b.n	8012ba8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012b34:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012b38:	2b09      	cmp	r3, #9
 8012b3a:	dc14      	bgt.n	8012b66 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012b3e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012b40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b44:	493d      	ldr	r1, [pc, #244]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012b46:	4613      	mov	r3, r2
 8012b48:	005b      	lsls	r3, r3, #1
 8012b4a:	4413      	add	r3, r2
 8012b4c:	00db      	lsls	r3, r3, #3
 8012b4e:	440b      	add	r3, r1
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d018      	beq.n	8012b88 <etharp_find_entry+0x220>
 8012b56:	4b3a      	ldr	r3, [pc, #232]	; (8012c40 <etharp_find_entry+0x2d8>)
 8012b58:	f240 126d 	movw	r2, #365	; 0x16d
 8012b5c:	493b      	ldr	r1, [pc, #236]	; (8012c4c <etharp_find_entry+0x2e4>)
 8012b5e:	483a      	ldr	r0, [pc, #232]	; (8012c48 <etharp_find_entry+0x2e0>)
 8012b60:	f002 fce2 	bl	8015528 <printf>
 8012b64:	e010      	b.n	8012b88 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012b66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012b6a:	2b09      	cmp	r3, #9
 8012b6c:	dc02      	bgt.n	8012b74 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012b6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b70:	843b      	strh	r3, [r7, #32]
 8012b72:	e009      	b.n	8012b88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012b74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012b78:	2b09      	cmp	r3, #9
 8012b7a:	dc02      	bgt.n	8012b82 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012b7c:	8bfb      	ldrh	r3, [r7, #30]
 8012b7e:	843b      	strh	r3, [r7, #32]
 8012b80:	e002      	b.n	8012b88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012b82:	f04f 33ff 	mov.w	r3, #4294967295
 8012b86:	e054      	b.n	8012c32 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b8c:	2b09      	cmp	r3, #9
 8012b8e:	dd06      	ble.n	8012b9e <etharp_find_entry+0x236>
 8012b90:	4b2b      	ldr	r3, [pc, #172]	; (8012c40 <etharp_find_entry+0x2d8>)
 8012b92:	f240 127f 	movw	r2, #383	; 0x17f
 8012b96:	492e      	ldr	r1, [pc, #184]	; (8012c50 <etharp_find_entry+0x2e8>)
 8012b98:	482b      	ldr	r0, [pc, #172]	; (8012c48 <etharp_find_entry+0x2e0>)
 8012b9a:	f002 fcc5 	bl	8015528 <printf>
    etharp_free_entry(i);
 8012b9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7ff fe06 	bl	80127b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012ba8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012bac:	2b09      	cmp	r3, #9
 8012bae:	dd06      	ble.n	8012bbe <etharp_find_entry+0x256>
 8012bb0:	4b23      	ldr	r3, [pc, #140]	; (8012c40 <etharp_find_entry+0x2d8>)
 8012bb2:	f240 1283 	movw	r2, #387	; 0x183
 8012bb6:	4926      	ldr	r1, [pc, #152]	; (8012c50 <etharp_find_entry+0x2e8>)
 8012bb8:	4823      	ldr	r0, [pc, #140]	; (8012c48 <etharp_find_entry+0x2e0>)
 8012bba:	f002 fcb5 	bl	8015528 <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012bbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bc2:	491e      	ldr	r1, [pc, #120]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012bc4:	4613      	mov	r3, r2
 8012bc6:	005b      	lsls	r3, r3, #1
 8012bc8:	4413      	add	r3, r2
 8012bca:	00db      	lsls	r3, r3, #3
 8012bcc:	440b      	add	r3, r1
 8012bce:	3314      	adds	r3, #20
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d006      	beq.n	8012be4 <etharp_find_entry+0x27c>
 8012bd6:	4b1a      	ldr	r3, [pc, #104]	; (8012c40 <etharp_find_entry+0x2d8>)
 8012bd8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012bdc:	491d      	ldr	r1, [pc, #116]	; (8012c54 <etharp_find_entry+0x2ec>)
 8012bde:	481a      	ldr	r0, [pc, #104]	; (8012c48 <etharp_find_entry+0x2e0>)
 8012be0:	f002 fca2 	bl	8015528 <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d00b      	beq.n	8012c02 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012bea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	6819      	ldr	r1, [r3, #0]
 8012bf2:	4812      	ldr	r0, [pc, #72]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	005b      	lsls	r3, r3, #1
 8012bf8:	4413      	add	r3, r2
 8012bfa:	00db      	lsls	r3, r3, #3
 8012bfc:	4403      	add	r3, r0
 8012bfe:	3304      	adds	r3, #4
 8012c00:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012c02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c06:	490d      	ldr	r1, [pc, #52]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012c08:	4613      	mov	r3, r2
 8012c0a:	005b      	lsls	r3, r3, #1
 8012c0c:	4413      	add	r3, r2
 8012c0e:	00db      	lsls	r3, r3, #3
 8012c10:	440b      	add	r3, r1
 8012c12:	3312      	adds	r3, #18
 8012c14:	2200      	movs	r2, #0
 8012c16:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012c18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c1c:	4907      	ldr	r1, [pc, #28]	; (8012c3c <etharp_find_entry+0x2d4>)
 8012c1e:	4613      	mov	r3, r2
 8012c20:	005b      	lsls	r3, r3, #1
 8012c22:	4413      	add	r3, r2
 8012c24:	00db      	lsls	r3, r3, #3
 8012c26:	440b      	add	r3, r1
 8012c28:	3308      	adds	r3, #8
 8012c2a:	687a      	ldr	r2, [r7, #4]
 8012c2c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012c2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3728      	adds	r7, #40	; 0x28
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}
 8012c3a:	bf00      	nop
 8012c3c:	20004ae0 	.word	0x20004ae0
 8012c40:	0801f040 	.word	0x0801f040
 8012c44:	0801f078 	.word	0x0801f078
 8012c48:	0801f0b8 	.word	0x0801f0b8
 8012c4c:	0801f0e0 	.word	0x0801f0e0
 8012c50:	0801f0f8 	.word	0x0801f0f8
 8012c54:	0801f10c 	.word	0x0801f10c

08012c58 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b088      	sub	sp, #32
 8012c5c:	af02      	add	r7, sp, #8
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
 8012c64:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c6c:	2b06      	cmp	r3, #6
 8012c6e:	d006      	beq.n	8012c7e <etharp_update_arp_entry+0x26>
 8012c70:	4b48      	ldr	r3, [pc, #288]	; (8012d94 <etharp_update_arp_entry+0x13c>)
 8012c72:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012c76:	4948      	ldr	r1, [pc, #288]	; (8012d98 <etharp_update_arp_entry+0x140>)
 8012c78:	4848      	ldr	r0, [pc, #288]	; (8012d9c <etharp_update_arp_entry+0x144>)
 8012c7a:	f002 fc55 	bl	8015528 <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d012      	beq.n	8012caa <etharp_update_arp_entry+0x52>
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00e      	beq.n	8012caa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	68f9      	ldr	r1, [r7, #12]
 8012c92:	4618      	mov	r0, r3
 8012c94:	f001 f8fe 	bl	8013e94 <ip4_addr_isbroadcast_u32>
 8012c98:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d105      	bne.n	8012caa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ca6:	2be0      	cmp	r3, #224	; 0xe0
 8012ca8:	d102      	bne.n	8012cb0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012caa:	f06f 030f 	mvn.w	r3, #15
 8012cae:	e06c      	b.n	8012d8a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012cb0:	78fb      	ldrb	r3, [r7, #3]
 8012cb2:	68fa      	ldr	r2, [r7, #12]
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	68b8      	ldr	r0, [r7, #8]
 8012cb8:	f7ff fe56 	bl	8012968 <etharp_find_entry>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012cc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	da02      	bge.n	8012cce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012cc8:	8afb      	ldrh	r3, [r7, #22]
 8012cca:	b25b      	sxtb	r3, r3
 8012ccc:	e05d      	b.n	8012d8a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012cce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cd2:	4933      	ldr	r1, [pc, #204]	; (8012da0 <etharp_update_arp_entry+0x148>)
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	005b      	lsls	r3, r3, #1
 8012cd8:	4413      	add	r3, r2
 8012cda:	00db      	lsls	r3, r3, #3
 8012cdc:	440b      	add	r3, r1
 8012cde:	3314      	adds	r3, #20
 8012ce0:	2202      	movs	r2, #2
 8012ce2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012ce4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ce8:	492d      	ldr	r1, [pc, #180]	; (8012da0 <etharp_update_arp_entry+0x148>)
 8012cea:	4613      	mov	r3, r2
 8012cec:	005b      	lsls	r3, r3, #1
 8012cee:	4413      	add	r3, r2
 8012cf0:	00db      	lsls	r3, r3, #3
 8012cf2:	440b      	add	r3, r1
 8012cf4:	3308      	adds	r3, #8
 8012cf6:	68fa      	ldr	r2, [r7, #12]
 8012cf8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012cfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cfe:	4613      	mov	r3, r2
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	4413      	add	r3, r2
 8012d04:	00db      	lsls	r3, r3, #3
 8012d06:	3308      	adds	r3, #8
 8012d08:	4a25      	ldr	r2, [pc, #148]	; (8012da0 <etharp_update_arp_entry+0x148>)
 8012d0a:	4413      	add	r3, r2
 8012d0c:	3304      	adds	r3, #4
 8012d0e:	2206      	movs	r2, #6
 8012d10:	6879      	ldr	r1, [r7, #4]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f002 f95a 	bl	8014fcc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012d18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d1c:	4920      	ldr	r1, [pc, #128]	; (8012da0 <etharp_update_arp_entry+0x148>)
 8012d1e:	4613      	mov	r3, r2
 8012d20:	005b      	lsls	r3, r3, #1
 8012d22:	4413      	add	r3, r2
 8012d24:	00db      	lsls	r3, r3, #3
 8012d26:	440b      	add	r3, r1
 8012d28:	3312      	adds	r3, #18
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012d2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d32:	491b      	ldr	r1, [pc, #108]	; (8012da0 <etharp_update_arp_entry+0x148>)
 8012d34:	4613      	mov	r3, r2
 8012d36:	005b      	lsls	r3, r3, #1
 8012d38:	4413      	add	r3, r2
 8012d3a:	00db      	lsls	r3, r3, #3
 8012d3c:	440b      	add	r3, r1
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d021      	beq.n	8012d88 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012d44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d48:	4915      	ldr	r1, [pc, #84]	; (8012da0 <etharp_update_arp_entry+0x148>)
 8012d4a:	4613      	mov	r3, r2
 8012d4c:	005b      	lsls	r3, r3, #1
 8012d4e:	4413      	add	r3, r2
 8012d50:	00db      	lsls	r3, r3, #3
 8012d52:	440b      	add	r3, r1
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012d58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d5c:	4910      	ldr	r1, [pc, #64]	; (8012da0 <etharp_update_arp_entry+0x148>)
 8012d5e:	4613      	mov	r3, r2
 8012d60:	005b      	lsls	r3, r3, #1
 8012d62:	4413      	add	r3, r2
 8012d64:	00db      	lsls	r3, r3, #3
 8012d66:	440b      	add	r3, r1
 8012d68:	2200      	movs	r2, #0
 8012d6a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8012d72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d76:	9300      	str	r3, [sp, #0]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6939      	ldr	r1, [r7, #16]
 8012d7c:	68f8      	ldr	r0, [r7, #12]
 8012d7e:	f001 ff91 	bl	8014ca4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012d82:	6938      	ldr	r0, [r7, #16]
 8012d84:	f7f9 fdf0 	bl	800c968 <pbuf_free>
  }
  return ERR_OK;
 8012d88:	2300      	movs	r3, #0
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3718      	adds	r7, #24
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	bf00      	nop
 8012d94:	0801f040 	.word	0x0801f040
 8012d98:	0801f138 	.word	0x0801f138
 8012d9c:	0801f0b8 	.word	0x0801f0b8
 8012da0:	20004ae0 	.word	0x20004ae0

08012da4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012dac:	2300      	movs	r3, #0
 8012dae:	60fb      	str	r3, [r7, #12]
 8012db0:	e01e      	b.n	8012df0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012db2:	4913      	ldr	r1, [pc, #76]	; (8012e00 <etharp_cleanup_netif+0x5c>)
 8012db4:	68fa      	ldr	r2, [r7, #12]
 8012db6:	4613      	mov	r3, r2
 8012db8:	005b      	lsls	r3, r3, #1
 8012dba:	4413      	add	r3, r2
 8012dbc:	00db      	lsls	r3, r3, #3
 8012dbe:	440b      	add	r3, r1
 8012dc0:	3314      	adds	r3, #20
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012dc6:	7afb      	ldrb	r3, [r7, #11]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d00e      	beq.n	8012dea <etharp_cleanup_netif+0x46>
 8012dcc:	490c      	ldr	r1, [pc, #48]	; (8012e00 <etharp_cleanup_netif+0x5c>)
 8012dce:	68fa      	ldr	r2, [r7, #12]
 8012dd0:	4613      	mov	r3, r2
 8012dd2:	005b      	lsls	r3, r3, #1
 8012dd4:	4413      	add	r3, r2
 8012dd6:	00db      	lsls	r3, r3, #3
 8012dd8:	440b      	add	r3, r1
 8012dda:	3308      	adds	r3, #8
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	687a      	ldr	r2, [r7, #4]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d102      	bne.n	8012dea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012de4:	68f8      	ldr	r0, [r7, #12]
 8012de6:	f7ff fce5 	bl	80127b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	3301      	adds	r3, #1
 8012dee:	60fb      	str	r3, [r7, #12]
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	2b09      	cmp	r3, #9
 8012df4:	dddd      	ble.n	8012db2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012df6:	bf00      	nop
 8012df8:	bf00      	nop
 8012dfa:	3710      	adds	r7, #16
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}
 8012e00:	20004ae0 	.word	0x20004ae0

08012e04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012e04:	b5b0      	push	{r4, r5, r7, lr}
 8012e06:	b08a      	sub	sp, #40	; 0x28
 8012e08:	af04      	add	r7, sp, #16
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d107      	bne.n	8012e24 <etharp_input+0x20>
 8012e14:	4b3d      	ldr	r3, [pc, #244]	; (8012f0c <etharp_input+0x108>)
 8012e16:	f240 228a 	movw	r2, #650	; 0x28a
 8012e1a:	493d      	ldr	r1, [pc, #244]	; (8012f10 <etharp_input+0x10c>)
 8012e1c:	483d      	ldr	r0, [pc, #244]	; (8012f14 <etharp_input+0x110>)
 8012e1e:	f002 fb83 	bl	8015528 <printf>
 8012e22:	e06f      	b.n	8012f04 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	685b      	ldr	r3, [r3, #4]
 8012e28:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	881b      	ldrh	r3, [r3, #0]
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e34:	d10c      	bne.n	8012e50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012e3a:	2b06      	cmp	r3, #6
 8012e3c:	d108      	bne.n	8012e50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012e42:	2b04      	cmp	r3, #4
 8012e44:	d104      	bne.n	8012e50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	885b      	ldrh	r3, [r3, #2]
 8012e4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012e4c:	2b08      	cmp	r3, #8
 8012e4e:	d003      	beq.n	8012e58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f7f9 fd89 	bl	800c968 <pbuf_free>
    return;
 8012e56:	e055      	b.n	8012f04 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	330e      	adds	r3, #14
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	3318      	adds	r3, #24
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	3304      	adds	r3, #4
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d102      	bne.n	8012e78 <etharp_input+0x74>
    for_us = 0;
 8012e72:	2300      	movs	r3, #0
 8012e74:	75fb      	strb	r3, [r7, #23]
 8012e76:	e009      	b.n	8012e8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012e78:	68ba      	ldr	r2, [r7, #8]
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	3304      	adds	r3, #4
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	bf0c      	ite	eq
 8012e84:	2301      	moveq	r3, #1
 8012e86:	2300      	movne	r3, #0
 8012e88:	b2db      	uxtb	r3, r3
 8012e8a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	f103 0208 	add.w	r2, r3, #8
 8012e92:	7dfb      	ldrb	r3, [r7, #23]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d001      	beq.n	8012e9c <etharp_input+0x98>
 8012e98:	2301      	movs	r3, #1
 8012e9a:	e000      	b.n	8012e9e <etharp_input+0x9a>
 8012e9c:	2302      	movs	r3, #2
 8012e9e:	f107 010c 	add.w	r1, r7, #12
 8012ea2:	6838      	ldr	r0, [r7, #0]
 8012ea4:	f7ff fed8 	bl	8012c58 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	88db      	ldrh	r3, [r3, #6]
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012eb2:	d003      	beq.n	8012ebc <etharp_input+0xb8>
 8012eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012eb8:	d01e      	beq.n	8012ef8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012eba:	e020      	b.n	8012efe <etharp_input+0xfa>
      if (for_us) {
 8012ebc:	7dfb      	ldrb	r3, [r7, #23]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d01c      	beq.n	8012efc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012ed8:	693a      	ldr	r2, [r7, #16]
 8012eda:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012edc:	2102      	movs	r1, #2
 8012ede:	9103      	str	r1, [sp, #12]
 8012ee0:	f107 010c 	add.w	r1, r7, #12
 8012ee4:	9102      	str	r1, [sp, #8]
 8012ee6:	9201      	str	r2, [sp, #4]
 8012ee8:	9300      	str	r3, [sp, #0]
 8012eea:	462b      	mov	r3, r5
 8012eec:	4622      	mov	r2, r4
 8012eee:	4601      	mov	r1, r0
 8012ef0:	6838      	ldr	r0, [r7, #0]
 8012ef2:	f000 faeb 	bl	80134cc <etharp_raw>
      break;
 8012ef6:	e001      	b.n	8012efc <etharp_input+0xf8>
      break;
 8012ef8:	bf00      	nop
 8012efa:	e000      	b.n	8012efe <etharp_input+0xfa>
      break;
 8012efc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f7f9 fd32 	bl	800c968 <pbuf_free>
}
 8012f04:	3718      	adds	r7, #24
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bdb0      	pop	{r4, r5, r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	0801f040 	.word	0x0801f040
 8012f10:	0801f190 	.word	0x0801f190
 8012f14:	0801f0b8 	.word	0x0801f0b8

08012f18 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b086      	sub	sp, #24
 8012f1c:	af02      	add	r7, sp, #8
 8012f1e:	60f8      	str	r0, [r7, #12]
 8012f20:	60b9      	str	r1, [r7, #8]
 8012f22:	4613      	mov	r3, r2
 8012f24:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012f26:	79fa      	ldrb	r2, [r7, #7]
 8012f28:	4944      	ldr	r1, [pc, #272]	; (801303c <etharp_output_to_arp_index+0x124>)
 8012f2a:	4613      	mov	r3, r2
 8012f2c:	005b      	lsls	r3, r3, #1
 8012f2e:	4413      	add	r3, r2
 8012f30:	00db      	lsls	r3, r3, #3
 8012f32:	440b      	add	r3, r1
 8012f34:	3314      	adds	r3, #20
 8012f36:	781b      	ldrb	r3, [r3, #0]
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d806      	bhi.n	8012f4a <etharp_output_to_arp_index+0x32>
 8012f3c:	4b40      	ldr	r3, [pc, #256]	; (8013040 <etharp_output_to_arp_index+0x128>)
 8012f3e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012f42:	4940      	ldr	r1, [pc, #256]	; (8013044 <etharp_output_to_arp_index+0x12c>)
 8012f44:	4840      	ldr	r0, [pc, #256]	; (8013048 <etharp_output_to_arp_index+0x130>)
 8012f46:	f002 faef 	bl	8015528 <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012f4a:	79fa      	ldrb	r2, [r7, #7]
 8012f4c:	493b      	ldr	r1, [pc, #236]	; (801303c <etharp_output_to_arp_index+0x124>)
 8012f4e:	4613      	mov	r3, r2
 8012f50:	005b      	lsls	r3, r3, #1
 8012f52:	4413      	add	r3, r2
 8012f54:	00db      	lsls	r3, r3, #3
 8012f56:	440b      	add	r3, r1
 8012f58:	3314      	adds	r3, #20
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	2b02      	cmp	r3, #2
 8012f5e:	d153      	bne.n	8013008 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012f60:	79fa      	ldrb	r2, [r7, #7]
 8012f62:	4936      	ldr	r1, [pc, #216]	; (801303c <etharp_output_to_arp_index+0x124>)
 8012f64:	4613      	mov	r3, r2
 8012f66:	005b      	lsls	r3, r3, #1
 8012f68:	4413      	add	r3, r2
 8012f6a:	00db      	lsls	r3, r3, #3
 8012f6c:	440b      	add	r3, r1
 8012f6e:	3312      	adds	r3, #18
 8012f70:	881b      	ldrh	r3, [r3, #0]
 8012f72:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012f76:	d919      	bls.n	8012fac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012f78:	79fa      	ldrb	r2, [r7, #7]
 8012f7a:	4613      	mov	r3, r2
 8012f7c:	005b      	lsls	r3, r3, #1
 8012f7e:	4413      	add	r3, r2
 8012f80:	00db      	lsls	r3, r3, #3
 8012f82:	4a2e      	ldr	r2, [pc, #184]	; (801303c <etharp_output_to_arp_index+0x124>)
 8012f84:	4413      	add	r3, r2
 8012f86:	3304      	adds	r3, #4
 8012f88:	4619      	mov	r1, r3
 8012f8a:	68f8      	ldr	r0, [r7, #12]
 8012f8c:	f000 fb4c 	bl	8013628 <etharp_request>
 8012f90:	4603      	mov	r3, r0
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d138      	bne.n	8013008 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012f96:	79fa      	ldrb	r2, [r7, #7]
 8012f98:	4928      	ldr	r1, [pc, #160]	; (801303c <etharp_output_to_arp_index+0x124>)
 8012f9a:	4613      	mov	r3, r2
 8012f9c:	005b      	lsls	r3, r3, #1
 8012f9e:	4413      	add	r3, r2
 8012fa0:	00db      	lsls	r3, r3, #3
 8012fa2:	440b      	add	r3, r1
 8012fa4:	3314      	adds	r3, #20
 8012fa6:	2203      	movs	r2, #3
 8012fa8:	701a      	strb	r2, [r3, #0]
 8012faa:	e02d      	b.n	8013008 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012fac:	79fa      	ldrb	r2, [r7, #7]
 8012fae:	4923      	ldr	r1, [pc, #140]	; (801303c <etharp_output_to_arp_index+0x124>)
 8012fb0:	4613      	mov	r3, r2
 8012fb2:	005b      	lsls	r3, r3, #1
 8012fb4:	4413      	add	r3, r2
 8012fb6:	00db      	lsls	r3, r3, #3
 8012fb8:	440b      	add	r3, r1
 8012fba:	3312      	adds	r3, #18
 8012fbc:	881b      	ldrh	r3, [r3, #0]
 8012fbe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012fc2:	d321      	bcc.n	8013008 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012fc4:	79fa      	ldrb	r2, [r7, #7]
 8012fc6:	4613      	mov	r3, r2
 8012fc8:	005b      	lsls	r3, r3, #1
 8012fca:	4413      	add	r3, r2
 8012fcc:	00db      	lsls	r3, r3, #3
 8012fce:	4a1b      	ldr	r2, [pc, #108]	; (801303c <etharp_output_to_arp_index+0x124>)
 8012fd0:	4413      	add	r3, r2
 8012fd2:	1d19      	adds	r1, r3, #4
 8012fd4:	79fa      	ldrb	r2, [r7, #7]
 8012fd6:	4613      	mov	r3, r2
 8012fd8:	005b      	lsls	r3, r3, #1
 8012fda:	4413      	add	r3, r2
 8012fdc:	00db      	lsls	r3, r3, #3
 8012fde:	3308      	adds	r3, #8
 8012fe0:	4a16      	ldr	r2, [pc, #88]	; (801303c <etharp_output_to_arp_index+0x124>)
 8012fe2:	4413      	add	r3, r2
 8012fe4:	3304      	adds	r3, #4
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	68f8      	ldr	r0, [r7, #12]
 8012fea:	f000 fafb 	bl	80135e4 <etharp_request_dst>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d109      	bne.n	8013008 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012ff4:	79fa      	ldrb	r2, [r7, #7]
 8012ff6:	4911      	ldr	r1, [pc, #68]	; (801303c <etharp_output_to_arp_index+0x124>)
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	005b      	lsls	r3, r3, #1
 8012ffc:	4413      	add	r3, r2
 8012ffe:	00db      	lsls	r3, r3, #3
 8013000:	440b      	add	r3, r1
 8013002:	3314      	adds	r3, #20
 8013004:	2203      	movs	r2, #3
 8013006:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	f103 0122 	add.w	r1, r3, #34	; 0x22
 801300e:	79fa      	ldrb	r2, [r7, #7]
 8013010:	4613      	mov	r3, r2
 8013012:	005b      	lsls	r3, r3, #1
 8013014:	4413      	add	r3, r2
 8013016:	00db      	lsls	r3, r3, #3
 8013018:	3308      	adds	r3, #8
 801301a:	4a08      	ldr	r2, [pc, #32]	; (801303c <etharp_output_to_arp_index+0x124>)
 801301c:	4413      	add	r3, r2
 801301e:	3304      	adds	r3, #4
 8013020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013024:	9200      	str	r2, [sp, #0]
 8013026:	460a      	mov	r2, r1
 8013028:	68b9      	ldr	r1, [r7, #8]
 801302a:	68f8      	ldr	r0, [r7, #12]
 801302c:	f001 fe3a 	bl	8014ca4 <ethernet_output>
 8013030:	4603      	mov	r3, r0
}
 8013032:	4618      	mov	r0, r3
 8013034:	3710      	adds	r7, #16
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	20004ae0 	.word	0x20004ae0
 8013040:	0801f040 	.word	0x0801f040
 8013044:	0801f1b0 	.word	0x0801f1b0
 8013048:	0801f0b8 	.word	0x0801f0b8

0801304c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b08a      	sub	sp, #40	; 0x28
 8013050:	af02      	add	r7, sp, #8
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d106      	bne.n	8013070 <etharp_output+0x24>
 8013062:	4b73      	ldr	r3, [pc, #460]	; (8013230 <etharp_output+0x1e4>)
 8013064:	f240 321e 	movw	r2, #798	; 0x31e
 8013068:	4972      	ldr	r1, [pc, #456]	; (8013234 <etharp_output+0x1e8>)
 801306a:	4873      	ldr	r0, [pc, #460]	; (8013238 <etharp_output+0x1ec>)
 801306c:	f002 fa5c 	bl	8015528 <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d106      	bne.n	8013084 <etharp_output+0x38>
 8013076:	4b6e      	ldr	r3, [pc, #440]	; (8013230 <etharp_output+0x1e4>)
 8013078:	f240 321f 	movw	r2, #799	; 0x31f
 801307c:	496f      	ldr	r1, [pc, #444]	; (801323c <etharp_output+0x1f0>)
 801307e:	486e      	ldr	r0, [pc, #440]	; (8013238 <etharp_output+0x1ec>)
 8013080:	f002 fa52 	bl	8015528 <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d106      	bne.n	8013098 <etharp_output+0x4c>
 801308a:	4b69      	ldr	r3, [pc, #420]	; (8013230 <etharp_output+0x1e4>)
 801308c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013090:	496b      	ldr	r1, [pc, #428]	; (8013240 <etharp_output+0x1f4>)
 8013092:	4869      	ldr	r0, [pc, #420]	; (8013238 <etharp_output+0x1ec>)
 8013094:	f002 fa48 	bl	8015528 <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	68f9      	ldr	r1, [r7, #12]
 801309e:	4618      	mov	r0, r3
 80130a0:	f000 fef8 	bl	8013e94 <ip4_addr_isbroadcast_u32>
 80130a4:	4603      	mov	r3, r0
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d002      	beq.n	80130b0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80130aa:	4b66      	ldr	r3, [pc, #408]	; (8013244 <etharp_output+0x1f8>)
 80130ac:	61fb      	str	r3, [r7, #28]
 80130ae:	e0af      	b.n	8013210 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130b8:	2be0      	cmp	r3, #224	; 0xe0
 80130ba:	d118      	bne.n	80130ee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80130bc:	2301      	movs	r3, #1
 80130be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80130c0:	2300      	movs	r3, #0
 80130c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80130c4:	235e      	movs	r3, #94	; 0x5e
 80130c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	3301      	adds	r3, #1
 80130cc:	781b      	ldrb	r3, [r3, #0]
 80130ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80130d2:	b2db      	uxtb	r3, r3
 80130d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	3302      	adds	r3, #2
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	3303      	adds	r3, #3
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80130e6:	f107 0310 	add.w	r3, r7, #16
 80130ea:	61fb      	str	r3, [r7, #28]
 80130ec:	e090      	b.n	8013210 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681a      	ldr	r2, [r3, #0]
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	3304      	adds	r3, #4
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	405a      	eors	r2, r3
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	3308      	adds	r3, #8
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	4013      	ands	r3, r2
 8013102:	2b00      	cmp	r3, #0
 8013104:	d012      	beq.n	801312c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801310c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013110:	4293      	cmp	r3, r2
 8013112:	d00b      	beq.n	801312c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	330c      	adds	r3, #12
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d003      	beq.n	8013126 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	330c      	adds	r3, #12
 8013122:	61bb      	str	r3, [r7, #24]
 8013124:	e002      	b.n	801312c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013126:	f06f 0303 	mvn.w	r3, #3
 801312a:	e07d      	b.n	8013228 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801312c:	4b46      	ldr	r3, [pc, #280]	; (8013248 <etharp_output+0x1fc>)
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	4619      	mov	r1, r3
 8013132:	4a46      	ldr	r2, [pc, #280]	; (801324c <etharp_output+0x200>)
 8013134:	460b      	mov	r3, r1
 8013136:	005b      	lsls	r3, r3, #1
 8013138:	440b      	add	r3, r1
 801313a:	00db      	lsls	r3, r3, #3
 801313c:	4413      	add	r3, r2
 801313e:	3314      	adds	r3, #20
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	2b01      	cmp	r3, #1
 8013144:	d925      	bls.n	8013192 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013146:	4b40      	ldr	r3, [pc, #256]	; (8013248 <etharp_output+0x1fc>)
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	4619      	mov	r1, r3
 801314c:	4a3f      	ldr	r2, [pc, #252]	; (801324c <etharp_output+0x200>)
 801314e:	460b      	mov	r3, r1
 8013150:	005b      	lsls	r3, r3, #1
 8013152:	440b      	add	r3, r1
 8013154:	00db      	lsls	r3, r3, #3
 8013156:	4413      	add	r3, r2
 8013158:	3308      	adds	r3, #8
 801315a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801315c:	68fa      	ldr	r2, [r7, #12]
 801315e:	429a      	cmp	r2, r3
 8013160:	d117      	bne.n	8013192 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013162:	69bb      	ldr	r3, [r7, #24]
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	4b38      	ldr	r3, [pc, #224]	; (8013248 <etharp_output+0x1fc>)
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	4618      	mov	r0, r3
 801316c:	4937      	ldr	r1, [pc, #220]	; (801324c <etharp_output+0x200>)
 801316e:	4603      	mov	r3, r0
 8013170:	005b      	lsls	r3, r3, #1
 8013172:	4403      	add	r3, r0
 8013174:	00db      	lsls	r3, r3, #3
 8013176:	440b      	add	r3, r1
 8013178:	3304      	adds	r3, #4
 801317a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801317c:	429a      	cmp	r2, r3
 801317e:	d108      	bne.n	8013192 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013180:	4b31      	ldr	r3, [pc, #196]	; (8013248 <etharp_output+0x1fc>)
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	461a      	mov	r2, r3
 8013186:	68b9      	ldr	r1, [r7, #8]
 8013188:	68f8      	ldr	r0, [r7, #12]
 801318a:	f7ff fec5 	bl	8012f18 <etharp_output_to_arp_index>
 801318e:	4603      	mov	r3, r0
 8013190:	e04a      	b.n	8013228 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013192:	2300      	movs	r3, #0
 8013194:	75fb      	strb	r3, [r7, #23]
 8013196:	e031      	b.n	80131fc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013198:	7dfa      	ldrb	r2, [r7, #23]
 801319a:	492c      	ldr	r1, [pc, #176]	; (801324c <etharp_output+0x200>)
 801319c:	4613      	mov	r3, r2
 801319e:	005b      	lsls	r3, r3, #1
 80131a0:	4413      	add	r3, r2
 80131a2:	00db      	lsls	r3, r3, #3
 80131a4:	440b      	add	r3, r1
 80131a6:	3314      	adds	r3, #20
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	2b01      	cmp	r3, #1
 80131ac:	d923      	bls.n	80131f6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80131ae:	7dfa      	ldrb	r2, [r7, #23]
 80131b0:	4926      	ldr	r1, [pc, #152]	; (801324c <etharp_output+0x200>)
 80131b2:	4613      	mov	r3, r2
 80131b4:	005b      	lsls	r3, r3, #1
 80131b6:	4413      	add	r3, r2
 80131b8:	00db      	lsls	r3, r3, #3
 80131ba:	440b      	add	r3, r1
 80131bc:	3308      	adds	r3, #8
 80131be:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80131c0:	68fa      	ldr	r2, [r7, #12]
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d117      	bne.n	80131f6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	6819      	ldr	r1, [r3, #0]
 80131ca:	7dfa      	ldrb	r2, [r7, #23]
 80131cc:	481f      	ldr	r0, [pc, #124]	; (801324c <etharp_output+0x200>)
 80131ce:	4613      	mov	r3, r2
 80131d0:	005b      	lsls	r3, r3, #1
 80131d2:	4413      	add	r3, r2
 80131d4:	00db      	lsls	r3, r3, #3
 80131d6:	4403      	add	r3, r0
 80131d8:	3304      	adds	r3, #4
 80131da:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80131dc:	4299      	cmp	r1, r3
 80131de:	d10a      	bne.n	80131f6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80131e0:	4a19      	ldr	r2, [pc, #100]	; (8013248 <etharp_output+0x1fc>)
 80131e2:	7dfb      	ldrb	r3, [r7, #23]
 80131e4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80131e6:	7dfb      	ldrb	r3, [r7, #23]
 80131e8:	461a      	mov	r2, r3
 80131ea:	68b9      	ldr	r1, [r7, #8]
 80131ec:	68f8      	ldr	r0, [r7, #12]
 80131ee:	f7ff fe93 	bl	8012f18 <etharp_output_to_arp_index>
 80131f2:	4603      	mov	r3, r0
 80131f4:	e018      	b.n	8013228 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80131f6:	7dfb      	ldrb	r3, [r7, #23]
 80131f8:	3301      	adds	r3, #1
 80131fa:	75fb      	strb	r3, [r7, #23]
 80131fc:	7dfb      	ldrb	r3, [r7, #23]
 80131fe:	2b09      	cmp	r3, #9
 8013200:	d9ca      	bls.n	8013198 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013202:	68ba      	ldr	r2, [r7, #8]
 8013204:	69b9      	ldr	r1, [r7, #24]
 8013206:	68f8      	ldr	r0, [r7, #12]
 8013208:	f000 f822 	bl	8013250 <etharp_query>
 801320c:	4603      	mov	r3, r0
 801320e:	e00b      	b.n	8013228 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8013216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801321a:	9300      	str	r3, [sp, #0]
 801321c:	69fb      	ldr	r3, [r7, #28]
 801321e:	68b9      	ldr	r1, [r7, #8]
 8013220:	68f8      	ldr	r0, [r7, #12]
 8013222:	f001 fd3f 	bl	8014ca4 <ethernet_output>
 8013226:	4603      	mov	r3, r0
}
 8013228:	4618      	mov	r0, r3
 801322a:	3720      	adds	r7, #32
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	0801f040 	.word	0x0801f040
 8013234:	0801f190 	.word	0x0801f190
 8013238:	0801f0b8 	.word	0x0801f0b8
 801323c:	0801f1e0 	.word	0x0801f1e0
 8013240:	0801f180 	.word	0x0801f180
 8013244:	0801f830 	.word	0x0801f830
 8013248:	20004bd0 	.word	0x20004bd0
 801324c:	20004ae0 	.word	0x20004ae0

08013250 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b08c      	sub	sp, #48	; 0x30
 8013254:	af02      	add	r7, sp, #8
 8013256:	60f8      	str	r0, [r7, #12]
 8013258:	60b9      	str	r1, [r7, #8]
 801325a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	3322      	adds	r3, #34	; 0x22
 8013260:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013262:	23ff      	movs	r3, #255	; 0xff
 8013264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013268:	2300      	movs	r3, #0
 801326a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	68f9      	ldr	r1, [r7, #12]
 8013272:	4618      	mov	r0, r3
 8013274:	f000 fe0e 	bl	8013e94 <ip4_addr_isbroadcast_u32>
 8013278:	4603      	mov	r3, r0
 801327a:	2b00      	cmp	r3, #0
 801327c:	d10c      	bne.n	8013298 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013286:	2be0      	cmp	r3, #224	; 0xe0
 8013288:	d006      	beq.n	8013298 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d003      	beq.n	8013298 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d102      	bne.n	801329e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013298:	f06f 030f 	mvn.w	r3, #15
 801329c:	e101      	b.n	80134a2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801329e:	68fa      	ldr	r2, [r7, #12]
 80132a0:	2101      	movs	r1, #1
 80132a2:	68b8      	ldr	r0, [r7, #8]
 80132a4:	f7ff fb60 	bl	8012968 <etharp_find_entry>
 80132a8:	4603      	mov	r3, r0
 80132aa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80132ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	da02      	bge.n	80132ba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80132b4:	8a7b      	ldrh	r3, [r7, #18]
 80132b6:	b25b      	sxtb	r3, r3
 80132b8:	e0f3      	b.n	80134a2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80132ba:	8a7b      	ldrh	r3, [r7, #18]
 80132bc:	2b7e      	cmp	r3, #126	; 0x7e
 80132be:	d906      	bls.n	80132ce <etharp_query+0x7e>
 80132c0:	4b7a      	ldr	r3, [pc, #488]	; (80134ac <etharp_query+0x25c>)
 80132c2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80132c6:	497a      	ldr	r1, [pc, #488]	; (80134b0 <etharp_query+0x260>)
 80132c8:	487a      	ldr	r0, [pc, #488]	; (80134b4 <etharp_query+0x264>)
 80132ca:	f002 f92d 	bl	8015528 <printf>
  i = (netif_addr_idx_t)i_err;
 80132ce:	8a7b      	ldrh	r3, [r7, #18]
 80132d0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80132d2:	7c7a      	ldrb	r2, [r7, #17]
 80132d4:	4978      	ldr	r1, [pc, #480]	; (80134b8 <etharp_query+0x268>)
 80132d6:	4613      	mov	r3, r2
 80132d8:	005b      	lsls	r3, r3, #1
 80132da:	4413      	add	r3, r2
 80132dc:	00db      	lsls	r3, r3, #3
 80132de:	440b      	add	r3, r1
 80132e0:	3314      	adds	r3, #20
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d115      	bne.n	8013314 <etharp_query+0xc4>
    is_new_entry = 1;
 80132e8:	2301      	movs	r3, #1
 80132ea:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80132ec:	7c7a      	ldrb	r2, [r7, #17]
 80132ee:	4972      	ldr	r1, [pc, #456]	; (80134b8 <etharp_query+0x268>)
 80132f0:	4613      	mov	r3, r2
 80132f2:	005b      	lsls	r3, r3, #1
 80132f4:	4413      	add	r3, r2
 80132f6:	00db      	lsls	r3, r3, #3
 80132f8:	440b      	add	r3, r1
 80132fa:	3314      	adds	r3, #20
 80132fc:	2201      	movs	r2, #1
 80132fe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013300:	7c7a      	ldrb	r2, [r7, #17]
 8013302:	496d      	ldr	r1, [pc, #436]	; (80134b8 <etharp_query+0x268>)
 8013304:	4613      	mov	r3, r2
 8013306:	005b      	lsls	r3, r3, #1
 8013308:	4413      	add	r3, r2
 801330a:	00db      	lsls	r3, r3, #3
 801330c:	440b      	add	r3, r1
 801330e:	3308      	adds	r3, #8
 8013310:	68fa      	ldr	r2, [r7, #12]
 8013312:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013314:	7c7a      	ldrb	r2, [r7, #17]
 8013316:	4968      	ldr	r1, [pc, #416]	; (80134b8 <etharp_query+0x268>)
 8013318:	4613      	mov	r3, r2
 801331a:	005b      	lsls	r3, r3, #1
 801331c:	4413      	add	r3, r2
 801331e:	00db      	lsls	r3, r3, #3
 8013320:	440b      	add	r3, r1
 8013322:	3314      	adds	r3, #20
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	2b01      	cmp	r3, #1
 8013328:	d011      	beq.n	801334e <etharp_query+0xfe>
 801332a:	7c7a      	ldrb	r2, [r7, #17]
 801332c:	4962      	ldr	r1, [pc, #392]	; (80134b8 <etharp_query+0x268>)
 801332e:	4613      	mov	r3, r2
 8013330:	005b      	lsls	r3, r3, #1
 8013332:	4413      	add	r3, r2
 8013334:	00db      	lsls	r3, r3, #3
 8013336:	440b      	add	r3, r1
 8013338:	3314      	adds	r3, #20
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	2b01      	cmp	r3, #1
 801333e:	d806      	bhi.n	801334e <etharp_query+0xfe>
 8013340:	4b5a      	ldr	r3, [pc, #360]	; (80134ac <etharp_query+0x25c>)
 8013342:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013346:	495d      	ldr	r1, [pc, #372]	; (80134bc <etharp_query+0x26c>)
 8013348:	485a      	ldr	r0, [pc, #360]	; (80134b4 <etharp_query+0x264>)
 801334a:	f002 f8ed 	bl	8015528 <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801334e:	6a3b      	ldr	r3, [r7, #32]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d102      	bne.n	801335a <etharp_query+0x10a>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d10c      	bne.n	8013374 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801335a:	68b9      	ldr	r1, [r7, #8]
 801335c:	68f8      	ldr	r0, [r7, #12]
 801335e:	f000 f963 	bl	8013628 <etharp_request>
 8013362:	4603      	mov	r3, r0
 8013364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d102      	bne.n	8013374 <etharp_query+0x124>
      return result;
 801336e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013372:	e096      	b.n	80134a2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d106      	bne.n	8013388 <etharp_query+0x138>
 801337a:	4b4c      	ldr	r3, [pc, #304]	; (80134ac <etharp_query+0x25c>)
 801337c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013380:	494f      	ldr	r1, [pc, #316]	; (80134c0 <etharp_query+0x270>)
 8013382:	484c      	ldr	r0, [pc, #304]	; (80134b4 <etharp_query+0x264>)
 8013384:	f002 f8d0 	bl	8015528 <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013388:	7c7a      	ldrb	r2, [r7, #17]
 801338a:	494b      	ldr	r1, [pc, #300]	; (80134b8 <etharp_query+0x268>)
 801338c:	4613      	mov	r3, r2
 801338e:	005b      	lsls	r3, r3, #1
 8013390:	4413      	add	r3, r2
 8013392:	00db      	lsls	r3, r3, #3
 8013394:	440b      	add	r3, r1
 8013396:	3314      	adds	r3, #20
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	2b01      	cmp	r3, #1
 801339c:	d917      	bls.n	80133ce <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801339e:	4a49      	ldr	r2, [pc, #292]	; (80134c4 <etharp_query+0x274>)
 80133a0:	7c7b      	ldrb	r3, [r7, #17]
 80133a2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80133a4:	7c7a      	ldrb	r2, [r7, #17]
 80133a6:	4613      	mov	r3, r2
 80133a8:	005b      	lsls	r3, r3, #1
 80133aa:	4413      	add	r3, r2
 80133ac:	00db      	lsls	r3, r3, #3
 80133ae:	3308      	adds	r3, #8
 80133b0:	4a41      	ldr	r2, [pc, #260]	; (80134b8 <etharp_query+0x268>)
 80133b2:	4413      	add	r3, r2
 80133b4:	3304      	adds	r3, #4
 80133b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80133ba:	9200      	str	r2, [sp, #0]
 80133bc:	697a      	ldr	r2, [r7, #20]
 80133be:	6879      	ldr	r1, [r7, #4]
 80133c0:	68f8      	ldr	r0, [r7, #12]
 80133c2:	f001 fc6f 	bl	8014ca4 <ethernet_output>
 80133c6:	4603      	mov	r3, r0
 80133c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80133cc:	e067      	b.n	801349e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80133ce:	7c7a      	ldrb	r2, [r7, #17]
 80133d0:	4939      	ldr	r1, [pc, #228]	; (80134b8 <etharp_query+0x268>)
 80133d2:	4613      	mov	r3, r2
 80133d4:	005b      	lsls	r3, r3, #1
 80133d6:	4413      	add	r3, r2
 80133d8:	00db      	lsls	r3, r3, #3
 80133da:	440b      	add	r3, r1
 80133dc:	3314      	adds	r3, #20
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	2b01      	cmp	r3, #1
 80133e2:	d15c      	bne.n	801349e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80133e4:	2300      	movs	r3, #0
 80133e6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 80133ec:	e01c      	b.n	8013428 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80133ee:	69fb      	ldr	r3, [r7, #28]
 80133f0:	895a      	ldrh	r2, [r3, #10]
 80133f2:	69fb      	ldr	r3, [r7, #28]
 80133f4:	891b      	ldrh	r3, [r3, #8]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d10a      	bne.n	8013410 <etharp_query+0x1c0>
 80133fa:	69fb      	ldr	r3, [r7, #28]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d006      	beq.n	8013410 <etharp_query+0x1c0>
 8013402:	4b2a      	ldr	r3, [pc, #168]	; (80134ac <etharp_query+0x25c>)
 8013404:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013408:	492f      	ldr	r1, [pc, #188]	; (80134c8 <etharp_query+0x278>)
 801340a:	482a      	ldr	r0, [pc, #168]	; (80134b4 <etharp_query+0x264>)
 801340c:	f002 f88c 	bl	8015528 <printf>
      if (PBUF_NEEDS_COPY(p)) {
 8013410:	69fb      	ldr	r3, [r7, #28]
 8013412:	7b1b      	ldrb	r3, [r3, #12]
 8013414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013418:	2b00      	cmp	r3, #0
 801341a:	d002      	beq.n	8013422 <etharp_query+0x1d2>
        copy_needed = 1;
 801341c:	2301      	movs	r3, #1
 801341e:	61bb      	str	r3, [r7, #24]
        break;
 8013420:	e005      	b.n	801342e <etharp_query+0x1de>
      }
      p = p->next;
 8013422:	69fb      	ldr	r3, [r7, #28]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013428:	69fb      	ldr	r3, [r7, #28]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d1df      	bne.n	80133ee <etharp_query+0x19e>
    }
    if (copy_needed) {
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d007      	beq.n	8013444 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013434:	687a      	ldr	r2, [r7, #4]
 8013436:	f44f 7120 	mov.w	r1, #640	; 0x280
 801343a:	200e      	movs	r0, #14
 801343c:	f7f9 fcfc 	bl	800ce38 <pbuf_clone>
 8013440:	61f8      	str	r0, [r7, #28]
 8013442:	e004      	b.n	801344e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013448:	69f8      	ldr	r0, [r7, #28]
 801344a:	f7f9 fb33 	bl	800cab4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d021      	beq.n	8013498 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013454:	7c7a      	ldrb	r2, [r7, #17]
 8013456:	4918      	ldr	r1, [pc, #96]	; (80134b8 <etharp_query+0x268>)
 8013458:	4613      	mov	r3, r2
 801345a:	005b      	lsls	r3, r3, #1
 801345c:	4413      	add	r3, r2
 801345e:	00db      	lsls	r3, r3, #3
 8013460:	440b      	add	r3, r1
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d00a      	beq.n	801347e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013468:	7c7a      	ldrb	r2, [r7, #17]
 801346a:	4913      	ldr	r1, [pc, #76]	; (80134b8 <etharp_query+0x268>)
 801346c:	4613      	mov	r3, r2
 801346e:	005b      	lsls	r3, r3, #1
 8013470:	4413      	add	r3, r2
 8013472:	00db      	lsls	r3, r3, #3
 8013474:	440b      	add	r3, r1
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	4618      	mov	r0, r3
 801347a:	f7f9 fa75 	bl	800c968 <pbuf_free>
      }
      arp_table[i].q = p;
 801347e:	7c7a      	ldrb	r2, [r7, #17]
 8013480:	490d      	ldr	r1, [pc, #52]	; (80134b8 <etharp_query+0x268>)
 8013482:	4613      	mov	r3, r2
 8013484:	005b      	lsls	r3, r3, #1
 8013486:	4413      	add	r3, r2
 8013488:	00db      	lsls	r3, r3, #3
 801348a:	440b      	add	r3, r1
 801348c:	69fa      	ldr	r2, [r7, #28]
 801348e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013490:	2300      	movs	r3, #0
 8013492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013496:	e002      	b.n	801349e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013498:	23ff      	movs	r3, #255	; 0xff
 801349a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801349e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3728      	adds	r7, #40	; 0x28
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	0801f040 	.word	0x0801f040
 80134b0:	0801f1ec 	.word	0x0801f1ec
 80134b4:	0801f0b8 	.word	0x0801f0b8
 80134b8:	20004ae0 	.word	0x20004ae0
 80134bc:	0801f1fc 	.word	0x0801f1fc
 80134c0:	0801f1e0 	.word	0x0801f1e0
 80134c4:	20004bd0 	.word	0x20004bd0
 80134c8:	0801f224 	.word	0x0801f224

080134cc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b08a      	sub	sp, #40	; 0x28
 80134d0:	af02      	add	r7, sp, #8
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	607a      	str	r2, [r7, #4]
 80134d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80134da:	2300      	movs	r3, #0
 80134dc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d106      	bne.n	80134f2 <etharp_raw+0x26>
 80134e4:	4b3a      	ldr	r3, [pc, #232]	; (80135d0 <etharp_raw+0x104>)
 80134e6:	f240 4257 	movw	r2, #1111	; 0x457
 80134ea:	493a      	ldr	r1, [pc, #232]	; (80135d4 <etharp_raw+0x108>)
 80134ec:	483a      	ldr	r0, [pc, #232]	; (80135d8 <etharp_raw+0x10c>)
 80134ee:	f002 f81b 	bl	8015528 <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80134f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134f6:	211c      	movs	r1, #28
 80134f8:	200e      	movs	r0, #14
 80134fa:	f7f8 ff51 	bl	800c3a0 <pbuf_alloc>
 80134fe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013500:	69bb      	ldr	r3, [r7, #24]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d102      	bne.n	801350c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013506:	f04f 33ff 	mov.w	r3, #4294967295
 801350a:	e05d      	b.n	80135c8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801350c:	69bb      	ldr	r3, [r7, #24]
 801350e:	895b      	ldrh	r3, [r3, #10]
 8013510:	2b1b      	cmp	r3, #27
 8013512:	d806      	bhi.n	8013522 <etharp_raw+0x56>
 8013514:	4b2e      	ldr	r3, [pc, #184]	; (80135d0 <etharp_raw+0x104>)
 8013516:	f240 4262 	movw	r2, #1122	; 0x462
 801351a:	4930      	ldr	r1, [pc, #192]	; (80135dc <etharp_raw+0x110>)
 801351c:	482e      	ldr	r0, [pc, #184]	; (80135d8 <etharp_raw+0x10c>)
 801351e:	f002 f803 	bl	8015528 <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013522:	69bb      	ldr	r3, [r7, #24]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013528:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801352a:	4618      	mov	r0, r3
 801352c:	f7f7 fee8 	bl	800b300 <lwip_htons>
 8013530:	4603      	mov	r3, r0
 8013532:	461a      	mov	r2, r3
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801353e:	2b06      	cmp	r3, #6
 8013540:	d006      	beq.n	8013550 <etharp_raw+0x84>
 8013542:	4b23      	ldr	r3, [pc, #140]	; (80135d0 <etharp_raw+0x104>)
 8013544:	f240 4269 	movw	r2, #1129	; 0x469
 8013548:	4925      	ldr	r1, [pc, #148]	; (80135e0 <etharp_raw+0x114>)
 801354a:	4823      	ldr	r0, [pc, #140]	; (80135d8 <etharp_raw+0x10c>)
 801354c:	f001 ffec 	bl	8015528 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	3308      	adds	r3, #8
 8013554:	2206      	movs	r2, #6
 8013556:	6839      	ldr	r1, [r7, #0]
 8013558:	4618      	mov	r0, r3
 801355a:	f001 fd37 	bl	8014fcc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	3312      	adds	r3, #18
 8013562:	2206      	movs	r2, #6
 8013564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013566:	4618      	mov	r0, r3
 8013568:	f001 fd30 	bl	8014fcc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	330e      	adds	r3, #14
 8013570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013572:	6812      	ldr	r2, [r2, #0]
 8013574:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	3318      	adds	r3, #24
 801357a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801357c:	6812      	ldr	r2, [r2, #0]
 801357e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	2200      	movs	r2, #0
 8013584:	701a      	strb	r2, [r3, #0]
 8013586:	2200      	movs	r2, #0
 8013588:	f042 0201 	orr.w	r2, r2, #1
 801358c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	2200      	movs	r2, #0
 8013592:	f042 0208 	orr.w	r2, r2, #8
 8013596:	709a      	strb	r2, [r3, #2]
 8013598:	2200      	movs	r2, #0
 801359a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	2206      	movs	r2, #6
 80135a0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	2204      	movs	r2, #4
 80135a6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80135a8:	f640 0306 	movw	r3, #2054	; 0x806
 80135ac:	9300      	str	r3, [sp, #0]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	68ba      	ldr	r2, [r7, #8]
 80135b2:	69b9      	ldr	r1, [r7, #24]
 80135b4:	68f8      	ldr	r0, [r7, #12]
 80135b6:	f001 fb75 	bl	8014ca4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80135ba:	69b8      	ldr	r0, [r7, #24]
 80135bc:	f7f9 f9d4 	bl	800c968 <pbuf_free>
  p = NULL;
 80135c0:	2300      	movs	r3, #0
 80135c2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80135c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3720      	adds	r7, #32
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}
 80135d0:	0801f040 	.word	0x0801f040
 80135d4:	0801f190 	.word	0x0801f190
 80135d8:	0801f0b8 	.word	0x0801f0b8
 80135dc:	0801f240 	.word	0x0801f240
 80135e0:	0801f274 	.word	0x0801f274

080135e4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b088      	sub	sp, #32
 80135e8:	af04      	add	r7, sp, #16
 80135ea:	60f8      	str	r0, [r7, #12]
 80135ec:	60b9      	str	r1, [r7, #8]
 80135ee:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	f103 0022 	add.w	r0, r3, #34	; 0x22
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013600:	2201      	movs	r2, #1
 8013602:	9203      	str	r2, [sp, #12]
 8013604:	68ba      	ldr	r2, [r7, #8]
 8013606:	9202      	str	r2, [sp, #8]
 8013608:	4a06      	ldr	r2, [pc, #24]	; (8013624 <etharp_request_dst+0x40>)
 801360a:	9201      	str	r2, [sp, #4]
 801360c:	9300      	str	r3, [sp, #0]
 801360e:	4603      	mov	r3, r0
 8013610:	687a      	ldr	r2, [r7, #4]
 8013612:	68f8      	ldr	r0, [r7, #12]
 8013614:	f7ff ff5a 	bl	80134cc <etharp_raw>
 8013618:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801361a:	4618      	mov	r0, r3
 801361c:	3710      	adds	r7, #16
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	0801f838 	.word	0x0801f838

08013628 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b082      	sub	sp, #8
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013632:	4a05      	ldr	r2, [pc, #20]	; (8013648 <etharp_request+0x20>)
 8013634:	6839      	ldr	r1, [r7, #0]
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f7ff ffd4 	bl	80135e4 <etharp_request_dst>
 801363c:	4603      	mov	r3, r0
}
 801363e:	4618      	mov	r0, r3
 8013640:	3708      	adds	r7, #8
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	0801f830 	.word	0x0801f830

0801364c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b08e      	sub	sp, #56	; 0x38
 8013650:	af04      	add	r7, sp, #16
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013656:	4b79      	ldr	r3, [pc, #484]	; (801383c <icmp_input+0x1f0>)
 8013658:	689b      	ldr	r3, [r3, #8]
 801365a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365e:	781b      	ldrb	r3, [r3, #0]
 8013660:	f003 030f 	and.w	r3, r3, #15
 8013664:	b2db      	uxtb	r3, r3
 8013666:	009b      	lsls	r3, r3, #2
 8013668:	b2db      	uxtb	r3, r3
 801366a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801366c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801366e:	2b13      	cmp	r3, #19
 8013670:	f240 80cd 	bls.w	801380e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	895b      	ldrh	r3, [r3, #10]
 8013678:	2b03      	cmp	r3, #3
 801367a:	f240 80ca 	bls.w	8013812 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	781b      	ldrb	r3, [r3, #0]
 8013684:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013688:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801368c:	2b00      	cmp	r3, #0
 801368e:	f000 80b7 	beq.w	8013800 <icmp_input+0x1b4>
 8013692:	2b08      	cmp	r3, #8
 8013694:	f040 80b7 	bne.w	8013806 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013698:	4b69      	ldr	r3, [pc, #420]	; (8013840 <icmp_input+0x1f4>)
 801369a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801369c:	4b67      	ldr	r3, [pc, #412]	; (801383c <icmp_input+0x1f0>)
 801369e:	695b      	ldr	r3, [r3, #20]
 80136a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80136a4:	2be0      	cmp	r3, #224	; 0xe0
 80136a6:	f000 80bb 	beq.w	8013820 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80136aa:	4b64      	ldr	r3, [pc, #400]	; (801383c <icmp_input+0x1f0>)
 80136ac:	695b      	ldr	r3, [r3, #20]
 80136ae:	4a63      	ldr	r2, [pc, #396]	; (801383c <icmp_input+0x1f0>)
 80136b0:	6812      	ldr	r2, [r2, #0]
 80136b2:	4611      	mov	r1, r2
 80136b4:	4618      	mov	r0, r3
 80136b6:	f000 fbed 	bl	8013e94 <ip4_addr_isbroadcast_u32>
 80136ba:	4603      	mov	r3, r0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	f040 80b1 	bne.w	8013824 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	891b      	ldrh	r3, [r3, #8]
 80136c6:	2b07      	cmp	r3, #7
 80136c8:	f240 80a5 	bls.w	8013816 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80136cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136ce:	330e      	adds	r3, #14
 80136d0:	4619      	mov	r1, r3
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f7f9 f8b2 	bl	800c83c <pbuf_add_header>
 80136d8:	4603      	mov	r3, r0
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d04b      	beq.n	8013776 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	891a      	ldrh	r2, [r3, #8]
 80136e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136e4:	4413      	add	r3, r2
 80136e6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	891b      	ldrh	r3, [r3, #8]
 80136ec:	8b7a      	ldrh	r2, [r7, #26]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	f0c0 809a 	bcc.w	8013828 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80136f4:	8b7b      	ldrh	r3, [r7, #26]
 80136f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80136fa:	4619      	mov	r1, r3
 80136fc:	200e      	movs	r0, #14
 80136fe:	f7f8 fe4f 	bl	800c3a0 <pbuf_alloc>
 8013702:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	2b00      	cmp	r3, #0
 8013708:	f000 8090 	beq.w	801382c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	895b      	ldrh	r3, [r3, #10]
 8013710:	461a      	mov	r2, r3
 8013712:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013714:	3308      	adds	r3, #8
 8013716:	429a      	cmp	r2, r3
 8013718:	d203      	bcs.n	8013722 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801371a:	6978      	ldr	r0, [r7, #20]
 801371c:	f7f9 f924 	bl	800c968 <pbuf_free>
          goto icmperr;
 8013720:	e085      	b.n	801382e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801372a:	4618      	mov	r0, r3
 801372c:	f001 fc4e 	bl	8014fcc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013730:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013732:	4619      	mov	r1, r3
 8013734:	6978      	ldr	r0, [r7, #20]
 8013736:	f7f9 f891 	bl	800c85c <pbuf_remove_header>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	d009      	beq.n	8013754 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013740:	4b40      	ldr	r3, [pc, #256]	; (8013844 <icmp_input+0x1f8>)
 8013742:	22b6      	movs	r2, #182	; 0xb6
 8013744:	4940      	ldr	r1, [pc, #256]	; (8013848 <icmp_input+0x1fc>)
 8013746:	4841      	ldr	r0, [pc, #260]	; (801384c <icmp_input+0x200>)
 8013748:	f001 feee 	bl	8015528 <printf>
          pbuf_free(r);
 801374c:	6978      	ldr	r0, [r7, #20]
 801374e:	f7f9 f90b 	bl	800c968 <pbuf_free>
          goto icmperr;
 8013752:	e06c      	b.n	801382e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013754:	6879      	ldr	r1, [r7, #4]
 8013756:	6978      	ldr	r0, [r7, #20]
 8013758:	f7f9 fa2a 	bl	800cbb0 <pbuf_copy>
 801375c:	4603      	mov	r3, r0
 801375e:	2b00      	cmp	r3, #0
 8013760:	d003      	beq.n	801376a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013762:	6978      	ldr	r0, [r7, #20]
 8013764:	f7f9 f900 	bl	800c968 <pbuf_free>
          goto icmperr;
 8013768:	e061      	b.n	801382e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f7f9 f8fc 	bl	800c968 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	607b      	str	r3, [r7, #4]
 8013774:	e00f      	b.n	8013796 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013778:	330e      	adds	r3, #14
 801377a:	4619      	mov	r1, r3
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f7f9 f86d 	bl	800c85c <pbuf_remove_header>
 8013782:	4603      	mov	r3, r0
 8013784:	2b00      	cmp	r3, #0
 8013786:	d006      	beq.n	8013796 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013788:	4b2e      	ldr	r3, [pc, #184]	; (8013844 <icmp_input+0x1f8>)
 801378a:	22c7      	movs	r2, #199	; 0xc7
 801378c:	4930      	ldr	r1, [pc, #192]	; (8013850 <icmp_input+0x204>)
 801378e:	482f      	ldr	r0, [pc, #188]	; (801384c <icmp_input+0x200>)
 8013790:	f001 feca 	bl	8015528 <printf>
          goto icmperr;
 8013794:	e04b      	b.n	801382e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801379c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801379e:	4619      	mov	r1, r3
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f7f9 f84b 	bl	800c83c <pbuf_add_header>
 80137a6:	4603      	mov	r3, r0
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d12b      	bne.n	8013804 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	685b      	ldr	r3, [r3, #4]
 80137b0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80137b2:	69fb      	ldr	r3, [r7, #28]
 80137b4:	681a      	ldr	r2, [r3, #0]
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80137ba:	4b20      	ldr	r3, [pc, #128]	; (801383c <icmp_input+0x1f0>)
 80137bc:	691a      	ldr	r2, [r3, #16]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80137c2:	693b      	ldr	r3, [r7, #16]
 80137c4:	2200      	movs	r2, #0
 80137c6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80137c8:	693b      	ldr	r3, [r7, #16]
 80137ca:	2200      	movs	r2, #0
 80137cc:	709a      	strb	r2, [r3, #2]
 80137ce:	2200      	movs	r2, #0
 80137d0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	22ff      	movs	r2, #255	; 0xff
 80137d6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	2200      	movs	r2, #0
 80137dc:	729a      	strb	r2, [r3, #10]
 80137de:	2200      	movs	r2, #0
 80137e0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	9302      	str	r3, [sp, #8]
 80137e6:	2301      	movs	r3, #1
 80137e8:	9301      	str	r3, [sp, #4]
 80137ea:	2300      	movs	r3, #0
 80137ec:	9300      	str	r3, [sp, #0]
 80137ee:	23ff      	movs	r3, #255	; 0xff
 80137f0:	2200      	movs	r2, #0
 80137f2:	69f9      	ldr	r1, [r7, #28]
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f000 fa75 	bl	8013ce4 <ip4_output_if>
 80137fa:	4603      	mov	r3, r0
 80137fc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80137fe:	e001      	b.n	8013804 <icmp_input+0x1b8>
      break;
 8013800:	bf00      	nop
 8013802:	e000      	b.n	8013806 <icmp_input+0x1ba>
      break;
 8013804:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013806:	6878      	ldr	r0, [r7, #4]
 8013808:	f7f9 f8ae 	bl	800c968 <pbuf_free>
  return;
 801380c:	e013      	b.n	8013836 <icmp_input+0x1ea>
    goto lenerr;
 801380e:	bf00      	nop
 8013810:	e002      	b.n	8013818 <icmp_input+0x1cc>
    goto lenerr;
 8013812:	bf00      	nop
 8013814:	e000      	b.n	8013818 <icmp_input+0x1cc>
        goto lenerr;
 8013816:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013818:	6878      	ldr	r0, [r7, #4]
 801381a:	f7f9 f8a5 	bl	800c968 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801381e:	e00a      	b.n	8013836 <icmp_input+0x1ea>
        goto icmperr;
 8013820:	bf00      	nop
 8013822:	e004      	b.n	801382e <icmp_input+0x1e2>
        goto icmperr;
 8013824:	bf00      	nop
 8013826:	e002      	b.n	801382e <icmp_input+0x1e2>
          goto icmperr;
 8013828:	bf00      	nop
 801382a:	e000      	b.n	801382e <icmp_input+0x1e2>
          goto icmperr;
 801382c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801382e:	6878      	ldr	r0, [r7, #4]
 8013830:	f7f9 f89a 	bl	800c968 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013834:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013836:	3728      	adds	r7, #40	; 0x28
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	20007f24 	.word	0x20007f24
 8013840:	20007f38 	.word	0x20007f38
 8013844:	0801f2b8 	.word	0x0801f2b8
 8013848:	0801f2f0 	.word	0x0801f2f0
 801384c:	0801f328 	.word	0x0801f328
 8013850:	0801f350 	.word	0x0801f350

08013854 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	460b      	mov	r3, r1
 801385e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013860:	78fb      	ldrb	r3, [r7, #3]
 8013862:	461a      	mov	r2, r3
 8013864:	2103      	movs	r1, #3
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f000 f814 	bl	8013894 <icmp_send_response>
}
 801386c:	bf00      	nop
 801386e:	3708      	adds	r7, #8
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}

08013874 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b082      	sub	sp, #8
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	460b      	mov	r3, r1
 801387e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013880:	78fb      	ldrb	r3, [r7, #3]
 8013882:	461a      	mov	r2, r3
 8013884:	210b      	movs	r1, #11
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f000 f804 	bl	8013894 <icmp_send_response>
}
 801388c:	bf00      	nop
 801388e:	3708      	adds	r7, #8
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}

08013894 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b08c      	sub	sp, #48	; 0x30
 8013898:	af04      	add	r7, sp, #16
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	460b      	mov	r3, r1
 801389e:	70fb      	strb	r3, [r7, #3]
 80138a0:	4613      	mov	r3, r2
 80138a2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80138a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80138a8:	2124      	movs	r1, #36	; 0x24
 80138aa:	2022      	movs	r0, #34	; 0x22
 80138ac:	f7f8 fd78 	bl	800c3a0 <pbuf_alloc>
 80138b0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80138b2:	69fb      	ldr	r3, [r7, #28]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d04c      	beq.n	8013952 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	895b      	ldrh	r3, [r3, #10]
 80138bc:	2b23      	cmp	r3, #35	; 0x23
 80138be:	d806      	bhi.n	80138ce <icmp_send_response+0x3a>
 80138c0:	4b26      	ldr	r3, [pc, #152]	; (801395c <icmp_send_response+0xc8>)
 80138c2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80138c6:	4926      	ldr	r1, [pc, #152]	; (8013960 <icmp_send_response+0xcc>)
 80138c8:	4826      	ldr	r0, [pc, #152]	; (8013964 <icmp_send_response+0xd0>)
 80138ca:	f001 fe2d 	bl	8015528 <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80138da:	697b      	ldr	r3, [r7, #20]
 80138dc:	78fa      	ldrb	r2, [r7, #3]
 80138de:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	78ba      	ldrb	r2, [r7, #2]
 80138e4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	2200      	movs	r2, #0
 80138ea:	711a      	strb	r2, [r3, #4]
 80138ec:	2200      	movs	r2, #0
 80138ee:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	2200      	movs	r2, #0
 80138f4:	719a      	strb	r2, [r3, #6]
 80138f6:	2200      	movs	r2, #0
 80138f8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80138fa:	69fb      	ldr	r3, [r7, #28]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	f103 0008 	add.w	r0, r3, #8
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	685b      	ldr	r3, [r3, #4]
 8013906:	221c      	movs	r2, #28
 8013908:	4619      	mov	r1, r3
 801390a:	f001 fb5f 	bl	8014fcc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801390e:	69bb      	ldr	r3, [r7, #24]
 8013910:	68db      	ldr	r3, [r3, #12]
 8013912:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013914:	f107 030c 	add.w	r3, r7, #12
 8013918:	4618      	mov	r0, r3
 801391a:	f000 f825 	bl	8013968 <ip4_route>
 801391e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d011      	beq.n	801394a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	2200      	movs	r2, #0
 801392a:	709a      	strb	r2, [r3, #2]
 801392c:	2200      	movs	r2, #0
 801392e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013930:	f107 020c 	add.w	r2, r7, #12
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	9302      	str	r3, [sp, #8]
 8013938:	2301      	movs	r3, #1
 801393a:	9301      	str	r3, [sp, #4]
 801393c:	2300      	movs	r3, #0
 801393e:	9300      	str	r3, [sp, #0]
 8013940:	23ff      	movs	r3, #255	; 0xff
 8013942:	2100      	movs	r1, #0
 8013944:	69f8      	ldr	r0, [r7, #28]
 8013946:	f000 f9cd 	bl	8013ce4 <ip4_output_if>
  }
  pbuf_free(q);
 801394a:	69f8      	ldr	r0, [r7, #28]
 801394c:	f7f9 f80c 	bl	800c968 <pbuf_free>
 8013950:	e000      	b.n	8013954 <icmp_send_response+0xc0>
    return;
 8013952:	bf00      	nop
}
 8013954:	3720      	adds	r7, #32
 8013956:	46bd      	mov	sp, r7
 8013958:	bd80      	pop	{r7, pc}
 801395a:	bf00      	nop
 801395c:	0801f2b8 	.word	0x0801f2b8
 8013960:	0801f384 	.word	0x0801f384
 8013964:	0801f328 	.word	0x0801f328

08013968 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013968:	b480      	push	{r7}
 801396a:	b085      	sub	sp, #20
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013970:	4b33      	ldr	r3, [pc, #204]	; (8013a40 <ip4_route+0xd8>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	60fb      	str	r3, [r7, #12]
 8013976:	e036      	b.n	80139e6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801397e:	f003 0301 	and.w	r3, r3, #1
 8013982:	b2db      	uxtb	r3, r3
 8013984:	2b00      	cmp	r3, #0
 8013986:	d02b      	beq.n	80139e0 <ip4_route+0x78>
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801398e:	089b      	lsrs	r3, r3, #2
 8013990:	f003 0301 	and.w	r3, r3, #1
 8013994:	b2db      	uxtb	r3, r3
 8013996:	2b00      	cmp	r3, #0
 8013998:	d022      	beq.n	80139e0 <ip4_route+0x78>
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	3304      	adds	r3, #4
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d01d      	beq.n	80139e0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681a      	ldr	r2, [r3, #0]
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	3304      	adds	r3, #4
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	405a      	eors	r2, r3
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	3308      	adds	r3, #8
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	4013      	ands	r3, r2
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d101      	bne.n	80139c0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	e038      	b.n	8013a32 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80139c6:	f003 0302 	and.w	r3, r3, #2
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d108      	bne.n	80139e0 <ip4_route+0x78>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681a      	ldr	r2, [r3, #0]
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	330c      	adds	r3, #12
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	429a      	cmp	r2, r3
 80139da:	d101      	bne.n	80139e0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	e028      	b.n	8013a32 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	60fb      	str	r3, [r7, #12]
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d1c5      	bne.n	8013978 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80139ec:	4b15      	ldr	r3, [pc, #84]	; (8013a44 <ip4_route+0xdc>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d01a      	beq.n	8013a2a <ip4_route+0xc2>
 80139f4:	4b13      	ldr	r3, [pc, #76]	; (8013a44 <ip4_route+0xdc>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80139fc:	f003 0301 	and.w	r3, r3, #1
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d012      	beq.n	8013a2a <ip4_route+0xc2>
 8013a04:	4b0f      	ldr	r3, [pc, #60]	; (8013a44 <ip4_route+0xdc>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013a0c:	f003 0304 	and.w	r3, r3, #4
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d00a      	beq.n	8013a2a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013a14:	4b0b      	ldr	r3, [pc, #44]	; (8013a44 <ip4_route+0xdc>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	3304      	adds	r3, #4
 8013a1a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d004      	beq.n	8013a2a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	b2db      	uxtb	r3, r3
 8013a26:	2b7f      	cmp	r3, #127	; 0x7f
 8013a28:	d101      	bne.n	8013a2e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	e001      	b.n	8013a32 <ip4_route+0xca>
  }

  return netif_default;
 8013a2e:	4b05      	ldr	r3, [pc, #20]	; (8013a44 <ip4_route+0xdc>)
 8013a30:	681b      	ldr	r3, [r3, #0]
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3714      	adds	r7, #20
 8013a36:	46bd      	mov	sp, r7
 8013a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3c:	4770      	bx	lr
 8013a3e:	bf00      	nop
 8013a40:	2000b628 	.word	0x2000b628
 8013a44:	2000b62c 	.word	0x2000b62c

08013a48 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013a56:	f003 0301 	and.w	r3, r3, #1
 8013a5a:	b2db      	uxtb	r3, r3
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d016      	beq.n	8013a8e <ip4_input_accept+0x46>
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	3304      	adds	r3, #4
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d011      	beq.n	8013a8e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a6a:	4b0b      	ldr	r3, [pc, #44]	; (8013a98 <ip4_input_accept+0x50>)
 8013a6c:	695a      	ldr	r2, [r3, #20]
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	3304      	adds	r3, #4
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d008      	beq.n	8013a8a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013a78:	4b07      	ldr	r3, [pc, #28]	; (8013a98 <ip4_input_accept+0x50>)
 8013a7a:	695b      	ldr	r3, [r3, #20]
 8013a7c:	6879      	ldr	r1, [r7, #4]
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f000 fa08 	bl	8013e94 <ip4_addr_isbroadcast_u32>
 8013a84:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d001      	beq.n	8013a8e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	e000      	b.n	8013a90 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013a8e:	2300      	movs	r3, #0
}
 8013a90:	4618      	mov	r0, r3
 8013a92:	3708      	adds	r7, #8
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}
 8013a98:	20007f24 	.word	0x20007f24

08013a9c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b086      	sub	sp, #24
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
 8013aa4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013aac:	697b      	ldr	r3, [r7, #20]
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	091b      	lsrs	r3, r3, #4
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	2b04      	cmp	r3, #4
 8013ab6:	d004      	beq.n	8013ac2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f7f8 ff55 	bl	800c968 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	e107      	b.n	8013cd2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	781b      	ldrb	r3, [r3, #0]
 8013ac6:	f003 030f 	and.w	r3, r3, #15
 8013aca:	b2db      	uxtb	r3, r3
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	885b      	ldrh	r3, [r3, #2]
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7f7 fc11 	bl	800b300 <lwip_htons>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	891b      	ldrh	r3, [r3, #8]
 8013ae6:	89ba      	ldrh	r2, [r7, #12]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d204      	bcs.n	8013af6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013aec:	89bb      	ldrh	r3, [r7, #12]
 8013aee:	4619      	mov	r1, r3
 8013af0:	6878      	ldr	r0, [r7, #4]
 8013af2:	f7f8 fdb3 	bl	800c65c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	895b      	ldrh	r3, [r3, #10]
 8013afa:	89fa      	ldrh	r2, [r7, #14]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d807      	bhi.n	8013b10 <ip4_input+0x74>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	891b      	ldrh	r3, [r3, #8]
 8013b04:	89ba      	ldrh	r2, [r7, #12]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d802      	bhi.n	8013b10 <ip4_input+0x74>
 8013b0a:	89fb      	ldrh	r3, [r7, #14]
 8013b0c:	2b13      	cmp	r3, #19
 8013b0e:	d804      	bhi.n	8013b1a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7f8 ff29 	bl	800c968 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013b16:	2300      	movs	r3, #0
 8013b18:	e0db      	b.n	8013cd2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	691b      	ldr	r3, [r3, #16]
 8013b1e:	4a6f      	ldr	r2, [pc, #444]	; (8013cdc <ip4_input+0x240>)
 8013b20:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	68db      	ldr	r3, [r3, #12]
 8013b26:	4a6d      	ldr	r2, [pc, #436]	; (8013cdc <ip4_input+0x240>)
 8013b28:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013b2a:	4b6c      	ldr	r3, [pc, #432]	; (8013cdc <ip4_input+0x240>)
 8013b2c:	695b      	ldr	r3, [r3, #20]
 8013b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b32:	2be0      	cmp	r3, #224	; 0xe0
 8013b34:	d112      	bne.n	8013b5c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013b3c:	f003 0301 	and.w	r3, r3, #1
 8013b40:	b2db      	uxtb	r3, r3
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d007      	beq.n	8013b56 <ip4_input+0xba>
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	3304      	adds	r3, #4
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d002      	beq.n	8013b56 <ip4_input+0xba>
      netif = inp;
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	613b      	str	r3, [r7, #16]
 8013b54:	e02a      	b.n	8013bac <ip4_input+0x110>
    } else {
      netif = NULL;
 8013b56:	2300      	movs	r3, #0
 8013b58:	613b      	str	r3, [r7, #16]
 8013b5a:	e027      	b.n	8013bac <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013b5c:	6838      	ldr	r0, [r7, #0]
 8013b5e:	f7ff ff73 	bl	8013a48 <ip4_input_accept>
 8013b62:	4603      	mov	r3, r0
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d002      	beq.n	8013b6e <ip4_input+0xd2>
      netif = inp;
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	613b      	str	r3, [r7, #16]
 8013b6c:	e01e      	b.n	8013bac <ip4_input+0x110>
    } else {
      netif = NULL;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013b72:	4b5a      	ldr	r3, [pc, #360]	; (8013cdc <ip4_input+0x240>)
 8013b74:	695b      	ldr	r3, [r3, #20]
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	2b7f      	cmp	r3, #127	; 0x7f
 8013b7a:	d017      	beq.n	8013bac <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013b7c:	4b58      	ldr	r3, [pc, #352]	; (8013ce0 <ip4_input+0x244>)
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	613b      	str	r3, [r7, #16]
 8013b82:	e00e      	b.n	8013ba2 <ip4_input+0x106>
          if (netif == inp) {
 8013b84:	693a      	ldr	r2, [r7, #16]
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d006      	beq.n	8013b9a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013b8c:	6938      	ldr	r0, [r7, #16]
 8013b8e:	f7ff ff5b 	bl	8013a48 <ip4_input_accept>
 8013b92:	4603      	mov	r3, r0
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d108      	bne.n	8013baa <ip4_input+0x10e>
 8013b98:	e000      	b.n	8013b9c <ip4_input+0x100>
            continue;
 8013b9a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	613b      	str	r3, [r7, #16]
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d1ed      	bne.n	8013b84 <ip4_input+0xe8>
 8013ba8:	e000      	b.n	8013bac <ip4_input+0x110>
            break;
 8013baa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013bac:	4b4b      	ldr	r3, [pc, #300]	; (8013cdc <ip4_input+0x240>)
 8013bae:	691b      	ldr	r3, [r3, #16]
 8013bb0:	6839      	ldr	r1, [r7, #0]
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f000 f96e 	bl	8013e94 <ip4_addr_isbroadcast_u32>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d105      	bne.n	8013bca <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013bbe:	4b47      	ldr	r3, [pc, #284]	; (8013cdc <ip4_input+0x240>)
 8013bc0:	691b      	ldr	r3, [r3, #16]
 8013bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013bc6:	2be0      	cmp	r3, #224	; 0xe0
 8013bc8:	d104      	bne.n	8013bd4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f7f8 fecc 	bl	800c968 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	e07e      	b.n	8013cd2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d104      	bne.n	8013be4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f7f8 fec4 	bl	800c968 <pbuf_free>
    return ERR_OK;
 8013be0:	2300      	movs	r3, #0
 8013be2:	e076      	b.n	8013cd2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	88db      	ldrh	r3, [r3, #6]
 8013be8:	b29b      	uxth	r3, r3
 8013bea:	461a      	mov	r2, r3
 8013bec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013bf0:	4013      	ands	r3, r2
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d00b      	beq.n	8013c0e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f000 fc92 	bl	8014520 <ip4_reass>
 8013bfc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d101      	bne.n	8013c08 <ip4_input+0x16c>
      return ERR_OK;
 8013c04:	2300      	movs	r3, #0
 8013c06:	e064      	b.n	8013cd2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	685b      	ldr	r3, [r3, #4]
 8013c0c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013c0e:	4a33      	ldr	r2, [pc, #204]	; (8013cdc <ip4_input+0x240>)
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013c14:	4a31      	ldr	r2, [pc, #196]	; (8013cdc <ip4_input+0x240>)
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013c1a:	4a30      	ldr	r2, [pc, #192]	; (8013cdc <ip4_input+0x240>)
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	f003 030f 	and.w	r3, r3, #15
 8013c28:	b2db      	uxtb	r3, r3
 8013c2a:	009b      	lsls	r3, r3, #2
 8013c2c:	b2db      	uxtb	r3, r3
 8013c2e:	b29a      	uxth	r2, r3
 8013c30:	4b2a      	ldr	r3, [pc, #168]	; (8013cdc <ip4_input+0x240>)
 8013c32:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013c34:	89fb      	ldrh	r3, [r7, #14]
 8013c36:	4619      	mov	r1, r3
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f7f8 fe0f 	bl	800c85c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	7a5b      	ldrb	r3, [r3, #9]
 8013c42:	2b11      	cmp	r3, #17
 8013c44:	d006      	beq.n	8013c54 <ip4_input+0x1b8>
 8013c46:	2b11      	cmp	r3, #17
 8013c48:	dc13      	bgt.n	8013c72 <ip4_input+0x1d6>
 8013c4a:	2b01      	cmp	r3, #1
 8013c4c:	d00c      	beq.n	8013c68 <ip4_input+0x1cc>
 8013c4e:	2b06      	cmp	r3, #6
 8013c50:	d005      	beq.n	8013c5e <ip4_input+0x1c2>
 8013c52:	e00e      	b.n	8013c72 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013c54:	6839      	ldr	r1, [r7, #0]
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f7fe fc68 	bl	801252c <udp_input>
        break;
 8013c5c:	e026      	b.n	8013cac <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013c5e:	6839      	ldr	r1, [r7, #0]
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f7fa fcb5 	bl	800e5d0 <tcp_input>
        break;
 8013c66:	e021      	b.n	8013cac <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013c68:	6839      	ldr	r1, [r7, #0]
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f7ff fcee 	bl	801364c <icmp_input>
        break;
 8013c70:	e01c      	b.n	8013cac <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013c72:	4b1a      	ldr	r3, [pc, #104]	; (8013cdc <ip4_input+0x240>)
 8013c74:	695b      	ldr	r3, [r3, #20]
 8013c76:	6939      	ldr	r1, [r7, #16]
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f000 f90b 	bl	8013e94 <ip4_addr_isbroadcast_u32>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d10f      	bne.n	8013ca4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013c84:	4b15      	ldr	r3, [pc, #84]	; (8013cdc <ip4_input+0x240>)
 8013c86:	695b      	ldr	r3, [r3, #20]
 8013c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013c8c:	2be0      	cmp	r3, #224	; 0xe0
 8013c8e:	d009      	beq.n	8013ca4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013c90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013c94:	4619      	mov	r1, r3
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f7f8 fe53 	bl	800c942 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013c9c:	2102      	movs	r1, #2
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f7ff fdd8 	bl	8013854 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013ca4:	6878      	ldr	r0, [r7, #4]
 8013ca6:	f7f8 fe5f 	bl	800c968 <pbuf_free>
        break;
 8013caa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013cac:	4b0b      	ldr	r3, [pc, #44]	; (8013cdc <ip4_input+0x240>)
 8013cae:	2200      	movs	r2, #0
 8013cb0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013cb2:	4b0a      	ldr	r3, [pc, #40]	; (8013cdc <ip4_input+0x240>)
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013cb8:	4b08      	ldr	r3, [pc, #32]	; (8013cdc <ip4_input+0x240>)
 8013cba:	2200      	movs	r2, #0
 8013cbc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013cbe:	4b07      	ldr	r3, [pc, #28]	; (8013cdc <ip4_input+0x240>)
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013cc4:	4b05      	ldr	r3, [pc, #20]	; (8013cdc <ip4_input+0x240>)
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013cca:	4b04      	ldr	r3, [pc, #16]	; (8013cdc <ip4_input+0x240>)
 8013ccc:	2200      	movs	r2, #0
 8013cce:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013cd0:	2300      	movs	r3, #0
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3718      	adds	r7, #24
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	20007f24 	.word	0x20007f24
 8013ce0:	2000b628 	.word	0x2000b628

08013ce4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b08a      	sub	sp, #40	; 0x28
 8013ce8:	af04      	add	r7, sp, #16
 8013cea:	60f8      	str	r0, [r7, #12]
 8013cec:	60b9      	str	r1, [r7, #8]
 8013cee:	607a      	str	r2, [r7, #4]
 8013cf0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d009      	beq.n	8013d10 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d003      	beq.n	8013d0a <ip4_output_if+0x26>
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d102      	bne.n	8013d10 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0c:	3304      	adds	r3, #4
 8013d0e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013d10:	78fa      	ldrb	r2, [r7, #3]
 8013d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d14:	9302      	str	r3, [sp, #8]
 8013d16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013d1a:	9301      	str	r3, [sp, #4]
 8013d1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013d20:	9300      	str	r3, [sp, #0]
 8013d22:	4613      	mov	r3, r2
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	6979      	ldr	r1, [r7, #20]
 8013d28:	68f8      	ldr	r0, [r7, #12]
 8013d2a:	f000 f805 	bl	8013d38 <ip4_output_if_src>
 8013d2e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	3718      	adds	r7, #24
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}

08013d38 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b088      	sub	sp, #32
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	60f8      	str	r0, [r7, #12]
 8013d40:	60b9      	str	r1, [r7, #8]
 8013d42:	607a      	str	r2, [r7, #4]
 8013d44:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	7b9b      	ldrb	r3, [r3, #14]
 8013d4a:	2b01      	cmp	r3, #1
 8013d4c:	d006      	beq.n	8013d5c <ip4_output_if_src+0x24>
 8013d4e:	4b4b      	ldr	r3, [pc, #300]	; (8013e7c <ip4_output_if_src+0x144>)
 8013d50:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013d54:	494a      	ldr	r1, [pc, #296]	; (8013e80 <ip4_output_if_src+0x148>)
 8013d56:	484b      	ldr	r0, [pc, #300]	; (8013e84 <ip4_output_if_src+0x14c>)
 8013d58:	f001 fbe6 	bl	8015528 <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d060      	beq.n	8013e24 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013d62:	2314      	movs	r3, #20
 8013d64:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013d66:	2114      	movs	r1, #20
 8013d68:	68f8      	ldr	r0, [r7, #12]
 8013d6a:	f7f8 fd67 	bl	800c83c <pbuf_add_header>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d002      	beq.n	8013d7a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013d74:	f06f 0301 	mvn.w	r3, #1
 8013d78:	e07c      	b.n	8013e74 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	685b      	ldr	r3, [r3, #4]
 8013d7e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	895b      	ldrh	r3, [r3, #10]
 8013d84:	2b13      	cmp	r3, #19
 8013d86:	d806      	bhi.n	8013d96 <ip4_output_if_src+0x5e>
 8013d88:	4b3c      	ldr	r3, [pc, #240]	; (8013e7c <ip4_output_if_src+0x144>)
 8013d8a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013d8e:	493e      	ldr	r1, [pc, #248]	; (8013e88 <ip4_output_if_src+0x150>)
 8013d90:	483c      	ldr	r0, [pc, #240]	; (8013e84 <ip4_output_if_src+0x14c>)
 8013d92:	f001 fbc9 	bl	8015528 <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013d96:	69fb      	ldr	r3, [r7, #28]
 8013d98:	78fa      	ldrb	r2, [r7, #3]
 8013d9a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013d9c:	69fb      	ldr	r3, [r7, #28]
 8013d9e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013da2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681a      	ldr	r2, [r3, #0]
 8013da8:	69fb      	ldr	r3, [r7, #28]
 8013daa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013dac:	8b7b      	ldrh	r3, [r7, #26]
 8013dae:	089b      	lsrs	r3, r3, #2
 8013db0:	b29b      	uxth	r3, r3
 8013db2:	b2db      	uxtb	r3, r3
 8013db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013db8:	b2da      	uxtb	r2, r3
 8013dba:	69fb      	ldr	r3, [r7, #28]
 8013dbc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013dc4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	891b      	ldrh	r3, [r3, #8]
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7f7 fa98 	bl	800b300 <lwip_htons>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	461a      	mov	r2, r3
 8013dd4:	69fb      	ldr	r3, [r7, #28]
 8013dd6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	2200      	movs	r2, #0
 8013ddc:	719a      	strb	r2, [r3, #6]
 8013dde:	2200      	movs	r2, #0
 8013de0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013de2:	4b2a      	ldr	r3, [pc, #168]	; (8013e8c <ip4_output_if_src+0x154>)
 8013de4:	881b      	ldrh	r3, [r3, #0]
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7f7 fa8a 	bl	800b300 <lwip_htons>
 8013dec:	4603      	mov	r3, r0
 8013dee:	461a      	mov	r2, r3
 8013df0:	69fb      	ldr	r3, [r7, #28]
 8013df2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013df4:	4b25      	ldr	r3, [pc, #148]	; (8013e8c <ip4_output_if_src+0x154>)
 8013df6:	881b      	ldrh	r3, [r3, #0]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	4b23      	ldr	r3, [pc, #140]	; (8013e8c <ip4_output_if_src+0x154>)
 8013dfe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d104      	bne.n	8013e10 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013e06:	4b22      	ldr	r3, [pc, #136]	; (8013e90 <ip4_output_if_src+0x158>)
 8013e08:	681a      	ldr	r2, [r3, #0]
 8013e0a:	69fb      	ldr	r3, [r7, #28]
 8013e0c:	60da      	str	r2, [r3, #12]
 8013e0e:	e003      	b.n	8013e18 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	681a      	ldr	r2, [r3, #0]
 8013e14:	69fb      	ldr	r3, [r7, #28]
 8013e16:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013e18:	69fb      	ldr	r3, [r7, #28]
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	729a      	strb	r2, [r3, #10]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	72da      	strb	r2, [r3, #11]
 8013e22:	e00f      	b.n	8013e44 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	895b      	ldrh	r3, [r3, #10]
 8013e28:	2b13      	cmp	r3, #19
 8013e2a:	d802      	bhi.n	8013e32 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013e2c:	f06f 0301 	mvn.w	r3, #1
 8013e30:	e020      	b.n	8013e74 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	691b      	ldr	r3, [r3, #16]
 8013e3c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013e3e:	f107 0314 	add.w	r3, r7, #20
 8013e42:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e46:	8c1b      	ldrh	r3, [r3, #32]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d00c      	beq.n	8013e66 <ip4_output_if_src+0x12e>
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	891a      	ldrh	r2, [r3, #8]
 8013e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e52:	8c1b      	ldrh	r3, [r3, #32]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d906      	bls.n	8013e66 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e5c:	68f8      	ldr	r0, [r7, #12]
 8013e5e:	f000 fd4d 	bl	80148fc <ip4_frag>
 8013e62:	4603      	mov	r3, r0
 8013e64:	e006      	b.n	8013e74 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	695b      	ldr	r3, [r3, #20]
 8013e6a:	687a      	ldr	r2, [r7, #4]
 8013e6c:	68f9      	ldr	r1, [r7, #12]
 8013e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e70:	4798      	blx	r3
 8013e72:	4603      	mov	r3, r0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3720      	adds	r7, #32
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}
 8013e7c:	0801f3b0 	.word	0x0801f3b0
 8013e80:	0801f3e4 	.word	0x0801f3e4
 8013e84:	0801f3f0 	.word	0x0801f3f0
 8013e88:	0801f418 	.word	0x0801f418
 8013e8c:	20004bd2 	.word	0x20004bd2
 8013e90:	0801f82c 	.word	0x0801f82c

08013e94 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013e94:	b480      	push	{r7}
 8013e96:	b085      	sub	sp, #20
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ea8:	d002      	beq.n	8013eb0 <ip4_addr_isbroadcast_u32+0x1c>
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d101      	bne.n	8013eb4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	e02a      	b.n	8013f0a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013eba:	f003 0302 	and.w	r3, r3, #2
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d101      	bne.n	8013ec6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	e021      	b.n	8013f0a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	3304      	adds	r3, #4
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	d101      	bne.n	8013ed6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	e019      	b.n	8013f0a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013ed6:	68fa      	ldr	r2, [r7, #12]
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	3304      	adds	r3, #4
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	405a      	eors	r2, r3
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	3308      	adds	r3, #8
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	4013      	ands	r3, r2
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d10d      	bne.n	8013f08 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	3308      	adds	r3, #8
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	43da      	mvns	r2, r3
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	3308      	adds	r3, #8
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d101      	bne.n	8013f08 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013f04:	2301      	movs	r3, #1
 8013f06:	e000      	b.n	8013f0a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013f08:	2300      	movs	r3, #0
  }
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	3714      	adds	r7, #20
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f14:	4770      	bx	lr
	...

08013f18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b084      	sub	sp, #16
 8013f1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013f22:	4b12      	ldr	r3, [pc, #72]	; (8013f6c <ip_reass_tmr+0x54>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013f28:	e018      	b.n	8013f5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	7fdb      	ldrb	r3, [r3, #31]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d00b      	beq.n	8013f4a <ip_reass_tmr+0x32>
      r->timer--;
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	7fdb      	ldrb	r3, [r3, #31]
 8013f36:	3b01      	subs	r3, #1
 8013f38:	b2da      	uxtb	r2, r3
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	60fb      	str	r3, [r7, #12]
 8013f48:	e008      	b.n	8013f5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013f54:	68b9      	ldr	r1, [r7, #8]
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f000 f80a 	bl	8013f70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d1e3      	bne.n	8013f2a <ip_reass_tmr+0x12>
    }
  }
}
 8013f62:	bf00      	nop
 8013f64:	bf00      	nop
 8013f66:	3710      	adds	r7, #16
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}
 8013f6c:	20004bd4 	.word	0x20004bd4

08013f70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b088      	sub	sp, #32
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
 8013f78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013f7e:	683a      	ldr	r2, [r7, #0]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d105      	bne.n	8013f92 <ip_reass_free_complete_datagram+0x22>
 8013f86:	4b45      	ldr	r3, [pc, #276]	; (801409c <ip_reass_free_complete_datagram+0x12c>)
 8013f88:	22ab      	movs	r2, #171	; 0xab
 8013f8a:	4945      	ldr	r1, [pc, #276]	; (80140a0 <ip_reass_free_complete_datagram+0x130>)
 8013f8c:	4845      	ldr	r0, [pc, #276]	; (80140a4 <ip_reass_free_complete_datagram+0x134>)
 8013f8e:	f001 facb 	bl	8015528 <printf>
  if (prev != NULL) {
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d00a      	beq.n	8013fae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d005      	beq.n	8013fae <ip_reass_free_complete_datagram+0x3e>
 8013fa2:	4b3e      	ldr	r3, [pc, #248]	; (801409c <ip_reass_free_complete_datagram+0x12c>)
 8013fa4:	22ad      	movs	r2, #173	; 0xad
 8013fa6:	4940      	ldr	r1, [pc, #256]	; (80140a8 <ip_reass_free_complete_datagram+0x138>)
 8013fa8:	483e      	ldr	r0, [pc, #248]	; (80140a4 <ip_reass_free_complete_datagram+0x134>)
 8013faa:	f001 fabd 	bl	8015528 <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	685b      	ldr	r3, [r3, #4]
 8013fb4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	889b      	ldrh	r3, [r3, #4]
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d12a      	bne.n	8014016 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	685b      	ldr	r3, [r3, #4]
 8013fc4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	681a      	ldr	r2, [r3, #0]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013fce:	69bb      	ldr	r3, [r7, #24]
 8013fd0:	6858      	ldr	r0, [r3, #4]
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	3308      	adds	r3, #8
 8013fd6:	2214      	movs	r2, #20
 8013fd8:	4619      	mov	r1, r3
 8013fda:	f000 fff7 	bl	8014fcc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013fde:	2101      	movs	r1, #1
 8013fe0:	69b8      	ldr	r0, [r7, #24]
 8013fe2:	f7ff fc47 	bl	8013874 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013fe6:	69b8      	ldr	r0, [r7, #24]
 8013fe8:	f7f8 fd4c 	bl	800ca84 <pbuf_clen>
 8013fec:	4603      	mov	r3, r0
 8013fee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013ff0:	8bfa      	ldrh	r2, [r7, #30]
 8013ff2:	8a7b      	ldrh	r3, [r7, #18]
 8013ff4:	4413      	add	r3, r2
 8013ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013ffa:	db05      	blt.n	8014008 <ip_reass_free_complete_datagram+0x98>
 8013ffc:	4b27      	ldr	r3, [pc, #156]	; (801409c <ip_reass_free_complete_datagram+0x12c>)
 8013ffe:	22bc      	movs	r2, #188	; 0xbc
 8014000:	492a      	ldr	r1, [pc, #168]	; (80140ac <ip_reass_free_complete_datagram+0x13c>)
 8014002:	4828      	ldr	r0, [pc, #160]	; (80140a4 <ip_reass_free_complete_datagram+0x134>)
 8014004:	f001 fa90 	bl	8015528 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014008:	8bfa      	ldrh	r2, [r7, #30]
 801400a:	8a7b      	ldrh	r3, [r7, #18]
 801400c:	4413      	add	r3, r2
 801400e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014010:	69b8      	ldr	r0, [r7, #24]
 8014012:	f7f8 fca9 	bl	800c968 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	685b      	ldr	r3, [r3, #4]
 801401a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801401c:	e01f      	b.n	801405e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801401e:	69bb      	ldr	r3, [r7, #24]
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014024:	69bb      	ldr	r3, [r7, #24]
 8014026:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014028:	697b      	ldr	r3, [r7, #20]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801402e:	68f8      	ldr	r0, [r7, #12]
 8014030:	f7f8 fd28 	bl	800ca84 <pbuf_clen>
 8014034:	4603      	mov	r3, r0
 8014036:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014038:	8bfa      	ldrh	r2, [r7, #30]
 801403a:	8a7b      	ldrh	r3, [r7, #18]
 801403c:	4413      	add	r3, r2
 801403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014042:	db05      	blt.n	8014050 <ip_reass_free_complete_datagram+0xe0>
 8014044:	4b15      	ldr	r3, [pc, #84]	; (801409c <ip_reass_free_complete_datagram+0x12c>)
 8014046:	22cc      	movs	r2, #204	; 0xcc
 8014048:	4918      	ldr	r1, [pc, #96]	; (80140ac <ip_reass_free_complete_datagram+0x13c>)
 801404a:	4816      	ldr	r0, [pc, #88]	; (80140a4 <ip_reass_free_complete_datagram+0x134>)
 801404c:	f001 fa6c 	bl	8015528 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014050:	8bfa      	ldrh	r2, [r7, #30]
 8014052:	8a7b      	ldrh	r3, [r7, #18]
 8014054:	4413      	add	r3, r2
 8014056:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014058:	68f8      	ldr	r0, [r7, #12]
 801405a:	f7f8 fc85 	bl	800c968 <pbuf_free>
  while (p != NULL) {
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d1dc      	bne.n	801401e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014064:	6839      	ldr	r1, [r7, #0]
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f000 f8c2 	bl	80141f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801406c:	4b10      	ldr	r3, [pc, #64]	; (80140b0 <ip_reass_free_complete_datagram+0x140>)
 801406e:	881b      	ldrh	r3, [r3, #0]
 8014070:	8bfa      	ldrh	r2, [r7, #30]
 8014072:	429a      	cmp	r2, r3
 8014074:	d905      	bls.n	8014082 <ip_reass_free_complete_datagram+0x112>
 8014076:	4b09      	ldr	r3, [pc, #36]	; (801409c <ip_reass_free_complete_datagram+0x12c>)
 8014078:	22d2      	movs	r2, #210	; 0xd2
 801407a:	490e      	ldr	r1, [pc, #56]	; (80140b4 <ip_reass_free_complete_datagram+0x144>)
 801407c:	4809      	ldr	r0, [pc, #36]	; (80140a4 <ip_reass_free_complete_datagram+0x134>)
 801407e:	f001 fa53 	bl	8015528 <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014082:	4b0b      	ldr	r3, [pc, #44]	; (80140b0 <ip_reass_free_complete_datagram+0x140>)
 8014084:	881a      	ldrh	r2, [r3, #0]
 8014086:	8bfb      	ldrh	r3, [r7, #30]
 8014088:	1ad3      	subs	r3, r2, r3
 801408a:	b29a      	uxth	r2, r3
 801408c:	4b08      	ldr	r3, [pc, #32]	; (80140b0 <ip_reass_free_complete_datagram+0x140>)
 801408e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014090:	8bfb      	ldrh	r3, [r7, #30]
}
 8014092:	4618      	mov	r0, r3
 8014094:	3720      	adds	r7, #32
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	0801f448 	.word	0x0801f448
 80140a0:	0801f484 	.word	0x0801f484
 80140a4:	0801f490 	.word	0x0801f490
 80140a8:	0801f4b8 	.word	0x0801f4b8
 80140ac:	0801f4cc 	.word	0x0801f4cc
 80140b0:	20004bd8 	.word	0x20004bd8
 80140b4:	0801f4ec 	.word	0x0801f4ec

080140b8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b08a      	sub	sp, #40	; 0x28
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
 80140c0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80140c2:	2300      	movs	r3, #0
 80140c4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80140c6:	2300      	movs	r3, #0
 80140c8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80140ca:	2300      	movs	r3, #0
 80140cc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80140ce:	2300      	movs	r3, #0
 80140d0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80140d2:	2300      	movs	r3, #0
 80140d4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80140d6:	4b28      	ldr	r3, [pc, #160]	; (8014178 <ip_reass_remove_oldest_datagram+0xc0>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80140dc:	e030      	b.n	8014140 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80140de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e0:	695a      	ldr	r2, [r3, #20]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	68db      	ldr	r3, [r3, #12]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d10c      	bne.n	8014104 <ip_reass_remove_oldest_datagram+0x4c>
 80140ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ec:	699a      	ldr	r2, [r3, #24]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	691b      	ldr	r3, [r3, #16]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d106      	bne.n	8014104 <ip_reass_remove_oldest_datagram+0x4c>
 80140f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f8:	899a      	ldrh	r2, [r3, #12]
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	889b      	ldrh	r3, [r3, #4]
 80140fe:	b29b      	uxth	r3, r3
 8014100:	429a      	cmp	r2, r3
 8014102:	d014      	beq.n	801412e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	3301      	adds	r3, #1
 8014108:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801410a:	6a3b      	ldr	r3, [r7, #32]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d104      	bne.n	801411a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014112:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014114:	69fb      	ldr	r3, [r7, #28]
 8014116:	61bb      	str	r3, [r7, #24]
 8014118:	e009      	b.n	801412e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411c:	7fda      	ldrb	r2, [r3, #31]
 801411e:	6a3b      	ldr	r3, [r7, #32]
 8014120:	7fdb      	ldrb	r3, [r3, #31]
 8014122:	429a      	cmp	r2, r3
 8014124:	d803      	bhi.n	801412e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014128:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801412a:	69fb      	ldr	r3, [r7, #28]
 801412c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d001      	beq.n	801413a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014138:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014142:	2b00      	cmp	r3, #0
 8014144:	d1cb      	bne.n	80140de <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014146:	6a3b      	ldr	r3, [r7, #32]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d008      	beq.n	801415e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801414c:	69b9      	ldr	r1, [r7, #24]
 801414e:	6a38      	ldr	r0, [r7, #32]
 8014150:	f7ff ff0e 	bl	8013f70 <ip_reass_free_complete_datagram>
 8014154:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014156:	697a      	ldr	r2, [r7, #20]
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	4413      	add	r3, r2
 801415c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801415e:	697a      	ldr	r2, [r7, #20]
 8014160:	683b      	ldr	r3, [r7, #0]
 8014162:	429a      	cmp	r2, r3
 8014164:	da02      	bge.n	801416c <ip_reass_remove_oldest_datagram+0xb4>
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	2b01      	cmp	r3, #1
 801416a:	dcac      	bgt.n	80140c6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801416c:	697b      	ldr	r3, [r7, #20]
}
 801416e:	4618      	mov	r0, r3
 8014170:	3728      	adds	r7, #40	; 0x28
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
 8014176:	bf00      	nop
 8014178:	20004bd4 	.word	0x20004bd4

0801417c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014186:	2004      	movs	r0, #4
 8014188:	f7f7 fd70 	bl	800bc6c <memp_malloc>
 801418c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d110      	bne.n	80141b6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014194:	6839      	ldr	r1, [r7, #0]
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f7ff ff8e 	bl	80140b8 <ip_reass_remove_oldest_datagram>
 801419c:	4602      	mov	r2, r0
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	4293      	cmp	r3, r2
 80141a2:	dc03      	bgt.n	80141ac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80141a4:	2004      	movs	r0, #4
 80141a6:	f7f7 fd61 	bl	800bc6c <memp_malloc>
 80141aa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d101      	bne.n	80141b6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80141b2:	2300      	movs	r3, #0
 80141b4:	e016      	b.n	80141e4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80141b6:	2220      	movs	r2, #32
 80141b8:	2100      	movs	r1, #0
 80141ba:	68f8      	ldr	r0, [r7, #12]
 80141bc:	f000 ff2e 	bl	801501c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	220f      	movs	r2, #15
 80141c4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80141c6:	4b09      	ldr	r3, [pc, #36]	; (80141ec <ip_reass_enqueue_new_datagram+0x70>)
 80141c8:	681a      	ldr	r2, [r3, #0]
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80141ce:	4a07      	ldr	r2, [pc, #28]	; (80141ec <ip_reass_enqueue_new_datagram+0x70>)
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	3308      	adds	r3, #8
 80141d8:	2214      	movs	r2, #20
 80141da:	6879      	ldr	r1, [r7, #4]
 80141dc:	4618      	mov	r0, r3
 80141de:	f000 fef5 	bl	8014fcc <memcpy>
  return ipr;
 80141e2:	68fb      	ldr	r3, [r7, #12]
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3710      	adds	r7, #16
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	20004bd4 	.word	0x20004bd4

080141f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80141fa:	4b10      	ldr	r3, [pc, #64]	; (801423c <ip_reass_dequeue_datagram+0x4c>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	687a      	ldr	r2, [r7, #4]
 8014200:	429a      	cmp	r2, r3
 8014202:	d104      	bne.n	801420e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	4a0c      	ldr	r2, [pc, #48]	; (801423c <ip_reass_dequeue_datagram+0x4c>)
 801420a:	6013      	str	r3, [r2, #0]
 801420c:	e00d      	b.n	801422a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d106      	bne.n	8014222 <ip_reass_dequeue_datagram+0x32>
 8014214:	4b0a      	ldr	r3, [pc, #40]	; (8014240 <ip_reass_dequeue_datagram+0x50>)
 8014216:	f240 1245 	movw	r2, #325	; 0x145
 801421a:	490a      	ldr	r1, [pc, #40]	; (8014244 <ip_reass_dequeue_datagram+0x54>)
 801421c:	480a      	ldr	r0, [pc, #40]	; (8014248 <ip_reass_dequeue_datagram+0x58>)
 801421e:	f001 f983 	bl	8015528 <printf>
    prev->next = ipr->next;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681a      	ldr	r2, [r3, #0]
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801422a:	6879      	ldr	r1, [r7, #4]
 801422c:	2004      	movs	r0, #4
 801422e:	f7f7 fd6f 	bl	800bd10 <memp_free>
}
 8014232:	bf00      	nop
 8014234:	3708      	adds	r7, #8
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
 801423a:	bf00      	nop
 801423c:	20004bd4 	.word	0x20004bd4
 8014240:	0801f448 	.word	0x0801f448
 8014244:	0801f510 	.word	0x0801f510
 8014248:	0801f490 	.word	0x0801f490

0801424c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b08c      	sub	sp, #48	; 0x30
 8014250:	af00      	add	r7, sp, #0
 8014252:	60f8      	str	r0, [r7, #12]
 8014254:	60b9      	str	r1, [r7, #8]
 8014256:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014258:	2300      	movs	r3, #0
 801425a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801425c:	2301      	movs	r3, #1
 801425e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014266:	69fb      	ldr	r3, [r7, #28]
 8014268:	885b      	ldrh	r3, [r3, #2]
 801426a:	b29b      	uxth	r3, r3
 801426c:	4618      	mov	r0, r3
 801426e:	f7f7 f847 	bl	800b300 <lwip_htons>
 8014272:	4603      	mov	r3, r0
 8014274:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014276:	69fb      	ldr	r3, [r7, #28]
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	f003 030f 	and.w	r3, r3, #15
 801427e:	b2db      	uxtb	r3, r3
 8014280:	009b      	lsls	r3, r3, #2
 8014282:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014284:	7e7b      	ldrb	r3, [r7, #25]
 8014286:	b29b      	uxth	r3, r3
 8014288:	8b7a      	ldrh	r2, [r7, #26]
 801428a:	429a      	cmp	r2, r3
 801428c:	d202      	bcs.n	8014294 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801428e:	f04f 33ff 	mov.w	r3, #4294967295
 8014292:	e135      	b.n	8014500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014294:	7e7b      	ldrb	r3, [r7, #25]
 8014296:	b29b      	uxth	r3, r3
 8014298:	8b7a      	ldrh	r2, [r7, #26]
 801429a:	1ad3      	subs	r3, r2, r3
 801429c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	88db      	ldrh	r3, [r3, #6]
 80142a2:	b29b      	uxth	r3, r3
 80142a4:	4618      	mov	r0, r3
 80142a6:	f7f7 f82b 	bl	800b300 <lwip_htons>
 80142aa:	4603      	mov	r3, r0
 80142ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142b0:	b29b      	uxth	r3, r3
 80142b2:	00db      	lsls	r3, r3, #3
 80142b4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80142bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142be:	2200      	movs	r2, #0
 80142c0:	701a      	strb	r2, [r3, #0]
 80142c2:	2200      	movs	r2, #0
 80142c4:	705a      	strb	r2, [r3, #1]
 80142c6:	2200      	movs	r2, #0
 80142c8:	709a      	strb	r2, [r3, #2]
 80142ca:	2200      	movs	r2, #0
 80142cc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80142ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d0:	8afa      	ldrh	r2, [r7, #22]
 80142d2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80142d4:	8afa      	ldrh	r2, [r7, #22]
 80142d6:	8b7b      	ldrh	r3, [r7, #26]
 80142d8:	4413      	add	r3, r2
 80142da:	b29a      	uxth	r2, r3
 80142dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142de:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80142e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e2:	88db      	ldrh	r3, [r3, #6]
 80142e4:	b29b      	uxth	r3, r3
 80142e6:	8afa      	ldrh	r2, [r7, #22]
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d902      	bls.n	80142f2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80142ec:	f04f 33ff 	mov.w	r3, #4294967295
 80142f0:	e106      	b.n	8014500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	685b      	ldr	r3, [r3, #4]
 80142f6:	627b      	str	r3, [r7, #36]	; 0x24
 80142f8:	e068      	b.n	80143cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80142fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fc:	685b      	ldr	r3, [r3, #4]
 80142fe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014302:	889b      	ldrh	r3, [r3, #4]
 8014304:	b29a      	uxth	r2, r3
 8014306:	693b      	ldr	r3, [r7, #16]
 8014308:	889b      	ldrh	r3, [r3, #4]
 801430a:	b29b      	uxth	r3, r3
 801430c:	429a      	cmp	r2, r3
 801430e:	d235      	bcs.n	801437c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014314:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014318:	2b00      	cmp	r3, #0
 801431a:	d020      	beq.n	801435e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431e:	889b      	ldrh	r3, [r3, #4]
 8014320:	b29a      	uxth	r2, r3
 8014322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014324:	88db      	ldrh	r3, [r3, #6]
 8014326:	b29b      	uxth	r3, r3
 8014328:	429a      	cmp	r2, r3
 801432a:	d307      	bcc.n	801433c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801432e:	88db      	ldrh	r3, [r3, #6]
 8014330:	b29a      	uxth	r2, r3
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	889b      	ldrh	r3, [r3, #4]
 8014336:	b29b      	uxth	r3, r3
 8014338:	429a      	cmp	r2, r3
 801433a:	d902      	bls.n	8014342 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801433c:	f04f 33ff 	mov.w	r3, #4294967295
 8014340:	e0de      	b.n	8014500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014344:	68ba      	ldr	r2, [r7, #8]
 8014346:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801434a:	88db      	ldrh	r3, [r3, #6]
 801434c:	b29a      	uxth	r2, r3
 801434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014350:	889b      	ldrh	r3, [r3, #4]
 8014352:	b29b      	uxth	r3, r3
 8014354:	429a      	cmp	r2, r3
 8014356:	d03d      	beq.n	80143d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014358:	2300      	movs	r3, #0
 801435a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801435c:	e03a      	b.n	80143d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014360:	88db      	ldrh	r3, [r3, #6]
 8014362:	b29a      	uxth	r2, r3
 8014364:	693b      	ldr	r3, [r7, #16]
 8014366:	889b      	ldrh	r3, [r3, #4]
 8014368:	b29b      	uxth	r3, r3
 801436a:	429a      	cmp	r2, r3
 801436c:	d902      	bls.n	8014374 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801436e:	f04f 33ff 	mov.w	r3, #4294967295
 8014372:	e0c5      	b.n	8014500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	68ba      	ldr	r2, [r7, #8]
 8014378:	605a      	str	r2, [r3, #4]
      break;
 801437a:	e02b      	b.n	80143d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801437e:	889b      	ldrh	r3, [r3, #4]
 8014380:	b29a      	uxth	r2, r3
 8014382:	693b      	ldr	r3, [r7, #16]
 8014384:	889b      	ldrh	r3, [r3, #4]
 8014386:	b29b      	uxth	r3, r3
 8014388:	429a      	cmp	r2, r3
 801438a:	d102      	bne.n	8014392 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801438c:	f04f 33ff 	mov.w	r3, #4294967295
 8014390:	e0b6      	b.n	8014500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014394:	889b      	ldrh	r3, [r3, #4]
 8014396:	b29a      	uxth	r2, r3
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	88db      	ldrh	r3, [r3, #6]
 801439c:	b29b      	uxth	r3, r3
 801439e:	429a      	cmp	r2, r3
 80143a0:	d202      	bcs.n	80143a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80143a2:	f04f 33ff 	mov.w	r3, #4294967295
 80143a6:	e0ab      	b.n	8014500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80143a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d009      	beq.n	80143c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80143ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b0:	88db      	ldrh	r3, [r3, #6]
 80143b2:	b29a      	uxth	r2, r3
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	889b      	ldrh	r3, [r3, #4]
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	429a      	cmp	r2, r3
 80143bc:	d001      	beq.n	80143c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80143be:	2300      	movs	r3, #0
 80143c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80143c2:	693b      	ldr	r3, [r7, #16]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80143c8:	693b      	ldr	r3, [r7, #16]
 80143ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80143cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d193      	bne.n	80142fa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80143d2:	e000      	b.n	80143d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80143d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80143d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d12d      	bne.n	8014438 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80143dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d01c      	beq.n	801441c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80143e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e4:	88db      	ldrh	r3, [r3, #6]
 80143e6:	b29a      	uxth	r2, r3
 80143e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ea:	889b      	ldrh	r3, [r3, #4]
 80143ec:	b29b      	uxth	r3, r3
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d906      	bls.n	8014400 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80143f2:	4b45      	ldr	r3, [pc, #276]	; (8014508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80143f4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80143f8:	4944      	ldr	r1, [pc, #272]	; (801450c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80143fa:	4845      	ldr	r0, [pc, #276]	; (8014510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143fc:	f001 f894 	bl	8015528 <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014402:	68ba      	ldr	r2, [r7, #8]
 8014404:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014408:	88db      	ldrh	r3, [r3, #6]
 801440a:	b29a      	uxth	r2, r3
 801440c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801440e:	889b      	ldrh	r3, [r3, #4]
 8014410:	b29b      	uxth	r3, r3
 8014412:	429a      	cmp	r2, r3
 8014414:	d010      	beq.n	8014438 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014416:	2300      	movs	r3, #0
 8014418:	623b      	str	r3, [r7, #32]
 801441a:	e00d      	b.n	8014438 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	685b      	ldr	r3, [r3, #4]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d006      	beq.n	8014432 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014424:	4b38      	ldr	r3, [pc, #224]	; (8014508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014426:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801442a:	493a      	ldr	r1, [pc, #232]	; (8014514 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801442c:	4838      	ldr	r0, [pc, #224]	; (8014510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801442e:	f001 f87b 	bl	8015528 <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	68ba      	ldr	r2, [r7, #8]
 8014436:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d105      	bne.n	801444a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	7f9b      	ldrb	r3, [r3, #30]
 8014442:	f003 0301 	and.w	r3, r3, #1
 8014446:	2b00      	cmp	r3, #0
 8014448:	d059      	beq.n	80144fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801444a:	6a3b      	ldr	r3, [r7, #32]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d04f      	beq.n	80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	685b      	ldr	r3, [r3, #4]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d006      	beq.n	8014466 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	685b      	ldr	r3, [r3, #4]
 801445e:	889b      	ldrh	r3, [r3, #4]
 8014460:	b29b      	uxth	r3, r3
 8014462:	2b00      	cmp	r3, #0
 8014464:	d002      	beq.n	801446c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014466:	2300      	movs	r3, #0
 8014468:	623b      	str	r3, [r7, #32]
 801446a:	e041      	b.n	80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014476:	e012      	b.n	801449e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447a:	685b      	ldr	r3, [r3, #4]
 801447c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014480:	88db      	ldrh	r3, [r3, #6]
 8014482:	b29a      	uxth	r2, r3
 8014484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014486:	889b      	ldrh	r3, [r3, #4]
 8014488:	b29b      	uxth	r3, r3
 801448a:	429a      	cmp	r2, r3
 801448c:	d002      	beq.n	8014494 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801448e:	2300      	movs	r3, #0
 8014490:	623b      	str	r3, [r7, #32]
            break;
 8014492:	e007      	b.n	80144a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014496:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d1e9      	bne.n	8014478 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80144a4:	6a3b      	ldr	r3, [r7, #32]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d022      	beq.n	80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d106      	bne.n	80144c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80144b2:	4b15      	ldr	r3, [pc, #84]	; (8014508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144b4:	f240 12df 	movw	r2, #479	; 0x1df
 80144b8:	4917      	ldr	r1, [pc, #92]	; (8014518 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80144ba:	4815      	ldr	r0, [pc, #84]	; (8014510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144bc:	f001 f834 	bl	8015528 <printf>
          LWIP_ASSERT("sanity check",
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	685b      	ldr	r3, [r3, #4]
 80144c4:	685b      	ldr	r3, [r3, #4]
 80144c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d106      	bne.n	80144da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80144cc:	4b0e      	ldr	r3, [pc, #56]	; (8014508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80144d2:	4911      	ldr	r1, [pc, #68]	; (8014518 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80144d4:	480e      	ldr	r0, [pc, #56]	; (8014510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144d6:	f001 f827 	bl	8015528 <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80144da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d006      	beq.n	80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80144e2:	4b09      	ldr	r3, [pc, #36]	; (8014508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144e4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80144e8:	490c      	ldr	r1, [pc, #48]	; (801451c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80144ea:	4809      	ldr	r0, [pc, #36]	; (8014510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144ec:	f001 f81c 	bl	8015528 <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80144f0:	6a3b      	ldr	r3, [r7, #32]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	bf14      	ite	ne
 80144f6:	2301      	movne	r3, #1
 80144f8:	2300      	moveq	r3, #0
 80144fa:	b2db      	uxtb	r3, r3
 80144fc:	e000      	b.n	8014500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80144fe:	2300      	movs	r3, #0
}
 8014500:	4618      	mov	r0, r3
 8014502:	3730      	adds	r7, #48	; 0x30
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	0801f448 	.word	0x0801f448
 801450c:	0801f52c 	.word	0x0801f52c
 8014510:	0801f490 	.word	0x0801f490
 8014514:	0801f54c 	.word	0x0801f54c
 8014518:	0801f584 	.word	0x0801f584
 801451c:	0801f594 	.word	0x0801f594

08014520 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b08e      	sub	sp, #56	; 0x38
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	685b      	ldr	r3, [r3, #4]
 801452c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	f003 030f 	and.w	r3, r3, #15
 8014536:	b2db      	uxtb	r3, r3
 8014538:	009b      	lsls	r3, r3, #2
 801453a:	b2db      	uxtb	r3, r3
 801453c:	2b14      	cmp	r3, #20
 801453e:	f040 8167 	bne.w	8014810 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014544:	88db      	ldrh	r3, [r3, #6]
 8014546:	b29b      	uxth	r3, r3
 8014548:	4618      	mov	r0, r3
 801454a:	f7f6 fed9 	bl	800b300 <lwip_htons>
 801454e:	4603      	mov	r3, r0
 8014550:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014554:	b29b      	uxth	r3, r3
 8014556:	00db      	lsls	r3, r3, #3
 8014558:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801455c:	885b      	ldrh	r3, [r3, #2]
 801455e:	b29b      	uxth	r3, r3
 8014560:	4618      	mov	r0, r3
 8014562:	f7f6 fecd 	bl	800b300 <lwip_htons>
 8014566:	4603      	mov	r3, r0
 8014568:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	f003 030f 	and.w	r3, r3, #15
 8014572:	b2db      	uxtb	r3, r3
 8014574:	009b      	lsls	r3, r3, #2
 8014576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801457a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801457e:	b29b      	uxth	r3, r3
 8014580:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014582:	429a      	cmp	r2, r3
 8014584:	f0c0 8146 	bcc.w	8014814 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801458c:	b29b      	uxth	r3, r3
 801458e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	f7f8 fa75 	bl	800ca84 <pbuf_clen>
 801459a:	4603      	mov	r3, r0
 801459c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801459e:	4b9f      	ldr	r3, [pc, #636]	; (801481c <ip4_reass+0x2fc>)
 80145a0:	881b      	ldrh	r3, [r3, #0]
 80145a2:	461a      	mov	r2, r3
 80145a4:	8c3b      	ldrh	r3, [r7, #32]
 80145a6:	4413      	add	r3, r2
 80145a8:	2b0a      	cmp	r3, #10
 80145aa:	dd10      	ble.n	80145ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80145ac:	8c3b      	ldrh	r3, [r7, #32]
 80145ae:	4619      	mov	r1, r3
 80145b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145b2:	f7ff fd81 	bl	80140b8 <ip_reass_remove_oldest_datagram>
 80145b6:	4603      	mov	r3, r0
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	f000 812d 	beq.w	8014818 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80145be:	4b97      	ldr	r3, [pc, #604]	; (801481c <ip4_reass+0x2fc>)
 80145c0:	881b      	ldrh	r3, [r3, #0]
 80145c2:	461a      	mov	r2, r3
 80145c4:	8c3b      	ldrh	r3, [r7, #32]
 80145c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80145c8:	2b0a      	cmp	r3, #10
 80145ca:	f300 8125 	bgt.w	8014818 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80145ce:	4b94      	ldr	r3, [pc, #592]	; (8014820 <ip4_reass+0x300>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	633b      	str	r3, [r7, #48]	; 0x30
 80145d4:	e015      	b.n	8014602 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80145d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d8:	695a      	ldr	r2, [r3, #20]
 80145da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145dc:	68db      	ldr	r3, [r3, #12]
 80145de:	429a      	cmp	r2, r3
 80145e0:	d10c      	bne.n	80145fc <ip4_reass+0xdc>
 80145e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e4:	699a      	ldr	r2, [r3, #24]
 80145e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145e8:	691b      	ldr	r3, [r3, #16]
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d106      	bne.n	80145fc <ip4_reass+0xdc>
 80145ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f0:	899a      	ldrh	r2, [r3, #12]
 80145f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145f4:	889b      	ldrh	r3, [r3, #4]
 80145f6:	b29b      	uxth	r3, r3
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d006      	beq.n	801460a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80145fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	633b      	str	r3, [r7, #48]	; 0x30
 8014602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014604:	2b00      	cmp	r3, #0
 8014606:	d1e6      	bne.n	80145d6 <ip4_reass+0xb6>
 8014608:	e000      	b.n	801460c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801460a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801460e:	2b00      	cmp	r3, #0
 8014610:	d109      	bne.n	8014626 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014612:	8c3b      	ldrh	r3, [r7, #32]
 8014614:	4619      	mov	r1, r3
 8014616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014618:	f7ff fdb0 	bl	801417c <ip_reass_enqueue_new_datagram>
 801461c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014620:	2b00      	cmp	r3, #0
 8014622:	d11c      	bne.n	801465e <ip4_reass+0x13e>
      goto nullreturn;
 8014624:	e109      	b.n	801483a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014628:	88db      	ldrh	r3, [r3, #6]
 801462a:	b29b      	uxth	r3, r3
 801462c:	4618      	mov	r0, r3
 801462e:	f7f6 fe67 	bl	800b300 <lwip_htons>
 8014632:	4603      	mov	r3, r0
 8014634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014638:	2b00      	cmp	r3, #0
 801463a:	d110      	bne.n	801465e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801463e:	89db      	ldrh	r3, [r3, #14]
 8014640:	4618      	mov	r0, r3
 8014642:	f7f6 fe5d 	bl	800b300 <lwip_htons>
 8014646:	4603      	mov	r3, r0
 8014648:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801464c:	2b00      	cmp	r3, #0
 801464e:	d006      	beq.n	801465e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014652:	3308      	adds	r3, #8
 8014654:	2214      	movs	r2, #20
 8014656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014658:	4618      	mov	r0, r3
 801465a:	f000 fcb7 	bl	8014fcc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014660:	88db      	ldrh	r3, [r3, #6]
 8014662:	b29b      	uxth	r3, r3
 8014664:	f003 0320 	and.w	r3, r3, #32
 8014668:	2b00      	cmp	r3, #0
 801466a:	bf0c      	ite	eq
 801466c:	2301      	moveq	r3, #1
 801466e:	2300      	movne	r3, #0
 8014670:	b2db      	uxtb	r3, r3
 8014672:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014674:	69fb      	ldr	r3, [r7, #28]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d00e      	beq.n	8014698 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801467a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801467c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801467e:	4413      	add	r3, r2
 8014680:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014682:	8b7a      	ldrh	r2, [r7, #26]
 8014684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014686:	429a      	cmp	r2, r3
 8014688:	f0c0 80a0 	bcc.w	80147cc <ip4_reass+0x2ac>
 801468c:	8b7b      	ldrh	r3, [r7, #26]
 801468e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014692:	4293      	cmp	r3, r2
 8014694:	f200 809a 	bhi.w	80147cc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014698:	69fa      	ldr	r2, [r7, #28]
 801469a:	6879      	ldr	r1, [r7, #4]
 801469c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801469e:	f7ff fdd5 	bl	801424c <ip_reass_chain_frag_into_datagram_and_validate>
 80146a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80146a4:	697b      	ldr	r3, [r7, #20]
 80146a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146aa:	f000 8091 	beq.w	80147d0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80146ae:	4b5b      	ldr	r3, [pc, #364]	; (801481c <ip4_reass+0x2fc>)
 80146b0:	881a      	ldrh	r2, [r3, #0]
 80146b2:	8c3b      	ldrh	r3, [r7, #32]
 80146b4:	4413      	add	r3, r2
 80146b6:	b29a      	uxth	r2, r3
 80146b8:	4b58      	ldr	r3, [pc, #352]	; (801481c <ip4_reass+0x2fc>)
 80146ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80146bc:	69fb      	ldr	r3, [r7, #28]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d00d      	beq.n	80146de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80146c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80146c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146c6:	4413      	add	r3, r2
 80146c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80146ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146cc:	8a7a      	ldrh	r2, [r7, #18]
 80146ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80146d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d2:	7f9b      	ldrb	r3, [r3, #30]
 80146d4:	f043 0301 	orr.w	r3, r3, #1
 80146d8:	b2da      	uxtb	r2, r3
 80146da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	2b01      	cmp	r3, #1
 80146e2:	d171      	bne.n	80147c8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80146e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e6:	8b9b      	ldrh	r3, [r3, #28]
 80146e8:	3314      	adds	r3, #20
 80146ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80146ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ee:	685b      	ldr	r3, [r3, #4]
 80146f0:	685b      	ldr	r3, [r3, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80146f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f8:	685b      	ldr	r3, [r3, #4]
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80146fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014700:	3308      	adds	r3, #8
 8014702:	2214      	movs	r2, #20
 8014704:	4619      	mov	r1, r3
 8014706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014708:	f000 fc60 	bl	8014fcc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801470c:	8a3b      	ldrh	r3, [r7, #16]
 801470e:	4618      	mov	r0, r3
 8014710:	f7f6 fdf6 	bl	800b300 <lwip_htons>
 8014714:	4603      	mov	r3, r0
 8014716:	461a      	mov	r2, r3
 8014718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801471a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801471e:	2200      	movs	r2, #0
 8014720:	719a      	strb	r2, [r3, #6]
 8014722:	2200      	movs	r2, #0
 8014724:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014728:	2200      	movs	r2, #0
 801472a:	729a      	strb	r2, [r3, #10]
 801472c:	2200      	movs	r2, #0
 801472e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014732:	685b      	ldr	r3, [r3, #4]
 8014734:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014736:	e00d      	b.n	8014754 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801473a:	685b      	ldr	r3, [r3, #4]
 801473c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801473e:	2114      	movs	r1, #20
 8014740:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014742:	f7f8 f88b 	bl	800c85c <pbuf_remove_header>
      pbuf_cat(p, r);
 8014746:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f7f8 f9db 	bl	800cb04 <pbuf_cat>
      r = iprh->next_pbuf;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014756:	2b00      	cmp	r3, #0
 8014758:	d1ee      	bne.n	8014738 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801475a:	4b31      	ldr	r3, [pc, #196]	; (8014820 <ip4_reass+0x300>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014760:	429a      	cmp	r2, r3
 8014762:	d102      	bne.n	801476a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014764:	2300      	movs	r3, #0
 8014766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014768:	e010      	b.n	801478c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801476a:	4b2d      	ldr	r3, [pc, #180]	; (8014820 <ip4_reass+0x300>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014770:	e007      	b.n	8014782 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014778:	429a      	cmp	r2, r3
 801477a:	d006      	beq.n	801478a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014784:	2b00      	cmp	r3, #0
 8014786:	d1f4      	bne.n	8014772 <ip4_reass+0x252>
 8014788:	e000      	b.n	801478c <ip4_reass+0x26c>
          break;
 801478a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801478c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801478e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014790:	f7ff fd2e 	bl	80141f0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f7f8 f975 	bl	800ca84 <pbuf_clen>
 801479a:	4603      	mov	r3, r0
 801479c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801479e:	4b1f      	ldr	r3, [pc, #124]	; (801481c <ip4_reass+0x2fc>)
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	8c3a      	ldrh	r2, [r7, #32]
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d906      	bls.n	80147b6 <ip4_reass+0x296>
 80147a8:	4b1e      	ldr	r3, [pc, #120]	; (8014824 <ip4_reass+0x304>)
 80147aa:	f240 229b 	movw	r2, #667	; 0x29b
 80147ae:	491e      	ldr	r1, [pc, #120]	; (8014828 <ip4_reass+0x308>)
 80147b0:	481e      	ldr	r0, [pc, #120]	; (801482c <ip4_reass+0x30c>)
 80147b2:	f000 feb9 	bl	8015528 <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80147b6:	4b19      	ldr	r3, [pc, #100]	; (801481c <ip4_reass+0x2fc>)
 80147b8:	881a      	ldrh	r2, [r3, #0]
 80147ba:	8c3b      	ldrh	r3, [r7, #32]
 80147bc:	1ad3      	subs	r3, r2, r3
 80147be:	b29a      	uxth	r2, r3
 80147c0:	4b16      	ldr	r3, [pc, #88]	; (801481c <ip4_reass+0x2fc>)
 80147c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	e03c      	b.n	8014842 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80147c8:	2300      	movs	r3, #0
 80147ca:	e03a      	b.n	8014842 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80147cc:	bf00      	nop
 80147ce:	e000      	b.n	80147d2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80147d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80147d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d106      	bne.n	80147e6 <ip4_reass+0x2c6>
 80147d8:	4b12      	ldr	r3, [pc, #72]	; (8014824 <ip4_reass+0x304>)
 80147da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80147de:	4914      	ldr	r1, [pc, #80]	; (8014830 <ip4_reass+0x310>)
 80147e0:	4812      	ldr	r0, [pc, #72]	; (801482c <ip4_reass+0x30c>)
 80147e2:	f000 fea1 	bl	8015528 <printf>
  if (ipr->p == NULL) {
 80147e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d124      	bne.n	8014838 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80147ee:	4b0c      	ldr	r3, [pc, #48]	; (8014820 <ip4_reass+0x300>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d006      	beq.n	8014806 <ip4_reass+0x2e6>
 80147f8:	4b0a      	ldr	r3, [pc, #40]	; (8014824 <ip4_reass+0x304>)
 80147fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80147fe:	490d      	ldr	r1, [pc, #52]	; (8014834 <ip4_reass+0x314>)
 8014800:	480a      	ldr	r0, [pc, #40]	; (801482c <ip4_reass+0x30c>)
 8014802:	f000 fe91 	bl	8015528 <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014806:	2100      	movs	r1, #0
 8014808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801480a:	f7ff fcf1 	bl	80141f0 <ip_reass_dequeue_datagram>
 801480e:	e014      	b.n	801483a <ip4_reass+0x31a>
    goto nullreturn;
 8014810:	bf00      	nop
 8014812:	e012      	b.n	801483a <ip4_reass+0x31a>
    goto nullreturn;
 8014814:	bf00      	nop
 8014816:	e010      	b.n	801483a <ip4_reass+0x31a>
      goto nullreturn;
 8014818:	bf00      	nop
 801481a:	e00e      	b.n	801483a <ip4_reass+0x31a>
 801481c:	20004bd8 	.word	0x20004bd8
 8014820:	20004bd4 	.word	0x20004bd4
 8014824:	0801f448 	.word	0x0801f448
 8014828:	0801f5b8 	.word	0x0801f5b8
 801482c:	0801f490 	.word	0x0801f490
 8014830:	0801f5d4 	.word	0x0801f5d4
 8014834:	0801f5e0 	.word	0x0801f5e0
  }

nullreturn:
 8014838:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801483a:	6878      	ldr	r0, [r7, #4]
 801483c:	f7f8 f894 	bl	800c968 <pbuf_free>
  return NULL;
 8014840:	2300      	movs	r3, #0
}
 8014842:	4618      	mov	r0, r3
 8014844:	3738      	adds	r7, #56	; 0x38
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}
 801484a:	bf00      	nop

0801484c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014850:	2005      	movs	r0, #5
 8014852:	f7f7 fa0b 	bl	800bc6c <memp_malloc>
 8014856:	4603      	mov	r3, r0
}
 8014858:	4618      	mov	r0, r3
 801485a:	bd80      	pop	{r7, pc}

0801485c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b082      	sub	sp, #8
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d106      	bne.n	8014878 <ip_frag_free_pbuf_custom_ref+0x1c>
 801486a:	4b07      	ldr	r3, [pc, #28]	; (8014888 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801486c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014870:	4906      	ldr	r1, [pc, #24]	; (801488c <ip_frag_free_pbuf_custom_ref+0x30>)
 8014872:	4807      	ldr	r0, [pc, #28]	; (8014890 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014874:	f000 fe58 	bl	8015528 <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014878:	6879      	ldr	r1, [r7, #4]
 801487a:	2005      	movs	r0, #5
 801487c:	f7f7 fa48 	bl	800bd10 <memp_free>
}
 8014880:	bf00      	nop
 8014882:	3708      	adds	r7, #8
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}
 8014888:	0801f448 	.word	0x0801f448
 801488c:	0801f600 	.word	0x0801f600
 8014890:	0801f490 	.word	0x0801f490

08014894 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d106      	bne.n	80148b4 <ipfrag_free_pbuf_custom+0x20>
 80148a6:	4b11      	ldr	r3, [pc, #68]	; (80148ec <ipfrag_free_pbuf_custom+0x58>)
 80148a8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80148ac:	4910      	ldr	r1, [pc, #64]	; (80148f0 <ipfrag_free_pbuf_custom+0x5c>)
 80148ae:	4811      	ldr	r0, [pc, #68]	; (80148f4 <ipfrag_free_pbuf_custom+0x60>)
 80148b0:	f000 fe3a 	bl	8015528 <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80148b4:	68fa      	ldr	r2, [r7, #12]
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d006      	beq.n	80148ca <ipfrag_free_pbuf_custom+0x36>
 80148bc:	4b0b      	ldr	r3, [pc, #44]	; (80148ec <ipfrag_free_pbuf_custom+0x58>)
 80148be:	f240 22cf 	movw	r2, #719	; 0x2cf
 80148c2:	490d      	ldr	r1, [pc, #52]	; (80148f8 <ipfrag_free_pbuf_custom+0x64>)
 80148c4:	480b      	ldr	r0, [pc, #44]	; (80148f4 <ipfrag_free_pbuf_custom+0x60>)
 80148c6:	f000 fe2f 	bl	8015528 <printf>
  if (pcr->original != NULL) {
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	695b      	ldr	r3, [r3, #20]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d004      	beq.n	80148dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	695b      	ldr	r3, [r3, #20]
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7f8 f846 	bl	800c968 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80148dc:	68f8      	ldr	r0, [r7, #12]
 80148de:	f7ff ffbd 	bl	801485c <ip_frag_free_pbuf_custom_ref>
}
 80148e2:	bf00      	nop
 80148e4:	3710      	adds	r7, #16
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	0801f448 	.word	0x0801f448
 80148f0:	0801f60c 	.word	0x0801f60c
 80148f4:	0801f490 	.word	0x0801f490
 80148f8:	0801f618 	.word	0x0801f618

080148fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b094      	sub	sp, #80	; 0x50
 8014900:	af02      	add	r7, sp, #8
 8014902:	60f8      	str	r0, [r7, #12]
 8014904:	60b9      	str	r1, [r7, #8]
 8014906:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014908:	2300      	movs	r3, #0
 801490a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	8c1b      	ldrh	r3, [r3, #32]
 8014912:	3b14      	subs	r3, #20
 8014914:	2b00      	cmp	r3, #0
 8014916:	da00      	bge.n	801491a <ip4_frag+0x1e>
 8014918:	3307      	adds	r3, #7
 801491a:	10db      	asrs	r3, r3, #3
 801491c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801491e:	2314      	movs	r3, #20
 8014920:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	685b      	ldr	r3, [r3, #4]
 8014926:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801492a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	f003 030f 	and.w	r3, r3, #15
 8014934:	b2db      	uxtb	r3, r3
 8014936:	009b      	lsls	r3, r3, #2
 8014938:	b2db      	uxtb	r3, r3
 801493a:	2b14      	cmp	r3, #20
 801493c:	d002      	beq.n	8014944 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801493e:	f06f 0305 	mvn.w	r3, #5
 8014942:	e110      	b.n	8014b66 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	895b      	ldrh	r3, [r3, #10]
 8014948:	2b13      	cmp	r3, #19
 801494a:	d809      	bhi.n	8014960 <ip4_frag+0x64>
 801494c:	4b88      	ldr	r3, [pc, #544]	; (8014b70 <ip4_frag+0x274>)
 801494e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014952:	4988      	ldr	r1, [pc, #544]	; (8014b74 <ip4_frag+0x278>)
 8014954:	4888      	ldr	r0, [pc, #544]	; (8014b78 <ip4_frag+0x27c>)
 8014956:	f000 fde7 	bl	8015528 <printf>
 801495a:	f06f 0305 	mvn.w	r3, #5
 801495e:	e102      	b.n	8014b66 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014962:	88db      	ldrh	r3, [r3, #6]
 8014964:	b29b      	uxth	r3, r3
 8014966:	4618      	mov	r0, r3
 8014968:	f7f6 fcca 	bl	800b300 <lwip_htons>
 801496c:	4603      	mov	r3, r0
 801496e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014970:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014976:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801497a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801497c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014980:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	891b      	ldrh	r3, [r3, #8]
 8014986:	3b14      	subs	r3, #20
 8014988:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801498c:	e0e1      	b.n	8014b52 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801498e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014990:	00db      	lsls	r3, r3, #3
 8014992:	b29b      	uxth	r3, r3
 8014994:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014998:	4293      	cmp	r3, r2
 801499a:	bf28      	it	cs
 801499c:	4613      	movcs	r3, r2
 801499e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80149a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80149a4:	2114      	movs	r1, #20
 80149a6:	200e      	movs	r0, #14
 80149a8:	f7f7 fcfa 	bl	800c3a0 <pbuf_alloc>
 80149ac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80149ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	f000 80d5 	beq.w	8014b60 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80149b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b8:	895b      	ldrh	r3, [r3, #10]
 80149ba:	2b13      	cmp	r3, #19
 80149bc:	d806      	bhi.n	80149cc <ip4_frag+0xd0>
 80149be:	4b6c      	ldr	r3, [pc, #432]	; (8014b70 <ip4_frag+0x274>)
 80149c0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80149c4:	496d      	ldr	r1, [pc, #436]	; (8014b7c <ip4_frag+0x280>)
 80149c6:	486c      	ldr	r0, [pc, #432]	; (8014b78 <ip4_frag+0x27c>)
 80149c8:	f000 fdae 	bl	8015528 <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80149cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ce:	685b      	ldr	r3, [r3, #4]
 80149d0:	2214      	movs	r2, #20
 80149d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80149d4:	4618      	mov	r0, r3
 80149d6:	f000 faf9 	bl	8014fcc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80149da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149dc:	685b      	ldr	r3, [r3, #4]
 80149de:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80149e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80149e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80149e6:	e064      	b.n	8014ab2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	895a      	ldrh	r2, [r3, #10]
 80149ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80149ee:	1ad3      	subs	r3, r2, r3
 80149f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	895b      	ldrh	r3, [r3, #10]
 80149f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d906      	bls.n	8014a0a <ip4_frag+0x10e>
 80149fc:	4b5c      	ldr	r3, [pc, #368]	; (8014b70 <ip4_frag+0x274>)
 80149fe:	f240 322d 	movw	r2, #813	; 0x32d
 8014a02:	495f      	ldr	r1, [pc, #380]	; (8014b80 <ip4_frag+0x284>)
 8014a04:	485c      	ldr	r0, [pc, #368]	; (8014b78 <ip4_frag+0x27c>)
 8014a06:	f000 fd8f 	bl	8015528 <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014a0a:	8bfa      	ldrh	r2, [r7, #30]
 8014a0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a10:	4293      	cmp	r3, r2
 8014a12:	bf28      	it	cs
 8014a14:	4613      	movcs	r3, r2
 8014a16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014a1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d105      	bne.n	8014a2e <ip4_frag+0x132>
        poff = 0;
 8014a22:	2300      	movs	r3, #0
 8014a24:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	60fb      	str	r3, [r7, #12]
        continue;
 8014a2c:	e041      	b.n	8014ab2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014a2e:	f7ff ff0d 	bl	801484c <ip_frag_alloc_pbuf_custom_ref>
 8014a32:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014a34:	69bb      	ldr	r3, [r7, #24]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d103      	bne.n	8014a42 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a3c:	f7f7 ff94 	bl	800c968 <pbuf_free>
        goto memerr;
 8014a40:	e08f      	b.n	8014b62 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a42:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014a4a:	4413      	add	r3, r2
 8014a4c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014a50:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014a54:	9201      	str	r2, [sp, #4]
 8014a56:	9300      	str	r3, [sp, #0]
 8014a58:	4603      	mov	r3, r0
 8014a5a:	2241      	movs	r2, #65	; 0x41
 8014a5c:	2000      	movs	r0, #0
 8014a5e:	f7f7 fdc9 	bl	800c5f4 <pbuf_alloced_custom>
 8014a62:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014a64:	697b      	ldr	r3, [r7, #20]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d106      	bne.n	8014a78 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014a6a:	69b8      	ldr	r0, [r7, #24]
 8014a6c:	f7ff fef6 	bl	801485c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a72:	f7f7 ff79 	bl	800c968 <pbuf_free>
        goto memerr;
 8014a76:	e074      	b.n	8014b62 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014a78:	68f8      	ldr	r0, [r7, #12]
 8014a7a:	f7f8 f81b 	bl	800cab4 <pbuf_ref>
      pcr->original = p;
 8014a7e:	69bb      	ldr	r3, [r7, #24]
 8014a80:	68fa      	ldr	r2, [r7, #12]
 8014a82:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014a84:	69bb      	ldr	r3, [r7, #24]
 8014a86:	4a3f      	ldr	r2, [pc, #252]	; (8014b84 <ip4_frag+0x288>)
 8014a88:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014a8a:	6979      	ldr	r1, [r7, #20]
 8014a8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a8e:	f7f8 f839 	bl	800cb04 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014a92:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014a96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a9a:	1ad3      	subs	r3, r2, r3
 8014a9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014aa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d004      	beq.n	8014ab2 <ip4_frag+0x1b6>
        poff = 0;
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014ab2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d196      	bne.n	80149e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014aba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014abc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014ac0:	4413      	add	r3, r2
 8014ac2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014ac4:	68bb      	ldr	r3, [r7, #8]
 8014ac6:	8c1b      	ldrh	r3, [r3, #32]
 8014ac8:	f1a3 0213 	sub.w	r2, r3, #19
 8014acc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	bfcc      	ite	gt
 8014ad4:	2301      	movgt	r3, #1
 8014ad6:	2300      	movle	r3, #0
 8014ad8:	b2db      	uxtb	r3, r3
 8014ada:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014adc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014ae4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014ae6:	6a3b      	ldr	r3, [r7, #32]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d002      	beq.n	8014af2 <ip4_frag+0x1f6>
 8014aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d003      	beq.n	8014afa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014af2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014af4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014af8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014afa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7f6 fbff 	bl	800b300 <lwip_htons>
 8014b02:	4603      	mov	r3, r0
 8014b04:	461a      	mov	r2, r3
 8014b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b08:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014b0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014b0c:	3314      	adds	r3, #20
 8014b0e:	b29b      	uxth	r3, r3
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7f6 fbf5 	bl	800b300 <lwip_htons>
 8014b16:	4603      	mov	r3, r0
 8014b18:	461a      	mov	r2, r3
 8014b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b1c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b20:	2200      	movs	r2, #0
 8014b22:	729a      	strb	r2, [r3, #10]
 8014b24:	2200      	movs	r2, #0
 8014b26:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	695b      	ldr	r3, [r3, #20]
 8014b2c:	687a      	ldr	r2, [r7, #4]
 8014b2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b30:	68b8      	ldr	r0, [r7, #8]
 8014b32:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b36:	f7f7 ff17 	bl	800c968 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014b3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014b40:	1ad3      	subs	r3, r2, r3
 8014b42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014b46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014b4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b4c:	4413      	add	r3, r2
 8014b4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014b52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	f47f af19 	bne.w	801498e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	e002      	b.n	8014b66 <ip4_frag+0x26a>
      goto memerr;
 8014b60:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	3748      	adds	r7, #72	; 0x48
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd80      	pop	{r7, pc}
 8014b6e:	bf00      	nop
 8014b70:	0801f448 	.word	0x0801f448
 8014b74:	0801f624 	.word	0x0801f624
 8014b78:	0801f490 	.word	0x0801f490
 8014b7c:	0801f640 	.word	0x0801f640
 8014b80:	0801f660 	.word	0x0801f660
 8014b84:	08014895 	.word	0x08014895

08014b88 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b086      	sub	sp, #24
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014b92:	230e      	movs	r3, #14
 8014b94:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	895b      	ldrh	r3, [r3, #10]
 8014b9a:	2b0e      	cmp	r3, #14
 8014b9c:	d96e      	bls.n	8014c7c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	7bdb      	ldrb	r3, [r3, #15]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d106      	bne.n	8014bb4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014bac:	3301      	adds	r3, #1
 8014bae:	b2da      	uxtb	r2, r3
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014bba:	693b      	ldr	r3, [r7, #16]
 8014bbc:	7b1a      	ldrb	r2, [r3, #12]
 8014bbe:	7b5b      	ldrb	r3, [r3, #13]
 8014bc0:	021b      	lsls	r3, r3, #8
 8014bc2:	4313      	orrs	r3, r2
 8014bc4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014bc6:	693b      	ldr	r3, [r7, #16]
 8014bc8:	781b      	ldrb	r3, [r3, #0]
 8014bca:	f003 0301 	and.w	r3, r3, #1
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d023      	beq.n	8014c1a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014bd2:	693b      	ldr	r3, [r7, #16]
 8014bd4:	781b      	ldrb	r3, [r3, #0]
 8014bd6:	2b01      	cmp	r3, #1
 8014bd8:	d10f      	bne.n	8014bfa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014bda:	693b      	ldr	r3, [r7, #16]
 8014bdc:	785b      	ldrb	r3, [r3, #1]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d11b      	bne.n	8014c1a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014be2:	693b      	ldr	r3, [r7, #16]
 8014be4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014be6:	2b5e      	cmp	r3, #94	; 0x5e
 8014be8:	d117      	bne.n	8014c1a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	7b5b      	ldrb	r3, [r3, #13]
 8014bee:	f043 0310 	orr.w	r3, r3, #16
 8014bf2:	b2da      	uxtb	r2, r3
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	735a      	strb	r2, [r3, #13]
 8014bf8:	e00f      	b.n	8014c1a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014bfa:	693b      	ldr	r3, [r7, #16]
 8014bfc:	2206      	movs	r2, #6
 8014bfe:	4928      	ldr	r1, [pc, #160]	; (8014ca0 <ethernet_input+0x118>)
 8014c00:	4618      	mov	r0, r3
 8014c02:	f000 f9d5 	bl	8014fb0 <memcmp>
 8014c06:	4603      	mov	r3, r0
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d106      	bne.n	8014c1a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	7b5b      	ldrb	r3, [r3, #13]
 8014c10:	f043 0308 	orr.w	r3, r3, #8
 8014c14:	b2da      	uxtb	r2, r3
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014c1a:	89fb      	ldrh	r3, [r7, #14]
 8014c1c:	2b08      	cmp	r3, #8
 8014c1e:	d003      	beq.n	8014c28 <ethernet_input+0xa0>
 8014c20:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014c24:	d014      	beq.n	8014c50 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014c26:	e032      	b.n	8014c8e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014c2e:	f003 0308 	and.w	r3, r3, #8
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d024      	beq.n	8014c80 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c36:	8afb      	ldrh	r3, [r7, #22]
 8014c38:	4619      	mov	r1, r3
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f7f7 fe0e 	bl	800c85c <pbuf_remove_header>
 8014c40:	4603      	mov	r3, r0
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d11e      	bne.n	8014c84 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014c46:	6839      	ldr	r1, [r7, #0]
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f7fe ff27 	bl	8013a9c <ip4_input>
      break;
 8014c4e:	e013      	b.n	8014c78 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014c56:	f003 0308 	and.w	r3, r3, #8
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d014      	beq.n	8014c88 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c5e:	8afb      	ldrh	r3, [r7, #22]
 8014c60:	4619      	mov	r1, r3
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f7f7 fdfa 	bl	800c85c <pbuf_remove_header>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d10e      	bne.n	8014c8c <ethernet_input+0x104>
        etharp_input(p, netif);
 8014c6e:	6839      	ldr	r1, [r7, #0]
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f7fe f8c7 	bl	8012e04 <etharp_input>
      break;
 8014c76:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014c78:	2300      	movs	r3, #0
 8014c7a:	e00c      	b.n	8014c96 <ethernet_input+0x10e>
    goto free_and_return;
 8014c7c:	bf00      	nop
 8014c7e:	e006      	b.n	8014c8e <ethernet_input+0x106>
        goto free_and_return;
 8014c80:	bf00      	nop
 8014c82:	e004      	b.n	8014c8e <ethernet_input+0x106>
        goto free_and_return;
 8014c84:	bf00      	nop
 8014c86:	e002      	b.n	8014c8e <ethernet_input+0x106>
        goto free_and_return;
 8014c88:	bf00      	nop
 8014c8a:	e000      	b.n	8014c8e <ethernet_input+0x106>
        goto free_and_return;
 8014c8c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f7f7 fe6a 	bl	800c968 <pbuf_free>
  return ERR_OK;
 8014c94:	2300      	movs	r3, #0
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3718      	adds	r7, #24
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	0801f830 	.word	0x0801f830

08014ca4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b086      	sub	sp, #24
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	60f8      	str	r0, [r7, #12]
 8014cac:	60b9      	str	r1, [r7, #8]
 8014cae:	607a      	str	r2, [r7, #4]
 8014cb0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014cb2:	8c3b      	ldrh	r3, [r7, #32]
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7f6 fb23 	bl	800b300 <lwip_htons>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014cbe:	210e      	movs	r1, #14
 8014cc0:	68b8      	ldr	r0, [r7, #8]
 8014cc2:	f7f7 fdbb 	bl	800c83c <pbuf_add_header>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d125      	bne.n	8014d18 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	685b      	ldr	r3, [r3, #4]
 8014cd0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014cd2:	693b      	ldr	r3, [r7, #16]
 8014cd4:	8afa      	ldrh	r2, [r7, #22]
 8014cd6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014cd8:	693b      	ldr	r3, [r7, #16]
 8014cda:	2206      	movs	r2, #6
 8014cdc:	6839      	ldr	r1, [r7, #0]
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f000 f974 	bl	8014fcc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014ce4:	693b      	ldr	r3, [r7, #16]
 8014ce6:	3306      	adds	r3, #6
 8014ce8:	2206      	movs	r2, #6
 8014cea:	6879      	ldr	r1, [r7, #4]
 8014cec:	4618      	mov	r0, r3
 8014cee:	f000 f96d 	bl	8014fcc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014cf8:	2b06      	cmp	r3, #6
 8014cfa:	d006      	beq.n	8014d0a <ethernet_output+0x66>
 8014cfc:	4b0a      	ldr	r3, [pc, #40]	; (8014d28 <ethernet_output+0x84>)
 8014cfe:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014d02:	490a      	ldr	r1, [pc, #40]	; (8014d2c <ethernet_output+0x88>)
 8014d04:	480a      	ldr	r0, [pc, #40]	; (8014d30 <ethernet_output+0x8c>)
 8014d06:	f000 fc0f 	bl	8015528 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	699b      	ldr	r3, [r3, #24]
 8014d0e:	68b9      	ldr	r1, [r7, #8]
 8014d10:	68f8      	ldr	r0, [r7, #12]
 8014d12:	4798      	blx	r3
 8014d14:	4603      	mov	r3, r0
 8014d16:	e002      	b.n	8014d1e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014d18:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014d1a:	f06f 0301 	mvn.w	r3, #1
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3718      	adds	r7, #24
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	bf00      	nop
 8014d28:	0801f670 	.word	0x0801f670
 8014d2c:	0801f6a8 	.word	0x0801f6a8
 8014d30:	0801f6dc 	.word	0x0801f6dc

08014d34 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b086      	sub	sp, #24
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	60bb      	str	r3, [r7, #8]
 8014d42:	2304      	movs	r3, #4
 8014d44:	60fb      	str	r3, [r7, #12]
 8014d46:	2300      	movs	r3, #0
 8014d48:	613b      	str	r3, [r7, #16]
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014d4e:	f107 0308 	add.w	r3, r7, #8
 8014d52:	2100      	movs	r1, #0
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7f3 fbc3 	bl	80084e0 <osMessageCreate>
 8014d5a:	4602      	mov	r2, r0
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d102      	bne.n	8014d6e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014d68:	f04f 33ff 	mov.w	r3, #4294967295
 8014d6c:	e000      	b.n	8014d70 <sys_mbox_new+0x3c>

  return ERR_OK;
 8014d6e:	2300      	movs	r3, #0
}
 8014d70:	4618      	mov	r0, r3
 8014d72:	3718      	adds	r7, #24
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}

08014d78 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b084      	sub	sp, #16
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
 8014d80:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	6839      	ldr	r1, [r7, #0]
 8014d88:	2200      	movs	r2, #0
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7f3 fbd0 	bl	8008530 <osMessagePut>
 8014d90:	4603      	mov	r3, r0
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d102      	bne.n	8014d9c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014d96:	2300      	movs	r3, #0
 8014d98:	73fb      	strb	r3, [r7, #15]
 8014d9a:	e001      	b.n	8014da0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014d9c:	23ff      	movs	r3, #255	; 0xff
 8014d9e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014da4:	4618      	mov	r0, r3
 8014da6:	3710      	adds	r7, #16
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}

08014dac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b08c      	sub	sp, #48	; 0x30
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	61f8      	str	r0, [r7, #28]
 8014db4:	61b9      	str	r1, [r7, #24]
 8014db6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014db8:	f7f3 f9d0 	bl	800815c <osKernelSysTick>
 8014dbc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d017      	beq.n	8014df4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014dc4:	69fb      	ldr	r3, [r7, #28]
 8014dc6:	6819      	ldr	r1, [r3, #0]
 8014dc8:	f107 0320 	add.w	r3, r7, #32
 8014dcc:	697a      	ldr	r2, [r7, #20]
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7f3 fbee 	bl	80085b0 <osMessageGet>

    if(event.status == osEventMessage)
 8014dd4:	6a3b      	ldr	r3, [r7, #32]
 8014dd6:	2b10      	cmp	r3, #16
 8014dd8:	d109      	bne.n	8014dee <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ddc:	461a      	mov	r2, r3
 8014dde:	69bb      	ldr	r3, [r7, #24]
 8014de0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014de2:	f7f3 f9bb 	bl	800815c <osKernelSysTick>
 8014de6:	4602      	mov	r2, r0
 8014de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dea:	1ad3      	subs	r3, r2, r3
 8014dec:	e019      	b.n	8014e22 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014dee:	f04f 33ff 	mov.w	r3, #4294967295
 8014df2:	e016      	b.n	8014e22 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	6819      	ldr	r1, [r3, #0]
 8014df8:	463b      	mov	r3, r7
 8014dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7f3 fbd6 	bl	80085b0 <osMessageGet>
 8014e04:	f107 0320 	add.w	r3, r7, #32
 8014e08:	463a      	mov	r2, r7
 8014e0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8014e0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e12:	461a      	mov	r2, r3
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014e18:	f7f3 f9a0 	bl	800815c <osKernelSysTick>
 8014e1c:	4602      	mov	r2, r0
 8014e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e20:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3730      	adds	r7, #48	; 0x30
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}

08014e2a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014e2a:	b480      	push	{r7}
 8014e2c:	b083      	sub	sp, #12
 8014e2e:	af00      	add	r7, sp, #0
 8014e30:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d101      	bne.n	8014e3e <sys_mbox_valid+0x14>
    return 0;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	e000      	b.n	8014e40 <sys_mbox_valid+0x16>
  else
    return 1;
 8014e3e:	2301      	movs	r3, #1
}
 8014e40:	4618      	mov	r0, r3
 8014e42:	370c      	adds	r7, #12
 8014e44:	46bd      	mov	sp, r7
 8014e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4a:	4770      	bx	lr

08014e4c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014e50:	4803      	ldr	r0, [pc, #12]	; (8014e60 <sys_init+0x14>)
 8014e52:	f7f3 f9f3 	bl	800823c <osMutexCreate>
 8014e56:	4603      	mov	r3, r0
 8014e58:	4a02      	ldr	r2, [pc, #8]	; (8014e64 <sys_init+0x18>)
 8014e5a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014e5c:	bf00      	nop
 8014e5e:	bd80      	pop	{r7, pc}
 8014e60:	0801f840 	.word	0x0801f840
 8014e64:	2000b658 	.word	0x2000b658

08014e68 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b084      	sub	sp, #16
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014e70:	2300      	movs	r3, #0
 8014e72:	60bb      	str	r3, [r7, #8]
 8014e74:	2300      	movs	r3, #0
 8014e76:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014e78:	f107 0308 	add.w	r3, r7, #8
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7f3 f9dd 	bl	800823c <osMutexCreate>
 8014e82:	4602      	mov	r2, r0
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d102      	bne.n	8014e96 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014e90:	f04f 33ff 	mov.w	r3, #4294967295
 8014e94:	e000      	b.n	8014e98 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014e96:	2300      	movs	r3, #0
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	3710      	adds	r7, #16
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd80      	pop	{r7, pc}

08014ea0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	f04f 31ff 	mov.w	r1, #4294967295
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7f3 f9db 	bl	800826c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014eb6:	bf00      	nop
 8014eb8:	3708      	adds	r7, #8
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}

08014ebe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014ebe:	b580      	push	{r7, lr}
 8014ec0:	b082      	sub	sp, #8
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7f3 fa1c 	bl	8008308 <osMutexRelease>
}
 8014ed0:	bf00      	nop
 8014ed2:	3708      	adds	r7, #8
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}

08014ed8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b08c      	sub	sp, #48	; 0x30
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	60f8      	str	r0, [r7, #12]
 8014ee0:	60b9      	str	r1, [r7, #8]
 8014ee2:	607a      	str	r2, [r7, #4]
 8014ee4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014ee6:	f107 0314 	add.w	r3, r7, #20
 8014eea:	2200      	movs	r2, #0
 8014eec:	601a      	str	r2, [r3, #0]
 8014eee:	605a      	str	r2, [r3, #4]
 8014ef0:	609a      	str	r2, [r3, #8]
 8014ef2:	60da      	str	r2, [r3, #12]
 8014ef4:	611a      	str	r2, [r3, #16]
 8014ef6:	615a      	str	r2, [r3, #20]
 8014ef8:	619a      	str	r2, [r3, #24]
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	617b      	str	r3, [r7, #20]
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	61bb      	str	r3, [r7, #24]
 8014f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f04:	b21b      	sxth	r3, r3
 8014f06:	83bb      	strh	r3, [r7, #28]
 8014f08:	683b      	ldr	r3, [r7, #0]
 8014f0a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014f0c:	f107 0314 	add.w	r3, r7, #20
 8014f10:	6879      	ldr	r1, [r7, #4]
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7f3 f932 	bl	800817c <osThreadCreate>
 8014f18:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3730      	adds	r7, #48	; 0x30
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}
	...

08014f24 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014f28:	4b04      	ldr	r3, [pc, #16]	; (8014f3c <sys_arch_protect+0x18>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8014f30:	4618      	mov	r0, r3
 8014f32:	f7f3 f99b 	bl	800826c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014f36:	2301      	movs	r3, #1
}
 8014f38:	4618      	mov	r0, r3
 8014f3a:	bd80      	pop	{r7, pc}
 8014f3c:	2000b658 	.word	0x2000b658

08014f40 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b082      	sub	sp, #8
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014f48:	4b04      	ldr	r3, [pc, #16]	; (8014f5c <sys_arch_unprotect+0x1c>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7f3 f9db 	bl	8008308 <osMutexRelease>
}
 8014f52:	bf00      	nop
 8014f54:	3708      	adds	r7, #8
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
 8014f5a:	bf00      	nop
 8014f5c:	2000b658 	.word	0x2000b658

08014f60 <atoi>:
 8014f60:	220a      	movs	r2, #10
 8014f62:	2100      	movs	r1, #0
 8014f64:	f000 bba8 	b.w	80156b8 <strtol>

08014f68 <__libc_init_array>:
 8014f68:	b570      	push	{r4, r5, r6, lr}
 8014f6a:	4d0d      	ldr	r5, [pc, #52]	; (8014fa0 <__libc_init_array+0x38>)
 8014f6c:	4c0d      	ldr	r4, [pc, #52]	; (8014fa4 <__libc_init_array+0x3c>)
 8014f6e:	1b64      	subs	r4, r4, r5
 8014f70:	10a4      	asrs	r4, r4, #2
 8014f72:	2600      	movs	r6, #0
 8014f74:	42a6      	cmp	r6, r4
 8014f76:	d109      	bne.n	8014f8c <__libc_init_array+0x24>
 8014f78:	4d0b      	ldr	r5, [pc, #44]	; (8014fa8 <__libc_init_array+0x40>)
 8014f7a:	4c0c      	ldr	r4, [pc, #48]	; (8014fac <__libc_init_array+0x44>)
 8014f7c:	f007 fdaa 	bl	801cad4 <_init>
 8014f80:	1b64      	subs	r4, r4, r5
 8014f82:	10a4      	asrs	r4, r4, #2
 8014f84:	2600      	movs	r6, #0
 8014f86:	42a6      	cmp	r6, r4
 8014f88:	d105      	bne.n	8014f96 <__libc_init_array+0x2e>
 8014f8a:	bd70      	pop	{r4, r5, r6, pc}
 8014f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014f90:	4798      	blx	r3
 8014f92:	3601      	adds	r6, #1
 8014f94:	e7ee      	b.n	8014f74 <__libc_init_array+0xc>
 8014f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8014f9a:	4798      	blx	r3
 8014f9c:	3601      	adds	r6, #1
 8014f9e:	e7f2      	b.n	8014f86 <__libc_init_array+0x1e>
 8014fa0:	0801fd50 	.word	0x0801fd50
 8014fa4:	0801fd50 	.word	0x0801fd50
 8014fa8:	0801fd50 	.word	0x0801fd50
 8014fac:	0801fd58 	.word	0x0801fd58

08014fb0 <memcmp>:
 8014fb0:	b530      	push	{r4, r5, lr}
 8014fb2:	3901      	subs	r1, #1
 8014fb4:	2400      	movs	r4, #0
 8014fb6:	42a2      	cmp	r2, r4
 8014fb8:	d101      	bne.n	8014fbe <memcmp+0xe>
 8014fba:	2000      	movs	r0, #0
 8014fbc:	e005      	b.n	8014fca <memcmp+0x1a>
 8014fbe:	5d03      	ldrb	r3, [r0, r4]
 8014fc0:	3401      	adds	r4, #1
 8014fc2:	5d0d      	ldrb	r5, [r1, r4]
 8014fc4:	42ab      	cmp	r3, r5
 8014fc6:	d0f6      	beq.n	8014fb6 <memcmp+0x6>
 8014fc8:	1b58      	subs	r0, r3, r5
 8014fca:	bd30      	pop	{r4, r5, pc}

08014fcc <memcpy>:
 8014fcc:	440a      	add	r2, r1
 8014fce:	4291      	cmp	r1, r2
 8014fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8014fd4:	d100      	bne.n	8014fd8 <memcpy+0xc>
 8014fd6:	4770      	bx	lr
 8014fd8:	b510      	push	{r4, lr}
 8014fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014fe2:	4291      	cmp	r1, r2
 8014fe4:	d1f9      	bne.n	8014fda <memcpy+0xe>
 8014fe6:	bd10      	pop	{r4, pc}

08014fe8 <memmove>:
 8014fe8:	4288      	cmp	r0, r1
 8014fea:	b510      	push	{r4, lr}
 8014fec:	eb01 0402 	add.w	r4, r1, r2
 8014ff0:	d902      	bls.n	8014ff8 <memmove+0x10>
 8014ff2:	4284      	cmp	r4, r0
 8014ff4:	4623      	mov	r3, r4
 8014ff6:	d807      	bhi.n	8015008 <memmove+0x20>
 8014ff8:	1e43      	subs	r3, r0, #1
 8014ffa:	42a1      	cmp	r1, r4
 8014ffc:	d008      	beq.n	8015010 <memmove+0x28>
 8014ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015006:	e7f8      	b.n	8014ffa <memmove+0x12>
 8015008:	4402      	add	r2, r0
 801500a:	4601      	mov	r1, r0
 801500c:	428a      	cmp	r2, r1
 801500e:	d100      	bne.n	8015012 <memmove+0x2a>
 8015010:	bd10      	pop	{r4, pc}
 8015012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801501a:	e7f7      	b.n	801500c <memmove+0x24>

0801501c <memset>:
 801501c:	4402      	add	r2, r0
 801501e:	4603      	mov	r3, r0
 8015020:	4293      	cmp	r3, r2
 8015022:	d100      	bne.n	8015026 <memset+0xa>
 8015024:	4770      	bx	lr
 8015026:	f803 1b01 	strb.w	r1, [r3], #1
 801502a:	e7f9      	b.n	8015020 <memset+0x4>

0801502c <validate_structure>:
 801502c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801502e:	6801      	ldr	r1, [r0, #0]
 8015030:	293b      	cmp	r1, #59	; 0x3b
 8015032:	4604      	mov	r4, r0
 8015034:	d911      	bls.n	801505a <validate_structure+0x2e>
 8015036:	223c      	movs	r2, #60	; 0x3c
 8015038:	4668      	mov	r0, sp
 801503a:	f002 f85b 	bl	80170f4 <div>
 801503e:	9a01      	ldr	r2, [sp, #4]
 8015040:	6863      	ldr	r3, [r4, #4]
 8015042:	9900      	ldr	r1, [sp, #0]
 8015044:	2a00      	cmp	r2, #0
 8015046:	440b      	add	r3, r1
 8015048:	6063      	str	r3, [r4, #4]
 801504a:	bfbb      	ittet	lt
 801504c:	323c      	addlt	r2, #60	; 0x3c
 801504e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8015052:	6022      	strge	r2, [r4, #0]
 8015054:	6022      	strlt	r2, [r4, #0]
 8015056:	bfb8      	it	lt
 8015058:	6063      	strlt	r3, [r4, #4]
 801505a:	6861      	ldr	r1, [r4, #4]
 801505c:	293b      	cmp	r1, #59	; 0x3b
 801505e:	d911      	bls.n	8015084 <validate_structure+0x58>
 8015060:	223c      	movs	r2, #60	; 0x3c
 8015062:	4668      	mov	r0, sp
 8015064:	f002 f846 	bl	80170f4 <div>
 8015068:	9a01      	ldr	r2, [sp, #4]
 801506a:	68a3      	ldr	r3, [r4, #8]
 801506c:	9900      	ldr	r1, [sp, #0]
 801506e:	2a00      	cmp	r2, #0
 8015070:	440b      	add	r3, r1
 8015072:	60a3      	str	r3, [r4, #8]
 8015074:	bfbb      	ittet	lt
 8015076:	323c      	addlt	r2, #60	; 0x3c
 8015078:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801507c:	6062      	strge	r2, [r4, #4]
 801507e:	6062      	strlt	r2, [r4, #4]
 8015080:	bfb8      	it	lt
 8015082:	60a3      	strlt	r3, [r4, #8]
 8015084:	68a1      	ldr	r1, [r4, #8]
 8015086:	2917      	cmp	r1, #23
 8015088:	d911      	bls.n	80150ae <validate_structure+0x82>
 801508a:	2218      	movs	r2, #24
 801508c:	4668      	mov	r0, sp
 801508e:	f002 f831 	bl	80170f4 <div>
 8015092:	9a01      	ldr	r2, [sp, #4]
 8015094:	68e3      	ldr	r3, [r4, #12]
 8015096:	9900      	ldr	r1, [sp, #0]
 8015098:	2a00      	cmp	r2, #0
 801509a:	440b      	add	r3, r1
 801509c:	60e3      	str	r3, [r4, #12]
 801509e:	bfbb      	ittet	lt
 80150a0:	3218      	addlt	r2, #24
 80150a2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80150a6:	60a2      	strge	r2, [r4, #8]
 80150a8:	60a2      	strlt	r2, [r4, #8]
 80150aa:	bfb8      	it	lt
 80150ac:	60e3      	strlt	r3, [r4, #12]
 80150ae:	6921      	ldr	r1, [r4, #16]
 80150b0:	290b      	cmp	r1, #11
 80150b2:	d911      	bls.n	80150d8 <validate_structure+0xac>
 80150b4:	220c      	movs	r2, #12
 80150b6:	4668      	mov	r0, sp
 80150b8:	f002 f81c 	bl	80170f4 <div>
 80150bc:	9a01      	ldr	r2, [sp, #4]
 80150be:	6963      	ldr	r3, [r4, #20]
 80150c0:	9900      	ldr	r1, [sp, #0]
 80150c2:	2a00      	cmp	r2, #0
 80150c4:	440b      	add	r3, r1
 80150c6:	6163      	str	r3, [r4, #20]
 80150c8:	bfbb      	ittet	lt
 80150ca:	320c      	addlt	r2, #12
 80150cc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80150d0:	6122      	strge	r2, [r4, #16]
 80150d2:	6122      	strlt	r2, [r4, #16]
 80150d4:	bfb8      	it	lt
 80150d6:	6163      	strlt	r3, [r4, #20]
 80150d8:	6963      	ldr	r3, [r4, #20]
 80150da:	0799      	lsls	r1, r3, #30
 80150dc:	d120      	bne.n	8015120 <validate_structure+0xf4>
 80150de:	2164      	movs	r1, #100	; 0x64
 80150e0:	fb93 f2f1 	sdiv	r2, r3, r1
 80150e4:	fb01 3212 	mls	r2, r1, r2, r3
 80150e8:	b9e2      	cbnz	r2, 8015124 <validate_structure+0xf8>
 80150ea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80150ee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80150f2:	fb93 f2f1 	sdiv	r2, r3, r1
 80150f6:	fb01 3312 	mls	r3, r1, r2, r3
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	bf14      	ite	ne
 80150fe:	231c      	movne	r3, #28
 8015100:	231d      	moveq	r3, #29
 8015102:	68e2      	ldr	r2, [r4, #12]
 8015104:	2a00      	cmp	r2, #0
 8015106:	dc0f      	bgt.n	8015128 <validate_structure+0xfc>
 8015108:	4f33      	ldr	r7, [pc, #204]	; (80151d8 <validate_structure+0x1ac>)
 801510a:	260b      	movs	r6, #11
 801510c:	2064      	movs	r0, #100	; 0x64
 801510e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8015112:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8015116:	f1bc 0f00 	cmp.w	ip, #0
 801511a:	dd31      	ble.n	8015180 <validate_structure+0x154>
 801511c:	b003      	add	sp, #12
 801511e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015120:	231c      	movs	r3, #28
 8015122:	e7ee      	b.n	8015102 <validate_structure+0xd6>
 8015124:	231d      	movs	r3, #29
 8015126:	e7ec      	b.n	8015102 <validate_structure+0xd6>
 8015128:	4f2b      	ldr	r7, [pc, #172]	; (80151d8 <validate_structure+0x1ac>)
 801512a:	f04f 0c00 	mov.w	ip, #0
 801512e:	2564      	movs	r5, #100	; 0x64
 8015130:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8015134:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8015138:	2a01      	cmp	r2, #1
 801513a:	bf14      	ite	ne
 801513c:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8015140:	4618      	moveq	r0, r3
 8015142:	4281      	cmp	r1, r0
 8015144:	ddea      	ble.n	801511c <validate_structure+0xf0>
 8015146:	3201      	adds	r2, #1
 8015148:	1a09      	subs	r1, r1, r0
 801514a:	2a0c      	cmp	r2, #12
 801514c:	60e1      	str	r1, [r4, #12]
 801514e:	6122      	str	r2, [r4, #16]
 8015150:	d1f0      	bne.n	8015134 <validate_structure+0x108>
 8015152:	6963      	ldr	r3, [r4, #20]
 8015154:	1c5a      	adds	r2, r3, #1
 8015156:	0791      	lsls	r1, r2, #30
 8015158:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801515c:	d137      	bne.n	80151ce <validate_structure+0x1a2>
 801515e:	fb92 f1f5 	sdiv	r1, r2, r5
 8015162:	fb05 2211 	mls	r2, r5, r1, r2
 8015166:	2a00      	cmp	r2, #0
 8015168:	d133      	bne.n	80151d2 <validate_structure+0x1a6>
 801516a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801516e:	fb93 f2f6 	sdiv	r2, r3, r6
 8015172:	fb06 3312 	mls	r3, r6, r2, r3
 8015176:	2b00      	cmp	r3, #0
 8015178:	bf14      	ite	ne
 801517a:	231c      	movne	r3, #28
 801517c:	231d      	moveq	r3, #29
 801517e:	e7d9      	b.n	8015134 <validate_structure+0x108>
 8015180:	6921      	ldr	r1, [r4, #16]
 8015182:	3901      	subs	r1, #1
 8015184:	6121      	str	r1, [r4, #16]
 8015186:	3101      	adds	r1, #1
 8015188:	d114      	bne.n	80151b4 <validate_structure+0x188>
 801518a:	6963      	ldr	r3, [r4, #20]
 801518c:	1e59      	subs	r1, r3, #1
 801518e:	078a      	lsls	r2, r1, #30
 8015190:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8015194:	d117      	bne.n	80151c6 <validate_structure+0x19a>
 8015196:	fb91 f2f0 	sdiv	r2, r1, r0
 801519a:	fb00 1112 	mls	r1, r0, r2, r1
 801519e:	b9a1      	cbnz	r1, 80151ca <validate_structure+0x19e>
 80151a0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80151a4:	fb93 f2f5 	sdiv	r2, r3, r5
 80151a8:	fb05 3312 	mls	r3, r5, r2, r3
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	bf14      	ite	ne
 80151b0:	231c      	movne	r3, #28
 80151b2:	231d      	moveq	r3, #29
 80151b4:	6922      	ldr	r2, [r4, #16]
 80151b6:	2a01      	cmp	r2, #1
 80151b8:	bf14      	ite	ne
 80151ba:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80151be:	461a      	moveq	r2, r3
 80151c0:	4462      	add	r2, ip
 80151c2:	60e2      	str	r2, [r4, #12]
 80151c4:	e7a5      	b.n	8015112 <validate_structure+0xe6>
 80151c6:	231c      	movs	r3, #28
 80151c8:	e7f4      	b.n	80151b4 <validate_structure+0x188>
 80151ca:	231d      	movs	r3, #29
 80151cc:	e7f2      	b.n	80151b4 <validate_structure+0x188>
 80151ce:	231c      	movs	r3, #28
 80151d0:	e7b0      	b.n	8015134 <validate_structure+0x108>
 80151d2:	231d      	movs	r3, #29
 80151d4:	e7ae      	b.n	8015134 <validate_structure+0x108>
 80151d6:	bf00      	nop
 80151d8:	0801f950 	.word	0x0801f950

080151dc <mktime>:
 80151dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e0:	b08b      	sub	sp, #44	; 0x2c
 80151e2:	4605      	mov	r5, r0
 80151e4:	f003 f8ae 	bl	8018344 <__gettzinfo>
 80151e8:	4607      	mov	r7, r0
 80151ea:	4628      	mov	r0, r5
 80151ec:	f7ff ff1e 	bl	801502c <validate_structure>
 80151f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80151f4:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80151f8:	68a8      	ldr	r0, [r5, #8]
 80151fa:	696e      	ldr	r6, [r5, #20]
 80151fc:	fb0a 2303 	mla	r3, sl, r3, r2
 8015200:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8015204:	fb0a 3a00 	mla	sl, sl, r0, r3
 8015208:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801520c:	4ac3      	ldr	r2, [pc, #780]	; (801551c <mktime+0x340>)
 801520e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015212:	3c01      	subs	r4, #1
 8015214:	2b01      	cmp	r3, #1
 8015216:	4414      	add	r4, r2
 8015218:	dd11      	ble.n	801523e <mktime+0x62>
 801521a:	07b1      	lsls	r1, r6, #30
 801521c:	d10f      	bne.n	801523e <mktime+0x62>
 801521e:	2264      	movs	r2, #100	; 0x64
 8015220:	fb96 f3f2 	sdiv	r3, r6, r2
 8015224:	fb02 6313 	mls	r3, r2, r3, r6
 8015228:	b943      	cbnz	r3, 801523c <mktime+0x60>
 801522a:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801522e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8015232:	fb91 f3f2 	sdiv	r3, r1, r2
 8015236:	fb02 1313 	mls	r3, r2, r3, r1
 801523a:	b903      	cbnz	r3, 801523e <mktime+0x62>
 801523c:	3401      	adds	r4, #1
 801523e:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8015242:	3310      	adds	r3, #16
 8015244:	f644 6220 	movw	r2, #20000	; 0x4e20
 8015248:	4293      	cmp	r3, r2
 801524a:	61ec      	str	r4, [r5, #28]
 801524c:	f200 8161 	bhi.w	8015512 <mktime+0x336>
 8015250:	2e46      	cmp	r6, #70	; 0x46
 8015252:	dd77      	ble.n	8015344 <mktime+0x168>
 8015254:	2346      	movs	r3, #70	; 0x46
 8015256:	f240 1e6d 	movw	lr, #365	; 0x16d
 801525a:	2164      	movs	r1, #100	; 0x64
 801525c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8015260:	079a      	lsls	r2, r3, #30
 8015262:	d169      	bne.n	8015338 <mktime+0x15c>
 8015264:	fb93 f2f1 	sdiv	r2, r3, r1
 8015268:	fb01 3212 	mls	r2, r1, r2, r3
 801526c:	2a00      	cmp	r2, #0
 801526e:	d166      	bne.n	801533e <mktime+0x162>
 8015270:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8015274:	fb9c f2f0 	sdiv	r2, ip, r0
 8015278:	fb00 c212 	mls	r2, r0, r2, ip
 801527c:	2a00      	cmp	r2, #0
 801527e:	bf14      	ite	ne
 8015280:	4672      	movne	r2, lr
 8015282:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8015286:	3301      	adds	r3, #1
 8015288:	429e      	cmp	r6, r3
 801528a:	4414      	add	r4, r2
 801528c:	d1e8      	bne.n	8015260 <mktime+0x84>
 801528e:	4ba4      	ldr	r3, [pc, #656]	; (8015520 <mktime+0x344>)
 8015290:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8015294:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8015298:	f000 fac0 	bl	801581c <__tz_lock>
 801529c:	f000 faca 	bl	8015834 <_tzset_unlocked>
 80152a0:	4ba0      	ldr	r3, [pc, #640]	; (8015524 <mktime+0x348>)
 80152a2:	f8d3 9000 	ldr.w	r9, [r3]
 80152a6:	f1b9 0f00 	cmp.w	r9, #0
 80152aa:	d03f      	beq.n	801532c <mktime+0x150>
 80152ac:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80152b0:	6968      	ldr	r0, [r5, #20]
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f1b9 0f01 	cmp.w	r9, #1
 80152b8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80152bc:	46c8      	mov	r8, r9
 80152be:	bfa8      	it	ge
 80152c0:	f04f 0801 	movge.w	r8, #1
 80152c4:	4283      	cmp	r3, r0
 80152c6:	d17f      	bne.n	80153c8 <mktime+0x1ec>
 80152c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152ca:	4619      	mov	r1, r3
 80152cc:	17da      	asrs	r2, r3, #31
 80152ce:	e9cd 1200 	strd	r1, r2, [sp]
 80152d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80152d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80152da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152e0:	1a80      	subs	r0, r0, r2
 80152e2:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80152e6:	4582      	cmp	sl, r0
 80152e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80152ec:	eb7b 0101 	sbcs.w	r1, fp, r1
 80152f0:	da71      	bge.n	80153d6 <mktime+0x1fa>
 80152f2:	9800      	ldr	r0, [sp, #0]
 80152f4:	6a39      	ldr	r1, [r7, #32]
 80152f6:	1a09      	subs	r1, r1, r0
 80152f8:	9104      	str	r1, [sp, #16]
 80152fa:	9801      	ldr	r0, [sp, #4]
 80152fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80152fe:	eb61 0100 	sbc.w	r1, r1, r0
 8015302:	9105      	str	r1, [sp, #20]
 8015304:	6839      	ldr	r1, [r7, #0]
 8015306:	2900      	cmp	r1, #0
 8015308:	d075      	beq.n	80153f6 <mktime+0x21a>
 801530a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801530e:	4582      	cmp	sl, r0
 8015310:	eb7b 0101 	sbcs.w	r1, fp, r1
 8015314:	db05      	blt.n	8015322 <mktime+0x146>
 8015316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801531a:	4582      	cmp	sl, r0
 801531c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8015320:	db6f      	blt.n	8015402 <mktime+0x226>
 8015322:	f1b9 0f00 	cmp.w	r9, #0
 8015326:	f04f 0900 	mov.w	r9, #0
 801532a:	da6f      	bge.n	801540c <mktime+0x230>
 801532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801532e:	eb1a 0a03 	adds.w	sl, sl, r3
 8015332:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8015336:	e0ae      	b.n	8015496 <mktime+0x2ba>
 8015338:	f240 126d 	movw	r2, #365	; 0x16d
 801533c:	e7a3      	b.n	8015286 <mktime+0xaa>
 801533e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8015342:	e7a0      	b.n	8015286 <mktime+0xaa>
 8015344:	d0a3      	beq.n	801528e <mktime+0xb2>
 8015346:	2345      	movs	r3, #69	; 0x45
 8015348:	f240 1e6d 	movw	lr, #365	; 0x16d
 801534c:	2164      	movs	r1, #100	; 0x64
 801534e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8015352:	e012      	b.n	801537a <mktime+0x19e>
 8015354:	bb62      	cbnz	r2, 80153b0 <mktime+0x1d4>
 8015356:	fb93 f2f1 	sdiv	r2, r3, r1
 801535a:	fb01 3212 	mls	r2, r1, r2, r3
 801535e:	bb52      	cbnz	r2, 80153b6 <mktime+0x1da>
 8015360:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8015364:	fb9c f2f0 	sdiv	r2, ip, r0
 8015368:	fb00 c212 	mls	r2, r0, r2, ip
 801536c:	2a00      	cmp	r2, #0
 801536e:	bf14      	ite	ne
 8015370:	4672      	movne	r2, lr
 8015372:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8015376:	1aa4      	subs	r4, r4, r2
 8015378:	3b01      	subs	r3, #1
 801537a:	429e      	cmp	r6, r3
 801537c:	f003 0203 	and.w	r2, r3, #3
 8015380:	dbe8      	blt.n	8015354 <mktime+0x178>
 8015382:	b9da      	cbnz	r2, 80153bc <mktime+0x1e0>
 8015384:	2264      	movs	r2, #100	; 0x64
 8015386:	fb96 f3f2 	sdiv	r3, r6, r2
 801538a:	fb02 6313 	mls	r3, r2, r3, r6
 801538e:	b9c3      	cbnz	r3, 80153c2 <mktime+0x1e6>
 8015390:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8015394:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8015398:	fb91 f3f2 	sdiv	r3, r1, r2
 801539c:	fb02 1313 	mls	r3, r2, r3, r1
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	f240 136d 	movw	r3, #365	; 0x16d
 80153a6:	bf08      	it	eq
 80153a8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80153ac:	1ae4      	subs	r4, r4, r3
 80153ae:	e76e      	b.n	801528e <mktime+0xb2>
 80153b0:	f240 126d 	movw	r2, #365	; 0x16d
 80153b4:	e7df      	b.n	8015376 <mktime+0x19a>
 80153b6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80153ba:	e7dc      	b.n	8015376 <mktime+0x19a>
 80153bc:	f240 136d 	movw	r3, #365	; 0x16d
 80153c0:	e7f4      	b.n	80153ac <mktime+0x1d0>
 80153c2:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80153c6:	e7f1      	b.n	80153ac <mktime+0x1d0>
 80153c8:	f000 f980 	bl	80156cc <__tzcalc_limits>
 80153cc:	2800      	cmp	r0, #0
 80153ce:	f47f af7b 	bne.w	80152c8 <mktime+0xec>
 80153d2:	46c1      	mov	r9, r8
 80153d4:	e054      	b.n	8015480 <mktime+0x2a4>
 80153d6:	9800      	ldr	r0, [sp, #0]
 80153d8:	9902      	ldr	r1, [sp, #8]
 80153da:	1a09      	subs	r1, r1, r0
 80153dc:	9108      	str	r1, [sp, #32]
 80153de:	9801      	ldr	r0, [sp, #4]
 80153e0:	9903      	ldr	r1, [sp, #12]
 80153e2:	eb61 0100 	sbc.w	r1, r1, r0
 80153e6:	9109      	str	r1, [sp, #36]	; 0x24
 80153e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80153ec:	4582      	cmp	sl, r0
 80153ee:	eb7b 0101 	sbcs.w	r1, fp, r1
 80153f2:	dbee      	blt.n	80153d2 <mktime+0x1f6>
 80153f4:	e77d      	b.n	80152f2 <mktime+0x116>
 80153f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80153fa:	4582      	cmp	sl, r0
 80153fc:	eb7b 0101 	sbcs.w	r1, fp, r1
 8015400:	db89      	blt.n	8015316 <mktime+0x13a>
 8015402:	f1b9 0f00 	cmp.w	r9, #0
 8015406:	db3f      	blt.n	8015488 <mktime+0x2ac>
 8015408:	f04f 0901 	mov.w	r9, #1
 801540c:	ea88 0809 	eor.w	r8, r8, r9
 8015410:	f1b8 0f01 	cmp.w	r8, #1
 8015414:	d134      	bne.n	8015480 <mktime+0x2a4>
 8015416:	f1b9 0f00 	cmp.w	r9, #0
 801541a:	d04f      	beq.n	80154bc <mktime+0x2e0>
 801541c:	1ad3      	subs	r3, r2, r3
 801541e:	682a      	ldr	r2, [r5, #0]
 8015420:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8015424:	441a      	add	r2, r3
 8015426:	eb1a 0a03 	adds.w	sl, sl, r3
 801542a:	602a      	str	r2, [r5, #0]
 801542c:	4628      	mov	r0, r5
 801542e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8015432:	f7ff fdfb 	bl	801502c <validate_structure>
 8015436:	68ea      	ldr	r2, [r5, #12]
 8015438:	ebb2 0208 	subs.w	r2, r2, r8
 801543c:	d020      	beq.n	8015480 <mktime+0x2a4>
 801543e:	2a01      	cmp	r2, #1
 8015440:	dc3e      	bgt.n	80154c0 <mktime+0x2e4>
 8015442:	1c90      	adds	r0, r2, #2
 8015444:	bfd8      	it	le
 8015446:	2201      	movle	r2, #1
 8015448:	69eb      	ldr	r3, [r5, #28]
 801544a:	18d3      	adds	r3, r2, r3
 801544c:	4414      	add	r4, r2
 801544e:	d540      	bpl.n	80154d2 <mktime+0x2f6>
 8015450:	1e72      	subs	r2, r6, #1
 8015452:	0791      	lsls	r1, r2, #30
 8015454:	d137      	bne.n	80154c6 <mktime+0x2ea>
 8015456:	2164      	movs	r1, #100	; 0x64
 8015458:	fb92 f3f1 	sdiv	r3, r2, r1
 801545c:	fb01 2313 	mls	r3, r1, r3, r2
 8015460:	bba3      	cbnz	r3, 80154cc <mktime+0x2f0>
 8015462:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8015466:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801546a:	fb96 f3f2 	sdiv	r3, r6, r2
 801546e:	fb02 6613 	mls	r6, r2, r3, r6
 8015472:	2e00      	cmp	r6, #0
 8015474:	f240 136d 	movw	r3, #365	; 0x16d
 8015478:	bf18      	it	ne
 801547a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801547e:	61eb      	str	r3, [r5, #28]
 8015480:	f1b9 0f01 	cmp.w	r9, #1
 8015484:	f47f af52 	bne.w	801532c <mktime+0x150>
 8015488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801548a:	eb1a 0a03 	adds.w	sl, sl, r3
 801548e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8015492:	f04f 0901 	mov.w	r9, #1
 8015496:	f000 f9c7 	bl	8015828 <__tz_unlock>
 801549a:	3404      	adds	r4, #4
 801549c:	2307      	movs	r3, #7
 801549e:	fb94 f3f3 	sdiv	r3, r4, r3
 80154a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80154a6:	1ae4      	subs	r4, r4, r3
 80154a8:	bf48      	it	mi
 80154aa:	3407      	addmi	r4, #7
 80154ac:	f8c5 9020 	str.w	r9, [r5, #32]
 80154b0:	61ac      	str	r4, [r5, #24]
 80154b2:	4650      	mov	r0, sl
 80154b4:	4659      	mov	r1, fp
 80154b6:	b00b      	add	sp, #44	; 0x2c
 80154b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154bc:	1a9b      	subs	r3, r3, r2
 80154be:	e7ae      	b.n	801541e <mktime+0x242>
 80154c0:	f04f 32ff 	mov.w	r2, #4294967295
 80154c4:	e7c0      	b.n	8015448 <mktime+0x26c>
 80154c6:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80154ca:	e7d8      	b.n	801547e <mktime+0x2a2>
 80154cc:	f240 136d 	movw	r3, #365	; 0x16d
 80154d0:	e7d5      	b.n	801547e <mktime+0x2a2>
 80154d2:	07b2      	lsls	r2, r6, #30
 80154d4:	d117      	bne.n	8015506 <mktime+0x32a>
 80154d6:	2164      	movs	r1, #100	; 0x64
 80154d8:	fb96 f2f1 	sdiv	r2, r6, r1
 80154dc:	fb01 6212 	mls	r2, r1, r2, r6
 80154e0:	b9a2      	cbnz	r2, 801550c <mktime+0x330>
 80154e2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80154e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80154ea:	fb96 f2f1 	sdiv	r2, r6, r1
 80154ee:	fb01 6612 	mls	r6, r1, r2, r6
 80154f2:	2e00      	cmp	r6, #0
 80154f4:	f240 126d 	movw	r2, #365	; 0x16d
 80154f8:	bf08      	it	eq
 80154fa:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80154fe:	4293      	cmp	r3, r2
 8015500:	bfa8      	it	ge
 8015502:	1a9b      	subge	r3, r3, r2
 8015504:	e7bb      	b.n	801547e <mktime+0x2a2>
 8015506:	f240 126d 	movw	r2, #365	; 0x16d
 801550a:	e7f8      	b.n	80154fe <mktime+0x322>
 801550c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8015510:	e7f5      	b.n	80154fe <mktime+0x322>
 8015512:	f04f 3aff 	mov.w	sl, #4294967295
 8015516:	f04f 3bff 	mov.w	fp, #4294967295
 801551a:	e7ca      	b.n	80154b2 <mktime+0x2d6>
 801551c:	0801f980 	.word	0x0801f980
 8015520:	00015180 	.word	0x00015180
 8015524:	20004bf4 	.word	0x20004bf4

08015528 <printf>:
 8015528:	b40f      	push	{r0, r1, r2, r3}
 801552a:	b507      	push	{r0, r1, r2, lr}
 801552c:	4906      	ldr	r1, [pc, #24]	; (8015548 <printf+0x20>)
 801552e:	ab04      	add	r3, sp, #16
 8015530:	6808      	ldr	r0, [r1, #0]
 8015532:	f853 2b04 	ldr.w	r2, [r3], #4
 8015536:	6881      	ldr	r1, [r0, #8]
 8015538:	9301      	str	r3, [sp, #4]
 801553a:	f000 fafd 	bl	8015b38 <_vfprintf_r>
 801553e:	b003      	add	sp, #12
 8015540:	f85d eb04 	ldr.w	lr, [sp], #4
 8015544:	b004      	add	sp, #16
 8015546:	4770      	bx	lr
 8015548:	2000002c 	.word	0x2000002c

0801554c <rand>:
 801554c:	4b0b      	ldr	r3, [pc, #44]	; (801557c <rand+0x30>)
 801554e:	480c      	ldr	r0, [pc, #48]	; (8015580 <rand+0x34>)
 8015550:	6819      	ldr	r1, [r3, #0]
 8015552:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 8015556:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 801555a:	b510      	push	{r4, lr}
 801555c:	4c09      	ldr	r4, [pc, #36]	; (8015584 <rand+0x38>)
 801555e:	4350      	muls	r0, r2
 8015560:	fb04 0003 	mla	r0, r4, r3, r0
 8015564:	fba2 3404 	umull	r3, r4, r2, r4
 8015568:	1c5a      	adds	r2, r3, #1
 801556a:	4404      	add	r4, r0
 801556c:	f144 0000 	adc.w	r0, r4, #0
 8015570:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
 8015574:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015578:	bd10      	pop	{r4, pc}
 801557a:	bf00      	nop
 801557c:	2000002c 	.word	0x2000002c
 8015580:	5851f42d 	.word	0x5851f42d
 8015584:	4c957f2d 	.word	0x4c957f2d

08015588 <strncmp>:
 8015588:	b510      	push	{r4, lr}
 801558a:	b16a      	cbz	r2, 80155a8 <strncmp+0x20>
 801558c:	3901      	subs	r1, #1
 801558e:	1884      	adds	r4, r0, r2
 8015590:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015594:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015598:	4293      	cmp	r3, r2
 801559a:	d103      	bne.n	80155a4 <strncmp+0x1c>
 801559c:	42a0      	cmp	r0, r4
 801559e:	d001      	beq.n	80155a4 <strncmp+0x1c>
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d1f5      	bne.n	8015590 <strncmp+0x8>
 80155a4:	1a98      	subs	r0, r3, r2
 80155a6:	bd10      	pop	{r4, pc}
 80155a8:	4610      	mov	r0, r2
 80155aa:	e7fc      	b.n	80155a6 <strncmp+0x1e>

080155ac <_strtol_l.isra.0>:
 80155ac:	2b01      	cmp	r3, #1
 80155ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155b2:	d001      	beq.n	80155b8 <_strtol_l.isra.0+0xc>
 80155b4:	2b24      	cmp	r3, #36	; 0x24
 80155b6:	d906      	bls.n	80155c6 <_strtol_l.isra.0+0x1a>
 80155b8:	f002 fc12 	bl	8017de0 <__errno>
 80155bc:	2316      	movs	r3, #22
 80155be:	6003      	str	r3, [r0, #0]
 80155c0:	2000      	movs	r0, #0
 80155c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155c6:	4f3a      	ldr	r7, [pc, #232]	; (80156b0 <_strtol_l.isra.0+0x104>)
 80155c8:	468e      	mov	lr, r1
 80155ca:	4676      	mov	r6, lr
 80155cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80155d0:	5de5      	ldrb	r5, [r4, r7]
 80155d2:	f015 0508 	ands.w	r5, r5, #8
 80155d6:	d1f8      	bne.n	80155ca <_strtol_l.isra.0+0x1e>
 80155d8:	2c2d      	cmp	r4, #45	; 0x2d
 80155da:	d134      	bne.n	8015646 <_strtol_l.isra.0+0x9a>
 80155dc:	f89e 4000 	ldrb.w	r4, [lr]
 80155e0:	f04f 0801 	mov.w	r8, #1
 80155e4:	f106 0e02 	add.w	lr, r6, #2
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d05c      	beq.n	80156a6 <_strtol_l.isra.0+0xfa>
 80155ec:	2b10      	cmp	r3, #16
 80155ee:	d10c      	bne.n	801560a <_strtol_l.isra.0+0x5e>
 80155f0:	2c30      	cmp	r4, #48	; 0x30
 80155f2:	d10a      	bne.n	801560a <_strtol_l.isra.0+0x5e>
 80155f4:	f89e 4000 	ldrb.w	r4, [lr]
 80155f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80155fc:	2c58      	cmp	r4, #88	; 0x58
 80155fe:	d14d      	bne.n	801569c <_strtol_l.isra.0+0xf0>
 8015600:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015604:	2310      	movs	r3, #16
 8015606:	f10e 0e02 	add.w	lr, lr, #2
 801560a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801560e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015612:	2600      	movs	r6, #0
 8015614:	fbbc f9f3 	udiv	r9, ip, r3
 8015618:	4635      	mov	r5, r6
 801561a:	fb03 ca19 	mls	sl, r3, r9, ip
 801561e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015622:	2f09      	cmp	r7, #9
 8015624:	d818      	bhi.n	8015658 <_strtol_l.isra.0+0xac>
 8015626:	463c      	mov	r4, r7
 8015628:	42a3      	cmp	r3, r4
 801562a:	dd24      	ble.n	8015676 <_strtol_l.isra.0+0xca>
 801562c:	2e00      	cmp	r6, #0
 801562e:	db1f      	blt.n	8015670 <_strtol_l.isra.0+0xc4>
 8015630:	45a9      	cmp	r9, r5
 8015632:	d31d      	bcc.n	8015670 <_strtol_l.isra.0+0xc4>
 8015634:	d101      	bne.n	801563a <_strtol_l.isra.0+0x8e>
 8015636:	45a2      	cmp	sl, r4
 8015638:	db1a      	blt.n	8015670 <_strtol_l.isra.0+0xc4>
 801563a:	fb05 4503 	mla	r5, r5, r3, r4
 801563e:	2601      	movs	r6, #1
 8015640:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015644:	e7eb      	b.n	801561e <_strtol_l.isra.0+0x72>
 8015646:	2c2b      	cmp	r4, #43	; 0x2b
 8015648:	bf08      	it	eq
 801564a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801564e:	46a8      	mov	r8, r5
 8015650:	bf08      	it	eq
 8015652:	f106 0e02 	addeq.w	lr, r6, #2
 8015656:	e7c7      	b.n	80155e8 <_strtol_l.isra.0+0x3c>
 8015658:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801565c:	2f19      	cmp	r7, #25
 801565e:	d801      	bhi.n	8015664 <_strtol_l.isra.0+0xb8>
 8015660:	3c37      	subs	r4, #55	; 0x37
 8015662:	e7e1      	b.n	8015628 <_strtol_l.isra.0+0x7c>
 8015664:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015668:	2f19      	cmp	r7, #25
 801566a:	d804      	bhi.n	8015676 <_strtol_l.isra.0+0xca>
 801566c:	3c57      	subs	r4, #87	; 0x57
 801566e:	e7db      	b.n	8015628 <_strtol_l.isra.0+0x7c>
 8015670:	f04f 36ff 	mov.w	r6, #4294967295
 8015674:	e7e4      	b.n	8015640 <_strtol_l.isra.0+0x94>
 8015676:	2e00      	cmp	r6, #0
 8015678:	da05      	bge.n	8015686 <_strtol_l.isra.0+0xda>
 801567a:	2322      	movs	r3, #34	; 0x22
 801567c:	6003      	str	r3, [r0, #0]
 801567e:	4665      	mov	r5, ip
 8015680:	b942      	cbnz	r2, 8015694 <_strtol_l.isra.0+0xe8>
 8015682:	4628      	mov	r0, r5
 8015684:	e79d      	b.n	80155c2 <_strtol_l.isra.0+0x16>
 8015686:	f1b8 0f00 	cmp.w	r8, #0
 801568a:	d000      	beq.n	801568e <_strtol_l.isra.0+0xe2>
 801568c:	426d      	negs	r5, r5
 801568e:	2a00      	cmp	r2, #0
 8015690:	d0f7      	beq.n	8015682 <_strtol_l.isra.0+0xd6>
 8015692:	b10e      	cbz	r6, 8015698 <_strtol_l.isra.0+0xec>
 8015694:	f10e 31ff 	add.w	r1, lr, #4294967295
 8015698:	6011      	str	r1, [r2, #0]
 801569a:	e7f2      	b.n	8015682 <_strtol_l.isra.0+0xd6>
 801569c:	2430      	movs	r4, #48	; 0x30
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d1b3      	bne.n	801560a <_strtol_l.isra.0+0x5e>
 80156a2:	2308      	movs	r3, #8
 80156a4:	e7b1      	b.n	801560a <_strtol_l.isra.0+0x5e>
 80156a6:	2c30      	cmp	r4, #48	; 0x30
 80156a8:	d0a4      	beq.n	80155f4 <_strtol_l.isra.0+0x48>
 80156aa:	230a      	movs	r3, #10
 80156ac:	e7ad      	b.n	801560a <_strtol_l.isra.0+0x5e>
 80156ae:	bf00      	nop
 80156b0:	0801f849 	.word	0x0801f849

080156b4 <_strtol_r>:
 80156b4:	f7ff bf7a 	b.w	80155ac <_strtol_l.isra.0>

080156b8 <strtol>:
 80156b8:	4613      	mov	r3, r2
 80156ba:	460a      	mov	r2, r1
 80156bc:	4601      	mov	r1, r0
 80156be:	4802      	ldr	r0, [pc, #8]	; (80156c8 <strtol+0x10>)
 80156c0:	6800      	ldr	r0, [r0, #0]
 80156c2:	f7ff bf73 	b.w	80155ac <_strtol_l.isra.0>
 80156c6:	bf00      	nop
 80156c8:	2000002c 	.word	0x2000002c

080156cc <__tzcalc_limits>:
 80156cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d0:	4680      	mov	r8, r0
 80156d2:	f002 fe37 	bl	8018344 <__gettzinfo>
 80156d6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80156da:	4598      	cmp	r8, r3
 80156dc:	f340 8098 	ble.w	8015810 <__tzcalc_limits+0x144>
 80156e0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80156e4:	4443      	add	r3, r8
 80156e6:	109b      	asrs	r3, r3, #2
 80156e8:	f240 126d 	movw	r2, #365	; 0x16d
 80156ec:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80156f0:	fb02 3505 	mla	r5, r2, r5, r3
 80156f4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80156f8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80156fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8015700:	441d      	add	r5, r3
 8015702:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015706:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801570a:	fb98 f7f3 	sdiv	r7, r8, r3
 801570e:	fb03 8717 	mls	r7, r3, r7, r8
 8015712:	4442      	add	r2, r8
 8015714:	fab7 fc87 	clz	ip, r7
 8015718:	fbb2 f2f3 	udiv	r2, r2, r3
 801571c:	f008 0303 	and.w	r3, r8, #3
 8015720:	4415      	add	r5, r2
 8015722:	2264      	movs	r2, #100	; 0x64
 8015724:	f8c0 8004 	str.w	r8, [r0, #4]
 8015728:	fb98 f6f2 	sdiv	r6, r8, r2
 801572c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8015730:	fb02 8616 	mls	r6, r2, r6, r8
 8015734:	4604      	mov	r4, r0
 8015736:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801573a:	9300      	str	r3, [sp, #0]
 801573c:	f04f 0e07 	mov.w	lr, #7
 8015740:	7a22      	ldrb	r2, [r4, #8]
 8015742:	6963      	ldr	r3, [r4, #20]
 8015744:	2a4a      	cmp	r2, #74	; 0x4a
 8015746:	d128      	bne.n	801579a <__tzcalc_limits+0xce>
 8015748:	9900      	ldr	r1, [sp, #0]
 801574a:	18ea      	adds	r2, r5, r3
 801574c:	b901      	cbnz	r1, 8015750 <__tzcalc_limits+0x84>
 801574e:	b906      	cbnz	r6, 8015752 <__tzcalc_limits+0x86>
 8015750:	bb0f      	cbnz	r7, 8015796 <__tzcalc_limits+0xca>
 8015752:	2b3b      	cmp	r3, #59	; 0x3b
 8015754:	bfd4      	ite	le
 8015756:	2300      	movle	r3, #0
 8015758:	2301      	movgt	r3, #1
 801575a:	4413      	add	r3, r2
 801575c:	1e5a      	subs	r2, r3, #1
 801575e:	69a3      	ldr	r3, [r4, #24]
 8015760:	492c      	ldr	r1, [pc, #176]	; (8015814 <__tzcalc_limits+0x148>)
 8015762:	fb01 3202 	mla	r2, r1, r2, r3
 8015766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015768:	4413      	add	r3, r2
 801576a:	461a      	mov	r2, r3
 801576c:	17db      	asrs	r3, r3, #31
 801576e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015772:	3428      	adds	r4, #40	; 0x28
 8015774:	45a3      	cmp	fp, r4
 8015776:	d1e3      	bne.n	8015740 <__tzcalc_limits+0x74>
 8015778:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801577c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8015780:	4294      	cmp	r4, r2
 8015782:	eb75 0303 	sbcs.w	r3, r5, r3
 8015786:	bfb4      	ite	lt
 8015788:	2301      	movlt	r3, #1
 801578a:	2300      	movge	r3, #0
 801578c:	6003      	str	r3, [r0, #0]
 801578e:	2001      	movs	r0, #1
 8015790:	b003      	add	sp, #12
 8015792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015796:	2300      	movs	r3, #0
 8015798:	e7df      	b.n	801575a <__tzcalc_limits+0x8e>
 801579a:	2a44      	cmp	r2, #68	; 0x44
 801579c:	d101      	bne.n	80157a2 <__tzcalc_limits+0xd6>
 801579e:	18ea      	adds	r2, r5, r3
 80157a0:	e7dd      	b.n	801575e <__tzcalc_limits+0x92>
 80157a2:	9a00      	ldr	r2, [sp, #0]
 80157a4:	bb72      	cbnz	r2, 8015804 <__tzcalc_limits+0x138>
 80157a6:	2e00      	cmp	r6, #0
 80157a8:	bf0c      	ite	eq
 80157aa:	46e0      	moveq	r8, ip
 80157ac:	f04f 0801 	movne.w	r8, #1
 80157b0:	4919      	ldr	r1, [pc, #100]	; (8015818 <__tzcalc_limits+0x14c>)
 80157b2:	68e2      	ldr	r2, [r4, #12]
 80157b4:	9201      	str	r2, [sp, #4]
 80157b6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80157ba:	fb0a 1808 	mla	r8, sl, r8, r1
 80157be:	462a      	mov	r2, r5
 80157c0:	f04f 0900 	mov.w	r9, #0
 80157c4:	f1a8 0804 	sub.w	r8, r8, #4
 80157c8:	9901      	ldr	r1, [sp, #4]
 80157ca:	f109 0901 	add.w	r9, r9, #1
 80157ce:	4549      	cmp	r1, r9
 80157d0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80157d4:	dc18      	bgt.n	8015808 <__tzcalc_limits+0x13c>
 80157d6:	f102 0804 	add.w	r8, r2, #4
 80157da:	fb98 f9fe 	sdiv	r9, r8, lr
 80157de:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80157e2:	eba8 0909 	sub.w	r9, r8, r9
 80157e6:	ebb3 0909 	subs.w	r9, r3, r9
 80157ea:	6923      	ldr	r3, [r4, #16]
 80157ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80157f0:	bf48      	it	mi
 80157f2:	f109 0907 	addmi.w	r9, r9, #7
 80157f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80157fa:	444b      	add	r3, r9
 80157fc:	4553      	cmp	r3, sl
 80157fe:	da05      	bge.n	801580c <__tzcalc_limits+0x140>
 8015800:	441a      	add	r2, r3
 8015802:	e7ac      	b.n	801575e <__tzcalc_limits+0x92>
 8015804:	46e0      	mov	r8, ip
 8015806:	e7d3      	b.n	80157b0 <__tzcalc_limits+0xe4>
 8015808:	4452      	add	r2, sl
 801580a:	e7dd      	b.n	80157c8 <__tzcalc_limits+0xfc>
 801580c:	3b07      	subs	r3, #7
 801580e:	e7f5      	b.n	80157fc <__tzcalc_limits+0x130>
 8015810:	2000      	movs	r0, #0
 8015812:	e7bd      	b.n	8015790 <__tzcalc_limits+0xc4>
 8015814:	00015180 	.word	0x00015180
 8015818:	0801fac0 	.word	0x0801fac0

0801581c <__tz_lock>:
 801581c:	4801      	ldr	r0, [pc, #4]	; (8015824 <__tz_lock+0x8>)
 801581e:	f002 bd9b 	b.w	8018358 <__retarget_lock_acquire>
 8015822:	bf00      	nop
 8015824:	2000b663 	.word	0x2000b663

08015828 <__tz_unlock>:
 8015828:	4801      	ldr	r0, [pc, #4]	; (8015830 <__tz_unlock+0x8>)
 801582a:	f002 bd97 	b.w	801835c <__retarget_lock_release>
 801582e:	bf00      	nop
 8015830:	2000b663 	.word	0x2000b663

08015834 <_tzset_unlocked>:
 8015834:	4b01      	ldr	r3, [pc, #4]	; (801583c <_tzset_unlocked+0x8>)
 8015836:	6818      	ldr	r0, [r3, #0]
 8015838:	f000 b802 	b.w	8015840 <_tzset_unlocked_r>
 801583c:	2000002c 	.word	0x2000002c

08015840 <_tzset_unlocked_r>:
 8015840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015844:	b08d      	sub	sp, #52	; 0x34
 8015846:	4607      	mov	r7, r0
 8015848:	f002 fd7c 	bl	8018344 <__gettzinfo>
 801584c:	49ae      	ldr	r1, [pc, #696]	; (8015b08 <_tzset_unlocked_r+0x2c8>)
 801584e:	4eaf      	ldr	r6, [pc, #700]	; (8015b0c <_tzset_unlocked_r+0x2cc>)
 8015850:	4605      	mov	r5, r0
 8015852:	4638      	mov	r0, r7
 8015854:	f002 fd6e 	bl	8018334 <_getenv_r>
 8015858:	4604      	mov	r4, r0
 801585a:	b970      	cbnz	r0, 801587a <_tzset_unlocked_r+0x3a>
 801585c:	4bac      	ldr	r3, [pc, #688]	; (8015b10 <_tzset_unlocked_r+0x2d0>)
 801585e:	4aad      	ldr	r2, [pc, #692]	; (8015b14 <_tzset_unlocked_r+0x2d4>)
 8015860:	6018      	str	r0, [r3, #0]
 8015862:	4bad      	ldr	r3, [pc, #692]	; (8015b18 <_tzset_unlocked_r+0x2d8>)
 8015864:	6018      	str	r0, [r3, #0]
 8015866:	4bad      	ldr	r3, [pc, #692]	; (8015b1c <_tzset_unlocked_r+0x2dc>)
 8015868:	6830      	ldr	r0, [r6, #0]
 801586a:	e9c3 2200 	strd	r2, r2, [r3]
 801586e:	f002 fdeb 	bl	8018448 <free>
 8015872:	6034      	str	r4, [r6, #0]
 8015874:	b00d      	add	sp, #52	; 0x34
 8015876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801587a:	6831      	ldr	r1, [r6, #0]
 801587c:	2900      	cmp	r1, #0
 801587e:	d15f      	bne.n	8015940 <_tzset_unlocked_r+0x100>
 8015880:	6830      	ldr	r0, [r6, #0]
 8015882:	f002 fde1 	bl	8018448 <free>
 8015886:	4620      	mov	r0, r4
 8015888:	f7ea fcc2 	bl	8000210 <strlen>
 801588c:	1c41      	adds	r1, r0, #1
 801588e:	4638      	mov	r0, r7
 8015890:	f002 fde2 	bl	8018458 <_malloc_r>
 8015894:	6030      	str	r0, [r6, #0]
 8015896:	2800      	cmp	r0, #0
 8015898:	d157      	bne.n	801594a <_tzset_unlocked_r+0x10a>
 801589a:	7823      	ldrb	r3, [r4, #0]
 801589c:	4aa0      	ldr	r2, [pc, #640]	; (8015b20 <_tzset_unlocked_r+0x2e0>)
 801589e:	49a1      	ldr	r1, [pc, #644]	; (8015b24 <_tzset_unlocked_r+0x2e4>)
 80158a0:	2b3a      	cmp	r3, #58	; 0x3a
 80158a2:	bf08      	it	eq
 80158a4:	3401      	addeq	r4, #1
 80158a6:	ae0a      	add	r6, sp, #40	; 0x28
 80158a8:	4633      	mov	r3, r6
 80158aa:	4620      	mov	r0, r4
 80158ac:	f003 fb9a 	bl	8018fe4 <siscanf>
 80158b0:	2800      	cmp	r0, #0
 80158b2:	dddf      	ble.n	8015874 <_tzset_unlocked_r+0x34>
 80158b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158b6:	18e7      	adds	r7, r4, r3
 80158b8:	5ce3      	ldrb	r3, [r4, r3]
 80158ba:	2b2d      	cmp	r3, #45	; 0x2d
 80158bc:	d149      	bne.n	8015952 <_tzset_unlocked_r+0x112>
 80158be:	3701      	adds	r7, #1
 80158c0:	f04f 34ff 	mov.w	r4, #4294967295
 80158c4:	f10d 0a20 	add.w	sl, sp, #32
 80158c8:	f10d 0b1e 	add.w	fp, sp, #30
 80158cc:	f04f 0800 	mov.w	r8, #0
 80158d0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80158d4:	4994      	ldr	r1, [pc, #592]	; (8015b28 <_tzset_unlocked_r+0x2e8>)
 80158d6:	9603      	str	r6, [sp, #12]
 80158d8:	f8cd b000 	str.w	fp, [sp]
 80158dc:	4633      	mov	r3, r6
 80158de:	aa07      	add	r2, sp, #28
 80158e0:	4638      	mov	r0, r7
 80158e2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80158e6:	f8ad 8020 	strh.w	r8, [sp, #32]
 80158ea:	f003 fb7b 	bl	8018fe4 <siscanf>
 80158ee:	4540      	cmp	r0, r8
 80158f0:	ddc0      	ble.n	8015874 <_tzset_unlocked_r+0x34>
 80158f2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80158f6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80158fa:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8015b34 <_tzset_unlocked_r+0x2f4>
 80158fe:	213c      	movs	r1, #60	; 0x3c
 8015900:	fb01 2203 	mla	r2, r1, r3, r2
 8015904:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015908:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801590c:	fb01 2303 	mla	r3, r1, r3, r2
 8015910:	435c      	muls	r4, r3
 8015912:	62ac      	str	r4, [r5, #40]	; 0x28
 8015914:	4c81      	ldr	r4, [pc, #516]	; (8015b1c <_tzset_unlocked_r+0x2dc>)
 8015916:	4b82      	ldr	r3, [pc, #520]	; (8015b20 <_tzset_unlocked_r+0x2e0>)
 8015918:	6023      	str	r3, [r4, #0]
 801591a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801591c:	4981      	ldr	r1, [pc, #516]	; (8015b24 <_tzset_unlocked_r+0x2e4>)
 801591e:	441f      	add	r7, r3
 8015920:	464a      	mov	r2, r9
 8015922:	4633      	mov	r3, r6
 8015924:	4638      	mov	r0, r7
 8015926:	f003 fb5d 	bl	8018fe4 <siscanf>
 801592a:	4540      	cmp	r0, r8
 801592c:	dc16      	bgt.n	801595c <_tzset_unlocked_r+0x11c>
 801592e:	6823      	ldr	r3, [r4, #0]
 8015930:	6063      	str	r3, [r4, #4]
 8015932:	4b77      	ldr	r3, [pc, #476]	; (8015b10 <_tzset_unlocked_r+0x2d0>)
 8015934:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015936:	601a      	str	r2, [r3, #0]
 8015938:	4b77      	ldr	r3, [pc, #476]	; (8015b18 <_tzset_unlocked_r+0x2d8>)
 801593a:	f8c3 8000 	str.w	r8, [r3]
 801593e:	e799      	b.n	8015874 <_tzset_unlocked_r+0x34>
 8015940:	f7ea fcbe 	bl	80002c0 <strcmp>
 8015944:	2800      	cmp	r0, #0
 8015946:	d19b      	bne.n	8015880 <_tzset_unlocked_r+0x40>
 8015948:	e794      	b.n	8015874 <_tzset_unlocked_r+0x34>
 801594a:	4621      	mov	r1, r4
 801594c:	f003 fbbb 	bl	80190c6 <strcpy>
 8015950:	e7a3      	b.n	801589a <_tzset_unlocked_r+0x5a>
 8015952:	2b2b      	cmp	r3, #43	; 0x2b
 8015954:	bf08      	it	eq
 8015956:	3701      	addeq	r7, #1
 8015958:	2401      	movs	r4, #1
 801595a:	e7b3      	b.n	80158c4 <_tzset_unlocked_r+0x84>
 801595c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801595e:	f8c4 9004 	str.w	r9, [r4, #4]
 8015962:	18fc      	adds	r4, r7, r3
 8015964:	5cfb      	ldrb	r3, [r7, r3]
 8015966:	2b2d      	cmp	r3, #45	; 0x2d
 8015968:	f040 808b 	bne.w	8015a82 <_tzset_unlocked_r+0x242>
 801596c:	3401      	adds	r4, #1
 801596e:	f04f 37ff 	mov.w	r7, #4294967295
 8015972:	2300      	movs	r3, #0
 8015974:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015978:	f8ad 301e 	strh.w	r3, [sp, #30]
 801597c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015980:	930a      	str	r3, [sp, #40]	; 0x28
 8015982:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015986:	e9cd b600 	strd	fp, r6, [sp]
 801598a:	4967      	ldr	r1, [pc, #412]	; (8015b28 <_tzset_unlocked_r+0x2e8>)
 801598c:	4633      	mov	r3, r6
 801598e:	aa07      	add	r2, sp, #28
 8015990:	4620      	mov	r0, r4
 8015992:	f003 fb27 	bl	8018fe4 <siscanf>
 8015996:	2800      	cmp	r0, #0
 8015998:	dc78      	bgt.n	8015a8c <_tzset_unlocked_r+0x24c>
 801599a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801599c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80159a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159a2:	652f      	str	r7, [r5, #80]	; 0x50
 80159a4:	441c      	add	r4, r3
 80159a6:	462f      	mov	r7, r5
 80159a8:	f04f 0900 	mov.w	r9, #0
 80159ac:	7823      	ldrb	r3, [r4, #0]
 80159ae:	2b2c      	cmp	r3, #44	; 0x2c
 80159b0:	bf08      	it	eq
 80159b2:	3401      	addeq	r4, #1
 80159b4:	f894 8000 	ldrb.w	r8, [r4]
 80159b8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80159bc:	d178      	bne.n	8015ab0 <_tzset_unlocked_r+0x270>
 80159be:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80159c2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80159c6:	ab09      	add	r3, sp, #36	; 0x24
 80159c8:	9300      	str	r3, [sp, #0]
 80159ca:	4958      	ldr	r1, [pc, #352]	; (8015b2c <_tzset_unlocked_r+0x2ec>)
 80159cc:	9603      	str	r6, [sp, #12]
 80159ce:	4633      	mov	r3, r6
 80159d0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80159d4:	4620      	mov	r0, r4
 80159d6:	f003 fb05 	bl	8018fe4 <siscanf>
 80159da:	2803      	cmp	r0, #3
 80159dc:	f47f af4a 	bne.w	8015874 <_tzset_unlocked_r+0x34>
 80159e0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80159e4:	1e4b      	subs	r3, r1, #1
 80159e6:	2b0b      	cmp	r3, #11
 80159e8:	f63f af44 	bhi.w	8015874 <_tzset_unlocked_r+0x34>
 80159ec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80159f0:	1e53      	subs	r3, r2, #1
 80159f2:	2b04      	cmp	r3, #4
 80159f4:	f63f af3e 	bhi.w	8015874 <_tzset_unlocked_r+0x34>
 80159f8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80159fc:	2b06      	cmp	r3, #6
 80159fe:	f63f af39 	bhi.w	8015874 <_tzset_unlocked_r+0x34>
 8015a02:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8015a06:	f887 8008 	strb.w	r8, [r7, #8]
 8015a0a:	617b      	str	r3, [r7, #20]
 8015a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a0e:	eb04 0803 	add.w	r8, r4, r3
 8015a12:	2302      	movs	r3, #2
 8015a14:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015a18:	2300      	movs	r3, #0
 8015a1a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015a1e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015a22:	930a      	str	r3, [sp, #40]	; 0x28
 8015a24:	f898 3000 	ldrb.w	r3, [r8]
 8015a28:	2b2f      	cmp	r3, #47	; 0x2f
 8015a2a:	d109      	bne.n	8015a40 <_tzset_unlocked_r+0x200>
 8015a2c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015a30:	e9cd b600 	strd	fp, r6, [sp]
 8015a34:	493e      	ldr	r1, [pc, #248]	; (8015b30 <_tzset_unlocked_r+0x2f0>)
 8015a36:	4633      	mov	r3, r6
 8015a38:	aa07      	add	r2, sp, #28
 8015a3a:	4640      	mov	r0, r8
 8015a3c:	f003 fad2 	bl	8018fe4 <siscanf>
 8015a40:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015a44:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015a48:	213c      	movs	r1, #60	; 0x3c
 8015a4a:	fb01 2203 	mla	r2, r1, r3, r2
 8015a4e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015a52:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015a56:	fb01 2303 	mla	r3, r1, r3, r2
 8015a5a:	61bb      	str	r3, [r7, #24]
 8015a5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015a5e:	3728      	adds	r7, #40	; 0x28
 8015a60:	4444      	add	r4, r8
 8015a62:	f1b9 0f00 	cmp.w	r9, #0
 8015a66:	d020      	beq.n	8015aaa <_tzset_unlocked_r+0x26a>
 8015a68:	6868      	ldr	r0, [r5, #4]
 8015a6a:	f7ff fe2f 	bl	80156cc <__tzcalc_limits>
 8015a6e:	4b28      	ldr	r3, [pc, #160]	; (8015b10 <_tzset_unlocked_r+0x2d0>)
 8015a70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015a72:	601a      	str	r2, [r3, #0]
 8015a74:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8015a76:	1a9b      	subs	r3, r3, r2
 8015a78:	4a27      	ldr	r2, [pc, #156]	; (8015b18 <_tzset_unlocked_r+0x2d8>)
 8015a7a:	bf18      	it	ne
 8015a7c:	2301      	movne	r3, #1
 8015a7e:	6013      	str	r3, [r2, #0]
 8015a80:	e6f8      	b.n	8015874 <_tzset_unlocked_r+0x34>
 8015a82:	2b2b      	cmp	r3, #43	; 0x2b
 8015a84:	bf08      	it	eq
 8015a86:	3401      	addeq	r4, #1
 8015a88:	2701      	movs	r7, #1
 8015a8a:	e772      	b.n	8015972 <_tzset_unlocked_r+0x132>
 8015a8c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015a90:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015a94:	213c      	movs	r1, #60	; 0x3c
 8015a96:	fb01 2203 	mla	r2, r1, r3, r2
 8015a9a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015a9e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015aa2:	fb01 2303 	mla	r3, r1, r3, r2
 8015aa6:	435f      	muls	r7, r3
 8015aa8:	e77a      	b.n	80159a0 <_tzset_unlocked_r+0x160>
 8015aaa:	f04f 0901 	mov.w	r9, #1
 8015aae:	e77d      	b.n	80159ac <_tzset_unlocked_r+0x16c>
 8015ab0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8015ab4:	bf06      	itte	eq
 8015ab6:	3401      	addeq	r4, #1
 8015ab8:	4643      	moveq	r3, r8
 8015aba:	2344      	movne	r3, #68	; 0x44
 8015abc:	220a      	movs	r2, #10
 8015abe:	a90b      	add	r1, sp, #44	; 0x2c
 8015ac0:	4620      	mov	r0, r4
 8015ac2:	9305      	str	r3, [sp, #20]
 8015ac4:	f003 fb98 	bl	80191f8 <strtoul>
 8015ac8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8015acc:	9b05      	ldr	r3, [sp, #20]
 8015ace:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8015ad2:	45a0      	cmp	r8, r4
 8015ad4:	d114      	bne.n	8015b00 <_tzset_unlocked_r+0x2c0>
 8015ad6:	234d      	movs	r3, #77	; 0x4d
 8015ad8:	f1b9 0f00 	cmp.w	r9, #0
 8015adc:	d107      	bne.n	8015aee <_tzset_unlocked_r+0x2ae>
 8015ade:	722b      	strb	r3, [r5, #8]
 8015ae0:	2103      	movs	r1, #3
 8015ae2:	2302      	movs	r3, #2
 8015ae4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8015ae8:	f8c5 9014 	str.w	r9, [r5, #20]
 8015aec:	e791      	b.n	8015a12 <_tzset_unlocked_r+0x1d2>
 8015aee:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8015af2:	220b      	movs	r2, #11
 8015af4:	2301      	movs	r3, #1
 8015af6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8015afa:	2300      	movs	r3, #0
 8015afc:	63eb      	str	r3, [r5, #60]	; 0x3c
 8015afe:	e788      	b.n	8015a12 <_tzset_unlocked_r+0x1d2>
 8015b00:	b280      	uxth	r0, r0
 8015b02:	723b      	strb	r3, [r7, #8]
 8015b04:	6178      	str	r0, [r7, #20]
 8015b06:	e784      	b.n	8015a12 <_tzset_unlocked_r+0x1d2>
 8015b08:	0801f9b0 	.word	0x0801f9b0
 8015b0c:	20004bf0 	.word	0x20004bf0
 8015b10:	20004bf8 	.word	0x20004bf8
 8015b14:	0801f9b3 	.word	0x0801f9b3
 8015b18:	20004bf4 	.word	0x20004bf4
 8015b1c:	20000458 	.word	0x20000458
 8015b20:	20004be5 	.word	0x20004be5
 8015b24:	0801f9b7 	.word	0x0801f9b7
 8015b28:	0801f9da 	.word	0x0801f9da
 8015b2c:	0801f9c6 	.word	0x0801f9c6
 8015b30:	0801f9d9 	.word	0x0801f9d9
 8015b34:	20004bda 	.word	0x20004bda

08015b38 <_vfprintf_r>:
 8015b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b3c:	ed2d 8b04 	vpush	{d8-d9}
 8015b40:	b0cf      	sub	sp, #316	; 0x13c
 8015b42:	4689      	mov	r9, r1
 8015b44:	9203      	str	r2, [sp, #12]
 8015b46:	461c      	mov	r4, r3
 8015b48:	461e      	mov	r6, r3
 8015b4a:	4682      	mov	sl, r0
 8015b4c:	f002 fbfe 	bl	801834c <_localeconv_r>
 8015b50:	6803      	ldr	r3, [r0, #0]
 8015b52:	9313      	str	r3, [sp, #76]	; 0x4c
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7ea fb5b 	bl	8000210 <strlen>
 8015b5a:	900e      	str	r0, [sp, #56]	; 0x38
 8015b5c:	f1ba 0f00 	cmp.w	sl, #0
 8015b60:	d005      	beq.n	8015b6e <_vfprintf_r+0x36>
 8015b62:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 8015b66:	b913      	cbnz	r3, 8015b6e <_vfprintf_r+0x36>
 8015b68:	4650      	mov	r0, sl
 8015b6a:	f002 fa39 	bl	8017fe0 <__sinit>
 8015b6e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8015b72:	07d8      	lsls	r0, r3, #31
 8015b74:	d407      	bmi.n	8015b86 <_vfprintf_r+0x4e>
 8015b76:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015b7a:	0599      	lsls	r1, r3, #22
 8015b7c:	d403      	bmi.n	8015b86 <_vfprintf_r+0x4e>
 8015b7e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8015b82:	f002 fbea 	bl	801835a <__retarget_lock_acquire_recursive>
 8015b86:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 8015b8a:	049a      	lsls	r2, r3, #18
 8015b8c:	d409      	bmi.n	8015ba2 <_vfprintf_r+0x6a>
 8015b8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015b92:	f8a9 300c 	strh.w	r3, [r9, #12]
 8015b96:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8015b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015b9e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8015ba2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015ba6:	071f      	lsls	r7, r3, #28
 8015ba8:	d502      	bpl.n	8015bb0 <_vfprintf_r+0x78>
 8015baa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015bae:	b9d3      	cbnz	r3, 8015be6 <_vfprintf_r+0xae>
 8015bb0:	4649      	mov	r1, r9
 8015bb2:	4650      	mov	r0, sl
 8015bb4:	f001 fa36 	bl	8017024 <__swsetup_r>
 8015bb8:	b1a8      	cbz	r0, 8015be6 <_vfprintf_r+0xae>
 8015bba:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8015bbe:	07dd      	lsls	r5, r3, #31
 8015bc0:	d508      	bpl.n	8015bd4 <_vfprintf_r+0x9c>
 8015bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8015bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8015bc8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015bca:	b04f      	add	sp, #316	; 0x13c
 8015bcc:	ecbd 8b04 	vpop	{d8-d9}
 8015bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bd4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015bd8:	059c      	lsls	r4, r3, #22
 8015bda:	d4f2      	bmi.n	8015bc2 <_vfprintf_r+0x8a>
 8015bdc:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8015be0:	f002 fbbd 	bl	801835e <__retarget_lock_release_recursive>
 8015be4:	e7ed      	b.n	8015bc2 <_vfprintf_r+0x8a>
 8015be6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015bea:	f003 021a 	and.w	r2, r3, #26
 8015bee:	2a0a      	cmp	r2, #10
 8015bf0:	d115      	bne.n	8015c1e <_vfprintf_r+0xe6>
 8015bf2:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8015bf6:	2a00      	cmp	r2, #0
 8015bf8:	db11      	blt.n	8015c1e <_vfprintf_r+0xe6>
 8015bfa:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 8015bfe:	07d0      	lsls	r0, r2, #31
 8015c00:	d405      	bmi.n	8015c0e <_vfprintf_r+0xd6>
 8015c02:	0599      	lsls	r1, r3, #22
 8015c04:	d403      	bmi.n	8015c0e <_vfprintf_r+0xd6>
 8015c06:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8015c0a:	f002 fba8 	bl	801835e <__retarget_lock_release_recursive>
 8015c0e:	9a03      	ldr	r2, [sp, #12]
 8015c10:	4623      	mov	r3, r4
 8015c12:	4649      	mov	r1, r9
 8015c14:	4650      	mov	r0, sl
 8015c16:	f001 f9c5 	bl	8016fa4 <__sbprintf>
 8015c1a:	900f      	str	r0, [sp, #60]	; 0x3c
 8015c1c:	e7d4      	b.n	8015bc8 <_vfprintf_r+0x90>
 8015c1e:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 8015e88 <_vfprintf_r+0x350>
 8015c22:	2500      	movs	r5, #0
 8015c24:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8015c28:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015c2c:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8015c30:	ac25      	add	r4, sp, #148	; 0x94
 8015c32:	9422      	str	r4, [sp, #136]	; 0x88
 8015c34:	9505      	str	r5, [sp, #20]
 8015c36:	950a      	str	r5, [sp, #40]	; 0x28
 8015c38:	9512      	str	r5, [sp, #72]	; 0x48
 8015c3a:	9514      	str	r5, [sp, #80]	; 0x50
 8015c3c:	950f      	str	r5, [sp, #60]	; 0x3c
 8015c3e:	9b03      	ldr	r3, [sp, #12]
 8015c40:	461d      	mov	r5, r3
 8015c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c46:	b10a      	cbz	r2, 8015c4c <_vfprintf_r+0x114>
 8015c48:	2a25      	cmp	r2, #37	; 0x25
 8015c4a:	d1f9      	bne.n	8015c40 <_vfprintf_r+0x108>
 8015c4c:	9b03      	ldr	r3, [sp, #12]
 8015c4e:	1aef      	subs	r7, r5, r3
 8015c50:	d00d      	beq.n	8015c6e <_vfprintf_r+0x136>
 8015c52:	e9c4 3700 	strd	r3, r7, [r4]
 8015c56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015c58:	443b      	add	r3, r7
 8015c5a:	9324      	str	r3, [sp, #144]	; 0x90
 8015c5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015c5e:	3301      	adds	r3, #1
 8015c60:	2b07      	cmp	r3, #7
 8015c62:	9323      	str	r3, [sp, #140]	; 0x8c
 8015c64:	dc79      	bgt.n	8015d5a <_vfprintf_r+0x222>
 8015c66:	3408      	adds	r4, #8
 8015c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c6a:	443b      	add	r3, r7
 8015c6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c6e:	782b      	ldrb	r3, [r5, #0]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	f001 8156 	beq.w	8016f22 <_vfprintf_r+0x13ea>
 8015c76:	2300      	movs	r3, #0
 8015c78:	3501      	adds	r5, #1
 8015c7a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8015c7e:	f04f 38ff 	mov.w	r8, #4294967295
 8015c82:	9310      	str	r3, [sp, #64]	; 0x40
 8015c84:	469b      	mov	fp, r3
 8015c86:	270a      	movs	r7, #10
 8015c88:	212b      	movs	r1, #43	; 0x2b
 8015c8a:	462a      	mov	r2, r5
 8015c8c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8015c90:	9307      	str	r3, [sp, #28]
 8015c92:	4613      	mov	r3, r2
 8015c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c96:	9b07      	ldr	r3, [sp, #28]
 8015c98:	3b20      	subs	r3, #32
 8015c9a:	2b5a      	cmp	r3, #90	; 0x5a
 8015c9c:	f200 85c0 	bhi.w	8016820 <_vfprintf_r+0xce8>
 8015ca0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015ca4:	05be007e 	.word	0x05be007e
 8015ca8:	008605be 	.word	0x008605be
 8015cac:	05be05be 	.word	0x05be05be
 8015cb0:	006505be 	.word	0x006505be
 8015cb4:	05be05be 	.word	0x05be05be
 8015cb8:	00930089 	.word	0x00930089
 8015cbc:	009005be 	.word	0x009005be
 8015cc0:	05be0096 	.word	0x05be0096
 8015cc4:	00b200af 	.word	0x00b200af
 8015cc8:	00b200b2 	.word	0x00b200b2
 8015ccc:	00b200b2 	.word	0x00b200b2
 8015cd0:	00b200b2 	.word	0x00b200b2
 8015cd4:	00b200b2 	.word	0x00b200b2
 8015cd8:	05be05be 	.word	0x05be05be
 8015cdc:	05be05be 	.word	0x05be05be
 8015ce0:	05be05be 	.word	0x05be05be
 8015ce4:	012105be 	.word	0x012105be
 8015ce8:	00df05be 	.word	0x00df05be
 8015cec:	012100f6 	.word	0x012100f6
 8015cf0:	01210121 	.word	0x01210121
 8015cf4:	05be05be 	.word	0x05be05be
 8015cf8:	05be05be 	.word	0x05be05be
 8015cfc:	05be00c2 	.word	0x05be00c2
 8015d00:	049005be 	.word	0x049005be
 8015d04:	05be05be 	.word	0x05be05be
 8015d08:	04d705be 	.word	0x04d705be
 8015d0c:	04fb05be 	.word	0x04fb05be
 8015d10:	05be05be 	.word	0x05be05be
 8015d14:	05be051a 	.word	0x05be051a
 8015d18:	05be05be 	.word	0x05be05be
 8015d1c:	05be05be 	.word	0x05be05be
 8015d20:	05be05be 	.word	0x05be05be
 8015d24:	012105be 	.word	0x012105be
 8015d28:	00df05be 	.word	0x00df05be
 8015d2c:	012100f8 	.word	0x012100f8
 8015d30:	01210121 	.word	0x01210121
 8015d34:	00f800c5 	.word	0x00f800c5
 8015d38:	05be00d9 	.word	0x05be00d9
 8015d3c:	05be00d2 	.word	0x05be00d2
 8015d40:	0492046d 	.word	0x0492046d
 8015d44:	00d904c6 	.word	0x00d904c6
 8015d48:	04d705be 	.word	0x04d705be
 8015d4c:	04fd007c 	.word	0x04fd007c
 8015d50:	05be05be 	.word	0x05be05be
 8015d54:	05be0537 	.word	0x05be0537
 8015d58:	007c      	.short	0x007c
 8015d5a:	aa22      	add	r2, sp, #136	; 0x88
 8015d5c:	4649      	mov	r1, r9
 8015d5e:	4650      	mov	r0, sl
 8015d60:	f004 fad1 	bl	801a306 <__sprint_r>
 8015d64:	2800      	cmp	r0, #0
 8015d66:	f040 8130 	bne.w	8015fca <_vfprintf_r+0x492>
 8015d6a:	ac25      	add	r4, sp, #148	; 0x94
 8015d6c:	e77c      	b.n	8015c68 <_vfprintf_r+0x130>
 8015d6e:	4650      	mov	r0, sl
 8015d70:	f002 faec 	bl	801834c <_localeconv_r>
 8015d74:	6843      	ldr	r3, [r0, #4]
 8015d76:	9314      	str	r3, [sp, #80]	; 0x50
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7ea fa49 	bl	8000210 <strlen>
 8015d7e:	9012      	str	r0, [sp, #72]	; 0x48
 8015d80:	4650      	mov	r0, sl
 8015d82:	f002 fae3 	bl	801834c <_localeconv_r>
 8015d86:	6883      	ldr	r3, [r0, #8]
 8015d88:	930a      	str	r3, [sp, #40]	; 0x28
 8015d8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d8c:	212b      	movs	r1, #43	; 0x2b
 8015d8e:	b12b      	cbz	r3, 8015d9c <_vfprintf_r+0x264>
 8015d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d92:	b11b      	cbz	r3, 8015d9c <_vfprintf_r+0x264>
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	b10b      	cbz	r3, 8015d9c <_vfprintf_r+0x264>
 8015d98:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8015d9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015d9e:	e774      	b.n	8015c8a <_vfprintf_r+0x152>
 8015da0:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d1f9      	bne.n	8015d9c <_vfprintf_r+0x264>
 8015da8:	2320      	movs	r3, #32
 8015daa:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8015dae:	e7f5      	b.n	8015d9c <_vfprintf_r+0x264>
 8015db0:	f04b 0b01 	orr.w	fp, fp, #1
 8015db4:	e7f2      	b.n	8015d9c <_vfprintf_r+0x264>
 8015db6:	f856 3b04 	ldr.w	r3, [r6], #4
 8015dba:	9310      	str	r3, [sp, #64]	; 0x40
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	daed      	bge.n	8015d9c <_vfprintf_r+0x264>
 8015dc0:	425b      	negs	r3, r3
 8015dc2:	9310      	str	r3, [sp, #64]	; 0x40
 8015dc4:	f04b 0b04 	orr.w	fp, fp, #4
 8015dc8:	e7e8      	b.n	8015d9c <_vfprintf_r+0x264>
 8015dca:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8015dce:	e7e5      	b.n	8015d9c <_vfprintf_r+0x264>
 8015dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015dd6:	9207      	str	r2, [sp, #28]
 8015dd8:	2a2a      	cmp	r2, #42	; 0x2a
 8015dda:	d10f      	bne.n	8015dfc <_vfprintf_r+0x2c4>
 8015ddc:	f856 0b04 	ldr.w	r0, [r6], #4
 8015de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8015de2:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 8015de6:	e7d9      	b.n	8015d9c <_vfprintf_r+0x264>
 8015de8:	fb07 2808 	mla	r8, r7, r8, r2
 8015dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015df0:	9207      	str	r2, [sp, #28]
 8015df2:	9a07      	ldr	r2, [sp, #28]
 8015df4:	3a30      	subs	r2, #48	; 0x30
 8015df6:	2a09      	cmp	r2, #9
 8015df8:	d9f6      	bls.n	8015de8 <_vfprintf_r+0x2b0>
 8015dfa:	e74b      	b.n	8015c94 <_vfprintf_r+0x15c>
 8015dfc:	f04f 0800 	mov.w	r8, #0
 8015e00:	e7f7      	b.n	8015df2 <_vfprintf_r+0x2ba>
 8015e02:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8015e06:	e7c9      	b.n	8015d9c <_vfprintf_r+0x264>
 8015e08:	2200      	movs	r2, #0
 8015e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e0c:	9210      	str	r2, [sp, #64]	; 0x40
 8015e0e:	9a07      	ldr	r2, [sp, #28]
 8015e10:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015e12:	3a30      	subs	r2, #48	; 0x30
 8015e14:	fb07 2200 	mla	r2, r7, r0, r2
 8015e18:	9210      	str	r2, [sp, #64]	; 0x40
 8015e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e1e:	9207      	str	r2, [sp, #28]
 8015e20:	3a30      	subs	r2, #48	; 0x30
 8015e22:	2a09      	cmp	r2, #9
 8015e24:	d9f3      	bls.n	8015e0e <_vfprintf_r+0x2d6>
 8015e26:	e735      	b.n	8015c94 <_vfprintf_r+0x15c>
 8015e28:	f04b 0b08 	orr.w	fp, fp, #8
 8015e2c:	e7b6      	b.n	8015d9c <_vfprintf_r+0x264>
 8015e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e30:	781b      	ldrb	r3, [r3, #0]
 8015e32:	2b68      	cmp	r3, #104	; 0x68
 8015e34:	bf01      	itttt	eq
 8015e36:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8015e38:	3301      	addeq	r3, #1
 8015e3a:	930b      	streq	r3, [sp, #44]	; 0x2c
 8015e3c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8015e40:	bf18      	it	ne
 8015e42:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8015e46:	e7a9      	b.n	8015d9c <_vfprintf_r+0x264>
 8015e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e4a:	781b      	ldrb	r3, [r3, #0]
 8015e4c:	2b6c      	cmp	r3, #108	; 0x6c
 8015e4e:	d105      	bne.n	8015e5c <_vfprintf_r+0x324>
 8015e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e52:	3301      	adds	r3, #1
 8015e54:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e56:	f04b 0b20 	orr.w	fp, fp, #32
 8015e5a:	e79f      	b.n	8015d9c <_vfprintf_r+0x264>
 8015e5c:	f04b 0b10 	orr.w	fp, fp, #16
 8015e60:	e79c      	b.n	8015d9c <_vfprintf_r+0x264>
 8015e62:	4632      	mov	r2, r6
 8015e64:	2000      	movs	r0, #0
 8015e66:	f852 3b04 	ldr.w	r3, [r2], #4
 8015e6a:	9206      	str	r2, [sp, #24]
 8015e6c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8015e70:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8015e74:	ab35      	add	r3, sp, #212	; 0xd4
 8015e76:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8015e7a:	9004      	str	r0, [sp, #16]
 8015e7c:	f04f 0801 	mov.w	r8, #1
 8015e80:	4606      	mov	r6, r0
 8015e82:	4605      	mov	r5, r0
 8015e84:	9303      	str	r3, [sp, #12]
 8015e86:	e1c3      	b.n	8016210 <_vfprintf_r+0x6d8>
	...
 8015e90:	f04b 0b10 	orr.w	fp, fp, #16
 8015e94:	f01b 0f20 	tst.w	fp, #32
 8015e98:	d012      	beq.n	8015ec0 <_vfprintf_r+0x388>
 8015e9a:	3607      	adds	r6, #7
 8015e9c:	f026 0307 	bic.w	r3, r6, #7
 8015ea0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8015ea4:	9306      	str	r3, [sp, #24]
 8015ea6:	2e00      	cmp	r6, #0
 8015ea8:	f177 0300 	sbcs.w	r3, r7, #0
 8015eac:	da06      	bge.n	8015ebc <_vfprintf_r+0x384>
 8015eae:	4276      	negs	r6, r6
 8015eb0:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8015eb4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8015eb8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	e392      	b.n	80165e6 <_vfprintf_r+0xaae>
 8015ec0:	1d33      	adds	r3, r6, #4
 8015ec2:	f01b 0f10 	tst.w	fp, #16
 8015ec6:	9306      	str	r3, [sp, #24]
 8015ec8:	d002      	beq.n	8015ed0 <_vfprintf_r+0x398>
 8015eca:	6836      	ldr	r6, [r6, #0]
 8015ecc:	17f7      	asrs	r7, r6, #31
 8015ece:	e7ea      	b.n	8015ea6 <_vfprintf_r+0x36e>
 8015ed0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8015ed4:	6836      	ldr	r6, [r6, #0]
 8015ed6:	d001      	beq.n	8015edc <_vfprintf_r+0x3a4>
 8015ed8:	b236      	sxth	r6, r6
 8015eda:	e7f7      	b.n	8015ecc <_vfprintf_r+0x394>
 8015edc:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8015ee0:	bf18      	it	ne
 8015ee2:	b276      	sxtbne	r6, r6
 8015ee4:	e7f2      	b.n	8015ecc <_vfprintf_r+0x394>
 8015ee6:	3607      	adds	r6, #7
 8015ee8:	f026 0307 	bic.w	r3, r6, #7
 8015eec:	ecb3 7b02 	vldmia	r3!, {d7}
 8015ef0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015ef4:	9306      	str	r3, [sp, #24]
 8015ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ef8:	ee09 3a10 	vmov	s18, r3
 8015efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015efe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015f02:	ee09 3a90 	vmov	s19, r3
 8015f06:	f04f 32ff 	mov.w	r2, #4294967295
 8015f0a:	4b39      	ldr	r3, [pc, #228]	; (8015ff0 <_vfprintf_r+0x4b8>)
 8015f0c:	ec51 0b19 	vmov	r0, r1, d9
 8015f10:	f7ea fe36 	bl	8000b80 <__aeabi_dcmpun>
 8015f14:	bb20      	cbnz	r0, 8015f60 <_vfprintf_r+0x428>
 8015f16:	4b36      	ldr	r3, [pc, #216]	; (8015ff0 <_vfprintf_r+0x4b8>)
 8015f18:	ec51 0b19 	vmov	r0, r1, d9
 8015f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8015f20:	f7ea fe10 	bl	8000b44 <__aeabi_dcmple>
 8015f24:	b9e0      	cbnz	r0, 8015f60 <_vfprintf_r+0x428>
 8015f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	f7ea fdff 	bl	8000b30 <__aeabi_dcmplt>
 8015f32:	b110      	cbz	r0, 8015f3a <_vfprintf_r+0x402>
 8015f34:	232d      	movs	r3, #45	; 0x2d
 8015f36:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8015f3a:	4a2e      	ldr	r2, [pc, #184]	; (8015ff4 <_vfprintf_r+0x4bc>)
 8015f3c:	482e      	ldr	r0, [pc, #184]	; (8015ff8 <_vfprintf_r+0x4c0>)
 8015f3e:	9907      	ldr	r1, [sp, #28]
 8015f40:	4613      	mov	r3, r2
 8015f42:	2947      	cmp	r1, #71	; 0x47
 8015f44:	bfc8      	it	gt
 8015f46:	4603      	movgt	r3, r0
 8015f48:	9303      	str	r3, [sp, #12]
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8015f50:	9304      	str	r3, [sp, #16]
 8015f52:	f04f 0803 	mov.w	r8, #3
 8015f56:	461e      	mov	r6, r3
 8015f58:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015f5c:	461d      	mov	r5, r3
 8015f5e:	e157      	b.n	8016210 <_vfprintf_r+0x6d8>
 8015f60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015f64:	4610      	mov	r0, r2
 8015f66:	4619      	mov	r1, r3
 8015f68:	f7ea fe0a 	bl	8000b80 <__aeabi_dcmpun>
 8015f6c:	b140      	cbz	r0, 8015f80 <_vfprintf_r+0x448>
 8015f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f70:	4a22      	ldr	r2, [pc, #136]	; (8015ffc <_vfprintf_r+0x4c4>)
 8015f72:	4823      	ldr	r0, [pc, #140]	; (8016000 <_vfprintf_r+0x4c8>)
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	bfbc      	itt	lt
 8015f78:	232d      	movlt	r3, #45	; 0x2d
 8015f7a:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8015f7e:	e7de      	b.n	8015f3e <_vfprintf_r+0x406>
 8015f80:	9b07      	ldr	r3, [sp, #28]
 8015f82:	f023 0320 	bic.w	r3, r3, #32
 8015f86:	2b41      	cmp	r3, #65	; 0x41
 8015f88:	9308      	str	r3, [sp, #32]
 8015f8a:	d13b      	bne.n	8016004 <_vfprintf_r+0x4cc>
 8015f8c:	2330      	movs	r3, #48	; 0x30
 8015f8e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8015f92:	9b07      	ldr	r3, [sp, #28]
 8015f94:	2b61      	cmp	r3, #97	; 0x61
 8015f96:	bf0c      	ite	eq
 8015f98:	2378      	moveq	r3, #120	; 0x78
 8015f9a:	2358      	movne	r3, #88	; 0x58
 8015f9c:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8015fa0:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8015fa4:	f04b 0b02 	orr.w	fp, fp, #2
 8015fa8:	f340 8209 	ble.w	80163be <_vfprintf_r+0x886>
 8015fac:	f108 0101 	add.w	r1, r8, #1
 8015fb0:	4650      	mov	r0, sl
 8015fb2:	f002 fa51 	bl	8018458 <_malloc_r>
 8015fb6:	9003      	str	r0, [sp, #12]
 8015fb8:	2800      	cmp	r0, #0
 8015fba:	f040 8204 	bne.w	80163c6 <_vfprintf_r+0x88e>
 8015fbe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fc6:	f8a9 300c 	strh.w	r3, [r9, #12]
 8015fca:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8015fce:	07d9      	lsls	r1, r3, #31
 8015fd0:	d407      	bmi.n	8015fe2 <_vfprintf_r+0x4aa>
 8015fd2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015fd6:	059a      	lsls	r2, r3, #22
 8015fd8:	d403      	bmi.n	8015fe2 <_vfprintf_r+0x4aa>
 8015fda:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8015fde:	f002 f9be 	bl	801835e <__retarget_lock_release_recursive>
 8015fe2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8015fe6:	065b      	lsls	r3, r3, #25
 8015fe8:	f57f adee 	bpl.w	8015bc8 <_vfprintf_r+0x90>
 8015fec:	e5e9      	b.n	8015bc2 <_vfprintf_r+0x8a>
 8015fee:	bf00      	nop
 8015ff0:	7fefffff 	.word	0x7fefffff
 8015ff4:	0801f9ec 	.word	0x0801f9ec
 8015ff8:	0801f9f0 	.word	0x0801f9f0
 8015ffc:	0801f9f4 	.word	0x0801f9f4
 8016000:	0801f9f8 	.word	0x0801f9f8
 8016004:	f1b8 3fff 	cmp.w	r8, #4294967295
 8016008:	f000 81e0 	beq.w	80163cc <_vfprintf_r+0x894>
 801600c:	9b08      	ldr	r3, [sp, #32]
 801600e:	2b47      	cmp	r3, #71	; 0x47
 8016010:	f040 81e0 	bne.w	80163d4 <_vfprintf_r+0x89c>
 8016014:	f1b8 0f00 	cmp.w	r8, #0
 8016018:	f040 81dc 	bne.w	80163d4 <_vfprintf_r+0x89c>
 801601c:	f8cd 8010 	str.w	r8, [sp, #16]
 8016020:	f04f 0801 	mov.w	r8, #1
 8016024:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8016028:	9311      	str	r3, [sp, #68]	; 0x44
 801602a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801602c:	2b00      	cmp	r3, #0
 801602e:	f280 81d3 	bge.w	80163d8 <_vfprintf_r+0x8a0>
 8016032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016034:	ee08 3a10 	vmov	s16, r3
 8016038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801603a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801603e:	ee08 3a90 	vmov	s17, r3
 8016042:	232d      	movs	r3, #45	; 0x2d
 8016044:	9318      	str	r3, [sp, #96]	; 0x60
 8016046:	9b08      	ldr	r3, [sp, #32]
 8016048:	2b41      	cmp	r3, #65	; 0x41
 801604a:	f040 81e3 	bne.w	8016414 <_vfprintf_r+0x8dc>
 801604e:	eeb0 0a48 	vmov.f32	s0, s16
 8016052:	eef0 0a68 	vmov.f32	s1, s17
 8016056:	a81c      	add	r0, sp, #112	; 0x70
 8016058:	f002 ff7c 	bl	8018f54 <frexp>
 801605c:	2200      	movs	r2, #0
 801605e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016062:	ec51 0b10 	vmov	r0, r1, d0
 8016066:	f7ea faf1 	bl	800064c <__aeabi_dmul>
 801606a:	2200      	movs	r2, #0
 801606c:	2300      	movs	r3, #0
 801606e:	4606      	mov	r6, r0
 8016070:	460f      	mov	r7, r1
 8016072:	f7ea fd53 	bl	8000b1c <__aeabi_dcmpeq>
 8016076:	b108      	cbz	r0, 801607c <_vfprintf_r+0x544>
 8016078:	2301      	movs	r3, #1
 801607a:	931c      	str	r3, [sp, #112]	; 0x70
 801607c:	4bb7      	ldr	r3, [pc, #732]	; (801635c <_vfprintf_r+0x824>)
 801607e:	4ab8      	ldr	r2, [pc, #736]	; (8016360 <_vfprintf_r+0x828>)
 8016080:	9907      	ldr	r1, [sp, #28]
 8016082:	9d03      	ldr	r5, [sp, #12]
 8016084:	2961      	cmp	r1, #97	; 0x61
 8016086:	bf18      	it	ne
 8016088:	461a      	movne	r2, r3
 801608a:	f108 33ff 	add.w	r3, r8, #4294967295
 801608e:	9217      	str	r2, [sp, #92]	; 0x5c
 8016090:	9305      	str	r3, [sp, #20]
 8016092:	4bb4      	ldr	r3, [pc, #720]	; (8016364 <_vfprintf_r+0x82c>)
 8016094:	2200      	movs	r2, #0
 8016096:	4630      	mov	r0, r6
 8016098:	4639      	mov	r1, r7
 801609a:	f7ea fad7 	bl	800064c <__aeabi_dmul>
 801609e:	460f      	mov	r7, r1
 80160a0:	4606      	mov	r6, r0
 80160a2:	f7ea fd83 	bl	8000bac <__aeabi_d2iz>
 80160a6:	9019      	str	r0, [sp, #100]	; 0x64
 80160a8:	f7ea fa66 	bl	8000578 <__aeabi_i2d>
 80160ac:	4602      	mov	r2, r0
 80160ae:	460b      	mov	r3, r1
 80160b0:	4630      	mov	r0, r6
 80160b2:	4639      	mov	r1, r7
 80160b4:	f7ea f912 	bl	80002dc <__aeabi_dsub>
 80160b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80160ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80160bc:	5c9b      	ldrb	r3, [r3, r2]
 80160be:	f805 3b01 	strb.w	r3, [r5], #1
 80160c2:	9b05      	ldr	r3, [sp, #20]
 80160c4:	9309      	str	r3, [sp, #36]	; 0x24
 80160c6:	1c5a      	adds	r2, r3, #1
 80160c8:	4606      	mov	r6, r0
 80160ca:	460f      	mov	r7, r1
 80160cc:	d007      	beq.n	80160de <_vfprintf_r+0x5a6>
 80160ce:	3b01      	subs	r3, #1
 80160d0:	9305      	str	r3, [sp, #20]
 80160d2:	2200      	movs	r2, #0
 80160d4:	2300      	movs	r3, #0
 80160d6:	f7ea fd21 	bl	8000b1c <__aeabi_dcmpeq>
 80160da:	2800      	cmp	r0, #0
 80160dc:	d0d9      	beq.n	8016092 <_vfprintf_r+0x55a>
 80160de:	4ba2      	ldr	r3, [pc, #648]	; (8016368 <_vfprintf_r+0x830>)
 80160e0:	2200      	movs	r2, #0
 80160e2:	4630      	mov	r0, r6
 80160e4:	4639      	mov	r1, r7
 80160e6:	f7ea fd41 	bl	8000b6c <__aeabi_dcmpgt>
 80160ea:	b960      	cbnz	r0, 8016106 <_vfprintf_r+0x5ce>
 80160ec:	4b9e      	ldr	r3, [pc, #632]	; (8016368 <_vfprintf_r+0x830>)
 80160ee:	2200      	movs	r2, #0
 80160f0:	4630      	mov	r0, r6
 80160f2:	4639      	mov	r1, r7
 80160f4:	f7ea fd12 	bl	8000b1c <__aeabi_dcmpeq>
 80160f8:	2800      	cmp	r0, #0
 80160fa:	f000 8186 	beq.w	801640a <_vfprintf_r+0x8d2>
 80160fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016100:	07df      	lsls	r7, r3, #31
 8016102:	f140 8182 	bpl.w	801640a <_vfprintf_r+0x8d2>
 8016106:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016108:	9520      	str	r5, [sp, #128]	; 0x80
 801610a:	7bd9      	ldrb	r1, [r3, #15]
 801610c:	2030      	movs	r0, #48	; 0x30
 801610e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016110:	1e53      	subs	r3, r2, #1
 8016112:	9320      	str	r3, [sp, #128]	; 0x80
 8016114:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8016118:	428b      	cmp	r3, r1
 801611a:	f000 8165 	beq.w	80163e8 <_vfprintf_r+0x8b0>
 801611e:	2b39      	cmp	r3, #57	; 0x39
 8016120:	bf0b      	itete	eq
 8016122:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8016124:	3301      	addne	r3, #1
 8016126:	7a9b      	ldrbeq	r3, [r3, #10]
 8016128:	b2db      	uxtbne	r3, r3
 801612a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801612e:	9b03      	ldr	r3, [sp, #12]
 8016130:	1aeb      	subs	r3, r5, r3
 8016132:	9305      	str	r3, [sp, #20]
 8016134:	9b08      	ldr	r3, [sp, #32]
 8016136:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8016138:	2b47      	cmp	r3, #71	; 0x47
 801613a:	f040 81b3 	bne.w	80164a4 <_vfprintf_r+0x96c>
 801613e:	1cee      	adds	r6, r5, #3
 8016140:	db02      	blt.n	8016148 <_vfprintf_r+0x610>
 8016142:	4545      	cmp	r5, r8
 8016144:	f340 81d5 	ble.w	80164f2 <_vfprintf_r+0x9ba>
 8016148:	9b07      	ldr	r3, [sp, #28]
 801614a:	3b02      	subs	r3, #2
 801614c:	9307      	str	r3, [sp, #28]
 801614e:	9907      	ldr	r1, [sp, #28]
 8016150:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8016154:	f021 0120 	bic.w	r1, r1, #32
 8016158:	2941      	cmp	r1, #65	; 0x41
 801615a:	bf08      	it	eq
 801615c:	320f      	addeq	r2, #15
 801615e:	f105 33ff 	add.w	r3, r5, #4294967295
 8016162:	bf06      	itte	eq
 8016164:	b2d2      	uxtbeq	r2, r2
 8016166:	2101      	moveq	r1, #1
 8016168:	2100      	movne	r1, #0
 801616a:	2b00      	cmp	r3, #0
 801616c:	931c      	str	r3, [sp, #112]	; 0x70
 801616e:	bfb8      	it	lt
 8016170:	f1c5 0301 	rsblt	r3, r5, #1
 8016174:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8016178:	bfb4      	ite	lt
 801617a:	222d      	movlt	r2, #45	; 0x2d
 801617c:	222b      	movge	r2, #43	; 0x2b
 801617e:	2b09      	cmp	r3, #9
 8016180:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8016184:	f340 81a4 	ble.w	80164d0 <_vfprintf_r+0x998>
 8016188:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801618c:	260a      	movs	r6, #10
 801618e:	4611      	mov	r1, r2
 8016190:	fb93 f5f6 	sdiv	r5, r3, r6
 8016194:	fb06 3015 	mls	r0, r6, r5, r3
 8016198:	3030      	adds	r0, #48	; 0x30
 801619a:	f801 0c01 	strb.w	r0, [r1, #-1]
 801619e:	4618      	mov	r0, r3
 80161a0:	2863      	cmp	r0, #99	; 0x63
 80161a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80161a6:	462b      	mov	r3, r5
 80161a8:	dcf1      	bgt.n	801618e <_vfprintf_r+0x656>
 80161aa:	3330      	adds	r3, #48	; 0x30
 80161ac:	1e88      	subs	r0, r1, #2
 80161ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80161b2:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 80161b6:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80161ba:	4603      	mov	r3, r0
 80161bc:	42ab      	cmp	r3, r5
 80161be:	f0c0 8182 	bcc.w	80164c6 <_vfprintf_r+0x98e>
 80161c2:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 80161c6:	1a52      	subs	r2, r2, r1
 80161c8:	42a8      	cmp	r0, r5
 80161ca:	bf88      	it	hi
 80161cc:	2200      	movhi	r2, #0
 80161ce:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 80161d2:	441a      	add	r2, r3
 80161d4:	ab1e      	add	r3, sp, #120	; 0x78
 80161d6:	1ad3      	subs	r3, r2, r3
 80161d8:	9a05      	ldr	r2, [sp, #20]
 80161da:	9315      	str	r3, [sp, #84]	; 0x54
 80161dc:	2a01      	cmp	r2, #1
 80161de:	eb03 0802 	add.w	r8, r3, r2
 80161e2:	dc02      	bgt.n	80161ea <_vfprintf_r+0x6b2>
 80161e4:	f01b 0f01 	tst.w	fp, #1
 80161e8:	d001      	beq.n	80161ee <_vfprintf_r+0x6b6>
 80161ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161ec:	4498      	add	r8, r3
 80161ee:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 80161f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80161f6:	9311      	str	r3, [sp, #68]	; 0x44
 80161f8:	2300      	movs	r3, #0
 80161fa:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80161fe:	461d      	mov	r5, r3
 8016200:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016202:	b113      	cbz	r3, 801620a <_vfprintf_r+0x6d2>
 8016204:	232d      	movs	r3, #45	; 0x2d
 8016206:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801620a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801620e:	2600      	movs	r6, #0
 8016210:	4546      	cmp	r6, r8
 8016212:	4633      	mov	r3, r6
 8016214:	bfb8      	it	lt
 8016216:	4643      	movlt	r3, r8
 8016218:	9311      	str	r3, [sp, #68]	; 0x44
 801621a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801621e:	b113      	cbz	r3, 8016226 <_vfprintf_r+0x6ee>
 8016220:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016222:	3301      	adds	r3, #1
 8016224:	9311      	str	r3, [sp, #68]	; 0x44
 8016226:	f01b 0302 	ands.w	r3, fp, #2
 801622a:	9317      	str	r3, [sp, #92]	; 0x5c
 801622c:	bf1e      	ittt	ne
 801622e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8016230:	3302      	addne	r3, #2
 8016232:	9311      	strne	r3, [sp, #68]	; 0x44
 8016234:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8016238:	9318      	str	r3, [sp, #96]	; 0x60
 801623a:	d11f      	bne.n	801627c <_vfprintf_r+0x744>
 801623c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8016240:	1a9f      	subs	r7, r3, r2
 8016242:	2f00      	cmp	r7, #0
 8016244:	dd1a      	ble.n	801627c <_vfprintf_r+0x744>
 8016246:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801624a:	4848      	ldr	r0, [pc, #288]	; (801636c <_vfprintf_r+0x834>)
 801624c:	6020      	str	r0, [r4, #0]
 801624e:	2f10      	cmp	r7, #16
 8016250:	f103 0301 	add.w	r3, r3, #1
 8016254:	f104 0108 	add.w	r1, r4, #8
 8016258:	f300 82f0 	bgt.w	801683c <_vfprintf_r+0xd04>
 801625c:	6067      	str	r7, [r4, #4]
 801625e:	2b07      	cmp	r3, #7
 8016260:	4417      	add	r7, r2
 8016262:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8016266:	f340 82fc 	ble.w	8016862 <_vfprintf_r+0xd2a>
 801626a:	aa22      	add	r2, sp, #136	; 0x88
 801626c:	4649      	mov	r1, r9
 801626e:	4650      	mov	r0, sl
 8016270:	f004 f849 	bl	801a306 <__sprint_r>
 8016274:	2800      	cmp	r0, #0
 8016276:	f040 8632 	bne.w	8016ede <_vfprintf_r+0x13a6>
 801627a:	ac25      	add	r4, sp, #148	; 0x94
 801627c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8016280:	b173      	cbz	r3, 80162a0 <_vfprintf_r+0x768>
 8016282:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8016286:	6023      	str	r3, [r4, #0]
 8016288:	2301      	movs	r3, #1
 801628a:	6063      	str	r3, [r4, #4]
 801628c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801628e:	3301      	adds	r3, #1
 8016290:	9324      	str	r3, [sp, #144]	; 0x90
 8016292:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016294:	3301      	adds	r3, #1
 8016296:	2b07      	cmp	r3, #7
 8016298:	9323      	str	r3, [sp, #140]	; 0x8c
 801629a:	f300 82e4 	bgt.w	8016866 <_vfprintf_r+0xd2e>
 801629e:	3408      	adds	r4, #8
 80162a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80162a2:	b16b      	cbz	r3, 80162c0 <_vfprintf_r+0x788>
 80162a4:	ab1b      	add	r3, sp, #108	; 0x6c
 80162a6:	6023      	str	r3, [r4, #0]
 80162a8:	2302      	movs	r3, #2
 80162aa:	6063      	str	r3, [r4, #4]
 80162ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80162ae:	3302      	adds	r3, #2
 80162b0:	9324      	str	r3, [sp, #144]	; 0x90
 80162b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80162b4:	3301      	adds	r3, #1
 80162b6:	2b07      	cmp	r3, #7
 80162b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80162ba:	f300 82de 	bgt.w	801687a <_vfprintf_r+0xd42>
 80162be:	3408      	adds	r4, #8
 80162c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80162c2:	2b80      	cmp	r3, #128	; 0x80
 80162c4:	d11f      	bne.n	8016306 <_vfprintf_r+0x7ce>
 80162c6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80162ca:	1a9f      	subs	r7, r3, r2
 80162cc:	2f00      	cmp	r7, #0
 80162ce:	dd1a      	ble.n	8016306 <_vfprintf_r+0x7ce>
 80162d0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80162d4:	4826      	ldr	r0, [pc, #152]	; (8016370 <_vfprintf_r+0x838>)
 80162d6:	6020      	str	r0, [r4, #0]
 80162d8:	2f10      	cmp	r7, #16
 80162da:	f103 0301 	add.w	r3, r3, #1
 80162de:	f104 0108 	add.w	r1, r4, #8
 80162e2:	f300 82d4 	bgt.w	801688e <_vfprintf_r+0xd56>
 80162e6:	6067      	str	r7, [r4, #4]
 80162e8:	2b07      	cmp	r3, #7
 80162ea:	4417      	add	r7, r2
 80162ec:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80162f0:	f340 82e0 	ble.w	80168b4 <_vfprintf_r+0xd7c>
 80162f4:	aa22      	add	r2, sp, #136	; 0x88
 80162f6:	4649      	mov	r1, r9
 80162f8:	4650      	mov	r0, sl
 80162fa:	f004 f804 	bl	801a306 <__sprint_r>
 80162fe:	2800      	cmp	r0, #0
 8016300:	f040 85ed 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016304:	ac25      	add	r4, sp, #148	; 0x94
 8016306:	eba6 0608 	sub.w	r6, r6, r8
 801630a:	2e00      	cmp	r6, #0
 801630c:	dd1a      	ble.n	8016344 <_vfprintf_r+0x80c>
 801630e:	4f18      	ldr	r7, [pc, #96]	; (8016370 <_vfprintf_r+0x838>)
 8016310:	6027      	str	r7, [r4, #0]
 8016312:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8016316:	2e10      	cmp	r6, #16
 8016318:	f103 0301 	add.w	r3, r3, #1
 801631c:	f104 0108 	add.w	r1, r4, #8
 8016320:	f300 82ca 	bgt.w	80168b8 <_vfprintf_r+0xd80>
 8016324:	6066      	str	r6, [r4, #4]
 8016326:	2b07      	cmp	r3, #7
 8016328:	4416      	add	r6, r2
 801632a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801632e:	f340 82d6 	ble.w	80168de <_vfprintf_r+0xda6>
 8016332:	aa22      	add	r2, sp, #136	; 0x88
 8016334:	4649      	mov	r1, r9
 8016336:	4650      	mov	r0, sl
 8016338:	f003 ffe5 	bl	801a306 <__sprint_r>
 801633c:	2800      	cmp	r0, #0
 801633e:	f040 85ce 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016342:	ac25      	add	r4, sp, #148	; 0x94
 8016344:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016348:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801634a:	f040 82cf 	bne.w	80168ec <_vfprintf_r+0xdb4>
 801634e:	9b03      	ldr	r3, [sp, #12]
 8016350:	e9c4 3800 	strd	r3, r8, [r4]
 8016354:	4446      	add	r6, r8
 8016356:	9624      	str	r6, [sp, #144]	; 0x90
 8016358:	e00c      	b.n	8016374 <_vfprintf_r+0x83c>
 801635a:	bf00      	nop
 801635c:	0801fa0d 	.word	0x0801fa0d
 8016360:	0801f9fc 	.word	0x0801f9fc
 8016364:	40300000 	.word	0x40300000
 8016368:	3fe00000 	.word	0x3fe00000
 801636c:	0801fa20 	.word	0x0801fa20
 8016370:	0801fa30 	.word	0x0801fa30
 8016374:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016376:	3301      	adds	r3, #1
 8016378:	2b07      	cmp	r3, #7
 801637a:	9323      	str	r3, [sp, #140]	; 0x8c
 801637c:	f300 82fb 	bgt.w	8016976 <_vfprintf_r+0xe3e>
 8016380:	3408      	adds	r4, #8
 8016382:	f01b 0f04 	tst.w	fp, #4
 8016386:	f040 858c 	bne.w	8016ea2 <_vfprintf_r+0x136a>
 801638a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801638e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016390:	428a      	cmp	r2, r1
 8016392:	bfac      	ite	ge
 8016394:	189b      	addge	r3, r3, r2
 8016396:	185b      	addlt	r3, r3, r1
 8016398:	930f      	str	r3, [sp, #60]	; 0x3c
 801639a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801639c:	b13b      	cbz	r3, 80163ae <_vfprintf_r+0x876>
 801639e:	aa22      	add	r2, sp, #136	; 0x88
 80163a0:	4649      	mov	r1, r9
 80163a2:	4650      	mov	r0, sl
 80163a4:	f003 ffaf 	bl	801a306 <__sprint_r>
 80163a8:	2800      	cmp	r0, #0
 80163aa:	f040 8598 	bne.w	8016ede <_vfprintf_r+0x13a6>
 80163ae:	2300      	movs	r3, #0
 80163b0:	9323      	str	r3, [sp, #140]	; 0x8c
 80163b2:	9b04      	ldr	r3, [sp, #16]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	f040 85ae 	bne.w	8016f16 <_vfprintf_r+0x13de>
 80163ba:	ac25      	add	r4, sp, #148	; 0x94
 80163bc:	e0eb      	b.n	8016596 <_vfprintf_r+0xa5e>
 80163be:	ab35      	add	r3, sp, #212	; 0xd4
 80163c0:	9004      	str	r0, [sp, #16]
 80163c2:	9303      	str	r3, [sp, #12]
 80163c4:	e62e      	b.n	8016024 <_vfprintf_r+0x4ec>
 80163c6:	9b03      	ldr	r3, [sp, #12]
 80163c8:	9304      	str	r3, [sp, #16]
 80163ca:	e62b      	b.n	8016024 <_vfprintf_r+0x4ec>
 80163cc:	9004      	str	r0, [sp, #16]
 80163ce:	f04f 0806 	mov.w	r8, #6
 80163d2:	e627      	b.n	8016024 <_vfprintf_r+0x4ec>
 80163d4:	9004      	str	r0, [sp, #16]
 80163d6:	e625      	b.n	8016024 <_vfprintf_r+0x4ec>
 80163d8:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80163dc:	2300      	movs	r3, #0
 80163de:	eeb0 8a47 	vmov.f32	s16, s14
 80163e2:	eef0 8a67 	vmov.f32	s17, s15
 80163e6:	e62d      	b.n	8016044 <_vfprintf_r+0x50c>
 80163e8:	f802 0c01 	strb.w	r0, [r2, #-1]
 80163ec:	e68f      	b.n	801610e <_vfprintf_r+0x5d6>
 80163ee:	f803 0b01 	strb.w	r0, [r3], #1
 80163f2:	1aca      	subs	r2, r1, r3
 80163f4:	2a00      	cmp	r2, #0
 80163f6:	dafa      	bge.n	80163ee <_vfprintf_r+0x8b6>
 80163f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163fc:	3201      	adds	r2, #1
 80163fe:	f103 0301 	add.w	r3, r3, #1
 8016402:	bfb8      	it	lt
 8016404:	2300      	movlt	r3, #0
 8016406:	441d      	add	r5, r3
 8016408:	e691      	b.n	801612e <_vfprintf_r+0x5f6>
 801640a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801640c:	462b      	mov	r3, r5
 801640e:	18a9      	adds	r1, r5, r2
 8016410:	2030      	movs	r0, #48	; 0x30
 8016412:	e7ee      	b.n	80163f2 <_vfprintf_r+0x8ba>
 8016414:	9b08      	ldr	r3, [sp, #32]
 8016416:	2b46      	cmp	r3, #70	; 0x46
 8016418:	d005      	beq.n	8016426 <_vfprintf_r+0x8ee>
 801641a:	2b45      	cmp	r3, #69	; 0x45
 801641c:	d11b      	bne.n	8016456 <_vfprintf_r+0x91e>
 801641e:	f108 0501 	add.w	r5, r8, #1
 8016422:	2102      	movs	r1, #2
 8016424:	e001      	b.n	801642a <_vfprintf_r+0x8f2>
 8016426:	4645      	mov	r5, r8
 8016428:	2103      	movs	r1, #3
 801642a:	ab20      	add	r3, sp, #128	; 0x80
 801642c:	9301      	str	r3, [sp, #4]
 801642e:	ab1d      	add	r3, sp, #116	; 0x74
 8016430:	9300      	str	r3, [sp, #0]
 8016432:	462a      	mov	r2, r5
 8016434:	ab1c      	add	r3, sp, #112	; 0x70
 8016436:	4650      	mov	r0, sl
 8016438:	eeb0 0a48 	vmov.f32	s0, s16
 801643c:	eef0 0a68 	vmov.f32	s1, s17
 8016440:	f000 fefa 	bl	8017238 <_dtoa_r>
 8016444:	9b08      	ldr	r3, [sp, #32]
 8016446:	9003      	str	r0, [sp, #12]
 8016448:	2b47      	cmp	r3, #71	; 0x47
 801644a:	d106      	bne.n	801645a <_vfprintf_r+0x922>
 801644c:	f01b 0f01 	tst.w	fp, #1
 8016450:	d103      	bne.n	801645a <_vfprintf_r+0x922>
 8016452:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8016454:	e66b      	b.n	801612e <_vfprintf_r+0x5f6>
 8016456:	4645      	mov	r5, r8
 8016458:	e7e3      	b.n	8016422 <_vfprintf_r+0x8ea>
 801645a:	9b03      	ldr	r3, [sp, #12]
 801645c:	195e      	adds	r6, r3, r5
 801645e:	9b08      	ldr	r3, [sp, #32]
 8016460:	2b46      	cmp	r3, #70	; 0x46
 8016462:	d10f      	bne.n	8016484 <_vfprintf_r+0x94c>
 8016464:	9b03      	ldr	r3, [sp, #12]
 8016466:	781b      	ldrb	r3, [r3, #0]
 8016468:	2b30      	cmp	r3, #48	; 0x30
 801646a:	d109      	bne.n	8016480 <_vfprintf_r+0x948>
 801646c:	ec51 0b18 	vmov	r0, r1, d8
 8016470:	2200      	movs	r2, #0
 8016472:	2300      	movs	r3, #0
 8016474:	f7ea fb52 	bl	8000b1c <__aeabi_dcmpeq>
 8016478:	b910      	cbnz	r0, 8016480 <_vfprintf_r+0x948>
 801647a:	f1c5 0501 	rsb	r5, r5, #1
 801647e:	951c      	str	r5, [sp, #112]	; 0x70
 8016480:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016482:	441e      	add	r6, r3
 8016484:	ec51 0b18 	vmov	r0, r1, d8
 8016488:	2200      	movs	r2, #0
 801648a:	2300      	movs	r3, #0
 801648c:	f7ea fb46 	bl	8000b1c <__aeabi_dcmpeq>
 8016490:	b100      	cbz	r0, 8016494 <_vfprintf_r+0x95c>
 8016492:	9620      	str	r6, [sp, #128]	; 0x80
 8016494:	2230      	movs	r2, #48	; 0x30
 8016496:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016498:	429e      	cmp	r6, r3
 801649a:	d9da      	bls.n	8016452 <_vfprintf_r+0x91a>
 801649c:	1c59      	adds	r1, r3, #1
 801649e:	9120      	str	r1, [sp, #128]	; 0x80
 80164a0:	701a      	strb	r2, [r3, #0]
 80164a2:	e7f8      	b.n	8016496 <_vfprintf_r+0x95e>
 80164a4:	9b08      	ldr	r3, [sp, #32]
 80164a6:	2b46      	cmp	r3, #70	; 0x46
 80164a8:	f47f ae51 	bne.w	801614e <_vfprintf_r+0x616>
 80164ac:	f00b 0301 	and.w	r3, fp, #1
 80164b0:	2d00      	cmp	r5, #0
 80164b2:	ea43 0308 	orr.w	r3, r3, r8
 80164b6:	dd18      	ble.n	80164ea <_vfprintf_r+0x9b2>
 80164b8:	b383      	cbz	r3, 801651c <_vfprintf_r+0x9e4>
 80164ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164bc:	18eb      	adds	r3, r5, r3
 80164be:	4498      	add	r8, r3
 80164c0:	2366      	movs	r3, #102	; 0x66
 80164c2:	9307      	str	r3, [sp, #28]
 80164c4:	e030      	b.n	8016528 <_vfprintf_r+0x9f0>
 80164c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80164ca:	f802 6b01 	strb.w	r6, [r2], #1
 80164ce:	e675      	b.n	80161bc <_vfprintf_r+0x684>
 80164d0:	b941      	cbnz	r1, 80164e4 <_vfprintf_r+0x9ac>
 80164d2:	2230      	movs	r2, #48	; 0x30
 80164d4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80164d8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80164dc:	3330      	adds	r3, #48	; 0x30
 80164de:	f802 3b01 	strb.w	r3, [r2], #1
 80164e2:	e677      	b.n	80161d4 <_vfprintf_r+0x69c>
 80164e4:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80164e8:	e7f8      	b.n	80164dc <_vfprintf_r+0x9a4>
 80164ea:	b1cb      	cbz	r3, 8016520 <_vfprintf_r+0x9e8>
 80164ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164ee:	3301      	adds	r3, #1
 80164f0:	e7e5      	b.n	80164be <_vfprintf_r+0x986>
 80164f2:	9b05      	ldr	r3, [sp, #20]
 80164f4:	429d      	cmp	r5, r3
 80164f6:	db07      	blt.n	8016508 <_vfprintf_r+0x9d0>
 80164f8:	f01b 0f01 	tst.w	fp, #1
 80164fc:	d029      	beq.n	8016552 <_vfprintf_r+0xa1a>
 80164fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016500:	eb05 0803 	add.w	r8, r5, r3
 8016504:	2367      	movs	r3, #103	; 0x67
 8016506:	e7dc      	b.n	80164c2 <_vfprintf_r+0x98a>
 8016508:	9b05      	ldr	r3, [sp, #20]
 801650a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801650c:	2d00      	cmp	r5, #0
 801650e:	eb03 0802 	add.w	r8, r3, r2
 8016512:	dcf7      	bgt.n	8016504 <_vfprintf_r+0x9cc>
 8016514:	f1c5 0301 	rsb	r3, r5, #1
 8016518:	4498      	add	r8, r3
 801651a:	e7f3      	b.n	8016504 <_vfprintf_r+0x9cc>
 801651c:	46a8      	mov	r8, r5
 801651e:	e7cf      	b.n	80164c0 <_vfprintf_r+0x988>
 8016520:	2366      	movs	r3, #102	; 0x66
 8016522:	9307      	str	r3, [sp, #28]
 8016524:	f04f 0801 	mov.w	r8, #1
 8016528:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801652c:	9309      	str	r3, [sp, #36]	; 0x24
 801652e:	d023      	beq.n	8016578 <_vfprintf_r+0xa40>
 8016530:	2300      	movs	r3, #0
 8016532:	2d00      	cmp	r5, #0
 8016534:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8016538:	f77f ae62 	ble.w	8016200 <_vfprintf_r+0x6c8>
 801653c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801653e:	781b      	ldrb	r3, [r3, #0]
 8016540:	2bff      	cmp	r3, #255	; 0xff
 8016542:	d108      	bne.n	8016556 <_vfprintf_r+0xa1e>
 8016544:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016548:	4413      	add	r3, r2
 801654a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801654c:	fb02 8803 	mla	r8, r2, r3, r8
 8016550:	e656      	b.n	8016200 <_vfprintf_r+0x6c8>
 8016552:	46a8      	mov	r8, r5
 8016554:	e7d6      	b.n	8016504 <_vfprintf_r+0x9cc>
 8016556:	42ab      	cmp	r3, r5
 8016558:	daf4      	bge.n	8016544 <_vfprintf_r+0xa0c>
 801655a:	1aed      	subs	r5, r5, r3
 801655c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801655e:	785b      	ldrb	r3, [r3, #1]
 8016560:	b133      	cbz	r3, 8016570 <_vfprintf_r+0xa38>
 8016562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016564:	3301      	adds	r3, #1
 8016566:	9309      	str	r3, [sp, #36]	; 0x24
 8016568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801656a:	3301      	adds	r3, #1
 801656c:	930a      	str	r3, [sp, #40]	; 0x28
 801656e:	e7e5      	b.n	801653c <_vfprintf_r+0xa04>
 8016570:	9b08      	ldr	r3, [sp, #32]
 8016572:	3301      	adds	r3, #1
 8016574:	9308      	str	r3, [sp, #32]
 8016576:	e7e1      	b.n	801653c <_vfprintf_r+0xa04>
 8016578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801657a:	9308      	str	r3, [sp, #32]
 801657c:	e640      	b.n	8016200 <_vfprintf_r+0x6c8>
 801657e:	4632      	mov	r2, r6
 8016580:	f01b 0f20 	tst.w	fp, #32
 8016584:	f852 3b04 	ldr.w	r3, [r2], #4
 8016588:	9206      	str	r2, [sp, #24]
 801658a:	d009      	beq.n	80165a0 <_vfprintf_r+0xa68>
 801658c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801658e:	4610      	mov	r0, r2
 8016590:	17d1      	asrs	r1, r2, #31
 8016592:	e9c3 0100 	strd	r0, r1, [r3]
 8016596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016598:	9e06      	ldr	r6, [sp, #24]
 801659a:	9303      	str	r3, [sp, #12]
 801659c:	f7ff bb4f 	b.w	8015c3e <_vfprintf_r+0x106>
 80165a0:	f01b 0f10 	tst.w	fp, #16
 80165a4:	d002      	beq.n	80165ac <_vfprintf_r+0xa74>
 80165a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80165a8:	601a      	str	r2, [r3, #0]
 80165aa:	e7f4      	b.n	8016596 <_vfprintf_r+0xa5e>
 80165ac:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80165b0:	d002      	beq.n	80165b8 <_vfprintf_r+0xa80>
 80165b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80165b4:	801a      	strh	r2, [r3, #0]
 80165b6:	e7ee      	b.n	8016596 <_vfprintf_r+0xa5e>
 80165b8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80165bc:	d0f3      	beq.n	80165a6 <_vfprintf_r+0xa6e>
 80165be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80165c0:	701a      	strb	r2, [r3, #0]
 80165c2:	e7e8      	b.n	8016596 <_vfprintf_r+0xa5e>
 80165c4:	f04b 0b10 	orr.w	fp, fp, #16
 80165c8:	f01b 0f20 	tst.w	fp, #32
 80165cc:	d01e      	beq.n	801660c <_vfprintf_r+0xad4>
 80165ce:	3607      	adds	r6, #7
 80165d0:	f026 0307 	bic.w	r3, r6, #7
 80165d4:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80165d8:	9306      	str	r3, [sp, #24]
 80165da:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80165de:	2300      	movs	r3, #0
 80165e0:	2200      	movs	r2, #0
 80165e2:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80165e6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80165ea:	f000 84a9 	beq.w	8016f40 <_vfprintf_r+0x1408>
 80165ee:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 80165f2:	9204      	str	r2, [sp, #16]
 80165f4:	ea56 0207 	orrs.w	r2, r6, r7
 80165f8:	f040 84a8 	bne.w	8016f4c <_vfprintf_r+0x1414>
 80165fc:	f1b8 0f00 	cmp.w	r8, #0
 8016600:	f000 8104 	beq.w	801680c <_vfprintf_r+0xcd4>
 8016604:	2b01      	cmp	r3, #1
 8016606:	f040 84a4 	bne.w	8016f52 <_vfprintf_r+0x141a>
 801660a:	e09a      	b.n	8016742 <_vfprintf_r+0xc0a>
 801660c:	1d33      	adds	r3, r6, #4
 801660e:	f01b 0f10 	tst.w	fp, #16
 8016612:	9306      	str	r3, [sp, #24]
 8016614:	d001      	beq.n	801661a <_vfprintf_r+0xae2>
 8016616:	6836      	ldr	r6, [r6, #0]
 8016618:	e003      	b.n	8016622 <_vfprintf_r+0xaea>
 801661a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801661e:	d002      	beq.n	8016626 <_vfprintf_r+0xaee>
 8016620:	8836      	ldrh	r6, [r6, #0]
 8016622:	2700      	movs	r7, #0
 8016624:	e7d9      	b.n	80165da <_vfprintf_r+0xaa2>
 8016626:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801662a:	d0f4      	beq.n	8016616 <_vfprintf_r+0xade>
 801662c:	7836      	ldrb	r6, [r6, #0]
 801662e:	e7f8      	b.n	8016622 <_vfprintf_r+0xaea>
 8016630:	4633      	mov	r3, r6
 8016632:	2278      	movs	r2, #120	; 0x78
 8016634:	f853 6b04 	ldr.w	r6, [r3], #4
 8016638:	9306      	str	r3, [sp, #24]
 801663a:	f647 0330 	movw	r3, #30768	; 0x7830
 801663e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8016642:	4ba8      	ldr	r3, [pc, #672]	; (80168e4 <_vfprintf_r+0xdac>)
 8016644:	9316      	str	r3, [sp, #88]	; 0x58
 8016646:	2700      	movs	r7, #0
 8016648:	f04b 0b02 	orr.w	fp, fp, #2
 801664c:	2302      	movs	r3, #2
 801664e:	9207      	str	r2, [sp, #28]
 8016650:	e7c6      	b.n	80165e0 <_vfprintf_r+0xaa8>
 8016652:	4632      	mov	r2, r6
 8016654:	2500      	movs	r5, #0
 8016656:	f852 3b04 	ldr.w	r3, [r2], #4
 801665a:	9303      	str	r3, [sp, #12]
 801665c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8016660:	9206      	str	r2, [sp, #24]
 8016662:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8016666:	d010      	beq.n	801668a <_vfprintf_r+0xb52>
 8016668:	9803      	ldr	r0, [sp, #12]
 801666a:	4642      	mov	r2, r8
 801666c:	4629      	mov	r1, r5
 801666e:	f7e9 fdd7 	bl	8000220 <memchr>
 8016672:	9004      	str	r0, [sp, #16]
 8016674:	2800      	cmp	r0, #0
 8016676:	f000 80df 	beq.w	8016838 <_vfprintf_r+0xd00>
 801667a:	9a03      	ldr	r2, [sp, #12]
 801667c:	9504      	str	r5, [sp, #16]
 801667e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8016682:	eba0 0802 	sub.w	r8, r0, r2
 8016686:	462e      	mov	r6, r5
 8016688:	e5c2      	b.n	8016210 <_vfprintf_r+0x6d8>
 801668a:	9803      	ldr	r0, [sp, #12]
 801668c:	f7e9 fdc0 	bl	8000210 <strlen>
 8016690:	462e      	mov	r6, r5
 8016692:	4680      	mov	r8, r0
 8016694:	9504      	str	r5, [sp, #16]
 8016696:	4633      	mov	r3, r6
 8016698:	e45e      	b.n	8015f58 <_vfprintf_r+0x420>
 801669a:	f04b 0b10 	orr.w	fp, fp, #16
 801669e:	f01b 0f20 	tst.w	fp, #32
 80166a2:	d007      	beq.n	80166b4 <_vfprintf_r+0xb7c>
 80166a4:	3607      	adds	r6, #7
 80166a6:	f026 0307 	bic.w	r3, r6, #7
 80166aa:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80166ae:	9306      	str	r3, [sp, #24]
 80166b0:	2301      	movs	r3, #1
 80166b2:	e795      	b.n	80165e0 <_vfprintf_r+0xaa8>
 80166b4:	1d33      	adds	r3, r6, #4
 80166b6:	f01b 0f10 	tst.w	fp, #16
 80166ba:	9306      	str	r3, [sp, #24]
 80166bc:	d001      	beq.n	80166c2 <_vfprintf_r+0xb8a>
 80166be:	6836      	ldr	r6, [r6, #0]
 80166c0:	e003      	b.n	80166ca <_vfprintf_r+0xb92>
 80166c2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80166c6:	d002      	beq.n	80166ce <_vfprintf_r+0xb96>
 80166c8:	8836      	ldrh	r6, [r6, #0]
 80166ca:	2700      	movs	r7, #0
 80166cc:	e7f0      	b.n	80166b0 <_vfprintf_r+0xb78>
 80166ce:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80166d2:	d0f4      	beq.n	80166be <_vfprintf_r+0xb86>
 80166d4:	7836      	ldrb	r6, [r6, #0]
 80166d6:	e7f8      	b.n	80166ca <_vfprintf_r+0xb92>
 80166d8:	4b83      	ldr	r3, [pc, #524]	; (80168e8 <_vfprintf_r+0xdb0>)
 80166da:	9316      	str	r3, [sp, #88]	; 0x58
 80166dc:	f01b 0f20 	tst.w	fp, #32
 80166e0:	d019      	beq.n	8016716 <_vfprintf_r+0xbde>
 80166e2:	3607      	adds	r6, #7
 80166e4:	f026 0307 	bic.w	r3, r6, #7
 80166e8:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80166ec:	9306      	str	r3, [sp, #24]
 80166ee:	f01b 0f01 	tst.w	fp, #1
 80166f2:	d00a      	beq.n	801670a <_vfprintf_r+0xbd2>
 80166f4:	ea56 0307 	orrs.w	r3, r6, r7
 80166f8:	d007      	beq.n	801670a <_vfprintf_r+0xbd2>
 80166fa:	2330      	movs	r3, #48	; 0x30
 80166fc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8016700:	9b07      	ldr	r3, [sp, #28]
 8016702:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8016706:	f04b 0b02 	orr.w	fp, fp, #2
 801670a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801670e:	2302      	movs	r3, #2
 8016710:	e766      	b.n	80165e0 <_vfprintf_r+0xaa8>
 8016712:	4b74      	ldr	r3, [pc, #464]	; (80168e4 <_vfprintf_r+0xdac>)
 8016714:	e7e1      	b.n	80166da <_vfprintf_r+0xba2>
 8016716:	1d33      	adds	r3, r6, #4
 8016718:	f01b 0f10 	tst.w	fp, #16
 801671c:	9306      	str	r3, [sp, #24]
 801671e:	d001      	beq.n	8016724 <_vfprintf_r+0xbec>
 8016720:	6836      	ldr	r6, [r6, #0]
 8016722:	e003      	b.n	801672c <_vfprintf_r+0xbf4>
 8016724:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8016728:	d002      	beq.n	8016730 <_vfprintf_r+0xbf8>
 801672a:	8836      	ldrh	r6, [r6, #0]
 801672c:	2700      	movs	r7, #0
 801672e:	e7de      	b.n	80166ee <_vfprintf_r+0xbb6>
 8016730:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8016734:	d0f4      	beq.n	8016720 <_vfprintf_r+0xbe8>
 8016736:	7836      	ldrb	r6, [r6, #0]
 8016738:	e7f8      	b.n	801672c <_vfprintf_r+0xbf4>
 801673a:	2f00      	cmp	r7, #0
 801673c:	bf08      	it	eq
 801673e:	2e0a      	cmpeq	r6, #10
 8016740:	d206      	bcs.n	8016750 <_vfprintf_r+0xc18>
 8016742:	3630      	adds	r6, #48	; 0x30
 8016744:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8016748:	f20d 1337 	addw	r3, sp, #311	; 0x137
 801674c:	f000 bc23 	b.w	8016f96 <_vfprintf_r+0x145e>
 8016750:	2300      	movs	r3, #0
 8016752:	9305      	str	r3, [sp, #20]
 8016754:	9b04      	ldr	r3, [sp, #16]
 8016756:	ad4e      	add	r5, sp, #312	; 0x138
 8016758:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 801675c:	1e6b      	subs	r3, r5, #1
 801675e:	9303      	str	r3, [sp, #12]
 8016760:	220a      	movs	r2, #10
 8016762:	2300      	movs	r3, #0
 8016764:	4630      	mov	r0, r6
 8016766:	4639      	mov	r1, r7
 8016768:	f7ea fa48 	bl	8000bfc <__aeabi_uldivmod>
 801676c:	9b05      	ldr	r3, [sp, #20]
 801676e:	3230      	adds	r2, #48	; 0x30
 8016770:	3301      	adds	r3, #1
 8016772:	f805 2c01 	strb.w	r2, [r5, #-1]
 8016776:	9305      	str	r3, [sp, #20]
 8016778:	f1bb 0f00 	cmp.w	fp, #0
 801677c:	d019      	beq.n	80167b2 <_vfprintf_r+0xc7a>
 801677e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016780:	9a05      	ldr	r2, [sp, #20]
 8016782:	781b      	ldrb	r3, [r3, #0]
 8016784:	429a      	cmp	r2, r3
 8016786:	d114      	bne.n	80167b2 <_vfprintf_r+0xc7a>
 8016788:	2aff      	cmp	r2, #255	; 0xff
 801678a:	d012      	beq.n	80167b2 <_vfprintf_r+0xc7a>
 801678c:	2f00      	cmp	r7, #0
 801678e:	bf08      	it	eq
 8016790:	2e0a      	cmpeq	r6, #10
 8016792:	d30e      	bcc.n	80167b2 <_vfprintf_r+0xc7a>
 8016794:	9b03      	ldr	r3, [sp, #12]
 8016796:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016798:	9914      	ldr	r1, [sp, #80]	; 0x50
 801679a:	1a9b      	subs	r3, r3, r2
 801679c:	4618      	mov	r0, r3
 801679e:	9303      	str	r3, [sp, #12]
 80167a0:	f002 fc99 	bl	80190d6 <strncpy>
 80167a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167a6:	785d      	ldrb	r5, [r3, #1]
 80167a8:	b1e5      	cbz	r5, 80167e4 <_vfprintf_r+0xcac>
 80167aa:	3301      	adds	r3, #1
 80167ac:	930a      	str	r3, [sp, #40]	; 0x28
 80167ae:	2300      	movs	r3, #0
 80167b0:	9305      	str	r3, [sp, #20]
 80167b2:	220a      	movs	r2, #10
 80167b4:	2300      	movs	r3, #0
 80167b6:	4630      	mov	r0, r6
 80167b8:	4639      	mov	r1, r7
 80167ba:	f7ea fa1f 	bl	8000bfc <__aeabi_uldivmod>
 80167be:	2f00      	cmp	r7, #0
 80167c0:	bf08      	it	eq
 80167c2:	2e0a      	cmpeq	r6, #10
 80167c4:	d20a      	bcs.n	80167dc <_vfprintf_r+0xca4>
 80167c6:	9b03      	ldr	r3, [sp, #12]
 80167c8:	f8dd b010 	ldr.w	fp, [sp, #16]
 80167cc:	aa4e      	add	r2, sp, #312	; 0x138
 80167ce:	4646      	mov	r6, r8
 80167d0:	eba2 0803 	sub.w	r8, r2, r3
 80167d4:	2300      	movs	r3, #0
 80167d6:	9304      	str	r3, [sp, #16]
 80167d8:	f7ff bbbe 	b.w	8015f58 <_vfprintf_r+0x420>
 80167dc:	9d03      	ldr	r5, [sp, #12]
 80167de:	4606      	mov	r6, r0
 80167e0:	460f      	mov	r7, r1
 80167e2:	e7bb      	b.n	801675c <_vfprintf_r+0xc24>
 80167e4:	9505      	str	r5, [sp, #20]
 80167e6:	e7e4      	b.n	80167b2 <_vfprintf_r+0xc7a>
 80167e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80167ea:	f006 030f 	and.w	r3, r6, #15
 80167ee:	5cd3      	ldrb	r3, [r2, r3]
 80167f0:	9a03      	ldr	r2, [sp, #12]
 80167f2:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80167f6:	0933      	lsrs	r3, r6, #4
 80167f8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80167fc:	9203      	str	r2, [sp, #12]
 80167fe:	093a      	lsrs	r2, r7, #4
 8016800:	461e      	mov	r6, r3
 8016802:	4617      	mov	r7, r2
 8016804:	ea56 0307 	orrs.w	r3, r6, r7
 8016808:	d1ee      	bne.n	80167e8 <_vfprintf_r+0xcb0>
 801680a:	e7dc      	b.n	80167c6 <_vfprintf_r+0xc8e>
 801680c:	b933      	cbnz	r3, 801681c <_vfprintf_r+0xce4>
 801680e:	f01b 0f01 	tst.w	fp, #1
 8016812:	d003      	beq.n	801681c <_vfprintf_r+0xce4>
 8016814:	2330      	movs	r3, #48	; 0x30
 8016816:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801681a:	e795      	b.n	8016748 <_vfprintf_r+0xc10>
 801681c:	ab4e      	add	r3, sp, #312	; 0x138
 801681e:	e3ba      	b.n	8016f96 <_vfprintf_r+0x145e>
 8016820:	9b07      	ldr	r3, [sp, #28]
 8016822:	2b00      	cmp	r3, #0
 8016824:	f000 837d 	beq.w	8016f22 <_vfprintf_r+0x13ea>
 8016828:	2000      	movs	r0, #0
 801682a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801682e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8016832:	9606      	str	r6, [sp, #24]
 8016834:	f7ff bb1e 	b.w	8015e74 <_vfprintf_r+0x33c>
 8016838:	9e04      	ldr	r6, [sp, #16]
 801683a:	e72c      	b.n	8016696 <_vfprintf_r+0xb5e>
 801683c:	2010      	movs	r0, #16
 801683e:	4402      	add	r2, r0
 8016840:	2b07      	cmp	r3, #7
 8016842:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8016846:	6060      	str	r0, [r4, #4]
 8016848:	dd08      	ble.n	801685c <_vfprintf_r+0xd24>
 801684a:	aa22      	add	r2, sp, #136	; 0x88
 801684c:	4649      	mov	r1, r9
 801684e:	4650      	mov	r0, sl
 8016850:	f003 fd59 	bl	801a306 <__sprint_r>
 8016854:	2800      	cmp	r0, #0
 8016856:	f040 8342 	bne.w	8016ede <_vfprintf_r+0x13a6>
 801685a:	a925      	add	r1, sp, #148	; 0x94
 801685c:	3f10      	subs	r7, #16
 801685e:	460c      	mov	r4, r1
 8016860:	e4f1      	b.n	8016246 <_vfprintf_r+0x70e>
 8016862:	460c      	mov	r4, r1
 8016864:	e50a      	b.n	801627c <_vfprintf_r+0x744>
 8016866:	aa22      	add	r2, sp, #136	; 0x88
 8016868:	4649      	mov	r1, r9
 801686a:	4650      	mov	r0, sl
 801686c:	f003 fd4b 	bl	801a306 <__sprint_r>
 8016870:	2800      	cmp	r0, #0
 8016872:	f040 8334 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016876:	ac25      	add	r4, sp, #148	; 0x94
 8016878:	e512      	b.n	80162a0 <_vfprintf_r+0x768>
 801687a:	aa22      	add	r2, sp, #136	; 0x88
 801687c:	4649      	mov	r1, r9
 801687e:	4650      	mov	r0, sl
 8016880:	f003 fd41 	bl	801a306 <__sprint_r>
 8016884:	2800      	cmp	r0, #0
 8016886:	f040 832a 	bne.w	8016ede <_vfprintf_r+0x13a6>
 801688a:	ac25      	add	r4, sp, #148	; 0x94
 801688c:	e518      	b.n	80162c0 <_vfprintf_r+0x788>
 801688e:	2010      	movs	r0, #16
 8016890:	4402      	add	r2, r0
 8016892:	2b07      	cmp	r3, #7
 8016894:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8016898:	6060      	str	r0, [r4, #4]
 801689a:	dd08      	ble.n	80168ae <_vfprintf_r+0xd76>
 801689c:	aa22      	add	r2, sp, #136	; 0x88
 801689e:	4649      	mov	r1, r9
 80168a0:	4650      	mov	r0, sl
 80168a2:	f003 fd30 	bl	801a306 <__sprint_r>
 80168a6:	2800      	cmp	r0, #0
 80168a8:	f040 8319 	bne.w	8016ede <_vfprintf_r+0x13a6>
 80168ac:	a925      	add	r1, sp, #148	; 0x94
 80168ae:	3f10      	subs	r7, #16
 80168b0:	460c      	mov	r4, r1
 80168b2:	e50d      	b.n	80162d0 <_vfprintf_r+0x798>
 80168b4:	460c      	mov	r4, r1
 80168b6:	e526      	b.n	8016306 <_vfprintf_r+0x7ce>
 80168b8:	2010      	movs	r0, #16
 80168ba:	4402      	add	r2, r0
 80168bc:	2b07      	cmp	r3, #7
 80168be:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80168c2:	6060      	str	r0, [r4, #4]
 80168c4:	dd08      	ble.n	80168d8 <_vfprintf_r+0xda0>
 80168c6:	aa22      	add	r2, sp, #136	; 0x88
 80168c8:	4649      	mov	r1, r9
 80168ca:	4650      	mov	r0, sl
 80168cc:	f003 fd1b 	bl	801a306 <__sprint_r>
 80168d0:	2800      	cmp	r0, #0
 80168d2:	f040 8304 	bne.w	8016ede <_vfprintf_r+0x13a6>
 80168d6:	a925      	add	r1, sp, #148	; 0x94
 80168d8:	3e10      	subs	r6, #16
 80168da:	460c      	mov	r4, r1
 80168dc:	e518      	b.n	8016310 <_vfprintf_r+0x7d8>
 80168de:	460c      	mov	r4, r1
 80168e0:	e530      	b.n	8016344 <_vfprintf_r+0x80c>
 80168e2:	bf00      	nop
 80168e4:	0801f9fc 	.word	0x0801f9fc
 80168e8:	0801fa0d 	.word	0x0801fa0d
 80168ec:	9b07      	ldr	r3, [sp, #28]
 80168ee:	2b65      	cmp	r3, #101	; 0x65
 80168f0:	f340 8242 	ble.w	8016d78 <_vfprintf_r+0x1240>
 80168f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80168f8:	2200      	movs	r2, #0
 80168fa:	2300      	movs	r3, #0
 80168fc:	f7ea f90e 	bl	8000b1c <__aeabi_dcmpeq>
 8016900:	2800      	cmp	r0, #0
 8016902:	d068      	beq.n	80169d6 <_vfprintf_r+0xe9e>
 8016904:	4b6d      	ldr	r3, [pc, #436]	; (8016abc <_vfprintf_r+0xf84>)
 8016906:	6023      	str	r3, [r4, #0]
 8016908:	2301      	movs	r3, #1
 801690a:	441e      	add	r6, r3
 801690c:	6063      	str	r3, [r4, #4]
 801690e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016910:	9624      	str	r6, [sp, #144]	; 0x90
 8016912:	3301      	adds	r3, #1
 8016914:	2b07      	cmp	r3, #7
 8016916:	9323      	str	r3, [sp, #140]	; 0x8c
 8016918:	dc37      	bgt.n	801698a <_vfprintf_r+0xe52>
 801691a:	3408      	adds	r4, #8
 801691c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801691e:	9a05      	ldr	r2, [sp, #20]
 8016920:	4293      	cmp	r3, r2
 8016922:	db03      	blt.n	801692c <_vfprintf_r+0xdf4>
 8016924:	f01b 0f01 	tst.w	fp, #1
 8016928:	f43f ad2b 	beq.w	8016382 <_vfprintf_r+0x84a>
 801692c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801692e:	6023      	str	r3, [r4, #0]
 8016930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016934:	6063      	str	r3, [r4, #4]
 8016936:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016938:	4413      	add	r3, r2
 801693a:	9324      	str	r3, [sp, #144]	; 0x90
 801693c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801693e:	3301      	adds	r3, #1
 8016940:	2b07      	cmp	r3, #7
 8016942:	9323      	str	r3, [sp, #140]	; 0x8c
 8016944:	dc2b      	bgt.n	801699e <_vfprintf_r+0xe66>
 8016946:	3408      	adds	r4, #8
 8016948:	9b05      	ldr	r3, [sp, #20]
 801694a:	1e5d      	subs	r5, r3, #1
 801694c:	2d00      	cmp	r5, #0
 801694e:	f77f ad18 	ble.w	8016382 <_vfprintf_r+0x84a>
 8016952:	4e5b      	ldr	r6, [pc, #364]	; (8016ac0 <_vfprintf_r+0xf88>)
 8016954:	2710      	movs	r7, #16
 8016956:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801695a:	2d10      	cmp	r5, #16
 801695c:	f103 0301 	add.w	r3, r3, #1
 8016960:	f104 0108 	add.w	r1, r4, #8
 8016964:	6026      	str	r6, [r4, #0]
 8016966:	dc24      	bgt.n	80169b2 <_vfprintf_r+0xe7a>
 8016968:	6065      	str	r5, [r4, #4]
 801696a:	2b07      	cmp	r3, #7
 801696c:	4415      	add	r5, r2
 801696e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8016972:	f340 8293 	ble.w	8016e9c <_vfprintf_r+0x1364>
 8016976:	aa22      	add	r2, sp, #136	; 0x88
 8016978:	4649      	mov	r1, r9
 801697a:	4650      	mov	r0, sl
 801697c:	f003 fcc3 	bl	801a306 <__sprint_r>
 8016980:	2800      	cmp	r0, #0
 8016982:	f040 82ac 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016986:	ac25      	add	r4, sp, #148	; 0x94
 8016988:	e4fb      	b.n	8016382 <_vfprintf_r+0x84a>
 801698a:	aa22      	add	r2, sp, #136	; 0x88
 801698c:	4649      	mov	r1, r9
 801698e:	4650      	mov	r0, sl
 8016990:	f003 fcb9 	bl	801a306 <__sprint_r>
 8016994:	2800      	cmp	r0, #0
 8016996:	f040 82a2 	bne.w	8016ede <_vfprintf_r+0x13a6>
 801699a:	ac25      	add	r4, sp, #148	; 0x94
 801699c:	e7be      	b.n	801691c <_vfprintf_r+0xde4>
 801699e:	aa22      	add	r2, sp, #136	; 0x88
 80169a0:	4649      	mov	r1, r9
 80169a2:	4650      	mov	r0, sl
 80169a4:	f003 fcaf 	bl	801a306 <__sprint_r>
 80169a8:	2800      	cmp	r0, #0
 80169aa:	f040 8298 	bne.w	8016ede <_vfprintf_r+0x13a6>
 80169ae:	ac25      	add	r4, sp, #148	; 0x94
 80169b0:	e7ca      	b.n	8016948 <_vfprintf_r+0xe10>
 80169b2:	3210      	adds	r2, #16
 80169b4:	2b07      	cmp	r3, #7
 80169b6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80169ba:	6067      	str	r7, [r4, #4]
 80169bc:	dd08      	ble.n	80169d0 <_vfprintf_r+0xe98>
 80169be:	aa22      	add	r2, sp, #136	; 0x88
 80169c0:	4649      	mov	r1, r9
 80169c2:	4650      	mov	r0, sl
 80169c4:	f003 fc9f 	bl	801a306 <__sprint_r>
 80169c8:	2800      	cmp	r0, #0
 80169ca:	f040 8288 	bne.w	8016ede <_vfprintf_r+0x13a6>
 80169ce:	a925      	add	r1, sp, #148	; 0x94
 80169d0:	3d10      	subs	r5, #16
 80169d2:	460c      	mov	r4, r1
 80169d4:	e7bf      	b.n	8016956 <_vfprintf_r+0xe1e>
 80169d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80169d8:	2b00      	cmp	r3, #0
 80169da:	dc73      	bgt.n	8016ac4 <_vfprintf_r+0xf8c>
 80169dc:	4b37      	ldr	r3, [pc, #220]	; (8016abc <_vfprintf_r+0xf84>)
 80169de:	6023      	str	r3, [r4, #0]
 80169e0:	2301      	movs	r3, #1
 80169e2:	441e      	add	r6, r3
 80169e4:	6063      	str	r3, [r4, #4]
 80169e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80169e8:	9624      	str	r6, [sp, #144]	; 0x90
 80169ea:	3301      	adds	r3, #1
 80169ec:	2b07      	cmp	r3, #7
 80169ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80169f0:	dc3d      	bgt.n	8016a6e <_vfprintf_r+0xf36>
 80169f2:	3408      	adds	r4, #8
 80169f4:	9905      	ldr	r1, [sp, #20]
 80169f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80169f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80169fa:	430a      	orrs	r2, r1
 80169fc:	f00b 0101 	and.w	r1, fp, #1
 8016a00:	430a      	orrs	r2, r1
 8016a02:	f43f acbe 	beq.w	8016382 <_vfprintf_r+0x84a>
 8016a06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016a08:	6022      	str	r2, [r4, #0]
 8016a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a0c:	6062      	str	r2, [r4, #4]
 8016a0e:	4413      	add	r3, r2
 8016a10:	9324      	str	r3, [sp, #144]	; 0x90
 8016a12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016a14:	3301      	adds	r3, #1
 8016a16:	2b07      	cmp	r3, #7
 8016a18:	9323      	str	r3, [sp, #140]	; 0x8c
 8016a1a:	dc32      	bgt.n	8016a82 <_vfprintf_r+0xf4a>
 8016a1c:	3408      	adds	r4, #8
 8016a1e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8016a20:	2d00      	cmp	r5, #0
 8016a22:	da1b      	bge.n	8016a5c <_vfprintf_r+0xf24>
 8016a24:	4e26      	ldr	r6, [pc, #152]	; (8016ac0 <_vfprintf_r+0xf88>)
 8016a26:	426d      	negs	r5, r5
 8016a28:	4623      	mov	r3, r4
 8016a2a:	2710      	movs	r7, #16
 8016a2c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8016a30:	2d10      	cmp	r5, #16
 8016a32:	f102 0201 	add.w	r2, r2, #1
 8016a36:	f104 0408 	add.w	r4, r4, #8
 8016a3a:	601e      	str	r6, [r3, #0]
 8016a3c:	dc2b      	bgt.n	8016a96 <_vfprintf_r+0xf5e>
 8016a3e:	605d      	str	r5, [r3, #4]
 8016a40:	2a07      	cmp	r2, #7
 8016a42:	440d      	add	r5, r1
 8016a44:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8016a48:	dd08      	ble.n	8016a5c <_vfprintf_r+0xf24>
 8016a4a:	aa22      	add	r2, sp, #136	; 0x88
 8016a4c:	4649      	mov	r1, r9
 8016a4e:	4650      	mov	r0, sl
 8016a50:	f003 fc59 	bl	801a306 <__sprint_r>
 8016a54:	2800      	cmp	r0, #0
 8016a56:	f040 8242 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016a5a:	ac25      	add	r4, sp, #148	; 0x94
 8016a5c:	9b03      	ldr	r3, [sp, #12]
 8016a5e:	6023      	str	r3, [r4, #0]
 8016a60:	9b05      	ldr	r3, [sp, #20]
 8016a62:	9a05      	ldr	r2, [sp, #20]
 8016a64:	6063      	str	r3, [r4, #4]
 8016a66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016a68:	4413      	add	r3, r2
 8016a6a:	9324      	str	r3, [sp, #144]	; 0x90
 8016a6c:	e482      	b.n	8016374 <_vfprintf_r+0x83c>
 8016a6e:	aa22      	add	r2, sp, #136	; 0x88
 8016a70:	4649      	mov	r1, r9
 8016a72:	4650      	mov	r0, sl
 8016a74:	f003 fc47 	bl	801a306 <__sprint_r>
 8016a78:	2800      	cmp	r0, #0
 8016a7a:	f040 8230 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016a7e:	ac25      	add	r4, sp, #148	; 0x94
 8016a80:	e7b8      	b.n	80169f4 <_vfprintf_r+0xebc>
 8016a82:	aa22      	add	r2, sp, #136	; 0x88
 8016a84:	4649      	mov	r1, r9
 8016a86:	4650      	mov	r0, sl
 8016a88:	f003 fc3d 	bl	801a306 <__sprint_r>
 8016a8c:	2800      	cmp	r0, #0
 8016a8e:	f040 8226 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016a92:	ac25      	add	r4, sp, #148	; 0x94
 8016a94:	e7c3      	b.n	8016a1e <_vfprintf_r+0xee6>
 8016a96:	3110      	adds	r1, #16
 8016a98:	2a07      	cmp	r2, #7
 8016a9a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8016a9e:	605f      	str	r7, [r3, #4]
 8016aa0:	dd08      	ble.n	8016ab4 <_vfprintf_r+0xf7c>
 8016aa2:	aa22      	add	r2, sp, #136	; 0x88
 8016aa4:	4649      	mov	r1, r9
 8016aa6:	4650      	mov	r0, sl
 8016aa8:	f003 fc2d 	bl	801a306 <__sprint_r>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	f040 8216 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016ab2:	ac25      	add	r4, sp, #148	; 0x94
 8016ab4:	3d10      	subs	r5, #16
 8016ab6:	4623      	mov	r3, r4
 8016ab8:	e7b8      	b.n	8016a2c <_vfprintf_r+0xef4>
 8016aba:	bf00      	nop
 8016abc:	0801fa1e 	.word	0x0801fa1e
 8016ac0:	0801fa30 	.word	0x0801fa30
 8016ac4:	9b05      	ldr	r3, [sp, #20]
 8016ac6:	42ab      	cmp	r3, r5
 8016ac8:	bfa8      	it	ge
 8016aca:	462b      	movge	r3, r5
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	461f      	mov	r7, r3
 8016ad0:	dd0b      	ble.n	8016aea <_vfprintf_r+0xfb2>
 8016ad2:	9b03      	ldr	r3, [sp, #12]
 8016ad4:	e9c4 3700 	strd	r3, r7, [r4]
 8016ad8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016ada:	3301      	adds	r3, #1
 8016adc:	443e      	add	r6, r7
 8016ade:	2b07      	cmp	r3, #7
 8016ae0:	9624      	str	r6, [sp, #144]	; 0x90
 8016ae2:	9323      	str	r3, [sp, #140]	; 0x8c
 8016ae4:	f300 808c 	bgt.w	8016c00 <_vfprintf_r+0x10c8>
 8016ae8:	3408      	adds	r4, #8
 8016aea:	2f00      	cmp	r7, #0
 8016aec:	bfac      	ite	ge
 8016aee:	1bee      	subge	r6, r5, r7
 8016af0:	462e      	movlt	r6, r5
 8016af2:	2e00      	cmp	r6, #0
 8016af4:	dd1c      	ble.n	8016b30 <_vfprintf_r+0xff8>
 8016af6:	4f9f      	ldr	r7, [pc, #636]	; (8016d74 <_vfprintf_r+0x123c>)
 8016af8:	f04f 0810 	mov.w	r8, #16
 8016afc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8016b00:	2e10      	cmp	r6, #16
 8016b02:	f103 0301 	add.w	r3, r3, #1
 8016b06:	f104 0108 	add.w	r1, r4, #8
 8016b0a:	6027      	str	r7, [r4, #0]
 8016b0c:	f300 8082 	bgt.w	8016c14 <_vfprintf_r+0x10dc>
 8016b10:	6066      	str	r6, [r4, #4]
 8016b12:	2b07      	cmp	r3, #7
 8016b14:	4416      	add	r6, r2
 8016b16:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8016b1a:	f340 808e 	ble.w	8016c3a <_vfprintf_r+0x1102>
 8016b1e:	aa22      	add	r2, sp, #136	; 0x88
 8016b20:	4649      	mov	r1, r9
 8016b22:	4650      	mov	r0, sl
 8016b24:	f003 fbef 	bl	801a306 <__sprint_r>
 8016b28:	2800      	cmp	r0, #0
 8016b2a:	f040 81d8 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016b2e:	ac25      	add	r4, sp, #148	; 0x94
 8016b30:	9b03      	ldr	r3, [sp, #12]
 8016b32:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8016b36:	441d      	add	r5, r3
 8016b38:	d00d      	beq.n	8016b56 <_vfprintf_r+0x101e>
 8016b3a:	4e8e      	ldr	r6, [pc, #568]	; (8016d74 <_vfprintf_r+0x123c>)
 8016b3c:	2710      	movs	r7, #16
 8016b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d17c      	bne.n	8016c3e <_vfprintf_r+0x1106>
 8016b44:	9b08      	ldr	r3, [sp, #32]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d17c      	bne.n	8016c44 <_vfprintf_r+0x110c>
 8016b4a:	9b03      	ldr	r3, [sp, #12]
 8016b4c:	9a05      	ldr	r2, [sp, #20]
 8016b4e:	4413      	add	r3, r2
 8016b50:	429d      	cmp	r5, r3
 8016b52:	bf28      	it	cs
 8016b54:	461d      	movcs	r5, r3
 8016b56:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016b58:	9a05      	ldr	r2, [sp, #20]
 8016b5a:	4293      	cmp	r3, r2
 8016b5c:	db02      	blt.n	8016b64 <_vfprintf_r+0x102c>
 8016b5e:	f01b 0f01 	tst.w	fp, #1
 8016b62:	d00e      	beq.n	8016b82 <_vfprintf_r+0x104a>
 8016b64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016b66:	6023      	str	r3, [r4, #0]
 8016b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016b6c:	6063      	str	r3, [r4, #4]
 8016b6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016b70:	4413      	add	r3, r2
 8016b72:	9324      	str	r3, [sp, #144]	; 0x90
 8016b74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016b76:	3301      	adds	r3, #1
 8016b78:	2b07      	cmp	r3, #7
 8016b7a:	9323      	str	r3, [sp, #140]	; 0x8c
 8016b7c:	f300 80e5 	bgt.w	8016d4a <_vfprintf_r+0x1212>
 8016b80:	3408      	adds	r4, #8
 8016b82:	9905      	ldr	r1, [sp, #20]
 8016b84:	9b03      	ldr	r3, [sp, #12]
 8016b86:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8016b88:	440b      	add	r3, r1
 8016b8a:	1b8e      	subs	r6, r1, r6
 8016b8c:	1b5a      	subs	r2, r3, r5
 8016b8e:	4296      	cmp	r6, r2
 8016b90:	bfa8      	it	ge
 8016b92:	4616      	movge	r6, r2
 8016b94:	2e00      	cmp	r6, #0
 8016b96:	dd0b      	ble.n	8016bb0 <_vfprintf_r+0x1078>
 8016b98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016b9a:	4433      	add	r3, r6
 8016b9c:	9324      	str	r3, [sp, #144]	; 0x90
 8016b9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016ba0:	3301      	adds	r3, #1
 8016ba2:	2b07      	cmp	r3, #7
 8016ba4:	e9c4 5600 	strd	r5, r6, [r4]
 8016ba8:	9323      	str	r3, [sp, #140]	; 0x8c
 8016baa:	f300 80d8 	bgt.w	8016d5e <_vfprintf_r+0x1226>
 8016bae:	3408      	adds	r4, #8
 8016bb0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8016bb2:	9b05      	ldr	r3, [sp, #20]
 8016bb4:	2e00      	cmp	r6, #0
 8016bb6:	eba3 0505 	sub.w	r5, r3, r5
 8016bba:	bfa8      	it	ge
 8016bbc:	1bad      	subge	r5, r5, r6
 8016bbe:	2d00      	cmp	r5, #0
 8016bc0:	f77f abdf 	ble.w	8016382 <_vfprintf_r+0x84a>
 8016bc4:	4e6b      	ldr	r6, [pc, #428]	; (8016d74 <_vfprintf_r+0x123c>)
 8016bc6:	2710      	movs	r7, #16
 8016bc8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8016bcc:	2d10      	cmp	r5, #16
 8016bce:	f103 0301 	add.w	r3, r3, #1
 8016bd2:	f104 0108 	add.w	r1, r4, #8
 8016bd6:	6026      	str	r6, [r4, #0]
 8016bd8:	f77f aec6 	ble.w	8016968 <_vfprintf_r+0xe30>
 8016bdc:	3210      	adds	r2, #16
 8016bde:	2b07      	cmp	r3, #7
 8016be0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8016be4:	6067      	str	r7, [r4, #4]
 8016be6:	dd08      	ble.n	8016bfa <_vfprintf_r+0x10c2>
 8016be8:	aa22      	add	r2, sp, #136	; 0x88
 8016bea:	4649      	mov	r1, r9
 8016bec:	4650      	mov	r0, sl
 8016bee:	f003 fb8a 	bl	801a306 <__sprint_r>
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	f040 8173 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016bf8:	a925      	add	r1, sp, #148	; 0x94
 8016bfa:	3d10      	subs	r5, #16
 8016bfc:	460c      	mov	r4, r1
 8016bfe:	e7e3      	b.n	8016bc8 <_vfprintf_r+0x1090>
 8016c00:	aa22      	add	r2, sp, #136	; 0x88
 8016c02:	4649      	mov	r1, r9
 8016c04:	4650      	mov	r0, sl
 8016c06:	f003 fb7e 	bl	801a306 <__sprint_r>
 8016c0a:	2800      	cmp	r0, #0
 8016c0c:	f040 8167 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016c10:	ac25      	add	r4, sp, #148	; 0x94
 8016c12:	e76a      	b.n	8016aea <_vfprintf_r+0xfb2>
 8016c14:	3210      	adds	r2, #16
 8016c16:	2b07      	cmp	r3, #7
 8016c18:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8016c1c:	f8c4 8004 	str.w	r8, [r4, #4]
 8016c20:	dd08      	ble.n	8016c34 <_vfprintf_r+0x10fc>
 8016c22:	aa22      	add	r2, sp, #136	; 0x88
 8016c24:	4649      	mov	r1, r9
 8016c26:	4650      	mov	r0, sl
 8016c28:	f003 fb6d 	bl	801a306 <__sprint_r>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	f040 8156 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016c32:	a925      	add	r1, sp, #148	; 0x94
 8016c34:	3e10      	subs	r6, #16
 8016c36:	460c      	mov	r4, r1
 8016c38:	e760      	b.n	8016afc <_vfprintf_r+0xfc4>
 8016c3a:	460c      	mov	r4, r1
 8016c3c:	e778      	b.n	8016b30 <_vfprintf_r+0xff8>
 8016c3e:	9b08      	ldr	r3, [sp, #32]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d052      	beq.n	8016cea <_vfprintf_r+0x11b2>
 8016c44:	9b08      	ldr	r3, [sp, #32]
 8016c46:	3b01      	subs	r3, #1
 8016c48:	9308      	str	r3, [sp, #32]
 8016c4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c4c:	6023      	str	r3, [r4, #0]
 8016c4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016c50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016c52:	6063      	str	r3, [r4, #4]
 8016c54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016c56:	4413      	add	r3, r2
 8016c58:	9324      	str	r3, [sp, #144]	; 0x90
 8016c5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016c5c:	3301      	adds	r3, #1
 8016c5e:	2b07      	cmp	r3, #7
 8016c60:	9323      	str	r3, [sp, #140]	; 0x8c
 8016c62:	dc49      	bgt.n	8016cf8 <_vfprintf_r+0x11c0>
 8016c64:	3408      	adds	r4, #8
 8016c66:	9b03      	ldr	r3, [sp, #12]
 8016c68:	9a05      	ldr	r2, [sp, #20]
 8016c6a:	eb03 0802 	add.w	r8, r3, r2
 8016c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c70:	781b      	ldrb	r3, [r3, #0]
 8016c72:	eba8 0805 	sub.w	r8, r8, r5
 8016c76:	4598      	cmp	r8, r3
 8016c78:	bfa8      	it	ge
 8016c7a:	4698      	movge	r8, r3
 8016c7c:	f1b8 0f00 	cmp.w	r8, #0
 8016c80:	dd0a      	ble.n	8016c98 <_vfprintf_r+0x1160>
 8016c82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016c84:	4443      	add	r3, r8
 8016c86:	9324      	str	r3, [sp, #144]	; 0x90
 8016c88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016c8a:	3301      	adds	r3, #1
 8016c8c:	2b07      	cmp	r3, #7
 8016c8e:	e9c4 5800 	strd	r5, r8, [r4]
 8016c92:	9323      	str	r3, [sp, #140]	; 0x8c
 8016c94:	dc3a      	bgt.n	8016d0c <_vfprintf_r+0x11d4>
 8016c96:	3408      	adds	r4, #8
 8016c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	f1b8 0f00 	cmp.w	r8, #0
 8016ca0:	bfac      	ite	ge
 8016ca2:	eba3 0808 	subge.w	r8, r3, r8
 8016ca6:	4698      	movlt	r8, r3
 8016ca8:	f1b8 0f00 	cmp.w	r8, #0
 8016cac:	dd19      	ble.n	8016ce2 <_vfprintf_r+0x11aa>
 8016cae:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8016cb2:	f1b8 0f10 	cmp.w	r8, #16
 8016cb6:	f102 0201 	add.w	r2, r2, #1
 8016cba:	f104 0108 	add.w	r1, r4, #8
 8016cbe:	6026      	str	r6, [r4, #0]
 8016cc0:	dc2e      	bgt.n	8016d20 <_vfprintf_r+0x11e8>
 8016cc2:	4443      	add	r3, r8
 8016cc4:	2a07      	cmp	r2, #7
 8016cc6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8016cca:	f8c4 8004 	str.w	r8, [r4, #4]
 8016cce:	dd3a      	ble.n	8016d46 <_vfprintf_r+0x120e>
 8016cd0:	aa22      	add	r2, sp, #136	; 0x88
 8016cd2:	4649      	mov	r1, r9
 8016cd4:	4650      	mov	r0, sl
 8016cd6:	f003 fb16 	bl	801a306 <__sprint_r>
 8016cda:	2800      	cmp	r0, #0
 8016cdc:	f040 80ff 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016ce0:	ac25      	add	r4, sp, #148	; 0x94
 8016ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ce4:	781b      	ldrb	r3, [r3, #0]
 8016ce6:	441d      	add	r5, r3
 8016ce8:	e729      	b.n	8016b3e <_vfprintf_r+0x1006>
 8016cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cec:	3b01      	subs	r3, #1
 8016cee:	930a      	str	r3, [sp, #40]	; 0x28
 8016cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cf2:	3b01      	subs	r3, #1
 8016cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8016cf6:	e7a8      	b.n	8016c4a <_vfprintf_r+0x1112>
 8016cf8:	aa22      	add	r2, sp, #136	; 0x88
 8016cfa:	4649      	mov	r1, r9
 8016cfc:	4650      	mov	r0, sl
 8016cfe:	f003 fb02 	bl	801a306 <__sprint_r>
 8016d02:	2800      	cmp	r0, #0
 8016d04:	f040 80eb 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016d08:	ac25      	add	r4, sp, #148	; 0x94
 8016d0a:	e7ac      	b.n	8016c66 <_vfprintf_r+0x112e>
 8016d0c:	aa22      	add	r2, sp, #136	; 0x88
 8016d0e:	4649      	mov	r1, r9
 8016d10:	4650      	mov	r0, sl
 8016d12:	f003 faf8 	bl	801a306 <__sprint_r>
 8016d16:	2800      	cmp	r0, #0
 8016d18:	f040 80e1 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016d1c:	ac25      	add	r4, sp, #148	; 0x94
 8016d1e:	e7bb      	b.n	8016c98 <_vfprintf_r+0x1160>
 8016d20:	3310      	adds	r3, #16
 8016d22:	2a07      	cmp	r2, #7
 8016d24:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8016d28:	6067      	str	r7, [r4, #4]
 8016d2a:	dd08      	ble.n	8016d3e <_vfprintf_r+0x1206>
 8016d2c:	aa22      	add	r2, sp, #136	; 0x88
 8016d2e:	4649      	mov	r1, r9
 8016d30:	4650      	mov	r0, sl
 8016d32:	f003 fae8 	bl	801a306 <__sprint_r>
 8016d36:	2800      	cmp	r0, #0
 8016d38:	f040 80d1 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016d3c:	a925      	add	r1, sp, #148	; 0x94
 8016d3e:	f1a8 0810 	sub.w	r8, r8, #16
 8016d42:	460c      	mov	r4, r1
 8016d44:	e7b3      	b.n	8016cae <_vfprintf_r+0x1176>
 8016d46:	460c      	mov	r4, r1
 8016d48:	e7cb      	b.n	8016ce2 <_vfprintf_r+0x11aa>
 8016d4a:	aa22      	add	r2, sp, #136	; 0x88
 8016d4c:	4649      	mov	r1, r9
 8016d4e:	4650      	mov	r0, sl
 8016d50:	f003 fad9 	bl	801a306 <__sprint_r>
 8016d54:	2800      	cmp	r0, #0
 8016d56:	f040 80c2 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016d5a:	ac25      	add	r4, sp, #148	; 0x94
 8016d5c:	e711      	b.n	8016b82 <_vfprintf_r+0x104a>
 8016d5e:	aa22      	add	r2, sp, #136	; 0x88
 8016d60:	4649      	mov	r1, r9
 8016d62:	4650      	mov	r0, sl
 8016d64:	f003 facf 	bl	801a306 <__sprint_r>
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	f040 80b8 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016d6e:	ac25      	add	r4, sp, #148	; 0x94
 8016d70:	e71e      	b.n	8016bb0 <_vfprintf_r+0x1078>
 8016d72:	bf00      	nop
 8016d74:	0801fa30 	.word	0x0801fa30
 8016d78:	9a05      	ldr	r2, [sp, #20]
 8016d7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016d7c:	2a01      	cmp	r2, #1
 8016d7e:	9a03      	ldr	r2, [sp, #12]
 8016d80:	6022      	str	r2, [r4, #0]
 8016d82:	f106 0601 	add.w	r6, r6, #1
 8016d86:	f103 0301 	add.w	r3, r3, #1
 8016d8a:	f04f 0201 	mov.w	r2, #1
 8016d8e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8016d92:	f104 0508 	add.w	r5, r4, #8
 8016d96:	6062      	str	r2, [r4, #4]
 8016d98:	dc02      	bgt.n	8016da0 <_vfprintf_r+0x1268>
 8016d9a:	f01b 0f01 	tst.w	fp, #1
 8016d9e:	d078      	beq.n	8016e92 <_vfprintf_r+0x135a>
 8016da0:	2b07      	cmp	r3, #7
 8016da2:	dd08      	ble.n	8016db6 <_vfprintf_r+0x127e>
 8016da4:	aa22      	add	r2, sp, #136	; 0x88
 8016da6:	4649      	mov	r1, r9
 8016da8:	4650      	mov	r0, sl
 8016daa:	f003 faac 	bl	801a306 <__sprint_r>
 8016dae:	2800      	cmp	r0, #0
 8016db0:	f040 8095 	bne.w	8016ede <_vfprintf_r+0x13a6>
 8016db4:	ad25      	add	r5, sp, #148	; 0x94
 8016db6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016db8:	602b      	str	r3, [r5, #0]
 8016dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016dbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016dbe:	606b      	str	r3, [r5, #4]
 8016dc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016dc2:	4413      	add	r3, r2
 8016dc4:	9324      	str	r3, [sp, #144]	; 0x90
 8016dc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016dc8:	3301      	adds	r3, #1
 8016dca:	2b07      	cmp	r3, #7
 8016dcc:	9323      	str	r3, [sp, #140]	; 0x8c
 8016dce:	dc32      	bgt.n	8016e36 <_vfprintf_r+0x12fe>
 8016dd0:	3508      	adds	r5, #8
 8016dd2:	9b05      	ldr	r3, [sp, #20]
 8016dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016dd8:	1e5c      	subs	r4, r3, #1
 8016dda:	2200      	movs	r2, #0
 8016ddc:	2300      	movs	r3, #0
 8016dde:	f7e9 fe9d 	bl	8000b1c <__aeabi_dcmpeq>
 8016de2:	2800      	cmp	r0, #0
 8016de4:	d130      	bne.n	8016e48 <_vfprintf_r+0x1310>
 8016de6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8016de8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016dea:	9803      	ldr	r0, [sp, #12]
 8016dec:	9a05      	ldr	r2, [sp, #20]
 8016dee:	3101      	adds	r1, #1
 8016df0:	3b01      	subs	r3, #1
 8016df2:	3001      	adds	r0, #1
 8016df4:	4413      	add	r3, r2
 8016df6:	2907      	cmp	r1, #7
 8016df8:	e9c5 0400 	strd	r0, r4, [r5]
 8016dfc:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 8016e00:	dd4a      	ble.n	8016e98 <_vfprintf_r+0x1360>
 8016e02:	aa22      	add	r2, sp, #136	; 0x88
 8016e04:	4649      	mov	r1, r9
 8016e06:	4650      	mov	r0, sl
 8016e08:	f003 fa7d 	bl	801a306 <__sprint_r>
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	d166      	bne.n	8016ede <_vfprintf_r+0x13a6>
 8016e10:	ad25      	add	r5, sp, #148	; 0x94
 8016e12:	ab1e      	add	r3, sp, #120	; 0x78
 8016e14:	602b      	str	r3, [r5, #0]
 8016e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016e1a:	606b      	str	r3, [r5, #4]
 8016e1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016e1e:	4413      	add	r3, r2
 8016e20:	9324      	str	r3, [sp, #144]	; 0x90
 8016e22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016e24:	3301      	adds	r3, #1
 8016e26:	2b07      	cmp	r3, #7
 8016e28:	9323      	str	r3, [sp, #140]	; 0x8c
 8016e2a:	f73f ada4 	bgt.w	8016976 <_vfprintf_r+0xe3e>
 8016e2e:	f105 0408 	add.w	r4, r5, #8
 8016e32:	f7ff baa6 	b.w	8016382 <_vfprintf_r+0x84a>
 8016e36:	aa22      	add	r2, sp, #136	; 0x88
 8016e38:	4649      	mov	r1, r9
 8016e3a:	4650      	mov	r0, sl
 8016e3c:	f003 fa63 	bl	801a306 <__sprint_r>
 8016e40:	2800      	cmp	r0, #0
 8016e42:	d14c      	bne.n	8016ede <_vfprintf_r+0x13a6>
 8016e44:	ad25      	add	r5, sp, #148	; 0x94
 8016e46:	e7c4      	b.n	8016dd2 <_vfprintf_r+0x129a>
 8016e48:	2c00      	cmp	r4, #0
 8016e4a:	dde2      	ble.n	8016e12 <_vfprintf_r+0x12da>
 8016e4c:	4e53      	ldr	r6, [pc, #332]	; (8016f9c <_vfprintf_r+0x1464>)
 8016e4e:	2710      	movs	r7, #16
 8016e50:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8016e54:	2c10      	cmp	r4, #16
 8016e56:	f103 0301 	add.w	r3, r3, #1
 8016e5a:	f105 0108 	add.w	r1, r5, #8
 8016e5e:	602e      	str	r6, [r5, #0]
 8016e60:	dc07      	bgt.n	8016e72 <_vfprintf_r+0x133a>
 8016e62:	606c      	str	r4, [r5, #4]
 8016e64:	2b07      	cmp	r3, #7
 8016e66:	4414      	add	r4, r2
 8016e68:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8016e6c:	dcc9      	bgt.n	8016e02 <_vfprintf_r+0x12ca>
 8016e6e:	460d      	mov	r5, r1
 8016e70:	e7cf      	b.n	8016e12 <_vfprintf_r+0x12da>
 8016e72:	3210      	adds	r2, #16
 8016e74:	2b07      	cmp	r3, #7
 8016e76:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8016e7a:	606f      	str	r7, [r5, #4]
 8016e7c:	dd06      	ble.n	8016e8c <_vfprintf_r+0x1354>
 8016e7e:	aa22      	add	r2, sp, #136	; 0x88
 8016e80:	4649      	mov	r1, r9
 8016e82:	4650      	mov	r0, sl
 8016e84:	f003 fa3f 	bl	801a306 <__sprint_r>
 8016e88:	bb48      	cbnz	r0, 8016ede <_vfprintf_r+0x13a6>
 8016e8a:	a925      	add	r1, sp, #148	; 0x94
 8016e8c:	3c10      	subs	r4, #16
 8016e8e:	460d      	mov	r5, r1
 8016e90:	e7de      	b.n	8016e50 <_vfprintf_r+0x1318>
 8016e92:	2b07      	cmp	r3, #7
 8016e94:	ddbd      	ble.n	8016e12 <_vfprintf_r+0x12da>
 8016e96:	e7b4      	b.n	8016e02 <_vfprintf_r+0x12ca>
 8016e98:	3508      	adds	r5, #8
 8016e9a:	e7ba      	b.n	8016e12 <_vfprintf_r+0x12da>
 8016e9c:	460c      	mov	r4, r1
 8016e9e:	f7ff ba70 	b.w	8016382 <_vfprintf_r+0x84a>
 8016ea2:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8016ea6:	1a9d      	subs	r5, r3, r2
 8016ea8:	2d00      	cmp	r5, #0
 8016eaa:	f77f aa6e 	ble.w	801638a <_vfprintf_r+0x852>
 8016eae:	4e3c      	ldr	r6, [pc, #240]	; (8016fa0 <_vfprintf_r+0x1468>)
 8016eb0:	2710      	movs	r7, #16
 8016eb2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8016eb6:	2d10      	cmp	r5, #16
 8016eb8:	f103 0301 	add.w	r3, r3, #1
 8016ebc:	6026      	str	r6, [r4, #0]
 8016ebe:	dc18      	bgt.n	8016ef2 <_vfprintf_r+0x13ba>
 8016ec0:	6065      	str	r5, [r4, #4]
 8016ec2:	2b07      	cmp	r3, #7
 8016ec4:	4415      	add	r5, r2
 8016ec6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8016eca:	f77f aa5e 	ble.w	801638a <_vfprintf_r+0x852>
 8016ece:	aa22      	add	r2, sp, #136	; 0x88
 8016ed0:	4649      	mov	r1, r9
 8016ed2:	4650      	mov	r0, sl
 8016ed4:	f003 fa17 	bl	801a306 <__sprint_r>
 8016ed8:	2800      	cmp	r0, #0
 8016eda:	f43f aa56 	beq.w	801638a <_vfprintf_r+0x852>
 8016ede:	9b04      	ldr	r3, [sp, #16]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	f43f a872 	beq.w	8015fca <_vfprintf_r+0x492>
 8016ee6:	4619      	mov	r1, r3
 8016ee8:	4650      	mov	r0, sl
 8016eea:	f001 f909 	bl	8018100 <_free_r>
 8016eee:	f7ff b86c 	b.w	8015fca <_vfprintf_r+0x492>
 8016ef2:	3210      	adds	r2, #16
 8016ef4:	2b07      	cmp	r3, #7
 8016ef6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8016efa:	6067      	str	r7, [r4, #4]
 8016efc:	dc02      	bgt.n	8016f04 <_vfprintf_r+0x13cc>
 8016efe:	3408      	adds	r4, #8
 8016f00:	3d10      	subs	r5, #16
 8016f02:	e7d6      	b.n	8016eb2 <_vfprintf_r+0x137a>
 8016f04:	aa22      	add	r2, sp, #136	; 0x88
 8016f06:	4649      	mov	r1, r9
 8016f08:	4650      	mov	r0, sl
 8016f0a:	f003 f9fc 	bl	801a306 <__sprint_r>
 8016f0e:	2800      	cmp	r0, #0
 8016f10:	d1e5      	bne.n	8016ede <_vfprintf_r+0x13a6>
 8016f12:	ac25      	add	r4, sp, #148	; 0x94
 8016f14:	e7f4      	b.n	8016f00 <_vfprintf_r+0x13c8>
 8016f16:	9904      	ldr	r1, [sp, #16]
 8016f18:	4650      	mov	r0, sl
 8016f1a:	f001 f8f1 	bl	8018100 <_free_r>
 8016f1e:	f7ff ba4c 	b.w	80163ba <_vfprintf_r+0x882>
 8016f22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016f24:	b91b      	cbnz	r3, 8016f2e <_vfprintf_r+0x13f6>
 8016f26:	2300      	movs	r3, #0
 8016f28:	9323      	str	r3, [sp, #140]	; 0x8c
 8016f2a:	f7ff b84e 	b.w	8015fca <_vfprintf_r+0x492>
 8016f2e:	aa22      	add	r2, sp, #136	; 0x88
 8016f30:	4649      	mov	r1, r9
 8016f32:	4650      	mov	r0, sl
 8016f34:	f003 f9e7 	bl	801a306 <__sprint_r>
 8016f38:	2800      	cmp	r0, #0
 8016f3a:	d0f4      	beq.n	8016f26 <_vfprintf_r+0x13ee>
 8016f3c:	f7ff b845 	b.w	8015fca <_vfprintf_r+0x492>
 8016f40:	ea56 0207 	orrs.w	r2, r6, r7
 8016f44:	f8cd b010 	str.w	fp, [sp, #16]
 8016f48:	f43f ab5c 	beq.w	8016604 <_vfprintf_r+0xacc>
 8016f4c:	2b01      	cmp	r3, #1
 8016f4e:	f43f abf4 	beq.w	801673a <_vfprintf_r+0xc02>
 8016f52:	2b02      	cmp	r3, #2
 8016f54:	ab4e      	add	r3, sp, #312	; 0x138
 8016f56:	9303      	str	r3, [sp, #12]
 8016f58:	f43f ac46 	beq.w	80167e8 <_vfprintf_r+0xcb0>
 8016f5c:	9903      	ldr	r1, [sp, #12]
 8016f5e:	f006 0307 	and.w	r3, r6, #7
 8016f62:	460a      	mov	r2, r1
 8016f64:	3330      	adds	r3, #48	; 0x30
 8016f66:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8016f6a:	9203      	str	r2, [sp, #12]
 8016f6c:	08f2      	lsrs	r2, r6, #3
 8016f6e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8016f72:	08f8      	lsrs	r0, r7, #3
 8016f74:	4616      	mov	r6, r2
 8016f76:	4607      	mov	r7, r0
 8016f78:	ea56 0207 	orrs.w	r2, r6, r7
 8016f7c:	d1ee      	bne.n	8016f5c <_vfprintf_r+0x1424>
 8016f7e:	9a04      	ldr	r2, [sp, #16]
 8016f80:	07d0      	lsls	r0, r2, #31
 8016f82:	f57f ac20 	bpl.w	80167c6 <_vfprintf_r+0xc8e>
 8016f86:	2b30      	cmp	r3, #48	; 0x30
 8016f88:	f43f ac1d 	beq.w	80167c6 <_vfprintf_r+0xc8e>
 8016f8c:	9a03      	ldr	r2, [sp, #12]
 8016f8e:	2330      	movs	r3, #48	; 0x30
 8016f90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016f94:	1e8b      	subs	r3, r1, #2
 8016f96:	9303      	str	r3, [sp, #12]
 8016f98:	e415      	b.n	80167c6 <_vfprintf_r+0xc8e>
 8016f9a:	bf00      	nop
 8016f9c:	0801fa30 	.word	0x0801fa30
 8016fa0:	0801fa20 	.word	0x0801fa20

08016fa4 <__sbprintf>:
 8016fa4:	b570      	push	{r4, r5, r6, lr}
 8016fa6:	460c      	mov	r4, r1
 8016fa8:	8989      	ldrh	r1, [r1, #12]
 8016faa:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8016fae:	f021 0102 	bic.w	r1, r1, #2
 8016fb2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016fb6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8016fb8:	911b      	str	r1, [sp, #108]	; 0x6c
 8016fba:	89e1      	ldrh	r1, [r4, #14]
 8016fbc:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016fc0:	69e1      	ldr	r1, [r4, #28]
 8016fc2:	9109      	str	r1, [sp, #36]	; 0x24
 8016fc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016fc6:	910b      	str	r1, [sp, #44]	; 0x2c
 8016fc8:	a91c      	add	r1, sp, #112	; 0x70
 8016fca:	9102      	str	r1, [sp, #8]
 8016fcc:	9106      	str	r1, [sp, #24]
 8016fce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016fd2:	4606      	mov	r6, r0
 8016fd4:	9104      	str	r1, [sp, #16]
 8016fd6:	9107      	str	r1, [sp, #28]
 8016fd8:	a818      	add	r0, sp, #96	; 0x60
 8016fda:	2100      	movs	r1, #0
 8016fdc:	e9cd 3200 	strd	r3, r2, [sp]
 8016fe0:	9108      	str	r1, [sp, #32]
 8016fe2:	f001 f9b7 	bl	8018354 <__retarget_lock_init_recursive>
 8016fe6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016fea:	a902      	add	r1, sp, #8
 8016fec:	4630      	mov	r0, r6
 8016fee:	f7fe fda3 	bl	8015b38 <_vfprintf_r>
 8016ff2:	1e05      	subs	r5, r0, #0
 8016ff4:	db07      	blt.n	8017006 <__sbprintf+0x62>
 8016ff6:	a902      	add	r1, sp, #8
 8016ff8:	4630      	mov	r0, r6
 8016ffa:	f000 ff85 	bl	8017f08 <_fflush_r>
 8016ffe:	2800      	cmp	r0, #0
 8017000:	bf18      	it	ne
 8017002:	f04f 35ff 	movne.w	r5, #4294967295
 8017006:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801700a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801700c:	065b      	lsls	r3, r3, #25
 801700e:	bf42      	ittt	mi
 8017010:	89a3      	ldrhmi	r3, [r4, #12]
 8017012:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8017016:	81a3      	strhmi	r3, [r4, #12]
 8017018:	f001 f99d 	bl	8018356 <__retarget_lock_close_recursive>
 801701c:	4628      	mov	r0, r5
 801701e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8017022:	bd70      	pop	{r4, r5, r6, pc}

08017024 <__swsetup_r>:
 8017024:	b538      	push	{r3, r4, r5, lr}
 8017026:	4b2a      	ldr	r3, [pc, #168]	; (80170d0 <__swsetup_r+0xac>)
 8017028:	4605      	mov	r5, r0
 801702a:	6818      	ldr	r0, [r3, #0]
 801702c:	460c      	mov	r4, r1
 801702e:	b118      	cbz	r0, 8017038 <__swsetup_r+0x14>
 8017030:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017032:	b90b      	cbnz	r3, 8017038 <__swsetup_r+0x14>
 8017034:	f000 ffd4 	bl	8017fe0 <__sinit>
 8017038:	89a3      	ldrh	r3, [r4, #12]
 801703a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801703e:	0718      	lsls	r0, r3, #28
 8017040:	d422      	bmi.n	8017088 <__swsetup_r+0x64>
 8017042:	06d9      	lsls	r1, r3, #27
 8017044:	d407      	bmi.n	8017056 <__swsetup_r+0x32>
 8017046:	2309      	movs	r3, #9
 8017048:	602b      	str	r3, [r5, #0]
 801704a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801704e:	81a3      	strh	r3, [r4, #12]
 8017050:	f04f 30ff 	mov.w	r0, #4294967295
 8017054:	e034      	b.n	80170c0 <__swsetup_r+0x9c>
 8017056:	0758      	lsls	r0, r3, #29
 8017058:	d512      	bpl.n	8017080 <__swsetup_r+0x5c>
 801705a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801705c:	b141      	cbz	r1, 8017070 <__swsetup_r+0x4c>
 801705e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8017062:	4299      	cmp	r1, r3
 8017064:	d002      	beq.n	801706c <__swsetup_r+0x48>
 8017066:	4628      	mov	r0, r5
 8017068:	f001 f84a 	bl	8018100 <_free_r>
 801706c:	2300      	movs	r3, #0
 801706e:	6323      	str	r3, [r4, #48]	; 0x30
 8017070:	89a3      	ldrh	r3, [r4, #12]
 8017072:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017076:	81a3      	strh	r3, [r4, #12]
 8017078:	2300      	movs	r3, #0
 801707a:	6063      	str	r3, [r4, #4]
 801707c:	6923      	ldr	r3, [r4, #16]
 801707e:	6023      	str	r3, [r4, #0]
 8017080:	89a3      	ldrh	r3, [r4, #12]
 8017082:	f043 0308 	orr.w	r3, r3, #8
 8017086:	81a3      	strh	r3, [r4, #12]
 8017088:	6923      	ldr	r3, [r4, #16]
 801708a:	b94b      	cbnz	r3, 80170a0 <__swsetup_r+0x7c>
 801708c:	89a3      	ldrh	r3, [r4, #12]
 801708e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017096:	d003      	beq.n	80170a0 <__swsetup_r+0x7c>
 8017098:	4621      	mov	r1, r4
 801709a:	4628      	mov	r0, r5
 801709c:	f001 f98c 	bl	80183b8 <__smakebuf_r>
 80170a0:	89a0      	ldrh	r0, [r4, #12]
 80170a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80170a6:	f010 0301 	ands.w	r3, r0, #1
 80170aa:	d00a      	beq.n	80170c2 <__swsetup_r+0x9e>
 80170ac:	2300      	movs	r3, #0
 80170ae:	60a3      	str	r3, [r4, #8]
 80170b0:	6963      	ldr	r3, [r4, #20]
 80170b2:	425b      	negs	r3, r3
 80170b4:	61a3      	str	r3, [r4, #24]
 80170b6:	6923      	ldr	r3, [r4, #16]
 80170b8:	b943      	cbnz	r3, 80170cc <__swsetup_r+0xa8>
 80170ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80170be:	d1c4      	bne.n	801704a <__swsetup_r+0x26>
 80170c0:	bd38      	pop	{r3, r4, r5, pc}
 80170c2:	0781      	lsls	r1, r0, #30
 80170c4:	bf58      	it	pl
 80170c6:	6963      	ldrpl	r3, [r4, #20]
 80170c8:	60a3      	str	r3, [r4, #8]
 80170ca:	e7f4      	b.n	80170b6 <__swsetup_r+0x92>
 80170cc:	2000      	movs	r0, #0
 80170ce:	e7f7      	b.n	80170c0 <__swsetup_r+0x9c>
 80170d0:	2000002c 	.word	0x2000002c

080170d4 <register_fini>:
 80170d4:	4b02      	ldr	r3, [pc, #8]	; (80170e0 <register_fini+0xc>)
 80170d6:	b113      	cbz	r3, 80170de <register_fini+0xa>
 80170d8:	4802      	ldr	r0, [pc, #8]	; (80170e4 <register_fini+0x10>)
 80170da:	f000 b805 	b.w	80170e8 <atexit>
 80170de:	4770      	bx	lr
 80170e0:	00000000 	.word	0x00000000
 80170e4:	08018031 	.word	0x08018031

080170e8 <atexit>:
 80170e8:	2300      	movs	r3, #0
 80170ea:	4601      	mov	r1, r0
 80170ec:	461a      	mov	r2, r3
 80170ee:	4618      	mov	r0, r3
 80170f0:	f003 be16 	b.w	801ad20 <__register_exitproc>

080170f4 <div>:
 80170f4:	2900      	cmp	r1, #0
 80170f6:	b510      	push	{r4, lr}
 80170f8:	fb91 f4f2 	sdiv	r4, r1, r2
 80170fc:	fb02 1314 	mls	r3, r2, r4, r1
 8017100:	db06      	blt.n	8017110 <div+0x1c>
 8017102:	2b00      	cmp	r3, #0
 8017104:	da01      	bge.n	801710a <div+0x16>
 8017106:	3401      	adds	r4, #1
 8017108:	1a9b      	subs	r3, r3, r2
 801710a:	e9c0 4300 	strd	r4, r3, [r0]
 801710e:	bd10      	pop	{r4, pc}
 8017110:	2b00      	cmp	r3, #0
 8017112:	bfc4      	itt	gt
 8017114:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8017118:	189b      	addgt	r3, r3, r2
 801711a:	e7f6      	b.n	801710a <div+0x16>

0801711c <quorem>:
 801711c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017120:	6903      	ldr	r3, [r0, #16]
 8017122:	690c      	ldr	r4, [r1, #16]
 8017124:	42a3      	cmp	r3, r4
 8017126:	4607      	mov	r7, r0
 8017128:	f2c0 8081 	blt.w	801722e <quorem+0x112>
 801712c:	3c01      	subs	r4, #1
 801712e:	f101 0814 	add.w	r8, r1, #20
 8017132:	f100 0514 	add.w	r5, r0, #20
 8017136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801713a:	9301      	str	r3, [sp, #4]
 801713c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017144:	3301      	adds	r3, #1
 8017146:	429a      	cmp	r2, r3
 8017148:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801714c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017150:	fbb2 f6f3 	udiv	r6, r2, r3
 8017154:	d331      	bcc.n	80171ba <quorem+0x9e>
 8017156:	f04f 0e00 	mov.w	lr, #0
 801715a:	4640      	mov	r0, r8
 801715c:	46ac      	mov	ip, r5
 801715e:	46f2      	mov	sl, lr
 8017160:	f850 2b04 	ldr.w	r2, [r0], #4
 8017164:	b293      	uxth	r3, r2
 8017166:	fb06 e303 	mla	r3, r6, r3, lr
 801716a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801716e:	b29b      	uxth	r3, r3
 8017170:	ebaa 0303 	sub.w	r3, sl, r3
 8017174:	0c12      	lsrs	r2, r2, #16
 8017176:	f8dc a000 	ldr.w	sl, [ip]
 801717a:	fb06 e202 	mla	r2, r6, r2, lr
 801717e:	fa13 f38a 	uxtah	r3, r3, sl
 8017182:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017186:	fa1f fa82 	uxth.w	sl, r2
 801718a:	f8dc 2000 	ldr.w	r2, [ip]
 801718e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017192:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017196:	b29b      	uxth	r3, r3
 8017198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801719c:	4581      	cmp	r9, r0
 801719e:	f84c 3b04 	str.w	r3, [ip], #4
 80171a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80171a6:	d2db      	bcs.n	8017160 <quorem+0x44>
 80171a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80171ac:	b92b      	cbnz	r3, 80171ba <quorem+0x9e>
 80171ae:	9b01      	ldr	r3, [sp, #4]
 80171b0:	3b04      	subs	r3, #4
 80171b2:	429d      	cmp	r5, r3
 80171b4:	461a      	mov	r2, r3
 80171b6:	d32e      	bcc.n	8017216 <quorem+0xfa>
 80171b8:	613c      	str	r4, [r7, #16]
 80171ba:	4638      	mov	r0, r7
 80171bc:	f001 fdca 	bl	8018d54 <__mcmp>
 80171c0:	2800      	cmp	r0, #0
 80171c2:	db24      	blt.n	801720e <quorem+0xf2>
 80171c4:	3601      	adds	r6, #1
 80171c6:	4628      	mov	r0, r5
 80171c8:	f04f 0c00 	mov.w	ip, #0
 80171cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80171d0:	f8d0 e000 	ldr.w	lr, [r0]
 80171d4:	b293      	uxth	r3, r2
 80171d6:	ebac 0303 	sub.w	r3, ip, r3
 80171da:	0c12      	lsrs	r2, r2, #16
 80171dc:	fa13 f38e 	uxtah	r3, r3, lr
 80171e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80171e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80171e8:	b29b      	uxth	r3, r3
 80171ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80171ee:	45c1      	cmp	r9, r8
 80171f0:	f840 3b04 	str.w	r3, [r0], #4
 80171f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80171f8:	d2e8      	bcs.n	80171cc <quorem+0xb0>
 80171fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80171fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017202:	b922      	cbnz	r2, 801720e <quorem+0xf2>
 8017204:	3b04      	subs	r3, #4
 8017206:	429d      	cmp	r5, r3
 8017208:	461a      	mov	r2, r3
 801720a:	d30a      	bcc.n	8017222 <quorem+0x106>
 801720c:	613c      	str	r4, [r7, #16]
 801720e:	4630      	mov	r0, r6
 8017210:	b003      	add	sp, #12
 8017212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017216:	6812      	ldr	r2, [r2, #0]
 8017218:	3b04      	subs	r3, #4
 801721a:	2a00      	cmp	r2, #0
 801721c:	d1cc      	bne.n	80171b8 <quorem+0x9c>
 801721e:	3c01      	subs	r4, #1
 8017220:	e7c7      	b.n	80171b2 <quorem+0x96>
 8017222:	6812      	ldr	r2, [r2, #0]
 8017224:	3b04      	subs	r3, #4
 8017226:	2a00      	cmp	r2, #0
 8017228:	d1f0      	bne.n	801720c <quorem+0xf0>
 801722a:	3c01      	subs	r4, #1
 801722c:	e7eb      	b.n	8017206 <quorem+0xea>
 801722e:	2000      	movs	r0, #0
 8017230:	e7ee      	b.n	8017210 <quorem+0xf4>
 8017232:	0000      	movs	r0, r0
 8017234:	0000      	movs	r0, r0
	...

08017238 <_dtoa_r>:
 8017238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801723c:	ed2d 8b02 	vpush	{d8}
 8017240:	b095      	sub	sp, #84	; 0x54
 8017242:	ec57 6b10 	vmov	r6, r7, d0
 8017246:	9105      	str	r1, [sp, #20]
 8017248:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801724a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801724c:	9209      	str	r2, [sp, #36]	; 0x24
 801724e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017252:	4604      	mov	r4, r0
 8017254:	930f      	str	r3, [sp, #60]	; 0x3c
 8017256:	b141      	cbz	r1, 801726a <_dtoa_r+0x32>
 8017258:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801725a:	604a      	str	r2, [r1, #4]
 801725c:	2301      	movs	r3, #1
 801725e:	4093      	lsls	r3, r2
 8017260:	608b      	str	r3, [r1, #8]
 8017262:	f001 fb6c 	bl	801893e <_Bfree>
 8017266:	2300      	movs	r3, #0
 8017268:	6423      	str	r3, [r4, #64]	; 0x40
 801726a:	1e3b      	subs	r3, r7, #0
 801726c:	bfb9      	ittee	lt
 801726e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017272:	9303      	strlt	r3, [sp, #12]
 8017274:	2300      	movge	r3, #0
 8017276:	602b      	strge	r3, [r5, #0]
 8017278:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801727c:	4ba2      	ldr	r3, [pc, #648]	; (8017508 <_dtoa_r+0x2d0>)
 801727e:	bfbc      	itt	lt
 8017280:	2201      	movlt	r2, #1
 8017282:	602a      	strlt	r2, [r5, #0]
 8017284:	ea33 0309 	bics.w	r3, r3, r9
 8017288:	d11b      	bne.n	80172c2 <_dtoa_r+0x8a>
 801728a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801728c:	f242 730f 	movw	r3, #9999	; 0x270f
 8017290:	6013      	str	r3, [r2, #0]
 8017292:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017296:	4333      	orrs	r3, r6
 8017298:	f000 8578 	beq.w	8017d8c <_dtoa_r+0xb54>
 801729c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801729e:	b90b      	cbnz	r3, 80172a4 <_dtoa_r+0x6c>
 80172a0:	4b9a      	ldr	r3, [pc, #616]	; (801750c <_dtoa_r+0x2d4>)
 80172a2:	e024      	b.n	80172ee <_dtoa_r+0xb6>
 80172a4:	4b99      	ldr	r3, [pc, #612]	; (801750c <_dtoa_r+0x2d4>)
 80172a6:	9300      	str	r3, [sp, #0]
 80172a8:	3303      	adds	r3, #3
 80172aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80172ac:	6013      	str	r3, [r2, #0]
 80172ae:	9800      	ldr	r0, [sp, #0]
 80172b0:	b015      	add	sp, #84	; 0x54
 80172b2:	ecbd 8b02 	vpop	{d8}
 80172b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ba:	4b95      	ldr	r3, [pc, #596]	; (8017510 <_dtoa_r+0x2d8>)
 80172bc:	9300      	str	r3, [sp, #0]
 80172be:	3308      	adds	r3, #8
 80172c0:	e7f3      	b.n	80172aa <_dtoa_r+0x72>
 80172c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80172c6:	2200      	movs	r2, #0
 80172c8:	ec51 0b17 	vmov	r0, r1, d7
 80172cc:	2300      	movs	r3, #0
 80172ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80172d2:	f7e9 fc23 	bl	8000b1c <__aeabi_dcmpeq>
 80172d6:	4680      	mov	r8, r0
 80172d8:	b158      	cbz	r0, 80172f2 <_dtoa_r+0xba>
 80172da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80172dc:	2301      	movs	r3, #1
 80172de:	6013      	str	r3, [r2, #0]
 80172e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	f000 854f 	beq.w	8017d86 <_dtoa_r+0xb4e>
 80172e8:	488a      	ldr	r0, [pc, #552]	; (8017514 <_dtoa_r+0x2dc>)
 80172ea:	6018      	str	r0, [r3, #0]
 80172ec:	1e43      	subs	r3, r0, #1
 80172ee:	9300      	str	r3, [sp, #0]
 80172f0:	e7dd      	b.n	80172ae <_dtoa_r+0x76>
 80172f2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80172f6:	aa12      	add	r2, sp, #72	; 0x48
 80172f8:	a913      	add	r1, sp, #76	; 0x4c
 80172fa:	4620      	mov	r0, r4
 80172fc:	f001 fdce 	bl	8018e9c <__d2b>
 8017300:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017304:	4683      	mov	fp, r0
 8017306:	2d00      	cmp	r5, #0
 8017308:	d07c      	beq.n	8017404 <_dtoa_r+0x1cc>
 801730a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801730c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017314:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017318:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801731c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017320:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017324:	4b7c      	ldr	r3, [pc, #496]	; (8017518 <_dtoa_r+0x2e0>)
 8017326:	2200      	movs	r2, #0
 8017328:	4630      	mov	r0, r6
 801732a:	4639      	mov	r1, r7
 801732c:	f7e8 ffd6 	bl	80002dc <__aeabi_dsub>
 8017330:	a36f      	add	r3, pc, #444	; (adr r3, 80174f0 <_dtoa_r+0x2b8>)
 8017332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017336:	f7e9 f989 	bl	800064c <__aeabi_dmul>
 801733a:	a36f      	add	r3, pc, #444	; (adr r3, 80174f8 <_dtoa_r+0x2c0>)
 801733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017340:	f7e8 ffce 	bl	80002e0 <__adddf3>
 8017344:	4606      	mov	r6, r0
 8017346:	4628      	mov	r0, r5
 8017348:	460f      	mov	r7, r1
 801734a:	f7e9 f915 	bl	8000578 <__aeabi_i2d>
 801734e:	a36c      	add	r3, pc, #432	; (adr r3, 8017500 <_dtoa_r+0x2c8>)
 8017350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017354:	f7e9 f97a 	bl	800064c <__aeabi_dmul>
 8017358:	4602      	mov	r2, r0
 801735a:	460b      	mov	r3, r1
 801735c:	4630      	mov	r0, r6
 801735e:	4639      	mov	r1, r7
 8017360:	f7e8 ffbe 	bl	80002e0 <__adddf3>
 8017364:	4606      	mov	r6, r0
 8017366:	460f      	mov	r7, r1
 8017368:	f7e9 fc20 	bl	8000bac <__aeabi_d2iz>
 801736c:	2200      	movs	r2, #0
 801736e:	4682      	mov	sl, r0
 8017370:	2300      	movs	r3, #0
 8017372:	4630      	mov	r0, r6
 8017374:	4639      	mov	r1, r7
 8017376:	f7e9 fbdb 	bl	8000b30 <__aeabi_dcmplt>
 801737a:	b148      	cbz	r0, 8017390 <_dtoa_r+0x158>
 801737c:	4650      	mov	r0, sl
 801737e:	f7e9 f8fb 	bl	8000578 <__aeabi_i2d>
 8017382:	4632      	mov	r2, r6
 8017384:	463b      	mov	r3, r7
 8017386:	f7e9 fbc9 	bl	8000b1c <__aeabi_dcmpeq>
 801738a:	b908      	cbnz	r0, 8017390 <_dtoa_r+0x158>
 801738c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017390:	f1ba 0f16 	cmp.w	sl, #22
 8017394:	d854      	bhi.n	8017440 <_dtoa_r+0x208>
 8017396:	4b61      	ldr	r3, [pc, #388]	; (801751c <_dtoa_r+0x2e4>)
 8017398:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80173a4:	f7e9 fbc4 	bl	8000b30 <__aeabi_dcmplt>
 80173a8:	2800      	cmp	r0, #0
 80173aa:	d04b      	beq.n	8017444 <_dtoa_r+0x20c>
 80173ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80173b0:	2300      	movs	r3, #0
 80173b2:	930e      	str	r3, [sp, #56]	; 0x38
 80173b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80173b6:	1b5d      	subs	r5, r3, r5
 80173b8:	1e6b      	subs	r3, r5, #1
 80173ba:	9304      	str	r3, [sp, #16]
 80173bc:	bf43      	ittte	mi
 80173be:	2300      	movmi	r3, #0
 80173c0:	f1c5 0801 	rsbmi	r8, r5, #1
 80173c4:	9304      	strmi	r3, [sp, #16]
 80173c6:	f04f 0800 	movpl.w	r8, #0
 80173ca:	f1ba 0f00 	cmp.w	sl, #0
 80173ce:	db3b      	blt.n	8017448 <_dtoa_r+0x210>
 80173d0:	9b04      	ldr	r3, [sp, #16]
 80173d2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80173d6:	4453      	add	r3, sl
 80173d8:	9304      	str	r3, [sp, #16]
 80173da:	2300      	movs	r3, #0
 80173dc:	9306      	str	r3, [sp, #24]
 80173de:	9b05      	ldr	r3, [sp, #20]
 80173e0:	2b09      	cmp	r3, #9
 80173e2:	d86a      	bhi.n	80174ba <_dtoa_r+0x282>
 80173e4:	2b05      	cmp	r3, #5
 80173e6:	bfc4      	itt	gt
 80173e8:	3b04      	subgt	r3, #4
 80173ea:	9305      	strgt	r3, [sp, #20]
 80173ec:	9b05      	ldr	r3, [sp, #20]
 80173ee:	f1a3 0302 	sub.w	r3, r3, #2
 80173f2:	bfcc      	ite	gt
 80173f4:	2500      	movgt	r5, #0
 80173f6:	2501      	movle	r5, #1
 80173f8:	2b03      	cmp	r3, #3
 80173fa:	d86a      	bhi.n	80174d2 <_dtoa_r+0x29a>
 80173fc:	e8df f003 	tbb	[pc, r3]
 8017400:	5b4d4f2c 	.word	0x5b4d4f2c
 8017404:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8017408:	441d      	add	r5, r3
 801740a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801740e:	2b20      	cmp	r3, #32
 8017410:	bfc1      	itttt	gt
 8017412:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017416:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801741a:	fa09 f303 	lslgt.w	r3, r9, r3
 801741e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017422:	bfda      	itte	le
 8017424:	f1c3 0320 	rsble	r3, r3, #32
 8017428:	fa06 f003 	lslle.w	r0, r6, r3
 801742c:	4318      	orrgt	r0, r3
 801742e:	f7e9 f893 	bl	8000558 <__aeabi_ui2d>
 8017432:	2301      	movs	r3, #1
 8017434:	4606      	mov	r6, r0
 8017436:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801743a:	3d01      	subs	r5, #1
 801743c:	9310      	str	r3, [sp, #64]	; 0x40
 801743e:	e771      	b.n	8017324 <_dtoa_r+0xec>
 8017440:	2301      	movs	r3, #1
 8017442:	e7b6      	b.n	80173b2 <_dtoa_r+0x17a>
 8017444:	900e      	str	r0, [sp, #56]	; 0x38
 8017446:	e7b5      	b.n	80173b4 <_dtoa_r+0x17c>
 8017448:	f1ca 0300 	rsb	r3, sl, #0
 801744c:	9306      	str	r3, [sp, #24]
 801744e:	2300      	movs	r3, #0
 8017450:	eba8 080a 	sub.w	r8, r8, sl
 8017454:	930d      	str	r3, [sp, #52]	; 0x34
 8017456:	e7c2      	b.n	80173de <_dtoa_r+0x1a6>
 8017458:	2300      	movs	r3, #0
 801745a:	9308      	str	r3, [sp, #32]
 801745c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801745e:	2b00      	cmp	r3, #0
 8017460:	dc3a      	bgt.n	80174d8 <_dtoa_r+0x2a0>
 8017462:	f04f 0901 	mov.w	r9, #1
 8017466:	f8cd 9004 	str.w	r9, [sp, #4]
 801746a:	464b      	mov	r3, r9
 801746c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017470:	2200      	movs	r2, #0
 8017472:	6462      	str	r2, [r4, #68]	; 0x44
 8017474:	2204      	movs	r2, #4
 8017476:	f102 0014 	add.w	r0, r2, #20
 801747a:	4298      	cmp	r0, r3
 801747c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801747e:	d931      	bls.n	80174e4 <_dtoa_r+0x2ac>
 8017480:	4620      	mov	r0, r4
 8017482:	f001 fa37 	bl	80188f4 <_Balloc>
 8017486:	9000      	str	r0, [sp, #0]
 8017488:	2800      	cmp	r0, #0
 801748a:	d14d      	bne.n	8017528 <_dtoa_r+0x2f0>
 801748c:	4b24      	ldr	r3, [pc, #144]	; (8017520 <_dtoa_r+0x2e8>)
 801748e:	4602      	mov	r2, r0
 8017490:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017494:	4823      	ldr	r0, [pc, #140]	; (8017524 <_dtoa_r+0x2ec>)
 8017496:	f003 fc83 	bl	801ada0 <__assert_func>
 801749a:	2301      	movs	r3, #1
 801749c:	e7dd      	b.n	801745a <_dtoa_r+0x222>
 801749e:	2300      	movs	r3, #0
 80174a0:	9308      	str	r3, [sp, #32]
 80174a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174a4:	eb0a 0903 	add.w	r9, sl, r3
 80174a8:	f109 0301 	add.w	r3, r9, #1
 80174ac:	2b01      	cmp	r3, #1
 80174ae:	9301      	str	r3, [sp, #4]
 80174b0:	bfb8      	it	lt
 80174b2:	2301      	movlt	r3, #1
 80174b4:	e7dc      	b.n	8017470 <_dtoa_r+0x238>
 80174b6:	2301      	movs	r3, #1
 80174b8:	e7f2      	b.n	80174a0 <_dtoa_r+0x268>
 80174ba:	2501      	movs	r5, #1
 80174bc:	2300      	movs	r3, #0
 80174be:	9305      	str	r3, [sp, #20]
 80174c0:	9508      	str	r5, [sp, #32]
 80174c2:	f04f 39ff 	mov.w	r9, #4294967295
 80174c6:	2200      	movs	r2, #0
 80174c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80174cc:	2312      	movs	r3, #18
 80174ce:	9209      	str	r2, [sp, #36]	; 0x24
 80174d0:	e7ce      	b.n	8017470 <_dtoa_r+0x238>
 80174d2:	2301      	movs	r3, #1
 80174d4:	9308      	str	r3, [sp, #32]
 80174d6:	e7f4      	b.n	80174c2 <_dtoa_r+0x28a>
 80174d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80174dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80174e0:	464b      	mov	r3, r9
 80174e2:	e7c5      	b.n	8017470 <_dtoa_r+0x238>
 80174e4:	3101      	adds	r1, #1
 80174e6:	6461      	str	r1, [r4, #68]	; 0x44
 80174e8:	0052      	lsls	r2, r2, #1
 80174ea:	e7c4      	b.n	8017476 <_dtoa_r+0x23e>
 80174ec:	f3af 8000 	nop.w
 80174f0:	636f4361 	.word	0x636f4361
 80174f4:	3fd287a7 	.word	0x3fd287a7
 80174f8:	8b60c8b3 	.word	0x8b60c8b3
 80174fc:	3fc68a28 	.word	0x3fc68a28
 8017500:	509f79fb 	.word	0x509f79fb
 8017504:	3fd34413 	.word	0x3fd34413
 8017508:	7ff00000 	.word	0x7ff00000
 801750c:	0801fa40 	.word	0x0801fa40
 8017510:	0801fa44 	.word	0x0801fa44
 8017514:	0801fa1f 	.word	0x0801fa1f
 8017518:	3ff80000 	.word	0x3ff80000
 801751c:	0801fba8 	.word	0x0801fba8
 8017520:	0801fa4d 	.word	0x0801fa4d
 8017524:	0801fa5e 	.word	0x0801fa5e
 8017528:	9b00      	ldr	r3, [sp, #0]
 801752a:	6423      	str	r3, [r4, #64]	; 0x40
 801752c:	9b01      	ldr	r3, [sp, #4]
 801752e:	2b0e      	cmp	r3, #14
 8017530:	f200 80ad 	bhi.w	801768e <_dtoa_r+0x456>
 8017534:	2d00      	cmp	r5, #0
 8017536:	f000 80aa 	beq.w	801768e <_dtoa_r+0x456>
 801753a:	f1ba 0f00 	cmp.w	sl, #0
 801753e:	dd36      	ble.n	80175ae <_dtoa_r+0x376>
 8017540:	4ac2      	ldr	r2, [pc, #776]	; (801784c <_dtoa_r+0x614>)
 8017542:	f00a 030f 	and.w	r3, sl, #15
 8017546:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801754a:	ed93 7b00 	vldr	d7, [r3]
 801754e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017552:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017556:	eeb0 8a47 	vmov.f32	s16, s14
 801755a:	eef0 8a67 	vmov.f32	s17, s15
 801755e:	d016      	beq.n	801758e <_dtoa_r+0x356>
 8017560:	4bbb      	ldr	r3, [pc, #748]	; (8017850 <_dtoa_r+0x618>)
 8017562:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017566:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801756a:	f7e9 f999 	bl	80008a0 <__aeabi_ddiv>
 801756e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017572:	f007 070f 	and.w	r7, r7, #15
 8017576:	2503      	movs	r5, #3
 8017578:	4eb5      	ldr	r6, [pc, #724]	; (8017850 <_dtoa_r+0x618>)
 801757a:	b957      	cbnz	r7, 8017592 <_dtoa_r+0x35a>
 801757c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017580:	ec53 2b18 	vmov	r2, r3, d8
 8017584:	f7e9 f98c 	bl	80008a0 <__aeabi_ddiv>
 8017588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801758c:	e029      	b.n	80175e2 <_dtoa_r+0x3aa>
 801758e:	2502      	movs	r5, #2
 8017590:	e7f2      	b.n	8017578 <_dtoa_r+0x340>
 8017592:	07f9      	lsls	r1, r7, #31
 8017594:	d508      	bpl.n	80175a8 <_dtoa_r+0x370>
 8017596:	ec51 0b18 	vmov	r0, r1, d8
 801759a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801759e:	f7e9 f855 	bl	800064c <__aeabi_dmul>
 80175a2:	ec41 0b18 	vmov	d8, r0, r1
 80175a6:	3501      	adds	r5, #1
 80175a8:	107f      	asrs	r7, r7, #1
 80175aa:	3608      	adds	r6, #8
 80175ac:	e7e5      	b.n	801757a <_dtoa_r+0x342>
 80175ae:	f000 80a6 	beq.w	80176fe <_dtoa_r+0x4c6>
 80175b2:	f1ca 0600 	rsb	r6, sl, #0
 80175b6:	4ba5      	ldr	r3, [pc, #660]	; (801784c <_dtoa_r+0x614>)
 80175b8:	4fa5      	ldr	r7, [pc, #660]	; (8017850 <_dtoa_r+0x618>)
 80175ba:	f006 020f 	and.w	r2, r6, #15
 80175be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80175c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80175ca:	f7e9 f83f 	bl	800064c <__aeabi_dmul>
 80175ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175d2:	1136      	asrs	r6, r6, #4
 80175d4:	2300      	movs	r3, #0
 80175d6:	2502      	movs	r5, #2
 80175d8:	2e00      	cmp	r6, #0
 80175da:	f040 8085 	bne.w	80176e8 <_dtoa_r+0x4b0>
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d1d2      	bne.n	8017588 <_dtoa_r+0x350>
 80175e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	f000 808c 	beq.w	8017702 <_dtoa_r+0x4ca>
 80175ea:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80175ee:	4b99      	ldr	r3, [pc, #612]	; (8017854 <_dtoa_r+0x61c>)
 80175f0:	2200      	movs	r2, #0
 80175f2:	4630      	mov	r0, r6
 80175f4:	4639      	mov	r1, r7
 80175f6:	f7e9 fa9b 	bl	8000b30 <__aeabi_dcmplt>
 80175fa:	2800      	cmp	r0, #0
 80175fc:	f000 8081 	beq.w	8017702 <_dtoa_r+0x4ca>
 8017600:	9b01      	ldr	r3, [sp, #4]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d07d      	beq.n	8017702 <_dtoa_r+0x4ca>
 8017606:	f1b9 0f00 	cmp.w	r9, #0
 801760a:	dd3c      	ble.n	8017686 <_dtoa_r+0x44e>
 801760c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017610:	9307      	str	r3, [sp, #28]
 8017612:	2200      	movs	r2, #0
 8017614:	4b90      	ldr	r3, [pc, #576]	; (8017858 <_dtoa_r+0x620>)
 8017616:	4630      	mov	r0, r6
 8017618:	4639      	mov	r1, r7
 801761a:	f7e9 f817 	bl	800064c <__aeabi_dmul>
 801761e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017622:	3501      	adds	r5, #1
 8017624:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017628:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801762c:	4628      	mov	r0, r5
 801762e:	f7e8 ffa3 	bl	8000578 <__aeabi_i2d>
 8017632:	4632      	mov	r2, r6
 8017634:	463b      	mov	r3, r7
 8017636:	f7e9 f809 	bl	800064c <__aeabi_dmul>
 801763a:	4b88      	ldr	r3, [pc, #544]	; (801785c <_dtoa_r+0x624>)
 801763c:	2200      	movs	r2, #0
 801763e:	f7e8 fe4f 	bl	80002e0 <__adddf3>
 8017642:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801764a:	9303      	str	r3, [sp, #12]
 801764c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801764e:	2b00      	cmp	r3, #0
 8017650:	d15c      	bne.n	801770c <_dtoa_r+0x4d4>
 8017652:	4b83      	ldr	r3, [pc, #524]	; (8017860 <_dtoa_r+0x628>)
 8017654:	2200      	movs	r2, #0
 8017656:	4630      	mov	r0, r6
 8017658:	4639      	mov	r1, r7
 801765a:	f7e8 fe3f 	bl	80002dc <__aeabi_dsub>
 801765e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017662:	4606      	mov	r6, r0
 8017664:	460f      	mov	r7, r1
 8017666:	f7e9 fa81 	bl	8000b6c <__aeabi_dcmpgt>
 801766a:	2800      	cmp	r0, #0
 801766c:	f040 8295 	bne.w	8017b9a <_dtoa_r+0x962>
 8017670:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017674:	4630      	mov	r0, r6
 8017676:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801767a:	4639      	mov	r1, r7
 801767c:	f7e9 fa58 	bl	8000b30 <__aeabi_dcmplt>
 8017680:	2800      	cmp	r0, #0
 8017682:	f040 8287 	bne.w	8017b94 <_dtoa_r+0x95c>
 8017686:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801768a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801768e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017690:	2b00      	cmp	r3, #0
 8017692:	f2c0 8157 	blt.w	8017944 <_dtoa_r+0x70c>
 8017696:	f1ba 0f0e 	cmp.w	sl, #14
 801769a:	f300 8153 	bgt.w	8017944 <_dtoa_r+0x70c>
 801769e:	4b6b      	ldr	r3, [pc, #428]	; (801784c <_dtoa_r+0x614>)
 80176a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80176a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80176a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	f280 80e2 	bge.w	8017874 <_dtoa_r+0x63c>
 80176b0:	9b01      	ldr	r3, [sp, #4]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	f300 80de 	bgt.w	8017874 <_dtoa_r+0x63c>
 80176b8:	f040 826c 	bne.w	8017b94 <_dtoa_r+0x95c>
 80176bc:	4b68      	ldr	r3, [pc, #416]	; (8017860 <_dtoa_r+0x628>)
 80176be:	2200      	movs	r2, #0
 80176c0:	4640      	mov	r0, r8
 80176c2:	4649      	mov	r1, r9
 80176c4:	f7e8 ffc2 	bl	800064c <__aeabi_dmul>
 80176c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80176cc:	f7e9 fa44 	bl	8000b58 <__aeabi_dcmpge>
 80176d0:	9e01      	ldr	r6, [sp, #4]
 80176d2:	4637      	mov	r7, r6
 80176d4:	2800      	cmp	r0, #0
 80176d6:	f040 8242 	bne.w	8017b5e <_dtoa_r+0x926>
 80176da:	9d00      	ldr	r5, [sp, #0]
 80176dc:	2331      	movs	r3, #49	; 0x31
 80176de:	f805 3b01 	strb.w	r3, [r5], #1
 80176e2:	f10a 0a01 	add.w	sl, sl, #1
 80176e6:	e23e      	b.n	8017b66 <_dtoa_r+0x92e>
 80176e8:	07f2      	lsls	r2, r6, #31
 80176ea:	d505      	bpl.n	80176f8 <_dtoa_r+0x4c0>
 80176ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80176f0:	f7e8 ffac 	bl	800064c <__aeabi_dmul>
 80176f4:	3501      	adds	r5, #1
 80176f6:	2301      	movs	r3, #1
 80176f8:	1076      	asrs	r6, r6, #1
 80176fa:	3708      	adds	r7, #8
 80176fc:	e76c      	b.n	80175d8 <_dtoa_r+0x3a0>
 80176fe:	2502      	movs	r5, #2
 8017700:	e76f      	b.n	80175e2 <_dtoa_r+0x3aa>
 8017702:	9b01      	ldr	r3, [sp, #4]
 8017704:	f8cd a01c 	str.w	sl, [sp, #28]
 8017708:	930c      	str	r3, [sp, #48]	; 0x30
 801770a:	e78d      	b.n	8017628 <_dtoa_r+0x3f0>
 801770c:	9900      	ldr	r1, [sp, #0]
 801770e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017712:	4b4e      	ldr	r3, [pc, #312]	; (801784c <_dtoa_r+0x614>)
 8017714:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017718:	4401      	add	r1, r0
 801771a:	9102      	str	r1, [sp, #8]
 801771c:	9908      	ldr	r1, [sp, #32]
 801771e:	eeb0 8a47 	vmov.f32	s16, s14
 8017722:	eef0 8a67 	vmov.f32	s17, s15
 8017726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801772a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801772e:	2900      	cmp	r1, #0
 8017730:	d045      	beq.n	80177be <_dtoa_r+0x586>
 8017732:	494c      	ldr	r1, [pc, #304]	; (8017864 <_dtoa_r+0x62c>)
 8017734:	2000      	movs	r0, #0
 8017736:	f7e9 f8b3 	bl	80008a0 <__aeabi_ddiv>
 801773a:	ec53 2b18 	vmov	r2, r3, d8
 801773e:	f7e8 fdcd 	bl	80002dc <__aeabi_dsub>
 8017742:	9d00      	ldr	r5, [sp, #0]
 8017744:	ec41 0b18 	vmov	d8, r0, r1
 8017748:	4639      	mov	r1, r7
 801774a:	4630      	mov	r0, r6
 801774c:	f7e9 fa2e 	bl	8000bac <__aeabi_d2iz>
 8017750:	900c      	str	r0, [sp, #48]	; 0x30
 8017752:	f7e8 ff11 	bl	8000578 <__aeabi_i2d>
 8017756:	4602      	mov	r2, r0
 8017758:	460b      	mov	r3, r1
 801775a:	4630      	mov	r0, r6
 801775c:	4639      	mov	r1, r7
 801775e:	f7e8 fdbd 	bl	80002dc <__aeabi_dsub>
 8017762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017764:	3330      	adds	r3, #48	; 0x30
 8017766:	f805 3b01 	strb.w	r3, [r5], #1
 801776a:	ec53 2b18 	vmov	r2, r3, d8
 801776e:	4606      	mov	r6, r0
 8017770:	460f      	mov	r7, r1
 8017772:	f7e9 f9dd 	bl	8000b30 <__aeabi_dcmplt>
 8017776:	2800      	cmp	r0, #0
 8017778:	d165      	bne.n	8017846 <_dtoa_r+0x60e>
 801777a:	4632      	mov	r2, r6
 801777c:	463b      	mov	r3, r7
 801777e:	4935      	ldr	r1, [pc, #212]	; (8017854 <_dtoa_r+0x61c>)
 8017780:	2000      	movs	r0, #0
 8017782:	f7e8 fdab 	bl	80002dc <__aeabi_dsub>
 8017786:	ec53 2b18 	vmov	r2, r3, d8
 801778a:	f7e9 f9d1 	bl	8000b30 <__aeabi_dcmplt>
 801778e:	2800      	cmp	r0, #0
 8017790:	f040 80b8 	bne.w	8017904 <_dtoa_r+0x6cc>
 8017794:	9b02      	ldr	r3, [sp, #8]
 8017796:	429d      	cmp	r5, r3
 8017798:	f43f af75 	beq.w	8017686 <_dtoa_r+0x44e>
 801779c:	4b2e      	ldr	r3, [pc, #184]	; (8017858 <_dtoa_r+0x620>)
 801779e:	ec51 0b18 	vmov	r0, r1, d8
 80177a2:	2200      	movs	r2, #0
 80177a4:	f7e8 ff52 	bl	800064c <__aeabi_dmul>
 80177a8:	4b2b      	ldr	r3, [pc, #172]	; (8017858 <_dtoa_r+0x620>)
 80177aa:	ec41 0b18 	vmov	d8, r0, r1
 80177ae:	2200      	movs	r2, #0
 80177b0:	4630      	mov	r0, r6
 80177b2:	4639      	mov	r1, r7
 80177b4:	f7e8 ff4a 	bl	800064c <__aeabi_dmul>
 80177b8:	4606      	mov	r6, r0
 80177ba:	460f      	mov	r7, r1
 80177bc:	e7c4      	b.n	8017748 <_dtoa_r+0x510>
 80177be:	ec51 0b17 	vmov	r0, r1, d7
 80177c2:	f7e8 ff43 	bl	800064c <__aeabi_dmul>
 80177c6:	9b02      	ldr	r3, [sp, #8]
 80177c8:	9d00      	ldr	r5, [sp, #0]
 80177ca:	930c      	str	r3, [sp, #48]	; 0x30
 80177cc:	ec41 0b18 	vmov	d8, r0, r1
 80177d0:	4639      	mov	r1, r7
 80177d2:	4630      	mov	r0, r6
 80177d4:	f7e9 f9ea 	bl	8000bac <__aeabi_d2iz>
 80177d8:	9011      	str	r0, [sp, #68]	; 0x44
 80177da:	f7e8 fecd 	bl	8000578 <__aeabi_i2d>
 80177de:	4602      	mov	r2, r0
 80177e0:	460b      	mov	r3, r1
 80177e2:	4630      	mov	r0, r6
 80177e4:	4639      	mov	r1, r7
 80177e6:	f7e8 fd79 	bl	80002dc <__aeabi_dsub>
 80177ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80177ec:	3330      	adds	r3, #48	; 0x30
 80177ee:	f805 3b01 	strb.w	r3, [r5], #1
 80177f2:	9b02      	ldr	r3, [sp, #8]
 80177f4:	429d      	cmp	r5, r3
 80177f6:	4606      	mov	r6, r0
 80177f8:	460f      	mov	r7, r1
 80177fa:	f04f 0200 	mov.w	r2, #0
 80177fe:	d133      	bne.n	8017868 <_dtoa_r+0x630>
 8017800:	4b18      	ldr	r3, [pc, #96]	; (8017864 <_dtoa_r+0x62c>)
 8017802:	ec51 0b18 	vmov	r0, r1, d8
 8017806:	f7e8 fd6b 	bl	80002e0 <__adddf3>
 801780a:	4602      	mov	r2, r0
 801780c:	460b      	mov	r3, r1
 801780e:	4630      	mov	r0, r6
 8017810:	4639      	mov	r1, r7
 8017812:	f7e9 f9ab 	bl	8000b6c <__aeabi_dcmpgt>
 8017816:	2800      	cmp	r0, #0
 8017818:	d174      	bne.n	8017904 <_dtoa_r+0x6cc>
 801781a:	ec53 2b18 	vmov	r2, r3, d8
 801781e:	4911      	ldr	r1, [pc, #68]	; (8017864 <_dtoa_r+0x62c>)
 8017820:	2000      	movs	r0, #0
 8017822:	f7e8 fd5b 	bl	80002dc <__aeabi_dsub>
 8017826:	4602      	mov	r2, r0
 8017828:	460b      	mov	r3, r1
 801782a:	4630      	mov	r0, r6
 801782c:	4639      	mov	r1, r7
 801782e:	f7e9 f97f 	bl	8000b30 <__aeabi_dcmplt>
 8017832:	2800      	cmp	r0, #0
 8017834:	f43f af27 	beq.w	8017686 <_dtoa_r+0x44e>
 8017838:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801783a:	1e6b      	subs	r3, r5, #1
 801783c:	930c      	str	r3, [sp, #48]	; 0x30
 801783e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017842:	2b30      	cmp	r3, #48	; 0x30
 8017844:	d0f8      	beq.n	8017838 <_dtoa_r+0x600>
 8017846:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801784a:	e049      	b.n	80178e0 <_dtoa_r+0x6a8>
 801784c:	0801fba8 	.word	0x0801fba8
 8017850:	0801fb80 	.word	0x0801fb80
 8017854:	3ff00000 	.word	0x3ff00000
 8017858:	40240000 	.word	0x40240000
 801785c:	401c0000 	.word	0x401c0000
 8017860:	40140000 	.word	0x40140000
 8017864:	3fe00000 	.word	0x3fe00000
 8017868:	4baf      	ldr	r3, [pc, #700]	; (8017b28 <_dtoa_r+0x8f0>)
 801786a:	f7e8 feef 	bl	800064c <__aeabi_dmul>
 801786e:	4606      	mov	r6, r0
 8017870:	460f      	mov	r7, r1
 8017872:	e7ad      	b.n	80177d0 <_dtoa_r+0x598>
 8017874:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017878:	9d00      	ldr	r5, [sp, #0]
 801787a:	4642      	mov	r2, r8
 801787c:	464b      	mov	r3, r9
 801787e:	4630      	mov	r0, r6
 8017880:	4639      	mov	r1, r7
 8017882:	f7e9 f80d 	bl	80008a0 <__aeabi_ddiv>
 8017886:	f7e9 f991 	bl	8000bac <__aeabi_d2iz>
 801788a:	9002      	str	r0, [sp, #8]
 801788c:	f7e8 fe74 	bl	8000578 <__aeabi_i2d>
 8017890:	4642      	mov	r2, r8
 8017892:	464b      	mov	r3, r9
 8017894:	f7e8 feda 	bl	800064c <__aeabi_dmul>
 8017898:	4602      	mov	r2, r0
 801789a:	460b      	mov	r3, r1
 801789c:	4630      	mov	r0, r6
 801789e:	4639      	mov	r1, r7
 80178a0:	f7e8 fd1c 	bl	80002dc <__aeabi_dsub>
 80178a4:	9e02      	ldr	r6, [sp, #8]
 80178a6:	9f01      	ldr	r7, [sp, #4]
 80178a8:	3630      	adds	r6, #48	; 0x30
 80178aa:	f805 6b01 	strb.w	r6, [r5], #1
 80178ae:	9e00      	ldr	r6, [sp, #0]
 80178b0:	1bae      	subs	r6, r5, r6
 80178b2:	42b7      	cmp	r7, r6
 80178b4:	4602      	mov	r2, r0
 80178b6:	460b      	mov	r3, r1
 80178b8:	d137      	bne.n	801792a <_dtoa_r+0x6f2>
 80178ba:	f7e8 fd11 	bl	80002e0 <__adddf3>
 80178be:	4642      	mov	r2, r8
 80178c0:	464b      	mov	r3, r9
 80178c2:	4606      	mov	r6, r0
 80178c4:	460f      	mov	r7, r1
 80178c6:	f7e9 f951 	bl	8000b6c <__aeabi_dcmpgt>
 80178ca:	b9c8      	cbnz	r0, 8017900 <_dtoa_r+0x6c8>
 80178cc:	4642      	mov	r2, r8
 80178ce:	464b      	mov	r3, r9
 80178d0:	4630      	mov	r0, r6
 80178d2:	4639      	mov	r1, r7
 80178d4:	f7e9 f922 	bl	8000b1c <__aeabi_dcmpeq>
 80178d8:	b110      	cbz	r0, 80178e0 <_dtoa_r+0x6a8>
 80178da:	9b02      	ldr	r3, [sp, #8]
 80178dc:	07d9      	lsls	r1, r3, #31
 80178de:	d40f      	bmi.n	8017900 <_dtoa_r+0x6c8>
 80178e0:	4620      	mov	r0, r4
 80178e2:	4659      	mov	r1, fp
 80178e4:	f001 f82b 	bl	801893e <_Bfree>
 80178e8:	2300      	movs	r3, #0
 80178ea:	702b      	strb	r3, [r5, #0]
 80178ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178ee:	f10a 0001 	add.w	r0, sl, #1
 80178f2:	6018      	str	r0, [r3, #0]
 80178f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	f43f acd9 	beq.w	80172ae <_dtoa_r+0x76>
 80178fc:	601d      	str	r5, [r3, #0]
 80178fe:	e4d6      	b.n	80172ae <_dtoa_r+0x76>
 8017900:	f8cd a01c 	str.w	sl, [sp, #28]
 8017904:	462b      	mov	r3, r5
 8017906:	461d      	mov	r5, r3
 8017908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801790c:	2a39      	cmp	r2, #57	; 0x39
 801790e:	d108      	bne.n	8017922 <_dtoa_r+0x6ea>
 8017910:	9a00      	ldr	r2, [sp, #0]
 8017912:	429a      	cmp	r2, r3
 8017914:	d1f7      	bne.n	8017906 <_dtoa_r+0x6ce>
 8017916:	9a07      	ldr	r2, [sp, #28]
 8017918:	9900      	ldr	r1, [sp, #0]
 801791a:	3201      	adds	r2, #1
 801791c:	9207      	str	r2, [sp, #28]
 801791e:	2230      	movs	r2, #48	; 0x30
 8017920:	700a      	strb	r2, [r1, #0]
 8017922:	781a      	ldrb	r2, [r3, #0]
 8017924:	3201      	adds	r2, #1
 8017926:	701a      	strb	r2, [r3, #0]
 8017928:	e78d      	b.n	8017846 <_dtoa_r+0x60e>
 801792a:	4b7f      	ldr	r3, [pc, #508]	; (8017b28 <_dtoa_r+0x8f0>)
 801792c:	2200      	movs	r2, #0
 801792e:	f7e8 fe8d 	bl	800064c <__aeabi_dmul>
 8017932:	2200      	movs	r2, #0
 8017934:	2300      	movs	r3, #0
 8017936:	4606      	mov	r6, r0
 8017938:	460f      	mov	r7, r1
 801793a:	f7e9 f8ef 	bl	8000b1c <__aeabi_dcmpeq>
 801793e:	2800      	cmp	r0, #0
 8017940:	d09b      	beq.n	801787a <_dtoa_r+0x642>
 8017942:	e7cd      	b.n	80178e0 <_dtoa_r+0x6a8>
 8017944:	9a08      	ldr	r2, [sp, #32]
 8017946:	2a00      	cmp	r2, #0
 8017948:	f000 80c4 	beq.w	8017ad4 <_dtoa_r+0x89c>
 801794c:	9a05      	ldr	r2, [sp, #20]
 801794e:	2a01      	cmp	r2, #1
 8017950:	f300 80a8 	bgt.w	8017aa4 <_dtoa_r+0x86c>
 8017954:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017956:	2a00      	cmp	r2, #0
 8017958:	f000 80a0 	beq.w	8017a9c <_dtoa_r+0x864>
 801795c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017960:	9e06      	ldr	r6, [sp, #24]
 8017962:	4645      	mov	r5, r8
 8017964:	9a04      	ldr	r2, [sp, #16]
 8017966:	2101      	movs	r1, #1
 8017968:	441a      	add	r2, r3
 801796a:	4620      	mov	r0, r4
 801796c:	4498      	add	r8, r3
 801796e:	9204      	str	r2, [sp, #16]
 8017970:	f001 f888 	bl	8018a84 <__i2b>
 8017974:	4607      	mov	r7, r0
 8017976:	2d00      	cmp	r5, #0
 8017978:	dd0b      	ble.n	8017992 <_dtoa_r+0x75a>
 801797a:	9b04      	ldr	r3, [sp, #16]
 801797c:	2b00      	cmp	r3, #0
 801797e:	dd08      	ble.n	8017992 <_dtoa_r+0x75a>
 8017980:	42ab      	cmp	r3, r5
 8017982:	9a04      	ldr	r2, [sp, #16]
 8017984:	bfa8      	it	ge
 8017986:	462b      	movge	r3, r5
 8017988:	eba8 0803 	sub.w	r8, r8, r3
 801798c:	1aed      	subs	r5, r5, r3
 801798e:	1ad3      	subs	r3, r2, r3
 8017990:	9304      	str	r3, [sp, #16]
 8017992:	9b06      	ldr	r3, [sp, #24]
 8017994:	b1fb      	cbz	r3, 80179d6 <_dtoa_r+0x79e>
 8017996:	9b08      	ldr	r3, [sp, #32]
 8017998:	2b00      	cmp	r3, #0
 801799a:	f000 809f 	beq.w	8017adc <_dtoa_r+0x8a4>
 801799e:	2e00      	cmp	r6, #0
 80179a0:	dd11      	ble.n	80179c6 <_dtoa_r+0x78e>
 80179a2:	4639      	mov	r1, r7
 80179a4:	4632      	mov	r2, r6
 80179a6:	4620      	mov	r0, r4
 80179a8:	f001 f928 	bl	8018bfc <__pow5mult>
 80179ac:	465a      	mov	r2, fp
 80179ae:	4601      	mov	r1, r0
 80179b0:	4607      	mov	r7, r0
 80179b2:	4620      	mov	r0, r4
 80179b4:	f001 f87c 	bl	8018ab0 <__multiply>
 80179b8:	4659      	mov	r1, fp
 80179ba:	9007      	str	r0, [sp, #28]
 80179bc:	4620      	mov	r0, r4
 80179be:	f000 ffbe 	bl	801893e <_Bfree>
 80179c2:	9b07      	ldr	r3, [sp, #28]
 80179c4:	469b      	mov	fp, r3
 80179c6:	9b06      	ldr	r3, [sp, #24]
 80179c8:	1b9a      	subs	r2, r3, r6
 80179ca:	d004      	beq.n	80179d6 <_dtoa_r+0x79e>
 80179cc:	4659      	mov	r1, fp
 80179ce:	4620      	mov	r0, r4
 80179d0:	f001 f914 	bl	8018bfc <__pow5mult>
 80179d4:	4683      	mov	fp, r0
 80179d6:	2101      	movs	r1, #1
 80179d8:	4620      	mov	r0, r4
 80179da:	f001 f853 	bl	8018a84 <__i2b>
 80179de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	4606      	mov	r6, r0
 80179e4:	dd7c      	ble.n	8017ae0 <_dtoa_r+0x8a8>
 80179e6:	461a      	mov	r2, r3
 80179e8:	4601      	mov	r1, r0
 80179ea:	4620      	mov	r0, r4
 80179ec:	f001 f906 	bl	8018bfc <__pow5mult>
 80179f0:	9b05      	ldr	r3, [sp, #20]
 80179f2:	2b01      	cmp	r3, #1
 80179f4:	4606      	mov	r6, r0
 80179f6:	dd76      	ble.n	8017ae6 <_dtoa_r+0x8ae>
 80179f8:	2300      	movs	r3, #0
 80179fa:	9306      	str	r3, [sp, #24]
 80179fc:	6933      	ldr	r3, [r6, #16]
 80179fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017a02:	6918      	ldr	r0, [r3, #16]
 8017a04:	f000 ffee 	bl	80189e4 <__hi0bits>
 8017a08:	f1c0 0020 	rsb	r0, r0, #32
 8017a0c:	9b04      	ldr	r3, [sp, #16]
 8017a0e:	4418      	add	r0, r3
 8017a10:	f010 001f 	ands.w	r0, r0, #31
 8017a14:	f000 8086 	beq.w	8017b24 <_dtoa_r+0x8ec>
 8017a18:	f1c0 0320 	rsb	r3, r0, #32
 8017a1c:	2b04      	cmp	r3, #4
 8017a1e:	dd7f      	ble.n	8017b20 <_dtoa_r+0x8e8>
 8017a20:	f1c0 001c 	rsb	r0, r0, #28
 8017a24:	9b04      	ldr	r3, [sp, #16]
 8017a26:	4403      	add	r3, r0
 8017a28:	4480      	add	r8, r0
 8017a2a:	4405      	add	r5, r0
 8017a2c:	9304      	str	r3, [sp, #16]
 8017a2e:	f1b8 0f00 	cmp.w	r8, #0
 8017a32:	dd05      	ble.n	8017a40 <_dtoa_r+0x808>
 8017a34:	4659      	mov	r1, fp
 8017a36:	4642      	mov	r2, r8
 8017a38:	4620      	mov	r0, r4
 8017a3a:	f001 f91f 	bl	8018c7c <__lshift>
 8017a3e:	4683      	mov	fp, r0
 8017a40:	9b04      	ldr	r3, [sp, #16]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	dd05      	ble.n	8017a52 <_dtoa_r+0x81a>
 8017a46:	4631      	mov	r1, r6
 8017a48:	461a      	mov	r2, r3
 8017a4a:	4620      	mov	r0, r4
 8017a4c:	f001 f916 	bl	8018c7c <__lshift>
 8017a50:	4606      	mov	r6, r0
 8017a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d069      	beq.n	8017b2c <_dtoa_r+0x8f4>
 8017a58:	4631      	mov	r1, r6
 8017a5a:	4658      	mov	r0, fp
 8017a5c:	f001 f97a 	bl	8018d54 <__mcmp>
 8017a60:	2800      	cmp	r0, #0
 8017a62:	da63      	bge.n	8017b2c <_dtoa_r+0x8f4>
 8017a64:	2300      	movs	r3, #0
 8017a66:	4659      	mov	r1, fp
 8017a68:	220a      	movs	r2, #10
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	f000 ff70 	bl	8018950 <__multadd>
 8017a70:	9b08      	ldr	r3, [sp, #32]
 8017a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017a76:	4683      	mov	fp, r0
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	f000 818e 	beq.w	8017d9a <_dtoa_r+0xb62>
 8017a7e:	4639      	mov	r1, r7
 8017a80:	2300      	movs	r3, #0
 8017a82:	220a      	movs	r2, #10
 8017a84:	4620      	mov	r0, r4
 8017a86:	f000 ff63 	bl	8018950 <__multadd>
 8017a8a:	f1b9 0f00 	cmp.w	r9, #0
 8017a8e:	4607      	mov	r7, r0
 8017a90:	f300 808e 	bgt.w	8017bb0 <_dtoa_r+0x978>
 8017a94:	9b05      	ldr	r3, [sp, #20]
 8017a96:	2b02      	cmp	r3, #2
 8017a98:	dc50      	bgt.n	8017b3c <_dtoa_r+0x904>
 8017a9a:	e089      	b.n	8017bb0 <_dtoa_r+0x978>
 8017a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017aa2:	e75d      	b.n	8017960 <_dtoa_r+0x728>
 8017aa4:	9b01      	ldr	r3, [sp, #4]
 8017aa6:	1e5e      	subs	r6, r3, #1
 8017aa8:	9b06      	ldr	r3, [sp, #24]
 8017aaa:	42b3      	cmp	r3, r6
 8017aac:	bfbf      	itttt	lt
 8017aae:	9b06      	ldrlt	r3, [sp, #24]
 8017ab0:	9606      	strlt	r6, [sp, #24]
 8017ab2:	1af2      	sublt	r2, r6, r3
 8017ab4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8017ab6:	bfb6      	itet	lt
 8017ab8:	189b      	addlt	r3, r3, r2
 8017aba:	1b9e      	subge	r6, r3, r6
 8017abc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8017abe:	9b01      	ldr	r3, [sp, #4]
 8017ac0:	bfb8      	it	lt
 8017ac2:	2600      	movlt	r6, #0
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	bfb5      	itete	lt
 8017ac8:	eba8 0503 	sublt.w	r5, r8, r3
 8017acc:	9b01      	ldrge	r3, [sp, #4]
 8017ace:	2300      	movlt	r3, #0
 8017ad0:	4645      	movge	r5, r8
 8017ad2:	e747      	b.n	8017964 <_dtoa_r+0x72c>
 8017ad4:	9e06      	ldr	r6, [sp, #24]
 8017ad6:	9f08      	ldr	r7, [sp, #32]
 8017ad8:	4645      	mov	r5, r8
 8017ada:	e74c      	b.n	8017976 <_dtoa_r+0x73e>
 8017adc:	9a06      	ldr	r2, [sp, #24]
 8017ade:	e775      	b.n	80179cc <_dtoa_r+0x794>
 8017ae0:	9b05      	ldr	r3, [sp, #20]
 8017ae2:	2b01      	cmp	r3, #1
 8017ae4:	dc18      	bgt.n	8017b18 <_dtoa_r+0x8e0>
 8017ae6:	9b02      	ldr	r3, [sp, #8]
 8017ae8:	b9b3      	cbnz	r3, 8017b18 <_dtoa_r+0x8e0>
 8017aea:	9b03      	ldr	r3, [sp, #12]
 8017aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017af0:	b9a3      	cbnz	r3, 8017b1c <_dtoa_r+0x8e4>
 8017af2:	9b03      	ldr	r3, [sp, #12]
 8017af4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017af8:	0d1b      	lsrs	r3, r3, #20
 8017afa:	051b      	lsls	r3, r3, #20
 8017afc:	b12b      	cbz	r3, 8017b0a <_dtoa_r+0x8d2>
 8017afe:	9b04      	ldr	r3, [sp, #16]
 8017b00:	3301      	adds	r3, #1
 8017b02:	9304      	str	r3, [sp, #16]
 8017b04:	f108 0801 	add.w	r8, r8, #1
 8017b08:	2301      	movs	r3, #1
 8017b0a:	9306      	str	r3, [sp, #24]
 8017b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	f47f af74 	bne.w	80179fc <_dtoa_r+0x7c4>
 8017b14:	2001      	movs	r0, #1
 8017b16:	e779      	b.n	8017a0c <_dtoa_r+0x7d4>
 8017b18:	2300      	movs	r3, #0
 8017b1a:	e7f6      	b.n	8017b0a <_dtoa_r+0x8d2>
 8017b1c:	9b02      	ldr	r3, [sp, #8]
 8017b1e:	e7f4      	b.n	8017b0a <_dtoa_r+0x8d2>
 8017b20:	d085      	beq.n	8017a2e <_dtoa_r+0x7f6>
 8017b22:	4618      	mov	r0, r3
 8017b24:	301c      	adds	r0, #28
 8017b26:	e77d      	b.n	8017a24 <_dtoa_r+0x7ec>
 8017b28:	40240000 	.word	0x40240000
 8017b2c:	9b01      	ldr	r3, [sp, #4]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	dc38      	bgt.n	8017ba4 <_dtoa_r+0x96c>
 8017b32:	9b05      	ldr	r3, [sp, #20]
 8017b34:	2b02      	cmp	r3, #2
 8017b36:	dd35      	ble.n	8017ba4 <_dtoa_r+0x96c>
 8017b38:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017b3c:	f1b9 0f00 	cmp.w	r9, #0
 8017b40:	d10d      	bne.n	8017b5e <_dtoa_r+0x926>
 8017b42:	4631      	mov	r1, r6
 8017b44:	464b      	mov	r3, r9
 8017b46:	2205      	movs	r2, #5
 8017b48:	4620      	mov	r0, r4
 8017b4a:	f000 ff01 	bl	8018950 <__multadd>
 8017b4e:	4601      	mov	r1, r0
 8017b50:	4606      	mov	r6, r0
 8017b52:	4658      	mov	r0, fp
 8017b54:	f001 f8fe 	bl	8018d54 <__mcmp>
 8017b58:	2800      	cmp	r0, #0
 8017b5a:	f73f adbe 	bgt.w	80176da <_dtoa_r+0x4a2>
 8017b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b60:	9d00      	ldr	r5, [sp, #0]
 8017b62:	ea6f 0a03 	mvn.w	sl, r3
 8017b66:	f04f 0800 	mov.w	r8, #0
 8017b6a:	4631      	mov	r1, r6
 8017b6c:	4620      	mov	r0, r4
 8017b6e:	f000 fee6 	bl	801893e <_Bfree>
 8017b72:	2f00      	cmp	r7, #0
 8017b74:	f43f aeb4 	beq.w	80178e0 <_dtoa_r+0x6a8>
 8017b78:	f1b8 0f00 	cmp.w	r8, #0
 8017b7c:	d005      	beq.n	8017b8a <_dtoa_r+0x952>
 8017b7e:	45b8      	cmp	r8, r7
 8017b80:	d003      	beq.n	8017b8a <_dtoa_r+0x952>
 8017b82:	4641      	mov	r1, r8
 8017b84:	4620      	mov	r0, r4
 8017b86:	f000 feda 	bl	801893e <_Bfree>
 8017b8a:	4639      	mov	r1, r7
 8017b8c:	4620      	mov	r0, r4
 8017b8e:	f000 fed6 	bl	801893e <_Bfree>
 8017b92:	e6a5      	b.n	80178e0 <_dtoa_r+0x6a8>
 8017b94:	2600      	movs	r6, #0
 8017b96:	4637      	mov	r7, r6
 8017b98:	e7e1      	b.n	8017b5e <_dtoa_r+0x926>
 8017b9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017b9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017ba0:	4637      	mov	r7, r6
 8017ba2:	e59a      	b.n	80176da <_dtoa_r+0x4a2>
 8017ba4:	9b08      	ldr	r3, [sp, #32]
 8017ba6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	f000 80fc 	beq.w	8017da8 <_dtoa_r+0xb70>
 8017bb0:	2d00      	cmp	r5, #0
 8017bb2:	dd05      	ble.n	8017bc0 <_dtoa_r+0x988>
 8017bb4:	4639      	mov	r1, r7
 8017bb6:	462a      	mov	r2, r5
 8017bb8:	4620      	mov	r0, r4
 8017bba:	f001 f85f 	bl	8018c7c <__lshift>
 8017bbe:	4607      	mov	r7, r0
 8017bc0:	9b06      	ldr	r3, [sp, #24]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d05b      	beq.n	8017c7e <_dtoa_r+0xa46>
 8017bc6:	6879      	ldr	r1, [r7, #4]
 8017bc8:	4620      	mov	r0, r4
 8017bca:	f000 fe93 	bl	80188f4 <_Balloc>
 8017bce:	4605      	mov	r5, r0
 8017bd0:	b920      	cbnz	r0, 8017bdc <_dtoa_r+0x9a4>
 8017bd2:	4b80      	ldr	r3, [pc, #512]	; (8017dd4 <_dtoa_r+0xb9c>)
 8017bd4:	4602      	mov	r2, r0
 8017bd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017bda:	e45b      	b.n	8017494 <_dtoa_r+0x25c>
 8017bdc:	693a      	ldr	r2, [r7, #16]
 8017bde:	3202      	adds	r2, #2
 8017be0:	0092      	lsls	r2, r2, #2
 8017be2:	f107 010c 	add.w	r1, r7, #12
 8017be6:	300c      	adds	r0, #12
 8017be8:	f7fd f9f0 	bl	8014fcc <memcpy>
 8017bec:	2201      	movs	r2, #1
 8017bee:	4629      	mov	r1, r5
 8017bf0:	4620      	mov	r0, r4
 8017bf2:	f001 f843 	bl	8018c7c <__lshift>
 8017bf6:	9b00      	ldr	r3, [sp, #0]
 8017bf8:	3301      	adds	r3, #1
 8017bfa:	9301      	str	r3, [sp, #4]
 8017bfc:	9b00      	ldr	r3, [sp, #0]
 8017bfe:	444b      	add	r3, r9
 8017c00:	9307      	str	r3, [sp, #28]
 8017c02:	9b02      	ldr	r3, [sp, #8]
 8017c04:	f003 0301 	and.w	r3, r3, #1
 8017c08:	46b8      	mov	r8, r7
 8017c0a:	9306      	str	r3, [sp, #24]
 8017c0c:	4607      	mov	r7, r0
 8017c0e:	9b01      	ldr	r3, [sp, #4]
 8017c10:	4631      	mov	r1, r6
 8017c12:	3b01      	subs	r3, #1
 8017c14:	4658      	mov	r0, fp
 8017c16:	9302      	str	r3, [sp, #8]
 8017c18:	f7ff fa80 	bl	801711c <quorem>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	3330      	adds	r3, #48	; 0x30
 8017c20:	9004      	str	r0, [sp, #16]
 8017c22:	4641      	mov	r1, r8
 8017c24:	4658      	mov	r0, fp
 8017c26:	9308      	str	r3, [sp, #32]
 8017c28:	f001 f894 	bl	8018d54 <__mcmp>
 8017c2c:	463a      	mov	r2, r7
 8017c2e:	4681      	mov	r9, r0
 8017c30:	4631      	mov	r1, r6
 8017c32:	4620      	mov	r0, r4
 8017c34:	f001 f8aa 	bl	8018d8c <__mdiff>
 8017c38:	68c2      	ldr	r2, [r0, #12]
 8017c3a:	9b08      	ldr	r3, [sp, #32]
 8017c3c:	4605      	mov	r5, r0
 8017c3e:	bb02      	cbnz	r2, 8017c82 <_dtoa_r+0xa4a>
 8017c40:	4601      	mov	r1, r0
 8017c42:	4658      	mov	r0, fp
 8017c44:	f001 f886 	bl	8018d54 <__mcmp>
 8017c48:	9b08      	ldr	r3, [sp, #32]
 8017c4a:	4602      	mov	r2, r0
 8017c4c:	4629      	mov	r1, r5
 8017c4e:	4620      	mov	r0, r4
 8017c50:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017c54:	f000 fe73 	bl	801893e <_Bfree>
 8017c58:	9b05      	ldr	r3, [sp, #20]
 8017c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c5c:	9d01      	ldr	r5, [sp, #4]
 8017c5e:	ea43 0102 	orr.w	r1, r3, r2
 8017c62:	9b06      	ldr	r3, [sp, #24]
 8017c64:	430b      	orrs	r3, r1
 8017c66:	9b08      	ldr	r3, [sp, #32]
 8017c68:	d10d      	bne.n	8017c86 <_dtoa_r+0xa4e>
 8017c6a:	2b39      	cmp	r3, #57	; 0x39
 8017c6c:	d029      	beq.n	8017cc2 <_dtoa_r+0xa8a>
 8017c6e:	f1b9 0f00 	cmp.w	r9, #0
 8017c72:	dd01      	ble.n	8017c78 <_dtoa_r+0xa40>
 8017c74:	9b04      	ldr	r3, [sp, #16]
 8017c76:	3331      	adds	r3, #49	; 0x31
 8017c78:	9a02      	ldr	r2, [sp, #8]
 8017c7a:	7013      	strb	r3, [r2, #0]
 8017c7c:	e775      	b.n	8017b6a <_dtoa_r+0x932>
 8017c7e:	4638      	mov	r0, r7
 8017c80:	e7b9      	b.n	8017bf6 <_dtoa_r+0x9be>
 8017c82:	2201      	movs	r2, #1
 8017c84:	e7e2      	b.n	8017c4c <_dtoa_r+0xa14>
 8017c86:	f1b9 0f00 	cmp.w	r9, #0
 8017c8a:	db06      	blt.n	8017c9a <_dtoa_r+0xa62>
 8017c8c:	9905      	ldr	r1, [sp, #20]
 8017c8e:	ea41 0909 	orr.w	r9, r1, r9
 8017c92:	9906      	ldr	r1, [sp, #24]
 8017c94:	ea59 0101 	orrs.w	r1, r9, r1
 8017c98:	d120      	bne.n	8017cdc <_dtoa_r+0xaa4>
 8017c9a:	2a00      	cmp	r2, #0
 8017c9c:	ddec      	ble.n	8017c78 <_dtoa_r+0xa40>
 8017c9e:	4659      	mov	r1, fp
 8017ca0:	2201      	movs	r2, #1
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	9301      	str	r3, [sp, #4]
 8017ca6:	f000 ffe9 	bl	8018c7c <__lshift>
 8017caa:	4631      	mov	r1, r6
 8017cac:	4683      	mov	fp, r0
 8017cae:	f001 f851 	bl	8018d54 <__mcmp>
 8017cb2:	2800      	cmp	r0, #0
 8017cb4:	9b01      	ldr	r3, [sp, #4]
 8017cb6:	dc02      	bgt.n	8017cbe <_dtoa_r+0xa86>
 8017cb8:	d1de      	bne.n	8017c78 <_dtoa_r+0xa40>
 8017cba:	07da      	lsls	r2, r3, #31
 8017cbc:	d5dc      	bpl.n	8017c78 <_dtoa_r+0xa40>
 8017cbe:	2b39      	cmp	r3, #57	; 0x39
 8017cc0:	d1d8      	bne.n	8017c74 <_dtoa_r+0xa3c>
 8017cc2:	9a02      	ldr	r2, [sp, #8]
 8017cc4:	2339      	movs	r3, #57	; 0x39
 8017cc6:	7013      	strb	r3, [r2, #0]
 8017cc8:	462b      	mov	r3, r5
 8017cca:	461d      	mov	r5, r3
 8017ccc:	3b01      	subs	r3, #1
 8017cce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017cd2:	2a39      	cmp	r2, #57	; 0x39
 8017cd4:	d050      	beq.n	8017d78 <_dtoa_r+0xb40>
 8017cd6:	3201      	adds	r2, #1
 8017cd8:	701a      	strb	r2, [r3, #0]
 8017cda:	e746      	b.n	8017b6a <_dtoa_r+0x932>
 8017cdc:	2a00      	cmp	r2, #0
 8017cde:	dd03      	ble.n	8017ce8 <_dtoa_r+0xab0>
 8017ce0:	2b39      	cmp	r3, #57	; 0x39
 8017ce2:	d0ee      	beq.n	8017cc2 <_dtoa_r+0xa8a>
 8017ce4:	3301      	adds	r3, #1
 8017ce6:	e7c7      	b.n	8017c78 <_dtoa_r+0xa40>
 8017ce8:	9a01      	ldr	r2, [sp, #4]
 8017cea:	9907      	ldr	r1, [sp, #28]
 8017cec:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017cf0:	428a      	cmp	r2, r1
 8017cf2:	d02a      	beq.n	8017d4a <_dtoa_r+0xb12>
 8017cf4:	4659      	mov	r1, fp
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	220a      	movs	r2, #10
 8017cfa:	4620      	mov	r0, r4
 8017cfc:	f000 fe28 	bl	8018950 <__multadd>
 8017d00:	45b8      	cmp	r8, r7
 8017d02:	4683      	mov	fp, r0
 8017d04:	f04f 0300 	mov.w	r3, #0
 8017d08:	f04f 020a 	mov.w	r2, #10
 8017d0c:	4641      	mov	r1, r8
 8017d0e:	4620      	mov	r0, r4
 8017d10:	d107      	bne.n	8017d22 <_dtoa_r+0xaea>
 8017d12:	f000 fe1d 	bl	8018950 <__multadd>
 8017d16:	4680      	mov	r8, r0
 8017d18:	4607      	mov	r7, r0
 8017d1a:	9b01      	ldr	r3, [sp, #4]
 8017d1c:	3301      	adds	r3, #1
 8017d1e:	9301      	str	r3, [sp, #4]
 8017d20:	e775      	b.n	8017c0e <_dtoa_r+0x9d6>
 8017d22:	f000 fe15 	bl	8018950 <__multadd>
 8017d26:	4639      	mov	r1, r7
 8017d28:	4680      	mov	r8, r0
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	220a      	movs	r2, #10
 8017d2e:	4620      	mov	r0, r4
 8017d30:	f000 fe0e 	bl	8018950 <__multadd>
 8017d34:	4607      	mov	r7, r0
 8017d36:	e7f0      	b.n	8017d1a <_dtoa_r+0xae2>
 8017d38:	f1b9 0f00 	cmp.w	r9, #0
 8017d3c:	9a00      	ldr	r2, [sp, #0]
 8017d3e:	bfcc      	ite	gt
 8017d40:	464d      	movgt	r5, r9
 8017d42:	2501      	movle	r5, #1
 8017d44:	4415      	add	r5, r2
 8017d46:	f04f 0800 	mov.w	r8, #0
 8017d4a:	4659      	mov	r1, fp
 8017d4c:	2201      	movs	r2, #1
 8017d4e:	4620      	mov	r0, r4
 8017d50:	9301      	str	r3, [sp, #4]
 8017d52:	f000 ff93 	bl	8018c7c <__lshift>
 8017d56:	4631      	mov	r1, r6
 8017d58:	4683      	mov	fp, r0
 8017d5a:	f000 fffb 	bl	8018d54 <__mcmp>
 8017d5e:	2800      	cmp	r0, #0
 8017d60:	dcb2      	bgt.n	8017cc8 <_dtoa_r+0xa90>
 8017d62:	d102      	bne.n	8017d6a <_dtoa_r+0xb32>
 8017d64:	9b01      	ldr	r3, [sp, #4]
 8017d66:	07db      	lsls	r3, r3, #31
 8017d68:	d4ae      	bmi.n	8017cc8 <_dtoa_r+0xa90>
 8017d6a:	462b      	mov	r3, r5
 8017d6c:	461d      	mov	r5, r3
 8017d6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017d72:	2a30      	cmp	r2, #48	; 0x30
 8017d74:	d0fa      	beq.n	8017d6c <_dtoa_r+0xb34>
 8017d76:	e6f8      	b.n	8017b6a <_dtoa_r+0x932>
 8017d78:	9a00      	ldr	r2, [sp, #0]
 8017d7a:	429a      	cmp	r2, r3
 8017d7c:	d1a5      	bne.n	8017cca <_dtoa_r+0xa92>
 8017d7e:	f10a 0a01 	add.w	sl, sl, #1
 8017d82:	2331      	movs	r3, #49	; 0x31
 8017d84:	e779      	b.n	8017c7a <_dtoa_r+0xa42>
 8017d86:	4b14      	ldr	r3, [pc, #80]	; (8017dd8 <_dtoa_r+0xba0>)
 8017d88:	f7ff bab1 	b.w	80172ee <_dtoa_r+0xb6>
 8017d8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	f47f aa93 	bne.w	80172ba <_dtoa_r+0x82>
 8017d94:	4b11      	ldr	r3, [pc, #68]	; (8017ddc <_dtoa_r+0xba4>)
 8017d96:	f7ff baaa 	b.w	80172ee <_dtoa_r+0xb6>
 8017d9a:	f1b9 0f00 	cmp.w	r9, #0
 8017d9e:	dc03      	bgt.n	8017da8 <_dtoa_r+0xb70>
 8017da0:	9b05      	ldr	r3, [sp, #20]
 8017da2:	2b02      	cmp	r3, #2
 8017da4:	f73f aeca 	bgt.w	8017b3c <_dtoa_r+0x904>
 8017da8:	9d00      	ldr	r5, [sp, #0]
 8017daa:	4631      	mov	r1, r6
 8017dac:	4658      	mov	r0, fp
 8017dae:	f7ff f9b5 	bl	801711c <quorem>
 8017db2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017db6:	f805 3b01 	strb.w	r3, [r5], #1
 8017dba:	9a00      	ldr	r2, [sp, #0]
 8017dbc:	1aaa      	subs	r2, r5, r2
 8017dbe:	4591      	cmp	r9, r2
 8017dc0:	ddba      	ble.n	8017d38 <_dtoa_r+0xb00>
 8017dc2:	4659      	mov	r1, fp
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	220a      	movs	r2, #10
 8017dc8:	4620      	mov	r0, r4
 8017dca:	f000 fdc1 	bl	8018950 <__multadd>
 8017dce:	4683      	mov	fp, r0
 8017dd0:	e7eb      	b.n	8017daa <_dtoa_r+0xb72>
 8017dd2:	bf00      	nop
 8017dd4:	0801fa4d 	.word	0x0801fa4d
 8017dd8:	0801fa1e 	.word	0x0801fa1e
 8017ddc:	0801fa44 	.word	0x0801fa44

08017de0 <__errno>:
 8017de0:	4b01      	ldr	r3, [pc, #4]	; (8017de8 <__errno+0x8>)
 8017de2:	6818      	ldr	r0, [r3, #0]
 8017de4:	4770      	bx	lr
 8017de6:	bf00      	nop
 8017de8:	2000002c 	.word	0x2000002c

08017dec <__sflush_r>:
 8017dec:	898b      	ldrh	r3, [r1, #12]
 8017dee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017df6:	4605      	mov	r5, r0
 8017df8:	0718      	lsls	r0, r3, #28
 8017dfa:	460c      	mov	r4, r1
 8017dfc:	d45f      	bmi.n	8017ebe <__sflush_r+0xd2>
 8017dfe:	684b      	ldr	r3, [r1, #4]
 8017e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	818a      	strh	r2, [r1, #12]
 8017e08:	dc05      	bgt.n	8017e16 <__sflush_r+0x2a>
 8017e0a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	dc02      	bgt.n	8017e16 <__sflush_r+0x2a>
 8017e10:	2000      	movs	r0, #0
 8017e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e18:	2e00      	cmp	r6, #0
 8017e1a:	d0f9      	beq.n	8017e10 <__sflush_r+0x24>
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017e22:	682f      	ldr	r7, [r5, #0]
 8017e24:	602b      	str	r3, [r5, #0]
 8017e26:	d036      	beq.n	8017e96 <__sflush_r+0xaa>
 8017e28:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8017e2a:	89a3      	ldrh	r3, [r4, #12]
 8017e2c:	075a      	lsls	r2, r3, #29
 8017e2e:	d505      	bpl.n	8017e3c <__sflush_r+0x50>
 8017e30:	6863      	ldr	r3, [r4, #4]
 8017e32:	1ac0      	subs	r0, r0, r3
 8017e34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017e36:	b10b      	cbz	r3, 8017e3c <__sflush_r+0x50>
 8017e38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017e3a:	1ac0      	subs	r0, r0, r3
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	4602      	mov	r2, r0
 8017e40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e42:	69e1      	ldr	r1, [r4, #28]
 8017e44:	4628      	mov	r0, r5
 8017e46:	47b0      	blx	r6
 8017e48:	1c43      	adds	r3, r0, #1
 8017e4a:	89a3      	ldrh	r3, [r4, #12]
 8017e4c:	d106      	bne.n	8017e5c <__sflush_r+0x70>
 8017e4e:	6829      	ldr	r1, [r5, #0]
 8017e50:	291d      	cmp	r1, #29
 8017e52:	d830      	bhi.n	8017eb6 <__sflush_r+0xca>
 8017e54:	4a2b      	ldr	r2, [pc, #172]	; (8017f04 <__sflush_r+0x118>)
 8017e56:	40ca      	lsrs	r2, r1
 8017e58:	07d6      	lsls	r6, r2, #31
 8017e5a:	d52c      	bpl.n	8017eb6 <__sflush_r+0xca>
 8017e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017e60:	b21b      	sxth	r3, r3
 8017e62:	2200      	movs	r2, #0
 8017e64:	6062      	str	r2, [r4, #4]
 8017e66:	04d9      	lsls	r1, r3, #19
 8017e68:	6922      	ldr	r2, [r4, #16]
 8017e6a:	81a3      	strh	r3, [r4, #12]
 8017e6c:	6022      	str	r2, [r4, #0]
 8017e6e:	d504      	bpl.n	8017e7a <__sflush_r+0x8e>
 8017e70:	1c42      	adds	r2, r0, #1
 8017e72:	d101      	bne.n	8017e78 <__sflush_r+0x8c>
 8017e74:	682b      	ldr	r3, [r5, #0]
 8017e76:	b903      	cbnz	r3, 8017e7a <__sflush_r+0x8e>
 8017e78:	6520      	str	r0, [r4, #80]	; 0x50
 8017e7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017e7c:	602f      	str	r7, [r5, #0]
 8017e7e:	2900      	cmp	r1, #0
 8017e80:	d0c6      	beq.n	8017e10 <__sflush_r+0x24>
 8017e82:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8017e86:	4299      	cmp	r1, r3
 8017e88:	d002      	beq.n	8017e90 <__sflush_r+0xa4>
 8017e8a:	4628      	mov	r0, r5
 8017e8c:	f000 f938 	bl	8018100 <_free_r>
 8017e90:	2000      	movs	r0, #0
 8017e92:	6320      	str	r0, [r4, #48]	; 0x30
 8017e94:	e7bd      	b.n	8017e12 <__sflush_r+0x26>
 8017e96:	69e1      	ldr	r1, [r4, #28]
 8017e98:	2301      	movs	r3, #1
 8017e9a:	4628      	mov	r0, r5
 8017e9c:	47b0      	blx	r6
 8017e9e:	1c41      	adds	r1, r0, #1
 8017ea0:	d1c3      	bne.n	8017e2a <__sflush_r+0x3e>
 8017ea2:	682b      	ldr	r3, [r5, #0]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d0c0      	beq.n	8017e2a <__sflush_r+0x3e>
 8017ea8:	2b1d      	cmp	r3, #29
 8017eaa:	d001      	beq.n	8017eb0 <__sflush_r+0xc4>
 8017eac:	2b16      	cmp	r3, #22
 8017eae:	d101      	bne.n	8017eb4 <__sflush_r+0xc8>
 8017eb0:	602f      	str	r7, [r5, #0]
 8017eb2:	e7ad      	b.n	8017e10 <__sflush_r+0x24>
 8017eb4:	89a3      	ldrh	r3, [r4, #12]
 8017eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017eba:	81a3      	strh	r3, [r4, #12]
 8017ebc:	e7a9      	b.n	8017e12 <__sflush_r+0x26>
 8017ebe:	690f      	ldr	r7, [r1, #16]
 8017ec0:	2f00      	cmp	r7, #0
 8017ec2:	d0a5      	beq.n	8017e10 <__sflush_r+0x24>
 8017ec4:	079b      	lsls	r3, r3, #30
 8017ec6:	680e      	ldr	r6, [r1, #0]
 8017ec8:	bf08      	it	eq
 8017eca:	694b      	ldreq	r3, [r1, #20]
 8017ecc:	600f      	str	r7, [r1, #0]
 8017ece:	bf18      	it	ne
 8017ed0:	2300      	movne	r3, #0
 8017ed2:	eba6 0807 	sub.w	r8, r6, r7
 8017ed6:	608b      	str	r3, [r1, #8]
 8017ed8:	f1b8 0f00 	cmp.w	r8, #0
 8017edc:	dd98      	ble.n	8017e10 <__sflush_r+0x24>
 8017ede:	69e1      	ldr	r1, [r4, #28]
 8017ee0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017ee2:	4643      	mov	r3, r8
 8017ee4:	463a      	mov	r2, r7
 8017ee6:	4628      	mov	r0, r5
 8017ee8:	47b0      	blx	r6
 8017eea:	2800      	cmp	r0, #0
 8017eec:	dc06      	bgt.n	8017efc <__sflush_r+0x110>
 8017eee:	89a3      	ldrh	r3, [r4, #12]
 8017ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ef4:	81a3      	strh	r3, [r4, #12]
 8017ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8017efa:	e78a      	b.n	8017e12 <__sflush_r+0x26>
 8017efc:	4407      	add	r7, r0
 8017efe:	eba8 0800 	sub.w	r8, r8, r0
 8017f02:	e7e9      	b.n	8017ed8 <__sflush_r+0xec>
 8017f04:	20400001 	.word	0x20400001

08017f08 <_fflush_r>:
 8017f08:	b538      	push	{r3, r4, r5, lr}
 8017f0a:	460c      	mov	r4, r1
 8017f0c:	4605      	mov	r5, r0
 8017f0e:	b118      	cbz	r0, 8017f18 <_fflush_r+0x10>
 8017f10:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017f12:	b90b      	cbnz	r3, 8017f18 <_fflush_r+0x10>
 8017f14:	f000 f864 	bl	8017fe0 <__sinit>
 8017f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f1c:	b1bb      	cbz	r3, 8017f4e <_fflush_r+0x46>
 8017f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017f20:	07d0      	lsls	r0, r2, #31
 8017f22:	d404      	bmi.n	8017f2e <_fflush_r+0x26>
 8017f24:	0599      	lsls	r1, r3, #22
 8017f26:	d402      	bmi.n	8017f2e <_fflush_r+0x26>
 8017f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f2a:	f000 fa16 	bl	801835a <__retarget_lock_acquire_recursive>
 8017f2e:	4628      	mov	r0, r5
 8017f30:	4621      	mov	r1, r4
 8017f32:	f7ff ff5b 	bl	8017dec <__sflush_r>
 8017f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017f38:	07da      	lsls	r2, r3, #31
 8017f3a:	4605      	mov	r5, r0
 8017f3c:	d405      	bmi.n	8017f4a <_fflush_r+0x42>
 8017f3e:	89a3      	ldrh	r3, [r4, #12]
 8017f40:	059b      	lsls	r3, r3, #22
 8017f42:	d402      	bmi.n	8017f4a <_fflush_r+0x42>
 8017f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f46:	f000 fa0a 	bl	801835e <__retarget_lock_release_recursive>
 8017f4a:	4628      	mov	r0, r5
 8017f4c:	bd38      	pop	{r3, r4, r5, pc}
 8017f4e:	461d      	mov	r5, r3
 8017f50:	e7fb      	b.n	8017f4a <_fflush_r+0x42>
	...

08017f54 <std>:
 8017f54:	2300      	movs	r3, #0
 8017f56:	b510      	push	{r4, lr}
 8017f58:	4604      	mov	r4, r0
 8017f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8017f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017f62:	6083      	str	r3, [r0, #8]
 8017f64:	8181      	strh	r1, [r0, #12]
 8017f66:	6643      	str	r3, [r0, #100]	; 0x64
 8017f68:	81c2      	strh	r2, [r0, #14]
 8017f6a:	6183      	str	r3, [r0, #24]
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	2208      	movs	r2, #8
 8017f70:	305c      	adds	r0, #92	; 0x5c
 8017f72:	f7fd f853 	bl	801501c <memset>
 8017f76:	4b07      	ldr	r3, [pc, #28]	; (8017f94 <std+0x40>)
 8017f78:	6223      	str	r3, [r4, #32]
 8017f7a:	4b07      	ldr	r3, [pc, #28]	; (8017f98 <std+0x44>)
 8017f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8017f7e:	4b07      	ldr	r3, [pc, #28]	; (8017f9c <std+0x48>)
 8017f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8017f82:	4b07      	ldr	r3, [pc, #28]	; (8017fa0 <std+0x4c>)
 8017f84:	61e4      	str	r4, [r4, #28]
 8017f86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017f88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f90:	f000 b9e0 	b.w	8018354 <__retarget_lock_init_recursive>
 8017f94:	0801903d 	.word	0x0801903d
 8017f98:	08019063 	.word	0x08019063
 8017f9c:	0801909b 	.word	0x0801909b
 8017fa0:	080190bf 	.word	0x080190bf

08017fa4 <_cleanup_r>:
 8017fa4:	4901      	ldr	r1, [pc, #4]	; (8017fac <_cleanup_r+0x8>)
 8017fa6:	f000 b96b 	b.w	8018280 <_fwalk_reent>
 8017faa:	bf00      	nop
 8017fac:	0801ae71 	.word	0x0801ae71

08017fb0 <__sfp_lock_acquire>:
 8017fb0:	4801      	ldr	r0, [pc, #4]	; (8017fb8 <__sfp_lock_acquire+0x8>)
 8017fb2:	f000 b9d2 	b.w	801835a <__retarget_lock_acquire_recursive>
 8017fb6:	bf00      	nop
 8017fb8:	2000b664 	.word	0x2000b664

08017fbc <__sfp_lock_release>:
 8017fbc:	4801      	ldr	r0, [pc, #4]	; (8017fc4 <__sfp_lock_release+0x8>)
 8017fbe:	f000 b9ce 	b.w	801835e <__retarget_lock_release_recursive>
 8017fc2:	bf00      	nop
 8017fc4:	2000b664 	.word	0x2000b664

08017fc8 <__sinit_lock_acquire>:
 8017fc8:	4801      	ldr	r0, [pc, #4]	; (8017fd0 <__sinit_lock_acquire+0x8>)
 8017fca:	f000 b9c6 	b.w	801835a <__retarget_lock_acquire_recursive>
 8017fce:	bf00      	nop
 8017fd0:	2000b65f 	.word	0x2000b65f

08017fd4 <__sinit_lock_release>:
 8017fd4:	4801      	ldr	r0, [pc, #4]	; (8017fdc <__sinit_lock_release+0x8>)
 8017fd6:	f000 b9c2 	b.w	801835e <__retarget_lock_release_recursive>
 8017fda:	bf00      	nop
 8017fdc:	2000b65f 	.word	0x2000b65f

08017fe0 <__sinit>:
 8017fe0:	b510      	push	{r4, lr}
 8017fe2:	4604      	mov	r4, r0
 8017fe4:	f7ff fff0 	bl	8017fc8 <__sinit_lock_acquire>
 8017fe8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017fea:	b11a      	cbz	r2, 8017ff4 <__sinit+0x14>
 8017fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ff0:	f7ff bff0 	b.w	8017fd4 <__sinit_lock_release>
 8017ff4:	4b0d      	ldr	r3, [pc, #52]	; (801802c <__sinit+0x4c>)
 8017ff6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017ff8:	2303      	movs	r3, #3
 8017ffa:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8017ffe:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8018002:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8018006:	6860      	ldr	r0, [r4, #4]
 8018008:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801800c:	2104      	movs	r1, #4
 801800e:	f7ff ffa1 	bl	8017f54 <std>
 8018012:	68a0      	ldr	r0, [r4, #8]
 8018014:	2201      	movs	r2, #1
 8018016:	2109      	movs	r1, #9
 8018018:	f7ff ff9c 	bl	8017f54 <std>
 801801c:	68e0      	ldr	r0, [r4, #12]
 801801e:	2202      	movs	r2, #2
 8018020:	2112      	movs	r1, #18
 8018022:	f7ff ff97 	bl	8017f54 <std>
 8018026:	2301      	movs	r3, #1
 8018028:	63a3      	str	r3, [r4, #56]	; 0x38
 801802a:	e7df      	b.n	8017fec <__sinit+0xc>
 801802c:	08017fa5 	.word	0x08017fa5

08018030 <__libc_fini_array>:
 8018030:	b538      	push	{r3, r4, r5, lr}
 8018032:	4d07      	ldr	r5, [pc, #28]	; (8018050 <__libc_fini_array+0x20>)
 8018034:	4c07      	ldr	r4, [pc, #28]	; (8018054 <__libc_fini_array+0x24>)
 8018036:	1b64      	subs	r4, r4, r5
 8018038:	10a4      	asrs	r4, r4, #2
 801803a:	b91c      	cbnz	r4, 8018044 <__libc_fini_array+0x14>
 801803c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018040:	f004 bd4e 	b.w	801cae0 <_fini>
 8018044:	3c01      	subs	r4, #1
 8018046:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801804a:	4798      	blx	r3
 801804c:	e7f5      	b.n	801803a <__libc_fini_array+0xa>
 801804e:	bf00      	nop
 8018050:	0801fd58 	.word	0x0801fd58
 8018054:	0801fd5c 	.word	0x0801fd5c

08018058 <_malloc_trim_r>:
 8018058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801805c:	4606      	mov	r6, r0
 801805e:	2008      	movs	r0, #8
 8018060:	460c      	mov	r4, r1
 8018062:	f002 f909 	bl	801a278 <sysconf>
 8018066:	4f23      	ldr	r7, [pc, #140]	; (80180f4 <_malloc_trim_r+0x9c>)
 8018068:	4680      	mov	r8, r0
 801806a:	4630      	mov	r0, r6
 801806c:	f000 fc36 	bl	80188dc <__malloc_lock>
 8018070:	68bb      	ldr	r3, [r7, #8]
 8018072:	685d      	ldr	r5, [r3, #4]
 8018074:	f025 0503 	bic.w	r5, r5, #3
 8018078:	1b2c      	subs	r4, r5, r4
 801807a:	3c11      	subs	r4, #17
 801807c:	4444      	add	r4, r8
 801807e:	fbb4 f4f8 	udiv	r4, r4, r8
 8018082:	3c01      	subs	r4, #1
 8018084:	fb08 f404 	mul.w	r4, r8, r4
 8018088:	45a0      	cmp	r8, r4
 801808a:	dd05      	ble.n	8018098 <_malloc_trim_r+0x40>
 801808c:	4630      	mov	r0, r6
 801808e:	f000 fc2b 	bl	80188e8 <__malloc_unlock>
 8018092:	2000      	movs	r0, #0
 8018094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018098:	2100      	movs	r1, #0
 801809a:	4630      	mov	r0, r6
 801809c:	f000 ff92 	bl	8018fc4 <_sbrk_r>
 80180a0:	68bb      	ldr	r3, [r7, #8]
 80180a2:	442b      	add	r3, r5
 80180a4:	4298      	cmp	r0, r3
 80180a6:	d1f1      	bne.n	801808c <_malloc_trim_r+0x34>
 80180a8:	4261      	negs	r1, r4
 80180aa:	4630      	mov	r0, r6
 80180ac:	f000 ff8a 	bl	8018fc4 <_sbrk_r>
 80180b0:	3001      	adds	r0, #1
 80180b2:	d110      	bne.n	80180d6 <_malloc_trim_r+0x7e>
 80180b4:	2100      	movs	r1, #0
 80180b6:	4630      	mov	r0, r6
 80180b8:	f000 ff84 	bl	8018fc4 <_sbrk_r>
 80180bc:	68ba      	ldr	r2, [r7, #8]
 80180be:	1a83      	subs	r3, r0, r2
 80180c0:	2b0f      	cmp	r3, #15
 80180c2:	dde3      	ble.n	801808c <_malloc_trim_r+0x34>
 80180c4:	490c      	ldr	r1, [pc, #48]	; (80180f8 <_malloc_trim_r+0xa0>)
 80180c6:	6809      	ldr	r1, [r1, #0]
 80180c8:	1a40      	subs	r0, r0, r1
 80180ca:	490c      	ldr	r1, [pc, #48]	; (80180fc <_malloc_trim_r+0xa4>)
 80180cc:	f043 0301 	orr.w	r3, r3, #1
 80180d0:	6008      	str	r0, [r1, #0]
 80180d2:	6053      	str	r3, [r2, #4]
 80180d4:	e7da      	b.n	801808c <_malloc_trim_r+0x34>
 80180d6:	68bb      	ldr	r3, [r7, #8]
 80180d8:	4a08      	ldr	r2, [pc, #32]	; (80180fc <_malloc_trim_r+0xa4>)
 80180da:	1b2d      	subs	r5, r5, r4
 80180dc:	f045 0501 	orr.w	r5, r5, #1
 80180e0:	605d      	str	r5, [r3, #4]
 80180e2:	6813      	ldr	r3, [r2, #0]
 80180e4:	4630      	mov	r0, r6
 80180e6:	1b1c      	subs	r4, r3, r4
 80180e8:	6014      	str	r4, [r2, #0]
 80180ea:	f000 fbfd 	bl	80188e8 <__malloc_unlock>
 80180ee:	2001      	movs	r0, #1
 80180f0:	e7d0      	b.n	8018094 <_malloc_trim_r+0x3c>
 80180f2:	bf00      	nop
 80180f4:	200004c0 	.word	0x200004c0
 80180f8:	200008c8 	.word	0x200008c8
 80180fc:	20004bfc 	.word	0x20004bfc

08018100 <_free_r>:
 8018100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018102:	4605      	mov	r5, r0
 8018104:	460f      	mov	r7, r1
 8018106:	2900      	cmp	r1, #0
 8018108:	f000 80b1 	beq.w	801826e <_free_r+0x16e>
 801810c:	f000 fbe6 	bl	80188dc <__malloc_lock>
 8018110:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018114:	4856      	ldr	r0, [pc, #344]	; (8018270 <_free_r+0x170>)
 8018116:	f022 0401 	bic.w	r4, r2, #1
 801811a:	f1a7 0308 	sub.w	r3, r7, #8
 801811e:	eb03 0c04 	add.w	ip, r3, r4
 8018122:	6881      	ldr	r1, [r0, #8]
 8018124:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8018128:	4561      	cmp	r1, ip
 801812a:	f026 0603 	bic.w	r6, r6, #3
 801812e:	f002 0201 	and.w	r2, r2, #1
 8018132:	d11b      	bne.n	801816c <_free_r+0x6c>
 8018134:	4434      	add	r4, r6
 8018136:	b93a      	cbnz	r2, 8018148 <_free_r+0x48>
 8018138:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801813c:	1a9b      	subs	r3, r3, r2
 801813e:	4414      	add	r4, r2
 8018140:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8018144:	60ca      	str	r2, [r1, #12]
 8018146:	6091      	str	r1, [r2, #8]
 8018148:	f044 0201 	orr.w	r2, r4, #1
 801814c:	605a      	str	r2, [r3, #4]
 801814e:	6083      	str	r3, [r0, #8]
 8018150:	4b48      	ldr	r3, [pc, #288]	; (8018274 <_free_r+0x174>)
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	42a3      	cmp	r3, r4
 8018156:	d804      	bhi.n	8018162 <_free_r+0x62>
 8018158:	4b47      	ldr	r3, [pc, #284]	; (8018278 <_free_r+0x178>)
 801815a:	4628      	mov	r0, r5
 801815c:	6819      	ldr	r1, [r3, #0]
 801815e:	f7ff ff7b 	bl	8018058 <_malloc_trim_r>
 8018162:	4628      	mov	r0, r5
 8018164:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018168:	f000 bbbe 	b.w	80188e8 <__malloc_unlock>
 801816c:	f8cc 6004 	str.w	r6, [ip, #4]
 8018170:	2a00      	cmp	r2, #0
 8018172:	d138      	bne.n	80181e6 <_free_r+0xe6>
 8018174:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8018178:	1a5b      	subs	r3, r3, r1
 801817a:	440c      	add	r4, r1
 801817c:	6899      	ldr	r1, [r3, #8]
 801817e:	f100 0708 	add.w	r7, r0, #8
 8018182:	42b9      	cmp	r1, r7
 8018184:	d031      	beq.n	80181ea <_free_r+0xea>
 8018186:	68df      	ldr	r7, [r3, #12]
 8018188:	60cf      	str	r7, [r1, #12]
 801818a:	60b9      	str	r1, [r7, #8]
 801818c:	eb0c 0106 	add.w	r1, ip, r6
 8018190:	6849      	ldr	r1, [r1, #4]
 8018192:	07c9      	lsls	r1, r1, #31
 8018194:	d40b      	bmi.n	80181ae <_free_r+0xae>
 8018196:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801819a:	4434      	add	r4, r6
 801819c:	bb3a      	cbnz	r2, 80181ee <_free_r+0xee>
 801819e:	4e37      	ldr	r6, [pc, #220]	; (801827c <_free_r+0x17c>)
 80181a0:	42b1      	cmp	r1, r6
 80181a2:	d124      	bne.n	80181ee <_free_r+0xee>
 80181a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80181a8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80181ac:	2201      	movs	r2, #1
 80181ae:	f044 0101 	orr.w	r1, r4, #1
 80181b2:	6059      	str	r1, [r3, #4]
 80181b4:	511c      	str	r4, [r3, r4]
 80181b6:	2a00      	cmp	r2, #0
 80181b8:	d1d3      	bne.n	8018162 <_free_r+0x62>
 80181ba:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80181be:	d21b      	bcs.n	80181f8 <_free_r+0xf8>
 80181c0:	0961      	lsrs	r1, r4, #5
 80181c2:	08e2      	lsrs	r2, r4, #3
 80181c4:	2401      	movs	r4, #1
 80181c6:	408c      	lsls	r4, r1
 80181c8:	6841      	ldr	r1, [r0, #4]
 80181ca:	3201      	adds	r2, #1
 80181cc:	430c      	orrs	r4, r1
 80181ce:	6044      	str	r4, [r0, #4]
 80181d0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80181d4:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 80181d8:	3908      	subs	r1, #8
 80181da:	e9c3 4102 	strd	r4, r1, [r3, #8]
 80181de:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80181e2:	60e3      	str	r3, [r4, #12]
 80181e4:	e7bd      	b.n	8018162 <_free_r+0x62>
 80181e6:	2200      	movs	r2, #0
 80181e8:	e7d0      	b.n	801818c <_free_r+0x8c>
 80181ea:	2201      	movs	r2, #1
 80181ec:	e7ce      	b.n	801818c <_free_r+0x8c>
 80181ee:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80181f2:	60ce      	str	r6, [r1, #12]
 80181f4:	60b1      	str	r1, [r6, #8]
 80181f6:	e7da      	b.n	80181ae <_free_r+0xae>
 80181f8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80181fc:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8018200:	d214      	bcs.n	801822c <_free_r+0x12c>
 8018202:	09a2      	lsrs	r2, r4, #6
 8018204:	3238      	adds	r2, #56	; 0x38
 8018206:	1c51      	adds	r1, r2, #1
 8018208:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801820c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8018210:	428e      	cmp	r6, r1
 8018212:	d125      	bne.n	8018260 <_free_r+0x160>
 8018214:	2401      	movs	r4, #1
 8018216:	1092      	asrs	r2, r2, #2
 8018218:	fa04 f202 	lsl.w	r2, r4, r2
 801821c:	6844      	ldr	r4, [r0, #4]
 801821e:	4322      	orrs	r2, r4
 8018220:	6042      	str	r2, [r0, #4]
 8018222:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8018226:	60b3      	str	r3, [r6, #8]
 8018228:	60cb      	str	r3, [r1, #12]
 801822a:	e79a      	b.n	8018162 <_free_r+0x62>
 801822c:	2a14      	cmp	r2, #20
 801822e:	d801      	bhi.n	8018234 <_free_r+0x134>
 8018230:	325b      	adds	r2, #91	; 0x5b
 8018232:	e7e8      	b.n	8018206 <_free_r+0x106>
 8018234:	2a54      	cmp	r2, #84	; 0x54
 8018236:	d802      	bhi.n	801823e <_free_r+0x13e>
 8018238:	0b22      	lsrs	r2, r4, #12
 801823a:	326e      	adds	r2, #110	; 0x6e
 801823c:	e7e3      	b.n	8018206 <_free_r+0x106>
 801823e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8018242:	d802      	bhi.n	801824a <_free_r+0x14a>
 8018244:	0be2      	lsrs	r2, r4, #15
 8018246:	3277      	adds	r2, #119	; 0x77
 8018248:	e7dd      	b.n	8018206 <_free_r+0x106>
 801824a:	f240 5154 	movw	r1, #1364	; 0x554
 801824e:	428a      	cmp	r2, r1
 8018250:	bf9a      	itte	ls
 8018252:	0ca2      	lsrls	r2, r4, #18
 8018254:	327c      	addls	r2, #124	; 0x7c
 8018256:	227e      	movhi	r2, #126	; 0x7e
 8018258:	e7d5      	b.n	8018206 <_free_r+0x106>
 801825a:	6889      	ldr	r1, [r1, #8]
 801825c:	428e      	cmp	r6, r1
 801825e:	d004      	beq.n	801826a <_free_r+0x16a>
 8018260:	684a      	ldr	r2, [r1, #4]
 8018262:	f022 0203 	bic.w	r2, r2, #3
 8018266:	42a2      	cmp	r2, r4
 8018268:	d8f7      	bhi.n	801825a <_free_r+0x15a>
 801826a:	68ce      	ldr	r6, [r1, #12]
 801826c:	e7d9      	b.n	8018222 <_free_r+0x122>
 801826e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018270:	200004c0 	.word	0x200004c0
 8018274:	200008cc 	.word	0x200008cc
 8018278:	20004c2c 	.word	0x20004c2c
 801827c:	200004c8 	.word	0x200004c8

08018280 <_fwalk_reent>:
 8018280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018284:	4606      	mov	r6, r0
 8018286:	4688      	mov	r8, r1
 8018288:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 801828c:	2700      	movs	r7, #0
 801828e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018292:	f1b9 0901 	subs.w	r9, r9, #1
 8018296:	d505      	bpl.n	80182a4 <_fwalk_reent+0x24>
 8018298:	6824      	ldr	r4, [r4, #0]
 801829a:	2c00      	cmp	r4, #0
 801829c:	d1f7      	bne.n	801828e <_fwalk_reent+0xe>
 801829e:	4638      	mov	r0, r7
 80182a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182a4:	89ab      	ldrh	r3, [r5, #12]
 80182a6:	2b01      	cmp	r3, #1
 80182a8:	d907      	bls.n	80182ba <_fwalk_reent+0x3a>
 80182aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80182ae:	3301      	adds	r3, #1
 80182b0:	d003      	beq.n	80182ba <_fwalk_reent+0x3a>
 80182b2:	4629      	mov	r1, r5
 80182b4:	4630      	mov	r0, r6
 80182b6:	47c0      	blx	r8
 80182b8:	4307      	orrs	r7, r0
 80182ba:	3568      	adds	r5, #104	; 0x68
 80182bc:	e7e9      	b.n	8018292 <_fwalk_reent+0x12>
	...

080182c0 <_findenv_r>:
 80182c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182c4:	4607      	mov	r7, r0
 80182c6:	4689      	mov	r9, r1
 80182c8:	4616      	mov	r6, r2
 80182ca:	f002 fdc5 	bl	801ae58 <__env_lock>
 80182ce:	4b18      	ldr	r3, [pc, #96]	; (8018330 <_findenv_r+0x70>)
 80182d0:	681c      	ldr	r4, [r3, #0]
 80182d2:	469a      	mov	sl, r3
 80182d4:	b134      	cbz	r4, 80182e4 <_findenv_r+0x24>
 80182d6:	464b      	mov	r3, r9
 80182d8:	4698      	mov	r8, r3
 80182da:	f813 1b01 	ldrb.w	r1, [r3], #1
 80182de:	b139      	cbz	r1, 80182f0 <_findenv_r+0x30>
 80182e0:	293d      	cmp	r1, #61	; 0x3d
 80182e2:	d1f9      	bne.n	80182d8 <_findenv_r+0x18>
 80182e4:	4638      	mov	r0, r7
 80182e6:	f002 fdbd 	bl	801ae64 <__env_unlock>
 80182ea:	2000      	movs	r0, #0
 80182ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182f0:	eba8 0809 	sub.w	r8, r8, r9
 80182f4:	46a3      	mov	fp, r4
 80182f6:	f854 0b04 	ldr.w	r0, [r4], #4
 80182fa:	2800      	cmp	r0, #0
 80182fc:	d0f2      	beq.n	80182e4 <_findenv_r+0x24>
 80182fe:	4642      	mov	r2, r8
 8018300:	4649      	mov	r1, r9
 8018302:	f7fd f941 	bl	8015588 <strncmp>
 8018306:	2800      	cmp	r0, #0
 8018308:	d1f4      	bne.n	80182f4 <_findenv_r+0x34>
 801830a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801830e:	eb03 0508 	add.w	r5, r3, r8
 8018312:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018316:	2b3d      	cmp	r3, #61	; 0x3d
 8018318:	d1ec      	bne.n	80182f4 <_findenv_r+0x34>
 801831a:	f8da 3000 	ldr.w	r3, [sl]
 801831e:	ebab 0303 	sub.w	r3, fp, r3
 8018322:	109b      	asrs	r3, r3, #2
 8018324:	4638      	mov	r0, r7
 8018326:	6033      	str	r3, [r6, #0]
 8018328:	f002 fd9c 	bl	801ae64 <__env_unlock>
 801832c:	1c68      	adds	r0, r5, #1
 801832e:	e7dd      	b.n	80182ec <_findenv_r+0x2c>
 8018330:	2000000c 	.word	0x2000000c

08018334 <_getenv_r>:
 8018334:	b507      	push	{r0, r1, r2, lr}
 8018336:	aa01      	add	r2, sp, #4
 8018338:	f7ff ffc2 	bl	80182c0 <_findenv_r>
 801833c:	b003      	add	sp, #12
 801833e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018344 <__gettzinfo>:
 8018344:	4800      	ldr	r0, [pc, #0]	; (8018348 <__gettzinfo+0x4>)
 8018346:	4770      	bx	lr
 8018348:	20000468 	.word	0x20000468

0801834c <_localeconv_r>:
 801834c:	4800      	ldr	r0, [pc, #0]	; (8018350 <_localeconv_r+0x4>)
 801834e:	4770      	bx	lr
 8018350:	200009c0 	.word	0x200009c0

08018354 <__retarget_lock_init_recursive>:
 8018354:	4770      	bx	lr

08018356 <__retarget_lock_close_recursive>:
 8018356:	4770      	bx	lr

08018358 <__retarget_lock_acquire>:
 8018358:	4770      	bx	lr

0801835a <__retarget_lock_acquire_recursive>:
 801835a:	4770      	bx	lr

0801835c <__retarget_lock_release>:
 801835c:	4770      	bx	lr

0801835e <__retarget_lock_release_recursive>:
 801835e:	4770      	bx	lr

08018360 <__swhatbuf_r>:
 8018360:	b570      	push	{r4, r5, r6, lr}
 8018362:	460e      	mov	r6, r1
 8018364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018368:	2900      	cmp	r1, #0
 801836a:	b096      	sub	sp, #88	; 0x58
 801836c:	4614      	mov	r4, r2
 801836e:	461d      	mov	r5, r3
 8018370:	da09      	bge.n	8018386 <__swhatbuf_r+0x26>
 8018372:	89b3      	ldrh	r3, [r6, #12]
 8018374:	2200      	movs	r2, #0
 8018376:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801837a:	602a      	str	r2, [r5, #0]
 801837c:	d116      	bne.n	80183ac <__swhatbuf_r+0x4c>
 801837e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018382:	6023      	str	r3, [r4, #0]
 8018384:	e015      	b.n	80183b2 <__swhatbuf_r+0x52>
 8018386:	466a      	mov	r2, sp
 8018388:	f002 fe48 	bl	801b01c <_fstat_r>
 801838c:	2800      	cmp	r0, #0
 801838e:	dbf0      	blt.n	8018372 <__swhatbuf_r+0x12>
 8018390:	9a01      	ldr	r2, [sp, #4]
 8018392:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018396:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801839a:	425a      	negs	r2, r3
 801839c:	415a      	adcs	r2, r3
 801839e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80183a2:	602a      	str	r2, [r5, #0]
 80183a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80183a8:	6023      	str	r3, [r4, #0]
 80183aa:	e002      	b.n	80183b2 <__swhatbuf_r+0x52>
 80183ac:	2340      	movs	r3, #64	; 0x40
 80183ae:	6023      	str	r3, [r4, #0]
 80183b0:	4610      	mov	r0, r2
 80183b2:	b016      	add	sp, #88	; 0x58
 80183b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080183b8 <__smakebuf_r>:
 80183b8:	898b      	ldrh	r3, [r1, #12]
 80183ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80183bc:	079d      	lsls	r5, r3, #30
 80183be:	4606      	mov	r6, r0
 80183c0:	460c      	mov	r4, r1
 80183c2:	d507      	bpl.n	80183d4 <__smakebuf_r+0x1c>
 80183c4:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80183c8:	6023      	str	r3, [r4, #0]
 80183ca:	6123      	str	r3, [r4, #16]
 80183cc:	2301      	movs	r3, #1
 80183ce:	6163      	str	r3, [r4, #20]
 80183d0:	b002      	add	sp, #8
 80183d2:	bd70      	pop	{r4, r5, r6, pc}
 80183d4:	ab01      	add	r3, sp, #4
 80183d6:	466a      	mov	r2, sp
 80183d8:	f7ff ffc2 	bl	8018360 <__swhatbuf_r>
 80183dc:	9900      	ldr	r1, [sp, #0]
 80183de:	4605      	mov	r5, r0
 80183e0:	4630      	mov	r0, r6
 80183e2:	f000 f839 	bl	8018458 <_malloc_r>
 80183e6:	b948      	cbnz	r0, 80183fc <__smakebuf_r+0x44>
 80183e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183ec:	059a      	lsls	r2, r3, #22
 80183ee:	d4ef      	bmi.n	80183d0 <__smakebuf_r+0x18>
 80183f0:	f023 0303 	bic.w	r3, r3, #3
 80183f4:	f043 0302 	orr.w	r3, r3, #2
 80183f8:	81a3      	strh	r3, [r4, #12]
 80183fa:	e7e3      	b.n	80183c4 <__smakebuf_r+0xc>
 80183fc:	4b0d      	ldr	r3, [pc, #52]	; (8018434 <__smakebuf_r+0x7c>)
 80183fe:	63f3      	str	r3, [r6, #60]	; 0x3c
 8018400:	89a3      	ldrh	r3, [r4, #12]
 8018402:	6020      	str	r0, [r4, #0]
 8018404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018408:	81a3      	strh	r3, [r4, #12]
 801840a:	9b00      	ldr	r3, [sp, #0]
 801840c:	6163      	str	r3, [r4, #20]
 801840e:	9b01      	ldr	r3, [sp, #4]
 8018410:	6120      	str	r0, [r4, #16]
 8018412:	b15b      	cbz	r3, 801842c <__smakebuf_r+0x74>
 8018414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018418:	4630      	mov	r0, r6
 801841a:	f002 ff5b 	bl	801b2d4 <_isatty_r>
 801841e:	b128      	cbz	r0, 801842c <__smakebuf_r+0x74>
 8018420:	89a3      	ldrh	r3, [r4, #12]
 8018422:	f023 0303 	bic.w	r3, r3, #3
 8018426:	f043 0301 	orr.w	r3, r3, #1
 801842a:	81a3      	strh	r3, [r4, #12]
 801842c:	89a0      	ldrh	r0, [r4, #12]
 801842e:	4305      	orrs	r5, r0
 8018430:	81a5      	strh	r5, [r4, #12]
 8018432:	e7cd      	b.n	80183d0 <__smakebuf_r+0x18>
 8018434:	08017fa5 	.word	0x08017fa5

08018438 <malloc>:
 8018438:	4b02      	ldr	r3, [pc, #8]	; (8018444 <malloc+0xc>)
 801843a:	4601      	mov	r1, r0
 801843c:	6818      	ldr	r0, [r3, #0]
 801843e:	f000 b80b 	b.w	8018458 <_malloc_r>
 8018442:	bf00      	nop
 8018444:	2000002c 	.word	0x2000002c

08018448 <free>:
 8018448:	4b02      	ldr	r3, [pc, #8]	; (8018454 <free+0xc>)
 801844a:	4601      	mov	r1, r0
 801844c:	6818      	ldr	r0, [r3, #0]
 801844e:	f7ff be57 	b.w	8018100 <_free_r>
 8018452:	bf00      	nop
 8018454:	2000002c 	.word	0x2000002c

08018458 <_malloc_r>:
 8018458:	f101 030b 	add.w	r3, r1, #11
 801845c:	2b16      	cmp	r3, #22
 801845e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018462:	4605      	mov	r5, r0
 8018464:	d906      	bls.n	8018474 <_malloc_r+0x1c>
 8018466:	f033 0707 	bics.w	r7, r3, #7
 801846a:	d504      	bpl.n	8018476 <_malloc_r+0x1e>
 801846c:	230c      	movs	r3, #12
 801846e:	602b      	str	r3, [r5, #0]
 8018470:	2400      	movs	r4, #0
 8018472:	e1ae      	b.n	80187d2 <_malloc_r+0x37a>
 8018474:	2710      	movs	r7, #16
 8018476:	42b9      	cmp	r1, r7
 8018478:	d8f8      	bhi.n	801846c <_malloc_r+0x14>
 801847a:	4628      	mov	r0, r5
 801847c:	f000 fa2e 	bl	80188dc <__malloc_lock>
 8018480:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8018484:	4ec3      	ldr	r6, [pc, #780]	; (8018794 <_malloc_r+0x33c>)
 8018486:	d238      	bcs.n	80184fa <_malloc_r+0xa2>
 8018488:	f107 0208 	add.w	r2, r7, #8
 801848c:	4432      	add	r2, r6
 801848e:	f1a2 0108 	sub.w	r1, r2, #8
 8018492:	6854      	ldr	r4, [r2, #4]
 8018494:	428c      	cmp	r4, r1
 8018496:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801849a:	d102      	bne.n	80184a2 <_malloc_r+0x4a>
 801849c:	68d4      	ldr	r4, [r2, #12]
 801849e:	42a2      	cmp	r2, r4
 80184a0:	d010      	beq.n	80184c4 <_malloc_r+0x6c>
 80184a2:	6863      	ldr	r3, [r4, #4]
 80184a4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80184a8:	f023 0303 	bic.w	r3, r3, #3
 80184ac:	60ca      	str	r2, [r1, #12]
 80184ae:	4423      	add	r3, r4
 80184b0:	6091      	str	r1, [r2, #8]
 80184b2:	685a      	ldr	r2, [r3, #4]
 80184b4:	f042 0201 	orr.w	r2, r2, #1
 80184b8:	605a      	str	r2, [r3, #4]
 80184ba:	4628      	mov	r0, r5
 80184bc:	f000 fa14 	bl	80188e8 <__malloc_unlock>
 80184c0:	3408      	adds	r4, #8
 80184c2:	e186      	b.n	80187d2 <_malloc_r+0x37a>
 80184c4:	3302      	adds	r3, #2
 80184c6:	4ab4      	ldr	r2, [pc, #720]	; (8018798 <_malloc_r+0x340>)
 80184c8:	6934      	ldr	r4, [r6, #16]
 80184ca:	4294      	cmp	r4, r2
 80184cc:	4611      	mov	r1, r2
 80184ce:	d077      	beq.n	80185c0 <_malloc_r+0x168>
 80184d0:	6860      	ldr	r0, [r4, #4]
 80184d2:	f020 0c03 	bic.w	ip, r0, #3
 80184d6:	ebac 0007 	sub.w	r0, ip, r7
 80184da:	280f      	cmp	r0, #15
 80184dc:	dd48      	ble.n	8018570 <_malloc_r+0x118>
 80184de:	19e1      	adds	r1, r4, r7
 80184e0:	f040 0301 	orr.w	r3, r0, #1
 80184e4:	f047 0701 	orr.w	r7, r7, #1
 80184e8:	6067      	str	r7, [r4, #4]
 80184ea:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80184ee:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80184f2:	604b      	str	r3, [r1, #4]
 80184f4:	f844 000c 	str.w	r0, [r4, ip]
 80184f8:	e7df      	b.n	80184ba <_malloc_r+0x62>
 80184fa:	0a7b      	lsrs	r3, r7, #9
 80184fc:	d02a      	beq.n	8018554 <_malloc_r+0xfc>
 80184fe:	2b04      	cmp	r3, #4
 8018500:	d812      	bhi.n	8018528 <_malloc_r+0xd0>
 8018502:	09bb      	lsrs	r3, r7, #6
 8018504:	3338      	adds	r3, #56	; 0x38
 8018506:	1c5a      	adds	r2, r3, #1
 8018508:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801850c:	f1a2 0c08 	sub.w	ip, r2, #8
 8018510:	6854      	ldr	r4, [r2, #4]
 8018512:	4564      	cmp	r4, ip
 8018514:	d006      	beq.n	8018524 <_malloc_r+0xcc>
 8018516:	6862      	ldr	r2, [r4, #4]
 8018518:	f022 0203 	bic.w	r2, r2, #3
 801851c:	1bd0      	subs	r0, r2, r7
 801851e:	280f      	cmp	r0, #15
 8018520:	dd1c      	ble.n	801855c <_malloc_r+0x104>
 8018522:	3b01      	subs	r3, #1
 8018524:	3301      	adds	r3, #1
 8018526:	e7ce      	b.n	80184c6 <_malloc_r+0x6e>
 8018528:	2b14      	cmp	r3, #20
 801852a:	d801      	bhi.n	8018530 <_malloc_r+0xd8>
 801852c:	335b      	adds	r3, #91	; 0x5b
 801852e:	e7ea      	b.n	8018506 <_malloc_r+0xae>
 8018530:	2b54      	cmp	r3, #84	; 0x54
 8018532:	d802      	bhi.n	801853a <_malloc_r+0xe2>
 8018534:	0b3b      	lsrs	r3, r7, #12
 8018536:	336e      	adds	r3, #110	; 0x6e
 8018538:	e7e5      	b.n	8018506 <_malloc_r+0xae>
 801853a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801853e:	d802      	bhi.n	8018546 <_malloc_r+0xee>
 8018540:	0bfb      	lsrs	r3, r7, #15
 8018542:	3377      	adds	r3, #119	; 0x77
 8018544:	e7df      	b.n	8018506 <_malloc_r+0xae>
 8018546:	f240 5254 	movw	r2, #1364	; 0x554
 801854a:	4293      	cmp	r3, r2
 801854c:	d804      	bhi.n	8018558 <_malloc_r+0x100>
 801854e:	0cbb      	lsrs	r3, r7, #18
 8018550:	337c      	adds	r3, #124	; 0x7c
 8018552:	e7d8      	b.n	8018506 <_malloc_r+0xae>
 8018554:	233f      	movs	r3, #63	; 0x3f
 8018556:	e7d6      	b.n	8018506 <_malloc_r+0xae>
 8018558:	237e      	movs	r3, #126	; 0x7e
 801855a:	e7d4      	b.n	8018506 <_malloc_r+0xae>
 801855c:	2800      	cmp	r0, #0
 801855e:	68e1      	ldr	r1, [r4, #12]
 8018560:	db04      	blt.n	801856c <_malloc_r+0x114>
 8018562:	68a3      	ldr	r3, [r4, #8]
 8018564:	60d9      	str	r1, [r3, #12]
 8018566:	608b      	str	r3, [r1, #8]
 8018568:	18a3      	adds	r3, r4, r2
 801856a:	e7a2      	b.n	80184b2 <_malloc_r+0x5a>
 801856c:	460c      	mov	r4, r1
 801856e:	e7d0      	b.n	8018512 <_malloc_r+0xba>
 8018570:	2800      	cmp	r0, #0
 8018572:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8018576:	db07      	blt.n	8018588 <_malloc_r+0x130>
 8018578:	44a4      	add	ip, r4
 801857a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801857e:	f043 0301 	orr.w	r3, r3, #1
 8018582:	f8cc 3004 	str.w	r3, [ip, #4]
 8018586:	e798      	b.n	80184ba <_malloc_r+0x62>
 8018588:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801858c:	6870      	ldr	r0, [r6, #4]
 801858e:	f080 809e 	bcs.w	80186ce <_malloc_r+0x276>
 8018592:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8018596:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801859a:	f04f 0c01 	mov.w	ip, #1
 801859e:	3201      	adds	r2, #1
 80185a0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80185a4:	ea4c 0000 	orr.w	r0, ip, r0
 80185a8:	6070      	str	r0, [r6, #4]
 80185aa:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80185ae:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80185b2:	3808      	subs	r0, #8
 80185b4:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80185b8:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80185bc:	f8cc 400c 	str.w	r4, [ip, #12]
 80185c0:	2001      	movs	r0, #1
 80185c2:	109a      	asrs	r2, r3, #2
 80185c4:	fa00 f202 	lsl.w	r2, r0, r2
 80185c8:	6870      	ldr	r0, [r6, #4]
 80185ca:	4290      	cmp	r0, r2
 80185cc:	d326      	bcc.n	801861c <_malloc_r+0x1c4>
 80185ce:	4210      	tst	r0, r2
 80185d0:	d106      	bne.n	80185e0 <_malloc_r+0x188>
 80185d2:	f023 0303 	bic.w	r3, r3, #3
 80185d6:	0052      	lsls	r2, r2, #1
 80185d8:	4210      	tst	r0, r2
 80185da:	f103 0304 	add.w	r3, r3, #4
 80185de:	d0fa      	beq.n	80185d6 <_malloc_r+0x17e>
 80185e0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80185e4:	46c1      	mov	r9, r8
 80185e6:	469e      	mov	lr, r3
 80185e8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80185ec:	454c      	cmp	r4, r9
 80185ee:	f040 80b3 	bne.w	8018758 <_malloc_r+0x300>
 80185f2:	f10e 0e01 	add.w	lr, lr, #1
 80185f6:	f01e 0f03 	tst.w	lr, #3
 80185fa:	f109 0908 	add.w	r9, r9, #8
 80185fe:	d1f3      	bne.n	80185e8 <_malloc_r+0x190>
 8018600:	0798      	lsls	r0, r3, #30
 8018602:	f040 80ec 	bne.w	80187de <_malloc_r+0x386>
 8018606:	6873      	ldr	r3, [r6, #4]
 8018608:	ea23 0302 	bic.w	r3, r3, r2
 801860c:	6073      	str	r3, [r6, #4]
 801860e:	6870      	ldr	r0, [r6, #4]
 8018610:	0052      	lsls	r2, r2, #1
 8018612:	4290      	cmp	r0, r2
 8018614:	d302      	bcc.n	801861c <_malloc_r+0x1c4>
 8018616:	2a00      	cmp	r2, #0
 8018618:	f040 80ee 	bne.w	80187f8 <_malloc_r+0x3a0>
 801861c:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8018620:	f8db 1004 	ldr.w	r1, [fp, #4]
 8018624:	f021 0903 	bic.w	r9, r1, #3
 8018628:	45b9      	cmp	r9, r7
 801862a:	d304      	bcc.n	8018636 <_malloc_r+0x1de>
 801862c:	eba9 0207 	sub.w	r2, r9, r7
 8018630:	2a0f      	cmp	r2, #15
 8018632:	f300 8149 	bgt.w	80188c8 <_malloc_r+0x470>
 8018636:	4a59      	ldr	r2, [pc, #356]	; (801879c <_malloc_r+0x344>)
 8018638:	6811      	ldr	r1, [r2, #0]
 801863a:	3110      	adds	r1, #16
 801863c:	eb0b 0309 	add.w	r3, fp, r9
 8018640:	4439      	add	r1, r7
 8018642:	2008      	movs	r0, #8
 8018644:	9301      	str	r3, [sp, #4]
 8018646:	9100      	str	r1, [sp, #0]
 8018648:	f001 fe16 	bl	801a278 <sysconf>
 801864c:	4a54      	ldr	r2, [pc, #336]	; (80187a0 <_malloc_r+0x348>)
 801864e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8018652:	4680      	mov	r8, r0
 8018654:	6810      	ldr	r0, [r2, #0]
 8018656:	3001      	adds	r0, #1
 8018658:	bf1f      	itttt	ne
 801865a:	f101 31ff 	addne.w	r1, r1, #4294967295
 801865e:	4441      	addne	r1, r8
 8018660:	f1c8 0000 	rsbne	r0, r8, #0
 8018664:	4001      	andne	r1, r0
 8018666:	4628      	mov	r0, r5
 8018668:	e9cd 1300 	strd	r1, r3, [sp]
 801866c:	f000 fcaa 	bl	8018fc4 <_sbrk_r>
 8018670:	1c42      	adds	r2, r0, #1
 8018672:	4604      	mov	r4, r0
 8018674:	f000 80fc 	beq.w	8018870 <_malloc_r+0x418>
 8018678:	9b01      	ldr	r3, [sp, #4]
 801867a:	9900      	ldr	r1, [sp, #0]
 801867c:	4a48      	ldr	r2, [pc, #288]	; (80187a0 <_malloc_r+0x348>)
 801867e:	4283      	cmp	r3, r0
 8018680:	d902      	bls.n	8018688 <_malloc_r+0x230>
 8018682:	45b3      	cmp	fp, r6
 8018684:	f040 80f4 	bne.w	8018870 <_malloc_r+0x418>
 8018688:	f8df a120 	ldr.w	sl, [pc, #288]	; 80187ac <_malloc_r+0x354>
 801868c:	f8da 0000 	ldr.w	r0, [sl]
 8018690:	42a3      	cmp	r3, r4
 8018692:	eb00 0e01 	add.w	lr, r0, r1
 8018696:	f8ca e000 	str.w	lr, [sl]
 801869a:	f108 3cff 	add.w	ip, r8, #4294967295
 801869e:	f040 80ad 	bne.w	80187fc <_malloc_r+0x3a4>
 80186a2:	ea13 0f0c 	tst.w	r3, ip
 80186a6:	f040 80a9 	bne.w	80187fc <_malloc_r+0x3a4>
 80186aa:	68b3      	ldr	r3, [r6, #8]
 80186ac:	4449      	add	r1, r9
 80186ae:	f041 0101 	orr.w	r1, r1, #1
 80186b2:	6059      	str	r1, [r3, #4]
 80186b4:	4a3b      	ldr	r2, [pc, #236]	; (80187a4 <_malloc_r+0x34c>)
 80186b6:	f8da 3000 	ldr.w	r3, [sl]
 80186ba:	6811      	ldr	r1, [r2, #0]
 80186bc:	428b      	cmp	r3, r1
 80186be:	bf88      	it	hi
 80186c0:	6013      	strhi	r3, [r2, #0]
 80186c2:	4a39      	ldr	r2, [pc, #228]	; (80187a8 <_malloc_r+0x350>)
 80186c4:	6811      	ldr	r1, [r2, #0]
 80186c6:	428b      	cmp	r3, r1
 80186c8:	bf88      	it	hi
 80186ca:	6013      	strhi	r3, [r2, #0]
 80186cc:	e0d0      	b.n	8018870 <_malloc_r+0x418>
 80186ce:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80186d2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80186d6:	d218      	bcs.n	801870a <_malloc_r+0x2b2>
 80186d8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80186dc:	3238      	adds	r2, #56	; 0x38
 80186de:	f102 0e01 	add.w	lr, r2, #1
 80186e2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80186e6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80186ea:	45f0      	cmp	r8, lr
 80186ec:	d12b      	bne.n	8018746 <_malloc_r+0x2ee>
 80186ee:	1092      	asrs	r2, r2, #2
 80186f0:	f04f 0c01 	mov.w	ip, #1
 80186f4:	fa0c f202 	lsl.w	r2, ip, r2
 80186f8:	4310      	orrs	r0, r2
 80186fa:	6070      	str	r0, [r6, #4]
 80186fc:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8018700:	f8c8 4008 	str.w	r4, [r8, #8]
 8018704:	f8ce 400c 	str.w	r4, [lr, #12]
 8018708:	e75a      	b.n	80185c0 <_malloc_r+0x168>
 801870a:	2a14      	cmp	r2, #20
 801870c:	d801      	bhi.n	8018712 <_malloc_r+0x2ba>
 801870e:	325b      	adds	r2, #91	; 0x5b
 8018710:	e7e5      	b.n	80186de <_malloc_r+0x286>
 8018712:	2a54      	cmp	r2, #84	; 0x54
 8018714:	d803      	bhi.n	801871e <_malloc_r+0x2c6>
 8018716:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801871a:	326e      	adds	r2, #110	; 0x6e
 801871c:	e7df      	b.n	80186de <_malloc_r+0x286>
 801871e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8018722:	d803      	bhi.n	801872c <_malloc_r+0x2d4>
 8018724:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8018728:	3277      	adds	r2, #119	; 0x77
 801872a:	e7d8      	b.n	80186de <_malloc_r+0x286>
 801872c:	f240 5e54 	movw	lr, #1364	; 0x554
 8018730:	4572      	cmp	r2, lr
 8018732:	bf9a      	itte	ls
 8018734:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8018738:	327c      	addls	r2, #124	; 0x7c
 801873a:	227e      	movhi	r2, #126	; 0x7e
 801873c:	e7cf      	b.n	80186de <_malloc_r+0x286>
 801873e:	f8de e008 	ldr.w	lr, [lr, #8]
 8018742:	45f0      	cmp	r8, lr
 8018744:	d005      	beq.n	8018752 <_malloc_r+0x2fa>
 8018746:	f8de 2004 	ldr.w	r2, [lr, #4]
 801874a:	f022 0203 	bic.w	r2, r2, #3
 801874e:	4562      	cmp	r2, ip
 8018750:	d8f5      	bhi.n	801873e <_malloc_r+0x2e6>
 8018752:	f8de 800c 	ldr.w	r8, [lr, #12]
 8018756:	e7d1      	b.n	80186fc <_malloc_r+0x2a4>
 8018758:	6860      	ldr	r0, [r4, #4]
 801875a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801875e:	f020 0003 	bic.w	r0, r0, #3
 8018762:	eba0 0a07 	sub.w	sl, r0, r7
 8018766:	f1ba 0f0f 	cmp.w	sl, #15
 801876a:	dd21      	ble.n	80187b0 <_malloc_r+0x358>
 801876c:	68a3      	ldr	r3, [r4, #8]
 801876e:	19e2      	adds	r2, r4, r7
 8018770:	f047 0701 	orr.w	r7, r7, #1
 8018774:	6067      	str	r7, [r4, #4]
 8018776:	f8c3 c00c 	str.w	ip, [r3, #12]
 801877a:	f8cc 3008 	str.w	r3, [ip, #8]
 801877e:	f04a 0301 	orr.w	r3, sl, #1
 8018782:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8018786:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801878a:	6053      	str	r3, [r2, #4]
 801878c:	f844 a000 	str.w	sl, [r4, r0]
 8018790:	e693      	b.n	80184ba <_malloc_r+0x62>
 8018792:	bf00      	nop
 8018794:	200004c0 	.word	0x200004c0
 8018798:	200004c8 	.word	0x200004c8
 801879c:	20004c2c 	.word	0x20004c2c
 80187a0:	200008c8 	.word	0x200008c8
 80187a4:	20004c24 	.word	0x20004c24
 80187a8:	20004c28 	.word	0x20004c28
 80187ac:	20004bfc 	.word	0x20004bfc
 80187b0:	f1ba 0f00 	cmp.w	sl, #0
 80187b4:	db11      	blt.n	80187da <_malloc_r+0x382>
 80187b6:	4420      	add	r0, r4
 80187b8:	6843      	ldr	r3, [r0, #4]
 80187ba:	f043 0301 	orr.w	r3, r3, #1
 80187be:	6043      	str	r3, [r0, #4]
 80187c0:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80187c4:	4628      	mov	r0, r5
 80187c6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80187ca:	f8cc 3008 	str.w	r3, [ip, #8]
 80187ce:	f000 f88b 	bl	80188e8 <__malloc_unlock>
 80187d2:	4620      	mov	r0, r4
 80187d4:	b003      	add	sp, #12
 80187d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187da:	4664      	mov	r4, ip
 80187dc:	e706      	b.n	80185ec <_malloc_r+0x194>
 80187de:	f858 0908 	ldr.w	r0, [r8], #-8
 80187e2:	4540      	cmp	r0, r8
 80187e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80187e8:	f43f af0a 	beq.w	8018600 <_malloc_r+0x1a8>
 80187ec:	e70f      	b.n	801860e <_malloc_r+0x1b6>
 80187ee:	3304      	adds	r3, #4
 80187f0:	0052      	lsls	r2, r2, #1
 80187f2:	4210      	tst	r0, r2
 80187f4:	d0fb      	beq.n	80187ee <_malloc_r+0x396>
 80187f6:	e6f3      	b.n	80185e0 <_malloc_r+0x188>
 80187f8:	4673      	mov	r3, lr
 80187fa:	e7fa      	b.n	80187f2 <_malloc_r+0x39a>
 80187fc:	6810      	ldr	r0, [r2, #0]
 80187fe:	3001      	adds	r0, #1
 8018800:	bf1b      	ittet	ne
 8018802:	1ae3      	subne	r3, r4, r3
 8018804:	4473      	addne	r3, lr
 8018806:	6014      	streq	r4, [r2, #0]
 8018808:	f8ca 3000 	strne.w	r3, [sl]
 801880c:	f014 0307 	ands.w	r3, r4, #7
 8018810:	bf1a      	itte	ne
 8018812:	f1c3 0008 	rsbne	r0, r3, #8
 8018816:	1824      	addne	r4, r4, r0
 8018818:	4618      	moveq	r0, r3
 801881a:	1862      	adds	r2, r4, r1
 801881c:	ea02 010c 	and.w	r1, r2, ip
 8018820:	4480      	add	r8, r0
 8018822:	eba8 0801 	sub.w	r8, r8, r1
 8018826:	ea08 080c 	and.w	r8, r8, ip
 801882a:	4641      	mov	r1, r8
 801882c:	4628      	mov	r0, r5
 801882e:	9301      	str	r3, [sp, #4]
 8018830:	9200      	str	r2, [sp, #0]
 8018832:	f000 fbc7 	bl	8018fc4 <_sbrk_r>
 8018836:	1c43      	adds	r3, r0, #1
 8018838:	e9dd 2300 	ldrd	r2, r3, [sp]
 801883c:	d105      	bne.n	801884a <_malloc_r+0x3f2>
 801883e:	b32b      	cbz	r3, 801888c <_malloc_r+0x434>
 8018840:	f1a3 0008 	sub.w	r0, r3, #8
 8018844:	4410      	add	r0, r2
 8018846:	f04f 0800 	mov.w	r8, #0
 801884a:	f8da 2000 	ldr.w	r2, [sl]
 801884e:	60b4      	str	r4, [r6, #8]
 8018850:	1b00      	subs	r0, r0, r4
 8018852:	4440      	add	r0, r8
 8018854:	4442      	add	r2, r8
 8018856:	f040 0001 	orr.w	r0, r0, #1
 801885a:	45b3      	cmp	fp, r6
 801885c:	f8ca 2000 	str.w	r2, [sl]
 8018860:	6060      	str	r0, [r4, #4]
 8018862:	f43f af27 	beq.w	80186b4 <_malloc_r+0x25c>
 8018866:	f1b9 0f0f 	cmp.w	r9, #15
 801886a:	d812      	bhi.n	8018892 <_malloc_r+0x43a>
 801886c:	2301      	movs	r3, #1
 801886e:	6063      	str	r3, [r4, #4]
 8018870:	68b3      	ldr	r3, [r6, #8]
 8018872:	685b      	ldr	r3, [r3, #4]
 8018874:	f023 0303 	bic.w	r3, r3, #3
 8018878:	42bb      	cmp	r3, r7
 801887a:	eba3 0207 	sub.w	r2, r3, r7
 801887e:	d301      	bcc.n	8018884 <_malloc_r+0x42c>
 8018880:	2a0f      	cmp	r2, #15
 8018882:	dc21      	bgt.n	80188c8 <_malloc_r+0x470>
 8018884:	4628      	mov	r0, r5
 8018886:	f000 f82f 	bl	80188e8 <__malloc_unlock>
 801888a:	e5f1      	b.n	8018470 <_malloc_r+0x18>
 801888c:	4610      	mov	r0, r2
 801888e:	4698      	mov	r8, r3
 8018890:	e7db      	b.n	801884a <_malloc_r+0x3f2>
 8018892:	f8db 3004 	ldr.w	r3, [fp, #4]
 8018896:	f1a9 090c 	sub.w	r9, r9, #12
 801889a:	f029 0907 	bic.w	r9, r9, #7
 801889e:	f003 0301 	and.w	r3, r3, #1
 80188a2:	ea43 0309 	orr.w	r3, r3, r9
 80188a6:	f8cb 3004 	str.w	r3, [fp, #4]
 80188aa:	2205      	movs	r2, #5
 80188ac:	eb0b 0309 	add.w	r3, fp, r9
 80188b0:	f1b9 0f0f 	cmp.w	r9, #15
 80188b4:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80188b8:	f67f aefc 	bls.w	80186b4 <_malloc_r+0x25c>
 80188bc:	f10b 0108 	add.w	r1, fp, #8
 80188c0:	4628      	mov	r0, r5
 80188c2:	f7ff fc1d 	bl	8018100 <_free_r>
 80188c6:	e6f5      	b.n	80186b4 <_malloc_r+0x25c>
 80188c8:	68b4      	ldr	r4, [r6, #8]
 80188ca:	f047 0301 	orr.w	r3, r7, #1
 80188ce:	4427      	add	r7, r4
 80188d0:	f042 0201 	orr.w	r2, r2, #1
 80188d4:	6063      	str	r3, [r4, #4]
 80188d6:	60b7      	str	r7, [r6, #8]
 80188d8:	607a      	str	r2, [r7, #4]
 80188da:	e5ee      	b.n	80184ba <_malloc_r+0x62>

080188dc <__malloc_lock>:
 80188dc:	4801      	ldr	r0, [pc, #4]	; (80188e4 <__malloc_lock+0x8>)
 80188de:	f7ff bd3c 	b.w	801835a <__retarget_lock_acquire_recursive>
 80188e2:	bf00      	nop
 80188e4:	2000b660 	.word	0x2000b660

080188e8 <__malloc_unlock>:
 80188e8:	4801      	ldr	r0, [pc, #4]	; (80188f0 <__malloc_unlock+0x8>)
 80188ea:	f7ff bd38 	b.w	801835e <__retarget_lock_release_recursive>
 80188ee:	bf00      	nop
 80188f0:	2000b660 	.word	0x2000b660

080188f4 <_Balloc>:
 80188f4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80188f6:	b570      	push	{r4, r5, r6, lr}
 80188f8:	4605      	mov	r5, r0
 80188fa:	460c      	mov	r4, r1
 80188fc:	b17b      	cbz	r3, 801891e <_Balloc+0x2a>
 80188fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8018900:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018904:	b9a0      	cbnz	r0, 8018930 <_Balloc+0x3c>
 8018906:	2101      	movs	r1, #1
 8018908:	fa01 f604 	lsl.w	r6, r1, r4
 801890c:	1d72      	adds	r2, r6, #5
 801890e:	0092      	lsls	r2, r2, #2
 8018910:	4628      	mov	r0, r5
 8018912:	f002 fa63 	bl	801addc <_calloc_r>
 8018916:	b148      	cbz	r0, 801892c <_Balloc+0x38>
 8018918:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801891c:	e00b      	b.n	8018936 <_Balloc+0x42>
 801891e:	2221      	movs	r2, #33	; 0x21
 8018920:	2104      	movs	r1, #4
 8018922:	f002 fa5b 	bl	801addc <_calloc_r>
 8018926:	64e8      	str	r0, [r5, #76]	; 0x4c
 8018928:	2800      	cmp	r0, #0
 801892a:	d1e8      	bne.n	80188fe <_Balloc+0xa>
 801892c:	2000      	movs	r0, #0
 801892e:	bd70      	pop	{r4, r5, r6, pc}
 8018930:	6802      	ldr	r2, [r0, #0]
 8018932:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8018936:	2300      	movs	r3, #0
 8018938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801893c:	e7f7      	b.n	801892e <_Balloc+0x3a>

0801893e <_Bfree>:
 801893e:	b131      	cbz	r1, 801894e <_Bfree+0x10>
 8018940:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018942:	684a      	ldr	r2, [r1, #4]
 8018944:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018948:	6008      	str	r0, [r1, #0]
 801894a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801894e:	4770      	bx	lr

08018950 <__multadd>:
 8018950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018954:	690e      	ldr	r6, [r1, #16]
 8018956:	4607      	mov	r7, r0
 8018958:	4698      	mov	r8, r3
 801895a:	460c      	mov	r4, r1
 801895c:	f101 0014 	add.w	r0, r1, #20
 8018960:	2300      	movs	r3, #0
 8018962:	6805      	ldr	r5, [r0, #0]
 8018964:	b2a9      	uxth	r1, r5
 8018966:	fb02 8101 	mla	r1, r2, r1, r8
 801896a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801896e:	0c2d      	lsrs	r5, r5, #16
 8018970:	fb02 c505 	mla	r5, r2, r5, ip
 8018974:	b289      	uxth	r1, r1
 8018976:	3301      	adds	r3, #1
 8018978:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801897c:	429e      	cmp	r6, r3
 801897e:	f840 1b04 	str.w	r1, [r0], #4
 8018982:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018986:	dcec      	bgt.n	8018962 <__multadd+0x12>
 8018988:	f1b8 0f00 	cmp.w	r8, #0
 801898c:	d022      	beq.n	80189d4 <__multadd+0x84>
 801898e:	68a3      	ldr	r3, [r4, #8]
 8018990:	42b3      	cmp	r3, r6
 8018992:	dc19      	bgt.n	80189c8 <__multadd+0x78>
 8018994:	6861      	ldr	r1, [r4, #4]
 8018996:	4638      	mov	r0, r7
 8018998:	3101      	adds	r1, #1
 801899a:	f7ff ffab 	bl	80188f4 <_Balloc>
 801899e:	4605      	mov	r5, r0
 80189a0:	b928      	cbnz	r0, 80189ae <__multadd+0x5e>
 80189a2:	4602      	mov	r2, r0
 80189a4:	4b0d      	ldr	r3, [pc, #52]	; (80189dc <__multadd+0x8c>)
 80189a6:	480e      	ldr	r0, [pc, #56]	; (80189e0 <__multadd+0x90>)
 80189a8:	21b5      	movs	r1, #181	; 0xb5
 80189aa:	f002 f9f9 	bl	801ada0 <__assert_func>
 80189ae:	6922      	ldr	r2, [r4, #16]
 80189b0:	3202      	adds	r2, #2
 80189b2:	f104 010c 	add.w	r1, r4, #12
 80189b6:	0092      	lsls	r2, r2, #2
 80189b8:	300c      	adds	r0, #12
 80189ba:	f7fc fb07 	bl	8014fcc <memcpy>
 80189be:	4621      	mov	r1, r4
 80189c0:	4638      	mov	r0, r7
 80189c2:	f7ff ffbc 	bl	801893e <_Bfree>
 80189c6:	462c      	mov	r4, r5
 80189c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80189cc:	3601      	adds	r6, #1
 80189ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80189d2:	6126      	str	r6, [r4, #16]
 80189d4:	4620      	mov	r0, r4
 80189d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189da:	bf00      	nop
 80189dc:	0801fa4d 	.word	0x0801fa4d
 80189e0:	0801fb20 	.word	0x0801fb20

080189e4 <__hi0bits>:
 80189e4:	0c03      	lsrs	r3, r0, #16
 80189e6:	041b      	lsls	r3, r3, #16
 80189e8:	b9d3      	cbnz	r3, 8018a20 <__hi0bits+0x3c>
 80189ea:	0400      	lsls	r0, r0, #16
 80189ec:	2310      	movs	r3, #16
 80189ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80189f2:	bf04      	itt	eq
 80189f4:	0200      	lsleq	r0, r0, #8
 80189f6:	3308      	addeq	r3, #8
 80189f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80189fc:	bf04      	itt	eq
 80189fe:	0100      	lsleq	r0, r0, #4
 8018a00:	3304      	addeq	r3, #4
 8018a02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018a06:	bf04      	itt	eq
 8018a08:	0080      	lsleq	r0, r0, #2
 8018a0a:	3302      	addeq	r3, #2
 8018a0c:	2800      	cmp	r0, #0
 8018a0e:	db05      	blt.n	8018a1c <__hi0bits+0x38>
 8018a10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018a14:	f103 0301 	add.w	r3, r3, #1
 8018a18:	bf08      	it	eq
 8018a1a:	2320      	moveq	r3, #32
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	4770      	bx	lr
 8018a20:	2300      	movs	r3, #0
 8018a22:	e7e4      	b.n	80189ee <__hi0bits+0xa>

08018a24 <__lo0bits>:
 8018a24:	6803      	ldr	r3, [r0, #0]
 8018a26:	f013 0207 	ands.w	r2, r3, #7
 8018a2a:	4601      	mov	r1, r0
 8018a2c:	d00b      	beq.n	8018a46 <__lo0bits+0x22>
 8018a2e:	07da      	lsls	r2, r3, #31
 8018a30:	d424      	bmi.n	8018a7c <__lo0bits+0x58>
 8018a32:	0798      	lsls	r0, r3, #30
 8018a34:	bf49      	itett	mi
 8018a36:	085b      	lsrmi	r3, r3, #1
 8018a38:	089b      	lsrpl	r3, r3, #2
 8018a3a:	2001      	movmi	r0, #1
 8018a3c:	600b      	strmi	r3, [r1, #0]
 8018a3e:	bf5c      	itt	pl
 8018a40:	600b      	strpl	r3, [r1, #0]
 8018a42:	2002      	movpl	r0, #2
 8018a44:	4770      	bx	lr
 8018a46:	b298      	uxth	r0, r3
 8018a48:	b9b0      	cbnz	r0, 8018a78 <__lo0bits+0x54>
 8018a4a:	0c1b      	lsrs	r3, r3, #16
 8018a4c:	2010      	movs	r0, #16
 8018a4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018a52:	bf04      	itt	eq
 8018a54:	0a1b      	lsreq	r3, r3, #8
 8018a56:	3008      	addeq	r0, #8
 8018a58:	071a      	lsls	r2, r3, #28
 8018a5a:	bf04      	itt	eq
 8018a5c:	091b      	lsreq	r3, r3, #4
 8018a5e:	3004      	addeq	r0, #4
 8018a60:	079a      	lsls	r2, r3, #30
 8018a62:	bf04      	itt	eq
 8018a64:	089b      	lsreq	r3, r3, #2
 8018a66:	3002      	addeq	r0, #2
 8018a68:	07da      	lsls	r2, r3, #31
 8018a6a:	d403      	bmi.n	8018a74 <__lo0bits+0x50>
 8018a6c:	085b      	lsrs	r3, r3, #1
 8018a6e:	f100 0001 	add.w	r0, r0, #1
 8018a72:	d005      	beq.n	8018a80 <__lo0bits+0x5c>
 8018a74:	600b      	str	r3, [r1, #0]
 8018a76:	4770      	bx	lr
 8018a78:	4610      	mov	r0, r2
 8018a7a:	e7e8      	b.n	8018a4e <__lo0bits+0x2a>
 8018a7c:	2000      	movs	r0, #0
 8018a7e:	4770      	bx	lr
 8018a80:	2020      	movs	r0, #32
 8018a82:	4770      	bx	lr

08018a84 <__i2b>:
 8018a84:	b510      	push	{r4, lr}
 8018a86:	460c      	mov	r4, r1
 8018a88:	2101      	movs	r1, #1
 8018a8a:	f7ff ff33 	bl	80188f4 <_Balloc>
 8018a8e:	4602      	mov	r2, r0
 8018a90:	b928      	cbnz	r0, 8018a9e <__i2b+0x1a>
 8018a92:	4b05      	ldr	r3, [pc, #20]	; (8018aa8 <__i2b+0x24>)
 8018a94:	4805      	ldr	r0, [pc, #20]	; (8018aac <__i2b+0x28>)
 8018a96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018a9a:	f002 f981 	bl	801ada0 <__assert_func>
 8018a9e:	2301      	movs	r3, #1
 8018aa0:	6144      	str	r4, [r0, #20]
 8018aa2:	6103      	str	r3, [r0, #16]
 8018aa4:	bd10      	pop	{r4, pc}
 8018aa6:	bf00      	nop
 8018aa8:	0801fa4d 	.word	0x0801fa4d
 8018aac:	0801fb20 	.word	0x0801fb20

08018ab0 <__multiply>:
 8018ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ab4:	4614      	mov	r4, r2
 8018ab6:	690a      	ldr	r2, [r1, #16]
 8018ab8:	6923      	ldr	r3, [r4, #16]
 8018aba:	429a      	cmp	r2, r3
 8018abc:	bfb8      	it	lt
 8018abe:	460b      	movlt	r3, r1
 8018ac0:	460d      	mov	r5, r1
 8018ac2:	bfbc      	itt	lt
 8018ac4:	4625      	movlt	r5, r4
 8018ac6:	461c      	movlt	r4, r3
 8018ac8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018acc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018ad0:	68ab      	ldr	r3, [r5, #8]
 8018ad2:	6869      	ldr	r1, [r5, #4]
 8018ad4:	eb0a 0709 	add.w	r7, sl, r9
 8018ad8:	42bb      	cmp	r3, r7
 8018ada:	b085      	sub	sp, #20
 8018adc:	bfb8      	it	lt
 8018ade:	3101      	addlt	r1, #1
 8018ae0:	f7ff ff08 	bl	80188f4 <_Balloc>
 8018ae4:	b930      	cbnz	r0, 8018af4 <__multiply+0x44>
 8018ae6:	4602      	mov	r2, r0
 8018ae8:	4b42      	ldr	r3, [pc, #264]	; (8018bf4 <__multiply+0x144>)
 8018aea:	4843      	ldr	r0, [pc, #268]	; (8018bf8 <__multiply+0x148>)
 8018aec:	f240 115d 	movw	r1, #349	; 0x15d
 8018af0:	f002 f956 	bl	801ada0 <__assert_func>
 8018af4:	f100 0614 	add.w	r6, r0, #20
 8018af8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018afc:	4633      	mov	r3, r6
 8018afe:	2200      	movs	r2, #0
 8018b00:	4543      	cmp	r3, r8
 8018b02:	d31e      	bcc.n	8018b42 <__multiply+0x92>
 8018b04:	f105 0c14 	add.w	ip, r5, #20
 8018b08:	f104 0314 	add.w	r3, r4, #20
 8018b0c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018b10:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018b14:	9202      	str	r2, [sp, #8]
 8018b16:	ebac 0205 	sub.w	r2, ip, r5
 8018b1a:	3a15      	subs	r2, #21
 8018b1c:	f022 0203 	bic.w	r2, r2, #3
 8018b20:	3204      	adds	r2, #4
 8018b22:	f105 0115 	add.w	r1, r5, #21
 8018b26:	458c      	cmp	ip, r1
 8018b28:	bf38      	it	cc
 8018b2a:	2204      	movcc	r2, #4
 8018b2c:	9201      	str	r2, [sp, #4]
 8018b2e:	9a02      	ldr	r2, [sp, #8]
 8018b30:	9303      	str	r3, [sp, #12]
 8018b32:	429a      	cmp	r2, r3
 8018b34:	d808      	bhi.n	8018b48 <__multiply+0x98>
 8018b36:	2f00      	cmp	r7, #0
 8018b38:	dc55      	bgt.n	8018be6 <__multiply+0x136>
 8018b3a:	6107      	str	r7, [r0, #16]
 8018b3c:	b005      	add	sp, #20
 8018b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b42:	f843 2b04 	str.w	r2, [r3], #4
 8018b46:	e7db      	b.n	8018b00 <__multiply+0x50>
 8018b48:	f8b3 a000 	ldrh.w	sl, [r3]
 8018b4c:	f1ba 0f00 	cmp.w	sl, #0
 8018b50:	d020      	beq.n	8018b94 <__multiply+0xe4>
 8018b52:	f105 0e14 	add.w	lr, r5, #20
 8018b56:	46b1      	mov	r9, r6
 8018b58:	2200      	movs	r2, #0
 8018b5a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018b5e:	f8d9 b000 	ldr.w	fp, [r9]
 8018b62:	b2a1      	uxth	r1, r4
 8018b64:	fa1f fb8b 	uxth.w	fp, fp
 8018b68:	fb0a b101 	mla	r1, sl, r1, fp
 8018b6c:	4411      	add	r1, r2
 8018b6e:	f8d9 2000 	ldr.w	r2, [r9]
 8018b72:	0c24      	lsrs	r4, r4, #16
 8018b74:	0c12      	lsrs	r2, r2, #16
 8018b76:	fb0a 2404 	mla	r4, sl, r4, r2
 8018b7a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018b7e:	b289      	uxth	r1, r1
 8018b80:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018b84:	45f4      	cmp	ip, lr
 8018b86:	f849 1b04 	str.w	r1, [r9], #4
 8018b8a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018b8e:	d8e4      	bhi.n	8018b5a <__multiply+0xaa>
 8018b90:	9901      	ldr	r1, [sp, #4]
 8018b92:	5072      	str	r2, [r6, r1]
 8018b94:	9a03      	ldr	r2, [sp, #12]
 8018b96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018b9a:	3304      	adds	r3, #4
 8018b9c:	f1b9 0f00 	cmp.w	r9, #0
 8018ba0:	d01f      	beq.n	8018be2 <__multiply+0x132>
 8018ba2:	6834      	ldr	r4, [r6, #0]
 8018ba4:	f105 0114 	add.w	r1, r5, #20
 8018ba8:	46b6      	mov	lr, r6
 8018baa:	f04f 0a00 	mov.w	sl, #0
 8018bae:	880a      	ldrh	r2, [r1, #0]
 8018bb0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018bb4:	fb09 b202 	mla	r2, r9, r2, fp
 8018bb8:	4492      	add	sl, r2
 8018bba:	b2a4      	uxth	r4, r4
 8018bbc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018bc0:	f84e 4b04 	str.w	r4, [lr], #4
 8018bc4:	f851 4b04 	ldr.w	r4, [r1], #4
 8018bc8:	f8be 2000 	ldrh.w	r2, [lr]
 8018bcc:	0c24      	lsrs	r4, r4, #16
 8018bce:	fb09 2404 	mla	r4, r9, r4, r2
 8018bd2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8018bd6:	458c      	cmp	ip, r1
 8018bd8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018bdc:	d8e7      	bhi.n	8018bae <__multiply+0xfe>
 8018bde:	9a01      	ldr	r2, [sp, #4]
 8018be0:	50b4      	str	r4, [r6, r2]
 8018be2:	3604      	adds	r6, #4
 8018be4:	e7a3      	b.n	8018b2e <__multiply+0x7e>
 8018be6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d1a5      	bne.n	8018b3a <__multiply+0x8a>
 8018bee:	3f01      	subs	r7, #1
 8018bf0:	e7a1      	b.n	8018b36 <__multiply+0x86>
 8018bf2:	bf00      	nop
 8018bf4:	0801fa4d 	.word	0x0801fa4d
 8018bf8:	0801fb20 	.word	0x0801fb20

08018bfc <__pow5mult>:
 8018bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c00:	4615      	mov	r5, r2
 8018c02:	f012 0203 	ands.w	r2, r2, #3
 8018c06:	4606      	mov	r6, r0
 8018c08:	460f      	mov	r7, r1
 8018c0a:	d007      	beq.n	8018c1c <__pow5mult+0x20>
 8018c0c:	4c1a      	ldr	r4, [pc, #104]	; (8018c78 <__pow5mult+0x7c>)
 8018c0e:	3a01      	subs	r2, #1
 8018c10:	2300      	movs	r3, #0
 8018c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c16:	f7ff fe9b 	bl	8018950 <__multadd>
 8018c1a:	4607      	mov	r7, r0
 8018c1c:	10ad      	asrs	r5, r5, #2
 8018c1e:	d027      	beq.n	8018c70 <__pow5mult+0x74>
 8018c20:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8018c22:	b944      	cbnz	r4, 8018c36 <__pow5mult+0x3a>
 8018c24:	f240 2171 	movw	r1, #625	; 0x271
 8018c28:	4630      	mov	r0, r6
 8018c2a:	f7ff ff2b 	bl	8018a84 <__i2b>
 8018c2e:	2300      	movs	r3, #0
 8018c30:	64b0      	str	r0, [r6, #72]	; 0x48
 8018c32:	4604      	mov	r4, r0
 8018c34:	6003      	str	r3, [r0, #0]
 8018c36:	f04f 0900 	mov.w	r9, #0
 8018c3a:	07eb      	lsls	r3, r5, #31
 8018c3c:	d50a      	bpl.n	8018c54 <__pow5mult+0x58>
 8018c3e:	4639      	mov	r1, r7
 8018c40:	4622      	mov	r2, r4
 8018c42:	4630      	mov	r0, r6
 8018c44:	f7ff ff34 	bl	8018ab0 <__multiply>
 8018c48:	4639      	mov	r1, r7
 8018c4a:	4680      	mov	r8, r0
 8018c4c:	4630      	mov	r0, r6
 8018c4e:	f7ff fe76 	bl	801893e <_Bfree>
 8018c52:	4647      	mov	r7, r8
 8018c54:	106d      	asrs	r5, r5, #1
 8018c56:	d00b      	beq.n	8018c70 <__pow5mult+0x74>
 8018c58:	6820      	ldr	r0, [r4, #0]
 8018c5a:	b938      	cbnz	r0, 8018c6c <__pow5mult+0x70>
 8018c5c:	4622      	mov	r2, r4
 8018c5e:	4621      	mov	r1, r4
 8018c60:	4630      	mov	r0, r6
 8018c62:	f7ff ff25 	bl	8018ab0 <__multiply>
 8018c66:	6020      	str	r0, [r4, #0]
 8018c68:	f8c0 9000 	str.w	r9, [r0]
 8018c6c:	4604      	mov	r4, r0
 8018c6e:	e7e4      	b.n	8018c3a <__pow5mult+0x3e>
 8018c70:	4638      	mov	r0, r7
 8018c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c76:	bf00      	nop
 8018c78:	0801fc70 	.word	0x0801fc70

08018c7c <__lshift>:
 8018c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c80:	460c      	mov	r4, r1
 8018c82:	6849      	ldr	r1, [r1, #4]
 8018c84:	6923      	ldr	r3, [r4, #16]
 8018c86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018c8a:	68a3      	ldr	r3, [r4, #8]
 8018c8c:	4607      	mov	r7, r0
 8018c8e:	4691      	mov	r9, r2
 8018c90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018c94:	f108 0601 	add.w	r6, r8, #1
 8018c98:	42b3      	cmp	r3, r6
 8018c9a:	db0b      	blt.n	8018cb4 <__lshift+0x38>
 8018c9c:	4638      	mov	r0, r7
 8018c9e:	f7ff fe29 	bl	80188f4 <_Balloc>
 8018ca2:	4605      	mov	r5, r0
 8018ca4:	b948      	cbnz	r0, 8018cba <__lshift+0x3e>
 8018ca6:	4602      	mov	r2, r0
 8018ca8:	4b28      	ldr	r3, [pc, #160]	; (8018d4c <__lshift+0xd0>)
 8018caa:	4829      	ldr	r0, [pc, #164]	; (8018d50 <__lshift+0xd4>)
 8018cac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018cb0:	f002 f876 	bl	801ada0 <__assert_func>
 8018cb4:	3101      	adds	r1, #1
 8018cb6:	005b      	lsls	r3, r3, #1
 8018cb8:	e7ee      	b.n	8018c98 <__lshift+0x1c>
 8018cba:	2300      	movs	r3, #0
 8018cbc:	f100 0114 	add.w	r1, r0, #20
 8018cc0:	f100 0210 	add.w	r2, r0, #16
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	4553      	cmp	r3, sl
 8018cc8:	db33      	blt.n	8018d32 <__lshift+0xb6>
 8018cca:	6920      	ldr	r0, [r4, #16]
 8018ccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018cd0:	f104 0314 	add.w	r3, r4, #20
 8018cd4:	f019 091f 	ands.w	r9, r9, #31
 8018cd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018cdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018ce0:	d02b      	beq.n	8018d3a <__lshift+0xbe>
 8018ce2:	f1c9 0e20 	rsb	lr, r9, #32
 8018ce6:	468a      	mov	sl, r1
 8018ce8:	2200      	movs	r2, #0
 8018cea:	6818      	ldr	r0, [r3, #0]
 8018cec:	fa00 f009 	lsl.w	r0, r0, r9
 8018cf0:	4302      	orrs	r2, r0
 8018cf2:	f84a 2b04 	str.w	r2, [sl], #4
 8018cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cfa:	459c      	cmp	ip, r3
 8018cfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8018d00:	d8f3      	bhi.n	8018cea <__lshift+0x6e>
 8018d02:	ebac 0304 	sub.w	r3, ip, r4
 8018d06:	3b15      	subs	r3, #21
 8018d08:	f023 0303 	bic.w	r3, r3, #3
 8018d0c:	3304      	adds	r3, #4
 8018d0e:	f104 0015 	add.w	r0, r4, #21
 8018d12:	4584      	cmp	ip, r0
 8018d14:	bf38      	it	cc
 8018d16:	2304      	movcc	r3, #4
 8018d18:	50ca      	str	r2, [r1, r3]
 8018d1a:	b10a      	cbz	r2, 8018d20 <__lshift+0xa4>
 8018d1c:	f108 0602 	add.w	r6, r8, #2
 8018d20:	3e01      	subs	r6, #1
 8018d22:	4638      	mov	r0, r7
 8018d24:	612e      	str	r6, [r5, #16]
 8018d26:	4621      	mov	r1, r4
 8018d28:	f7ff fe09 	bl	801893e <_Bfree>
 8018d2c:	4628      	mov	r0, r5
 8018d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d32:	f842 0f04 	str.w	r0, [r2, #4]!
 8018d36:	3301      	adds	r3, #1
 8018d38:	e7c5      	b.n	8018cc6 <__lshift+0x4a>
 8018d3a:	3904      	subs	r1, #4
 8018d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d40:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d44:	459c      	cmp	ip, r3
 8018d46:	d8f9      	bhi.n	8018d3c <__lshift+0xc0>
 8018d48:	e7ea      	b.n	8018d20 <__lshift+0xa4>
 8018d4a:	bf00      	nop
 8018d4c:	0801fa4d 	.word	0x0801fa4d
 8018d50:	0801fb20 	.word	0x0801fb20

08018d54 <__mcmp>:
 8018d54:	b530      	push	{r4, r5, lr}
 8018d56:	6902      	ldr	r2, [r0, #16]
 8018d58:	690c      	ldr	r4, [r1, #16]
 8018d5a:	1b12      	subs	r2, r2, r4
 8018d5c:	d10e      	bne.n	8018d7c <__mcmp+0x28>
 8018d5e:	f100 0314 	add.w	r3, r0, #20
 8018d62:	3114      	adds	r1, #20
 8018d64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018d68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018d6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018d70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018d74:	42a5      	cmp	r5, r4
 8018d76:	d003      	beq.n	8018d80 <__mcmp+0x2c>
 8018d78:	d305      	bcc.n	8018d86 <__mcmp+0x32>
 8018d7a:	2201      	movs	r2, #1
 8018d7c:	4610      	mov	r0, r2
 8018d7e:	bd30      	pop	{r4, r5, pc}
 8018d80:	4283      	cmp	r3, r0
 8018d82:	d3f3      	bcc.n	8018d6c <__mcmp+0x18>
 8018d84:	e7fa      	b.n	8018d7c <__mcmp+0x28>
 8018d86:	f04f 32ff 	mov.w	r2, #4294967295
 8018d8a:	e7f7      	b.n	8018d7c <__mcmp+0x28>

08018d8c <__mdiff>:
 8018d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d90:	460c      	mov	r4, r1
 8018d92:	4606      	mov	r6, r0
 8018d94:	4611      	mov	r1, r2
 8018d96:	4620      	mov	r0, r4
 8018d98:	4617      	mov	r7, r2
 8018d9a:	f7ff ffdb 	bl	8018d54 <__mcmp>
 8018d9e:	1e05      	subs	r5, r0, #0
 8018da0:	d110      	bne.n	8018dc4 <__mdiff+0x38>
 8018da2:	4629      	mov	r1, r5
 8018da4:	4630      	mov	r0, r6
 8018da6:	f7ff fda5 	bl	80188f4 <_Balloc>
 8018daa:	b930      	cbnz	r0, 8018dba <__mdiff+0x2e>
 8018dac:	4b39      	ldr	r3, [pc, #228]	; (8018e94 <__mdiff+0x108>)
 8018dae:	4602      	mov	r2, r0
 8018db0:	f240 2132 	movw	r1, #562	; 0x232
 8018db4:	4838      	ldr	r0, [pc, #224]	; (8018e98 <__mdiff+0x10c>)
 8018db6:	f001 fff3 	bl	801ada0 <__assert_func>
 8018dba:	2301      	movs	r3, #1
 8018dbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dc4:	bfa4      	itt	ge
 8018dc6:	463b      	movge	r3, r7
 8018dc8:	4627      	movge	r7, r4
 8018dca:	4630      	mov	r0, r6
 8018dcc:	6879      	ldr	r1, [r7, #4]
 8018dce:	bfa6      	itte	ge
 8018dd0:	461c      	movge	r4, r3
 8018dd2:	2500      	movge	r5, #0
 8018dd4:	2501      	movlt	r5, #1
 8018dd6:	f7ff fd8d 	bl	80188f4 <_Balloc>
 8018dda:	b920      	cbnz	r0, 8018de6 <__mdiff+0x5a>
 8018ddc:	4b2d      	ldr	r3, [pc, #180]	; (8018e94 <__mdiff+0x108>)
 8018dde:	4602      	mov	r2, r0
 8018de0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018de4:	e7e6      	b.n	8018db4 <__mdiff+0x28>
 8018de6:	693e      	ldr	r6, [r7, #16]
 8018de8:	60c5      	str	r5, [r0, #12]
 8018dea:	6925      	ldr	r5, [r4, #16]
 8018dec:	f107 0114 	add.w	r1, r7, #20
 8018df0:	f104 0914 	add.w	r9, r4, #20
 8018df4:	f100 0e14 	add.w	lr, r0, #20
 8018df8:	f107 0210 	add.w	r2, r7, #16
 8018dfc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018e00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018e04:	46f2      	mov	sl, lr
 8018e06:	2700      	movs	r7, #0
 8018e08:	f859 3b04 	ldr.w	r3, [r9], #4
 8018e0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018e10:	fa1f f883 	uxth.w	r8, r3
 8018e14:	fa17 f78b 	uxtah	r7, r7, fp
 8018e18:	0c1b      	lsrs	r3, r3, #16
 8018e1a:	eba7 0808 	sub.w	r8, r7, r8
 8018e1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018e22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018e26:	fa1f f888 	uxth.w	r8, r8
 8018e2a:	141f      	asrs	r7, r3, #16
 8018e2c:	454d      	cmp	r5, r9
 8018e2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018e32:	f84a 3b04 	str.w	r3, [sl], #4
 8018e36:	d8e7      	bhi.n	8018e08 <__mdiff+0x7c>
 8018e38:	1b2b      	subs	r3, r5, r4
 8018e3a:	3b15      	subs	r3, #21
 8018e3c:	f023 0303 	bic.w	r3, r3, #3
 8018e40:	3304      	adds	r3, #4
 8018e42:	3415      	adds	r4, #21
 8018e44:	42a5      	cmp	r5, r4
 8018e46:	bf38      	it	cc
 8018e48:	2304      	movcc	r3, #4
 8018e4a:	4419      	add	r1, r3
 8018e4c:	4473      	add	r3, lr
 8018e4e:	469e      	mov	lr, r3
 8018e50:	460d      	mov	r5, r1
 8018e52:	4565      	cmp	r5, ip
 8018e54:	d30e      	bcc.n	8018e74 <__mdiff+0xe8>
 8018e56:	f10c 0203 	add.w	r2, ip, #3
 8018e5a:	1a52      	subs	r2, r2, r1
 8018e5c:	f022 0203 	bic.w	r2, r2, #3
 8018e60:	3903      	subs	r1, #3
 8018e62:	458c      	cmp	ip, r1
 8018e64:	bf38      	it	cc
 8018e66:	2200      	movcc	r2, #0
 8018e68:	441a      	add	r2, r3
 8018e6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018e6e:	b17b      	cbz	r3, 8018e90 <__mdiff+0x104>
 8018e70:	6106      	str	r6, [r0, #16]
 8018e72:	e7a5      	b.n	8018dc0 <__mdiff+0x34>
 8018e74:	f855 8b04 	ldr.w	r8, [r5], #4
 8018e78:	fa17 f488 	uxtah	r4, r7, r8
 8018e7c:	1422      	asrs	r2, r4, #16
 8018e7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8018e82:	b2a4      	uxth	r4, r4
 8018e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018e88:	f84e 4b04 	str.w	r4, [lr], #4
 8018e8c:	1417      	asrs	r7, r2, #16
 8018e8e:	e7e0      	b.n	8018e52 <__mdiff+0xc6>
 8018e90:	3e01      	subs	r6, #1
 8018e92:	e7ea      	b.n	8018e6a <__mdiff+0xde>
 8018e94:	0801fa4d 	.word	0x0801fa4d
 8018e98:	0801fb20 	.word	0x0801fb20

08018e9c <__d2b>:
 8018e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018ea0:	4689      	mov	r9, r1
 8018ea2:	2101      	movs	r1, #1
 8018ea4:	ec57 6b10 	vmov	r6, r7, d0
 8018ea8:	4690      	mov	r8, r2
 8018eaa:	f7ff fd23 	bl	80188f4 <_Balloc>
 8018eae:	4604      	mov	r4, r0
 8018eb0:	b930      	cbnz	r0, 8018ec0 <__d2b+0x24>
 8018eb2:	4602      	mov	r2, r0
 8018eb4:	4b25      	ldr	r3, [pc, #148]	; (8018f4c <__d2b+0xb0>)
 8018eb6:	4826      	ldr	r0, [pc, #152]	; (8018f50 <__d2b+0xb4>)
 8018eb8:	f240 310a 	movw	r1, #778	; 0x30a
 8018ebc:	f001 ff70 	bl	801ada0 <__assert_func>
 8018ec0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018ec4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018ec8:	bb35      	cbnz	r5, 8018f18 <__d2b+0x7c>
 8018eca:	2e00      	cmp	r6, #0
 8018ecc:	9301      	str	r3, [sp, #4]
 8018ece:	d028      	beq.n	8018f22 <__d2b+0x86>
 8018ed0:	4668      	mov	r0, sp
 8018ed2:	9600      	str	r6, [sp, #0]
 8018ed4:	f7ff fda6 	bl	8018a24 <__lo0bits>
 8018ed8:	9900      	ldr	r1, [sp, #0]
 8018eda:	b300      	cbz	r0, 8018f1e <__d2b+0x82>
 8018edc:	9a01      	ldr	r2, [sp, #4]
 8018ede:	f1c0 0320 	rsb	r3, r0, #32
 8018ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8018ee6:	430b      	orrs	r3, r1
 8018ee8:	40c2      	lsrs	r2, r0
 8018eea:	6163      	str	r3, [r4, #20]
 8018eec:	9201      	str	r2, [sp, #4]
 8018eee:	9b01      	ldr	r3, [sp, #4]
 8018ef0:	61a3      	str	r3, [r4, #24]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	bf14      	ite	ne
 8018ef6:	2202      	movne	r2, #2
 8018ef8:	2201      	moveq	r2, #1
 8018efa:	6122      	str	r2, [r4, #16]
 8018efc:	b1d5      	cbz	r5, 8018f34 <__d2b+0x98>
 8018efe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018f02:	4405      	add	r5, r0
 8018f04:	f8c9 5000 	str.w	r5, [r9]
 8018f08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f0c:	f8c8 0000 	str.w	r0, [r8]
 8018f10:	4620      	mov	r0, r4
 8018f12:	b003      	add	sp, #12
 8018f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f1c:	e7d5      	b.n	8018eca <__d2b+0x2e>
 8018f1e:	6161      	str	r1, [r4, #20]
 8018f20:	e7e5      	b.n	8018eee <__d2b+0x52>
 8018f22:	a801      	add	r0, sp, #4
 8018f24:	f7ff fd7e 	bl	8018a24 <__lo0bits>
 8018f28:	9b01      	ldr	r3, [sp, #4]
 8018f2a:	6163      	str	r3, [r4, #20]
 8018f2c:	2201      	movs	r2, #1
 8018f2e:	6122      	str	r2, [r4, #16]
 8018f30:	3020      	adds	r0, #32
 8018f32:	e7e3      	b.n	8018efc <__d2b+0x60>
 8018f34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018f38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018f3c:	f8c9 0000 	str.w	r0, [r9]
 8018f40:	6918      	ldr	r0, [r3, #16]
 8018f42:	f7ff fd4f 	bl	80189e4 <__hi0bits>
 8018f46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018f4a:	e7df      	b.n	8018f0c <__d2b+0x70>
 8018f4c:	0801fa4d 	.word	0x0801fa4d
 8018f50:	0801fb20 	.word	0x0801fb20

08018f54 <frexp>:
 8018f54:	b570      	push	{r4, r5, r6, lr}
 8018f56:	2100      	movs	r1, #0
 8018f58:	ec55 4b10 	vmov	r4, r5, d0
 8018f5c:	6001      	str	r1, [r0, #0]
 8018f5e:	4916      	ldr	r1, [pc, #88]	; (8018fb8 <frexp+0x64>)
 8018f60:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8018f64:	428a      	cmp	r2, r1
 8018f66:	4606      	mov	r6, r0
 8018f68:	462b      	mov	r3, r5
 8018f6a:	dc22      	bgt.n	8018fb2 <frexp+0x5e>
 8018f6c:	ee10 1a10 	vmov	r1, s0
 8018f70:	4311      	orrs	r1, r2
 8018f72:	d01e      	beq.n	8018fb2 <frexp+0x5e>
 8018f74:	4911      	ldr	r1, [pc, #68]	; (8018fbc <frexp+0x68>)
 8018f76:	4029      	ands	r1, r5
 8018f78:	b969      	cbnz	r1, 8018f96 <frexp+0x42>
 8018f7a:	4b11      	ldr	r3, [pc, #68]	; (8018fc0 <frexp+0x6c>)
 8018f7c:	2200      	movs	r2, #0
 8018f7e:	ee10 0a10 	vmov	r0, s0
 8018f82:	4629      	mov	r1, r5
 8018f84:	f7e7 fb62 	bl	800064c <__aeabi_dmul>
 8018f88:	460b      	mov	r3, r1
 8018f8a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8018f8e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8018f92:	4604      	mov	r4, r0
 8018f94:	6031      	str	r1, [r6, #0]
 8018f96:	6831      	ldr	r1, [r6, #0]
 8018f98:	1512      	asrs	r2, r2, #20
 8018f9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018f9e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8018fa2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018fa6:	440a      	add	r2, r1
 8018fa8:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8018fac:	6032      	str	r2, [r6, #0]
 8018fae:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8018fb2:	ec45 4b10 	vmov	d0, r4, r5
 8018fb6:	bd70      	pop	{r4, r5, r6, pc}
 8018fb8:	7fefffff 	.word	0x7fefffff
 8018fbc:	7ff00000 	.word	0x7ff00000
 8018fc0:	43500000 	.word	0x43500000

08018fc4 <_sbrk_r>:
 8018fc4:	b538      	push	{r3, r4, r5, lr}
 8018fc6:	4d06      	ldr	r5, [pc, #24]	; (8018fe0 <_sbrk_r+0x1c>)
 8018fc8:	2300      	movs	r3, #0
 8018fca:	4604      	mov	r4, r0
 8018fcc:	4608      	mov	r0, r1
 8018fce:	602b      	str	r3, [r5, #0]
 8018fd0:	f7e9 fd26 	bl	8002a20 <_sbrk>
 8018fd4:	1c43      	adds	r3, r0, #1
 8018fd6:	d102      	bne.n	8018fde <_sbrk_r+0x1a>
 8018fd8:	682b      	ldr	r3, [r5, #0]
 8018fda:	b103      	cbz	r3, 8018fde <_sbrk_r+0x1a>
 8018fdc:	6023      	str	r3, [r4, #0]
 8018fde:	bd38      	pop	{r3, r4, r5, pc}
 8018fe0:	2000b654 	.word	0x2000b654

08018fe4 <siscanf>:
 8018fe4:	b40e      	push	{r1, r2, r3}
 8018fe6:	b510      	push	{r4, lr}
 8018fe8:	b09f      	sub	sp, #124	; 0x7c
 8018fea:	ac21      	add	r4, sp, #132	; 0x84
 8018fec:	f44f 7101 	mov.w	r1, #516	; 0x204
 8018ff0:	f854 2b04 	ldr.w	r2, [r4], #4
 8018ff4:	9201      	str	r2, [sp, #4]
 8018ff6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018ffa:	9004      	str	r0, [sp, #16]
 8018ffc:	9008      	str	r0, [sp, #32]
 8018ffe:	f7e7 f907 	bl	8000210 <strlen>
 8019002:	4b0c      	ldr	r3, [pc, #48]	; (8019034 <siscanf+0x50>)
 8019004:	9005      	str	r0, [sp, #20]
 8019006:	9009      	str	r0, [sp, #36]	; 0x24
 8019008:	930c      	str	r3, [sp, #48]	; 0x30
 801900a:	480b      	ldr	r0, [pc, #44]	; (8019038 <siscanf+0x54>)
 801900c:	9a01      	ldr	r2, [sp, #4]
 801900e:	6800      	ldr	r0, [r0, #0]
 8019010:	9403      	str	r4, [sp, #12]
 8019012:	2300      	movs	r3, #0
 8019014:	9310      	str	r3, [sp, #64]	; 0x40
 8019016:	9315      	str	r3, [sp, #84]	; 0x54
 8019018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801901c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019020:	a904      	add	r1, sp, #16
 8019022:	4623      	mov	r3, r4
 8019024:	f000 f984 	bl	8019330 <__ssvfiscanf_r>
 8019028:	b01f      	add	sp, #124	; 0x7c
 801902a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801902e:	b003      	add	sp, #12
 8019030:	4770      	bx	lr
 8019032:	bf00      	nop
 8019034:	0801905f 	.word	0x0801905f
 8019038:	2000002c 	.word	0x2000002c

0801903c <__sread>:
 801903c:	b510      	push	{r4, lr}
 801903e:	460c      	mov	r4, r1
 8019040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019044:	f002 f9a8 	bl	801b398 <_read_r>
 8019048:	2800      	cmp	r0, #0
 801904a:	bfab      	itete	ge
 801904c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 801904e:	89a3      	ldrhlt	r3, [r4, #12]
 8019050:	181b      	addge	r3, r3, r0
 8019052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019056:	bfac      	ite	ge
 8019058:	6523      	strge	r3, [r4, #80]	; 0x50
 801905a:	81a3      	strhlt	r3, [r4, #12]
 801905c:	bd10      	pop	{r4, pc}

0801905e <__seofread>:
 801905e:	2000      	movs	r0, #0
 8019060:	4770      	bx	lr

08019062 <__swrite>:
 8019062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019066:	461f      	mov	r7, r3
 8019068:	898b      	ldrh	r3, [r1, #12]
 801906a:	05db      	lsls	r3, r3, #23
 801906c:	4605      	mov	r5, r0
 801906e:	460c      	mov	r4, r1
 8019070:	4616      	mov	r6, r2
 8019072:	d505      	bpl.n	8019080 <__swrite+0x1e>
 8019074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019078:	2302      	movs	r3, #2
 801907a:	2200      	movs	r2, #0
 801907c:	f002 f94e 	bl	801b31c <_lseek_r>
 8019080:	89a3      	ldrh	r3, [r4, #12]
 8019082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801908a:	81a3      	strh	r3, [r4, #12]
 801908c:	4632      	mov	r2, r6
 801908e:	463b      	mov	r3, r7
 8019090:	4628      	mov	r0, r5
 8019092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019096:	f001 be31 	b.w	801acfc <_write_r>

0801909a <__sseek>:
 801909a:	b510      	push	{r4, lr}
 801909c:	460c      	mov	r4, r1
 801909e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190a2:	f002 f93b 	bl	801b31c <_lseek_r>
 80190a6:	1c43      	adds	r3, r0, #1
 80190a8:	89a3      	ldrh	r3, [r4, #12]
 80190aa:	bf15      	itete	ne
 80190ac:	6520      	strne	r0, [r4, #80]	; 0x50
 80190ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80190b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80190b6:	81a3      	strheq	r3, [r4, #12]
 80190b8:	bf18      	it	ne
 80190ba:	81a3      	strhne	r3, [r4, #12]
 80190bc:	bd10      	pop	{r4, pc}

080190be <__sclose>:
 80190be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190c2:	f001 beb9 	b.w	801ae38 <_close_r>

080190c6 <strcpy>:
 80190c6:	4603      	mov	r3, r0
 80190c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80190cc:	f803 2b01 	strb.w	r2, [r3], #1
 80190d0:	2a00      	cmp	r2, #0
 80190d2:	d1f9      	bne.n	80190c8 <strcpy+0x2>
 80190d4:	4770      	bx	lr

080190d6 <strncpy>:
 80190d6:	b510      	push	{r4, lr}
 80190d8:	3901      	subs	r1, #1
 80190da:	4603      	mov	r3, r0
 80190dc:	b132      	cbz	r2, 80190ec <strncpy+0x16>
 80190de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80190e2:	f803 4b01 	strb.w	r4, [r3], #1
 80190e6:	3a01      	subs	r2, #1
 80190e8:	2c00      	cmp	r4, #0
 80190ea:	d1f7      	bne.n	80190dc <strncpy+0x6>
 80190ec:	441a      	add	r2, r3
 80190ee:	2100      	movs	r1, #0
 80190f0:	4293      	cmp	r3, r2
 80190f2:	d100      	bne.n	80190f6 <strncpy+0x20>
 80190f4:	bd10      	pop	{r4, pc}
 80190f6:	f803 1b01 	strb.w	r1, [r3], #1
 80190fa:	e7f9      	b.n	80190f0 <strncpy+0x1a>

080190fc <_strtoul_l.isra.0>:
 80190fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019100:	4e3b      	ldr	r6, [pc, #236]	; (80191f0 <_strtoul_l.isra.0+0xf4>)
 8019102:	4686      	mov	lr, r0
 8019104:	468c      	mov	ip, r1
 8019106:	4660      	mov	r0, ip
 8019108:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801910c:	5da5      	ldrb	r5, [r4, r6]
 801910e:	f015 0508 	ands.w	r5, r5, #8
 8019112:	d1f8      	bne.n	8019106 <_strtoul_l.isra.0+0xa>
 8019114:	2c2d      	cmp	r4, #45	; 0x2d
 8019116:	d134      	bne.n	8019182 <_strtoul_l.isra.0+0x86>
 8019118:	f89c 4000 	ldrb.w	r4, [ip]
 801911c:	f04f 0801 	mov.w	r8, #1
 8019120:	f100 0c02 	add.w	ip, r0, #2
 8019124:	2b00      	cmp	r3, #0
 8019126:	d05e      	beq.n	80191e6 <_strtoul_l.isra.0+0xea>
 8019128:	2b10      	cmp	r3, #16
 801912a:	d10c      	bne.n	8019146 <_strtoul_l.isra.0+0x4a>
 801912c:	2c30      	cmp	r4, #48	; 0x30
 801912e:	d10a      	bne.n	8019146 <_strtoul_l.isra.0+0x4a>
 8019130:	f89c 0000 	ldrb.w	r0, [ip]
 8019134:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019138:	2858      	cmp	r0, #88	; 0x58
 801913a:	d14f      	bne.n	80191dc <_strtoul_l.isra.0+0xe0>
 801913c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8019140:	2310      	movs	r3, #16
 8019142:	f10c 0c02 	add.w	ip, ip, #2
 8019146:	f04f 37ff 	mov.w	r7, #4294967295
 801914a:	2500      	movs	r5, #0
 801914c:	fbb7 f7f3 	udiv	r7, r7, r3
 8019150:	fb03 f907 	mul.w	r9, r3, r7
 8019154:	ea6f 0909 	mvn.w	r9, r9
 8019158:	4628      	mov	r0, r5
 801915a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801915e:	2e09      	cmp	r6, #9
 8019160:	d818      	bhi.n	8019194 <_strtoul_l.isra.0+0x98>
 8019162:	4634      	mov	r4, r6
 8019164:	42a3      	cmp	r3, r4
 8019166:	dd24      	ble.n	80191b2 <_strtoul_l.isra.0+0xb6>
 8019168:	2d00      	cmp	r5, #0
 801916a:	db1f      	blt.n	80191ac <_strtoul_l.isra.0+0xb0>
 801916c:	4287      	cmp	r7, r0
 801916e:	d31d      	bcc.n	80191ac <_strtoul_l.isra.0+0xb0>
 8019170:	d101      	bne.n	8019176 <_strtoul_l.isra.0+0x7a>
 8019172:	45a1      	cmp	r9, r4
 8019174:	db1a      	blt.n	80191ac <_strtoul_l.isra.0+0xb0>
 8019176:	fb00 4003 	mla	r0, r0, r3, r4
 801917a:	2501      	movs	r5, #1
 801917c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8019180:	e7eb      	b.n	801915a <_strtoul_l.isra.0+0x5e>
 8019182:	2c2b      	cmp	r4, #43	; 0x2b
 8019184:	bf08      	it	eq
 8019186:	f89c 4000 	ldrbeq.w	r4, [ip]
 801918a:	46a8      	mov	r8, r5
 801918c:	bf08      	it	eq
 801918e:	f100 0c02 	addeq.w	ip, r0, #2
 8019192:	e7c7      	b.n	8019124 <_strtoul_l.isra.0+0x28>
 8019194:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8019198:	2e19      	cmp	r6, #25
 801919a:	d801      	bhi.n	80191a0 <_strtoul_l.isra.0+0xa4>
 801919c:	3c37      	subs	r4, #55	; 0x37
 801919e:	e7e1      	b.n	8019164 <_strtoul_l.isra.0+0x68>
 80191a0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80191a4:	2e19      	cmp	r6, #25
 80191a6:	d804      	bhi.n	80191b2 <_strtoul_l.isra.0+0xb6>
 80191a8:	3c57      	subs	r4, #87	; 0x57
 80191aa:	e7db      	b.n	8019164 <_strtoul_l.isra.0+0x68>
 80191ac:	f04f 35ff 	mov.w	r5, #4294967295
 80191b0:	e7e4      	b.n	801917c <_strtoul_l.isra.0+0x80>
 80191b2:	2d00      	cmp	r5, #0
 80191b4:	da07      	bge.n	80191c6 <_strtoul_l.isra.0+0xca>
 80191b6:	2322      	movs	r3, #34	; 0x22
 80191b8:	f8ce 3000 	str.w	r3, [lr]
 80191bc:	f04f 30ff 	mov.w	r0, #4294967295
 80191c0:	b942      	cbnz	r2, 80191d4 <_strtoul_l.isra.0+0xd8>
 80191c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191c6:	f1b8 0f00 	cmp.w	r8, #0
 80191ca:	d000      	beq.n	80191ce <_strtoul_l.isra.0+0xd2>
 80191cc:	4240      	negs	r0, r0
 80191ce:	2a00      	cmp	r2, #0
 80191d0:	d0f7      	beq.n	80191c2 <_strtoul_l.isra.0+0xc6>
 80191d2:	b10d      	cbz	r5, 80191d8 <_strtoul_l.isra.0+0xdc>
 80191d4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80191d8:	6011      	str	r1, [r2, #0]
 80191da:	e7f2      	b.n	80191c2 <_strtoul_l.isra.0+0xc6>
 80191dc:	2430      	movs	r4, #48	; 0x30
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d1b1      	bne.n	8019146 <_strtoul_l.isra.0+0x4a>
 80191e2:	2308      	movs	r3, #8
 80191e4:	e7af      	b.n	8019146 <_strtoul_l.isra.0+0x4a>
 80191e6:	2c30      	cmp	r4, #48	; 0x30
 80191e8:	d0a2      	beq.n	8019130 <_strtoul_l.isra.0+0x34>
 80191ea:	230a      	movs	r3, #10
 80191ec:	e7ab      	b.n	8019146 <_strtoul_l.isra.0+0x4a>
 80191ee:	bf00      	nop
 80191f0:	0801f849 	.word	0x0801f849

080191f4 <_strtoul_r>:
 80191f4:	f7ff bf82 	b.w	80190fc <_strtoul_l.isra.0>

080191f8 <strtoul>:
 80191f8:	4613      	mov	r3, r2
 80191fa:	460a      	mov	r2, r1
 80191fc:	4601      	mov	r1, r0
 80191fe:	4802      	ldr	r0, [pc, #8]	; (8019208 <strtoul+0x10>)
 8019200:	6800      	ldr	r0, [r0, #0]
 8019202:	f7ff bf7b 	b.w	80190fc <_strtoul_l.isra.0>
 8019206:	bf00      	nop
 8019208:	2000002c 	.word	0x2000002c

0801920c <_sungetc_r>:
 801920c:	b538      	push	{r3, r4, r5, lr}
 801920e:	1c4b      	adds	r3, r1, #1
 8019210:	4614      	mov	r4, r2
 8019212:	d103      	bne.n	801921c <_sungetc_r+0x10>
 8019214:	f04f 35ff 	mov.w	r5, #4294967295
 8019218:	4628      	mov	r0, r5
 801921a:	bd38      	pop	{r3, r4, r5, pc}
 801921c:	8993      	ldrh	r3, [r2, #12]
 801921e:	f023 0320 	bic.w	r3, r3, #32
 8019222:	8193      	strh	r3, [r2, #12]
 8019224:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019226:	6852      	ldr	r2, [r2, #4]
 8019228:	b2cd      	uxtb	r5, r1
 801922a:	b18b      	cbz	r3, 8019250 <_sungetc_r+0x44>
 801922c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801922e:	4293      	cmp	r3, r2
 8019230:	dd08      	ble.n	8019244 <_sungetc_r+0x38>
 8019232:	6823      	ldr	r3, [r4, #0]
 8019234:	1e5a      	subs	r2, r3, #1
 8019236:	6022      	str	r2, [r4, #0]
 8019238:	f803 5c01 	strb.w	r5, [r3, #-1]
 801923c:	6863      	ldr	r3, [r4, #4]
 801923e:	3301      	adds	r3, #1
 8019240:	6063      	str	r3, [r4, #4]
 8019242:	e7e9      	b.n	8019218 <_sungetc_r+0xc>
 8019244:	4621      	mov	r1, r4
 8019246:	f001 f824 	bl	801a292 <__submore>
 801924a:	2800      	cmp	r0, #0
 801924c:	d0f1      	beq.n	8019232 <_sungetc_r+0x26>
 801924e:	e7e1      	b.n	8019214 <_sungetc_r+0x8>
 8019250:	6921      	ldr	r1, [r4, #16]
 8019252:	6823      	ldr	r3, [r4, #0]
 8019254:	b151      	cbz	r1, 801926c <_sungetc_r+0x60>
 8019256:	4299      	cmp	r1, r3
 8019258:	d208      	bcs.n	801926c <_sungetc_r+0x60>
 801925a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801925e:	42a9      	cmp	r1, r5
 8019260:	d104      	bne.n	801926c <_sungetc_r+0x60>
 8019262:	3b01      	subs	r3, #1
 8019264:	3201      	adds	r2, #1
 8019266:	6023      	str	r3, [r4, #0]
 8019268:	6062      	str	r2, [r4, #4]
 801926a:	e7d5      	b.n	8019218 <_sungetc_r+0xc>
 801926c:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8019270:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8019274:	6323      	str	r3, [r4, #48]	; 0x30
 8019276:	2303      	movs	r3, #3
 8019278:	6363      	str	r3, [r4, #52]	; 0x34
 801927a:	4623      	mov	r3, r4
 801927c:	f803 5f42 	strb.w	r5, [r3, #66]!
 8019280:	6023      	str	r3, [r4, #0]
 8019282:	2301      	movs	r3, #1
 8019284:	e7dc      	b.n	8019240 <_sungetc_r+0x34>

08019286 <__ssrefill_r>:
 8019286:	b510      	push	{r4, lr}
 8019288:	460c      	mov	r4, r1
 801928a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 801928c:	b169      	cbz	r1, 80192aa <__ssrefill_r+0x24>
 801928e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8019292:	4299      	cmp	r1, r3
 8019294:	d001      	beq.n	801929a <__ssrefill_r+0x14>
 8019296:	f7fe ff33 	bl	8018100 <_free_r>
 801929a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801929c:	6063      	str	r3, [r4, #4]
 801929e:	2000      	movs	r0, #0
 80192a0:	6320      	str	r0, [r4, #48]	; 0x30
 80192a2:	b113      	cbz	r3, 80192aa <__ssrefill_r+0x24>
 80192a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80192a6:	6023      	str	r3, [r4, #0]
 80192a8:	bd10      	pop	{r4, pc}
 80192aa:	6923      	ldr	r3, [r4, #16]
 80192ac:	6023      	str	r3, [r4, #0]
 80192ae:	2300      	movs	r3, #0
 80192b0:	6063      	str	r3, [r4, #4]
 80192b2:	89a3      	ldrh	r3, [r4, #12]
 80192b4:	f043 0320 	orr.w	r3, r3, #32
 80192b8:	81a3      	strh	r3, [r4, #12]
 80192ba:	f04f 30ff 	mov.w	r0, #4294967295
 80192be:	e7f3      	b.n	80192a8 <__ssrefill_r+0x22>

080192c0 <_sfread_r>:
 80192c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192c4:	461f      	mov	r7, r3
 80192c6:	4613      	mov	r3, r2
 80192c8:	437b      	muls	r3, r7
 80192ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80192cc:	4682      	mov	sl, r0
 80192ce:	4688      	mov	r8, r1
 80192d0:	4691      	mov	r9, r2
 80192d2:	d027      	beq.n	8019324 <_sfread_r+0x64>
 80192d4:	461e      	mov	r6, r3
 80192d6:	e9d4 1500 	ldrd	r1, r5, [r4]
 80192da:	42b5      	cmp	r5, r6
 80192dc:	d30b      	bcc.n	80192f6 <_sfread_r+0x36>
 80192de:	4632      	mov	r2, r6
 80192e0:	4640      	mov	r0, r8
 80192e2:	f7fb fe73 	bl	8014fcc <memcpy>
 80192e6:	6862      	ldr	r2, [r4, #4]
 80192e8:	1b92      	subs	r2, r2, r6
 80192ea:	6062      	str	r2, [r4, #4]
 80192ec:	6822      	ldr	r2, [r4, #0]
 80192ee:	4432      	add	r2, r6
 80192f0:	6022      	str	r2, [r4, #0]
 80192f2:	463b      	mov	r3, r7
 80192f4:	e016      	b.n	8019324 <_sfread_r+0x64>
 80192f6:	462a      	mov	r2, r5
 80192f8:	4640      	mov	r0, r8
 80192fa:	9301      	str	r3, [sp, #4]
 80192fc:	f7fb fe66 	bl	8014fcc <memcpy>
 8019300:	6822      	ldr	r2, [r4, #0]
 8019302:	2300      	movs	r3, #0
 8019304:	442a      	add	r2, r5
 8019306:	6063      	str	r3, [r4, #4]
 8019308:	6022      	str	r2, [r4, #0]
 801930a:	4621      	mov	r1, r4
 801930c:	4650      	mov	r0, sl
 801930e:	f7ff ffba 	bl	8019286 <__ssrefill_r>
 8019312:	44a8      	add	r8, r5
 8019314:	9b01      	ldr	r3, [sp, #4]
 8019316:	eba6 0b05 	sub.w	fp, r6, r5
 801931a:	b138      	cbz	r0, 801932c <_sfread_r+0x6c>
 801931c:	441d      	add	r5, r3
 801931e:	1bad      	subs	r5, r5, r6
 8019320:	fbb5 f3f9 	udiv	r3, r5, r9
 8019324:	4618      	mov	r0, r3
 8019326:	b003      	add	sp, #12
 8019328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801932c:	465e      	mov	r6, fp
 801932e:	e7d2      	b.n	80192d6 <_sfread_r+0x16>

08019330 <__ssvfiscanf_r>:
 8019330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019334:	ed2d 8b02 	vpush	{d8}
 8019338:	b0df      	sub	sp, #380	; 0x17c
 801933a:	461e      	mov	r6, r3
 801933c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8019340:	af02      	add	r7, sp, #8
 8019342:	049d      	lsls	r5, r3, #18
 8019344:	ee08 0a10 	vmov	s16, r0
 8019348:	460c      	mov	r4, r1
 801934a:	613a      	str	r2, [r7, #16]
 801934c:	d406      	bmi.n	801935c <__ssvfiscanf_r+0x2c>
 801934e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019352:	818b      	strh	r3, [r1, #12]
 8019354:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8019356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801935a:	664b      	str	r3, [r1, #100]	; 0x64
 801935c:	2300      	movs	r3, #0
 801935e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8019362:	617b      	str	r3, [r7, #20]
 8019364:	469b      	mov	fp, r3
 8019366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019368:	627b      	str	r3, [r7, #36]	; 0x24
 801936a:	693a      	ldr	r2, [r7, #16]
 801936c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8019370:	613a      	str	r2, [r7, #16]
 8019372:	637b      	str	r3, [r7, #52]	; 0x34
 8019374:	2b00      	cmp	r3, #0
 8019376:	d035      	beq.n	80193e4 <__ssvfiscanf_r+0xb4>
 8019378:	4a9f      	ldr	r2, [pc, #636]	; (80195f8 <__ssvfiscanf_r+0x2c8>)
 801937a:	f813 9002 	ldrb.w	r9, [r3, r2]
 801937e:	f019 0908 	ands.w	r9, r9, #8
 8019382:	d019      	beq.n	80193b8 <__ssvfiscanf_r+0x88>
 8019384:	6863      	ldr	r3, [r4, #4]
 8019386:	2b00      	cmp	r3, #0
 8019388:	dd0e      	ble.n	80193a8 <__ssvfiscanf_r+0x78>
 801938a:	6823      	ldr	r3, [r4, #0]
 801938c:	499a      	ldr	r1, [pc, #616]	; (80195f8 <__ssvfiscanf_r+0x2c8>)
 801938e:	781a      	ldrb	r2, [r3, #0]
 8019390:	5c8a      	ldrb	r2, [r1, r2]
 8019392:	0710      	lsls	r0, r2, #28
 8019394:	d5e9      	bpl.n	801936a <__ssvfiscanf_r+0x3a>
 8019396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019398:	3201      	adds	r2, #1
 801939a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801939c:	6862      	ldr	r2, [r4, #4]
 801939e:	3301      	adds	r3, #1
 80193a0:	3a01      	subs	r2, #1
 80193a2:	6062      	str	r2, [r4, #4]
 80193a4:	6023      	str	r3, [r4, #0]
 80193a6:	e7ed      	b.n	8019384 <__ssvfiscanf_r+0x54>
 80193a8:	ee18 0a10 	vmov	r0, s16
 80193ac:	4621      	mov	r1, r4
 80193ae:	f7ff ff6a 	bl	8019286 <__ssrefill_r>
 80193b2:	2800      	cmp	r0, #0
 80193b4:	d0e9      	beq.n	801938a <__ssvfiscanf_r+0x5a>
 80193b6:	e7d8      	b.n	801936a <__ssvfiscanf_r+0x3a>
 80193b8:	2b25      	cmp	r3, #37	; 0x25
 80193ba:	f040 809f 	bne.w	80194fc <__ssvfiscanf_r+0x1cc>
 80193be:	693b      	ldr	r3, [r7, #16]
 80193c0:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 80193c4:	220a      	movs	r2, #10
 80193c6:	6939      	ldr	r1, [r7, #16]
 80193c8:	781d      	ldrb	r5, [r3, #0]
 80193ca:	3101      	adds	r1, #1
 80193cc:	2d7a      	cmp	r5, #122	; 0x7a
 80193ce:	6139      	str	r1, [r7, #16]
 80193d0:	d808      	bhi.n	80193e4 <__ssvfiscanf_r+0xb4>
 80193d2:	2d42      	cmp	r5, #66	; 0x42
 80193d4:	d80b      	bhi.n	80193ee <__ssvfiscanf_r+0xbe>
 80193d6:	2d2a      	cmp	r5, #42	; 0x2a
 80193d8:	f000 80b9 	beq.w	801954e <__ssvfiscanf_r+0x21e>
 80193dc:	d87e      	bhi.n	80194dc <__ssvfiscanf_r+0x1ac>
 80193de:	2d25      	cmp	r5, #37	; 0x25
 80193e0:	f000 808c 	beq.w	80194fc <__ssvfiscanf_r+0x1cc>
 80193e4:	f1bb 0f00 	cmp.w	fp, #0
 80193e8:	f000 815f 	beq.w	80196aa <__ssvfiscanf_r+0x37a>
 80193ec:	e158      	b.n	80196a0 <__ssvfiscanf_r+0x370>
 80193ee:	3d43      	subs	r5, #67	; 0x43
 80193f0:	2d37      	cmp	r5, #55	; 0x37
 80193f2:	d8f7      	bhi.n	80193e4 <__ssvfiscanf_r+0xb4>
 80193f4:	a101      	add	r1, pc, #4	; (adr r1, 80193fc <__ssvfiscanf_r+0xcc>)
 80193f6:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 80193fa:	bf00      	nop
 80193fc:	080196cf 	.word	0x080196cf
 8019400:	080195cb 	.word	0x080195cb
 8019404:	080193e5 	.word	0x080193e5
 8019408:	080193e5 	.word	0x080193e5
 801940c:	080193e5 	.word	0x080193e5
 8019410:	080193e5 	.word	0x080193e5
 8019414:	080193e5 	.word	0x080193e5
 8019418:	080193e5 	.word	0x080193e5
 801941c:	080193e5 	.word	0x080193e5
 8019420:	0801959d 	.word	0x0801959d
 8019424:	080193e5 	.word	0x080193e5
 8019428:	080193e5 	.word	0x080193e5
 801942c:	080195d3 	.word	0x080195d3
 8019430:	080193e5 	.word	0x080193e5
 8019434:	080193e5 	.word	0x080193e5
 8019438:	080193e5 	.word	0x080193e5
 801943c:	08019605 	.word	0x08019605
 8019440:	080193e5 	.word	0x080193e5
 8019444:	080193e5 	.word	0x080193e5
 8019448:	080193e5 	.word	0x080193e5
 801944c:	080193e5 	.word	0x080193e5
 8019450:	080195eb 	.word	0x080195eb
 8019454:	080193e5 	.word	0x080193e5
 8019458:	080193e5 	.word	0x080193e5
 801945c:	080196bb 	.word	0x080196bb
 8019460:	080193e5 	.word	0x080193e5
 8019464:	080193e5 	.word	0x080193e5
 8019468:	080193e5 	.word	0x080193e5
 801946c:	080193e5 	.word	0x080193e5
 8019470:	080193e5 	.word	0x080193e5
 8019474:	080193e5 	.word	0x080193e5
 8019478:	080193e5 	.word	0x080193e5
 801947c:	080196d3 	.word	0x080196d3
 8019480:	080195cf 	.word	0x080195cf
 8019484:	080193e5 	.word	0x080193e5
 8019488:	080193e5 	.word	0x080193e5
 801948c:	080193e5 	.word	0x080193e5
 8019490:	08019581 	.word	0x08019581
 8019494:	08019727 	.word	0x08019727
 8019498:	0801959d 	.word	0x0801959d
 801949c:	080193e5 	.word	0x080193e5
 80194a0:	08019563 	.word	0x08019563
 80194a4:	080195ad 	.word	0x080195ad
 80194a8:	080196e1 	.word	0x080196e1
 80194ac:	080195d7 	.word	0x080195d7
 80194b0:	080196db 	.word	0x080196db
 80194b4:	080193e5 	.word	0x080193e5
 80194b8:	080193e5 	.word	0x080193e5
 80194bc:	08019609 	.word	0x08019609
 80194c0:	080195a5 	.word	0x080195a5
 80194c4:	080195e3 	.word	0x080195e3
 80194c8:	080193e5 	.word	0x080193e5
 80194cc:	080193e5 	.word	0x080193e5
 80194d0:	080195eb 	.word	0x080195eb
 80194d4:	080193e5 	.word	0x080193e5
 80194d8:	080195a5 	.word	0x080195a5
 80194dc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80194e0:	2b09      	cmp	r3, #9
 80194e2:	f63f af7f 	bhi.w	80193e4 <__ssvfiscanf_r+0xb4>
 80194e6:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 80194ea:	f47f af7b 	bne.w	80193e4 <__ssvfiscanf_r+0xb4>
 80194ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194f0:	fb02 5503 	mla	r5, r2, r3, r5
 80194f4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80194f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80194fa:	e030      	b.n	801955e <__ssvfiscanf_r+0x22e>
 80194fc:	6863      	ldr	r3, [r4, #4]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	dd10      	ble.n	8019524 <__ssvfiscanf_r+0x1f4>
 8019502:	6823      	ldr	r3, [r4, #0]
 8019504:	693a      	ldr	r2, [r7, #16]
 8019506:	7819      	ldrb	r1, [r3, #0]
 8019508:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 801950c:	4291      	cmp	r1, r2
 801950e:	f47f af69 	bne.w	80193e4 <__ssvfiscanf_r+0xb4>
 8019512:	6862      	ldr	r2, [r4, #4]
 8019514:	3301      	adds	r3, #1
 8019516:	6023      	str	r3, [r4, #0]
 8019518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801951a:	3a01      	subs	r2, #1
 801951c:	6062      	str	r2, [r4, #4]
 801951e:	3301      	adds	r3, #1
 8019520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019522:	e722      	b.n	801936a <__ssvfiscanf_r+0x3a>
 8019524:	ee18 0a10 	vmov	r0, s16
 8019528:	4621      	mov	r1, r4
 801952a:	f7ff feac 	bl	8019286 <__ssrefill_r>
 801952e:	2800      	cmp	r0, #0
 8019530:	d0e7      	beq.n	8019502 <__ssvfiscanf_r+0x1d2>
 8019532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019534:	b11b      	cbz	r3, 801953e <__ssvfiscanf_r+0x20e>
 8019536:	89a3      	ldrh	r3, [r4, #12]
 8019538:	065b      	lsls	r3, r3, #25
 801953a:	f57f af53 	bpl.w	80193e4 <__ssvfiscanf_r+0xb4>
 801953e:	f1bb 0f00 	cmp.w	fp, #0
 8019542:	f040 80a1 	bne.w	8019688 <__ssvfiscanf_r+0x358>
 8019546:	f04f 33ff 	mov.w	r3, #4294967295
 801954a:	627b      	str	r3, [r7, #36]	; 0x24
 801954c:	e0ad      	b.n	80196aa <__ssvfiscanf_r+0x37a>
 801954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019550:	ea53 0309 	orrs.w	r3, r3, r9
 8019554:	62bb      	str	r3, [r7, #40]	; 0x28
 8019556:	f47f af45 	bne.w	80193e4 <__ssvfiscanf_r+0xb4>
 801955a:	f04f 0910 	mov.w	r9, #16
 801955e:	693b      	ldr	r3, [r7, #16]
 8019560:	e731      	b.n	80193c6 <__ssvfiscanf_r+0x96>
 8019562:	f019 0f0f 	tst.w	r9, #15
 8019566:	f47f af3d 	bne.w	80193e4 <__ssvfiscanf_r+0xb4>
 801956a:	7859      	ldrb	r1, [r3, #1]
 801956c:	296c      	cmp	r1, #108	; 0x6c
 801956e:	d104      	bne.n	801957a <__ssvfiscanf_r+0x24a>
 8019570:	3302      	adds	r3, #2
 8019572:	613b      	str	r3, [r7, #16]
 8019574:	f049 0902 	orr.w	r9, r9, #2
 8019578:	e7f1      	b.n	801955e <__ssvfiscanf_r+0x22e>
 801957a:	f049 0901 	orr.w	r9, r9, #1
 801957e:	e7ee      	b.n	801955e <__ssvfiscanf_r+0x22e>
 8019580:	f019 0f0f 	tst.w	r9, #15
 8019584:	f47f af2e 	bne.w	80193e4 <__ssvfiscanf_r+0xb4>
 8019588:	7859      	ldrb	r1, [r3, #1]
 801958a:	2968      	cmp	r1, #104	; 0x68
 801958c:	bf03      	ittte	eq
 801958e:	3302      	addeq	r3, #2
 8019590:	613b      	streq	r3, [r7, #16]
 8019592:	f049 0908 	orreq.w	r9, r9, #8
 8019596:	f049 0904 	orrne.w	r9, r9, #4
 801959a:	e7e0      	b.n	801955e <__ssvfiscanf_r+0x22e>
 801959c:	f019 0f0f 	tst.w	r9, #15
 80195a0:	d0e8      	beq.n	8019574 <__ssvfiscanf_r+0x244>
 80195a2:	e71f      	b.n	80193e4 <__ssvfiscanf_r+0xb4>
 80195a4:	f019 0f0f 	tst.w	r9, #15
 80195a8:	d0d9      	beq.n	801955e <__ssvfiscanf_r+0x22e>
 80195aa:	e71b      	b.n	80193e4 <__ssvfiscanf_r+0xb4>
 80195ac:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 80195b0:	f47f af18 	bne.w	80193e4 <__ssvfiscanf_r+0xb4>
 80195b4:	f1bb 0f00 	cmp.w	fp, #0
 80195b8:	d104      	bne.n	80195c4 <__ssvfiscanf_r+0x294>
 80195ba:	b082      	sub	sp, #8
 80195bc:	f10d 0b08 	add.w	fp, sp, #8
 80195c0:	e9cb 3300 	strd	r3, r3, [fp]
 80195c4:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 80195c8:	e7c9      	b.n	801955e <__ssvfiscanf_r+0x22e>
 80195ca:	f049 0901 	orr.w	r9, r9, #1
 80195ce:	4b0b      	ldr	r3, [pc, #44]	; (80195fc <__ssvfiscanf_r+0x2cc>)
 80195d0:	e008      	b.n	80195e4 <__ssvfiscanf_r+0x2b4>
 80195d2:	f049 0901 	orr.w	r9, r9, #1
 80195d6:	4b0a      	ldr	r3, [pc, #40]	; (8019600 <__ssvfiscanf_r+0x2d0>)
 80195d8:	617b      	str	r3, [r7, #20]
 80195da:	2308      	movs	r3, #8
 80195dc:	61fb      	str	r3, [r7, #28]
 80195de:	2503      	movs	r5, #3
 80195e0:	e013      	b.n	801960a <__ssvfiscanf_r+0x2da>
 80195e2:	4b07      	ldr	r3, [pc, #28]	; (8019600 <__ssvfiscanf_r+0x2d0>)
 80195e4:	617b      	str	r3, [r7, #20]
 80195e6:	230a      	movs	r3, #10
 80195e8:	e7f8      	b.n	80195dc <__ssvfiscanf_r+0x2ac>
 80195ea:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 80195ee:	4b04      	ldr	r3, [pc, #16]	; (8019600 <__ssvfiscanf_r+0x2d0>)
 80195f0:	617b      	str	r3, [r7, #20]
 80195f2:	2310      	movs	r3, #16
 80195f4:	e7f2      	b.n	80195dc <__ssvfiscanf_r+0x2ac>
 80195f6:	bf00      	nop
 80195f8:	0801f849 	.word	0x0801f849
 80195fc:	080156b5 	.word	0x080156b5
 8019600:	080191f5 	.word	0x080191f5
 8019604:	f049 0901 	orr.w	r9, r9, #1
 8019608:	2502      	movs	r5, #2
 801960a:	6863      	ldr	r3, [r4, #4]
 801960c:	2b00      	cmp	r3, #0
 801960e:	f340 808e 	ble.w	801972e <__ssvfiscanf_r+0x3fe>
 8019612:	f019 0f40 	tst.w	r9, #64	; 0x40
 8019616:	d106      	bne.n	8019626 <__ssvfiscanf_r+0x2f6>
 8019618:	6823      	ldr	r3, [r4, #0]
 801961a:	49b3      	ldr	r1, [pc, #716]	; (80198e8 <__ssvfiscanf_r+0x5b8>)
 801961c:	781a      	ldrb	r2, [r3, #0]
 801961e:	5c52      	ldrb	r2, [r2, r1]
 8019620:	0711      	lsls	r1, r2, #28
 8019622:	f100 808d 	bmi.w	8019740 <__ssvfiscanf_r+0x410>
 8019626:	2d02      	cmp	r5, #2
 8019628:	f000 8394 	beq.w	8019d54 <__ssvfiscanf_r+0xa24>
 801962c:	2d03      	cmp	r5, #3
 801962e:	f000 8535 	beq.w	801a09c <__ssvfiscanf_r+0xd6c>
 8019632:	f009 0310 	and.w	r3, r9, #16
 8019636:	2d01      	cmp	r5, #1
 8019638:	61bb      	str	r3, [r7, #24]
 801963a:	f009 0301 	and.w	r3, r9, #1
 801963e:	f000 81cc 	beq.w	80199da <__ssvfiscanf_r+0x6aa>
 8019642:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8019644:	2d01      	cmp	r5, #1
 8019646:	bf38      	it	cc
 8019648:	2501      	movcc	r5, #1
 801964a:	2b00      	cmp	r3, #0
 801964c:	f000 8150 	beq.w	80198f0 <__ssvfiscanf_r+0x5c0>
 8019650:	69bb      	ldr	r3, [r7, #24]
 8019652:	2b00      	cmp	r3, #0
 8019654:	f040 810d 	bne.w	8019872 <__ssvfiscanf_r+0x542>
 8019658:	4633      	mov	r3, r6
 801965a:	f019 0f80 	tst.w	r9, #128	; 0x80
 801965e:	f853 6b04 	ldr.w	r6, [r3], #4
 8019662:	62bb      	str	r3, [r7, #40]	; 0x28
 8019664:	f000 810c 	beq.w	8019880 <__ssvfiscanf_r+0x550>
 8019668:	b146      	cbz	r6, 801967c <__ssvfiscanf_r+0x34c>
 801966a:	2080      	movs	r0, #128	; 0x80
 801966c:	f7fe fee4 	bl	8018438 <malloc>
 8019670:	4680      	mov	r8, r0
 8019672:	2800      	cmp	r0, #0
 8019674:	d178      	bne.n	8019768 <__ssvfiscanf_r+0x438>
 8019676:	f04f 33ff 	mov.w	r3, #4294967295
 801967a:	627b      	str	r3, [r7, #36]	; 0x24
 801967c:	f1bb 0f00 	cmp.w	fp, #0
 8019680:	d013      	beq.n	80196aa <__ssvfiscanf_r+0x37a>
 8019682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019684:	3301      	adds	r3, #1
 8019686:	d10b      	bne.n	80196a0 <__ssvfiscanf_r+0x370>
 8019688:	2400      	movs	r4, #0
 801968a:	4626      	mov	r6, r4
 801968c:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8019690:	f8db 5000 	ldr.w	r5, [fp]
 8019694:	42a3      	cmp	r3, r4
 8019696:	f300 85df 	bgt.w	801a258 <__ssvfiscanf_r+0xf28>
 801969a:	f04f 33ff 	mov.w	r3, #4294967295
 801969e:	627b      	str	r3, [r7, #36]	; 0x24
 80196a0:	f8db 0000 	ldr.w	r0, [fp]
 80196a4:	b108      	cbz	r0, 80196aa <__ssvfiscanf_r+0x37a>
 80196a6:	f7fe fecf 	bl	8018448 <free>
 80196aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80196ac:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80196b0:	46bd      	mov	sp, r7
 80196b2:	ecbd 8b02 	vpop	{d8}
 80196b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196ba:	6939      	ldr	r1, [r7, #16]
 80196bc:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80196c0:	f002 f82a 	bl	801b718 <__sccl>
 80196c4:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80196c8:	6138      	str	r0, [r7, #16]
 80196ca:	2501      	movs	r5, #1
 80196cc:	e79d      	b.n	801960a <__ssvfiscanf_r+0x2da>
 80196ce:	f049 0901 	orr.w	r9, r9, #1
 80196d2:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80196d6:	2500      	movs	r5, #0
 80196d8:	e797      	b.n	801960a <__ssvfiscanf_r+0x2da>
 80196da:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 80196de:	e786      	b.n	80195ee <__ssvfiscanf_r+0x2be>
 80196e0:	f019 0f10 	tst.w	r9, #16
 80196e4:	f47f ae41 	bne.w	801936a <__ssvfiscanf_r+0x3a>
 80196e8:	f019 0f08 	tst.w	r9, #8
 80196ec:	f856 1b04 	ldr.w	r1, [r6], #4
 80196f0:	d002      	beq.n	80196f8 <__ssvfiscanf_r+0x3c8>
 80196f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196f4:	700b      	strb	r3, [r1, #0]
 80196f6:	e638      	b.n	801936a <__ssvfiscanf_r+0x3a>
 80196f8:	f019 0f04 	tst.w	r9, #4
 80196fc:	d002      	beq.n	8019704 <__ssvfiscanf_r+0x3d4>
 80196fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019700:	800b      	strh	r3, [r1, #0]
 8019702:	e632      	b.n	801936a <__ssvfiscanf_r+0x3a>
 8019704:	f019 0f01 	tst.w	r9, #1
 8019708:	d002      	beq.n	8019710 <__ssvfiscanf_r+0x3e0>
 801970a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801970c:	600b      	str	r3, [r1, #0]
 801970e:	e62c      	b.n	801936a <__ssvfiscanf_r+0x3a>
 8019710:	f019 0f02 	tst.w	r9, #2
 8019714:	d0f9      	beq.n	801970a <__ssvfiscanf_r+0x3da>
 8019716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019718:	ea4f 79e3 	mov.w	r9, r3, asr #31
 801971c:	461a      	mov	r2, r3
 801971e:	464b      	mov	r3, r9
 8019720:	e9c1 2300 	strd	r2, r3, [r1]
 8019724:	e621      	b.n	801936a <__ssvfiscanf_r+0x3a>
 8019726:	4b71      	ldr	r3, [pc, #452]	; (80198ec <__ssvfiscanf_r+0x5bc>)
 8019728:	617b      	str	r3, [r7, #20]
 801972a:	2300      	movs	r3, #0
 801972c:	e756      	b.n	80195dc <__ssvfiscanf_r+0x2ac>
 801972e:	ee18 0a10 	vmov	r0, s16
 8019732:	4621      	mov	r1, r4
 8019734:	f7ff fda7 	bl	8019286 <__ssrefill_r>
 8019738:	2800      	cmp	r0, #0
 801973a:	f43f af6a 	beq.w	8019612 <__ssvfiscanf_r+0x2e2>
 801973e:	e6f8      	b.n	8019532 <__ssvfiscanf_r+0x202>
 8019740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019742:	3201      	adds	r2, #1
 8019744:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019746:	6862      	ldr	r2, [r4, #4]
 8019748:	3a01      	subs	r2, #1
 801974a:	2a00      	cmp	r2, #0
 801974c:	6062      	str	r2, [r4, #4]
 801974e:	dd02      	ble.n	8019756 <__ssvfiscanf_r+0x426>
 8019750:	3301      	adds	r3, #1
 8019752:	6023      	str	r3, [r4, #0]
 8019754:	e760      	b.n	8019618 <__ssvfiscanf_r+0x2e8>
 8019756:	ee18 0a10 	vmov	r0, s16
 801975a:	4621      	mov	r1, r4
 801975c:	f7ff fd93 	bl	8019286 <__ssrefill_r>
 8019760:	2800      	cmp	r0, #0
 8019762:	f43f af59 	beq.w	8019618 <__ssvfiscanf_r+0x2e8>
 8019766:	e6e4      	b.n	8019532 <__ssvfiscanf_r+0x202>
 8019768:	f8bb a006 	ldrh.w	sl, [fp, #6]
 801976c:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 8019770:	6030      	str	r0, [r6, #0]
 8019772:	45ca      	cmp	sl, r9
 8019774:	d313      	bcc.n	801979e <__ssvfiscanf_r+0x46e>
 8019776:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 801977a:	4599      	cmp	r9, r3
 801977c:	f63f af7b 	bhi.w	8019676 <__ssvfiscanf_r+0x346>
 8019780:	f109 0908 	add.w	r9, r9, #8
 8019784:	f8db 0000 	ldr.w	r0, [fp]
 8019788:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801978c:	f001 fe16 	bl	801b3bc <realloc>
 8019790:	2800      	cmp	r0, #0
 8019792:	f43f af70 	beq.w	8019676 <__ssvfiscanf_r+0x346>
 8019796:	f8cb 0000 	str.w	r0, [fp]
 801979a:	f8ab 9004 	strh.w	r9, [fp, #4]
 801979e:	f8db 3000 	ldr.w	r3, [fp]
 80197a2:	f10a 0201 	add.w	r2, sl, #1
 80197a6:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 80197aa:	f8ab 2006 	strh.w	r2, [fp, #6]
 80197ae:	46b2      	mov	sl, r6
 80197b0:	f04f 0920 	mov.w	r9, #32
 80197b4:	4646      	mov	r6, r8
 80197b6:	2200      	movs	r2, #0
 80197b8:	60fa      	str	r2, [r7, #12]
 80197ba:	f001 fda9 	bl	801b310 <__locale_mb_cur_max>
 80197be:	68fa      	ldr	r2, [r7, #12]
 80197c0:	4290      	cmp	r0, r2
 80197c2:	f43f aeb6 	beq.w	8019532 <__ssvfiscanf_r+0x202>
 80197c6:	6821      	ldr	r1, [r4, #0]
 80197c8:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 80197cc:	f811 0b01 	ldrb.w	r0, [r1], #1
 80197d0:	f80c 0002 	strb.w	r0, [ip, r2]
 80197d4:	1c53      	adds	r3, r2, #1
 80197d6:	6862      	ldr	r2, [r4, #4]
 80197d8:	3a01      	subs	r2, #1
 80197da:	e9c4 1200 	strd	r1, r2, [r4]
 80197de:	6a3a      	ldr	r2, [r7, #32]
 80197e0:	2a03      	cmp	r2, #3
 80197e2:	d102      	bne.n	80197ea <__ssvfiscanf_r+0x4ba>
 80197e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80197e6:	2a04      	cmp	r2, #4
 80197e8:	d007      	beq.n	80197fa <__ssvfiscanf_r+0x4ca>
 80197ea:	2208      	movs	r2, #8
 80197ec:	2100      	movs	r1, #0
 80197ee:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80197f2:	623b      	str	r3, [r7, #32]
 80197f4:	f7fb fc12 	bl	801501c <memset>
 80197f8:	6a3b      	ldr	r3, [r7, #32]
 80197fa:	60fb      	str	r3, [r7, #12]
 80197fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019800:	9200      	str	r2, [sp, #0]
 8019802:	ee18 0a10 	vmov	r0, s16
 8019806:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801980a:	4631      	mov	r1, r6
 801980c:	f001 fd98 	bl	801b340 <_mbrtowc_r>
 8019810:	1c42      	adds	r2, r0, #1
 8019812:	6238      	str	r0, [r7, #32]
 8019814:	f43f ae8d 	beq.w	8019532 <__ssvfiscanf_r+0x202>
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	2800      	cmp	r0, #0
 801981c:	d135      	bne.n	801988a <__ssvfiscanf_r+0x55a>
 801981e:	69ba      	ldr	r2, [r7, #24]
 8019820:	b902      	cbnz	r2, 8019824 <__ssvfiscanf_r+0x4f4>
 8019822:	6032      	str	r2, [r6, #0]
 8019824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019826:	441a      	add	r2, r3
 8019828:	6a3b      	ldr	r3, [r7, #32]
 801982a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801982c:	2b03      	cmp	r3, #3
 801982e:	d102      	bne.n	8019836 <__ssvfiscanf_r+0x506>
 8019830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019832:	2b04      	cmp	r3, #4
 8019834:	d000      	beq.n	8019838 <__ssvfiscanf_r+0x508>
 8019836:	3d01      	subs	r5, #1
 8019838:	69bb      	ldr	r3, [r7, #24]
 801983a:	b9c3      	cbnz	r3, 801986e <__ssvfiscanf_r+0x53e>
 801983c:	f1ba 0f00 	cmp.w	sl, #0
 8019840:	d014      	beq.n	801986c <__ssvfiscanf_r+0x53c>
 8019842:	eba6 0308 	sub.w	r3, r6, r8
 8019846:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 801984a:	d80f      	bhi.n	801986c <__ssvfiscanf_r+0x53c>
 801984c:	4640      	mov	r0, r8
 801984e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8019852:	60fb      	str	r3, [r7, #12]
 8019854:	f001 fdb2 	bl	801b3bc <realloc>
 8019858:	4680      	mov	r8, r0
 801985a:	2800      	cmp	r0, #0
 801985c:	f43f af0b 	beq.w	8019676 <__ssvfiscanf_r+0x346>
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	f8ca 0000 	str.w	r0, [sl]
 8019866:	18c6      	adds	r6, r0, r3
 8019868:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801986c:	3604      	adds	r6, #4
 801986e:	2200      	movs	r2, #0
 8019870:	e00f      	b.n	8019892 <__ssvfiscanf_r+0x562>
 8019872:	f04f 0900 	mov.w	r9, #0
 8019876:	62be      	str	r6, [r7, #40]	; 0x28
 8019878:	46c8      	mov	r8, r9
 801987a:	46ca      	mov	sl, r9
 801987c:	464e      	mov	r6, r9
 801987e:	e79a      	b.n	80197b6 <__ssvfiscanf_r+0x486>
 8019880:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8019884:	46c8      	mov	r8, r9
 8019886:	46ca      	mov	sl, r9
 8019888:	e795      	b.n	80197b6 <__ssvfiscanf_r+0x486>
 801988a:	6a3a      	ldr	r2, [r7, #32]
 801988c:	3202      	adds	r2, #2
 801988e:	d1c9      	bne.n	8019824 <__ssvfiscanf_r+0x4f4>
 8019890:	461a      	mov	r2, r3
 8019892:	6863      	ldr	r3, [r4, #4]
 8019894:	2b00      	cmp	r3, #0
 8019896:	dc14      	bgt.n	80198c2 <__ssvfiscanf_r+0x592>
 8019898:	ee18 0a10 	vmov	r0, s16
 801989c:	4621      	mov	r1, r4
 801989e:	60fa      	str	r2, [r7, #12]
 80198a0:	f7ff fcf1 	bl	8019286 <__ssrefill_r>
 80198a4:	68fa      	ldr	r2, [r7, #12]
 80198a6:	b160      	cbz	r0, 80198c2 <__ssvfiscanf_r+0x592>
 80198a8:	2a00      	cmp	r2, #0
 80198aa:	f47f ae42 	bne.w	8019532 <__ssvfiscanf_r+0x202>
 80198ae:	f1ba 0f00 	cmp.w	sl, #0
 80198b2:	d10a      	bne.n	80198ca <__ssvfiscanf_r+0x59a>
 80198b4:	69bb      	ldr	r3, [r7, #24]
 80198b6:	b913      	cbnz	r3, 80198be <__ssvfiscanf_r+0x58e>
 80198b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ba:	3301      	adds	r3, #1
 80198bc:	627b      	str	r3, [r7, #36]	; 0x24
 80198be:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80198c0:	e553      	b.n	801936a <__ssvfiscanf_r+0x3a>
 80198c2:	2d00      	cmp	r5, #0
 80198c4:	f47f af78 	bne.w	80197b8 <__ssvfiscanf_r+0x488>
 80198c8:	e7f1      	b.n	80198ae <__ssvfiscanf_r+0x57e>
 80198ca:	eba6 0108 	sub.w	r1, r6, r8
 80198ce:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80198d2:	d9ef      	bls.n	80198b4 <__ssvfiscanf_r+0x584>
 80198d4:	f8da 0000 	ldr.w	r0, [sl]
 80198d8:	f001 fd70 	bl	801b3bc <realloc>
 80198dc:	2800      	cmp	r0, #0
 80198de:	d0e9      	beq.n	80198b4 <__ssvfiscanf_r+0x584>
 80198e0:	f8ca 0000 	str.w	r0, [sl]
 80198e4:	e7e6      	b.n	80198b4 <__ssvfiscanf_r+0x584>
 80198e6:	bf00      	nop
 80198e8:	0801f849 	.word	0x0801f849
 80198ec:	080156b5 	.word	0x080156b5
 80198f0:	69ba      	ldr	r2, [r7, #24]
 80198f2:	b1e2      	cbz	r2, 801992e <__ssvfiscanf_r+0x5fe>
 80198f4:	4698      	mov	r8, r3
 80198f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80198fa:	429d      	cmp	r5, r3
 80198fc:	dd11      	ble.n	8019922 <__ssvfiscanf_r+0x5f2>
 80198fe:	4498      	add	r8, r3
 8019900:	1aed      	subs	r5, r5, r3
 8019902:	4413      	add	r3, r2
 8019904:	ee18 0a10 	vmov	r0, s16
 8019908:	6023      	str	r3, [r4, #0]
 801990a:	4621      	mov	r1, r4
 801990c:	f7ff fcbb 	bl	8019286 <__ssrefill_r>
 8019910:	2800      	cmp	r0, #0
 8019912:	d0f0      	beq.n	80198f6 <__ssvfiscanf_r+0x5c6>
 8019914:	f1b8 0f00 	cmp.w	r8, #0
 8019918:	f43f ae0b 	beq.w	8019532 <__ssvfiscanf_r+0x202>
 801991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801991e:	4443      	add	r3, r8
 8019920:	e5fe      	b.n	8019520 <__ssvfiscanf_r+0x1f0>
 8019922:	1b5b      	subs	r3, r3, r5
 8019924:	44a8      	add	r8, r5
 8019926:	4415      	add	r5, r2
 8019928:	6063      	str	r3, [r4, #4]
 801992a:	6025      	str	r5, [r4, #0]
 801992c:	e7f6      	b.n	801991c <__ssvfiscanf_r+0x5ec>
 801992e:	46b0      	mov	r8, r6
 8019930:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8019934:	f858 6b04 	ldr.w	r6, [r8], #4
 8019938:	d02e      	beq.n	8019998 <__ssvfiscanf_r+0x668>
 801993a:	2e00      	cmp	r6, #0
 801993c:	f43f ad52 	beq.w	80193e4 <__ssvfiscanf_r+0xb4>
 8019940:	4628      	mov	r0, r5
 8019942:	f7fe fd79 	bl	8018438 <malloc>
 8019946:	62b8      	str	r0, [r7, #40]	; 0x28
 8019948:	2800      	cmp	r0, #0
 801994a:	f43f adf8 	beq.w	801953e <__ssvfiscanf_r+0x20e>
 801994e:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8019952:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 8019956:	6030      	str	r0, [r6, #0]
 8019958:	45ca      	cmp	sl, r9
 801995a:	d313      	bcc.n	8019984 <__ssvfiscanf_r+0x654>
 801995c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8019960:	4599      	cmp	r9, r3
 8019962:	f63f ae91 	bhi.w	8019688 <__ssvfiscanf_r+0x358>
 8019966:	f109 0908 	add.w	r9, r9, #8
 801996a:	f8db 0000 	ldr.w	r0, [fp]
 801996e:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8019972:	f001 fd23 	bl	801b3bc <realloc>
 8019976:	2800      	cmp	r0, #0
 8019978:	f43f ae86 	beq.w	8019688 <__ssvfiscanf_r+0x358>
 801997c:	f8cb 0000 	str.w	r0, [fp]
 8019980:	f8ab 9004 	strh.w	r9, [fp, #4]
 8019984:	f8db 3000 	ldr.w	r3, [fp]
 8019988:	f10a 0201 	add.w	r2, sl, #1
 801998c:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 8019990:	46b1      	mov	r9, r6
 8019992:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8019994:	f8ab 2006 	strh.w	r2, [fp, #6]
 8019998:	4631      	mov	r1, r6
 801999a:	ee18 0a10 	vmov	r0, s16
 801999e:	9400      	str	r4, [sp, #0]
 80199a0:	462b      	mov	r3, r5
 80199a2:	2201      	movs	r2, #1
 80199a4:	f7ff fc8c 	bl	80192c0 <_sfread_r>
 80199a8:	4606      	mov	r6, r0
 80199aa:	2800      	cmp	r0, #0
 80199ac:	f43f adc1 	beq.w	8019532 <__ssvfiscanf_r+0x202>
 80199b0:	f1b9 0f00 	cmp.w	r9, #0
 80199b4:	d009      	beq.n	80199ca <__ssvfiscanf_r+0x69a>
 80199b6:	4285      	cmp	r5, r0
 80199b8:	d907      	bls.n	80199ca <__ssvfiscanf_r+0x69a>
 80199ba:	4601      	mov	r1, r0
 80199bc:	f8d9 0000 	ldr.w	r0, [r9]
 80199c0:	f001 fcfc 	bl	801b3bc <realloc>
 80199c4:	b108      	cbz	r0, 80199ca <__ssvfiscanf_r+0x69a>
 80199c6:	f8c9 0000 	str.w	r0, [r9]
 80199ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199cc:	4433      	add	r3, r6
 80199ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80199d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199d2:	3301      	adds	r3, #1
 80199d4:	627b      	str	r3, [r7, #36]	; 0x24
 80199d6:	4646      	mov	r6, r8
 80199d8:	e4c7      	b.n	801936a <__ssvfiscanf_r+0x3a>
 80199da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80199dc:	2a00      	cmp	r2, #0
 80199de:	bf08      	it	eq
 80199e0:	f04f 32ff 	moveq.w	r2, #4294967295
 80199e4:	461d      	mov	r5, r3
 80199e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80199e8:	69bb      	ldr	r3, [r7, #24]
 80199ea:	2d00      	cmp	r5, #0
 80199ec:	f000 8105 	beq.w	8019bfa <__ssvfiscanf_r+0x8ca>
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	f040 80a5 	bne.w	8019b40 <__ssvfiscanf_r+0x810>
 80199f6:	4633      	mov	r3, r6
 80199f8:	f019 0f80 	tst.w	r9, #128	; 0x80
 80199fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8019a00:	607b      	str	r3, [r7, #4]
 8019a02:	f000 80a6 	beq.w	8019b52 <__ssvfiscanf_r+0x822>
 8019a06:	2d00      	cmp	r5, #0
 8019a08:	f43f ae38 	beq.w	801967c <__ssvfiscanf_r+0x34c>
 8019a0c:	2080      	movs	r0, #128	; 0x80
 8019a0e:	f7fe fd13 	bl	8018438 <malloc>
 8019a12:	4680      	mov	r8, r0
 8019a14:	2800      	cmp	r0, #0
 8019a16:	f43f ae2e 	beq.w	8019676 <__ssvfiscanf_r+0x346>
 8019a1a:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8019a1e:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8019a22:	6028      	str	r0, [r5, #0]
 8019a24:	45b1      	cmp	r9, r6
 8019a26:	d311      	bcc.n	8019a4c <__ssvfiscanf_r+0x71c>
 8019a28:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8019a2c:	429e      	cmp	r6, r3
 8019a2e:	f63f ae22 	bhi.w	8019676 <__ssvfiscanf_r+0x346>
 8019a32:	3608      	adds	r6, #8
 8019a34:	f8db 0000 	ldr.w	r0, [fp]
 8019a38:	00b1      	lsls	r1, r6, #2
 8019a3a:	f001 fcbf 	bl	801b3bc <realloc>
 8019a3e:	2800      	cmp	r0, #0
 8019a40:	f43f ae19 	beq.w	8019676 <__ssvfiscanf_r+0x346>
 8019a44:	f8cb 0000 	str.w	r0, [fp]
 8019a48:	f8ab 6004 	strh.w	r6, [fp, #4]
 8019a4c:	f8db 3000 	ldr.w	r3, [fp]
 8019a50:	60fd      	str	r5, [r7, #12]
 8019a52:	f109 0201 	add.w	r2, r9, #1
 8019a56:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8019a5a:	f8ab 2006 	strh.w	r2, [fp, #6]
 8019a5e:	4645      	mov	r5, r8
 8019a60:	f04f 0920 	mov.w	r9, #32
 8019a64:	2600      	movs	r6, #0
 8019a66:	f001 fc53 	bl	801b310 <__locale_mb_cur_max>
 8019a6a:	42b0      	cmp	r0, r6
 8019a6c:	f43f ad61 	beq.w	8019532 <__ssvfiscanf_r+0x202>
 8019a70:	1c73      	adds	r3, r6, #1
 8019a72:	60bb      	str	r3, [r7, #8]
 8019a74:	6823      	ldr	r3, [r4, #0]
 8019a76:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8019a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a7e:	558a      	strb	r2, [r1, r6]
 8019a80:	6862      	ldr	r2, [r4, #4]
 8019a82:	3a01      	subs	r2, #1
 8019a84:	e9c4 3200 	strd	r3, r2, [r4]
 8019a88:	6a3b      	ldr	r3, [r7, #32]
 8019a8a:	2b03      	cmp	r3, #3
 8019a8c:	d102      	bne.n	8019a94 <__ssvfiscanf_r+0x764>
 8019a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a90:	2b04      	cmp	r3, #4
 8019a92:	d005      	beq.n	8019aa0 <__ssvfiscanf_r+0x770>
 8019a94:	2208      	movs	r2, #8
 8019a96:	2100      	movs	r1, #0
 8019a98:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8019a9c:	f7fb fabe 	bl	801501c <memset>
 8019aa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019aa4:	9300      	str	r3, [sp, #0]
 8019aa6:	ee18 0a10 	vmov	r0, s16
 8019aaa:	68bb      	ldr	r3, [r7, #8]
 8019aac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019ab0:	4629      	mov	r1, r5
 8019ab2:	f001 fc45 	bl	801b340 <_mbrtowc_r>
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	6238      	str	r0, [r7, #32]
 8019aba:	1c58      	adds	r0, r3, #1
 8019abc:	f43f ad39 	beq.w	8019532 <__ssvfiscanf_r+0x202>
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d14c      	bne.n	8019b5e <__ssvfiscanf_r+0x82e>
 8019ac4:	602b      	str	r3, [r5, #0]
 8019ac6:	682e      	ldr	r6, [r5, #0]
 8019ac8:	1c71      	adds	r1, r6, #1
 8019aca:	d059      	beq.n	8019b80 <__ssvfiscanf_r+0x850>
 8019acc:	2208      	movs	r2, #8
 8019ace:	2100      	movs	r1, #0
 8019ad0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8019ad4:	f7fb faa2 	bl	801501c <memset>
 8019ad8:	4b9d      	ldr	r3, [pc, #628]	; (8019d50 <__ssvfiscanf_r+0xa20>)
 8019ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8019ade:	603b      	str	r3, [r7, #0]
 8019ae0:	4632      	mov	r2, r6
 8019ae2:	ee18 0a10 	vmov	r0, s16
 8019ae6:	683e      	ldr	r6, [r7, #0]
 8019ae8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019aec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8019af0:	47b0      	blx	r6
 8019af2:	2801      	cmp	r0, #1
 8019af4:	d146      	bne.n	8019b84 <__ssvfiscanf_r+0x854>
 8019af6:	f897 a030 	ldrb.w	sl, [r7, #48]	; 0x30
 8019afa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8019afe:	f813 300a 	ldrb.w	r3, [r3, sl]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d14b      	bne.n	8019b9e <__ssvfiscanf_r+0x86e>
 8019b06:	f107 0648 	add.w	r6, r7, #72	; 0x48
 8019b0a:	68bb      	ldr	r3, [r7, #8]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d13c      	bne.n	8019b8a <__ssvfiscanf_r+0x85a>
 8019b10:	69bb      	ldr	r3, [r7, #24]
 8019b12:	b99b      	cbnz	r3, 8019b3c <__ssvfiscanf_r+0x80c>
 8019b14:	602b      	str	r3, [r5, #0]
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	b16b      	cbz	r3, 8019b36 <__ssvfiscanf_r+0x806>
 8019b1a:	eba5 0108 	sub.w	r1, r5, r8
 8019b1e:	108b      	asrs	r3, r1, #2
 8019b20:	3301      	adds	r3, #1
 8019b22:	4599      	cmp	r9, r3
 8019b24:	d907      	bls.n	8019b36 <__ssvfiscanf_r+0x806>
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	3104      	adds	r1, #4
 8019b2a:	6818      	ldr	r0, [r3, #0]
 8019b2c:	f001 fc46 	bl	801b3bc <realloc>
 8019b30:	b108      	cbz	r0, 8019b36 <__ssvfiscanf_r+0x806>
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	6018      	str	r0, [r3, #0]
 8019b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b38:	3301      	adds	r3, #1
 8019b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8019b3c:	687e      	ldr	r6, [r7, #4]
 8019b3e:	e414      	b.n	801936a <__ssvfiscanf_r+0x3a>
 8019b40:	f04f 0900 	mov.w	r9, #0
 8019b44:	607e      	str	r6, [r7, #4]
 8019b46:	46c8      	mov	r8, r9
 8019b48:	f8c7 900c 	str.w	r9, [r7, #12]
 8019b4c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8019b50:	e788      	b.n	8019a64 <__ssvfiscanf_r+0x734>
 8019b52:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8019b56:	f8c7 900c 	str.w	r9, [r7, #12]
 8019b5a:	46c8      	mov	r8, r9
 8019b5c:	e782      	b.n	8019a64 <__ssvfiscanf_r+0x734>
 8019b5e:	6a3b      	ldr	r3, [r7, #32]
 8019b60:	3302      	adds	r3, #2
 8019b62:	d1b0      	bne.n	8019ac6 <__ssvfiscanf_r+0x796>
 8019b64:	68be      	ldr	r6, [r7, #8]
 8019b66:	6863      	ldr	r3, [r4, #4]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	dc41      	bgt.n	8019bf0 <__ssvfiscanf_r+0x8c0>
 8019b6c:	ee18 0a10 	vmov	r0, s16
 8019b70:	4621      	mov	r1, r4
 8019b72:	f7ff fb88 	bl	8019286 <__ssrefill_r>
 8019b76:	2800      	cmp	r0, #0
 8019b78:	d03a      	beq.n	8019bf0 <__ssvfiscanf_r+0x8c0>
 8019b7a:	2e00      	cmp	r6, #0
 8019b7c:	d0c8      	beq.n	8019b10 <__ssvfiscanf_r+0x7e0>
 8019b7e:	e4d8      	b.n	8019532 <__ssvfiscanf_r+0x202>
 8019b80:	46b2      	mov	sl, r6
 8019b82:	e7ba      	b.n	8019afa <__ssvfiscanf_r+0x7ca>
 8019b84:	f04f 0a00 	mov.w	sl, #0
 8019b88:	e7b7      	b.n	8019afa <__ssvfiscanf_r+0x7ca>
 8019b8a:	68bb      	ldr	r3, [r7, #8]
 8019b8c:	3b01      	subs	r3, #1
 8019b8e:	ee18 0a10 	vmov	r0, s16
 8019b92:	5cf1      	ldrb	r1, [r6, r3]
 8019b94:	60bb      	str	r3, [r7, #8]
 8019b96:	4622      	mov	r2, r4
 8019b98:	f7ff fb38 	bl	801920c <_sungetc_r>
 8019b9c:	e7b5      	b.n	8019b0a <__ssvfiscanf_r+0x7da>
 8019b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ba0:	68ba      	ldr	r2, [r7, #8]
 8019ba2:	4413      	add	r3, r2
 8019ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019ba6:	6a3b      	ldr	r3, [r7, #32]
 8019ba8:	2b03      	cmp	r3, #3
 8019baa:	d102      	bne.n	8019bb2 <__ssvfiscanf_r+0x882>
 8019bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019bae:	2b04      	cmp	r3, #4
 8019bb0:	d002      	beq.n	8019bb8 <__ssvfiscanf_r+0x888>
 8019bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bb4:	3b01      	subs	r3, #1
 8019bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8019bb8:	69bb      	ldr	r3, [r7, #24]
 8019bba:	b9bb      	cbnz	r3, 8019bec <__ssvfiscanf_r+0x8bc>
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	3504      	adds	r5, #4
 8019bc0:	b1a3      	cbz	r3, 8019bec <__ssvfiscanf_r+0x8bc>
 8019bc2:	eba5 0608 	sub.w	r6, r5, r8
 8019bc6:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8019bca:	d80d      	bhi.n	8019be8 <__ssvfiscanf_r+0x8b8>
 8019bcc:	4640      	mov	r0, r8
 8019bce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8019bd2:	f001 fbf3 	bl	801b3bc <realloc>
 8019bd6:	4680      	mov	r8, r0
 8019bd8:	2800      	cmp	r0, #0
 8019bda:	f43f ad4c 	beq.w	8019676 <__ssvfiscanf_r+0x346>
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	1985      	adds	r5, r0, r6
 8019be2:	6018      	str	r0, [r3, #0]
 8019be4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019be8:	69be      	ldr	r6, [r7, #24]
 8019bea:	e7bc      	b.n	8019b66 <__ssvfiscanf_r+0x836>
 8019bec:	2600      	movs	r6, #0
 8019bee:	e7ba      	b.n	8019b66 <__ssvfiscanf_r+0x836>
 8019bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	f47f af37 	bne.w	8019a66 <__ssvfiscanf_r+0x736>
 8019bf8:	e78a      	b.n	8019b10 <__ssvfiscanf_r+0x7e0>
 8019bfa:	b1f3      	cbz	r3, 8019c3a <__ssvfiscanf_r+0x90a>
 8019bfc:	f107 0870 	add.w	r8, r7, #112	; 0x70
 8019c00:	6823      	ldr	r3, [r4, #0]
 8019c02:	781a      	ldrb	r2, [r3, #0]
 8019c04:	f818 2002 	ldrb.w	r2, [r8, r2]
 8019c08:	b912      	cbnz	r2, 8019c10 <__ssvfiscanf_r+0x8e0>
 8019c0a:	b99d      	cbnz	r5, 8019c34 <__ssvfiscanf_r+0x904>
 8019c0c:	f7ff bbea 	b.w	80193e4 <__ssvfiscanf_r+0xb4>
 8019c10:	3301      	adds	r3, #1
 8019c12:	6862      	ldr	r2, [r4, #4]
 8019c14:	6023      	str	r3, [r4, #0]
 8019c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c18:	3501      	adds	r5, #1
 8019c1a:	3a01      	subs	r2, #1
 8019c1c:	42ab      	cmp	r3, r5
 8019c1e:	6062      	str	r2, [r4, #4]
 8019c20:	d008      	beq.n	8019c34 <__ssvfiscanf_r+0x904>
 8019c22:	2a00      	cmp	r2, #0
 8019c24:	dcec      	bgt.n	8019c00 <__ssvfiscanf_r+0x8d0>
 8019c26:	ee18 0a10 	vmov	r0, s16
 8019c2a:	4621      	mov	r1, r4
 8019c2c:	f7ff fb2b 	bl	8019286 <__ssrefill_r>
 8019c30:	2800      	cmp	r0, #0
 8019c32:	d0e5      	beq.n	8019c00 <__ssvfiscanf_r+0x8d0>
 8019c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c36:	442b      	add	r3, r5
 8019c38:	e472      	b.n	8019520 <__ssvfiscanf_r+0x1f0>
 8019c3a:	4633      	mov	r3, r6
 8019c3c:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 8019c40:	f853 6b04 	ldr.w	r6, [r3], #4
 8019c44:	61bb      	str	r3, [r7, #24]
 8019c46:	f000 8081 	beq.w	8019d4c <__ssvfiscanf_r+0xa1c>
 8019c4a:	2e00      	cmp	r6, #0
 8019c4c:	f43f abca 	beq.w	80193e4 <__ssvfiscanf_r+0xb4>
 8019c50:	2020      	movs	r0, #32
 8019c52:	f7fe fbf1 	bl	8018438 <malloc>
 8019c56:	4680      	mov	r8, r0
 8019c58:	2800      	cmp	r0, #0
 8019c5a:	f43f ac70 	beq.w	801953e <__ssvfiscanf_r+0x20e>
 8019c5e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8019c62:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 8019c66:	6030      	str	r0, [r6, #0]
 8019c68:	45a9      	cmp	r9, r5
 8019c6a:	d311      	bcc.n	8019c90 <__ssvfiscanf_r+0x960>
 8019c6c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8019c70:	429d      	cmp	r5, r3
 8019c72:	f63f ad09 	bhi.w	8019688 <__ssvfiscanf_r+0x358>
 8019c76:	3508      	adds	r5, #8
 8019c78:	f8db 0000 	ldr.w	r0, [fp]
 8019c7c:	00a9      	lsls	r1, r5, #2
 8019c7e:	f001 fb9d 	bl	801b3bc <realloc>
 8019c82:	2800      	cmp	r0, #0
 8019c84:	f43f ad00 	beq.w	8019688 <__ssvfiscanf_r+0x358>
 8019c88:	f8cb 0000 	str.w	r0, [fp]
 8019c8c:	f8ab 5004 	strh.w	r5, [fp, #4]
 8019c90:	f8db 3000 	ldr.w	r3, [fp]
 8019c94:	f109 0201 	add.w	r2, r9, #1
 8019c98:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8019c9c:	46b2      	mov	sl, r6
 8019c9e:	f8ab 2006 	strh.w	r2, [fp, #6]
 8019ca2:	4646      	mov	r6, r8
 8019ca4:	2520      	movs	r5, #32
 8019ca6:	46b0      	mov	r8, r6
 8019ca8:	f107 0970 	add.w	r9, r7, #112	; 0x70
 8019cac:	6823      	ldr	r3, [r4, #0]
 8019cae:	781a      	ldrb	r2, [r3, #0]
 8019cb0:	f819 2002 	ldrb.w	r2, [r9, r2]
 8019cb4:	b36a      	cbz	r2, 8019d12 <__ssvfiscanf_r+0x9e2>
 8019cb6:	6862      	ldr	r2, [r4, #4]
 8019cb8:	3a01      	subs	r2, #1
 8019cba:	6062      	str	r2, [r4, #4]
 8019cbc:	1c5a      	adds	r2, r3, #1
 8019cbe:	6022      	str	r2, [r4, #0]
 8019cc0:	781b      	ldrb	r3, [r3, #0]
 8019cc2:	f806 3b01 	strb.w	r3, [r6], #1
 8019cc6:	f1ba 0f00 	cmp.w	sl, #0
 8019cca:	d011      	beq.n	8019cf0 <__ssvfiscanf_r+0x9c0>
 8019ccc:	eba6 0308 	sub.w	r3, r6, r8
 8019cd0:	42ab      	cmp	r3, r5
 8019cd2:	d30d      	bcc.n	8019cf0 <__ssvfiscanf_r+0x9c0>
 8019cd4:	006d      	lsls	r5, r5, #1
 8019cd6:	4640      	mov	r0, r8
 8019cd8:	4629      	mov	r1, r5
 8019cda:	60fb      	str	r3, [r7, #12]
 8019cdc:	f001 fb6e 	bl	801b3bc <realloc>
 8019ce0:	4680      	mov	r8, r0
 8019ce2:	2800      	cmp	r0, #0
 8019ce4:	f43f ac2b 	beq.w	801953e <__ssvfiscanf_r+0x20e>
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	f8ca 0000 	str.w	r0, [sl]
 8019cee:	18c6      	adds	r6, r0, r3
 8019cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cf2:	3b01      	subs	r3, #1
 8019cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8019cf6:	d00c      	beq.n	8019d12 <__ssvfiscanf_r+0x9e2>
 8019cf8:	6863      	ldr	r3, [r4, #4]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	dcd6      	bgt.n	8019cac <__ssvfiscanf_r+0x97c>
 8019cfe:	ee18 0a10 	vmov	r0, s16
 8019d02:	4621      	mov	r1, r4
 8019d04:	f7ff fabf 	bl	8019286 <__ssrefill_r>
 8019d08:	2800      	cmp	r0, #0
 8019d0a:	d0cf      	beq.n	8019cac <__ssvfiscanf_r+0x97c>
 8019d0c:	4546      	cmp	r6, r8
 8019d0e:	f43f ac10 	beq.w	8019532 <__ssvfiscanf_r+0x202>
 8019d12:	ebb6 0808 	subs.w	r8, r6, r8
 8019d16:	f43f ab65 	beq.w	80193e4 <__ssvfiscanf_r+0xb4>
 8019d1a:	2300      	movs	r3, #0
 8019d1c:	7033      	strb	r3, [r6, #0]
 8019d1e:	f1ba 0f00 	cmp.w	sl, #0
 8019d22:	d00a      	beq.n	8019d3a <__ssvfiscanf_r+0xa0a>
 8019d24:	f108 0101 	add.w	r1, r8, #1
 8019d28:	428d      	cmp	r5, r1
 8019d2a:	d906      	bls.n	8019d3a <__ssvfiscanf_r+0xa0a>
 8019d2c:	f8da 0000 	ldr.w	r0, [sl]
 8019d30:	f001 fb44 	bl	801b3bc <realloc>
 8019d34:	b108      	cbz	r0, 8019d3a <__ssvfiscanf_r+0xa0a>
 8019d36:	f8ca 0000 	str.w	r0, [sl]
 8019d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d3c:	3301      	adds	r3, #1
 8019d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8019d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d42:	4443      	add	r3, r8
 8019d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d46:	69be      	ldr	r6, [r7, #24]
 8019d48:	f7ff bb0f 	b.w	801936a <__ssvfiscanf_r+0x3a>
 8019d4c:	46aa      	mov	sl, r5
 8019d4e:	e7aa      	b.n	8019ca6 <__ssvfiscanf_r+0x976>
 8019d50:	200008d0 	.word	0x200008d0
 8019d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	bf08      	it	eq
 8019d5a:	f04f 33ff 	moveq.w	r3, #4294967295
 8019d5e:	f019 0501 	ands.w	r5, r9, #1
 8019d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8019d64:	f009 0810 	and.w	r8, r9, #16
 8019d68:	f000 80f5 	beq.w	8019f56 <__ssvfiscanf_r+0xc26>
 8019d6c:	f1b8 0f00 	cmp.w	r8, #0
 8019d70:	f040 809a 	bne.w	8019ea8 <__ssvfiscanf_r+0xb78>
 8019d74:	4633      	mov	r3, r6
 8019d76:	f019 0f80 	tst.w	r9, #128	; 0x80
 8019d7a:	f853 5b04 	ldr.w	r5, [r3], #4
 8019d7e:	61bb      	str	r3, [r7, #24]
 8019d80:	f000 809a 	beq.w	8019eb8 <__ssvfiscanf_r+0xb88>
 8019d84:	2d00      	cmp	r5, #0
 8019d86:	f43f ac79 	beq.w	801967c <__ssvfiscanf_r+0x34c>
 8019d8a:	2080      	movs	r0, #128	; 0x80
 8019d8c:	f7fe fb54 	bl	8018438 <malloc>
 8019d90:	4606      	mov	r6, r0
 8019d92:	2800      	cmp	r0, #0
 8019d94:	f43f ac6f 	beq.w	8019676 <__ssvfiscanf_r+0x346>
 8019d98:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8019d9c:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 8019da0:	6028      	str	r0, [r5, #0]
 8019da2:	45ca      	cmp	sl, r9
 8019da4:	d313      	bcc.n	8019dce <__ssvfiscanf_r+0xa9e>
 8019da6:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8019daa:	4599      	cmp	r9, r3
 8019dac:	f63f ac63 	bhi.w	8019676 <__ssvfiscanf_r+0x346>
 8019db0:	f109 0908 	add.w	r9, r9, #8
 8019db4:	f8db 0000 	ldr.w	r0, [fp]
 8019db8:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8019dbc:	f001 fafe 	bl	801b3bc <realloc>
 8019dc0:	2800      	cmp	r0, #0
 8019dc2:	f43f ac58 	beq.w	8019676 <__ssvfiscanf_r+0x346>
 8019dc6:	f8cb 0000 	str.w	r0, [fp]
 8019dca:	f8ab 9004 	strh.w	r9, [fp, #4]
 8019dce:	f8db 3000 	ldr.w	r3, [fp]
 8019dd2:	f10a 0201 	add.w	r2, sl, #1
 8019dd6:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8019dda:	f8ab 2006 	strh.w	r2, [fp, #6]
 8019dde:	46aa      	mov	sl, r5
 8019de0:	f04f 0920 	mov.w	r9, #32
 8019de4:	4635      	mov	r5, r6
 8019de6:	2200      	movs	r2, #0
 8019de8:	6823      	ldr	r3, [r4, #0]
 8019dea:	49ab      	ldr	r1, [pc, #684]	; (801a098 <__ssvfiscanf_r+0xd68>)
 8019dec:	781b      	ldrb	r3, [r3, #0]
 8019dee:	5c5b      	ldrb	r3, [r3, r1]
 8019df0:	0718      	lsls	r0, r3, #28
 8019df2:	d43f      	bmi.n	8019e74 <__ssvfiscanf_r+0xb44>
 8019df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d03c      	beq.n	8019e74 <__ssvfiscanf_r+0xb44>
 8019dfa:	60fa      	str	r2, [r7, #12]
 8019dfc:	f001 fa88 	bl	801b310 <__locale_mb_cur_max>
 8019e00:	68fa      	ldr	r2, [r7, #12]
 8019e02:	4290      	cmp	r0, r2
 8019e04:	f43f ab95 	beq.w	8019532 <__ssvfiscanf_r+0x202>
 8019e08:	6821      	ldr	r1, [r4, #0]
 8019e0a:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8019e0e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8019e12:	f80c 0002 	strb.w	r0, [ip, r2]
 8019e16:	1c53      	adds	r3, r2, #1
 8019e18:	6862      	ldr	r2, [r4, #4]
 8019e1a:	3a01      	subs	r2, #1
 8019e1c:	e9c4 1200 	strd	r1, r2, [r4]
 8019e20:	6a3a      	ldr	r2, [r7, #32]
 8019e22:	2a03      	cmp	r2, #3
 8019e24:	d102      	bne.n	8019e2c <__ssvfiscanf_r+0xafc>
 8019e26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019e28:	2a04      	cmp	r2, #4
 8019e2a:	d007      	beq.n	8019e3c <__ssvfiscanf_r+0xb0c>
 8019e2c:	2208      	movs	r2, #8
 8019e2e:	2100      	movs	r1, #0
 8019e30:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8019e34:	623b      	str	r3, [r7, #32]
 8019e36:	f7fb f8f1 	bl	801501c <memset>
 8019e3a:	6a3b      	ldr	r3, [r7, #32]
 8019e3c:	60fb      	str	r3, [r7, #12]
 8019e3e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019e42:	9200      	str	r2, [sp, #0]
 8019e44:	ee18 0a10 	vmov	r0, s16
 8019e48:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019e4c:	4629      	mov	r1, r5
 8019e4e:	f001 fa77 	bl	801b340 <_mbrtowc_r>
 8019e52:	1c42      	adds	r2, r0, #1
 8019e54:	6238      	str	r0, [r7, #32]
 8019e56:	f43f ab6c 	beq.w	8019532 <__ssvfiscanf_r+0x202>
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	bb80      	cbnz	r0, 8019ec0 <__ssvfiscanf_r+0xb90>
 8019e5e:	6028      	str	r0, [r5, #0]
 8019e60:	6828      	ldr	r0, [r5, #0]
 8019e62:	60fb      	str	r3, [r7, #12]
 8019e64:	f001 fa46 	bl	801b2f4 <iswspace>
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	4602      	mov	r2, r0
 8019e6c:	2800      	cmp	r0, #0
 8019e6e:	d047      	beq.n	8019f00 <__ssvfiscanf_r+0xbd0>
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d139      	bne.n	8019ee8 <__ssvfiscanf_r+0xbb8>
 8019e74:	f1b8 0f00 	cmp.w	r8, #0
 8019e78:	f47f af65 	bne.w	8019d46 <__ssvfiscanf_r+0xa16>
 8019e7c:	f8c5 8000 	str.w	r8, [r5]
 8019e80:	f1ba 0f00 	cmp.w	sl, #0
 8019e84:	d00c      	beq.n	8019ea0 <__ssvfiscanf_r+0xb70>
 8019e86:	1ba9      	subs	r1, r5, r6
 8019e88:	108b      	asrs	r3, r1, #2
 8019e8a:	3301      	adds	r3, #1
 8019e8c:	4599      	cmp	r9, r3
 8019e8e:	d907      	bls.n	8019ea0 <__ssvfiscanf_r+0xb70>
 8019e90:	f8da 0000 	ldr.w	r0, [sl]
 8019e94:	3104      	adds	r1, #4
 8019e96:	f001 fa91 	bl	801b3bc <realloc>
 8019e9a:	b108      	cbz	r0, 8019ea0 <__ssvfiscanf_r+0xb70>
 8019e9c:	f8ca 0000 	str.w	r0, [sl]
 8019ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ea2:	3301      	adds	r3, #1
 8019ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8019ea6:	e74e      	b.n	8019d46 <__ssvfiscanf_r+0xa16>
 8019ea8:	f04f 0900 	mov.w	r9, #0
 8019eac:	61be      	str	r6, [r7, #24]
 8019eae:	46ca      	mov	sl, r9
 8019eb0:	464e      	mov	r6, r9
 8019eb2:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8019eb6:	e796      	b.n	8019de6 <__ssvfiscanf_r+0xab6>
 8019eb8:	46c1      	mov	r9, r8
 8019eba:	4646      	mov	r6, r8
 8019ebc:	46c2      	mov	sl, r8
 8019ebe:	e792      	b.n	8019de6 <__ssvfiscanf_r+0xab6>
 8019ec0:	6a3a      	ldr	r2, [r7, #32]
 8019ec2:	3202      	adds	r2, #2
 8019ec4:	d1cc      	bne.n	8019e60 <__ssvfiscanf_r+0xb30>
 8019ec6:	461a      	mov	r2, r3
 8019ec8:	6863      	ldr	r3, [r4, #4]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	dc8c      	bgt.n	8019de8 <__ssvfiscanf_r+0xab8>
 8019ece:	ee18 0a10 	vmov	r0, s16
 8019ed2:	4621      	mov	r1, r4
 8019ed4:	60fa      	str	r2, [r7, #12]
 8019ed6:	f7ff f9d6 	bl	8019286 <__ssrefill_r>
 8019eda:	68fa      	ldr	r2, [r7, #12]
 8019edc:	2800      	cmp	r0, #0
 8019ede:	d083      	beq.n	8019de8 <__ssvfiscanf_r+0xab8>
 8019ee0:	2a00      	cmp	r2, #0
 8019ee2:	f47f ab26 	bne.w	8019532 <__ssvfiscanf_r+0x202>
 8019ee6:	e7c5      	b.n	8019e74 <__ssvfiscanf_r+0xb44>
 8019ee8:	3b01      	subs	r3, #1
 8019eea:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8019eee:	ee18 0a10 	vmov	r0, s16
 8019ef2:	5cc9      	ldrb	r1, [r1, r3]
 8019ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8019ef6:	4622      	mov	r2, r4
 8019ef8:	f7ff f988 	bl	801920c <_sungetc_r>
 8019efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019efe:	e7b7      	b.n	8019e70 <__ssvfiscanf_r+0xb40>
 8019f00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019f02:	4419      	add	r1, r3
 8019f04:	6a3b      	ldr	r3, [r7, #32]
 8019f06:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019f08:	2b03      	cmp	r3, #3
 8019f0a:	d102      	bne.n	8019f12 <__ssvfiscanf_r+0xbe2>
 8019f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f0e:	2b04      	cmp	r3, #4
 8019f10:	d002      	beq.n	8019f18 <__ssvfiscanf_r+0xbe8>
 8019f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f14:	3b01      	subs	r3, #1
 8019f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f18:	f1b8 0f00 	cmp.w	r8, #0
 8019f1c:	d1d4      	bne.n	8019ec8 <__ssvfiscanf_r+0xb98>
 8019f1e:	3504      	adds	r5, #4
 8019f20:	f1ba 0f00 	cmp.w	sl, #0
 8019f24:	d015      	beq.n	8019f52 <__ssvfiscanf_r+0xc22>
 8019f26:	1bab      	subs	r3, r5, r6
 8019f28:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8019f2c:	d80f      	bhi.n	8019f4e <__ssvfiscanf_r+0xc1e>
 8019f2e:	4630      	mov	r0, r6
 8019f30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8019f34:	60fb      	str	r3, [r7, #12]
 8019f36:	f001 fa41 	bl	801b3bc <realloc>
 8019f3a:	4606      	mov	r6, r0
 8019f3c:	2800      	cmp	r0, #0
 8019f3e:	f43f ab9a 	beq.w	8019676 <__ssvfiscanf_r+0x346>
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	f8ca 0000 	str.w	r0, [sl]
 8019f48:	18c5      	adds	r5, r0, r3
 8019f4a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019f4e:	4642      	mov	r2, r8
 8019f50:	e7ba      	b.n	8019ec8 <__ssvfiscanf_r+0xb98>
 8019f52:	4652      	mov	r2, sl
 8019f54:	e7b8      	b.n	8019ec8 <__ssvfiscanf_r+0xb98>
 8019f56:	f1b8 0f00 	cmp.w	r8, #0
 8019f5a:	d01a      	beq.n	8019f92 <__ssvfiscanf_r+0xc62>
 8019f5c:	6823      	ldr	r3, [r4, #0]
 8019f5e:	494e      	ldr	r1, [pc, #312]	; (801a098 <__ssvfiscanf_r+0xd68>)
 8019f60:	781a      	ldrb	r2, [r3, #0]
 8019f62:	5c52      	ldrb	r2, [r2, r1]
 8019f64:	0711      	lsls	r1, r2, #28
 8019f66:	f53f ae65 	bmi.w	8019c34 <__ssvfiscanf_r+0x904>
 8019f6a:	3301      	adds	r3, #1
 8019f6c:	6862      	ldr	r2, [r4, #4]
 8019f6e:	6023      	str	r3, [r4, #0]
 8019f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f72:	3501      	adds	r5, #1
 8019f74:	3a01      	subs	r2, #1
 8019f76:	42ab      	cmp	r3, r5
 8019f78:	6062      	str	r2, [r4, #4]
 8019f7a:	f43f ae5b 	beq.w	8019c34 <__ssvfiscanf_r+0x904>
 8019f7e:	2a00      	cmp	r2, #0
 8019f80:	dcec      	bgt.n	8019f5c <__ssvfiscanf_r+0xc2c>
 8019f82:	ee18 0a10 	vmov	r0, s16
 8019f86:	4621      	mov	r1, r4
 8019f88:	f7ff f97d 	bl	8019286 <__ssrefill_r>
 8019f8c:	2800      	cmp	r0, #0
 8019f8e:	d0e5      	beq.n	8019f5c <__ssvfiscanf_r+0xc2c>
 8019f90:	e650      	b.n	8019c34 <__ssvfiscanf_r+0x904>
 8019f92:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8019f96:	f856 5b04 	ldr.w	r5, [r6], #4
 8019f9a:	d07b      	beq.n	801a094 <__ssvfiscanf_r+0xd64>
 8019f9c:	2d00      	cmp	r5, #0
 8019f9e:	f43f aa21 	beq.w	80193e4 <__ssvfiscanf_r+0xb4>
 8019fa2:	2020      	movs	r0, #32
 8019fa4:	f7fe fa48 	bl	8018438 <malloc>
 8019fa8:	4681      	mov	r9, r0
 8019faa:	2800      	cmp	r0, #0
 8019fac:	f43f aac7 	beq.w	801953e <__ssvfiscanf_r+0x20e>
 8019fb0:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8019fb4:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8019fb8:	6028      	str	r0, [r5, #0]
 8019fba:	45c2      	cmp	sl, r8
 8019fbc:	d313      	bcc.n	8019fe6 <__ssvfiscanf_r+0xcb6>
 8019fbe:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8019fc2:	4598      	cmp	r8, r3
 8019fc4:	f63f ab60 	bhi.w	8019688 <__ssvfiscanf_r+0x358>
 8019fc8:	f108 0808 	add.w	r8, r8, #8
 8019fcc:	f8db 0000 	ldr.w	r0, [fp]
 8019fd0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8019fd4:	f001 f9f2 	bl	801b3bc <realloc>
 8019fd8:	2800      	cmp	r0, #0
 8019fda:	f43f ab55 	beq.w	8019688 <__ssvfiscanf_r+0x358>
 8019fde:	f8cb 0000 	str.w	r0, [fp]
 8019fe2:	f8ab 8004 	strh.w	r8, [fp, #4]
 8019fe6:	f8db 3000 	ldr.w	r3, [fp]
 8019fea:	f10a 0201 	add.w	r2, sl, #1
 8019fee:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8019ff2:	f8ab 2006 	strh.w	r2, [fp, #6]
 8019ff6:	46aa      	mov	sl, r5
 8019ff8:	464d      	mov	r5, r9
 8019ffa:	f04f 0920 	mov.w	r9, #32
 8019ffe:	46a8      	mov	r8, r5
 801a000:	6823      	ldr	r3, [r4, #0]
 801a002:	4925      	ldr	r1, [pc, #148]	; (801a098 <__ssvfiscanf_r+0xd68>)
 801a004:	781a      	ldrb	r2, [r3, #0]
 801a006:	5c52      	ldrb	r2, [r2, r1]
 801a008:	0712      	lsls	r2, r2, #28
 801a00a:	d42b      	bmi.n	801a064 <__ssvfiscanf_r+0xd34>
 801a00c:	6862      	ldr	r2, [r4, #4]
 801a00e:	3a01      	subs	r2, #1
 801a010:	6062      	str	r2, [r4, #4]
 801a012:	1c5a      	adds	r2, r3, #1
 801a014:	6022      	str	r2, [r4, #0]
 801a016:	781b      	ldrb	r3, [r3, #0]
 801a018:	f805 3b01 	strb.w	r3, [r5], #1
 801a01c:	f1ba 0f00 	cmp.w	sl, #0
 801a020:	d012      	beq.n	801a048 <__ssvfiscanf_r+0xd18>
 801a022:	eba5 0308 	sub.w	r3, r5, r8
 801a026:	454b      	cmp	r3, r9
 801a028:	d30e      	bcc.n	801a048 <__ssvfiscanf_r+0xd18>
 801a02a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a02e:	4640      	mov	r0, r8
 801a030:	4649      	mov	r1, r9
 801a032:	61bb      	str	r3, [r7, #24]
 801a034:	f001 f9c2 	bl	801b3bc <realloc>
 801a038:	4680      	mov	r8, r0
 801a03a:	2800      	cmp	r0, #0
 801a03c:	f43f aa7f 	beq.w	801953e <__ssvfiscanf_r+0x20e>
 801a040:	69bb      	ldr	r3, [r7, #24]
 801a042:	f8ca 0000 	str.w	r0, [sl]
 801a046:	18c5      	adds	r5, r0, r3
 801a048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a04a:	3b01      	subs	r3, #1
 801a04c:	62bb      	str	r3, [r7, #40]	; 0x28
 801a04e:	d009      	beq.n	801a064 <__ssvfiscanf_r+0xd34>
 801a050:	6863      	ldr	r3, [r4, #4]
 801a052:	2b00      	cmp	r3, #0
 801a054:	dcd4      	bgt.n	801a000 <__ssvfiscanf_r+0xcd0>
 801a056:	ee18 0a10 	vmov	r0, s16
 801a05a:	4621      	mov	r1, r4
 801a05c:	f7ff f913 	bl	8019286 <__ssrefill_r>
 801a060:	2800      	cmp	r0, #0
 801a062:	d0cd      	beq.n	801a000 <__ssvfiscanf_r+0xcd0>
 801a064:	2300      	movs	r3, #0
 801a066:	702b      	strb	r3, [r5, #0]
 801a068:	eba5 0508 	sub.w	r5, r5, r8
 801a06c:	f1ba 0f00 	cmp.w	sl, #0
 801a070:	d009      	beq.n	801a086 <__ssvfiscanf_r+0xd56>
 801a072:	1c69      	adds	r1, r5, #1
 801a074:	4589      	cmp	r9, r1
 801a076:	d906      	bls.n	801a086 <__ssvfiscanf_r+0xd56>
 801a078:	f8da 0000 	ldr.w	r0, [sl]
 801a07c:	f001 f99e 	bl	801b3bc <realloc>
 801a080:	b108      	cbz	r0, 801a086 <__ssvfiscanf_r+0xd56>
 801a082:	f8ca 0000 	str.w	r0, [sl]
 801a086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a088:	442b      	add	r3, r5
 801a08a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a08e:	3301      	adds	r3, #1
 801a090:	f7ff b96a 	b.w	8019368 <__ssvfiscanf_r+0x38>
 801a094:	46ca      	mov	sl, r9
 801a096:	e7b2      	b.n	8019ffe <__ssvfiscanf_r+0xcce>
 801a098:	0801f849 	.word	0x0801f849
 801a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a09e:	3b01      	subs	r3, #1
 801a0a0:	2b26      	cmp	r3, #38	; 0x26
 801a0a2:	bf81      	itttt	hi
 801a0a4:	6abb      	ldrhi	r3, [r7, #40]	; 0x28
 801a0a6:	f1a3 0527 	subhi.w	r5, r3, #39	; 0x27
 801a0aa:	2327      	movhi	r3, #39	; 0x27
 801a0ac:	62bb      	strhi	r3, [r7, #40]	; 0x28
 801a0ae:	bf98      	it	ls
 801a0b0:	2500      	movls	r5, #0
 801a0b2:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
 801a0b6:	f04f 0a00 	mov.w	sl, #0
 801a0ba:	f107 0848 	add.w	r8, r7, #72	; 0x48
 801a0be:	6822      	ldr	r2, [r4, #0]
 801a0c0:	7813      	ldrb	r3, [r2, #0]
 801a0c2:	2b39      	cmp	r3, #57	; 0x39
 801a0c4:	d80f      	bhi.n	801a0e6 <__ssvfiscanf_r+0xdb6>
 801a0c6:	2b2a      	cmp	r3, #42	; 0x2a
 801a0c8:	d91a      	bls.n	801a100 <__ssvfiscanf_r+0xdd0>
 801a0ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a0ce:	290e      	cmp	r1, #14
 801a0d0:	d816      	bhi.n	801a100 <__ssvfiscanf_r+0xdd0>
 801a0d2:	e8df f001 	tbb	[pc, r1]
 801a0d6:	1577      	.short	0x1577
 801a0d8:	41151577 	.word	0x41151577
 801a0dc:	67676767 	.word	0x67676767
 801a0e0:	6f676767 	.word	0x6f676767
 801a0e4:	6f          	.byte	0x6f
 801a0e5:	00          	.byte	0x00
 801a0e6:	2b66      	cmp	r3, #102	; 0x66
 801a0e8:	d834      	bhi.n	801a154 <__ssvfiscanf_r+0xe24>
 801a0ea:	2b60      	cmp	r3, #96	; 0x60
 801a0ec:	d803      	bhi.n	801a0f6 <__ssvfiscanf_r+0xdc6>
 801a0ee:	2b46      	cmp	r3, #70	; 0x46
 801a0f0:	d804      	bhi.n	801a0fc <__ssvfiscanf_r+0xdcc>
 801a0f2:	2b40      	cmp	r3, #64	; 0x40
 801a0f4:	d904      	bls.n	801a100 <__ssvfiscanf_r+0xdd0>
 801a0f6:	69f9      	ldr	r1, [r7, #28]
 801a0f8:	290a      	cmp	r1, #10
 801a0fa:	e061      	b.n	801a1c0 <__ssvfiscanf_r+0xe90>
 801a0fc:	2b58      	cmp	r3, #88	; 0x58
 801a0fe:	d067      	beq.n	801a1d0 <__ssvfiscanf_r+0xea0>
 801a100:	f419 7f80 	tst.w	r9, #256	; 0x100
 801a104:	d012      	beq.n	801a12c <__ssvfiscanf_r+0xdfc>
 801a106:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a10a:	4598      	cmp	r8, r3
 801a10c:	d909      	bls.n	801a122 <__ssvfiscanf_r+0xdf2>
 801a10e:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 801a112:	ee18 0a10 	vmov	r0, s16
 801a116:	4622      	mov	r2, r4
 801a118:	f7ff f878 	bl	801920c <_sungetc_r>
 801a11c:	f108 35ff 	add.w	r5, r8, #4294967295
 801a120:	46a8      	mov	r8, r5
 801a122:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a126:	4598      	cmp	r8, r3
 801a128:	f43f a95c 	beq.w	80193e4 <__ssvfiscanf_r+0xb4>
 801a12c:	f019 0210 	ands.w	r2, r9, #16
 801a130:	d16b      	bne.n	801a20a <__ssvfiscanf_r+0xeda>
 801a132:	697d      	ldr	r5, [r7, #20]
 801a134:	69fb      	ldr	r3, [r7, #28]
 801a136:	f888 2000 	strb.w	r2, [r8]
 801a13a:	ee18 0a10 	vmov	r0, s16
 801a13e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801a142:	47a8      	blx	r5
 801a144:	f019 0f20 	tst.w	r9, #32
 801a148:	f106 0504 	add.w	r5, r6, #4
 801a14c:	d054      	beq.n	801a1f8 <__ssvfiscanf_r+0xec8>
 801a14e:	6833      	ldr	r3, [r6, #0]
 801a150:	6018      	str	r0, [r3, #0]
 801a152:	e056      	b.n	801a202 <__ssvfiscanf_r+0xed2>
 801a154:	2b78      	cmp	r3, #120	; 0x78
 801a156:	e7d2      	b.n	801a0fe <__ssvfiscanf_r+0xdce>
 801a158:	f419 6f00 	tst.w	r9, #2048	; 0x800
 801a15c:	d00a      	beq.n	801a174 <__ssvfiscanf_r+0xe44>
 801a15e:	69f9      	ldr	r1, [r7, #28]
 801a160:	b919      	cbnz	r1, 801a16a <__ssvfiscanf_r+0xe3a>
 801a162:	2108      	movs	r1, #8
 801a164:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 801a168:	61f9      	str	r1, [r7, #28]
 801a16a:	f419 6f80 	tst.w	r9, #1024	; 0x400
 801a16e:	d004      	beq.n	801a17a <__ssvfiscanf_r+0xe4a>
 801a170:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
 801a174:	f808 3b01 	strb.w	r3, [r8], #1
 801a178:	e008      	b.n	801a18c <__ssvfiscanf_r+0xe5c>
 801a17a:	f429 7960 	bic.w	r9, r9, #896	; 0x380
 801a17e:	b11d      	cbz	r5, 801a188 <__ssvfiscanf_r+0xe58>
 801a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a182:	3301      	adds	r3, #1
 801a184:	3d01      	subs	r5, #1
 801a186:	62bb      	str	r3, [r7, #40]	; 0x28
 801a188:	f10a 0a01 	add.w	sl, sl, #1
 801a18c:	6863      	ldr	r3, [r4, #4]
 801a18e:	3b01      	subs	r3, #1
 801a190:	2b00      	cmp	r3, #0
 801a192:	6063      	str	r3, [r4, #4]
 801a194:	dd28      	ble.n	801a1e8 <__ssvfiscanf_r+0xeb8>
 801a196:	3201      	adds	r2, #1
 801a198:	6022      	str	r2, [r4, #0]
 801a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a19c:	3b01      	subs	r3, #1
 801a19e:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1a0:	d18d      	bne.n	801a0be <__ssvfiscanf_r+0xd8e>
 801a1a2:	e7ad      	b.n	801a100 <__ssvfiscanf_r+0xdd0>
 801a1a4:	69f8      	ldr	r0, [r7, #28]
 801a1a6:	4932      	ldr	r1, [pc, #200]	; (801a270 <__ssvfiscanf_r+0xf40>)
 801a1a8:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 801a1ac:	61f9      	str	r1, [r7, #28]
 801a1ae:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
 801a1b2:	e7df      	b.n	801a174 <__ssvfiscanf_r+0xe44>
 801a1b4:	69f8      	ldr	r0, [r7, #28]
 801a1b6:	492e      	ldr	r1, [pc, #184]	; (801a270 <__ssvfiscanf_r+0xf40>)
 801a1b8:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 801a1bc:	61f9      	str	r1, [r7, #28]
 801a1be:	2908      	cmp	r1, #8
 801a1c0:	dcf5      	bgt.n	801a1ae <__ssvfiscanf_r+0xe7e>
 801a1c2:	e79d      	b.n	801a100 <__ssvfiscanf_r+0xdd0>
 801a1c4:	f019 0f80 	tst.w	r9, #128	; 0x80
 801a1c8:	d09a      	beq.n	801a100 <__ssvfiscanf_r+0xdd0>
 801a1ca:	f029 0980 	bic.w	r9, r9, #128	; 0x80
 801a1ce:	e7d1      	b.n	801a174 <__ssvfiscanf_r+0xe44>
 801a1d0:	f409 61c0 	and.w	r1, r9, #1536	; 0x600
 801a1d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a1d8:	d192      	bne.n	801a100 <__ssvfiscanf_r+0xdd0>
 801a1da:	f429 7900 	bic.w	r9, r9, #512	; 0x200
 801a1de:	2110      	movs	r1, #16
 801a1e0:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
 801a1e4:	61f9      	str	r1, [r7, #28]
 801a1e6:	e7c5      	b.n	801a174 <__ssvfiscanf_r+0xe44>
 801a1e8:	ee18 0a10 	vmov	r0, s16
 801a1ec:	4621      	mov	r1, r4
 801a1ee:	f7ff f84a 	bl	8019286 <__ssrefill_r>
 801a1f2:	2800      	cmp	r0, #0
 801a1f4:	d0d1      	beq.n	801a19a <__ssvfiscanf_r+0xe6a>
 801a1f6:	e783      	b.n	801a100 <__ssvfiscanf_r+0xdd0>
 801a1f8:	f019 0f08 	tst.w	r9, #8
 801a1fc:	d00e      	beq.n	801a21c <__ssvfiscanf_r+0xeec>
 801a1fe:	6833      	ldr	r3, [r6, #0]
 801a200:	7018      	strb	r0, [r3, #0]
 801a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a204:	3301      	adds	r3, #1
 801a206:	627b      	str	r3, [r7, #36]	; 0x24
 801a208:	462e      	mov	r6, r5
 801a20a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a20e:	eba8 0803 	sub.w	r8, r8, r3
 801a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a214:	44c2      	add	sl, r8
 801a216:	4453      	add	r3, sl
 801a218:	f7ff b982 	b.w	8019520 <__ssvfiscanf_r+0x1f0>
 801a21c:	f019 0f04 	tst.w	r9, #4
 801a220:	d002      	beq.n	801a228 <__ssvfiscanf_r+0xef8>
 801a222:	6833      	ldr	r3, [r6, #0]
 801a224:	8018      	strh	r0, [r3, #0]
 801a226:	e7ec      	b.n	801a202 <__ssvfiscanf_r+0xed2>
 801a228:	f019 0201 	ands.w	r2, r9, #1
 801a22c:	d18f      	bne.n	801a14e <__ssvfiscanf_r+0xe1e>
 801a22e:	f019 0f02 	tst.w	r9, #2
 801a232:	d08c      	beq.n	801a14e <__ssvfiscanf_r+0xe1e>
 801a234:	4b0f      	ldr	r3, [pc, #60]	; (801a274 <__ssvfiscanf_r+0xf44>)
 801a236:	6979      	ldr	r1, [r7, #20]
 801a238:	4299      	cmp	r1, r3
 801a23a:	ee18 0a10 	vmov	r0, s16
 801a23e:	69fb      	ldr	r3, [r7, #28]
 801a240:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801a244:	d105      	bne.n	801a252 <__ssvfiscanf_r+0xf22>
 801a246:	f001 fbd3 	bl	801b9f0 <_strtoull_r>
 801a24a:	6833      	ldr	r3, [r6, #0]
 801a24c:	e9c3 0100 	strd	r0, r1, [r3]
 801a250:	e7d7      	b.n	801a202 <__ssvfiscanf_r+0xed2>
 801a252:	f001 fb31 	bl	801b8b8 <_strtoll_r>
 801a256:	e7f8      	b.n	801a24a <__ssvfiscanf_r+0xf1a>
 801a258:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801a25c:	6818      	ldr	r0, [r3, #0]
 801a25e:	f7fe f8f3 	bl	8018448 <free>
 801a262:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801a266:	3401      	adds	r4, #1
 801a268:	601e      	str	r6, [r3, #0]
 801a26a:	f7ff ba0f 	b.w	801968c <__ssvfiscanf_r+0x35c>
 801a26e:	bf00      	nop
 801a270:	0801fc7c 	.word	0x0801fc7c
 801a274:	080191f5 	.word	0x080191f5

0801a278 <sysconf>:
 801a278:	2808      	cmp	r0, #8
 801a27a:	b508      	push	{r3, lr}
 801a27c:	d006      	beq.n	801a28c <sysconf+0x14>
 801a27e:	f7fd fdaf 	bl	8017de0 <__errno>
 801a282:	2316      	movs	r3, #22
 801a284:	6003      	str	r3, [r0, #0]
 801a286:	f04f 30ff 	mov.w	r0, #4294967295
 801a28a:	bd08      	pop	{r3, pc}
 801a28c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801a290:	e7fb      	b.n	801a28a <sysconf+0x12>

0801a292 <__submore>:
 801a292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a296:	460c      	mov	r4, r1
 801a298:	6b09      	ldr	r1, [r1, #48]	; 0x30
 801a29a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801a29e:	4299      	cmp	r1, r3
 801a2a0:	d11d      	bne.n	801a2de <__submore+0x4c>
 801a2a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a2a6:	f7fe f8d7 	bl	8018458 <_malloc_r>
 801a2aa:	b918      	cbnz	r0, 801a2b4 <__submore+0x22>
 801a2ac:	f04f 30ff 	mov.w	r0, #4294967295
 801a2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a2b8:	6363      	str	r3, [r4, #52]	; 0x34
 801a2ba:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801a2be:	6320      	str	r0, [r4, #48]	; 0x30
 801a2c0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a2c4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 801a2c8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a2cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801a2d0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a2d4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a2d8:	6020      	str	r0, [r4, #0]
 801a2da:	2000      	movs	r0, #0
 801a2dc:	e7e8      	b.n	801a2b0 <__submore+0x1e>
 801a2de:	6b66      	ldr	r6, [r4, #52]	; 0x34
 801a2e0:	0077      	lsls	r7, r6, #1
 801a2e2:	463a      	mov	r2, r7
 801a2e4:	f001 f872 	bl	801b3cc <_realloc_r>
 801a2e8:	4605      	mov	r5, r0
 801a2ea:	2800      	cmp	r0, #0
 801a2ec:	d0de      	beq.n	801a2ac <__submore+0x1a>
 801a2ee:	eb00 0806 	add.w	r8, r0, r6
 801a2f2:	4601      	mov	r1, r0
 801a2f4:	4632      	mov	r2, r6
 801a2f6:	4640      	mov	r0, r8
 801a2f8:	f7fa fe68 	bl	8014fcc <memcpy>
 801a2fc:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 801a300:	f8c4 8000 	str.w	r8, [r4]
 801a304:	e7e9      	b.n	801a2da <__submore+0x48>

0801a306 <__sprint_r>:
 801a306:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a30a:	6893      	ldr	r3, [r2, #8]
 801a30c:	4680      	mov	r8, r0
 801a30e:	460f      	mov	r7, r1
 801a310:	4614      	mov	r4, r2
 801a312:	b91b      	cbnz	r3, 801a31c <__sprint_r+0x16>
 801a314:	6053      	str	r3, [r2, #4]
 801a316:	4618      	mov	r0, r3
 801a318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a31c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801a31e:	049d      	lsls	r5, r3, #18
 801a320:	d520      	bpl.n	801a364 <__sprint_r+0x5e>
 801a322:	6815      	ldr	r5, [r2, #0]
 801a324:	3508      	adds	r5, #8
 801a326:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 801a32a:	f04f 0900 	mov.w	r9, #0
 801a32e:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 801a332:	45ca      	cmp	sl, r9
 801a334:	dc0b      	bgt.n	801a34e <__sprint_r+0x48>
 801a336:	68a3      	ldr	r3, [r4, #8]
 801a338:	f026 0003 	bic.w	r0, r6, #3
 801a33c:	1a18      	subs	r0, r3, r0
 801a33e:	60a0      	str	r0, [r4, #8]
 801a340:	3508      	adds	r5, #8
 801a342:	2800      	cmp	r0, #0
 801a344:	d1ef      	bne.n	801a326 <__sprint_r+0x20>
 801a346:	2300      	movs	r3, #0
 801a348:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801a34c:	e7e4      	b.n	801a318 <__sprint_r+0x12>
 801a34e:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801a352:	463a      	mov	r2, r7
 801a354:	4640      	mov	r0, r8
 801a356:	f000 fe36 	bl	801afc6 <_fputwc_r>
 801a35a:	1c43      	adds	r3, r0, #1
 801a35c:	d0f3      	beq.n	801a346 <__sprint_r+0x40>
 801a35e:	f109 0901 	add.w	r9, r9, #1
 801a362:	e7e6      	b.n	801a332 <__sprint_r+0x2c>
 801a364:	f000 fe6c 	bl	801b040 <__sfvwrite_r>
 801a368:	e7ed      	b.n	801a346 <__sprint_r+0x40>
	...

0801a36c <_vfiprintf_r>:
 801a36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a370:	ed2d 8b02 	vpush	{d8}
 801a374:	b0b9      	sub	sp, #228	; 0xe4
 801a376:	460f      	mov	r7, r1
 801a378:	9201      	str	r2, [sp, #4]
 801a37a:	461d      	mov	r5, r3
 801a37c:	461c      	mov	r4, r3
 801a37e:	4681      	mov	r9, r0
 801a380:	b118      	cbz	r0, 801a38a <_vfiprintf_r+0x1e>
 801a382:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a384:	b90b      	cbnz	r3, 801a38a <_vfiprintf_r+0x1e>
 801a386:	f7fd fe2b 	bl	8017fe0 <__sinit>
 801a38a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a38c:	07d8      	lsls	r0, r3, #31
 801a38e:	d405      	bmi.n	801a39c <_vfiprintf_r+0x30>
 801a390:	89bb      	ldrh	r3, [r7, #12]
 801a392:	0599      	lsls	r1, r3, #22
 801a394:	d402      	bmi.n	801a39c <_vfiprintf_r+0x30>
 801a396:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801a398:	f7fd ffdf 	bl	801835a <__retarget_lock_acquire_recursive>
 801a39c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801a3a0:	049a      	lsls	r2, r3, #18
 801a3a2:	d406      	bmi.n	801a3b2 <_vfiprintf_r+0x46>
 801a3a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a3a8:	81bb      	strh	r3, [r7, #12]
 801a3aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a3ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a3b0:	667b      	str	r3, [r7, #100]	; 0x64
 801a3b2:	89bb      	ldrh	r3, [r7, #12]
 801a3b4:	071e      	lsls	r6, r3, #28
 801a3b6:	d501      	bpl.n	801a3bc <_vfiprintf_r+0x50>
 801a3b8:	693b      	ldr	r3, [r7, #16]
 801a3ba:	b9bb      	cbnz	r3, 801a3ec <_vfiprintf_r+0x80>
 801a3bc:	4639      	mov	r1, r7
 801a3be:	4648      	mov	r0, r9
 801a3c0:	f7fc fe30 	bl	8017024 <__swsetup_r>
 801a3c4:	b190      	cbz	r0, 801a3ec <_vfiprintf_r+0x80>
 801a3c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a3c8:	07d8      	lsls	r0, r3, #31
 801a3ca:	d508      	bpl.n	801a3de <_vfiprintf_r+0x72>
 801a3cc:	f04f 33ff 	mov.w	r3, #4294967295
 801a3d0:	9302      	str	r3, [sp, #8]
 801a3d2:	9802      	ldr	r0, [sp, #8]
 801a3d4:	b039      	add	sp, #228	; 0xe4
 801a3d6:	ecbd 8b02 	vpop	{d8}
 801a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3de:	89bb      	ldrh	r3, [r7, #12]
 801a3e0:	0599      	lsls	r1, r3, #22
 801a3e2:	d4f3      	bmi.n	801a3cc <_vfiprintf_r+0x60>
 801a3e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801a3e6:	f7fd ffba 	bl	801835e <__retarget_lock_release_recursive>
 801a3ea:	e7ef      	b.n	801a3cc <_vfiprintf_r+0x60>
 801a3ec:	89bb      	ldrh	r3, [r7, #12]
 801a3ee:	f003 021a 	and.w	r2, r3, #26
 801a3f2:	2a0a      	cmp	r2, #10
 801a3f4:	d113      	bne.n	801a41e <_vfiprintf_r+0xb2>
 801a3f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801a3fa:	2a00      	cmp	r2, #0
 801a3fc:	db0f      	blt.n	801a41e <_vfiprintf_r+0xb2>
 801a3fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801a400:	07d2      	lsls	r2, r2, #31
 801a402:	d404      	bmi.n	801a40e <_vfiprintf_r+0xa2>
 801a404:	059e      	lsls	r6, r3, #22
 801a406:	d402      	bmi.n	801a40e <_vfiprintf_r+0xa2>
 801a408:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801a40a:	f7fd ffa8 	bl	801835e <__retarget_lock_release_recursive>
 801a40e:	9a01      	ldr	r2, [sp, #4]
 801a410:	462b      	mov	r3, r5
 801a412:	4639      	mov	r1, r7
 801a414:	4648      	mov	r0, r9
 801a416:	f000 fc31 	bl	801ac7c <__sbprintf>
 801a41a:	9002      	str	r0, [sp, #8]
 801a41c:	e7d9      	b.n	801a3d2 <_vfiprintf_r+0x66>
 801a41e:	2300      	movs	r3, #0
 801a420:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 801a424:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a428:	ae0f      	add	r6, sp, #60	; 0x3c
 801a42a:	ee08 3a10 	vmov	s16, r3
 801a42e:	960c      	str	r6, [sp, #48]	; 0x30
 801a430:	9307      	str	r3, [sp, #28]
 801a432:	9302      	str	r3, [sp, #8]
 801a434:	9b01      	ldr	r3, [sp, #4]
 801a436:	461d      	mov	r5, r3
 801a438:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a43c:	b10a      	cbz	r2, 801a442 <_vfiprintf_r+0xd6>
 801a43e:	2a25      	cmp	r2, #37	; 0x25
 801a440:	d1f9      	bne.n	801a436 <_vfiprintf_r+0xca>
 801a442:	9b01      	ldr	r3, [sp, #4]
 801a444:	ebb5 0803 	subs.w	r8, r5, r3
 801a448:	d00d      	beq.n	801a466 <_vfiprintf_r+0xfa>
 801a44a:	e9c6 3800 	strd	r3, r8, [r6]
 801a44e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a450:	4443      	add	r3, r8
 801a452:	930e      	str	r3, [sp, #56]	; 0x38
 801a454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a456:	3301      	adds	r3, #1
 801a458:	2b07      	cmp	r3, #7
 801a45a:	930d      	str	r3, [sp, #52]	; 0x34
 801a45c:	dc75      	bgt.n	801a54a <_vfiprintf_r+0x1de>
 801a45e:	3608      	adds	r6, #8
 801a460:	9b02      	ldr	r3, [sp, #8]
 801a462:	4443      	add	r3, r8
 801a464:	9302      	str	r3, [sp, #8]
 801a466:	782b      	ldrb	r3, [r5, #0]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	f000 83c8 	beq.w	801abfe <_vfiprintf_r+0x892>
 801a46e:	2300      	movs	r3, #0
 801a470:	f04f 31ff 	mov.w	r1, #4294967295
 801a474:	1c6a      	adds	r2, r5, #1
 801a476:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801a47a:	9100      	str	r1, [sp, #0]
 801a47c:	9303      	str	r3, [sp, #12]
 801a47e:	469a      	mov	sl, r3
 801a480:	f812 3b01 	ldrb.w	r3, [r2], #1
 801a484:	9201      	str	r2, [sp, #4]
 801a486:	f1a3 0220 	sub.w	r2, r3, #32
 801a48a:	2a5a      	cmp	r2, #90	; 0x5a
 801a48c:	f200 8310 	bhi.w	801aab0 <_vfiprintf_r+0x744>
 801a490:	e8df f012 	tbh	[pc, r2, lsl #1]
 801a494:	030e0099 	.word	0x030e0099
 801a498:	00a1030e 	.word	0x00a1030e
 801a49c:	030e030e 	.word	0x030e030e
 801a4a0:	0080030e 	.word	0x0080030e
 801a4a4:	030e030e 	.word	0x030e030e
 801a4a8:	00ae00a4 	.word	0x00ae00a4
 801a4ac:	00ab030e 	.word	0x00ab030e
 801a4b0:	030e00b0 	.word	0x030e00b0
 801a4b4:	00ce00cb 	.word	0x00ce00cb
 801a4b8:	00ce00ce 	.word	0x00ce00ce
 801a4bc:	00ce00ce 	.word	0x00ce00ce
 801a4c0:	00ce00ce 	.word	0x00ce00ce
 801a4c4:	00ce00ce 	.word	0x00ce00ce
 801a4c8:	030e030e 	.word	0x030e030e
 801a4cc:	030e030e 	.word	0x030e030e
 801a4d0:	030e030e 	.word	0x030e030e
 801a4d4:	030e030e 	.word	0x030e030e
 801a4d8:	00f8030e 	.word	0x00f8030e
 801a4dc:	030e0106 	.word	0x030e0106
 801a4e0:	030e030e 	.word	0x030e030e
 801a4e4:	030e030e 	.word	0x030e030e
 801a4e8:	030e030e 	.word	0x030e030e
 801a4ec:	030e030e 	.word	0x030e030e
 801a4f0:	014d030e 	.word	0x014d030e
 801a4f4:	030e030e 	.word	0x030e030e
 801a4f8:	0192030e 	.word	0x0192030e
 801a4fc:	0270030e 	.word	0x0270030e
 801a500:	030e030e 	.word	0x030e030e
 801a504:	030e028e 	.word	0x030e028e
 801a508:	030e030e 	.word	0x030e030e
 801a50c:	030e030e 	.word	0x030e030e
 801a510:	030e030e 	.word	0x030e030e
 801a514:	030e030e 	.word	0x030e030e
 801a518:	00f8030e 	.word	0x00f8030e
 801a51c:	030e0108 	.word	0x030e0108
 801a520:	030e030e 	.word	0x030e030e
 801a524:	010800de 	.word	0x010800de
 801a528:	030e00f2 	.word	0x030e00f2
 801a52c:	030e00eb 	.word	0x030e00eb
 801a530:	014f0130 	.word	0x014f0130
 801a534:	00f20182 	.word	0x00f20182
 801a538:	0192030e 	.word	0x0192030e
 801a53c:	02720097 	.word	0x02720097
 801a540:	030e030e 	.word	0x030e030e
 801a544:	030e0065 	.word	0x030e0065
 801a548:	0097      	.short	0x0097
 801a54a:	aa0c      	add	r2, sp, #48	; 0x30
 801a54c:	4639      	mov	r1, r7
 801a54e:	4648      	mov	r0, r9
 801a550:	f7ff fed9 	bl	801a306 <__sprint_r>
 801a554:	2800      	cmp	r0, #0
 801a556:	f040 8331 	bne.w	801abbc <_vfiprintf_r+0x850>
 801a55a:	ae0f      	add	r6, sp, #60	; 0x3c
 801a55c:	e780      	b.n	801a460 <_vfiprintf_r+0xf4>
 801a55e:	4a95      	ldr	r2, [pc, #596]	; (801a7b4 <_vfiprintf_r+0x448>)
 801a560:	9205      	str	r2, [sp, #20]
 801a562:	f01a 0f20 	tst.w	sl, #32
 801a566:	f000 8225 	beq.w	801a9b4 <_vfiprintf_r+0x648>
 801a56a:	3407      	adds	r4, #7
 801a56c:	f024 0b07 	bic.w	fp, r4, #7
 801a570:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801a574:	f01a 0f01 	tst.w	sl, #1
 801a578:	d009      	beq.n	801a58e <_vfiprintf_r+0x222>
 801a57a:	ea54 0205 	orrs.w	r2, r4, r5
 801a57e:	bf1f      	itttt	ne
 801a580:	2230      	movne	r2, #48	; 0x30
 801a582:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 801a586:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 801a58a:	f04a 0a02 	orrne.w	sl, sl, #2
 801a58e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801a592:	e10d      	b.n	801a7b0 <_vfiprintf_r+0x444>
 801a594:	4648      	mov	r0, r9
 801a596:	f7fd fed9 	bl	801834c <_localeconv_r>
 801a59a:	6843      	ldr	r3, [r0, #4]
 801a59c:	4618      	mov	r0, r3
 801a59e:	ee08 3a10 	vmov	s16, r3
 801a5a2:	f7e5 fe35 	bl	8000210 <strlen>
 801a5a6:	9007      	str	r0, [sp, #28]
 801a5a8:	4648      	mov	r0, r9
 801a5aa:	f7fd fecf 	bl	801834c <_localeconv_r>
 801a5ae:	6883      	ldr	r3, [r0, #8]
 801a5b0:	9306      	str	r3, [sp, #24]
 801a5b2:	9b07      	ldr	r3, [sp, #28]
 801a5b4:	b12b      	cbz	r3, 801a5c2 <_vfiprintf_r+0x256>
 801a5b6:	9b06      	ldr	r3, [sp, #24]
 801a5b8:	b11b      	cbz	r3, 801a5c2 <_vfiprintf_r+0x256>
 801a5ba:	781b      	ldrb	r3, [r3, #0]
 801a5bc:	b10b      	cbz	r3, 801a5c2 <_vfiprintf_r+0x256>
 801a5be:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 801a5c2:	9a01      	ldr	r2, [sp, #4]
 801a5c4:	e75c      	b.n	801a480 <_vfiprintf_r+0x114>
 801a5c6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d1f9      	bne.n	801a5c2 <_vfiprintf_r+0x256>
 801a5ce:	2320      	movs	r3, #32
 801a5d0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801a5d4:	e7f5      	b.n	801a5c2 <_vfiprintf_r+0x256>
 801a5d6:	f04a 0a01 	orr.w	sl, sl, #1
 801a5da:	e7f2      	b.n	801a5c2 <_vfiprintf_r+0x256>
 801a5dc:	f854 3b04 	ldr.w	r3, [r4], #4
 801a5e0:	9303      	str	r3, [sp, #12]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	daed      	bge.n	801a5c2 <_vfiprintf_r+0x256>
 801a5e6:	425b      	negs	r3, r3
 801a5e8:	9303      	str	r3, [sp, #12]
 801a5ea:	f04a 0a04 	orr.w	sl, sl, #4
 801a5ee:	e7e8      	b.n	801a5c2 <_vfiprintf_r+0x256>
 801a5f0:	232b      	movs	r3, #43	; 0x2b
 801a5f2:	e7ed      	b.n	801a5d0 <_vfiprintf_r+0x264>
 801a5f4:	9a01      	ldr	r2, [sp, #4]
 801a5f6:	f812 3b01 	ldrb.w	r3, [r2], #1
 801a5fa:	2b2a      	cmp	r3, #42	; 0x2a
 801a5fc:	d112      	bne.n	801a624 <_vfiprintf_r+0x2b8>
 801a5fe:	f854 0b04 	ldr.w	r0, [r4], #4
 801a602:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801a606:	e9cd 3200 	strd	r3, r2, [sp]
 801a60a:	e7da      	b.n	801a5c2 <_vfiprintf_r+0x256>
 801a60c:	9b00      	ldr	r3, [sp, #0]
 801a60e:	200a      	movs	r0, #10
 801a610:	fb00 1303 	mla	r3, r0, r3, r1
 801a614:	9300      	str	r3, [sp, #0]
 801a616:	f812 3b01 	ldrb.w	r3, [r2], #1
 801a61a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a61e:	2909      	cmp	r1, #9
 801a620:	d9f4      	bls.n	801a60c <_vfiprintf_r+0x2a0>
 801a622:	e72f      	b.n	801a484 <_vfiprintf_r+0x118>
 801a624:	2100      	movs	r1, #0
 801a626:	9100      	str	r1, [sp, #0]
 801a628:	e7f7      	b.n	801a61a <_vfiprintf_r+0x2ae>
 801a62a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 801a62e:	e7c8      	b.n	801a5c2 <_vfiprintf_r+0x256>
 801a630:	2100      	movs	r1, #0
 801a632:	9a01      	ldr	r2, [sp, #4]
 801a634:	9103      	str	r1, [sp, #12]
 801a636:	9903      	ldr	r1, [sp, #12]
 801a638:	3b30      	subs	r3, #48	; 0x30
 801a63a:	200a      	movs	r0, #10
 801a63c:	fb00 3301 	mla	r3, r0, r1, r3
 801a640:	9303      	str	r3, [sp, #12]
 801a642:	f812 3b01 	ldrb.w	r3, [r2], #1
 801a646:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a64a:	2909      	cmp	r1, #9
 801a64c:	d9f3      	bls.n	801a636 <_vfiprintf_r+0x2ca>
 801a64e:	e719      	b.n	801a484 <_vfiprintf_r+0x118>
 801a650:	9b01      	ldr	r3, [sp, #4]
 801a652:	781b      	ldrb	r3, [r3, #0]
 801a654:	2b68      	cmp	r3, #104	; 0x68
 801a656:	bf01      	itttt	eq
 801a658:	9b01      	ldreq	r3, [sp, #4]
 801a65a:	3301      	addeq	r3, #1
 801a65c:	9301      	streq	r3, [sp, #4]
 801a65e:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 801a662:	bf18      	it	ne
 801a664:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801a668:	e7ab      	b.n	801a5c2 <_vfiprintf_r+0x256>
 801a66a:	9b01      	ldr	r3, [sp, #4]
 801a66c:	781b      	ldrb	r3, [r3, #0]
 801a66e:	2b6c      	cmp	r3, #108	; 0x6c
 801a670:	d105      	bne.n	801a67e <_vfiprintf_r+0x312>
 801a672:	9b01      	ldr	r3, [sp, #4]
 801a674:	3301      	adds	r3, #1
 801a676:	9301      	str	r3, [sp, #4]
 801a678:	f04a 0a20 	orr.w	sl, sl, #32
 801a67c:	e7a1      	b.n	801a5c2 <_vfiprintf_r+0x256>
 801a67e:	f04a 0a10 	orr.w	sl, sl, #16
 801a682:	e79e      	b.n	801a5c2 <_vfiprintf_r+0x256>
 801a684:	46a3      	mov	fp, r4
 801a686:	2100      	movs	r1, #0
 801a688:	f85b 3b04 	ldr.w	r3, [fp], #4
 801a68c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801a690:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801a694:	2301      	movs	r3, #1
 801a696:	9300      	str	r3, [sp, #0]
 801a698:	460d      	mov	r5, r1
 801a69a:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 801a69e:	e0a0      	b.n	801a7e2 <_vfiprintf_r+0x476>
 801a6a0:	f04a 0a10 	orr.w	sl, sl, #16
 801a6a4:	f01a 0f20 	tst.w	sl, #32
 801a6a8:	d011      	beq.n	801a6ce <_vfiprintf_r+0x362>
 801a6aa:	3407      	adds	r4, #7
 801a6ac:	f024 0b07 	bic.w	fp, r4, #7
 801a6b0:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801a6b4:	2c00      	cmp	r4, #0
 801a6b6:	f175 0300 	sbcs.w	r3, r5, #0
 801a6ba:	da06      	bge.n	801a6ca <_vfiprintf_r+0x35e>
 801a6bc:	4264      	negs	r4, r4
 801a6be:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801a6c2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801a6c6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801a6ca:	2301      	movs	r3, #1
 801a6cc:	e03f      	b.n	801a74e <_vfiprintf_r+0x3e2>
 801a6ce:	f01a 0f10 	tst.w	sl, #16
 801a6d2:	f104 0b04 	add.w	fp, r4, #4
 801a6d6:	d002      	beq.n	801a6de <_vfiprintf_r+0x372>
 801a6d8:	6824      	ldr	r4, [r4, #0]
 801a6da:	17e5      	asrs	r5, r4, #31
 801a6dc:	e7ea      	b.n	801a6b4 <_vfiprintf_r+0x348>
 801a6de:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801a6e2:	6824      	ldr	r4, [r4, #0]
 801a6e4:	d001      	beq.n	801a6ea <_vfiprintf_r+0x37e>
 801a6e6:	b224      	sxth	r4, r4
 801a6e8:	e7f7      	b.n	801a6da <_vfiprintf_r+0x36e>
 801a6ea:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801a6ee:	bf18      	it	ne
 801a6f0:	b264      	sxtbne	r4, r4
 801a6f2:	e7f2      	b.n	801a6da <_vfiprintf_r+0x36e>
 801a6f4:	f01a 0f20 	tst.w	sl, #32
 801a6f8:	f854 3b04 	ldr.w	r3, [r4], #4
 801a6fc:	d005      	beq.n	801a70a <_vfiprintf_r+0x39e>
 801a6fe:	9a02      	ldr	r2, [sp, #8]
 801a700:	4610      	mov	r0, r2
 801a702:	17d1      	asrs	r1, r2, #31
 801a704:	e9c3 0100 	strd	r0, r1, [r3]
 801a708:	e694      	b.n	801a434 <_vfiprintf_r+0xc8>
 801a70a:	f01a 0f10 	tst.w	sl, #16
 801a70e:	d002      	beq.n	801a716 <_vfiprintf_r+0x3aa>
 801a710:	9a02      	ldr	r2, [sp, #8]
 801a712:	601a      	str	r2, [r3, #0]
 801a714:	e68e      	b.n	801a434 <_vfiprintf_r+0xc8>
 801a716:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801a71a:	d002      	beq.n	801a722 <_vfiprintf_r+0x3b6>
 801a71c:	9a02      	ldr	r2, [sp, #8]
 801a71e:	801a      	strh	r2, [r3, #0]
 801a720:	e688      	b.n	801a434 <_vfiprintf_r+0xc8>
 801a722:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801a726:	d0f3      	beq.n	801a710 <_vfiprintf_r+0x3a4>
 801a728:	9a02      	ldr	r2, [sp, #8]
 801a72a:	701a      	strb	r2, [r3, #0]
 801a72c:	e682      	b.n	801a434 <_vfiprintf_r+0xc8>
 801a72e:	f04a 0a10 	orr.w	sl, sl, #16
 801a732:	f01a 0f20 	tst.w	sl, #32
 801a736:	d01d      	beq.n	801a774 <_vfiprintf_r+0x408>
 801a738:	3407      	adds	r4, #7
 801a73a:	f024 0b07 	bic.w	fp, r4, #7
 801a73e:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801a742:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801a746:	2300      	movs	r3, #0
 801a748:	2200      	movs	r2, #0
 801a74a:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 801a74e:	9a00      	ldr	r2, [sp, #0]
 801a750:	3201      	adds	r2, #1
 801a752:	f000 8261 	beq.w	801ac18 <_vfiprintf_r+0x8ac>
 801a756:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 801a75a:	9204      	str	r2, [sp, #16]
 801a75c:	ea54 0205 	orrs.w	r2, r4, r5
 801a760:	f040 8260 	bne.w	801ac24 <_vfiprintf_r+0x8b8>
 801a764:	9a00      	ldr	r2, [sp, #0]
 801a766:	2a00      	cmp	r2, #0
 801a768:	f000 8197 	beq.w	801aa9a <_vfiprintf_r+0x72e>
 801a76c:	2b01      	cmp	r3, #1
 801a76e:	f040 825c 	bne.w	801ac2a <_vfiprintf_r+0x8be>
 801a772:	e135      	b.n	801a9e0 <_vfiprintf_r+0x674>
 801a774:	f01a 0f10 	tst.w	sl, #16
 801a778:	f104 0b04 	add.w	fp, r4, #4
 801a77c:	d001      	beq.n	801a782 <_vfiprintf_r+0x416>
 801a77e:	6824      	ldr	r4, [r4, #0]
 801a780:	e003      	b.n	801a78a <_vfiprintf_r+0x41e>
 801a782:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801a786:	d002      	beq.n	801a78e <_vfiprintf_r+0x422>
 801a788:	8824      	ldrh	r4, [r4, #0]
 801a78a:	2500      	movs	r5, #0
 801a78c:	e7d9      	b.n	801a742 <_vfiprintf_r+0x3d6>
 801a78e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801a792:	d0f4      	beq.n	801a77e <_vfiprintf_r+0x412>
 801a794:	7824      	ldrb	r4, [r4, #0]
 801a796:	e7f8      	b.n	801a78a <_vfiprintf_r+0x41e>
 801a798:	46a3      	mov	fp, r4
 801a79a:	f647 0330 	movw	r3, #30768	; 0x7830
 801a79e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801a7a2:	f85b 4b04 	ldr.w	r4, [fp], #4
 801a7a6:	4b03      	ldr	r3, [pc, #12]	; (801a7b4 <_vfiprintf_r+0x448>)
 801a7a8:	9305      	str	r3, [sp, #20]
 801a7aa:	2500      	movs	r5, #0
 801a7ac:	f04a 0a02 	orr.w	sl, sl, #2
 801a7b0:	2302      	movs	r3, #2
 801a7b2:	e7c9      	b.n	801a748 <_vfiprintf_r+0x3dc>
 801a7b4:	0801f9fc 	.word	0x0801f9fc
 801a7b8:	9b00      	ldr	r3, [sp, #0]
 801a7ba:	46a3      	mov	fp, r4
 801a7bc:	2500      	movs	r5, #0
 801a7be:	1c5c      	adds	r4, r3, #1
 801a7c0:	f85b 8b04 	ldr.w	r8, [fp], #4
 801a7c4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a7c8:	f000 80cf 	beq.w	801a96a <_vfiprintf_r+0x5fe>
 801a7cc:	461a      	mov	r2, r3
 801a7ce:	4629      	mov	r1, r5
 801a7d0:	4640      	mov	r0, r8
 801a7d2:	f7e5 fd25 	bl	8000220 <memchr>
 801a7d6:	2800      	cmp	r0, #0
 801a7d8:	f000 8174 	beq.w	801aac4 <_vfiprintf_r+0x758>
 801a7dc:	eba0 0308 	sub.w	r3, r0, r8
 801a7e0:	9300      	str	r3, [sp, #0]
 801a7e2:	9b00      	ldr	r3, [sp, #0]
 801a7e4:	42ab      	cmp	r3, r5
 801a7e6:	bfb8      	it	lt
 801a7e8:	462b      	movlt	r3, r5
 801a7ea:	9304      	str	r3, [sp, #16]
 801a7ec:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801a7f0:	b113      	cbz	r3, 801a7f8 <_vfiprintf_r+0x48c>
 801a7f2:	9b04      	ldr	r3, [sp, #16]
 801a7f4:	3301      	adds	r3, #1
 801a7f6:	9304      	str	r3, [sp, #16]
 801a7f8:	f01a 0302 	ands.w	r3, sl, #2
 801a7fc:	9308      	str	r3, [sp, #32]
 801a7fe:	bf1e      	ittt	ne
 801a800:	9b04      	ldrne	r3, [sp, #16]
 801a802:	3302      	addne	r3, #2
 801a804:	9304      	strne	r3, [sp, #16]
 801a806:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 801a80a:	9309      	str	r3, [sp, #36]	; 0x24
 801a80c:	d11f      	bne.n	801a84e <_vfiprintf_r+0x4e2>
 801a80e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801a812:	1a9c      	subs	r4, r3, r2
 801a814:	2c00      	cmp	r4, #0
 801a816:	dd1a      	ble.n	801a84e <_vfiprintf_r+0x4e2>
 801a818:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801a81c:	48b9      	ldr	r0, [pc, #740]	; (801ab04 <_vfiprintf_r+0x798>)
 801a81e:	6030      	str	r0, [r6, #0]
 801a820:	2c10      	cmp	r4, #16
 801a822:	f103 0301 	add.w	r3, r3, #1
 801a826:	f106 0108 	add.w	r1, r6, #8
 801a82a:	f300 814d 	bgt.w	801aac8 <_vfiprintf_r+0x75c>
 801a82e:	6074      	str	r4, [r6, #4]
 801a830:	2b07      	cmp	r3, #7
 801a832:	4414      	add	r4, r2
 801a834:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801a838:	f340 8158 	ble.w	801aaec <_vfiprintf_r+0x780>
 801a83c:	aa0c      	add	r2, sp, #48	; 0x30
 801a83e:	4639      	mov	r1, r7
 801a840:	4648      	mov	r0, r9
 801a842:	f7ff fd60 	bl	801a306 <__sprint_r>
 801a846:	2800      	cmp	r0, #0
 801a848:	f040 81b8 	bne.w	801abbc <_vfiprintf_r+0x850>
 801a84c:	ae0f      	add	r6, sp, #60	; 0x3c
 801a84e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801a852:	b173      	cbz	r3, 801a872 <_vfiprintf_r+0x506>
 801a854:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 801a858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a85a:	6032      	str	r2, [r6, #0]
 801a85c:	2201      	movs	r2, #1
 801a85e:	6072      	str	r2, [r6, #4]
 801a860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a862:	3301      	adds	r3, #1
 801a864:	3201      	adds	r2, #1
 801a866:	2b07      	cmp	r3, #7
 801a868:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801a86c:	f300 8140 	bgt.w	801aaf0 <_vfiprintf_r+0x784>
 801a870:	3608      	adds	r6, #8
 801a872:	9b08      	ldr	r3, [sp, #32]
 801a874:	b16b      	cbz	r3, 801a892 <_vfiprintf_r+0x526>
 801a876:	aa0b      	add	r2, sp, #44	; 0x2c
 801a878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a87a:	6032      	str	r2, [r6, #0]
 801a87c:	2202      	movs	r2, #2
 801a87e:	6072      	str	r2, [r6, #4]
 801a880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a882:	3301      	adds	r3, #1
 801a884:	3202      	adds	r2, #2
 801a886:	2b07      	cmp	r3, #7
 801a888:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801a88c:	f300 8140 	bgt.w	801ab10 <_vfiprintf_r+0x7a4>
 801a890:	3608      	adds	r6, #8
 801a892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a894:	2b80      	cmp	r3, #128	; 0x80
 801a896:	d11f      	bne.n	801a8d8 <_vfiprintf_r+0x56c>
 801a898:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801a89c:	1a9c      	subs	r4, r3, r2
 801a89e:	2c00      	cmp	r4, #0
 801a8a0:	dd1a      	ble.n	801a8d8 <_vfiprintf_r+0x56c>
 801a8a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801a8a6:	4898      	ldr	r0, [pc, #608]	; (801ab08 <_vfiprintf_r+0x79c>)
 801a8a8:	6030      	str	r0, [r6, #0]
 801a8aa:	2c10      	cmp	r4, #16
 801a8ac:	f103 0301 	add.w	r3, r3, #1
 801a8b0:	f106 0108 	add.w	r1, r6, #8
 801a8b4:	f300 8135 	bgt.w	801ab22 <_vfiprintf_r+0x7b6>
 801a8b8:	6074      	str	r4, [r6, #4]
 801a8ba:	2b07      	cmp	r3, #7
 801a8bc:	4414      	add	r4, r2
 801a8be:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801a8c2:	f340 8140 	ble.w	801ab46 <_vfiprintf_r+0x7da>
 801a8c6:	aa0c      	add	r2, sp, #48	; 0x30
 801a8c8:	4639      	mov	r1, r7
 801a8ca:	4648      	mov	r0, r9
 801a8cc:	f7ff fd1b 	bl	801a306 <__sprint_r>
 801a8d0:	2800      	cmp	r0, #0
 801a8d2:	f040 8173 	bne.w	801abbc <_vfiprintf_r+0x850>
 801a8d6:	ae0f      	add	r6, sp, #60	; 0x3c
 801a8d8:	9b00      	ldr	r3, [sp, #0]
 801a8da:	1aec      	subs	r4, r5, r3
 801a8dc:	2c00      	cmp	r4, #0
 801a8de:	dd1a      	ble.n	801a916 <_vfiprintf_r+0x5aa>
 801a8e0:	4d89      	ldr	r5, [pc, #548]	; (801ab08 <_vfiprintf_r+0x79c>)
 801a8e2:	6035      	str	r5, [r6, #0]
 801a8e4:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 801a8e8:	2c10      	cmp	r4, #16
 801a8ea:	f103 0301 	add.w	r3, r3, #1
 801a8ee:	f106 0208 	add.w	r2, r6, #8
 801a8f2:	f300 812a 	bgt.w	801ab4a <_vfiprintf_r+0x7de>
 801a8f6:	6074      	str	r4, [r6, #4]
 801a8f8:	2b07      	cmp	r3, #7
 801a8fa:	440c      	add	r4, r1
 801a8fc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 801a900:	f340 8134 	ble.w	801ab6c <_vfiprintf_r+0x800>
 801a904:	aa0c      	add	r2, sp, #48	; 0x30
 801a906:	4639      	mov	r1, r7
 801a908:	4648      	mov	r0, r9
 801a90a:	f7ff fcfc 	bl	801a306 <__sprint_r>
 801a90e:	2800      	cmp	r0, #0
 801a910:	f040 8154 	bne.w	801abbc <_vfiprintf_r+0x850>
 801a914:	ae0f      	add	r6, sp, #60	; 0x3c
 801a916:	9b00      	ldr	r3, [sp, #0]
 801a918:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a91a:	6073      	str	r3, [r6, #4]
 801a91c:	4418      	add	r0, r3
 801a91e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a920:	f8c6 8000 	str.w	r8, [r6]
 801a924:	3301      	adds	r3, #1
 801a926:	2b07      	cmp	r3, #7
 801a928:	900e      	str	r0, [sp, #56]	; 0x38
 801a92a:	930d      	str	r3, [sp, #52]	; 0x34
 801a92c:	f300 8120 	bgt.w	801ab70 <_vfiprintf_r+0x804>
 801a930:	f106 0308 	add.w	r3, r6, #8
 801a934:	f01a 0f04 	tst.w	sl, #4
 801a938:	f040 8122 	bne.w	801ab80 <_vfiprintf_r+0x814>
 801a93c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801a940:	9904      	ldr	r1, [sp, #16]
 801a942:	428a      	cmp	r2, r1
 801a944:	bfac      	ite	ge
 801a946:	189b      	addge	r3, r3, r2
 801a948:	185b      	addlt	r3, r3, r1
 801a94a:	9302      	str	r3, [sp, #8]
 801a94c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a94e:	b13b      	cbz	r3, 801a960 <_vfiprintf_r+0x5f4>
 801a950:	aa0c      	add	r2, sp, #48	; 0x30
 801a952:	4639      	mov	r1, r7
 801a954:	4648      	mov	r0, r9
 801a956:	f7ff fcd6 	bl	801a306 <__sprint_r>
 801a95a:	2800      	cmp	r0, #0
 801a95c:	f040 812e 	bne.w	801abbc <_vfiprintf_r+0x850>
 801a960:	2300      	movs	r3, #0
 801a962:	930d      	str	r3, [sp, #52]	; 0x34
 801a964:	465c      	mov	r4, fp
 801a966:	ae0f      	add	r6, sp, #60	; 0x3c
 801a968:	e564      	b.n	801a434 <_vfiprintf_r+0xc8>
 801a96a:	4640      	mov	r0, r8
 801a96c:	f7e5 fc50 	bl	8000210 <strlen>
 801a970:	9000      	str	r0, [sp, #0]
 801a972:	e736      	b.n	801a7e2 <_vfiprintf_r+0x476>
 801a974:	f04a 0a10 	orr.w	sl, sl, #16
 801a978:	f01a 0f20 	tst.w	sl, #32
 801a97c:	d006      	beq.n	801a98c <_vfiprintf_r+0x620>
 801a97e:	3407      	adds	r4, #7
 801a980:	f024 0b07 	bic.w	fp, r4, #7
 801a984:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801a988:	2301      	movs	r3, #1
 801a98a:	e6dd      	b.n	801a748 <_vfiprintf_r+0x3dc>
 801a98c:	f01a 0f10 	tst.w	sl, #16
 801a990:	f104 0b04 	add.w	fp, r4, #4
 801a994:	d001      	beq.n	801a99a <_vfiprintf_r+0x62e>
 801a996:	6824      	ldr	r4, [r4, #0]
 801a998:	e003      	b.n	801a9a2 <_vfiprintf_r+0x636>
 801a99a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801a99e:	d002      	beq.n	801a9a6 <_vfiprintf_r+0x63a>
 801a9a0:	8824      	ldrh	r4, [r4, #0]
 801a9a2:	2500      	movs	r5, #0
 801a9a4:	e7f0      	b.n	801a988 <_vfiprintf_r+0x61c>
 801a9a6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801a9aa:	d0f4      	beq.n	801a996 <_vfiprintf_r+0x62a>
 801a9ac:	7824      	ldrb	r4, [r4, #0]
 801a9ae:	e7f8      	b.n	801a9a2 <_vfiprintf_r+0x636>
 801a9b0:	4a56      	ldr	r2, [pc, #344]	; (801ab0c <_vfiprintf_r+0x7a0>)
 801a9b2:	e5d5      	b.n	801a560 <_vfiprintf_r+0x1f4>
 801a9b4:	f01a 0f10 	tst.w	sl, #16
 801a9b8:	f104 0b04 	add.w	fp, r4, #4
 801a9bc:	d001      	beq.n	801a9c2 <_vfiprintf_r+0x656>
 801a9be:	6824      	ldr	r4, [r4, #0]
 801a9c0:	e003      	b.n	801a9ca <_vfiprintf_r+0x65e>
 801a9c2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801a9c6:	d002      	beq.n	801a9ce <_vfiprintf_r+0x662>
 801a9c8:	8824      	ldrh	r4, [r4, #0]
 801a9ca:	2500      	movs	r5, #0
 801a9cc:	e5d2      	b.n	801a574 <_vfiprintf_r+0x208>
 801a9ce:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801a9d2:	d0f4      	beq.n	801a9be <_vfiprintf_r+0x652>
 801a9d4:	7824      	ldrb	r4, [r4, #0]
 801a9d6:	e7f8      	b.n	801a9ca <_vfiprintf_r+0x65e>
 801a9d8:	2d00      	cmp	r5, #0
 801a9da:	bf08      	it	eq
 801a9dc:	2c0a      	cmpeq	r4, #10
 801a9de:	d205      	bcs.n	801a9ec <_vfiprintf_r+0x680>
 801a9e0:	3430      	adds	r4, #48	; 0x30
 801a9e2:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 801a9e6:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 801a9ea:	e13c      	b.n	801ac66 <_vfiprintf_r+0x8fa>
 801a9ec:	ab38      	add	r3, sp, #224	; 0xe0
 801a9ee:	9308      	str	r3, [sp, #32]
 801a9f0:	9b04      	ldr	r3, [sp, #16]
 801a9f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a9f6:	f04f 0a00 	mov.w	sl, #0
 801a9fa:	9309      	str	r3, [sp, #36]	; 0x24
 801a9fc:	9b08      	ldr	r3, [sp, #32]
 801a9fe:	220a      	movs	r2, #10
 801aa00:	f103 38ff 	add.w	r8, r3, #4294967295
 801aa04:	4620      	mov	r0, r4
 801aa06:	2300      	movs	r3, #0
 801aa08:	4629      	mov	r1, r5
 801aa0a:	f7e6 f8f7 	bl	8000bfc <__aeabi_uldivmod>
 801aa0e:	9b08      	ldr	r3, [sp, #32]
 801aa10:	3230      	adds	r2, #48	; 0x30
 801aa12:	f803 2c01 	strb.w	r2, [r3, #-1]
 801aa16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa18:	f10a 0a01 	add.w	sl, sl, #1
 801aa1c:	b1db      	cbz	r3, 801aa56 <_vfiprintf_r+0x6ea>
 801aa1e:	9b06      	ldr	r3, [sp, #24]
 801aa20:	781b      	ldrb	r3, [r3, #0]
 801aa22:	4553      	cmp	r3, sl
 801aa24:	d117      	bne.n	801aa56 <_vfiprintf_r+0x6ea>
 801aa26:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801aa2a:	d014      	beq.n	801aa56 <_vfiprintf_r+0x6ea>
 801aa2c:	2d00      	cmp	r5, #0
 801aa2e:	bf08      	it	eq
 801aa30:	2c0a      	cmpeq	r4, #10
 801aa32:	d310      	bcc.n	801aa56 <_vfiprintf_r+0x6ea>
 801aa34:	9b07      	ldr	r3, [sp, #28]
 801aa36:	eba8 0803 	sub.w	r8, r8, r3
 801aa3a:	461a      	mov	r2, r3
 801aa3c:	ee18 1a10 	vmov	r1, s16
 801aa40:	4640      	mov	r0, r8
 801aa42:	f7fe fb48 	bl	80190d6 <strncpy>
 801aa46:	9b06      	ldr	r3, [sp, #24]
 801aa48:	785b      	ldrb	r3, [r3, #1]
 801aa4a:	b1a3      	cbz	r3, 801aa76 <_vfiprintf_r+0x70a>
 801aa4c:	9b06      	ldr	r3, [sp, #24]
 801aa4e:	3301      	adds	r3, #1
 801aa50:	9306      	str	r3, [sp, #24]
 801aa52:	f04f 0a00 	mov.w	sl, #0
 801aa56:	220a      	movs	r2, #10
 801aa58:	2300      	movs	r3, #0
 801aa5a:	4620      	mov	r0, r4
 801aa5c:	4629      	mov	r1, r5
 801aa5e:	f7e6 f8cd 	bl	8000bfc <__aeabi_uldivmod>
 801aa62:	2d00      	cmp	r5, #0
 801aa64:	bf08      	it	eq
 801aa66:	2c0a      	cmpeq	r4, #10
 801aa68:	f0c0 80fd 	bcc.w	801ac66 <_vfiprintf_r+0x8fa>
 801aa6c:	4604      	mov	r4, r0
 801aa6e:	460d      	mov	r5, r1
 801aa70:	f8cd 8020 	str.w	r8, [sp, #32]
 801aa74:	e7c2      	b.n	801a9fc <_vfiprintf_r+0x690>
 801aa76:	469a      	mov	sl, r3
 801aa78:	e7ed      	b.n	801aa56 <_vfiprintf_r+0x6ea>
 801aa7a:	9a05      	ldr	r2, [sp, #20]
 801aa7c:	f004 030f 	and.w	r3, r4, #15
 801aa80:	5cd3      	ldrb	r3, [r2, r3]
 801aa82:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801aa86:	0923      	lsrs	r3, r4, #4
 801aa88:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 801aa8c:	092a      	lsrs	r2, r5, #4
 801aa8e:	461c      	mov	r4, r3
 801aa90:	4615      	mov	r5, r2
 801aa92:	ea54 0305 	orrs.w	r3, r4, r5
 801aa96:	d1f0      	bne.n	801aa7a <_vfiprintf_r+0x70e>
 801aa98:	e0e5      	b.n	801ac66 <_vfiprintf_r+0x8fa>
 801aa9a:	b933      	cbnz	r3, 801aaaa <_vfiprintf_r+0x73e>
 801aa9c:	f01a 0f01 	tst.w	sl, #1
 801aaa0:	d003      	beq.n	801aaaa <_vfiprintf_r+0x73e>
 801aaa2:	2330      	movs	r3, #48	; 0x30
 801aaa4:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 801aaa8:	e79d      	b.n	801a9e6 <_vfiprintf_r+0x67a>
 801aaaa:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 801aaae:	e0da      	b.n	801ac66 <_vfiprintf_r+0x8fa>
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	f000 80a4 	beq.w	801abfe <_vfiprintf_r+0x892>
 801aab6:	2100      	movs	r1, #0
 801aab8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801aabc:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801aac0:	46a3      	mov	fp, r4
 801aac2:	e5e7      	b.n	801a694 <_vfiprintf_r+0x328>
 801aac4:	4605      	mov	r5, r0
 801aac6:	e68c      	b.n	801a7e2 <_vfiprintf_r+0x476>
 801aac8:	2010      	movs	r0, #16
 801aaca:	4402      	add	r2, r0
 801aacc:	2b07      	cmp	r3, #7
 801aace:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801aad2:	6070      	str	r0, [r6, #4]
 801aad4:	dd07      	ble.n	801aae6 <_vfiprintf_r+0x77a>
 801aad6:	aa0c      	add	r2, sp, #48	; 0x30
 801aad8:	4639      	mov	r1, r7
 801aada:	4648      	mov	r0, r9
 801aadc:	f7ff fc13 	bl	801a306 <__sprint_r>
 801aae0:	2800      	cmp	r0, #0
 801aae2:	d16b      	bne.n	801abbc <_vfiprintf_r+0x850>
 801aae4:	a90f      	add	r1, sp, #60	; 0x3c
 801aae6:	3c10      	subs	r4, #16
 801aae8:	460e      	mov	r6, r1
 801aaea:	e695      	b.n	801a818 <_vfiprintf_r+0x4ac>
 801aaec:	460e      	mov	r6, r1
 801aaee:	e6ae      	b.n	801a84e <_vfiprintf_r+0x4e2>
 801aaf0:	aa0c      	add	r2, sp, #48	; 0x30
 801aaf2:	4639      	mov	r1, r7
 801aaf4:	4648      	mov	r0, r9
 801aaf6:	f7ff fc06 	bl	801a306 <__sprint_r>
 801aafa:	2800      	cmp	r0, #0
 801aafc:	d15e      	bne.n	801abbc <_vfiprintf_r+0x850>
 801aafe:	ae0f      	add	r6, sp, #60	; 0x3c
 801ab00:	e6b7      	b.n	801a872 <_vfiprintf_r+0x506>
 801ab02:	bf00      	nop
 801ab04:	0801fc9e 	.word	0x0801fc9e
 801ab08:	0801fcae 	.word	0x0801fcae
 801ab0c:	0801fa0d 	.word	0x0801fa0d
 801ab10:	aa0c      	add	r2, sp, #48	; 0x30
 801ab12:	4639      	mov	r1, r7
 801ab14:	4648      	mov	r0, r9
 801ab16:	f7ff fbf6 	bl	801a306 <__sprint_r>
 801ab1a:	2800      	cmp	r0, #0
 801ab1c:	d14e      	bne.n	801abbc <_vfiprintf_r+0x850>
 801ab1e:	ae0f      	add	r6, sp, #60	; 0x3c
 801ab20:	e6b7      	b.n	801a892 <_vfiprintf_r+0x526>
 801ab22:	2010      	movs	r0, #16
 801ab24:	4402      	add	r2, r0
 801ab26:	2b07      	cmp	r3, #7
 801ab28:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 801ab2c:	6070      	str	r0, [r6, #4]
 801ab2e:	dd07      	ble.n	801ab40 <_vfiprintf_r+0x7d4>
 801ab30:	aa0c      	add	r2, sp, #48	; 0x30
 801ab32:	4639      	mov	r1, r7
 801ab34:	4648      	mov	r0, r9
 801ab36:	f7ff fbe6 	bl	801a306 <__sprint_r>
 801ab3a:	2800      	cmp	r0, #0
 801ab3c:	d13e      	bne.n	801abbc <_vfiprintf_r+0x850>
 801ab3e:	a90f      	add	r1, sp, #60	; 0x3c
 801ab40:	3c10      	subs	r4, #16
 801ab42:	460e      	mov	r6, r1
 801ab44:	e6ad      	b.n	801a8a2 <_vfiprintf_r+0x536>
 801ab46:	460e      	mov	r6, r1
 801ab48:	e6c6      	b.n	801a8d8 <_vfiprintf_r+0x56c>
 801ab4a:	2010      	movs	r0, #16
 801ab4c:	4401      	add	r1, r0
 801ab4e:	2b07      	cmp	r3, #7
 801ab50:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801ab54:	6070      	str	r0, [r6, #4]
 801ab56:	dd06      	ble.n	801ab66 <_vfiprintf_r+0x7fa>
 801ab58:	aa0c      	add	r2, sp, #48	; 0x30
 801ab5a:	4639      	mov	r1, r7
 801ab5c:	4648      	mov	r0, r9
 801ab5e:	f7ff fbd2 	bl	801a306 <__sprint_r>
 801ab62:	bb58      	cbnz	r0, 801abbc <_vfiprintf_r+0x850>
 801ab64:	aa0f      	add	r2, sp, #60	; 0x3c
 801ab66:	3c10      	subs	r4, #16
 801ab68:	4616      	mov	r6, r2
 801ab6a:	e6ba      	b.n	801a8e2 <_vfiprintf_r+0x576>
 801ab6c:	4616      	mov	r6, r2
 801ab6e:	e6d2      	b.n	801a916 <_vfiprintf_r+0x5aa>
 801ab70:	aa0c      	add	r2, sp, #48	; 0x30
 801ab72:	4639      	mov	r1, r7
 801ab74:	4648      	mov	r0, r9
 801ab76:	f7ff fbc6 	bl	801a306 <__sprint_r>
 801ab7a:	b9f8      	cbnz	r0, 801abbc <_vfiprintf_r+0x850>
 801ab7c:	ab0f      	add	r3, sp, #60	; 0x3c
 801ab7e:	e6d9      	b.n	801a934 <_vfiprintf_r+0x5c8>
 801ab80:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 801ab84:	1a54      	subs	r4, r2, r1
 801ab86:	2c00      	cmp	r4, #0
 801ab88:	f77f aed8 	ble.w	801a93c <_vfiprintf_r+0x5d0>
 801ab8c:	4d3a      	ldr	r5, [pc, #232]	; (801ac78 <_vfiprintf_r+0x90c>)
 801ab8e:	2610      	movs	r6, #16
 801ab90:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801ab94:	2c10      	cmp	r4, #16
 801ab96:	f102 0201 	add.w	r2, r2, #1
 801ab9a:	601d      	str	r5, [r3, #0]
 801ab9c:	dc1d      	bgt.n	801abda <_vfiprintf_r+0x86e>
 801ab9e:	605c      	str	r4, [r3, #4]
 801aba0:	2a07      	cmp	r2, #7
 801aba2:	440c      	add	r4, r1
 801aba4:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 801aba8:	f77f aec8 	ble.w	801a93c <_vfiprintf_r+0x5d0>
 801abac:	aa0c      	add	r2, sp, #48	; 0x30
 801abae:	4639      	mov	r1, r7
 801abb0:	4648      	mov	r0, r9
 801abb2:	f7ff fba8 	bl	801a306 <__sprint_r>
 801abb6:	2800      	cmp	r0, #0
 801abb8:	f43f aec0 	beq.w	801a93c <_vfiprintf_r+0x5d0>
 801abbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801abbe:	07d9      	lsls	r1, r3, #31
 801abc0:	d405      	bmi.n	801abce <_vfiprintf_r+0x862>
 801abc2:	89bb      	ldrh	r3, [r7, #12]
 801abc4:	059a      	lsls	r2, r3, #22
 801abc6:	d402      	bmi.n	801abce <_vfiprintf_r+0x862>
 801abc8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801abca:	f7fd fbc8 	bl	801835e <__retarget_lock_release_recursive>
 801abce:	89bb      	ldrh	r3, [r7, #12]
 801abd0:	065b      	lsls	r3, r3, #25
 801abd2:	f57f abfe 	bpl.w	801a3d2 <_vfiprintf_r+0x66>
 801abd6:	f7ff bbf9 	b.w	801a3cc <_vfiprintf_r+0x60>
 801abda:	3110      	adds	r1, #16
 801abdc:	2a07      	cmp	r2, #7
 801abde:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 801abe2:	605e      	str	r6, [r3, #4]
 801abe4:	dc02      	bgt.n	801abec <_vfiprintf_r+0x880>
 801abe6:	3308      	adds	r3, #8
 801abe8:	3c10      	subs	r4, #16
 801abea:	e7d1      	b.n	801ab90 <_vfiprintf_r+0x824>
 801abec:	aa0c      	add	r2, sp, #48	; 0x30
 801abee:	4639      	mov	r1, r7
 801abf0:	4648      	mov	r0, r9
 801abf2:	f7ff fb88 	bl	801a306 <__sprint_r>
 801abf6:	2800      	cmp	r0, #0
 801abf8:	d1e0      	bne.n	801abbc <_vfiprintf_r+0x850>
 801abfa:	ab0f      	add	r3, sp, #60	; 0x3c
 801abfc:	e7f4      	b.n	801abe8 <_vfiprintf_r+0x87c>
 801abfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac00:	b913      	cbnz	r3, 801ac08 <_vfiprintf_r+0x89c>
 801ac02:	2300      	movs	r3, #0
 801ac04:	930d      	str	r3, [sp, #52]	; 0x34
 801ac06:	e7d9      	b.n	801abbc <_vfiprintf_r+0x850>
 801ac08:	aa0c      	add	r2, sp, #48	; 0x30
 801ac0a:	4639      	mov	r1, r7
 801ac0c:	4648      	mov	r0, r9
 801ac0e:	f7ff fb7a 	bl	801a306 <__sprint_r>
 801ac12:	2800      	cmp	r0, #0
 801ac14:	d0f5      	beq.n	801ac02 <_vfiprintf_r+0x896>
 801ac16:	e7d1      	b.n	801abbc <_vfiprintf_r+0x850>
 801ac18:	ea54 0205 	orrs.w	r2, r4, r5
 801ac1c:	f8cd a010 	str.w	sl, [sp, #16]
 801ac20:	f43f ada4 	beq.w	801a76c <_vfiprintf_r+0x400>
 801ac24:	2b01      	cmp	r3, #1
 801ac26:	f43f aed7 	beq.w	801a9d8 <_vfiprintf_r+0x66c>
 801ac2a:	2b02      	cmp	r3, #2
 801ac2c:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 801ac30:	f43f af23 	beq.w	801aa7a <_vfiprintf_r+0x70e>
 801ac34:	08e2      	lsrs	r2, r4, #3
 801ac36:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 801ac3a:	08e8      	lsrs	r0, r5, #3
 801ac3c:	f004 0307 	and.w	r3, r4, #7
 801ac40:	4605      	mov	r5, r0
 801ac42:	4614      	mov	r4, r2
 801ac44:	3330      	adds	r3, #48	; 0x30
 801ac46:	ea54 0205 	orrs.w	r2, r4, r5
 801ac4a:	4641      	mov	r1, r8
 801ac4c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801ac50:	d1f0      	bne.n	801ac34 <_vfiprintf_r+0x8c8>
 801ac52:	9a04      	ldr	r2, [sp, #16]
 801ac54:	07d0      	lsls	r0, r2, #31
 801ac56:	d506      	bpl.n	801ac66 <_vfiprintf_r+0x8fa>
 801ac58:	2b30      	cmp	r3, #48	; 0x30
 801ac5a:	d004      	beq.n	801ac66 <_vfiprintf_r+0x8fa>
 801ac5c:	2330      	movs	r3, #48	; 0x30
 801ac5e:	f808 3c01 	strb.w	r3, [r8, #-1]
 801ac62:	f1a1 0802 	sub.w	r8, r1, #2
 801ac66:	ab38      	add	r3, sp, #224	; 0xe0
 801ac68:	eba3 0308 	sub.w	r3, r3, r8
 801ac6c:	9d00      	ldr	r5, [sp, #0]
 801ac6e:	f8dd a010 	ldr.w	sl, [sp, #16]
 801ac72:	9300      	str	r3, [sp, #0]
 801ac74:	e5b5      	b.n	801a7e2 <_vfiprintf_r+0x476>
 801ac76:	bf00      	nop
 801ac78:	0801fc9e 	.word	0x0801fc9e

0801ac7c <__sbprintf>:
 801ac7c:	b570      	push	{r4, r5, r6, lr}
 801ac7e:	460c      	mov	r4, r1
 801ac80:	8989      	ldrh	r1, [r1, #12]
 801ac82:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801ac86:	f021 0102 	bic.w	r1, r1, #2
 801ac8a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ac8e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801ac90:	911b      	str	r1, [sp, #108]	; 0x6c
 801ac92:	89e1      	ldrh	r1, [r4, #14]
 801ac94:	f8ad 1016 	strh.w	r1, [sp, #22]
 801ac98:	69e1      	ldr	r1, [r4, #28]
 801ac9a:	9109      	str	r1, [sp, #36]	; 0x24
 801ac9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ac9e:	910b      	str	r1, [sp, #44]	; 0x2c
 801aca0:	a91c      	add	r1, sp, #112	; 0x70
 801aca2:	9102      	str	r1, [sp, #8]
 801aca4:	9106      	str	r1, [sp, #24]
 801aca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801acaa:	4606      	mov	r6, r0
 801acac:	9104      	str	r1, [sp, #16]
 801acae:	9107      	str	r1, [sp, #28]
 801acb0:	a818      	add	r0, sp, #96	; 0x60
 801acb2:	2100      	movs	r1, #0
 801acb4:	e9cd 3200 	strd	r3, r2, [sp]
 801acb8:	9108      	str	r1, [sp, #32]
 801acba:	f7fd fb4b 	bl	8018354 <__retarget_lock_init_recursive>
 801acbe:	e9dd 3200 	ldrd	r3, r2, [sp]
 801acc2:	a902      	add	r1, sp, #8
 801acc4:	4630      	mov	r0, r6
 801acc6:	f7ff fb51 	bl	801a36c <_vfiprintf_r>
 801acca:	1e05      	subs	r5, r0, #0
 801accc:	db07      	blt.n	801acde <__sbprintf+0x62>
 801acce:	a902      	add	r1, sp, #8
 801acd0:	4630      	mov	r0, r6
 801acd2:	f7fd f919 	bl	8017f08 <_fflush_r>
 801acd6:	2800      	cmp	r0, #0
 801acd8:	bf18      	it	ne
 801acda:	f04f 35ff 	movne.w	r5, #4294967295
 801acde:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801ace2:	9818      	ldr	r0, [sp, #96]	; 0x60
 801ace4:	065b      	lsls	r3, r3, #25
 801ace6:	bf42      	ittt	mi
 801ace8:	89a3      	ldrhmi	r3, [r4, #12]
 801acea:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801acee:	81a3      	strhmi	r3, [r4, #12]
 801acf0:	f7fd fb31 	bl	8018356 <__retarget_lock_close_recursive>
 801acf4:	4628      	mov	r0, r5
 801acf6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801acfa:	bd70      	pop	{r4, r5, r6, pc}

0801acfc <_write_r>:
 801acfc:	b538      	push	{r3, r4, r5, lr}
 801acfe:	4d07      	ldr	r5, [pc, #28]	; (801ad1c <_write_r+0x20>)
 801ad00:	4604      	mov	r4, r0
 801ad02:	4608      	mov	r0, r1
 801ad04:	4611      	mov	r1, r2
 801ad06:	2200      	movs	r2, #0
 801ad08:	602a      	str	r2, [r5, #0]
 801ad0a:	461a      	mov	r2, r3
 801ad0c:	f7e6 f933 	bl	8000f76 <_write>
 801ad10:	1c43      	adds	r3, r0, #1
 801ad12:	d102      	bne.n	801ad1a <_write_r+0x1e>
 801ad14:	682b      	ldr	r3, [r5, #0]
 801ad16:	b103      	cbz	r3, 801ad1a <_write_r+0x1e>
 801ad18:	6023      	str	r3, [r4, #0]
 801ad1a:	bd38      	pop	{r3, r4, r5, pc}
 801ad1c:	2000b654 	.word	0x2000b654

0801ad20 <__register_exitproc>:
 801ad20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad24:	4d1c      	ldr	r5, [pc, #112]	; (801ad98 <__register_exitproc+0x78>)
 801ad26:	4606      	mov	r6, r0
 801ad28:	6828      	ldr	r0, [r5, #0]
 801ad2a:	4698      	mov	r8, r3
 801ad2c:	460f      	mov	r7, r1
 801ad2e:	4691      	mov	r9, r2
 801ad30:	f7fd fb13 	bl	801835a <__retarget_lock_acquire_recursive>
 801ad34:	4b19      	ldr	r3, [pc, #100]	; (801ad9c <__register_exitproc+0x7c>)
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801ad3c:	4628      	mov	r0, r5
 801ad3e:	b91c      	cbnz	r4, 801ad48 <__register_exitproc+0x28>
 801ad40:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801ad44:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801ad48:	6865      	ldr	r5, [r4, #4]
 801ad4a:	6800      	ldr	r0, [r0, #0]
 801ad4c:	2d1f      	cmp	r5, #31
 801ad4e:	dd05      	ble.n	801ad5c <__register_exitproc+0x3c>
 801ad50:	f7fd fb05 	bl	801835e <__retarget_lock_release_recursive>
 801ad54:	f04f 30ff 	mov.w	r0, #4294967295
 801ad58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad5c:	b19e      	cbz	r6, 801ad86 <__register_exitproc+0x66>
 801ad5e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801ad62:	2201      	movs	r2, #1
 801ad64:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801ad68:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801ad6c:	40aa      	lsls	r2, r5
 801ad6e:	4313      	orrs	r3, r2
 801ad70:	2e02      	cmp	r6, #2
 801ad72:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801ad76:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801ad7a:	bf02      	ittt	eq
 801ad7c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801ad80:	431a      	orreq	r2, r3
 801ad82:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 801ad86:	1c6b      	adds	r3, r5, #1
 801ad88:	3502      	adds	r5, #2
 801ad8a:	6063      	str	r3, [r4, #4]
 801ad8c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801ad90:	f7fd fae5 	bl	801835e <__retarget_lock_release_recursive>
 801ad94:	2000      	movs	r0, #0
 801ad96:	e7df      	b.n	801ad58 <__register_exitproc+0x38>
 801ad98:	20000460 	.word	0x20000460
 801ad9c:	0801f94c 	.word	0x0801f94c

0801ada0 <__assert_func>:
 801ada0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ada2:	4614      	mov	r4, r2
 801ada4:	461a      	mov	r2, r3
 801ada6:	4b09      	ldr	r3, [pc, #36]	; (801adcc <__assert_func+0x2c>)
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	4605      	mov	r5, r0
 801adac:	68d8      	ldr	r0, [r3, #12]
 801adae:	b14c      	cbz	r4, 801adc4 <__assert_func+0x24>
 801adb0:	4b07      	ldr	r3, [pc, #28]	; (801add0 <__assert_func+0x30>)
 801adb2:	9100      	str	r1, [sp, #0]
 801adb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801adb8:	4906      	ldr	r1, [pc, #24]	; (801add4 <__assert_func+0x34>)
 801adba:	462b      	mov	r3, r5
 801adbc:	f000 f8b0 	bl	801af20 <fiprintf>
 801adc0:	f000 fe85 	bl	801bace <abort>
 801adc4:	4b04      	ldr	r3, [pc, #16]	; (801add8 <__assert_func+0x38>)
 801adc6:	461c      	mov	r4, r3
 801adc8:	e7f3      	b.n	801adb2 <__assert_func+0x12>
 801adca:	bf00      	nop
 801adcc:	2000002c 	.word	0x2000002c
 801add0:	0801fcbe 	.word	0x0801fcbe
 801add4:	0801fccb 	.word	0x0801fccb
 801add8:	0801fcf9 	.word	0x0801fcf9

0801addc <_calloc_r>:
 801addc:	b510      	push	{r4, lr}
 801adde:	4351      	muls	r1, r2
 801ade0:	f7fd fb3a 	bl	8018458 <_malloc_r>
 801ade4:	4604      	mov	r4, r0
 801ade6:	b198      	cbz	r0, 801ae10 <_calloc_r+0x34>
 801ade8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801adec:	f022 0203 	bic.w	r2, r2, #3
 801adf0:	3a04      	subs	r2, #4
 801adf2:	2a24      	cmp	r2, #36	; 0x24
 801adf4:	d81b      	bhi.n	801ae2e <_calloc_r+0x52>
 801adf6:	2a13      	cmp	r2, #19
 801adf8:	d917      	bls.n	801ae2a <_calloc_r+0x4e>
 801adfa:	2100      	movs	r1, #0
 801adfc:	2a1b      	cmp	r2, #27
 801adfe:	e9c0 1100 	strd	r1, r1, [r0]
 801ae02:	d807      	bhi.n	801ae14 <_calloc_r+0x38>
 801ae04:	f100 0308 	add.w	r3, r0, #8
 801ae08:	2200      	movs	r2, #0
 801ae0a:	e9c3 2200 	strd	r2, r2, [r3]
 801ae0e:	609a      	str	r2, [r3, #8]
 801ae10:	4620      	mov	r0, r4
 801ae12:	bd10      	pop	{r4, pc}
 801ae14:	2a24      	cmp	r2, #36	; 0x24
 801ae16:	e9c0 1102 	strd	r1, r1, [r0, #8]
 801ae1a:	bf11      	iteee	ne
 801ae1c:	f100 0310 	addne.w	r3, r0, #16
 801ae20:	6101      	streq	r1, [r0, #16]
 801ae22:	f100 0318 	addeq.w	r3, r0, #24
 801ae26:	6141      	streq	r1, [r0, #20]
 801ae28:	e7ee      	b.n	801ae08 <_calloc_r+0x2c>
 801ae2a:	4603      	mov	r3, r0
 801ae2c:	e7ec      	b.n	801ae08 <_calloc_r+0x2c>
 801ae2e:	2100      	movs	r1, #0
 801ae30:	f7fa f8f4 	bl	801501c <memset>
 801ae34:	e7ec      	b.n	801ae10 <_calloc_r+0x34>
	...

0801ae38 <_close_r>:
 801ae38:	b538      	push	{r3, r4, r5, lr}
 801ae3a:	4d06      	ldr	r5, [pc, #24]	; (801ae54 <_close_r+0x1c>)
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	4604      	mov	r4, r0
 801ae40:	4608      	mov	r0, r1
 801ae42:	602b      	str	r3, [r5, #0]
 801ae44:	f7e7 fdb7 	bl	80029b6 <_close>
 801ae48:	1c43      	adds	r3, r0, #1
 801ae4a:	d102      	bne.n	801ae52 <_close_r+0x1a>
 801ae4c:	682b      	ldr	r3, [r5, #0]
 801ae4e:	b103      	cbz	r3, 801ae52 <_close_r+0x1a>
 801ae50:	6023      	str	r3, [r4, #0]
 801ae52:	bd38      	pop	{r3, r4, r5, pc}
 801ae54:	2000b654 	.word	0x2000b654

0801ae58 <__env_lock>:
 801ae58:	4801      	ldr	r0, [pc, #4]	; (801ae60 <__env_lock+0x8>)
 801ae5a:	f7fd ba7e 	b.w	801835a <__retarget_lock_acquire_recursive>
 801ae5e:	bf00      	nop
 801ae60:	2000b65e 	.word	0x2000b65e

0801ae64 <__env_unlock>:
 801ae64:	4801      	ldr	r0, [pc, #4]	; (801ae6c <__env_unlock+0x8>)
 801ae66:	f7fd ba7a 	b.w	801835e <__retarget_lock_release_recursive>
 801ae6a:	bf00      	nop
 801ae6c:	2000b65e 	.word	0x2000b65e

0801ae70 <_fclose_r>:
 801ae70:	b570      	push	{r4, r5, r6, lr}
 801ae72:	4606      	mov	r6, r0
 801ae74:	460c      	mov	r4, r1
 801ae76:	b911      	cbnz	r1, 801ae7e <_fclose_r+0xe>
 801ae78:	2500      	movs	r5, #0
 801ae7a:	4628      	mov	r0, r5
 801ae7c:	bd70      	pop	{r4, r5, r6, pc}
 801ae7e:	b118      	cbz	r0, 801ae88 <_fclose_r+0x18>
 801ae80:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801ae82:	b90b      	cbnz	r3, 801ae88 <_fclose_r+0x18>
 801ae84:	f7fd f8ac 	bl	8017fe0 <__sinit>
 801ae88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ae8a:	07d8      	lsls	r0, r3, #31
 801ae8c:	d405      	bmi.n	801ae9a <_fclose_r+0x2a>
 801ae8e:	89a3      	ldrh	r3, [r4, #12]
 801ae90:	0599      	lsls	r1, r3, #22
 801ae92:	d402      	bmi.n	801ae9a <_fclose_r+0x2a>
 801ae94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ae96:	f7fd fa60 	bl	801835a <__retarget_lock_acquire_recursive>
 801ae9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae9e:	b93b      	cbnz	r3, 801aeb0 <_fclose_r+0x40>
 801aea0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801aea2:	f015 0501 	ands.w	r5, r5, #1
 801aea6:	d1e7      	bne.n	801ae78 <_fclose_r+0x8>
 801aea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aeaa:	f7fd fa58 	bl	801835e <__retarget_lock_release_recursive>
 801aeae:	e7e4      	b.n	801ae7a <_fclose_r+0xa>
 801aeb0:	4621      	mov	r1, r4
 801aeb2:	4630      	mov	r0, r6
 801aeb4:	f7fc ff9a 	bl	8017dec <__sflush_r>
 801aeb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801aeba:	4605      	mov	r5, r0
 801aebc:	b133      	cbz	r3, 801aecc <_fclose_r+0x5c>
 801aebe:	69e1      	ldr	r1, [r4, #28]
 801aec0:	4630      	mov	r0, r6
 801aec2:	4798      	blx	r3
 801aec4:	2800      	cmp	r0, #0
 801aec6:	bfb8      	it	lt
 801aec8:	f04f 35ff 	movlt.w	r5, #4294967295
 801aecc:	89a3      	ldrh	r3, [r4, #12]
 801aece:	061a      	lsls	r2, r3, #24
 801aed0:	d503      	bpl.n	801aeda <_fclose_r+0x6a>
 801aed2:	6921      	ldr	r1, [r4, #16]
 801aed4:	4630      	mov	r0, r6
 801aed6:	f7fd f913 	bl	8018100 <_free_r>
 801aeda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801aedc:	b141      	cbz	r1, 801aef0 <_fclose_r+0x80>
 801aede:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801aee2:	4299      	cmp	r1, r3
 801aee4:	d002      	beq.n	801aeec <_fclose_r+0x7c>
 801aee6:	4630      	mov	r0, r6
 801aee8:	f7fd f90a 	bl	8018100 <_free_r>
 801aeec:	2300      	movs	r3, #0
 801aeee:	6323      	str	r3, [r4, #48]	; 0x30
 801aef0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801aef2:	b121      	cbz	r1, 801aefe <_fclose_r+0x8e>
 801aef4:	4630      	mov	r0, r6
 801aef6:	f7fd f903 	bl	8018100 <_free_r>
 801aefa:	2300      	movs	r3, #0
 801aefc:	6463      	str	r3, [r4, #68]	; 0x44
 801aefe:	f7fd f857 	bl	8017fb0 <__sfp_lock_acquire>
 801af02:	2300      	movs	r3, #0
 801af04:	81a3      	strh	r3, [r4, #12]
 801af06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801af08:	07db      	lsls	r3, r3, #31
 801af0a:	d402      	bmi.n	801af12 <_fclose_r+0xa2>
 801af0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801af0e:	f7fd fa26 	bl	801835e <__retarget_lock_release_recursive>
 801af12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801af14:	f7fd fa1f 	bl	8018356 <__retarget_lock_close_recursive>
 801af18:	f7fd f850 	bl	8017fbc <__sfp_lock_release>
 801af1c:	e7ad      	b.n	801ae7a <_fclose_r+0xa>
	...

0801af20 <fiprintf>:
 801af20:	b40e      	push	{r1, r2, r3}
 801af22:	b503      	push	{r0, r1, lr}
 801af24:	4601      	mov	r1, r0
 801af26:	ab03      	add	r3, sp, #12
 801af28:	4805      	ldr	r0, [pc, #20]	; (801af40 <fiprintf+0x20>)
 801af2a:	f853 2b04 	ldr.w	r2, [r3], #4
 801af2e:	6800      	ldr	r0, [r0, #0]
 801af30:	9301      	str	r3, [sp, #4]
 801af32:	f7ff fa1b 	bl	801a36c <_vfiprintf_r>
 801af36:	b002      	add	sp, #8
 801af38:	f85d eb04 	ldr.w	lr, [sp], #4
 801af3c:	b003      	add	sp, #12
 801af3e:	4770      	bx	lr
 801af40:	2000002c 	.word	0x2000002c

0801af44 <__fputwc>:
 801af44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801af48:	4680      	mov	r8, r0
 801af4a:	460e      	mov	r6, r1
 801af4c:	4615      	mov	r5, r2
 801af4e:	f000 f9df 	bl	801b310 <__locale_mb_cur_max>
 801af52:	2801      	cmp	r0, #1
 801af54:	d11c      	bne.n	801af90 <__fputwc+0x4c>
 801af56:	1e73      	subs	r3, r6, #1
 801af58:	2bfe      	cmp	r3, #254	; 0xfe
 801af5a:	d819      	bhi.n	801af90 <__fputwc+0x4c>
 801af5c:	f88d 6004 	strb.w	r6, [sp, #4]
 801af60:	4604      	mov	r4, r0
 801af62:	2700      	movs	r7, #0
 801af64:	f10d 0904 	add.w	r9, sp, #4
 801af68:	42a7      	cmp	r7, r4
 801af6a:	d020      	beq.n	801afae <__fputwc+0x6a>
 801af6c:	68ab      	ldr	r3, [r5, #8]
 801af6e:	f817 1009 	ldrb.w	r1, [r7, r9]
 801af72:	3b01      	subs	r3, #1
 801af74:	2b00      	cmp	r3, #0
 801af76:	60ab      	str	r3, [r5, #8]
 801af78:	da04      	bge.n	801af84 <__fputwc+0x40>
 801af7a:	69aa      	ldr	r2, [r5, #24]
 801af7c:	4293      	cmp	r3, r2
 801af7e:	db1a      	blt.n	801afb6 <__fputwc+0x72>
 801af80:	290a      	cmp	r1, #10
 801af82:	d018      	beq.n	801afb6 <__fputwc+0x72>
 801af84:	682b      	ldr	r3, [r5, #0]
 801af86:	1c5a      	adds	r2, r3, #1
 801af88:	602a      	str	r2, [r5, #0]
 801af8a:	7019      	strb	r1, [r3, #0]
 801af8c:	3701      	adds	r7, #1
 801af8e:	e7eb      	b.n	801af68 <__fputwc+0x24>
 801af90:	4632      	mov	r2, r6
 801af92:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 801af96:	a901      	add	r1, sp, #4
 801af98:	4640      	mov	r0, r8
 801af9a:	f000 fd75 	bl	801ba88 <_wcrtomb_r>
 801af9e:	1c42      	adds	r2, r0, #1
 801afa0:	4604      	mov	r4, r0
 801afa2:	d1de      	bne.n	801af62 <__fputwc+0x1e>
 801afa4:	89ab      	ldrh	r3, [r5, #12]
 801afa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801afaa:	81ab      	strh	r3, [r5, #12]
 801afac:	4606      	mov	r6, r0
 801afae:	4630      	mov	r0, r6
 801afb0:	b003      	add	sp, #12
 801afb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afb6:	462a      	mov	r2, r5
 801afb8:	4640      	mov	r0, r8
 801afba:	f000 fd1b 	bl	801b9f4 <__swbuf_r>
 801afbe:	1c43      	adds	r3, r0, #1
 801afc0:	d1e4      	bne.n	801af8c <__fputwc+0x48>
 801afc2:	4606      	mov	r6, r0
 801afc4:	e7f3      	b.n	801afae <__fputwc+0x6a>

0801afc6 <_fputwc_r>:
 801afc6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801afc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801afca:	4614      	mov	r4, r2
 801afcc:	07da      	lsls	r2, r3, #31
 801afce:	4605      	mov	r5, r0
 801afd0:	d407      	bmi.n	801afe2 <_fputwc_r+0x1c>
 801afd2:	89a3      	ldrh	r3, [r4, #12]
 801afd4:	059b      	lsls	r3, r3, #22
 801afd6:	d404      	bmi.n	801afe2 <_fputwc_r+0x1c>
 801afd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801afda:	9101      	str	r1, [sp, #4]
 801afdc:	f7fd f9bd 	bl	801835a <__retarget_lock_acquire_recursive>
 801afe0:	9901      	ldr	r1, [sp, #4]
 801afe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801afe6:	0498      	lsls	r0, r3, #18
 801afe8:	d406      	bmi.n	801aff8 <_fputwc_r+0x32>
 801afea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801afee:	81a3      	strh	r3, [r4, #12]
 801aff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aff2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801aff6:	6663      	str	r3, [r4, #100]	; 0x64
 801aff8:	4622      	mov	r2, r4
 801affa:	4628      	mov	r0, r5
 801affc:	f7ff ffa2 	bl	801af44 <__fputwc>
 801b000:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b002:	07da      	lsls	r2, r3, #31
 801b004:	4605      	mov	r5, r0
 801b006:	d405      	bmi.n	801b014 <_fputwc_r+0x4e>
 801b008:	89a3      	ldrh	r3, [r4, #12]
 801b00a:	059b      	lsls	r3, r3, #22
 801b00c:	d402      	bmi.n	801b014 <_fputwc_r+0x4e>
 801b00e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b010:	f7fd f9a5 	bl	801835e <__retarget_lock_release_recursive>
 801b014:	4628      	mov	r0, r5
 801b016:	b003      	add	sp, #12
 801b018:	bd30      	pop	{r4, r5, pc}
	...

0801b01c <_fstat_r>:
 801b01c:	b538      	push	{r3, r4, r5, lr}
 801b01e:	4d07      	ldr	r5, [pc, #28]	; (801b03c <_fstat_r+0x20>)
 801b020:	2300      	movs	r3, #0
 801b022:	4604      	mov	r4, r0
 801b024:	4608      	mov	r0, r1
 801b026:	4611      	mov	r1, r2
 801b028:	602b      	str	r3, [r5, #0]
 801b02a:	f7e7 fcd0 	bl	80029ce <_fstat>
 801b02e:	1c43      	adds	r3, r0, #1
 801b030:	d102      	bne.n	801b038 <_fstat_r+0x1c>
 801b032:	682b      	ldr	r3, [r5, #0]
 801b034:	b103      	cbz	r3, 801b038 <_fstat_r+0x1c>
 801b036:	6023      	str	r3, [r4, #0]
 801b038:	bd38      	pop	{r3, r4, r5, pc}
 801b03a:	bf00      	nop
 801b03c:	2000b654 	.word	0x2000b654

0801b040 <__sfvwrite_r>:
 801b040:	6893      	ldr	r3, [r2, #8]
 801b042:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b046:	4606      	mov	r6, r0
 801b048:	460c      	mov	r4, r1
 801b04a:	4690      	mov	r8, r2
 801b04c:	b91b      	cbnz	r3, 801b056 <__sfvwrite_r+0x16>
 801b04e:	2000      	movs	r0, #0
 801b050:	b003      	add	sp, #12
 801b052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b056:	898b      	ldrh	r3, [r1, #12]
 801b058:	0718      	lsls	r0, r3, #28
 801b05a:	d550      	bpl.n	801b0fe <__sfvwrite_r+0xbe>
 801b05c:	690b      	ldr	r3, [r1, #16]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d04d      	beq.n	801b0fe <__sfvwrite_r+0xbe>
 801b062:	89a3      	ldrh	r3, [r4, #12]
 801b064:	f8d8 7000 	ldr.w	r7, [r8]
 801b068:	f013 0902 	ands.w	r9, r3, #2
 801b06c:	d16c      	bne.n	801b148 <__sfvwrite_r+0x108>
 801b06e:	f013 0301 	ands.w	r3, r3, #1
 801b072:	f000 809c 	beq.w	801b1ae <__sfvwrite_r+0x16e>
 801b076:	4648      	mov	r0, r9
 801b078:	46ca      	mov	sl, r9
 801b07a:	46cb      	mov	fp, r9
 801b07c:	f1bb 0f00 	cmp.w	fp, #0
 801b080:	f000 8103 	beq.w	801b28a <__sfvwrite_r+0x24a>
 801b084:	b950      	cbnz	r0, 801b09c <__sfvwrite_r+0x5c>
 801b086:	465a      	mov	r2, fp
 801b088:	210a      	movs	r1, #10
 801b08a:	4650      	mov	r0, sl
 801b08c:	f7e5 f8c8 	bl	8000220 <memchr>
 801b090:	2800      	cmp	r0, #0
 801b092:	f000 80ff 	beq.w	801b294 <__sfvwrite_r+0x254>
 801b096:	3001      	adds	r0, #1
 801b098:	eba0 090a 	sub.w	r9, r0, sl
 801b09c:	6820      	ldr	r0, [r4, #0]
 801b09e:	6921      	ldr	r1, [r4, #16]
 801b0a0:	6963      	ldr	r3, [r4, #20]
 801b0a2:	45d9      	cmp	r9, fp
 801b0a4:	464a      	mov	r2, r9
 801b0a6:	bf28      	it	cs
 801b0a8:	465a      	movcs	r2, fp
 801b0aa:	4288      	cmp	r0, r1
 801b0ac:	f240 80f5 	bls.w	801b29a <__sfvwrite_r+0x25a>
 801b0b0:	68a5      	ldr	r5, [r4, #8]
 801b0b2:	441d      	add	r5, r3
 801b0b4:	42aa      	cmp	r2, r5
 801b0b6:	f340 80f0 	ble.w	801b29a <__sfvwrite_r+0x25a>
 801b0ba:	4651      	mov	r1, sl
 801b0bc:	462a      	mov	r2, r5
 801b0be:	f7f9 ff93 	bl	8014fe8 <memmove>
 801b0c2:	6823      	ldr	r3, [r4, #0]
 801b0c4:	442b      	add	r3, r5
 801b0c6:	6023      	str	r3, [r4, #0]
 801b0c8:	4621      	mov	r1, r4
 801b0ca:	4630      	mov	r0, r6
 801b0cc:	f7fc ff1c 	bl	8017f08 <_fflush_r>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	d167      	bne.n	801b1a4 <__sfvwrite_r+0x164>
 801b0d4:	ebb9 0905 	subs.w	r9, r9, r5
 801b0d8:	f040 80f7 	bne.w	801b2ca <__sfvwrite_r+0x28a>
 801b0dc:	4621      	mov	r1, r4
 801b0de:	4630      	mov	r0, r6
 801b0e0:	f7fc ff12 	bl	8017f08 <_fflush_r>
 801b0e4:	2800      	cmp	r0, #0
 801b0e6:	d15d      	bne.n	801b1a4 <__sfvwrite_r+0x164>
 801b0e8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801b0ec:	44aa      	add	sl, r5
 801b0ee:	ebab 0b05 	sub.w	fp, fp, r5
 801b0f2:	1b55      	subs	r5, r2, r5
 801b0f4:	f8c8 5008 	str.w	r5, [r8, #8]
 801b0f8:	2d00      	cmp	r5, #0
 801b0fa:	d1bf      	bne.n	801b07c <__sfvwrite_r+0x3c>
 801b0fc:	e7a7      	b.n	801b04e <__sfvwrite_r+0xe>
 801b0fe:	4621      	mov	r1, r4
 801b100:	4630      	mov	r0, r6
 801b102:	f7fb ff8f 	bl	8017024 <__swsetup_r>
 801b106:	2800      	cmp	r0, #0
 801b108:	d0ab      	beq.n	801b062 <__sfvwrite_r+0x22>
 801b10a:	f04f 30ff 	mov.w	r0, #4294967295
 801b10e:	e79f      	b.n	801b050 <__sfvwrite_r+0x10>
 801b110:	e9d7 b900 	ldrd	fp, r9, [r7]
 801b114:	3708      	adds	r7, #8
 801b116:	f1b9 0f00 	cmp.w	r9, #0
 801b11a:	d0f9      	beq.n	801b110 <__sfvwrite_r+0xd0>
 801b11c:	45d1      	cmp	r9, sl
 801b11e:	464b      	mov	r3, r9
 801b120:	69e1      	ldr	r1, [r4, #28]
 801b122:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801b124:	bf28      	it	cs
 801b126:	4653      	movcs	r3, sl
 801b128:	465a      	mov	r2, fp
 801b12a:	4630      	mov	r0, r6
 801b12c:	47a8      	blx	r5
 801b12e:	2800      	cmp	r0, #0
 801b130:	dd38      	ble.n	801b1a4 <__sfvwrite_r+0x164>
 801b132:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b136:	4483      	add	fp, r0
 801b138:	eba9 0900 	sub.w	r9, r9, r0
 801b13c:	1a18      	subs	r0, r3, r0
 801b13e:	f8c8 0008 	str.w	r0, [r8, #8]
 801b142:	2800      	cmp	r0, #0
 801b144:	d1e7      	bne.n	801b116 <__sfvwrite_r+0xd6>
 801b146:	e782      	b.n	801b04e <__sfvwrite_r+0xe>
 801b148:	f04f 0b00 	mov.w	fp, #0
 801b14c:	f8df a180 	ldr.w	sl, [pc, #384]	; 801b2d0 <__sfvwrite_r+0x290>
 801b150:	46d9      	mov	r9, fp
 801b152:	e7e0      	b.n	801b116 <__sfvwrite_r+0xd6>
 801b154:	e9d7 9a00 	ldrd	r9, sl, [r7]
 801b158:	3708      	adds	r7, #8
 801b15a:	f1ba 0f00 	cmp.w	sl, #0
 801b15e:	d0f9      	beq.n	801b154 <__sfvwrite_r+0x114>
 801b160:	89a3      	ldrh	r3, [r4, #12]
 801b162:	68a2      	ldr	r2, [r4, #8]
 801b164:	6820      	ldr	r0, [r4, #0]
 801b166:	0599      	lsls	r1, r3, #22
 801b168:	d563      	bpl.n	801b232 <__sfvwrite_r+0x1f2>
 801b16a:	4552      	cmp	r2, sl
 801b16c:	d836      	bhi.n	801b1dc <__sfvwrite_r+0x19c>
 801b16e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 801b172:	d033      	beq.n	801b1dc <__sfvwrite_r+0x19c>
 801b174:	6921      	ldr	r1, [r4, #16]
 801b176:	6965      	ldr	r5, [r4, #20]
 801b178:	eba0 0b01 	sub.w	fp, r0, r1
 801b17c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b180:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b184:	f10b 0201 	add.w	r2, fp, #1
 801b188:	106d      	asrs	r5, r5, #1
 801b18a:	4452      	add	r2, sl
 801b18c:	4295      	cmp	r5, r2
 801b18e:	bf38      	it	cc
 801b190:	4615      	movcc	r5, r2
 801b192:	055b      	lsls	r3, r3, #21
 801b194:	d53d      	bpl.n	801b212 <__sfvwrite_r+0x1d2>
 801b196:	4629      	mov	r1, r5
 801b198:	4630      	mov	r0, r6
 801b19a:	f7fd f95d 	bl	8018458 <_malloc_r>
 801b19e:	b948      	cbnz	r0, 801b1b4 <__sfvwrite_r+0x174>
 801b1a0:	230c      	movs	r3, #12
 801b1a2:	6033      	str	r3, [r6, #0]
 801b1a4:	89a3      	ldrh	r3, [r4, #12]
 801b1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b1aa:	81a3      	strh	r3, [r4, #12]
 801b1ac:	e7ad      	b.n	801b10a <__sfvwrite_r+0xca>
 801b1ae:	4699      	mov	r9, r3
 801b1b0:	469a      	mov	sl, r3
 801b1b2:	e7d2      	b.n	801b15a <__sfvwrite_r+0x11a>
 801b1b4:	465a      	mov	r2, fp
 801b1b6:	6921      	ldr	r1, [r4, #16]
 801b1b8:	9001      	str	r0, [sp, #4]
 801b1ba:	f7f9 ff07 	bl	8014fcc <memcpy>
 801b1be:	89a2      	ldrh	r2, [r4, #12]
 801b1c0:	9b01      	ldr	r3, [sp, #4]
 801b1c2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801b1c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801b1ca:	81a2      	strh	r2, [r4, #12]
 801b1cc:	6123      	str	r3, [r4, #16]
 801b1ce:	6165      	str	r5, [r4, #20]
 801b1d0:	445b      	add	r3, fp
 801b1d2:	eba5 050b 	sub.w	r5, r5, fp
 801b1d6:	6023      	str	r3, [r4, #0]
 801b1d8:	4652      	mov	r2, sl
 801b1da:	60a5      	str	r5, [r4, #8]
 801b1dc:	4552      	cmp	r2, sl
 801b1de:	bf28      	it	cs
 801b1e0:	4652      	movcs	r2, sl
 801b1e2:	6820      	ldr	r0, [r4, #0]
 801b1e4:	9201      	str	r2, [sp, #4]
 801b1e6:	4649      	mov	r1, r9
 801b1e8:	f7f9 fefe 	bl	8014fe8 <memmove>
 801b1ec:	68a3      	ldr	r3, [r4, #8]
 801b1ee:	9a01      	ldr	r2, [sp, #4]
 801b1f0:	1a9b      	subs	r3, r3, r2
 801b1f2:	60a3      	str	r3, [r4, #8]
 801b1f4:	6823      	ldr	r3, [r4, #0]
 801b1f6:	441a      	add	r2, r3
 801b1f8:	4655      	mov	r5, sl
 801b1fa:	6022      	str	r2, [r4, #0]
 801b1fc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801b200:	44a9      	add	r9, r5
 801b202:	ebaa 0a05 	sub.w	sl, sl, r5
 801b206:	1b45      	subs	r5, r0, r5
 801b208:	f8c8 5008 	str.w	r5, [r8, #8]
 801b20c:	2d00      	cmp	r5, #0
 801b20e:	d1a4      	bne.n	801b15a <__sfvwrite_r+0x11a>
 801b210:	e71d      	b.n	801b04e <__sfvwrite_r+0xe>
 801b212:	462a      	mov	r2, r5
 801b214:	4630      	mov	r0, r6
 801b216:	f000 f8d9 	bl	801b3cc <_realloc_r>
 801b21a:	4603      	mov	r3, r0
 801b21c:	2800      	cmp	r0, #0
 801b21e:	d1d5      	bne.n	801b1cc <__sfvwrite_r+0x18c>
 801b220:	6921      	ldr	r1, [r4, #16]
 801b222:	4630      	mov	r0, r6
 801b224:	f7fc ff6c 	bl	8018100 <_free_r>
 801b228:	89a3      	ldrh	r3, [r4, #12]
 801b22a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b22e:	81a3      	strh	r3, [r4, #12]
 801b230:	e7b6      	b.n	801b1a0 <__sfvwrite_r+0x160>
 801b232:	6923      	ldr	r3, [r4, #16]
 801b234:	4283      	cmp	r3, r0
 801b236:	d302      	bcc.n	801b23e <__sfvwrite_r+0x1fe>
 801b238:	6961      	ldr	r1, [r4, #20]
 801b23a:	4551      	cmp	r1, sl
 801b23c:	d915      	bls.n	801b26a <__sfvwrite_r+0x22a>
 801b23e:	4552      	cmp	r2, sl
 801b240:	bf28      	it	cs
 801b242:	4652      	movcs	r2, sl
 801b244:	4649      	mov	r1, r9
 801b246:	4615      	mov	r5, r2
 801b248:	f7f9 fece 	bl	8014fe8 <memmove>
 801b24c:	68a3      	ldr	r3, [r4, #8]
 801b24e:	6822      	ldr	r2, [r4, #0]
 801b250:	1b5b      	subs	r3, r3, r5
 801b252:	442a      	add	r2, r5
 801b254:	60a3      	str	r3, [r4, #8]
 801b256:	6022      	str	r2, [r4, #0]
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d1cf      	bne.n	801b1fc <__sfvwrite_r+0x1bc>
 801b25c:	4621      	mov	r1, r4
 801b25e:	4630      	mov	r0, r6
 801b260:	f7fc fe52 	bl	8017f08 <_fflush_r>
 801b264:	2800      	cmp	r0, #0
 801b266:	d0c9      	beq.n	801b1fc <__sfvwrite_r+0x1bc>
 801b268:	e79c      	b.n	801b1a4 <__sfvwrite_r+0x164>
 801b26a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b26e:	459a      	cmp	sl, r3
 801b270:	bf38      	it	cc
 801b272:	4653      	movcc	r3, sl
 801b274:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801b276:	fb93 f3f1 	sdiv	r3, r3, r1
 801b27a:	464a      	mov	r2, r9
 801b27c:	434b      	muls	r3, r1
 801b27e:	4630      	mov	r0, r6
 801b280:	69e1      	ldr	r1, [r4, #28]
 801b282:	47a8      	blx	r5
 801b284:	1e05      	subs	r5, r0, #0
 801b286:	dcb9      	bgt.n	801b1fc <__sfvwrite_r+0x1bc>
 801b288:	e78c      	b.n	801b1a4 <__sfvwrite_r+0x164>
 801b28a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801b28e:	2000      	movs	r0, #0
 801b290:	3708      	adds	r7, #8
 801b292:	e6f3      	b.n	801b07c <__sfvwrite_r+0x3c>
 801b294:	f10b 0901 	add.w	r9, fp, #1
 801b298:	e700      	b.n	801b09c <__sfvwrite_r+0x5c>
 801b29a:	4293      	cmp	r3, r2
 801b29c:	dc08      	bgt.n	801b2b0 <__sfvwrite_r+0x270>
 801b29e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801b2a0:	69e1      	ldr	r1, [r4, #28]
 801b2a2:	4652      	mov	r2, sl
 801b2a4:	4630      	mov	r0, r6
 801b2a6:	47a8      	blx	r5
 801b2a8:	1e05      	subs	r5, r0, #0
 801b2aa:	f73f af13 	bgt.w	801b0d4 <__sfvwrite_r+0x94>
 801b2ae:	e779      	b.n	801b1a4 <__sfvwrite_r+0x164>
 801b2b0:	4651      	mov	r1, sl
 801b2b2:	9201      	str	r2, [sp, #4]
 801b2b4:	f7f9 fe98 	bl	8014fe8 <memmove>
 801b2b8:	9a01      	ldr	r2, [sp, #4]
 801b2ba:	68a3      	ldr	r3, [r4, #8]
 801b2bc:	1a9b      	subs	r3, r3, r2
 801b2be:	60a3      	str	r3, [r4, #8]
 801b2c0:	6823      	ldr	r3, [r4, #0]
 801b2c2:	4413      	add	r3, r2
 801b2c4:	6023      	str	r3, [r4, #0]
 801b2c6:	4615      	mov	r5, r2
 801b2c8:	e704      	b.n	801b0d4 <__sfvwrite_r+0x94>
 801b2ca:	2001      	movs	r0, #1
 801b2cc:	e70c      	b.n	801b0e8 <__sfvwrite_r+0xa8>
 801b2ce:	bf00      	nop
 801b2d0:	7ffffc00 	.word	0x7ffffc00

0801b2d4 <_isatty_r>:
 801b2d4:	b538      	push	{r3, r4, r5, lr}
 801b2d6:	4d06      	ldr	r5, [pc, #24]	; (801b2f0 <_isatty_r+0x1c>)
 801b2d8:	2300      	movs	r3, #0
 801b2da:	4604      	mov	r4, r0
 801b2dc:	4608      	mov	r0, r1
 801b2de:	602b      	str	r3, [r5, #0]
 801b2e0:	f7e7 fb85 	bl	80029ee <_isatty>
 801b2e4:	1c43      	adds	r3, r0, #1
 801b2e6:	d102      	bne.n	801b2ee <_isatty_r+0x1a>
 801b2e8:	682b      	ldr	r3, [r5, #0]
 801b2ea:	b103      	cbz	r3, 801b2ee <_isatty_r+0x1a>
 801b2ec:	6023      	str	r3, [r4, #0]
 801b2ee:	bd38      	pop	{r3, r4, r5, pc}
 801b2f0:	2000b654 	.word	0x2000b654

0801b2f4 <iswspace>:
 801b2f4:	2100      	movs	r1, #0
 801b2f6:	f000 b801 	b.w	801b2fc <iswspace_l>
	...

0801b2fc <iswspace_l>:
 801b2fc:	28ff      	cmp	r0, #255	; 0xff
 801b2fe:	bf9d      	ittte	ls
 801b300:	4b02      	ldrls	r3, [pc, #8]	; (801b30c <iswspace_l+0x10>)
 801b302:	5cc0      	ldrbls	r0, [r0, r3]
 801b304:	f000 0008 	andls.w	r0, r0, #8
 801b308:	2000      	movhi	r0, #0
 801b30a:	4770      	bx	lr
 801b30c:	0801f849 	.word	0x0801f849

0801b310 <__locale_mb_cur_max>:
 801b310:	4b01      	ldr	r3, [pc, #4]	; (801b318 <__locale_mb_cur_max+0x8>)
 801b312:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801b316:	4770      	bx	lr
 801b318:	200008d0 	.word	0x200008d0

0801b31c <_lseek_r>:
 801b31c:	b538      	push	{r3, r4, r5, lr}
 801b31e:	4d07      	ldr	r5, [pc, #28]	; (801b33c <_lseek_r+0x20>)
 801b320:	4604      	mov	r4, r0
 801b322:	4608      	mov	r0, r1
 801b324:	4611      	mov	r1, r2
 801b326:	2200      	movs	r2, #0
 801b328:	602a      	str	r2, [r5, #0]
 801b32a:	461a      	mov	r2, r3
 801b32c:	f7e7 fb6a 	bl	8002a04 <_lseek>
 801b330:	1c43      	adds	r3, r0, #1
 801b332:	d102      	bne.n	801b33a <_lseek_r+0x1e>
 801b334:	682b      	ldr	r3, [r5, #0]
 801b336:	b103      	cbz	r3, 801b33a <_lseek_r+0x1e>
 801b338:	6023      	str	r3, [r4, #0]
 801b33a:	bd38      	pop	{r3, r4, r5, pc}
 801b33c:	2000b654 	.word	0x2000b654

0801b340 <_mbrtowc_r>:
 801b340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b342:	4c0a      	ldr	r4, [pc, #40]	; (801b36c <_mbrtowc_r+0x2c>)
 801b344:	9e08      	ldr	r6, [sp, #32]
 801b346:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 801b34a:	9600      	str	r6, [sp, #0]
 801b34c:	4605      	mov	r5, r0
 801b34e:	4614      	mov	r4, r2
 801b350:	b912      	cbnz	r2, 801b358 <_mbrtowc_r+0x18>
 801b352:	4a07      	ldr	r2, [pc, #28]	; (801b370 <_mbrtowc_r+0x30>)
 801b354:	2301      	movs	r3, #1
 801b356:	4621      	mov	r1, r4
 801b358:	47b8      	blx	r7
 801b35a:	1c43      	adds	r3, r0, #1
 801b35c:	bf01      	itttt	eq
 801b35e:	2300      	moveq	r3, #0
 801b360:	6033      	streq	r3, [r6, #0]
 801b362:	238a      	moveq	r3, #138	; 0x8a
 801b364:	602b      	streq	r3, [r5, #0]
 801b366:	b003      	add	sp, #12
 801b368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b36a:	bf00      	nop
 801b36c:	200008d0 	.word	0x200008d0
 801b370:	0801fcf9 	.word	0x0801fcf9

0801b374 <__ascii_mbtowc>:
 801b374:	b082      	sub	sp, #8
 801b376:	b901      	cbnz	r1, 801b37a <__ascii_mbtowc+0x6>
 801b378:	a901      	add	r1, sp, #4
 801b37a:	b142      	cbz	r2, 801b38e <__ascii_mbtowc+0x1a>
 801b37c:	b14b      	cbz	r3, 801b392 <__ascii_mbtowc+0x1e>
 801b37e:	7813      	ldrb	r3, [r2, #0]
 801b380:	600b      	str	r3, [r1, #0]
 801b382:	7812      	ldrb	r2, [r2, #0]
 801b384:	1e10      	subs	r0, r2, #0
 801b386:	bf18      	it	ne
 801b388:	2001      	movne	r0, #1
 801b38a:	b002      	add	sp, #8
 801b38c:	4770      	bx	lr
 801b38e:	4610      	mov	r0, r2
 801b390:	e7fb      	b.n	801b38a <__ascii_mbtowc+0x16>
 801b392:	f06f 0001 	mvn.w	r0, #1
 801b396:	e7f8      	b.n	801b38a <__ascii_mbtowc+0x16>

0801b398 <_read_r>:
 801b398:	b538      	push	{r3, r4, r5, lr}
 801b39a:	4d07      	ldr	r5, [pc, #28]	; (801b3b8 <_read_r+0x20>)
 801b39c:	4604      	mov	r4, r0
 801b39e:	4608      	mov	r0, r1
 801b3a0:	4611      	mov	r1, r2
 801b3a2:	2200      	movs	r2, #0
 801b3a4:	602a      	str	r2, [r5, #0]
 801b3a6:	461a      	mov	r2, r3
 801b3a8:	f7e7 fae8 	bl	800297c <_read>
 801b3ac:	1c43      	adds	r3, r0, #1
 801b3ae:	d102      	bne.n	801b3b6 <_read_r+0x1e>
 801b3b0:	682b      	ldr	r3, [r5, #0]
 801b3b2:	b103      	cbz	r3, 801b3b6 <_read_r+0x1e>
 801b3b4:	6023      	str	r3, [r4, #0]
 801b3b6:	bd38      	pop	{r3, r4, r5, pc}
 801b3b8:	2000b654 	.word	0x2000b654

0801b3bc <realloc>:
 801b3bc:	4b02      	ldr	r3, [pc, #8]	; (801b3c8 <realloc+0xc>)
 801b3be:	460a      	mov	r2, r1
 801b3c0:	4601      	mov	r1, r0
 801b3c2:	6818      	ldr	r0, [r3, #0]
 801b3c4:	f000 b802 	b.w	801b3cc <_realloc_r>
 801b3c8:	2000002c 	.word	0x2000002c

0801b3cc <_realloc_r>:
 801b3cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3d0:	4681      	mov	r9, r0
 801b3d2:	460c      	mov	r4, r1
 801b3d4:	b929      	cbnz	r1, 801b3e2 <_realloc_r+0x16>
 801b3d6:	4611      	mov	r1, r2
 801b3d8:	b003      	add	sp, #12
 801b3da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3de:	f7fd b83b 	b.w	8018458 <_malloc_r>
 801b3e2:	9201      	str	r2, [sp, #4]
 801b3e4:	f7fd fa7a 	bl	80188dc <__malloc_lock>
 801b3e8:	9a01      	ldr	r2, [sp, #4]
 801b3ea:	f102 080b 	add.w	r8, r2, #11
 801b3ee:	f1b8 0f16 	cmp.w	r8, #22
 801b3f2:	d90b      	bls.n	801b40c <_realloc_r+0x40>
 801b3f4:	f038 0807 	bics.w	r8, r8, #7
 801b3f8:	d50a      	bpl.n	801b410 <_realloc_r+0x44>
 801b3fa:	230c      	movs	r3, #12
 801b3fc:	f8c9 3000 	str.w	r3, [r9]
 801b400:	f04f 0b00 	mov.w	fp, #0
 801b404:	4658      	mov	r0, fp
 801b406:	b003      	add	sp, #12
 801b408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b40c:	f04f 0810 	mov.w	r8, #16
 801b410:	4590      	cmp	r8, r2
 801b412:	d3f2      	bcc.n	801b3fa <_realloc_r+0x2e>
 801b414:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801b418:	f025 0603 	bic.w	r6, r5, #3
 801b41c:	45b0      	cmp	r8, r6
 801b41e:	f1a4 0a08 	sub.w	sl, r4, #8
 801b422:	f340 8170 	ble.w	801b706 <_realloc_r+0x33a>
 801b426:	48a9      	ldr	r0, [pc, #676]	; (801b6cc <_realloc_r+0x300>)
 801b428:	9001      	str	r0, [sp, #4]
 801b42a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 801b42e:	eb0a 0306 	add.w	r3, sl, r6
 801b432:	459c      	cmp	ip, r3
 801b434:	6859      	ldr	r1, [r3, #4]
 801b436:	d005      	beq.n	801b444 <_realloc_r+0x78>
 801b438:	f021 0001 	bic.w	r0, r1, #1
 801b43c:	4418      	add	r0, r3
 801b43e:	6840      	ldr	r0, [r0, #4]
 801b440:	07c7      	lsls	r7, r0, #31
 801b442:	d427      	bmi.n	801b494 <_realloc_r+0xc8>
 801b444:	f021 0103 	bic.w	r1, r1, #3
 801b448:	459c      	cmp	ip, r3
 801b44a:	eb06 0701 	add.w	r7, r6, r1
 801b44e:	d119      	bne.n	801b484 <_realloc_r+0xb8>
 801b450:	f108 0010 	add.w	r0, r8, #16
 801b454:	42b8      	cmp	r0, r7
 801b456:	dc1f      	bgt.n	801b498 <_realloc_r+0xcc>
 801b458:	eb0a 0308 	add.w	r3, sl, r8
 801b45c:	9a01      	ldr	r2, [sp, #4]
 801b45e:	eba7 0708 	sub.w	r7, r7, r8
 801b462:	f047 0701 	orr.w	r7, r7, #1
 801b466:	6093      	str	r3, [r2, #8]
 801b468:	605f      	str	r7, [r3, #4]
 801b46a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b46e:	f003 0301 	and.w	r3, r3, #1
 801b472:	ea43 0308 	orr.w	r3, r3, r8
 801b476:	f844 3c04 	str.w	r3, [r4, #-4]
 801b47a:	4648      	mov	r0, r9
 801b47c:	f7fd fa34 	bl	80188e8 <__malloc_unlock>
 801b480:	46a3      	mov	fp, r4
 801b482:	e7bf      	b.n	801b404 <_realloc_r+0x38>
 801b484:	45b8      	cmp	r8, r7
 801b486:	dc07      	bgt.n	801b498 <_realloc_r+0xcc>
 801b488:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801b48c:	60da      	str	r2, [r3, #12]
 801b48e:	6093      	str	r3, [r2, #8]
 801b490:	4655      	mov	r5, sl
 801b492:	e07f      	b.n	801b594 <_realloc_r+0x1c8>
 801b494:	2100      	movs	r1, #0
 801b496:	460b      	mov	r3, r1
 801b498:	07e8      	lsls	r0, r5, #31
 801b49a:	f100 80e5 	bmi.w	801b668 <_realloc_r+0x29c>
 801b49e:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801b4a2:	ebaa 0505 	sub.w	r5, sl, r5
 801b4a6:	6868      	ldr	r0, [r5, #4]
 801b4a8:	f020 0003 	bic.w	r0, r0, #3
 801b4ac:	eb00 0b06 	add.w	fp, r0, r6
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	f000 80a5 	beq.w	801b600 <_realloc_r+0x234>
 801b4b6:	459c      	cmp	ip, r3
 801b4b8:	eb01 070b 	add.w	r7, r1, fp
 801b4bc:	d14a      	bne.n	801b554 <_realloc_r+0x188>
 801b4be:	f108 0310 	add.w	r3, r8, #16
 801b4c2:	42bb      	cmp	r3, r7
 801b4c4:	f300 809c 	bgt.w	801b600 <_realloc_r+0x234>
 801b4c8:	46ab      	mov	fp, r5
 801b4ca:	68eb      	ldr	r3, [r5, #12]
 801b4cc:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 801b4d0:	60d3      	str	r3, [r2, #12]
 801b4d2:	609a      	str	r2, [r3, #8]
 801b4d4:	1f32      	subs	r2, r6, #4
 801b4d6:	2a24      	cmp	r2, #36	; 0x24
 801b4d8:	d837      	bhi.n	801b54a <_realloc_r+0x17e>
 801b4da:	2a13      	cmp	r2, #19
 801b4dc:	d933      	bls.n	801b546 <_realloc_r+0x17a>
 801b4de:	6823      	ldr	r3, [r4, #0]
 801b4e0:	60ab      	str	r3, [r5, #8]
 801b4e2:	6863      	ldr	r3, [r4, #4]
 801b4e4:	60eb      	str	r3, [r5, #12]
 801b4e6:	2a1b      	cmp	r2, #27
 801b4e8:	d81b      	bhi.n	801b522 <_realloc_r+0x156>
 801b4ea:	3408      	adds	r4, #8
 801b4ec:	f105 0310 	add.w	r3, r5, #16
 801b4f0:	6822      	ldr	r2, [r4, #0]
 801b4f2:	601a      	str	r2, [r3, #0]
 801b4f4:	6862      	ldr	r2, [r4, #4]
 801b4f6:	605a      	str	r2, [r3, #4]
 801b4f8:	68a2      	ldr	r2, [r4, #8]
 801b4fa:	609a      	str	r2, [r3, #8]
 801b4fc:	eb05 0308 	add.w	r3, r5, r8
 801b500:	9a01      	ldr	r2, [sp, #4]
 801b502:	eba7 0708 	sub.w	r7, r7, r8
 801b506:	f047 0701 	orr.w	r7, r7, #1
 801b50a:	6093      	str	r3, [r2, #8]
 801b50c:	605f      	str	r7, [r3, #4]
 801b50e:	686b      	ldr	r3, [r5, #4]
 801b510:	f003 0301 	and.w	r3, r3, #1
 801b514:	ea43 0308 	orr.w	r3, r3, r8
 801b518:	606b      	str	r3, [r5, #4]
 801b51a:	4648      	mov	r0, r9
 801b51c:	f7fd f9e4 	bl	80188e8 <__malloc_unlock>
 801b520:	e770      	b.n	801b404 <_realloc_r+0x38>
 801b522:	68a3      	ldr	r3, [r4, #8]
 801b524:	612b      	str	r3, [r5, #16]
 801b526:	68e3      	ldr	r3, [r4, #12]
 801b528:	616b      	str	r3, [r5, #20]
 801b52a:	2a24      	cmp	r2, #36	; 0x24
 801b52c:	bf01      	itttt	eq
 801b52e:	6923      	ldreq	r3, [r4, #16]
 801b530:	61ab      	streq	r3, [r5, #24]
 801b532:	6962      	ldreq	r2, [r4, #20]
 801b534:	61ea      	streq	r2, [r5, #28]
 801b536:	bf19      	ittee	ne
 801b538:	3410      	addne	r4, #16
 801b53a:	f105 0318 	addne.w	r3, r5, #24
 801b53e:	f105 0320 	addeq.w	r3, r5, #32
 801b542:	3418      	addeq	r4, #24
 801b544:	e7d4      	b.n	801b4f0 <_realloc_r+0x124>
 801b546:	465b      	mov	r3, fp
 801b548:	e7d2      	b.n	801b4f0 <_realloc_r+0x124>
 801b54a:	4621      	mov	r1, r4
 801b54c:	4658      	mov	r0, fp
 801b54e:	f7f9 fd4b 	bl	8014fe8 <memmove>
 801b552:	e7d3      	b.n	801b4fc <_realloc_r+0x130>
 801b554:	45b8      	cmp	r8, r7
 801b556:	dc53      	bgt.n	801b600 <_realloc_r+0x234>
 801b558:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801b55c:	4628      	mov	r0, r5
 801b55e:	60da      	str	r2, [r3, #12]
 801b560:	6093      	str	r3, [r2, #8]
 801b562:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801b566:	68eb      	ldr	r3, [r5, #12]
 801b568:	60d3      	str	r3, [r2, #12]
 801b56a:	609a      	str	r2, [r3, #8]
 801b56c:	1f32      	subs	r2, r6, #4
 801b56e:	2a24      	cmp	r2, #36	; 0x24
 801b570:	d842      	bhi.n	801b5f8 <_realloc_r+0x22c>
 801b572:	2a13      	cmp	r2, #19
 801b574:	d908      	bls.n	801b588 <_realloc_r+0x1bc>
 801b576:	6823      	ldr	r3, [r4, #0]
 801b578:	60ab      	str	r3, [r5, #8]
 801b57a:	6863      	ldr	r3, [r4, #4]
 801b57c:	60eb      	str	r3, [r5, #12]
 801b57e:	2a1b      	cmp	r2, #27
 801b580:	d828      	bhi.n	801b5d4 <_realloc_r+0x208>
 801b582:	3408      	adds	r4, #8
 801b584:	f105 0010 	add.w	r0, r5, #16
 801b588:	6823      	ldr	r3, [r4, #0]
 801b58a:	6003      	str	r3, [r0, #0]
 801b58c:	6863      	ldr	r3, [r4, #4]
 801b58e:	6043      	str	r3, [r0, #4]
 801b590:	68a3      	ldr	r3, [r4, #8]
 801b592:	6083      	str	r3, [r0, #8]
 801b594:	686a      	ldr	r2, [r5, #4]
 801b596:	eba7 0008 	sub.w	r0, r7, r8
 801b59a:	280f      	cmp	r0, #15
 801b59c:	f002 0201 	and.w	r2, r2, #1
 801b5a0:	eb05 0307 	add.w	r3, r5, r7
 801b5a4:	f240 80b1 	bls.w	801b70a <_realloc_r+0x33e>
 801b5a8:	eb05 0108 	add.w	r1, r5, r8
 801b5ac:	ea48 0202 	orr.w	r2, r8, r2
 801b5b0:	f040 0001 	orr.w	r0, r0, #1
 801b5b4:	606a      	str	r2, [r5, #4]
 801b5b6:	6048      	str	r0, [r1, #4]
 801b5b8:	685a      	ldr	r2, [r3, #4]
 801b5ba:	f042 0201 	orr.w	r2, r2, #1
 801b5be:	605a      	str	r2, [r3, #4]
 801b5c0:	3108      	adds	r1, #8
 801b5c2:	4648      	mov	r0, r9
 801b5c4:	f7fc fd9c 	bl	8018100 <_free_r>
 801b5c8:	4648      	mov	r0, r9
 801b5ca:	f7fd f98d 	bl	80188e8 <__malloc_unlock>
 801b5ce:	f105 0b08 	add.w	fp, r5, #8
 801b5d2:	e717      	b.n	801b404 <_realloc_r+0x38>
 801b5d4:	68a3      	ldr	r3, [r4, #8]
 801b5d6:	612b      	str	r3, [r5, #16]
 801b5d8:	68e3      	ldr	r3, [r4, #12]
 801b5da:	616b      	str	r3, [r5, #20]
 801b5dc:	2a24      	cmp	r2, #36	; 0x24
 801b5de:	bf01      	itttt	eq
 801b5e0:	6923      	ldreq	r3, [r4, #16]
 801b5e2:	61ab      	streq	r3, [r5, #24]
 801b5e4:	6963      	ldreq	r3, [r4, #20]
 801b5e6:	61eb      	streq	r3, [r5, #28]
 801b5e8:	bf19      	ittee	ne
 801b5ea:	3410      	addne	r4, #16
 801b5ec:	f105 0018 	addne.w	r0, r5, #24
 801b5f0:	f105 0020 	addeq.w	r0, r5, #32
 801b5f4:	3418      	addeq	r4, #24
 801b5f6:	e7c7      	b.n	801b588 <_realloc_r+0x1bc>
 801b5f8:	4621      	mov	r1, r4
 801b5fa:	f7f9 fcf5 	bl	8014fe8 <memmove>
 801b5fe:	e7c9      	b.n	801b594 <_realloc_r+0x1c8>
 801b600:	45d8      	cmp	r8, fp
 801b602:	dc31      	bgt.n	801b668 <_realloc_r+0x29c>
 801b604:	4628      	mov	r0, r5
 801b606:	68eb      	ldr	r3, [r5, #12]
 801b608:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801b60c:	60d3      	str	r3, [r2, #12]
 801b60e:	609a      	str	r2, [r3, #8]
 801b610:	1f32      	subs	r2, r6, #4
 801b612:	2a24      	cmp	r2, #36	; 0x24
 801b614:	d824      	bhi.n	801b660 <_realloc_r+0x294>
 801b616:	2a13      	cmp	r2, #19
 801b618:	d908      	bls.n	801b62c <_realloc_r+0x260>
 801b61a:	6823      	ldr	r3, [r4, #0]
 801b61c:	60ab      	str	r3, [r5, #8]
 801b61e:	6863      	ldr	r3, [r4, #4]
 801b620:	60eb      	str	r3, [r5, #12]
 801b622:	2a1b      	cmp	r2, #27
 801b624:	d80a      	bhi.n	801b63c <_realloc_r+0x270>
 801b626:	3408      	adds	r4, #8
 801b628:	f105 0010 	add.w	r0, r5, #16
 801b62c:	6823      	ldr	r3, [r4, #0]
 801b62e:	6003      	str	r3, [r0, #0]
 801b630:	6863      	ldr	r3, [r4, #4]
 801b632:	6043      	str	r3, [r0, #4]
 801b634:	68a3      	ldr	r3, [r4, #8]
 801b636:	6083      	str	r3, [r0, #8]
 801b638:	465f      	mov	r7, fp
 801b63a:	e7ab      	b.n	801b594 <_realloc_r+0x1c8>
 801b63c:	68a3      	ldr	r3, [r4, #8]
 801b63e:	612b      	str	r3, [r5, #16]
 801b640:	68e3      	ldr	r3, [r4, #12]
 801b642:	616b      	str	r3, [r5, #20]
 801b644:	2a24      	cmp	r2, #36	; 0x24
 801b646:	bf01      	itttt	eq
 801b648:	6923      	ldreq	r3, [r4, #16]
 801b64a:	61ab      	streq	r3, [r5, #24]
 801b64c:	6963      	ldreq	r3, [r4, #20]
 801b64e:	61eb      	streq	r3, [r5, #28]
 801b650:	bf19      	ittee	ne
 801b652:	3410      	addne	r4, #16
 801b654:	f105 0018 	addne.w	r0, r5, #24
 801b658:	f105 0020 	addeq.w	r0, r5, #32
 801b65c:	3418      	addeq	r4, #24
 801b65e:	e7e5      	b.n	801b62c <_realloc_r+0x260>
 801b660:	4621      	mov	r1, r4
 801b662:	f7f9 fcc1 	bl	8014fe8 <memmove>
 801b666:	e7e7      	b.n	801b638 <_realloc_r+0x26c>
 801b668:	4611      	mov	r1, r2
 801b66a:	4648      	mov	r0, r9
 801b66c:	f7fc fef4 	bl	8018458 <_malloc_r>
 801b670:	4683      	mov	fp, r0
 801b672:	2800      	cmp	r0, #0
 801b674:	f43f af51 	beq.w	801b51a <_realloc_r+0x14e>
 801b678:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b67c:	f023 0301 	bic.w	r3, r3, #1
 801b680:	4453      	add	r3, sl
 801b682:	f1a0 0208 	sub.w	r2, r0, #8
 801b686:	4293      	cmp	r3, r2
 801b688:	d105      	bne.n	801b696 <_realloc_r+0x2ca>
 801b68a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801b68e:	f027 0703 	bic.w	r7, r7, #3
 801b692:	4437      	add	r7, r6
 801b694:	e6fc      	b.n	801b490 <_realloc_r+0xc4>
 801b696:	1f32      	subs	r2, r6, #4
 801b698:	2a24      	cmp	r2, #36	; 0x24
 801b69a:	d830      	bhi.n	801b6fe <_realloc_r+0x332>
 801b69c:	2a13      	cmp	r2, #19
 801b69e:	d92b      	bls.n	801b6f8 <_realloc_r+0x32c>
 801b6a0:	6823      	ldr	r3, [r4, #0]
 801b6a2:	6003      	str	r3, [r0, #0]
 801b6a4:	6863      	ldr	r3, [r4, #4]
 801b6a6:	6043      	str	r3, [r0, #4]
 801b6a8:	2a1b      	cmp	r2, #27
 801b6aa:	d811      	bhi.n	801b6d0 <_realloc_r+0x304>
 801b6ac:	f104 0208 	add.w	r2, r4, #8
 801b6b0:	f100 0308 	add.w	r3, r0, #8
 801b6b4:	6811      	ldr	r1, [r2, #0]
 801b6b6:	6019      	str	r1, [r3, #0]
 801b6b8:	6851      	ldr	r1, [r2, #4]
 801b6ba:	6059      	str	r1, [r3, #4]
 801b6bc:	6892      	ldr	r2, [r2, #8]
 801b6be:	609a      	str	r2, [r3, #8]
 801b6c0:	4621      	mov	r1, r4
 801b6c2:	4648      	mov	r0, r9
 801b6c4:	f7fc fd1c 	bl	8018100 <_free_r>
 801b6c8:	e727      	b.n	801b51a <_realloc_r+0x14e>
 801b6ca:	bf00      	nop
 801b6cc:	200004c0 	.word	0x200004c0
 801b6d0:	68a3      	ldr	r3, [r4, #8]
 801b6d2:	6083      	str	r3, [r0, #8]
 801b6d4:	68e3      	ldr	r3, [r4, #12]
 801b6d6:	60c3      	str	r3, [r0, #12]
 801b6d8:	2a24      	cmp	r2, #36	; 0x24
 801b6da:	bf01      	itttt	eq
 801b6dc:	6923      	ldreq	r3, [r4, #16]
 801b6de:	6103      	streq	r3, [r0, #16]
 801b6e0:	6961      	ldreq	r1, [r4, #20]
 801b6e2:	6141      	streq	r1, [r0, #20]
 801b6e4:	bf19      	ittee	ne
 801b6e6:	f104 0210 	addne.w	r2, r4, #16
 801b6ea:	f100 0310 	addne.w	r3, r0, #16
 801b6ee:	f104 0218 	addeq.w	r2, r4, #24
 801b6f2:	f100 0318 	addeq.w	r3, r0, #24
 801b6f6:	e7dd      	b.n	801b6b4 <_realloc_r+0x2e8>
 801b6f8:	4603      	mov	r3, r0
 801b6fa:	4622      	mov	r2, r4
 801b6fc:	e7da      	b.n	801b6b4 <_realloc_r+0x2e8>
 801b6fe:	4621      	mov	r1, r4
 801b700:	f7f9 fc72 	bl	8014fe8 <memmove>
 801b704:	e7dc      	b.n	801b6c0 <_realloc_r+0x2f4>
 801b706:	4637      	mov	r7, r6
 801b708:	e6c2      	b.n	801b490 <_realloc_r+0xc4>
 801b70a:	4317      	orrs	r7, r2
 801b70c:	606f      	str	r7, [r5, #4]
 801b70e:	685a      	ldr	r2, [r3, #4]
 801b710:	f042 0201 	orr.w	r2, r2, #1
 801b714:	605a      	str	r2, [r3, #4]
 801b716:	e757      	b.n	801b5c8 <_realloc_r+0x1fc>

0801b718 <__sccl>:
 801b718:	b570      	push	{r4, r5, r6, lr}
 801b71a:	780b      	ldrb	r3, [r1, #0]
 801b71c:	4604      	mov	r4, r0
 801b71e:	2b5e      	cmp	r3, #94	; 0x5e
 801b720:	bf0b      	itete	eq
 801b722:	784b      	ldrbeq	r3, [r1, #1]
 801b724:	1c48      	addne	r0, r1, #1
 801b726:	1c88      	addeq	r0, r1, #2
 801b728:	2200      	movne	r2, #0
 801b72a:	bf08      	it	eq
 801b72c:	2201      	moveq	r2, #1
 801b72e:	1e61      	subs	r1, r4, #1
 801b730:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801b734:	f801 2f01 	strb.w	r2, [r1, #1]!
 801b738:	42a9      	cmp	r1, r5
 801b73a:	d1fb      	bne.n	801b734 <__sccl+0x1c>
 801b73c:	b90b      	cbnz	r3, 801b742 <__sccl+0x2a>
 801b73e:	3801      	subs	r0, #1
 801b740:	bd70      	pop	{r4, r5, r6, pc}
 801b742:	f082 0101 	eor.w	r1, r2, #1
 801b746:	54e1      	strb	r1, [r4, r3]
 801b748:	1c42      	adds	r2, r0, #1
 801b74a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801b74e:	2d2d      	cmp	r5, #45	; 0x2d
 801b750:	f102 36ff 	add.w	r6, r2, #4294967295
 801b754:	4610      	mov	r0, r2
 801b756:	d006      	beq.n	801b766 <__sccl+0x4e>
 801b758:	2d5d      	cmp	r5, #93	; 0x5d
 801b75a:	d0f1      	beq.n	801b740 <__sccl+0x28>
 801b75c:	b90d      	cbnz	r5, 801b762 <__sccl+0x4a>
 801b75e:	4630      	mov	r0, r6
 801b760:	e7ee      	b.n	801b740 <__sccl+0x28>
 801b762:	462b      	mov	r3, r5
 801b764:	e7ef      	b.n	801b746 <__sccl+0x2e>
 801b766:	7816      	ldrb	r6, [r2, #0]
 801b768:	2e5d      	cmp	r6, #93	; 0x5d
 801b76a:	d0fa      	beq.n	801b762 <__sccl+0x4a>
 801b76c:	42b3      	cmp	r3, r6
 801b76e:	dcf8      	bgt.n	801b762 <__sccl+0x4a>
 801b770:	4618      	mov	r0, r3
 801b772:	3001      	adds	r0, #1
 801b774:	4286      	cmp	r6, r0
 801b776:	5421      	strb	r1, [r4, r0]
 801b778:	dcfb      	bgt.n	801b772 <__sccl+0x5a>
 801b77a:	43d8      	mvns	r0, r3
 801b77c:	4430      	add	r0, r6
 801b77e:	1c5d      	adds	r5, r3, #1
 801b780:	42b3      	cmp	r3, r6
 801b782:	bfa8      	it	ge
 801b784:	2000      	movge	r0, #0
 801b786:	182b      	adds	r3, r5, r0
 801b788:	3202      	adds	r2, #2
 801b78a:	e7de      	b.n	801b74a <__sccl+0x32>

0801b78c <_strtoll_l.isra.0>:
 801b78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b790:	b087      	sub	sp, #28
 801b792:	4691      	mov	r9, r2
 801b794:	4a47      	ldr	r2, [pc, #284]	; (801b8b4 <_strtoll_l.isra.0+0x128>)
 801b796:	9005      	str	r0, [sp, #20]
 801b798:	4688      	mov	r8, r1
 801b79a:	461f      	mov	r7, r3
 801b79c:	460d      	mov	r5, r1
 801b79e:	462b      	mov	r3, r5
 801b7a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b7a4:	5ca6      	ldrb	r6, [r4, r2]
 801b7a6:	f016 0608 	ands.w	r6, r6, #8
 801b7aa:	d1f8      	bne.n	801b79e <_strtoll_l.isra.0+0x12>
 801b7ac:	2c2d      	cmp	r4, #45	; 0x2d
 801b7ae:	d147      	bne.n	801b840 <_strtoll_l.isra.0+0xb4>
 801b7b0:	782c      	ldrb	r4, [r5, #0]
 801b7b2:	2601      	movs	r6, #1
 801b7b4:	1c9d      	adds	r5, r3, #2
 801b7b6:	2f00      	cmp	r7, #0
 801b7b8:	d077      	beq.n	801b8aa <_strtoll_l.isra.0+0x11e>
 801b7ba:	2f10      	cmp	r7, #16
 801b7bc:	d109      	bne.n	801b7d2 <_strtoll_l.isra.0+0x46>
 801b7be:	2c30      	cmp	r4, #48	; 0x30
 801b7c0:	d107      	bne.n	801b7d2 <_strtoll_l.isra.0+0x46>
 801b7c2:	782b      	ldrb	r3, [r5, #0]
 801b7c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b7c8:	2b58      	cmp	r3, #88	; 0x58
 801b7ca:	d169      	bne.n	801b8a0 <_strtoll_l.isra.0+0x114>
 801b7cc:	786c      	ldrb	r4, [r5, #1]
 801b7ce:	2710      	movs	r7, #16
 801b7d0:	3502      	adds	r5, #2
 801b7d2:	f04f 32ff 	mov.w	r2, #4294967295
 801b7d6:	1990      	adds	r0, r2, r6
 801b7d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b7dc:	ea4f 7be7 	mov.w	fp, r7, asr #31
 801b7e0:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 801b7e4:	463a      	mov	r2, r7
 801b7e6:	465b      	mov	r3, fp
 801b7e8:	e9cd 0100 	strd	r0, r1, [sp]
 801b7ec:	f7e5 fa06 	bl	8000bfc <__aeabi_uldivmod>
 801b7f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b7f4:	46ba      	mov	sl, r7
 801b7f6:	4696      	mov	lr, r2
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	2000      	movs	r0, #0
 801b7fc:	2100      	movs	r1, #0
 801b7fe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b802:	f1bc 0f09 	cmp.w	ip, #9
 801b806:	d820      	bhi.n	801b84a <_strtoll_l.isra.0+0xbe>
 801b808:	4664      	mov	r4, ip
 801b80a:	42a7      	cmp	r7, r4
 801b80c:	dd2e      	ble.n	801b86c <_strtoll_l.isra.0+0xe0>
 801b80e:	1c5a      	adds	r2, r3, #1
 801b810:	d013      	beq.n	801b83a <_strtoll_l.isra.0+0xae>
 801b812:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b816:	428b      	cmp	r3, r1
 801b818:	bf08      	it	eq
 801b81a:	4282      	cmpeq	r2, r0
 801b81c:	d323      	bcc.n	801b866 <_strtoll_l.isra.0+0xda>
 801b81e:	d101      	bne.n	801b824 <_strtoll_l.isra.0+0x98>
 801b820:	45a6      	cmp	lr, r4
 801b822:	db20      	blt.n	801b866 <_strtoll_l.isra.0+0xda>
 801b824:	fb0a f301 	mul.w	r3, sl, r1
 801b828:	fb00 330b 	mla	r3, r0, fp, r3
 801b82c:	fbaa 0100 	umull	r0, r1, sl, r0
 801b830:	4419      	add	r1, r3
 801b832:	1900      	adds	r0, r0, r4
 801b834:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801b838:	2301      	movs	r3, #1
 801b83a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b83e:	e7de      	b.n	801b7fe <_strtoll_l.isra.0+0x72>
 801b840:	2c2b      	cmp	r4, #43	; 0x2b
 801b842:	bf04      	itt	eq
 801b844:	782c      	ldrbeq	r4, [r5, #0]
 801b846:	1c9d      	addeq	r5, r3, #2
 801b848:	e7b5      	b.n	801b7b6 <_strtoll_l.isra.0+0x2a>
 801b84a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b84e:	f1bc 0f19 	cmp.w	ip, #25
 801b852:	d801      	bhi.n	801b858 <_strtoll_l.isra.0+0xcc>
 801b854:	3c37      	subs	r4, #55	; 0x37
 801b856:	e7d8      	b.n	801b80a <_strtoll_l.isra.0+0x7e>
 801b858:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b85c:	f1bc 0f19 	cmp.w	ip, #25
 801b860:	d804      	bhi.n	801b86c <_strtoll_l.isra.0+0xe0>
 801b862:	3c57      	subs	r4, #87	; 0x57
 801b864:	e7d1      	b.n	801b80a <_strtoll_l.isra.0+0x7e>
 801b866:	f04f 33ff 	mov.w	r3, #4294967295
 801b86a:	e7e6      	b.n	801b83a <_strtoll_l.isra.0+0xae>
 801b86c:	1c5a      	adds	r2, r3, #1
 801b86e:	d10a      	bne.n	801b886 <_strtoll_l.isra.0+0xfa>
 801b870:	9a05      	ldr	r2, [sp, #20]
 801b872:	2322      	movs	r3, #34	; 0x22
 801b874:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b878:	6013      	str	r3, [r2, #0]
 801b87a:	f1b9 0f00 	cmp.w	r9, #0
 801b87e:	d10a      	bne.n	801b896 <_strtoll_l.isra.0+0x10a>
 801b880:	b007      	add	sp, #28
 801b882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b886:	b116      	cbz	r6, 801b88e <_strtoll_l.isra.0+0x102>
 801b888:	4240      	negs	r0, r0
 801b88a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801b88e:	f1b9 0f00 	cmp.w	r9, #0
 801b892:	d0f5      	beq.n	801b880 <_strtoll_l.isra.0+0xf4>
 801b894:	b10b      	cbz	r3, 801b89a <_strtoll_l.isra.0+0x10e>
 801b896:	f105 38ff 	add.w	r8, r5, #4294967295
 801b89a:	f8c9 8000 	str.w	r8, [r9]
 801b89e:	e7ef      	b.n	801b880 <_strtoll_l.isra.0+0xf4>
 801b8a0:	2430      	movs	r4, #48	; 0x30
 801b8a2:	2f00      	cmp	r7, #0
 801b8a4:	d195      	bne.n	801b7d2 <_strtoll_l.isra.0+0x46>
 801b8a6:	2708      	movs	r7, #8
 801b8a8:	e793      	b.n	801b7d2 <_strtoll_l.isra.0+0x46>
 801b8aa:	2c30      	cmp	r4, #48	; 0x30
 801b8ac:	d089      	beq.n	801b7c2 <_strtoll_l.isra.0+0x36>
 801b8ae:	270a      	movs	r7, #10
 801b8b0:	e78f      	b.n	801b7d2 <_strtoll_l.isra.0+0x46>
 801b8b2:	bf00      	nop
 801b8b4:	0801f849 	.word	0x0801f849

0801b8b8 <_strtoll_r>:
 801b8b8:	f7ff bf68 	b.w	801b78c <_strtoll_l.isra.0>

0801b8bc <_strtoull_l.isra.0>:
 801b8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8c0:	b085      	sub	sp, #20
 801b8c2:	4691      	mov	r9, r2
 801b8c4:	4a49      	ldr	r2, [pc, #292]	; (801b9ec <_strtoull_l.isra.0+0x130>)
 801b8c6:	9003      	str	r0, [sp, #12]
 801b8c8:	4688      	mov	r8, r1
 801b8ca:	461e      	mov	r6, r3
 801b8cc:	460d      	mov	r5, r1
 801b8ce:	462b      	mov	r3, r5
 801b8d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b8d4:	5ca7      	ldrb	r7, [r4, r2]
 801b8d6:	f017 0708 	ands.w	r7, r7, #8
 801b8da:	d1f8      	bne.n	801b8ce <_strtoull_l.isra.0+0x12>
 801b8dc:	2c2d      	cmp	r4, #45	; 0x2d
 801b8de:	d14a      	bne.n	801b976 <_strtoull_l.isra.0+0xba>
 801b8e0:	782c      	ldrb	r4, [r5, #0]
 801b8e2:	2701      	movs	r7, #1
 801b8e4:	1c9d      	adds	r5, r3, #2
 801b8e6:	2e00      	cmp	r6, #0
 801b8e8:	d07c      	beq.n	801b9e4 <_strtoull_l.isra.0+0x128>
 801b8ea:	2e10      	cmp	r6, #16
 801b8ec:	d109      	bne.n	801b902 <_strtoull_l.isra.0+0x46>
 801b8ee:	2c30      	cmp	r4, #48	; 0x30
 801b8f0:	d107      	bne.n	801b902 <_strtoull_l.isra.0+0x46>
 801b8f2:	782b      	ldrb	r3, [r5, #0]
 801b8f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b8f8:	2b58      	cmp	r3, #88	; 0x58
 801b8fa:	d16e      	bne.n	801b9da <_strtoull_l.isra.0+0x11e>
 801b8fc:	786c      	ldrb	r4, [r5, #1]
 801b8fe:	2610      	movs	r6, #16
 801b900:	3502      	adds	r5, #2
 801b902:	ea4f 7be6 	mov.w	fp, r6, asr #31
 801b906:	4632      	mov	r2, r6
 801b908:	465b      	mov	r3, fp
 801b90a:	f04f 30ff 	mov.w	r0, #4294967295
 801b90e:	f04f 31ff 	mov.w	r1, #4294967295
 801b912:	f7e5 f973 	bl	8000bfc <__aeabi_uldivmod>
 801b916:	e9cd 0100 	strd	r0, r1, [sp]
 801b91a:	4632      	mov	r2, r6
 801b91c:	465b      	mov	r3, fp
 801b91e:	f04f 30ff 	mov.w	r0, #4294967295
 801b922:	f04f 31ff 	mov.w	r1, #4294967295
 801b926:	f7e5 f969 	bl	8000bfc <__aeabi_uldivmod>
 801b92a:	46b2      	mov	sl, r6
 801b92c:	4696      	mov	lr, r2
 801b92e:	2300      	movs	r3, #0
 801b930:	2000      	movs	r0, #0
 801b932:	2100      	movs	r1, #0
 801b934:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b938:	f1bc 0f09 	cmp.w	ip, #9
 801b93c:	d820      	bhi.n	801b980 <_strtoull_l.isra.0+0xc4>
 801b93e:	4664      	mov	r4, ip
 801b940:	42a6      	cmp	r6, r4
 801b942:	dd2e      	ble.n	801b9a2 <_strtoull_l.isra.0+0xe6>
 801b944:	2b00      	cmp	r3, #0
 801b946:	db29      	blt.n	801b99c <_strtoull_l.isra.0+0xe0>
 801b948:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b94c:	428b      	cmp	r3, r1
 801b94e:	bf08      	it	eq
 801b950:	4282      	cmpeq	r2, r0
 801b952:	d323      	bcc.n	801b99c <_strtoull_l.isra.0+0xe0>
 801b954:	d101      	bne.n	801b95a <_strtoull_l.isra.0+0x9e>
 801b956:	45a6      	cmp	lr, r4
 801b958:	db20      	blt.n	801b99c <_strtoull_l.isra.0+0xe0>
 801b95a:	fb0a f301 	mul.w	r3, sl, r1
 801b95e:	fb00 330b 	mla	r3, r0, fp, r3
 801b962:	fbaa 0100 	umull	r0, r1, sl, r0
 801b966:	4419      	add	r1, r3
 801b968:	1900      	adds	r0, r0, r4
 801b96a:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801b96e:	2301      	movs	r3, #1
 801b970:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b974:	e7de      	b.n	801b934 <_strtoull_l.isra.0+0x78>
 801b976:	2c2b      	cmp	r4, #43	; 0x2b
 801b978:	bf04      	itt	eq
 801b97a:	782c      	ldrbeq	r4, [r5, #0]
 801b97c:	1c9d      	addeq	r5, r3, #2
 801b97e:	e7b2      	b.n	801b8e6 <_strtoull_l.isra.0+0x2a>
 801b980:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b984:	f1bc 0f19 	cmp.w	ip, #25
 801b988:	d801      	bhi.n	801b98e <_strtoull_l.isra.0+0xd2>
 801b98a:	3c37      	subs	r4, #55	; 0x37
 801b98c:	e7d8      	b.n	801b940 <_strtoull_l.isra.0+0x84>
 801b98e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b992:	f1bc 0f19 	cmp.w	ip, #25
 801b996:	d804      	bhi.n	801b9a2 <_strtoull_l.isra.0+0xe6>
 801b998:	3c57      	subs	r4, #87	; 0x57
 801b99a:	e7d1      	b.n	801b940 <_strtoull_l.isra.0+0x84>
 801b99c:	f04f 33ff 	mov.w	r3, #4294967295
 801b9a0:	e7e6      	b.n	801b970 <_strtoull_l.isra.0+0xb4>
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	da0c      	bge.n	801b9c0 <_strtoull_l.isra.0+0x104>
 801b9a6:	9a03      	ldr	r2, [sp, #12]
 801b9a8:	2322      	movs	r3, #34	; 0x22
 801b9aa:	6013      	str	r3, [r2, #0]
 801b9ac:	f04f 30ff 	mov.w	r0, #4294967295
 801b9b0:	f04f 31ff 	mov.w	r1, #4294967295
 801b9b4:	f1b9 0f00 	cmp.w	r9, #0
 801b9b8:	d10a      	bne.n	801b9d0 <_strtoull_l.isra.0+0x114>
 801b9ba:	b005      	add	sp, #20
 801b9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9c0:	b117      	cbz	r7, 801b9c8 <_strtoull_l.isra.0+0x10c>
 801b9c2:	4240      	negs	r0, r0
 801b9c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801b9c8:	f1b9 0f00 	cmp.w	r9, #0
 801b9cc:	d0f5      	beq.n	801b9ba <_strtoull_l.isra.0+0xfe>
 801b9ce:	b10b      	cbz	r3, 801b9d4 <_strtoull_l.isra.0+0x118>
 801b9d0:	f105 38ff 	add.w	r8, r5, #4294967295
 801b9d4:	f8c9 8000 	str.w	r8, [r9]
 801b9d8:	e7ef      	b.n	801b9ba <_strtoull_l.isra.0+0xfe>
 801b9da:	2430      	movs	r4, #48	; 0x30
 801b9dc:	2e00      	cmp	r6, #0
 801b9de:	d190      	bne.n	801b902 <_strtoull_l.isra.0+0x46>
 801b9e0:	2608      	movs	r6, #8
 801b9e2:	e78e      	b.n	801b902 <_strtoull_l.isra.0+0x46>
 801b9e4:	2c30      	cmp	r4, #48	; 0x30
 801b9e6:	d084      	beq.n	801b8f2 <_strtoull_l.isra.0+0x36>
 801b9e8:	260a      	movs	r6, #10
 801b9ea:	e78a      	b.n	801b902 <_strtoull_l.isra.0+0x46>
 801b9ec:	0801f849 	.word	0x0801f849

0801b9f0 <_strtoull_r>:
 801b9f0:	f7ff bf64 	b.w	801b8bc <_strtoull_l.isra.0>

0801b9f4 <__swbuf_r>:
 801b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9f6:	460e      	mov	r6, r1
 801b9f8:	4614      	mov	r4, r2
 801b9fa:	4605      	mov	r5, r0
 801b9fc:	b118      	cbz	r0, 801ba06 <__swbuf_r+0x12>
 801b9fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801ba00:	b90b      	cbnz	r3, 801ba06 <__swbuf_r+0x12>
 801ba02:	f7fc faed 	bl	8017fe0 <__sinit>
 801ba06:	69a3      	ldr	r3, [r4, #24]
 801ba08:	60a3      	str	r3, [r4, #8]
 801ba0a:	89a3      	ldrh	r3, [r4, #12]
 801ba0c:	0719      	lsls	r1, r3, #28
 801ba0e:	d529      	bpl.n	801ba64 <__swbuf_r+0x70>
 801ba10:	6923      	ldr	r3, [r4, #16]
 801ba12:	b33b      	cbz	r3, 801ba64 <__swbuf_r+0x70>
 801ba14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba18:	b2f6      	uxtb	r6, r6
 801ba1a:	049a      	lsls	r2, r3, #18
 801ba1c:	4637      	mov	r7, r6
 801ba1e:	d52a      	bpl.n	801ba76 <__swbuf_r+0x82>
 801ba20:	6823      	ldr	r3, [r4, #0]
 801ba22:	6920      	ldr	r0, [r4, #16]
 801ba24:	1a18      	subs	r0, r3, r0
 801ba26:	6963      	ldr	r3, [r4, #20]
 801ba28:	4283      	cmp	r3, r0
 801ba2a:	dc04      	bgt.n	801ba36 <__swbuf_r+0x42>
 801ba2c:	4621      	mov	r1, r4
 801ba2e:	4628      	mov	r0, r5
 801ba30:	f7fc fa6a 	bl	8017f08 <_fflush_r>
 801ba34:	b9e0      	cbnz	r0, 801ba70 <__swbuf_r+0x7c>
 801ba36:	68a3      	ldr	r3, [r4, #8]
 801ba38:	3b01      	subs	r3, #1
 801ba3a:	60a3      	str	r3, [r4, #8]
 801ba3c:	6823      	ldr	r3, [r4, #0]
 801ba3e:	1c5a      	adds	r2, r3, #1
 801ba40:	6022      	str	r2, [r4, #0]
 801ba42:	701e      	strb	r6, [r3, #0]
 801ba44:	6962      	ldr	r2, [r4, #20]
 801ba46:	1c43      	adds	r3, r0, #1
 801ba48:	429a      	cmp	r2, r3
 801ba4a:	d004      	beq.n	801ba56 <__swbuf_r+0x62>
 801ba4c:	89a3      	ldrh	r3, [r4, #12]
 801ba4e:	07db      	lsls	r3, r3, #31
 801ba50:	d506      	bpl.n	801ba60 <__swbuf_r+0x6c>
 801ba52:	2e0a      	cmp	r6, #10
 801ba54:	d104      	bne.n	801ba60 <__swbuf_r+0x6c>
 801ba56:	4621      	mov	r1, r4
 801ba58:	4628      	mov	r0, r5
 801ba5a:	f7fc fa55 	bl	8017f08 <_fflush_r>
 801ba5e:	b938      	cbnz	r0, 801ba70 <__swbuf_r+0x7c>
 801ba60:	4638      	mov	r0, r7
 801ba62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba64:	4621      	mov	r1, r4
 801ba66:	4628      	mov	r0, r5
 801ba68:	f7fb fadc 	bl	8017024 <__swsetup_r>
 801ba6c:	2800      	cmp	r0, #0
 801ba6e:	d0d1      	beq.n	801ba14 <__swbuf_r+0x20>
 801ba70:	f04f 37ff 	mov.w	r7, #4294967295
 801ba74:	e7f4      	b.n	801ba60 <__swbuf_r+0x6c>
 801ba76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ba7a:	81a3      	strh	r3, [r4, #12]
 801ba7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ba82:	6663      	str	r3, [r4, #100]	; 0x64
 801ba84:	e7cc      	b.n	801ba20 <__swbuf_r+0x2c>
	...

0801ba88 <_wcrtomb_r>:
 801ba88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba8a:	4c09      	ldr	r4, [pc, #36]	; (801bab0 <_wcrtomb_r+0x28>)
 801ba8c:	b085      	sub	sp, #20
 801ba8e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 801ba92:	4605      	mov	r5, r0
 801ba94:	461e      	mov	r6, r3
 801ba96:	b909      	cbnz	r1, 801ba9c <_wcrtomb_r+0x14>
 801ba98:	460a      	mov	r2, r1
 801ba9a:	a901      	add	r1, sp, #4
 801ba9c:	47b8      	blx	r7
 801ba9e:	1c43      	adds	r3, r0, #1
 801baa0:	bf01      	itttt	eq
 801baa2:	2300      	moveq	r3, #0
 801baa4:	6033      	streq	r3, [r6, #0]
 801baa6:	238a      	moveq	r3, #138	; 0x8a
 801baa8:	602b      	streq	r3, [r5, #0]
 801baaa:	b005      	add	sp, #20
 801baac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801baae:	bf00      	nop
 801bab0:	200008d0 	.word	0x200008d0

0801bab4 <__ascii_wctomb>:
 801bab4:	b149      	cbz	r1, 801baca <__ascii_wctomb+0x16>
 801bab6:	2aff      	cmp	r2, #255	; 0xff
 801bab8:	bf85      	ittet	hi
 801baba:	238a      	movhi	r3, #138	; 0x8a
 801babc:	6003      	strhi	r3, [r0, #0]
 801babe:	700a      	strbls	r2, [r1, #0]
 801bac0:	f04f 30ff 	movhi.w	r0, #4294967295
 801bac4:	bf98      	it	ls
 801bac6:	2001      	movls	r0, #1
 801bac8:	4770      	bx	lr
 801baca:	4608      	mov	r0, r1
 801bacc:	4770      	bx	lr

0801bace <abort>:
 801bace:	b508      	push	{r3, lr}
 801bad0:	2006      	movs	r0, #6
 801bad2:	f000 f82d 	bl	801bb30 <raise>
 801bad6:	2001      	movs	r0, #1
 801bad8:	f7e6 ff46 	bl	8002968 <_exit>

0801badc <_raise_r>:
 801badc:	291f      	cmp	r1, #31
 801bade:	b538      	push	{r3, r4, r5, lr}
 801bae0:	4604      	mov	r4, r0
 801bae2:	460d      	mov	r5, r1
 801bae4:	d904      	bls.n	801baf0 <_raise_r+0x14>
 801bae6:	2316      	movs	r3, #22
 801bae8:	6003      	str	r3, [r0, #0]
 801baea:	f04f 30ff 	mov.w	r0, #4294967295
 801baee:	bd38      	pop	{r3, r4, r5, pc}
 801baf0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 801baf4:	b112      	cbz	r2, 801bafc <_raise_r+0x20>
 801baf6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bafa:	b94b      	cbnz	r3, 801bb10 <_raise_r+0x34>
 801bafc:	4620      	mov	r0, r4
 801bafe:	f000 f831 	bl	801bb64 <_getpid_r>
 801bb02:	462a      	mov	r2, r5
 801bb04:	4601      	mov	r1, r0
 801bb06:	4620      	mov	r0, r4
 801bb08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb0c:	f000 b818 	b.w	801bb40 <_kill_r>
 801bb10:	2b01      	cmp	r3, #1
 801bb12:	d00a      	beq.n	801bb2a <_raise_r+0x4e>
 801bb14:	1c59      	adds	r1, r3, #1
 801bb16:	d103      	bne.n	801bb20 <_raise_r+0x44>
 801bb18:	2316      	movs	r3, #22
 801bb1a:	6003      	str	r3, [r0, #0]
 801bb1c:	2001      	movs	r0, #1
 801bb1e:	e7e6      	b.n	801baee <_raise_r+0x12>
 801bb20:	2400      	movs	r4, #0
 801bb22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bb26:	4628      	mov	r0, r5
 801bb28:	4798      	blx	r3
 801bb2a:	2000      	movs	r0, #0
 801bb2c:	e7df      	b.n	801baee <_raise_r+0x12>
	...

0801bb30 <raise>:
 801bb30:	4b02      	ldr	r3, [pc, #8]	; (801bb3c <raise+0xc>)
 801bb32:	4601      	mov	r1, r0
 801bb34:	6818      	ldr	r0, [r3, #0]
 801bb36:	f7ff bfd1 	b.w	801badc <_raise_r>
 801bb3a:	bf00      	nop
 801bb3c:	2000002c 	.word	0x2000002c

0801bb40 <_kill_r>:
 801bb40:	b538      	push	{r3, r4, r5, lr}
 801bb42:	4d07      	ldr	r5, [pc, #28]	; (801bb60 <_kill_r+0x20>)
 801bb44:	2300      	movs	r3, #0
 801bb46:	4604      	mov	r4, r0
 801bb48:	4608      	mov	r0, r1
 801bb4a:	4611      	mov	r1, r2
 801bb4c:	602b      	str	r3, [r5, #0]
 801bb4e:	f7e6 fef9 	bl	8002944 <_kill>
 801bb52:	1c43      	adds	r3, r0, #1
 801bb54:	d102      	bne.n	801bb5c <_kill_r+0x1c>
 801bb56:	682b      	ldr	r3, [r5, #0]
 801bb58:	b103      	cbz	r3, 801bb5c <_kill_r+0x1c>
 801bb5a:	6023      	str	r3, [r4, #0]
 801bb5c:	bd38      	pop	{r3, r4, r5, pc}
 801bb5e:	bf00      	nop
 801bb60:	2000b654 	.word	0x2000b654

0801bb64 <_getpid_r>:
 801bb64:	f7e6 bee6 	b.w	8002934 <_getpid>

0801bb68 <pow>:
 801bb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb6c:	ec59 8b10 	vmov	r8, r9, d0
 801bb70:	ec57 6b11 	vmov	r6, r7, d1
 801bb74:	f000 f8a8 	bl	801bcc8 <__ieee754_pow>
 801bb78:	4b4e      	ldr	r3, [pc, #312]	; (801bcb4 <pow+0x14c>)
 801bb7a:	f993 3000 	ldrsb.w	r3, [r3]
 801bb7e:	3301      	adds	r3, #1
 801bb80:	ec55 4b10 	vmov	r4, r5, d0
 801bb84:	d015      	beq.n	801bbb2 <pow+0x4a>
 801bb86:	4632      	mov	r2, r6
 801bb88:	463b      	mov	r3, r7
 801bb8a:	4630      	mov	r0, r6
 801bb8c:	4639      	mov	r1, r7
 801bb8e:	f7e4 fff7 	bl	8000b80 <__aeabi_dcmpun>
 801bb92:	b970      	cbnz	r0, 801bbb2 <pow+0x4a>
 801bb94:	4642      	mov	r2, r8
 801bb96:	464b      	mov	r3, r9
 801bb98:	4640      	mov	r0, r8
 801bb9a:	4649      	mov	r1, r9
 801bb9c:	f7e4 fff0 	bl	8000b80 <__aeabi_dcmpun>
 801bba0:	2200      	movs	r2, #0
 801bba2:	2300      	movs	r3, #0
 801bba4:	b148      	cbz	r0, 801bbba <pow+0x52>
 801bba6:	4630      	mov	r0, r6
 801bba8:	4639      	mov	r1, r7
 801bbaa:	f7e4 ffb7 	bl	8000b1c <__aeabi_dcmpeq>
 801bbae:	2800      	cmp	r0, #0
 801bbb0:	d17d      	bne.n	801bcae <pow+0x146>
 801bbb2:	ec45 4b10 	vmov	d0, r4, r5
 801bbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bbba:	4640      	mov	r0, r8
 801bbbc:	4649      	mov	r1, r9
 801bbbe:	f7e4 ffad 	bl	8000b1c <__aeabi_dcmpeq>
 801bbc2:	b1e0      	cbz	r0, 801bbfe <pow+0x96>
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	2300      	movs	r3, #0
 801bbc8:	4630      	mov	r0, r6
 801bbca:	4639      	mov	r1, r7
 801bbcc:	f7e4 ffa6 	bl	8000b1c <__aeabi_dcmpeq>
 801bbd0:	2800      	cmp	r0, #0
 801bbd2:	d16c      	bne.n	801bcae <pow+0x146>
 801bbd4:	ec47 6b10 	vmov	d0, r6, r7
 801bbd8:	f000 fe55 	bl	801c886 <finite>
 801bbdc:	2800      	cmp	r0, #0
 801bbde:	d0e8      	beq.n	801bbb2 <pow+0x4a>
 801bbe0:	2200      	movs	r2, #0
 801bbe2:	2300      	movs	r3, #0
 801bbe4:	4630      	mov	r0, r6
 801bbe6:	4639      	mov	r1, r7
 801bbe8:	f7e4 ffa2 	bl	8000b30 <__aeabi_dcmplt>
 801bbec:	2800      	cmp	r0, #0
 801bbee:	d0e0      	beq.n	801bbb2 <pow+0x4a>
 801bbf0:	f7fc f8f6 	bl	8017de0 <__errno>
 801bbf4:	2321      	movs	r3, #33	; 0x21
 801bbf6:	6003      	str	r3, [r0, #0]
 801bbf8:	2400      	movs	r4, #0
 801bbfa:	4d2f      	ldr	r5, [pc, #188]	; (801bcb8 <pow+0x150>)
 801bbfc:	e7d9      	b.n	801bbb2 <pow+0x4a>
 801bbfe:	ec45 4b10 	vmov	d0, r4, r5
 801bc02:	f000 fe40 	bl	801c886 <finite>
 801bc06:	bbb8      	cbnz	r0, 801bc78 <pow+0x110>
 801bc08:	ec49 8b10 	vmov	d0, r8, r9
 801bc0c:	f000 fe3b 	bl	801c886 <finite>
 801bc10:	b390      	cbz	r0, 801bc78 <pow+0x110>
 801bc12:	ec47 6b10 	vmov	d0, r6, r7
 801bc16:	f000 fe36 	bl	801c886 <finite>
 801bc1a:	b368      	cbz	r0, 801bc78 <pow+0x110>
 801bc1c:	4622      	mov	r2, r4
 801bc1e:	462b      	mov	r3, r5
 801bc20:	4620      	mov	r0, r4
 801bc22:	4629      	mov	r1, r5
 801bc24:	f7e4 ffac 	bl	8000b80 <__aeabi_dcmpun>
 801bc28:	b160      	cbz	r0, 801bc44 <pow+0xdc>
 801bc2a:	f7fc f8d9 	bl	8017de0 <__errno>
 801bc2e:	2321      	movs	r3, #33	; 0x21
 801bc30:	6003      	str	r3, [r0, #0]
 801bc32:	2200      	movs	r2, #0
 801bc34:	2300      	movs	r3, #0
 801bc36:	4610      	mov	r0, r2
 801bc38:	4619      	mov	r1, r3
 801bc3a:	f7e4 fe31 	bl	80008a0 <__aeabi_ddiv>
 801bc3e:	4604      	mov	r4, r0
 801bc40:	460d      	mov	r5, r1
 801bc42:	e7b6      	b.n	801bbb2 <pow+0x4a>
 801bc44:	f7fc f8cc 	bl	8017de0 <__errno>
 801bc48:	2322      	movs	r3, #34	; 0x22
 801bc4a:	6003      	str	r3, [r0, #0]
 801bc4c:	2200      	movs	r2, #0
 801bc4e:	2300      	movs	r3, #0
 801bc50:	4640      	mov	r0, r8
 801bc52:	4649      	mov	r1, r9
 801bc54:	f7e4 ff6c 	bl	8000b30 <__aeabi_dcmplt>
 801bc58:	2400      	movs	r4, #0
 801bc5a:	b158      	cbz	r0, 801bc74 <pow+0x10c>
 801bc5c:	ec47 6b10 	vmov	d0, r6, r7
 801bc60:	f000 fe26 	bl	801c8b0 <rint>
 801bc64:	4632      	mov	r2, r6
 801bc66:	ec51 0b10 	vmov	r0, r1, d0
 801bc6a:	463b      	mov	r3, r7
 801bc6c:	f7e4 ff56 	bl	8000b1c <__aeabi_dcmpeq>
 801bc70:	2800      	cmp	r0, #0
 801bc72:	d0c2      	beq.n	801bbfa <pow+0x92>
 801bc74:	4d11      	ldr	r5, [pc, #68]	; (801bcbc <pow+0x154>)
 801bc76:	e79c      	b.n	801bbb2 <pow+0x4a>
 801bc78:	2200      	movs	r2, #0
 801bc7a:	2300      	movs	r3, #0
 801bc7c:	4620      	mov	r0, r4
 801bc7e:	4629      	mov	r1, r5
 801bc80:	f7e4 ff4c 	bl	8000b1c <__aeabi_dcmpeq>
 801bc84:	2800      	cmp	r0, #0
 801bc86:	d094      	beq.n	801bbb2 <pow+0x4a>
 801bc88:	ec49 8b10 	vmov	d0, r8, r9
 801bc8c:	f000 fdfb 	bl	801c886 <finite>
 801bc90:	2800      	cmp	r0, #0
 801bc92:	d08e      	beq.n	801bbb2 <pow+0x4a>
 801bc94:	ec47 6b10 	vmov	d0, r6, r7
 801bc98:	f000 fdf5 	bl	801c886 <finite>
 801bc9c:	2800      	cmp	r0, #0
 801bc9e:	d088      	beq.n	801bbb2 <pow+0x4a>
 801bca0:	f7fc f89e 	bl	8017de0 <__errno>
 801bca4:	2322      	movs	r3, #34	; 0x22
 801bca6:	6003      	str	r3, [r0, #0]
 801bca8:	2400      	movs	r4, #0
 801bcaa:	2500      	movs	r5, #0
 801bcac:	e781      	b.n	801bbb2 <pow+0x4a>
 801bcae:	4d04      	ldr	r5, [pc, #16]	; (801bcc0 <pow+0x158>)
 801bcb0:	2400      	movs	r4, #0
 801bcb2:	e77e      	b.n	801bbb2 <pow+0x4a>
 801bcb4:	20000a3c 	.word	0x20000a3c
 801bcb8:	fff00000 	.word	0xfff00000
 801bcbc:	7ff00000 	.word	0x7ff00000
 801bcc0:	3ff00000 	.word	0x3ff00000
 801bcc4:	00000000 	.word	0x00000000

0801bcc8 <__ieee754_pow>:
 801bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bccc:	ed2d 8b06 	vpush	{d8-d10}
 801bcd0:	b08d      	sub	sp, #52	; 0x34
 801bcd2:	ed8d 1b02 	vstr	d1, [sp, #8]
 801bcd6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801bcda:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801bcde:	ea56 0100 	orrs.w	r1, r6, r0
 801bce2:	ec53 2b10 	vmov	r2, r3, d0
 801bce6:	f000 84d1 	beq.w	801c68c <__ieee754_pow+0x9c4>
 801bcea:	497f      	ldr	r1, [pc, #508]	; (801bee8 <__ieee754_pow+0x220>)
 801bcec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801bcf0:	428c      	cmp	r4, r1
 801bcf2:	ee10 8a10 	vmov	r8, s0
 801bcf6:	4699      	mov	r9, r3
 801bcf8:	dc09      	bgt.n	801bd0e <__ieee754_pow+0x46>
 801bcfa:	d103      	bne.n	801bd04 <__ieee754_pow+0x3c>
 801bcfc:	b97a      	cbnz	r2, 801bd1e <__ieee754_pow+0x56>
 801bcfe:	42a6      	cmp	r6, r4
 801bd00:	dd02      	ble.n	801bd08 <__ieee754_pow+0x40>
 801bd02:	e00c      	b.n	801bd1e <__ieee754_pow+0x56>
 801bd04:	428e      	cmp	r6, r1
 801bd06:	dc02      	bgt.n	801bd0e <__ieee754_pow+0x46>
 801bd08:	428e      	cmp	r6, r1
 801bd0a:	d110      	bne.n	801bd2e <__ieee754_pow+0x66>
 801bd0c:	b178      	cbz	r0, 801bd2e <__ieee754_pow+0x66>
 801bd0e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801bd12:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801bd16:	ea54 0308 	orrs.w	r3, r4, r8
 801bd1a:	f000 84b7 	beq.w	801c68c <__ieee754_pow+0x9c4>
 801bd1e:	4873      	ldr	r0, [pc, #460]	; (801beec <__ieee754_pow+0x224>)
 801bd20:	b00d      	add	sp, #52	; 0x34
 801bd22:	ecbd 8b06 	vpop	{d8-d10}
 801bd26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd2a:	f000 bdb9 	b.w	801c8a0 <nan>
 801bd2e:	f1b9 0f00 	cmp.w	r9, #0
 801bd32:	da36      	bge.n	801bda2 <__ieee754_pow+0xda>
 801bd34:	496e      	ldr	r1, [pc, #440]	; (801bef0 <__ieee754_pow+0x228>)
 801bd36:	428e      	cmp	r6, r1
 801bd38:	dc51      	bgt.n	801bdde <__ieee754_pow+0x116>
 801bd3a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801bd3e:	428e      	cmp	r6, r1
 801bd40:	f340 84af 	ble.w	801c6a2 <__ieee754_pow+0x9da>
 801bd44:	1531      	asrs	r1, r6, #20
 801bd46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801bd4a:	2914      	cmp	r1, #20
 801bd4c:	dd0f      	ble.n	801bd6e <__ieee754_pow+0xa6>
 801bd4e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801bd52:	fa20 fc01 	lsr.w	ip, r0, r1
 801bd56:	fa0c f101 	lsl.w	r1, ip, r1
 801bd5a:	4281      	cmp	r1, r0
 801bd5c:	f040 84a1 	bne.w	801c6a2 <__ieee754_pow+0x9da>
 801bd60:	f00c 0c01 	and.w	ip, ip, #1
 801bd64:	f1cc 0102 	rsb	r1, ip, #2
 801bd68:	9100      	str	r1, [sp, #0]
 801bd6a:	b180      	cbz	r0, 801bd8e <__ieee754_pow+0xc6>
 801bd6c:	e059      	b.n	801be22 <__ieee754_pow+0x15a>
 801bd6e:	2800      	cmp	r0, #0
 801bd70:	d155      	bne.n	801be1e <__ieee754_pow+0x156>
 801bd72:	f1c1 0114 	rsb	r1, r1, #20
 801bd76:	fa46 fc01 	asr.w	ip, r6, r1
 801bd7a:	fa0c f101 	lsl.w	r1, ip, r1
 801bd7e:	42b1      	cmp	r1, r6
 801bd80:	f040 848c 	bne.w	801c69c <__ieee754_pow+0x9d4>
 801bd84:	f00c 0c01 	and.w	ip, ip, #1
 801bd88:	f1cc 0102 	rsb	r1, ip, #2
 801bd8c:	9100      	str	r1, [sp, #0]
 801bd8e:	4959      	ldr	r1, [pc, #356]	; (801bef4 <__ieee754_pow+0x22c>)
 801bd90:	428e      	cmp	r6, r1
 801bd92:	d12d      	bne.n	801bdf0 <__ieee754_pow+0x128>
 801bd94:	2f00      	cmp	r7, #0
 801bd96:	da79      	bge.n	801be8c <__ieee754_pow+0x1c4>
 801bd98:	4956      	ldr	r1, [pc, #344]	; (801bef4 <__ieee754_pow+0x22c>)
 801bd9a:	2000      	movs	r0, #0
 801bd9c:	f7e4 fd80 	bl	80008a0 <__aeabi_ddiv>
 801bda0:	e016      	b.n	801bdd0 <__ieee754_pow+0x108>
 801bda2:	2100      	movs	r1, #0
 801bda4:	9100      	str	r1, [sp, #0]
 801bda6:	2800      	cmp	r0, #0
 801bda8:	d13b      	bne.n	801be22 <__ieee754_pow+0x15a>
 801bdaa:	494f      	ldr	r1, [pc, #316]	; (801bee8 <__ieee754_pow+0x220>)
 801bdac:	428e      	cmp	r6, r1
 801bdae:	d1ee      	bne.n	801bd8e <__ieee754_pow+0xc6>
 801bdb0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801bdb4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801bdb8:	ea53 0308 	orrs.w	r3, r3, r8
 801bdbc:	f000 8466 	beq.w	801c68c <__ieee754_pow+0x9c4>
 801bdc0:	4b4d      	ldr	r3, [pc, #308]	; (801bef8 <__ieee754_pow+0x230>)
 801bdc2:	429c      	cmp	r4, r3
 801bdc4:	dd0d      	ble.n	801bde2 <__ieee754_pow+0x11a>
 801bdc6:	2f00      	cmp	r7, #0
 801bdc8:	f280 8464 	bge.w	801c694 <__ieee754_pow+0x9cc>
 801bdcc:	2000      	movs	r0, #0
 801bdce:	2100      	movs	r1, #0
 801bdd0:	ec41 0b10 	vmov	d0, r0, r1
 801bdd4:	b00d      	add	sp, #52	; 0x34
 801bdd6:	ecbd 8b06 	vpop	{d8-d10}
 801bdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdde:	2102      	movs	r1, #2
 801bde0:	e7e0      	b.n	801bda4 <__ieee754_pow+0xdc>
 801bde2:	2f00      	cmp	r7, #0
 801bde4:	daf2      	bge.n	801bdcc <__ieee754_pow+0x104>
 801bde6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801bdea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801bdee:	e7ef      	b.n	801bdd0 <__ieee754_pow+0x108>
 801bdf0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801bdf4:	d104      	bne.n	801be00 <__ieee754_pow+0x138>
 801bdf6:	4610      	mov	r0, r2
 801bdf8:	4619      	mov	r1, r3
 801bdfa:	f7e4 fc27 	bl	800064c <__aeabi_dmul>
 801bdfe:	e7e7      	b.n	801bdd0 <__ieee754_pow+0x108>
 801be00:	493e      	ldr	r1, [pc, #248]	; (801befc <__ieee754_pow+0x234>)
 801be02:	428f      	cmp	r7, r1
 801be04:	d10d      	bne.n	801be22 <__ieee754_pow+0x15a>
 801be06:	f1b9 0f00 	cmp.w	r9, #0
 801be0a:	db0a      	blt.n	801be22 <__ieee754_pow+0x15a>
 801be0c:	ec43 2b10 	vmov	d0, r2, r3
 801be10:	b00d      	add	sp, #52	; 0x34
 801be12:	ecbd 8b06 	vpop	{d8-d10}
 801be16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be1a:	f000 bc77 	b.w	801c70c <__ieee754_sqrt>
 801be1e:	2100      	movs	r1, #0
 801be20:	9100      	str	r1, [sp, #0]
 801be22:	ec43 2b10 	vmov	d0, r2, r3
 801be26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801be2a:	f000 fd23 	bl	801c874 <fabs>
 801be2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801be32:	ec51 0b10 	vmov	r0, r1, d0
 801be36:	f1b8 0f00 	cmp.w	r8, #0
 801be3a:	d12a      	bne.n	801be92 <__ieee754_pow+0x1ca>
 801be3c:	b12c      	cbz	r4, 801be4a <__ieee754_pow+0x182>
 801be3e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801bef4 <__ieee754_pow+0x22c>
 801be42:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801be46:	45e6      	cmp	lr, ip
 801be48:	d123      	bne.n	801be92 <__ieee754_pow+0x1ca>
 801be4a:	2f00      	cmp	r7, #0
 801be4c:	da05      	bge.n	801be5a <__ieee754_pow+0x192>
 801be4e:	4602      	mov	r2, r0
 801be50:	460b      	mov	r3, r1
 801be52:	2000      	movs	r0, #0
 801be54:	4927      	ldr	r1, [pc, #156]	; (801bef4 <__ieee754_pow+0x22c>)
 801be56:	f7e4 fd23 	bl	80008a0 <__aeabi_ddiv>
 801be5a:	f1b9 0f00 	cmp.w	r9, #0
 801be5e:	dab7      	bge.n	801bdd0 <__ieee754_pow+0x108>
 801be60:	9b00      	ldr	r3, [sp, #0]
 801be62:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801be66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801be6a:	4323      	orrs	r3, r4
 801be6c:	d108      	bne.n	801be80 <__ieee754_pow+0x1b8>
 801be6e:	4602      	mov	r2, r0
 801be70:	460b      	mov	r3, r1
 801be72:	4610      	mov	r0, r2
 801be74:	4619      	mov	r1, r3
 801be76:	f7e4 fa31 	bl	80002dc <__aeabi_dsub>
 801be7a:	4602      	mov	r2, r0
 801be7c:	460b      	mov	r3, r1
 801be7e:	e78d      	b.n	801bd9c <__ieee754_pow+0xd4>
 801be80:	9b00      	ldr	r3, [sp, #0]
 801be82:	2b01      	cmp	r3, #1
 801be84:	d1a4      	bne.n	801bdd0 <__ieee754_pow+0x108>
 801be86:	4602      	mov	r2, r0
 801be88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801be8c:	4610      	mov	r0, r2
 801be8e:	4619      	mov	r1, r3
 801be90:	e79e      	b.n	801bdd0 <__ieee754_pow+0x108>
 801be92:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801be96:	f10c 35ff 	add.w	r5, ip, #4294967295
 801be9a:	950a      	str	r5, [sp, #40]	; 0x28
 801be9c:	9d00      	ldr	r5, [sp, #0]
 801be9e:	46ac      	mov	ip, r5
 801bea0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801bea2:	ea5c 0505 	orrs.w	r5, ip, r5
 801bea6:	d0e4      	beq.n	801be72 <__ieee754_pow+0x1aa>
 801bea8:	4b15      	ldr	r3, [pc, #84]	; (801bf00 <__ieee754_pow+0x238>)
 801beaa:	429e      	cmp	r6, r3
 801beac:	f340 80fc 	ble.w	801c0a8 <__ieee754_pow+0x3e0>
 801beb0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801beb4:	429e      	cmp	r6, r3
 801beb6:	4b10      	ldr	r3, [pc, #64]	; (801bef8 <__ieee754_pow+0x230>)
 801beb8:	dd07      	ble.n	801beca <__ieee754_pow+0x202>
 801beba:	429c      	cmp	r4, r3
 801bebc:	dc0a      	bgt.n	801bed4 <__ieee754_pow+0x20c>
 801bebe:	2f00      	cmp	r7, #0
 801bec0:	da84      	bge.n	801bdcc <__ieee754_pow+0x104>
 801bec2:	a307      	add	r3, pc, #28	; (adr r3, 801bee0 <__ieee754_pow+0x218>)
 801bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bec8:	e795      	b.n	801bdf6 <__ieee754_pow+0x12e>
 801beca:	429c      	cmp	r4, r3
 801becc:	dbf7      	blt.n	801bebe <__ieee754_pow+0x1f6>
 801bece:	4b09      	ldr	r3, [pc, #36]	; (801bef4 <__ieee754_pow+0x22c>)
 801bed0:	429c      	cmp	r4, r3
 801bed2:	dd17      	ble.n	801bf04 <__ieee754_pow+0x23c>
 801bed4:	2f00      	cmp	r7, #0
 801bed6:	dcf4      	bgt.n	801bec2 <__ieee754_pow+0x1fa>
 801bed8:	e778      	b.n	801bdcc <__ieee754_pow+0x104>
 801beda:	bf00      	nop
 801bedc:	f3af 8000 	nop.w
 801bee0:	8800759c 	.word	0x8800759c
 801bee4:	7e37e43c 	.word	0x7e37e43c
 801bee8:	7ff00000 	.word	0x7ff00000
 801beec:	0801fcf9 	.word	0x0801fcf9
 801bef0:	433fffff 	.word	0x433fffff
 801bef4:	3ff00000 	.word	0x3ff00000
 801bef8:	3fefffff 	.word	0x3fefffff
 801befc:	3fe00000 	.word	0x3fe00000
 801bf00:	41e00000 	.word	0x41e00000
 801bf04:	4b64      	ldr	r3, [pc, #400]	; (801c098 <__ieee754_pow+0x3d0>)
 801bf06:	2200      	movs	r2, #0
 801bf08:	f7e4 f9e8 	bl	80002dc <__aeabi_dsub>
 801bf0c:	a356      	add	r3, pc, #344	; (adr r3, 801c068 <__ieee754_pow+0x3a0>)
 801bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf12:	4604      	mov	r4, r0
 801bf14:	460d      	mov	r5, r1
 801bf16:	f7e4 fb99 	bl	800064c <__aeabi_dmul>
 801bf1a:	a355      	add	r3, pc, #340	; (adr r3, 801c070 <__ieee754_pow+0x3a8>)
 801bf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf20:	4606      	mov	r6, r0
 801bf22:	460f      	mov	r7, r1
 801bf24:	4620      	mov	r0, r4
 801bf26:	4629      	mov	r1, r5
 801bf28:	f7e4 fb90 	bl	800064c <__aeabi_dmul>
 801bf2c:	4b5b      	ldr	r3, [pc, #364]	; (801c09c <__ieee754_pow+0x3d4>)
 801bf2e:	4682      	mov	sl, r0
 801bf30:	468b      	mov	fp, r1
 801bf32:	2200      	movs	r2, #0
 801bf34:	4620      	mov	r0, r4
 801bf36:	4629      	mov	r1, r5
 801bf38:	f7e4 fb88 	bl	800064c <__aeabi_dmul>
 801bf3c:	4602      	mov	r2, r0
 801bf3e:	460b      	mov	r3, r1
 801bf40:	a14d      	add	r1, pc, #308	; (adr r1, 801c078 <__ieee754_pow+0x3b0>)
 801bf42:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf46:	f7e4 f9c9 	bl	80002dc <__aeabi_dsub>
 801bf4a:	4622      	mov	r2, r4
 801bf4c:	462b      	mov	r3, r5
 801bf4e:	f7e4 fb7d 	bl	800064c <__aeabi_dmul>
 801bf52:	4602      	mov	r2, r0
 801bf54:	460b      	mov	r3, r1
 801bf56:	2000      	movs	r0, #0
 801bf58:	4951      	ldr	r1, [pc, #324]	; (801c0a0 <__ieee754_pow+0x3d8>)
 801bf5a:	f7e4 f9bf 	bl	80002dc <__aeabi_dsub>
 801bf5e:	4622      	mov	r2, r4
 801bf60:	4680      	mov	r8, r0
 801bf62:	4689      	mov	r9, r1
 801bf64:	462b      	mov	r3, r5
 801bf66:	4620      	mov	r0, r4
 801bf68:	4629      	mov	r1, r5
 801bf6a:	f7e4 fb6f 	bl	800064c <__aeabi_dmul>
 801bf6e:	4602      	mov	r2, r0
 801bf70:	460b      	mov	r3, r1
 801bf72:	4640      	mov	r0, r8
 801bf74:	4649      	mov	r1, r9
 801bf76:	f7e4 fb69 	bl	800064c <__aeabi_dmul>
 801bf7a:	a341      	add	r3, pc, #260	; (adr r3, 801c080 <__ieee754_pow+0x3b8>)
 801bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf80:	f7e4 fb64 	bl	800064c <__aeabi_dmul>
 801bf84:	4602      	mov	r2, r0
 801bf86:	460b      	mov	r3, r1
 801bf88:	4650      	mov	r0, sl
 801bf8a:	4659      	mov	r1, fp
 801bf8c:	f7e4 f9a6 	bl	80002dc <__aeabi_dsub>
 801bf90:	4602      	mov	r2, r0
 801bf92:	460b      	mov	r3, r1
 801bf94:	4680      	mov	r8, r0
 801bf96:	4689      	mov	r9, r1
 801bf98:	4630      	mov	r0, r6
 801bf9a:	4639      	mov	r1, r7
 801bf9c:	f7e4 f9a0 	bl	80002e0 <__adddf3>
 801bfa0:	2400      	movs	r4, #0
 801bfa2:	4632      	mov	r2, r6
 801bfa4:	463b      	mov	r3, r7
 801bfa6:	4620      	mov	r0, r4
 801bfa8:	460d      	mov	r5, r1
 801bfaa:	f7e4 f997 	bl	80002dc <__aeabi_dsub>
 801bfae:	4602      	mov	r2, r0
 801bfb0:	460b      	mov	r3, r1
 801bfb2:	4640      	mov	r0, r8
 801bfb4:	4649      	mov	r1, r9
 801bfb6:	f7e4 f991 	bl	80002dc <__aeabi_dsub>
 801bfba:	9b00      	ldr	r3, [sp, #0]
 801bfbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bfbe:	3b01      	subs	r3, #1
 801bfc0:	4313      	orrs	r3, r2
 801bfc2:	4682      	mov	sl, r0
 801bfc4:	468b      	mov	fp, r1
 801bfc6:	f040 81f1 	bne.w	801c3ac <__ieee754_pow+0x6e4>
 801bfca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801c088 <__ieee754_pow+0x3c0>
 801bfce:	eeb0 8a47 	vmov.f32	s16, s14
 801bfd2:	eef0 8a67 	vmov.f32	s17, s15
 801bfd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bfda:	2600      	movs	r6, #0
 801bfdc:	4632      	mov	r2, r6
 801bfde:	463b      	mov	r3, r7
 801bfe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bfe4:	f7e4 f97a 	bl	80002dc <__aeabi_dsub>
 801bfe8:	4622      	mov	r2, r4
 801bfea:	462b      	mov	r3, r5
 801bfec:	f7e4 fb2e 	bl	800064c <__aeabi_dmul>
 801bff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bff4:	4680      	mov	r8, r0
 801bff6:	4689      	mov	r9, r1
 801bff8:	4650      	mov	r0, sl
 801bffa:	4659      	mov	r1, fp
 801bffc:	f7e4 fb26 	bl	800064c <__aeabi_dmul>
 801c000:	4602      	mov	r2, r0
 801c002:	460b      	mov	r3, r1
 801c004:	4640      	mov	r0, r8
 801c006:	4649      	mov	r1, r9
 801c008:	f7e4 f96a 	bl	80002e0 <__adddf3>
 801c00c:	4632      	mov	r2, r6
 801c00e:	463b      	mov	r3, r7
 801c010:	4680      	mov	r8, r0
 801c012:	4689      	mov	r9, r1
 801c014:	4620      	mov	r0, r4
 801c016:	4629      	mov	r1, r5
 801c018:	f7e4 fb18 	bl	800064c <__aeabi_dmul>
 801c01c:	460b      	mov	r3, r1
 801c01e:	4604      	mov	r4, r0
 801c020:	460d      	mov	r5, r1
 801c022:	4602      	mov	r2, r0
 801c024:	4649      	mov	r1, r9
 801c026:	4640      	mov	r0, r8
 801c028:	f7e4 f95a 	bl	80002e0 <__adddf3>
 801c02c:	4b1d      	ldr	r3, [pc, #116]	; (801c0a4 <__ieee754_pow+0x3dc>)
 801c02e:	4299      	cmp	r1, r3
 801c030:	ec45 4b19 	vmov	d9, r4, r5
 801c034:	4606      	mov	r6, r0
 801c036:	460f      	mov	r7, r1
 801c038:	468b      	mov	fp, r1
 801c03a:	f340 82fe 	ble.w	801c63a <__ieee754_pow+0x972>
 801c03e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801c042:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801c046:	4303      	orrs	r3, r0
 801c048:	f000 81f0 	beq.w	801c42c <__ieee754_pow+0x764>
 801c04c:	a310      	add	r3, pc, #64	; (adr r3, 801c090 <__ieee754_pow+0x3c8>)
 801c04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c052:	ec51 0b18 	vmov	r0, r1, d8
 801c056:	f7e4 faf9 	bl	800064c <__aeabi_dmul>
 801c05a:	a30d      	add	r3, pc, #52	; (adr r3, 801c090 <__ieee754_pow+0x3c8>)
 801c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c060:	e6cb      	b.n	801bdfa <__ieee754_pow+0x132>
 801c062:	bf00      	nop
 801c064:	f3af 8000 	nop.w
 801c068:	60000000 	.word	0x60000000
 801c06c:	3ff71547 	.word	0x3ff71547
 801c070:	f85ddf44 	.word	0xf85ddf44
 801c074:	3e54ae0b 	.word	0x3e54ae0b
 801c078:	55555555 	.word	0x55555555
 801c07c:	3fd55555 	.word	0x3fd55555
 801c080:	652b82fe 	.word	0x652b82fe
 801c084:	3ff71547 	.word	0x3ff71547
 801c088:	00000000 	.word	0x00000000
 801c08c:	bff00000 	.word	0xbff00000
 801c090:	8800759c 	.word	0x8800759c
 801c094:	7e37e43c 	.word	0x7e37e43c
 801c098:	3ff00000 	.word	0x3ff00000
 801c09c:	3fd00000 	.word	0x3fd00000
 801c0a0:	3fe00000 	.word	0x3fe00000
 801c0a4:	408fffff 	.word	0x408fffff
 801c0a8:	4bd7      	ldr	r3, [pc, #860]	; (801c408 <__ieee754_pow+0x740>)
 801c0aa:	ea03 0309 	and.w	r3, r3, r9
 801c0ae:	2200      	movs	r2, #0
 801c0b0:	b92b      	cbnz	r3, 801c0be <__ieee754_pow+0x3f6>
 801c0b2:	4bd6      	ldr	r3, [pc, #856]	; (801c40c <__ieee754_pow+0x744>)
 801c0b4:	f7e4 faca 	bl	800064c <__aeabi_dmul>
 801c0b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801c0bc:	460c      	mov	r4, r1
 801c0be:	1523      	asrs	r3, r4, #20
 801c0c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c0c4:	4413      	add	r3, r2
 801c0c6:	9309      	str	r3, [sp, #36]	; 0x24
 801c0c8:	4bd1      	ldr	r3, [pc, #836]	; (801c410 <__ieee754_pow+0x748>)
 801c0ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c0ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801c0d2:	429c      	cmp	r4, r3
 801c0d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801c0d8:	dd08      	ble.n	801c0ec <__ieee754_pow+0x424>
 801c0da:	4bce      	ldr	r3, [pc, #824]	; (801c414 <__ieee754_pow+0x74c>)
 801c0dc:	429c      	cmp	r4, r3
 801c0de:	f340 8163 	ble.w	801c3a8 <__ieee754_pow+0x6e0>
 801c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0e4:	3301      	adds	r3, #1
 801c0e6:	9309      	str	r3, [sp, #36]	; 0x24
 801c0e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801c0ec:	2400      	movs	r4, #0
 801c0ee:	00e3      	lsls	r3, r4, #3
 801c0f0:	930b      	str	r3, [sp, #44]	; 0x2c
 801c0f2:	4bc9      	ldr	r3, [pc, #804]	; (801c418 <__ieee754_pow+0x750>)
 801c0f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c0f8:	ed93 7b00 	vldr	d7, [r3]
 801c0fc:	4629      	mov	r1, r5
 801c0fe:	ec53 2b17 	vmov	r2, r3, d7
 801c102:	eeb0 8a47 	vmov.f32	s16, s14
 801c106:	eef0 8a67 	vmov.f32	s17, s15
 801c10a:	4682      	mov	sl, r0
 801c10c:	f7e4 f8e6 	bl	80002dc <__aeabi_dsub>
 801c110:	4652      	mov	r2, sl
 801c112:	4606      	mov	r6, r0
 801c114:	460f      	mov	r7, r1
 801c116:	462b      	mov	r3, r5
 801c118:	ec51 0b18 	vmov	r0, r1, d8
 801c11c:	f7e4 f8e0 	bl	80002e0 <__adddf3>
 801c120:	4602      	mov	r2, r0
 801c122:	460b      	mov	r3, r1
 801c124:	2000      	movs	r0, #0
 801c126:	49bd      	ldr	r1, [pc, #756]	; (801c41c <__ieee754_pow+0x754>)
 801c128:	f7e4 fbba 	bl	80008a0 <__aeabi_ddiv>
 801c12c:	ec41 0b19 	vmov	d9, r0, r1
 801c130:	4602      	mov	r2, r0
 801c132:	460b      	mov	r3, r1
 801c134:	4630      	mov	r0, r6
 801c136:	4639      	mov	r1, r7
 801c138:	f7e4 fa88 	bl	800064c <__aeabi_dmul>
 801c13c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c140:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c144:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c148:	2300      	movs	r3, #0
 801c14a:	9304      	str	r3, [sp, #16]
 801c14c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c150:	46ab      	mov	fp, r5
 801c152:	106d      	asrs	r5, r5, #1
 801c154:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801c158:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801c15c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801c160:	2200      	movs	r2, #0
 801c162:	4640      	mov	r0, r8
 801c164:	4649      	mov	r1, r9
 801c166:	4614      	mov	r4, r2
 801c168:	461d      	mov	r5, r3
 801c16a:	f7e4 fa6f 	bl	800064c <__aeabi_dmul>
 801c16e:	4602      	mov	r2, r0
 801c170:	460b      	mov	r3, r1
 801c172:	4630      	mov	r0, r6
 801c174:	4639      	mov	r1, r7
 801c176:	f7e4 f8b1 	bl	80002dc <__aeabi_dsub>
 801c17a:	ec53 2b18 	vmov	r2, r3, d8
 801c17e:	4606      	mov	r6, r0
 801c180:	460f      	mov	r7, r1
 801c182:	4620      	mov	r0, r4
 801c184:	4629      	mov	r1, r5
 801c186:	f7e4 f8a9 	bl	80002dc <__aeabi_dsub>
 801c18a:	4602      	mov	r2, r0
 801c18c:	460b      	mov	r3, r1
 801c18e:	4650      	mov	r0, sl
 801c190:	4659      	mov	r1, fp
 801c192:	f7e4 f8a3 	bl	80002dc <__aeabi_dsub>
 801c196:	4642      	mov	r2, r8
 801c198:	464b      	mov	r3, r9
 801c19a:	f7e4 fa57 	bl	800064c <__aeabi_dmul>
 801c19e:	4602      	mov	r2, r0
 801c1a0:	460b      	mov	r3, r1
 801c1a2:	4630      	mov	r0, r6
 801c1a4:	4639      	mov	r1, r7
 801c1a6:	f7e4 f899 	bl	80002dc <__aeabi_dsub>
 801c1aa:	ec53 2b19 	vmov	r2, r3, d9
 801c1ae:	f7e4 fa4d 	bl	800064c <__aeabi_dmul>
 801c1b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c1b6:	ec41 0b18 	vmov	d8, r0, r1
 801c1ba:	4610      	mov	r0, r2
 801c1bc:	4619      	mov	r1, r3
 801c1be:	f7e4 fa45 	bl	800064c <__aeabi_dmul>
 801c1c2:	a37d      	add	r3, pc, #500	; (adr r3, 801c3b8 <__ieee754_pow+0x6f0>)
 801c1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1c8:	4604      	mov	r4, r0
 801c1ca:	460d      	mov	r5, r1
 801c1cc:	f7e4 fa3e 	bl	800064c <__aeabi_dmul>
 801c1d0:	a37b      	add	r3, pc, #492	; (adr r3, 801c3c0 <__ieee754_pow+0x6f8>)
 801c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1d6:	f7e4 f883 	bl	80002e0 <__adddf3>
 801c1da:	4622      	mov	r2, r4
 801c1dc:	462b      	mov	r3, r5
 801c1de:	f7e4 fa35 	bl	800064c <__aeabi_dmul>
 801c1e2:	a379      	add	r3, pc, #484	; (adr r3, 801c3c8 <__ieee754_pow+0x700>)
 801c1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1e8:	f7e4 f87a 	bl	80002e0 <__adddf3>
 801c1ec:	4622      	mov	r2, r4
 801c1ee:	462b      	mov	r3, r5
 801c1f0:	f7e4 fa2c 	bl	800064c <__aeabi_dmul>
 801c1f4:	a376      	add	r3, pc, #472	; (adr r3, 801c3d0 <__ieee754_pow+0x708>)
 801c1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1fa:	f7e4 f871 	bl	80002e0 <__adddf3>
 801c1fe:	4622      	mov	r2, r4
 801c200:	462b      	mov	r3, r5
 801c202:	f7e4 fa23 	bl	800064c <__aeabi_dmul>
 801c206:	a374      	add	r3, pc, #464	; (adr r3, 801c3d8 <__ieee754_pow+0x710>)
 801c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c20c:	f7e4 f868 	bl	80002e0 <__adddf3>
 801c210:	4622      	mov	r2, r4
 801c212:	462b      	mov	r3, r5
 801c214:	f7e4 fa1a 	bl	800064c <__aeabi_dmul>
 801c218:	a371      	add	r3, pc, #452	; (adr r3, 801c3e0 <__ieee754_pow+0x718>)
 801c21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c21e:	f7e4 f85f 	bl	80002e0 <__adddf3>
 801c222:	4622      	mov	r2, r4
 801c224:	4606      	mov	r6, r0
 801c226:	460f      	mov	r7, r1
 801c228:	462b      	mov	r3, r5
 801c22a:	4620      	mov	r0, r4
 801c22c:	4629      	mov	r1, r5
 801c22e:	f7e4 fa0d 	bl	800064c <__aeabi_dmul>
 801c232:	4602      	mov	r2, r0
 801c234:	460b      	mov	r3, r1
 801c236:	4630      	mov	r0, r6
 801c238:	4639      	mov	r1, r7
 801c23a:	f7e4 fa07 	bl	800064c <__aeabi_dmul>
 801c23e:	4642      	mov	r2, r8
 801c240:	4604      	mov	r4, r0
 801c242:	460d      	mov	r5, r1
 801c244:	464b      	mov	r3, r9
 801c246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c24a:	f7e4 f849 	bl	80002e0 <__adddf3>
 801c24e:	ec53 2b18 	vmov	r2, r3, d8
 801c252:	f7e4 f9fb 	bl	800064c <__aeabi_dmul>
 801c256:	4622      	mov	r2, r4
 801c258:	462b      	mov	r3, r5
 801c25a:	f7e4 f841 	bl	80002e0 <__adddf3>
 801c25e:	4642      	mov	r2, r8
 801c260:	4682      	mov	sl, r0
 801c262:	468b      	mov	fp, r1
 801c264:	464b      	mov	r3, r9
 801c266:	4640      	mov	r0, r8
 801c268:	4649      	mov	r1, r9
 801c26a:	f7e4 f9ef 	bl	800064c <__aeabi_dmul>
 801c26e:	4b6c      	ldr	r3, [pc, #432]	; (801c420 <__ieee754_pow+0x758>)
 801c270:	2200      	movs	r2, #0
 801c272:	4606      	mov	r6, r0
 801c274:	460f      	mov	r7, r1
 801c276:	f7e4 f833 	bl	80002e0 <__adddf3>
 801c27a:	4652      	mov	r2, sl
 801c27c:	465b      	mov	r3, fp
 801c27e:	f7e4 f82f 	bl	80002e0 <__adddf3>
 801c282:	9c04      	ldr	r4, [sp, #16]
 801c284:	460d      	mov	r5, r1
 801c286:	4622      	mov	r2, r4
 801c288:	460b      	mov	r3, r1
 801c28a:	4640      	mov	r0, r8
 801c28c:	4649      	mov	r1, r9
 801c28e:	f7e4 f9dd 	bl	800064c <__aeabi_dmul>
 801c292:	4b63      	ldr	r3, [pc, #396]	; (801c420 <__ieee754_pow+0x758>)
 801c294:	4680      	mov	r8, r0
 801c296:	4689      	mov	r9, r1
 801c298:	2200      	movs	r2, #0
 801c29a:	4620      	mov	r0, r4
 801c29c:	4629      	mov	r1, r5
 801c29e:	f7e4 f81d 	bl	80002dc <__aeabi_dsub>
 801c2a2:	4632      	mov	r2, r6
 801c2a4:	463b      	mov	r3, r7
 801c2a6:	f7e4 f819 	bl	80002dc <__aeabi_dsub>
 801c2aa:	4602      	mov	r2, r0
 801c2ac:	460b      	mov	r3, r1
 801c2ae:	4650      	mov	r0, sl
 801c2b0:	4659      	mov	r1, fp
 801c2b2:	f7e4 f813 	bl	80002dc <__aeabi_dsub>
 801c2b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c2ba:	f7e4 f9c7 	bl	800064c <__aeabi_dmul>
 801c2be:	4622      	mov	r2, r4
 801c2c0:	4606      	mov	r6, r0
 801c2c2:	460f      	mov	r7, r1
 801c2c4:	462b      	mov	r3, r5
 801c2c6:	ec51 0b18 	vmov	r0, r1, d8
 801c2ca:	f7e4 f9bf 	bl	800064c <__aeabi_dmul>
 801c2ce:	4602      	mov	r2, r0
 801c2d0:	460b      	mov	r3, r1
 801c2d2:	4630      	mov	r0, r6
 801c2d4:	4639      	mov	r1, r7
 801c2d6:	f7e4 f803 	bl	80002e0 <__adddf3>
 801c2da:	4606      	mov	r6, r0
 801c2dc:	460f      	mov	r7, r1
 801c2de:	4602      	mov	r2, r0
 801c2e0:	460b      	mov	r3, r1
 801c2e2:	4640      	mov	r0, r8
 801c2e4:	4649      	mov	r1, r9
 801c2e6:	f7e3 fffb 	bl	80002e0 <__adddf3>
 801c2ea:	9c04      	ldr	r4, [sp, #16]
 801c2ec:	a33e      	add	r3, pc, #248	; (adr r3, 801c3e8 <__ieee754_pow+0x720>)
 801c2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2f2:	4620      	mov	r0, r4
 801c2f4:	460d      	mov	r5, r1
 801c2f6:	f7e4 f9a9 	bl	800064c <__aeabi_dmul>
 801c2fa:	4642      	mov	r2, r8
 801c2fc:	ec41 0b18 	vmov	d8, r0, r1
 801c300:	464b      	mov	r3, r9
 801c302:	4620      	mov	r0, r4
 801c304:	4629      	mov	r1, r5
 801c306:	f7e3 ffe9 	bl	80002dc <__aeabi_dsub>
 801c30a:	4602      	mov	r2, r0
 801c30c:	460b      	mov	r3, r1
 801c30e:	4630      	mov	r0, r6
 801c310:	4639      	mov	r1, r7
 801c312:	f7e3 ffe3 	bl	80002dc <__aeabi_dsub>
 801c316:	a336      	add	r3, pc, #216	; (adr r3, 801c3f0 <__ieee754_pow+0x728>)
 801c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c31c:	f7e4 f996 	bl	800064c <__aeabi_dmul>
 801c320:	a335      	add	r3, pc, #212	; (adr r3, 801c3f8 <__ieee754_pow+0x730>)
 801c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c326:	4606      	mov	r6, r0
 801c328:	460f      	mov	r7, r1
 801c32a:	4620      	mov	r0, r4
 801c32c:	4629      	mov	r1, r5
 801c32e:	f7e4 f98d 	bl	800064c <__aeabi_dmul>
 801c332:	4602      	mov	r2, r0
 801c334:	460b      	mov	r3, r1
 801c336:	4630      	mov	r0, r6
 801c338:	4639      	mov	r1, r7
 801c33a:	f7e3 ffd1 	bl	80002e0 <__adddf3>
 801c33e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c340:	4b38      	ldr	r3, [pc, #224]	; (801c424 <__ieee754_pow+0x75c>)
 801c342:	4413      	add	r3, r2
 801c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c348:	f7e3 ffca 	bl	80002e0 <__adddf3>
 801c34c:	4682      	mov	sl, r0
 801c34e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c350:	468b      	mov	fp, r1
 801c352:	f7e4 f911 	bl	8000578 <__aeabi_i2d>
 801c356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c358:	4b33      	ldr	r3, [pc, #204]	; (801c428 <__ieee754_pow+0x760>)
 801c35a:	4413      	add	r3, r2
 801c35c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c360:	4606      	mov	r6, r0
 801c362:	460f      	mov	r7, r1
 801c364:	4652      	mov	r2, sl
 801c366:	465b      	mov	r3, fp
 801c368:	ec51 0b18 	vmov	r0, r1, d8
 801c36c:	f7e3 ffb8 	bl	80002e0 <__adddf3>
 801c370:	4642      	mov	r2, r8
 801c372:	464b      	mov	r3, r9
 801c374:	f7e3 ffb4 	bl	80002e0 <__adddf3>
 801c378:	4632      	mov	r2, r6
 801c37a:	463b      	mov	r3, r7
 801c37c:	f7e3 ffb0 	bl	80002e0 <__adddf3>
 801c380:	9c04      	ldr	r4, [sp, #16]
 801c382:	4632      	mov	r2, r6
 801c384:	463b      	mov	r3, r7
 801c386:	4620      	mov	r0, r4
 801c388:	460d      	mov	r5, r1
 801c38a:	f7e3 ffa7 	bl	80002dc <__aeabi_dsub>
 801c38e:	4642      	mov	r2, r8
 801c390:	464b      	mov	r3, r9
 801c392:	f7e3 ffa3 	bl	80002dc <__aeabi_dsub>
 801c396:	ec53 2b18 	vmov	r2, r3, d8
 801c39a:	f7e3 ff9f 	bl	80002dc <__aeabi_dsub>
 801c39e:	4602      	mov	r2, r0
 801c3a0:	460b      	mov	r3, r1
 801c3a2:	4650      	mov	r0, sl
 801c3a4:	4659      	mov	r1, fp
 801c3a6:	e606      	b.n	801bfb6 <__ieee754_pow+0x2ee>
 801c3a8:	2401      	movs	r4, #1
 801c3aa:	e6a0      	b.n	801c0ee <__ieee754_pow+0x426>
 801c3ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801c400 <__ieee754_pow+0x738>
 801c3b0:	e60d      	b.n	801bfce <__ieee754_pow+0x306>
 801c3b2:	bf00      	nop
 801c3b4:	f3af 8000 	nop.w
 801c3b8:	4a454eef 	.word	0x4a454eef
 801c3bc:	3fca7e28 	.word	0x3fca7e28
 801c3c0:	93c9db65 	.word	0x93c9db65
 801c3c4:	3fcd864a 	.word	0x3fcd864a
 801c3c8:	a91d4101 	.word	0xa91d4101
 801c3cc:	3fd17460 	.word	0x3fd17460
 801c3d0:	518f264d 	.word	0x518f264d
 801c3d4:	3fd55555 	.word	0x3fd55555
 801c3d8:	db6fabff 	.word	0xdb6fabff
 801c3dc:	3fdb6db6 	.word	0x3fdb6db6
 801c3e0:	33333303 	.word	0x33333303
 801c3e4:	3fe33333 	.word	0x3fe33333
 801c3e8:	e0000000 	.word	0xe0000000
 801c3ec:	3feec709 	.word	0x3feec709
 801c3f0:	dc3a03fd 	.word	0xdc3a03fd
 801c3f4:	3feec709 	.word	0x3feec709
 801c3f8:	145b01f5 	.word	0x145b01f5
 801c3fc:	be3e2fe0 	.word	0xbe3e2fe0
 801c400:	00000000 	.word	0x00000000
 801c404:	3ff00000 	.word	0x3ff00000
 801c408:	7ff00000 	.word	0x7ff00000
 801c40c:	43400000 	.word	0x43400000
 801c410:	0003988e 	.word	0x0003988e
 801c414:	000bb679 	.word	0x000bb679
 801c418:	0801fd08 	.word	0x0801fd08
 801c41c:	3ff00000 	.word	0x3ff00000
 801c420:	40080000 	.word	0x40080000
 801c424:	0801fd28 	.word	0x0801fd28
 801c428:	0801fd18 	.word	0x0801fd18
 801c42c:	a3b5      	add	r3, pc, #724	; (adr r3, 801c704 <__ieee754_pow+0xa3c>)
 801c42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c432:	4640      	mov	r0, r8
 801c434:	4649      	mov	r1, r9
 801c436:	f7e3 ff53 	bl	80002e0 <__adddf3>
 801c43a:	4622      	mov	r2, r4
 801c43c:	ec41 0b1a 	vmov	d10, r0, r1
 801c440:	462b      	mov	r3, r5
 801c442:	4630      	mov	r0, r6
 801c444:	4639      	mov	r1, r7
 801c446:	f7e3 ff49 	bl	80002dc <__aeabi_dsub>
 801c44a:	4602      	mov	r2, r0
 801c44c:	460b      	mov	r3, r1
 801c44e:	ec51 0b1a 	vmov	r0, r1, d10
 801c452:	f7e4 fb8b 	bl	8000b6c <__aeabi_dcmpgt>
 801c456:	2800      	cmp	r0, #0
 801c458:	f47f adf8 	bne.w	801c04c <__ieee754_pow+0x384>
 801c45c:	4aa4      	ldr	r2, [pc, #656]	; (801c6f0 <__ieee754_pow+0xa28>)
 801c45e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c462:	4293      	cmp	r3, r2
 801c464:	f340 810b 	ble.w	801c67e <__ieee754_pow+0x9b6>
 801c468:	151b      	asrs	r3, r3, #20
 801c46a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801c46e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801c472:	fa4a f303 	asr.w	r3, sl, r3
 801c476:	445b      	add	r3, fp
 801c478:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801c47c:	4e9d      	ldr	r6, [pc, #628]	; (801c6f4 <__ieee754_pow+0xa2c>)
 801c47e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801c482:	4116      	asrs	r6, r2
 801c484:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801c488:	2000      	movs	r0, #0
 801c48a:	ea23 0106 	bic.w	r1, r3, r6
 801c48e:	f1c2 0214 	rsb	r2, r2, #20
 801c492:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801c496:	fa4a fa02 	asr.w	sl, sl, r2
 801c49a:	f1bb 0f00 	cmp.w	fp, #0
 801c49e:	4602      	mov	r2, r0
 801c4a0:	460b      	mov	r3, r1
 801c4a2:	4620      	mov	r0, r4
 801c4a4:	4629      	mov	r1, r5
 801c4a6:	bfb8      	it	lt
 801c4a8:	f1ca 0a00 	rsblt	sl, sl, #0
 801c4ac:	f7e3 ff16 	bl	80002dc <__aeabi_dsub>
 801c4b0:	ec41 0b19 	vmov	d9, r0, r1
 801c4b4:	4642      	mov	r2, r8
 801c4b6:	464b      	mov	r3, r9
 801c4b8:	ec51 0b19 	vmov	r0, r1, d9
 801c4bc:	f7e3 ff10 	bl	80002e0 <__adddf3>
 801c4c0:	2400      	movs	r4, #0
 801c4c2:	a379      	add	r3, pc, #484	; (adr r3, 801c6a8 <__ieee754_pow+0x9e0>)
 801c4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4c8:	4620      	mov	r0, r4
 801c4ca:	460d      	mov	r5, r1
 801c4cc:	f7e4 f8be 	bl	800064c <__aeabi_dmul>
 801c4d0:	ec53 2b19 	vmov	r2, r3, d9
 801c4d4:	4606      	mov	r6, r0
 801c4d6:	460f      	mov	r7, r1
 801c4d8:	4620      	mov	r0, r4
 801c4da:	4629      	mov	r1, r5
 801c4dc:	f7e3 fefe 	bl	80002dc <__aeabi_dsub>
 801c4e0:	4602      	mov	r2, r0
 801c4e2:	460b      	mov	r3, r1
 801c4e4:	4640      	mov	r0, r8
 801c4e6:	4649      	mov	r1, r9
 801c4e8:	f7e3 fef8 	bl	80002dc <__aeabi_dsub>
 801c4ec:	a370      	add	r3, pc, #448	; (adr r3, 801c6b0 <__ieee754_pow+0x9e8>)
 801c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4f2:	f7e4 f8ab 	bl	800064c <__aeabi_dmul>
 801c4f6:	a370      	add	r3, pc, #448	; (adr r3, 801c6b8 <__ieee754_pow+0x9f0>)
 801c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4fc:	4680      	mov	r8, r0
 801c4fe:	4689      	mov	r9, r1
 801c500:	4620      	mov	r0, r4
 801c502:	4629      	mov	r1, r5
 801c504:	f7e4 f8a2 	bl	800064c <__aeabi_dmul>
 801c508:	4602      	mov	r2, r0
 801c50a:	460b      	mov	r3, r1
 801c50c:	4640      	mov	r0, r8
 801c50e:	4649      	mov	r1, r9
 801c510:	f7e3 fee6 	bl	80002e0 <__adddf3>
 801c514:	4604      	mov	r4, r0
 801c516:	460d      	mov	r5, r1
 801c518:	4602      	mov	r2, r0
 801c51a:	460b      	mov	r3, r1
 801c51c:	4630      	mov	r0, r6
 801c51e:	4639      	mov	r1, r7
 801c520:	f7e3 fede 	bl	80002e0 <__adddf3>
 801c524:	4632      	mov	r2, r6
 801c526:	463b      	mov	r3, r7
 801c528:	4680      	mov	r8, r0
 801c52a:	4689      	mov	r9, r1
 801c52c:	f7e3 fed6 	bl	80002dc <__aeabi_dsub>
 801c530:	4602      	mov	r2, r0
 801c532:	460b      	mov	r3, r1
 801c534:	4620      	mov	r0, r4
 801c536:	4629      	mov	r1, r5
 801c538:	f7e3 fed0 	bl	80002dc <__aeabi_dsub>
 801c53c:	4642      	mov	r2, r8
 801c53e:	4606      	mov	r6, r0
 801c540:	460f      	mov	r7, r1
 801c542:	464b      	mov	r3, r9
 801c544:	4640      	mov	r0, r8
 801c546:	4649      	mov	r1, r9
 801c548:	f7e4 f880 	bl	800064c <__aeabi_dmul>
 801c54c:	a35c      	add	r3, pc, #368	; (adr r3, 801c6c0 <__ieee754_pow+0x9f8>)
 801c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c552:	4604      	mov	r4, r0
 801c554:	460d      	mov	r5, r1
 801c556:	f7e4 f879 	bl	800064c <__aeabi_dmul>
 801c55a:	a35b      	add	r3, pc, #364	; (adr r3, 801c6c8 <__ieee754_pow+0xa00>)
 801c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c560:	f7e3 febc 	bl	80002dc <__aeabi_dsub>
 801c564:	4622      	mov	r2, r4
 801c566:	462b      	mov	r3, r5
 801c568:	f7e4 f870 	bl	800064c <__aeabi_dmul>
 801c56c:	a358      	add	r3, pc, #352	; (adr r3, 801c6d0 <__ieee754_pow+0xa08>)
 801c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c572:	f7e3 feb5 	bl	80002e0 <__adddf3>
 801c576:	4622      	mov	r2, r4
 801c578:	462b      	mov	r3, r5
 801c57a:	f7e4 f867 	bl	800064c <__aeabi_dmul>
 801c57e:	a356      	add	r3, pc, #344	; (adr r3, 801c6d8 <__ieee754_pow+0xa10>)
 801c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c584:	f7e3 feaa 	bl	80002dc <__aeabi_dsub>
 801c588:	4622      	mov	r2, r4
 801c58a:	462b      	mov	r3, r5
 801c58c:	f7e4 f85e 	bl	800064c <__aeabi_dmul>
 801c590:	a353      	add	r3, pc, #332	; (adr r3, 801c6e0 <__ieee754_pow+0xa18>)
 801c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c596:	f7e3 fea3 	bl	80002e0 <__adddf3>
 801c59a:	4622      	mov	r2, r4
 801c59c:	462b      	mov	r3, r5
 801c59e:	f7e4 f855 	bl	800064c <__aeabi_dmul>
 801c5a2:	4602      	mov	r2, r0
 801c5a4:	460b      	mov	r3, r1
 801c5a6:	4640      	mov	r0, r8
 801c5a8:	4649      	mov	r1, r9
 801c5aa:	f7e3 fe97 	bl	80002dc <__aeabi_dsub>
 801c5ae:	4604      	mov	r4, r0
 801c5b0:	460d      	mov	r5, r1
 801c5b2:	4602      	mov	r2, r0
 801c5b4:	460b      	mov	r3, r1
 801c5b6:	4640      	mov	r0, r8
 801c5b8:	4649      	mov	r1, r9
 801c5ba:	f7e4 f847 	bl	800064c <__aeabi_dmul>
 801c5be:	2200      	movs	r2, #0
 801c5c0:	ec41 0b19 	vmov	d9, r0, r1
 801c5c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	4629      	mov	r1, r5
 801c5cc:	f7e3 fe86 	bl	80002dc <__aeabi_dsub>
 801c5d0:	4602      	mov	r2, r0
 801c5d2:	460b      	mov	r3, r1
 801c5d4:	ec51 0b19 	vmov	r0, r1, d9
 801c5d8:	f7e4 f962 	bl	80008a0 <__aeabi_ddiv>
 801c5dc:	4632      	mov	r2, r6
 801c5de:	4604      	mov	r4, r0
 801c5e0:	460d      	mov	r5, r1
 801c5e2:	463b      	mov	r3, r7
 801c5e4:	4640      	mov	r0, r8
 801c5e6:	4649      	mov	r1, r9
 801c5e8:	f7e4 f830 	bl	800064c <__aeabi_dmul>
 801c5ec:	4632      	mov	r2, r6
 801c5ee:	463b      	mov	r3, r7
 801c5f0:	f7e3 fe76 	bl	80002e0 <__adddf3>
 801c5f4:	4602      	mov	r2, r0
 801c5f6:	460b      	mov	r3, r1
 801c5f8:	4620      	mov	r0, r4
 801c5fa:	4629      	mov	r1, r5
 801c5fc:	f7e3 fe6e 	bl	80002dc <__aeabi_dsub>
 801c600:	4642      	mov	r2, r8
 801c602:	464b      	mov	r3, r9
 801c604:	f7e3 fe6a 	bl	80002dc <__aeabi_dsub>
 801c608:	460b      	mov	r3, r1
 801c60a:	4602      	mov	r2, r0
 801c60c:	493a      	ldr	r1, [pc, #232]	; (801c6f8 <__ieee754_pow+0xa30>)
 801c60e:	2000      	movs	r0, #0
 801c610:	f7e3 fe64 	bl	80002dc <__aeabi_dsub>
 801c614:	e9cd 0100 	strd	r0, r1, [sp]
 801c618:	9b01      	ldr	r3, [sp, #4]
 801c61a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801c61e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c622:	da2f      	bge.n	801c684 <__ieee754_pow+0x9bc>
 801c624:	4650      	mov	r0, sl
 801c626:	ed9d 0b00 	vldr	d0, [sp]
 801c62a:	f000 f9cd 	bl	801c9c8 <scalbn>
 801c62e:	ec51 0b10 	vmov	r0, r1, d0
 801c632:	ec53 2b18 	vmov	r2, r3, d8
 801c636:	f7ff bbe0 	b.w	801bdfa <__ieee754_pow+0x132>
 801c63a:	4b30      	ldr	r3, [pc, #192]	; (801c6fc <__ieee754_pow+0xa34>)
 801c63c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c640:	429e      	cmp	r6, r3
 801c642:	f77f af0b 	ble.w	801c45c <__ieee754_pow+0x794>
 801c646:	4b2e      	ldr	r3, [pc, #184]	; (801c700 <__ieee754_pow+0xa38>)
 801c648:	440b      	add	r3, r1
 801c64a:	4303      	orrs	r3, r0
 801c64c:	d00b      	beq.n	801c666 <__ieee754_pow+0x99e>
 801c64e:	a326      	add	r3, pc, #152	; (adr r3, 801c6e8 <__ieee754_pow+0xa20>)
 801c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c654:	ec51 0b18 	vmov	r0, r1, d8
 801c658:	f7e3 fff8 	bl	800064c <__aeabi_dmul>
 801c65c:	a322      	add	r3, pc, #136	; (adr r3, 801c6e8 <__ieee754_pow+0xa20>)
 801c65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c662:	f7ff bbca 	b.w	801bdfa <__ieee754_pow+0x132>
 801c666:	4622      	mov	r2, r4
 801c668:	462b      	mov	r3, r5
 801c66a:	f7e3 fe37 	bl	80002dc <__aeabi_dsub>
 801c66e:	4642      	mov	r2, r8
 801c670:	464b      	mov	r3, r9
 801c672:	f7e4 fa71 	bl	8000b58 <__aeabi_dcmpge>
 801c676:	2800      	cmp	r0, #0
 801c678:	f43f aef0 	beq.w	801c45c <__ieee754_pow+0x794>
 801c67c:	e7e7      	b.n	801c64e <__ieee754_pow+0x986>
 801c67e:	f04f 0a00 	mov.w	sl, #0
 801c682:	e717      	b.n	801c4b4 <__ieee754_pow+0x7ec>
 801c684:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c688:	4619      	mov	r1, r3
 801c68a:	e7d2      	b.n	801c632 <__ieee754_pow+0x96a>
 801c68c:	491a      	ldr	r1, [pc, #104]	; (801c6f8 <__ieee754_pow+0xa30>)
 801c68e:	2000      	movs	r0, #0
 801c690:	f7ff bb9e 	b.w	801bdd0 <__ieee754_pow+0x108>
 801c694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c698:	f7ff bb9a 	b.w	801bdd0 <__ieee754_pow+0x108>
 801c69c:	9000      	str	r0, [sp, #0]
 801c69e:	f7ff bb76 	b.w	801bd8e <__ieee754_pow+0xc6>
 801c6a2:	2100      	movs	r1, #0
 801c6a4:	f7ff bb60 	b.w	801bd68 <__ieee754_pow+0xa0>
 801c6a8:	00000000 	.word	0x00000000
 801c6ac:	3fe62e43 	.word	0x3fe62e43
 801c6b0:	fefa39ef 	.word	0xfefa39ef
 801c6b4:	3fe62e42 	.word	0x3fe62e42
 801c6b8:	0ca86c39 	.word	0x0ca86c39
 801c6bc:	be205c61 	.word	0xbe205c61
 801c6c0:	72bea4d0 	.word	0x72bea4d0
 801c6c4:	3e663769 	.word	0x3e663769
 801c6c8:	c5d26bf1 	.word	0xc5d26bf1
 801c6cc:	3ebbbd41 	.word	0x3ebbbd41
 801c6d0:	af25de2c 	.word	0xaf25de2c
 801c6d4:	3f11566a 	.word	0x3f11566a
 801c6d8:	16bebd93 	.word	0x16bebd93
 801c6dc:	3f66c16c 	.word	0x3f66c16c
 801c6e0:	5555553e 	.word	0x5555553e
 801c6e4:	3fc55555 	.word	0x3fc55555
 801c6e8:	c2f8f359 	.word	0xc2f8f359
 801c6ec:	01a56e1f 	.word	0x01a56e1f
 801c6f0:	3fe00000 	.word	0x3fe00000
 801c6f4:	000fffff 	.word	0x000fffff
 801c6f8:	3ff00000 	.word	0x3ff00000
 801c6fc:	4090cbff 	.word	0x4090cbff
 801c700:	3f6f3400 	.word	0x3f6f3400
 801c704:	652b82fe 	.word	0x652b82fe
 801c708:	3c971547 	.word	0x3c971547

0801c70c <__ieee754_sqrt>:
 801c70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c710:	ec55 4b10 	vmov	r4, r5, d0
 801c714:	4e56      	ldr	r6, [pc, #344]	; (801c870 <__ieee754_sqrt+0x164>)
 801c716:	43ae      	bics	r6, r5
 801c718:	ee10 0a10 	vmov	r0, s0
 801c71c:	ee10 3a10 	vmov	r3, s0
 801c720:	4629      	mov	r1, r5
 801c722:	462a      	mov	r2, r5
 801c724:	d110      	bne.n	801c748 <__ieee754_sqrt+0x3c>
 801c726:	ee10 2a10 	vmov	r2, s0
 801c72a:	462b      	mov	r3, r5
 801c72c:	f7e3 ff8e 	bl	800064c <__aeabi_dmul>
 801c730:	4602      	mov	r2, r0
 801c732:	460b      	mov	r3, r1
 801c734:	4620      	mov	r0, r4
 801c736:	4629      	mov	r1, r5
 801c738:	f7e3 fdd2 	bl	80002e0 <__adddf3>
 801c73c:	4604      	mov	r4, r0
 801c73e:	460d      	mov	r5, r1
 801c740:	ec45 4b10 	vmov	d0, r4, r5
 801c744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c748:	2d00      	cmp	r5, #0
 801c74a:	dc10      	bgt.n	801c76e <__ieee754_sqrt+0x62>
 801c74c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c750:	4330      	orrs	r0, r6
 801c752:	d0f5      	beq.n	801c740 <__ieee754_sqrt+0x34>
 801c754:	b15d      	cbz	r5, 801c76e <__ieee754_sqrt+0x62>
 801c756:	ee10 2a10 	vmov	r2, s0
 801c75a:	462b      	mov	r3, r5
 801c75c:	ee10 0a10 	vmov	r0, s0
 801c760:	f7e3 fdbc 	bl	80002dc <__aeabi_dsub>
 801c764:	4602      	mov	r2, r0
 801c766:	460b      	mov	r3, r1
 801c768:	f7e4 f89a 	bl	80008a0 <__aeabi_ddiv>
 801c76c:	e7e6      	b.n	801c73c <__ieee754_sqrt+0x30>
 801c76e:	1509      	asrs	r1, r1, #20
 801c770:	d076      	beq.n	801c860 <__ieee754_sqrt+0x154>
 801c772:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c776:	07ce      	lsls	r6, r1, #31
 801c778:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801c77c:	bf5e      	ittt	pl
 801c77e:	0fda      	lsrpl	r2, r3, #31
 801c780:	005b      	lslpl	r3, r3, #1
 801c782:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801c786:	0fda      	lsrs	r2, r3, #31
 801c788:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801c78c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801c790:	2000      	movs	r0, #0
 801c792:	106d      	asrs	r5, r5, #1
 801c794:	005b      	lsls	r3, r3, #1
 801c796:	f04f 0e16 	mov.w	lr, #22
 801c79a:	4684      	mov	ip, r0
 801c79c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801c7a0:	eb0c 0401 	add.w	r4, ip, r1
 801c7a4:	4294      	cmp	r4, r2
 801c7a6:	bfde      	ittt	le
 801c7a8:	1b12      	suble	r2, r2, r4
 801c7aa:	eb04 0c01 	addle.w	ip, r4, r1
 801c7ae:	1840      	addle	r0, r0, r1
 801c7b0:	0052      	lsls	r2, r2, #1
 801c7b2:	f1be 0e01 	subs.w	lr, lr, #1
 801c7b6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801c7ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801c7be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c7c2:	d1ed      	bne.n	801c7a0 <__ieee754_sqrt+0x94>
 801c7c4:	4671      	mov	r1, lr
 801c7c6:	2720      	movs	r7, #32
 801c7c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801c7cc:	4562      	cmp	r2, ip
 801c7ce:	eb04 060e 	add.w	r6, r4, lr
 801c7d2:	dc02      	bgt.n	801c7da <__ieee754_sqrt+0xce>
 801c7d4:	d113      	bne.n	801c7fe <__ieee754_sqrt+0xf2>
 801c7d6:	429e      	cmp	r6, r3
 801c7d8:	d811      	bhi.n	801c7fe <__ieee754_sqrt+0xf2>
 801c7da:	2e00      	cmp	r6, #0
 801c7dc:	eb06 0e04 	add.w	lr, r6, r4
 801c7e0:	da43      	bge.n	801c86a <__ieee754_sqrt+0x15e>
 801c7e2:	f1be 0f00 	cmp.w	lr, #0
 801c7e6:	db40      	blt.n	801c86a <__ieee754_sqrt+0x15e>
 801c7e8:	f10c 0801 	add.w	r8, ip, #1
 801c7ec:	eba2 020c 	sub.w	r2, r2, ip
 801c7f0:	429e      	cmp	r6, r3
 801c7f2:	bf88      	it	hi
 801c7f4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c7f8:	1b9b      	subs	r3, r3, r6
 801c7fa:	4421      	add	r1, r4
 801c7fc:	46c4      	mov	ip, r8
 801c7fe:	0052      	lsls	r2, r2, #1
 801c800:	3f01      	subs	r7, #1
 801c802:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801c806:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801c80a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c80e:	d1dd      	bne.n	801c7cc <__ieee754_sqrt+0xc0>
 801c810:	4313      	orrs	r3, r2
 801c812:	d006      	beq.n	801c822 <__ieee754_sqrt+0x116>
 801c814:	1c4c      	adds	r4, r1, #1
 801c816:	bf13      	iteet	ne
 801c818:	3101      	addne	r1, #1
 801c81a:	3001      	addeq	r0, #1
 801c81c:	4639      	moveq	r1, r7
 801c81e:	f021 0101 	bicne.w	r1, r1, #1
 801c822:	1043      	asrs	r3, r0, #1
 801c824:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801c828:	0849      	lsrs	r1, r1, #1
 801c82a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801c82e:	07c2      	lsls	r2, r0, #31
 801c830:	bf48      	it	mi
 801c832:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801c836:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801c83a:	460c      	mov	r4, r1
 801c83c:	463d      	mov	r5, r7
 801c83e:	e77f      	b.n	801c740 <__ieee754_sqrt+0x34>
 801c840:	0ada      	lsrs	r2, r3, #11
 801c842:	3815      	subs	r0, #21
 801c844:	055b      	lsls	r3, r3, #21
 801c846:	2a00      	cmp	r2, #0
 801c848:	d0fa      	beq.n	801c840 <__ieee754_sqrt+0x134>
 801c84a:	02d7      	lsls	r7, r2, #11
 801c84c:	d50a      	bpl.n	801c864 <__ieee754_sqrt+0x158>
 801c84e:	f1c1 0420 	rsb	r4, r1, #32
 801c852:	fa23 f404 	lsr.w	r4, r3, r4
 801c856:	1e4d      	subs	r5, r1, #1
 801c858:	408b      	lsls	r3, r1
 801c85a:	4322      	orrs	r2, r4
 801c85c:	1b41      	subs	r1, r0, r5
 801c85e:	e788      	b.n	801c772 <__ieee754_sqrt+0x66>
 801c860:	4608      	mov	r0, r1
 801c862:	e7f0      	b.n	801c846 <__ieee754_sqrt+0x13a>
 801c864:	0052      	lsls	r2, r2, #1
 801c866:	3101      	adds	r1, #1
 801c868:	e7ef      	b.n	801c84a <__ieee754_sqrt+0x13e>
 801c86a:	46e0      	mov	r8, ip
 801c86c:	e7be      	b.n	801c7ec <__ieee754_sqrt+0xe0>
 801c86e:	bf00      	nop
 801c870:	7ff00000 	.word	0x7ff00000

0801c874 <fabs>:
 801c874:	ec51 0b10 	vmov	r0, r1, d0
 801c878:	ee10 2a10 	vmov	r2, s0
 801c87c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c880:	ec43 2b10 	vmov	d0, r2, r3
 801c884:	4770      	bx	lr

0801c886 <finite>:
 801c886:	b082      	sub	sp, #8
 801c888:	ed8d 0b00 	vstr	d0, [sp]
 801c88c:	9801      	ldr	r0, [sp, #4]
 801c88e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801c892:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c896:	0fc0      	lsrs	r0, r0, #31
 801c898:	b002      	add	sp, #8
 801c89a:	4770      	bx	lr
 801c89c:	0000      	movs	r0, r0
	...

0801c8a0 <nan>:
 801c8a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c8a8 <nan+0x8>
 801c8a4:	4770      	bx	lr
 801c8a6:	bf00      	nop
 801c8a8:	00000000 	.word	0x00000000
 801c8ac:	7ff80000 	.word	0x7ff80000

0801c8b0 <rint>:
 801c8b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c8b2:	ec51 0b10 	vmov	r0, r1, d0
 801c8b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c8ba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801c8be:	2e13      	cmp	r6, #19
 801c8c0:	ee10 4a10 	vmov	r4, s0
 801c8c4:	460b      	mov	r3, r1
 801c8c6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801c8ca:	dc58      	bgt.n	801c97e <rint+0xce>
 801c8cc:	2e00      	cmp	r6, #0
 801c8ce:	da2b      	bge.n	801c928 <rint+0x78>
 801c8d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801c8d4:	4302      	orrs	r2, r0
 801c8d6:	d023      	beq.n	801c920 <rint+0x70>
 801c8d8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801c8dc:	4302      	orrs	r2, r0
 801c8de:	4254      	negs	r4, r2
 801c8e0:	4314      	orrs	r4, r2
 801c8e2:	0c4b      	lsrs	r3, r1, #17
 801c8e4:	0b24      	lsrs	r4, r4, #12
 801c8e6:	045b      	lsls	r3, r3, #17
 801c8e8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801c8ec:	ea44 0103 	orr.w	r1, r4, r3
 801c8f0:	4b32      	ldr	r3, [pc, #200]	; (801c9bc <rint+0x10c>)
 801c8f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c8f6:	e9d3 6700 	ldrd	r6, r7, [r3]
 801c8fa:	4602      	mov	r2, r0
 801c8fc:	460b      	mov	r3, r1
 801c8fe:	4630      	mov	r0, r6
 801c900:	4639      	mov	r1, r7
 801c902:	f7e3 fced 	bl	80002e0 <__adddf3>
 801c906:	e9cd 0100 	strd	r0, r1, [sp]
 801c90a:	463b      	mov	r3, r7
 801c90c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c910:	4632      	mov	r2, r6
 801c912:	f7e3 fce3 	bl	80002dc <__aeabi_dsub>
 801c916:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c91a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801c91e:	4639      	mov	r1, r7
 801c920:	ec41 0b10 	vmov	d0, r0, r1
 801c924:	b003      	add	sp, #12
 801c926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c928:	4a25      	ldr	r2, [pc, #148]	; (801c9c0 <rint+0x110>)
 801c92a:	4132      	asrs	r2, r6
 801c92c:	ea01 0702 	and.w	r7, r1, r2
 801c930:	4307      	orrs	r7, r0
 801c932:	d0f5      	beq.n	801c920 <rint+0x70>
 801c934:	0851      	lsrs	r1, r2, #1
 801c936:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801c93a:	4314      	orrs	r4, r2
 801c93c:	d00c      	beq.n	801c958 <rint+0xa8>
 801c93e:	ea23 0201 	bic.w	r2, r3, r1
 801c942:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c946:	2e13      	cmp	r6, #19
 801c948:	fa43 f606 	asr.w	r6, r3, r6
 801c94c:	bf0c      	ite	eq
 801c94e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801c952:	2400      	movne	r4, #0
 801c954:	ea42 0306 	orr.w	r3, r2, r6
 801c958:	4918      	ldr	r1, [pc, #96]	; (801c9bc <rint+0x10c>)
 801c95a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801c95e:	4622      	mov	r2, r4
 801c960:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c964:	4620      	mov	r0, r4
 801c966:	4629      	mov	r1, r5
 801c968:	f7e3 fcba 	bl	80002e0 <__adddf3>
 801c96c:	e9cd 0100 	strd	r0, r1, [sp]
 801c970:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c974:	4622      	mov	r2, r4
 801c976:	462b      	mov	r3, r5
 801c978:	f7e3 fcb0 	bl	80002dc <__aeabi_dsub>
 801c97c:	e7d0      	b.n	801c920 <rint+0x70>
 801c97e:	2e33      	cmp	r6, #51	; 0x33
 801c980:	dd07      	ble.n	801c992 <rint+0xe2>
 801c982:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c986:	d1cb      	bne.n	801c920 <rint+0x70>
 801c988:	ee10 2a10 	vmov	r2, s0
 801c98c:	f7e3 fca8 	bl	80002e0 <__adddf3>
 801c990:	e7c6      	b.n	801c920 <rint+0x70>
 801c992:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801c996:	f04f 36ff 	mov.w	r6, #4294967295
 801c99a:	40d6      	lsrs	r6, r2
 801c99c:	4230      	tst	r0, r6
 801c99e:	d0bf      	beq.n	801c920 <rint+0x70>
 801c9a0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801c9a4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801c9a8:	bf1f      	itttt	ne
 801c9aa:	ea24 0101 	bicne.w	r1, r4, r1
 801c9ae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801c9b2:	fa44 f202 	asrne.w	r2, r4, r2
 801c9b6:	ea41 0402 	orrne.w	r4, r1, r2
 801c9ba:	e7cd      	b.n	801c958 <rint+0xa8>
 801c9bc:	0801fd38 	.word	0x0801fd38
 801c9c0:	000fffff 	.word	0x000fffff
 801c9c4:	00000000 	.word	0x00000000

0801c9c8 <scalbn>:
 801c9c8:	b570      	push	{r4, r5, r6, lr}
 801c9ca:	ec55 4b10 	vmov	r4, r5, d0
 801c9ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c9d2:	4606      	mov	r6, r0
 801c9d4:	462b      	mov	r3, r5
 801c9d6:	b99a      	cbnz	r2, 801ca00 <scalbn+0x38>
 801c9d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c9dc:	4323      	orrs	r3, r4
 801c9de:	d036      	beq.n	801ca4e <scalbn+0x86>
 801c9e0:	4b39      	ldr	r3, [pc, #228]	; (801cac8 <scalbn+0x100>)
 801c9e2:	4629      	mov	r1, r5
 801c9e4:	ee10 0a10 	vmov	r0, s0
 801c9e8:	2200      	movs	r2, #0
 801c9ea:	f7e3 fe2f 	bl	800064c <__aeabi_dmul>
 801c9ee:	4b37      	ldr	r3, [pc, #220]	; (801cacc <scalbn+0x104>)
 801c9f0:	429e      	cmp	r6, r3
 801c9f2:	4604      	mov	r4, r0
 801c9f4:	460d      	mov	r5, r1
 801c9f6:	da10      	bge.n	801ca1a <scalbn+0x52>
 801c9f8:	a32b      	add	r3, pc, #172	; (adr r3, 801caa8 <scalbn+0xe0>)
 801c9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9fe:	e03a      	b.n	801ca76 <scalbn+0xae>
 801ca00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ca04:	428a      	cmp	r2, r1
 801ca06:	d10c      	bne.n	801ca22 <scalbn+0x5a>
 801ca08:	ee10 2a10 	vmov	r2, s0
 801ca0c:	4620      	mov	r0, r4
 801ca0e:	4629      	mov	r1, r5
 801ca10:	f7e3 fc66 	bl	80002e0 <__adddf3>
 801ca14:	4604      	mov	r4, r0
 801ca16:	460d      	mov	r5, r1
 801ca18:	e019      	b.n	801ca4e <scalbn+0x86>
 801ca1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ca1e:	460b      	mov	r3, r1
 801ca20:	3a36      	subs	r2, #54	; 0x36
 801ca22:	4432      	add	r2, r6
 801ca24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ca28:	428a      	cmp	r2, r1
 801ca2a:	dd08      	ble.n	801ca3e <scalbn+0x76>
 801ca2c:	2d00      	cmp	r5, #0
 801ca2e:	a120      	add	r1, pc, #128	; (adr r1, 801cab0 <scalbn+0xe8>)
 801ca30:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca34:	da1c      	bge.n	801ca70 <scalbn+0xa8>
 801ca36:	a120      	add	r1, pc, #128	; (adr r1, 801cab8 <scalbn+0xf0>)
 801ca38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca3c:	e018      	b.n	801ca70 <scalbn+0xa8>
 801ca3e:	2a00      	cmp	r2, #0
 801ca40:	dd08      	ble.n	801ca54 <scalbn+0x8c>
 801ca42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ca46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ca4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ca4e:	ec45 4b10 	vmov	d0, r4, r5
 801ca52:	bd70      	pop	{r4, r5, r6, pc}
 801ca54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ca58:	da19      	bge.n	801ca8e <scalbn+0xc6>
 801ca5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ca5e:	429e      	cmp	r6, r3
 801ca60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801ca64:	dd0a      	ble.n	801ca7c <scalbn+0xb4>
 801ca66:	a112      	add	r1, pc, #72	; (adr r1, 801cab0 <scalbn+0xe8>)
 801ca68:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	d1e2      	bne.n	801ca36 <scalbn+0x6e>
 801ca70:	a30f      	add	r3, pc, #60	; (adr r3, 801cab0 <scalbn+0xe8>)
 801ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca76:	f7e3 fde9 	bl	800064c <__aeabi_dmul>
 801ca7a:	e7cb      	b.n	801ca14 <scalbn+0x4c>
 801ca7c:	a10a      	add	r1, pc, #40	; (adr r1, 801caa8 <scalbn+0xe0>)
 801ca7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d0b8      	beq.n	801c9f8 <scalbn+0x30>
 801ca86:	a10e      	add	r1, pc, #56	; (adr r1, 801cac0 <scalbn+0xf8>)
 801ca88:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca8c:	e7b4      	b.n	801c9f8 <scalbn+0x30>
 801ca8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ca92:	3236      	adds	r2, #54	; 0x36
 801ca94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ca98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801ca9c:	4620      	mov	r0, r4
 801ca9e:	4b0c      	ldr	r3, [pc, #48]	; (801cad0 <scalbn+0x108>)
 801caa0:	2200      	movs	r2, #0
 801caa2:	e7e8      	b.n	801ca76 <scalbn+0xae>
 801caa4:	f3af 8000 	nop.w
 801caa8:	c2f8f359 	.word	0xc2f8f359
 801caac:	01a56e1f 	.word	0x01a56e1f
 801cab0:	8800759c 	.word	0x8800759c
 801cab4:	7e37e43c 	.word	0x7e37e43c
 801cab8:	8800759c 	.word	0x8800759c
 801cabc:	fe37e43c 	.word	0xfe37e43c
 801cac0:	c2f8f359 	.word	0xc2f8f359
 801cac4:	81a56e1f 	.word	0x81a56e1f
 801cac8:	43500000 	.word	0x43500000
 801cacc:	ffff3cb0 	.word	0xffff3cb0
 801cad0:	3c900000 	.word	0x3c900000

0801cad4 <_init>:
 801cad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cad6:	bf00      	nop
 801cad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cada:	bc08      	pop	{r3}
 801cadc:	469e      	mov	lr, r3
 801cade:	4770      	bx	lr

0801cae0 <_fini>:
 801cae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cae2:	bf00      	nop
 801cae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cae6:	bc08      	pop	{r3}
 801cae8:	469e      	mov	lr, r3
 801caea:	4770      	bx	lr
