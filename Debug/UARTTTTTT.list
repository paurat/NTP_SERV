
UARTTTTTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006688  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069fc  080069fc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080069fc  080069fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a04  08006a04  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000078  08006a84  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08006a84  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015824  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002958  00000000  00000000  000358cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00038228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00039208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a4c  00000000  00000000  0003a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bbb  00000000  00000000  00062b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa5d0  00000000  00000000  000766e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170cb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a8  00000000  00000000  00170d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006840 	.word	0x08006840

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006840 	.word	0x08006840

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d013      	beq.n	80005e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00b      	beq.n	80005e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d0:	e000      	b.n	80005d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f9      	beq.n	80005d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// это же дебаг
int _write(int file, char *ptr,int len){
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
	int i=0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e009      	b.n	8000620 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	60ba      	str	r2, [r7, #8]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffc7 	bl	80005a8 <ITM_SendChar>
	for(i=0;i<len;i++)
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	dbf1      	blt.n	800060c <_write+0x16>
	return len;
 8000628:	687b      	ldr	r3, [r7, #4]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b0b3      	sub	sp, #204	; 0xcc
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// ZDA-38;RMC-68
	 //включение ZDA
	 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 800063a:	4b81      	ldr	r3, [pc, #516]	; (8000840 <main+0x20c>)
 800063c:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 8000646:	4a7f      	ldr	r2, [pc, #508]	; (8000844 <main+0x210>)
 8000648:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800064c:	ca07      	ldmia	r2, {r0, r1, r2}
 800064e:	c303      	stmia	r3!, {r0, r1}
 8000650:	801a      	strh	r2, [r3, #0]
	 //отключение ZDA
	 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
	 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

	 //отключение остального
	 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8000652:	4b7d      	ldr	r3, [pc, #500]	; (8000848 <main+0x214>)
 8000654:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8000658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800065a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 800065e:	4a7b      	ldr	r2, [pc, #492]	; (800084c <main+0x218>)
 8000660:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000664:	ca07      	ldmia	r2, {r0, r1, r2}
 8000666:	c303      	stmia	r3!, {r0, r1}
 8000668:	801a      	strh	r2, [r3, #0]

	 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 800066a:	4b79      	ldr	r3, [pc, #484]	; (8000850 <main+0x21c>)
 800066c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 8000676:	4a77      	ldr	r2, [pc, #476]	; (8000854 <main+0x220>)
 8000678:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800067c:	ca07      	ldmia	r2, {r0, r1, r2}
 800067e:	c303      	stmia	r3!, {r0, r1}
 8000680:	801a      	strh	r2, [r3, #0]

	 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 8000682:	4b75      	ldr	r3, [pc, #468]	; (8000858 <main+0x224>)
 8000684:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800068a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 800068e:	4a73      	ldr	r2, [pc, #460]	; (800085c <main+0x228>)
 8000690:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000694:	ca07      	ldmia	r2, {r0, r1, r2}
 8000696:	c303      	stmia	r3!, {r0, r1}
 8000698:	801a      	strh	r2, [r3, #0]

	 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 800069a:	4b71      	ldr	r3, [pc, #452]	; (8000860 <main+0x22c>)
 800069c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80006a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 80006a6:	4a6f      	ldr	r2, [pc, #444]	; (8000864 <main+0x230>)
 80006a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ae:	c303      	stmia	r3!, {r0, r1}
 80006b0:	801a      	strh	r2, [r3, #0]

	 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 80006b2:	4b6d      	ldr	r3, [pc, #436]	; (8000868 <main+0x234>)
 80006b4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80006b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 80006be:	4a6b      	ldr	r2, [pc, #428]	; (800086c <main+0x238>)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006c6:	c303      	stmia	r3!, {r0, r1}
 80006c8:	801a      	strh	r2, [r3, #0]
	 //отключение RMC на всякий
	 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
	 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

	 //включение RMC
	 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 80006ca:	4b69      	ldr	r3, [pc, #420]	; (8000870 <main+0x23c>)
 80006cc:	f107 0410 	add.w	r4, r7, #16
 80006d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 80006d6:	4a67      	ldr	r2, [pc, #412]	; (8000874 <main+0x240>)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	ca07      	ldmia	r2, {r0, r1, r2}
 80006dc:	c303      	stmia	r3!, {r0, r1}
 80006de:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f001 fb57 	bl	8001d92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f8cc 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f000 fa32 	bl	8000b50 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80006ec:	f000 f9ee 	bl	8000acc <MX_USART6_UART_Init>
  MX_UART7_Init();
 80006f0:	f000 f9bc 	bl	8000a6c <MX_UART7_Init>
  MX_RTC_Init();
 80006f4:	f000 f95e 	bl	80009b4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //ON ZDA
  HAL_UART_Transmit(&huart7,(uint8_t*) MESZDA, 16, 1000);
 80006f8:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80006fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000700:	2210      	movs	r2, #16
 8000702:	485d      	ldr	r0, [pc, #372]	; (8000878 <main+0x244>)
 8000704:	f003 fd64 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f001 fb6f 	bl	8001dec <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONZDA, 10, 1000);
 800070e:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	220a      	movs	r2, #10
 8000718:	4857      	ldr	r0, [pc, #348]	; (8000878 <main+0x244>)
 800071a:	f003 fd59 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 800071e:	2064      	movs	r0, #100	; 0x64
 8000720:	f001 fb64 	bl	8001dec <HAL_Delay>

  // OFF protokol
  HAL_UART_Transmit(&huart7,(uint8_t*) MESGGA, 16, 1000);
 8000724:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8000728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072c:	2210      	movs	r2, #16
 800072e:	4852      	ldr	r0, [pc, #328]	; (8000878 <main+0x244>)
 8000730:	f003 fd4e 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f001 fb59 	bl	8001dec <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGGA, 10, 1000);
 800073a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800073e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000742:	220a      	movs	r2, #10
 8000744:	484c      	ldr	r0, [pc, #304]	; (8000878 <main+0x244>)
 8000746:	f003 fd43 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 800074a:	2064      	movs	r0, #100	; 0x64
 800074c:	f001 fb4e 	bl	8001dec <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGLL, 16, 1000);
 8000750:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000758:	2210      	movs	r2, #16
 800075a:	4847      	ldr	r0, [pc, #284]	; (8000878 <main+0x244>)
 800075c:	f003 fd38 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f001 fb43 	bl	8001dec <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGLL, 10, 1000);
 8000766:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076e:	220a      	movs	r2, #10
 8000770:	4841      	ldr	r0, [pc, #260]	; (8000878 <main+0x244>)
 8000772:	f003 fd2d 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000776:	2064      	movs	r0, #100	; 0x64
 8000778:	f001 fb38 	bl	8001dec <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSA, 16, 1000);
 800077c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	2210      	movs	r2, #16
 8000786:	483c      	ldr	r0, [pc, #240]	; (8000878 <main+0x244>)
 8000788:	f003 fd22 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f001 fb2d 	bl	8001dec <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSA, 10, 1000);
 8000792:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	220a      	movs	r2, #10
 800079c:	4836      	ldr	r0, [pc, #216]	; (8000878 <main+0x244>)
 800079e:	f003 fd17 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 80007a2:	2064      	movs	r0, #100	; 0x64
 80007a4:	f001 fb22 	bl	8001dec <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSV, 16, 1000);
 80007a8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80007ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b0:	2210      	movs	r2, #16
 80007b2:	4831      	ldr	r0, [pc, #196]	; (8000878 <main+0x244>)
 80007b4:	f003 fd0c 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 80007b8:	2064      	movs	r0, #100	; 0x64
 80007ba:	f001 fb17 	bl	8001dec <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSV, 10, 1000);
 80007be:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	220a      	movs	r2, #10
 80007c8:	482b      	ldr	r0, [pc, #172]	; (8000878 <main+0x244>)
 80007ca:	f003 fd01 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 80007ce:	2064      	movs	r0, #100	; 0x64
 80007d0:	f001 fb0c 	bl	8001dec <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESVTG, 16, 1000);
 80007d4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80007d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007dc:	2210      	movs	r2, #16
 80007de:	4826      	ldr	r0, [pc, #152]	; (8000878 <main+0x244>)
 80007e0:	f003 fcf6 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 80007e4:	2064      	movs	r0, #100	; 0x64
 80007e6:	f001 fb01 	bl	8001dec <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONVTG, 10, 1000);
 80007ea:	f107 0120 	add.w	r1, r7, #32
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	220a      	movs	r2, #10
 80007f4:	4820      	ldr	r0, [pc, #128]	; (8000878 <main+0x244>)
 80007f6:	f003 fceb 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f001 faf6 	bl	8001dec <HAL_Delay>

  //отключение и включение RMC на всякий
  HAL_UART_Transmit(&huart7,(uint8_t*) MESRMC, 16, 1000);
 8000800:	f107 0110 	add.w	r1, r7, #16
 8000804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000808:	2210      	movs	r2, #16
 800080a:	481b      	ldr	r0, [pc, #108]	; (8000878 <main+0x244>)
 800080c:	f003 fce0 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000810:	2064      	movs	r0, #100	; 0x64
 8000812:	f001 faeb 	bl	8001dec <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONRMC, 10, 1000);
 8000816:	1d39      	adds	r1, r7, #4
 8000818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081c:	220a      	movs	r2, #10
 800081e:	4816      	ldr	r0, [pc, #88]	; (8000878 <main+0x244>)
 8000820:	f003 fcd6 	bl	80041d0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8000824:	2064      	movs	r0, #100	; 0x64
 8000826:	f001 fae1 	bl	8001dec <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Прерывания которые я не понимаю

	  HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	4913      	ldr	r1, [pc, #76]	; (800087c <main+0x248>)
 800082e:	4812      	ldr	r0, [pc, #72]	; (8000878 <main+0x244>)
 8000830:	f003 fdd0 	bl	80043d4 <HAL_UART_Receive_IT>

	  //HAL_UART_Receive(&huart7, (uint8_t*)RXstr, MESsize, 1000);
	  //HAL_UART_Transmit(&huart6, (uint8_t*)str, 8, 1000);
	  HAL_Delay(1000);
 8000834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000838:	f001 fad8 	bl	8001dec <HAL_Delay>
	  HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 800083c:	e7f5      	b.n	800082a <main+0x1f6>
 800083e:	bf00      	nop
 8000840:	08006858 	.word	0x08006858
 8000844:	08006868 	.word	0x08006868
 8000848:	08006874 	.word	0x08006874
 800084c:	08006884 	.word	0x08006884
 8000850:	08006890 	.word	0x08006890
 8000854:	080068a0 	.word	0x080068a0
 8000858:	080068ac 	.word	0x080068ac
 800085c:	080068bc 	.word	0x080068bc
 8000860:	080068c8 	.word	0x080068c8
 8000864:	080068d8 	.word	0x080068d8
 8000868:	080068e4 	.word	0x080068e4
 800086c:	080068f4 	.word	0x080068f4
 8000870:	08006900 	.word	0x08006900
 8000874:	08006910 	.word	0x08006910
 8000878:	200000d8 	.word	0x200000d8
 800087c:	200000b4 	.word	0x200000b4

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0b4      	sub	sp, #208	; 0xd0
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f005 f878 	bl	8005984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	2284      	movs	r2, #132	; 0x84
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f005 f869 	bl	8005984 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008b2:	f001 fdf9 	bl	80024a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <SystemClock_Config+0x12c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a3c      	ldr	r2, [pc, #240]	; (80009ac <SystemClock_Config+0x12c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <SystemClock_Config+0x12c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <SystemClock_Config+0x130>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a37      	ldr	r2, [pc, #220]	; (80009b0 <SystemClock_Config+0x130>)
 80008d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <SystemClock_Config+0x130>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008e6:	2309      	movs	r3, #9
 80008e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008f4:	2301      	movs	r3, #1
 80008f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000900:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000908:	2319      	movs	r3, #25
 800090a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800090e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800091c:	2309      	movs	r3, #9
 800091e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fe1e 	bl	8002568 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000932:	f000 ffff 	bl	8001934 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000936:	f001 fdc7 	bl	80024c8 <HAL_PWREx_EnableOverDrive>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000940:	f000 fff8 	bl	8001934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000944:	230f      	movs	r3, #15
 8000946:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2302      	movs	r3, #2
 800094c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000956:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800095a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000966:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800096a:	2106      	movs	r1, #6
 800096c:	4618      	mov	r0, r3
 800096e:	f002 f89f 	bl	8002ab0 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000978:	f000 ffdc 	bl	8001934 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 800097c:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000980:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000988:	2300      	movs	r3, #0
 800098a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800098c:	2300      	movs	r3, #0
 800098e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fa93 	bl	8002ec0 <HAL_RCCEx_PeriphCLKConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80009a0:	f000 ffc8 	bl	8001934 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	37d0      	adds	r7, #208	; 0xd0
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40007000 	.word	0x40007000

080009b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009d2:	4a25      	ldr	r2, [pc, #148]	; (8000a68 <MX_RTC_Init+0xb4>)
 80009d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009de:	227f      	movs	r2, #127	; 0x7f
 80009e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009e4:	22ff      	movs	r2, #255	; 0xff
 80009e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ee:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009fa:	481a      	ldr	r0, [pc, #104]	; (8000a64 <MX_RTC_Init+0xb0>)
 80009fc:	f002 fe50 	bl	80036a0 <HAL_RTC_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000a06:	f000 ff95 	bl	8001934 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <MX_RTC_Init+0xb0>)
 8000a28:	f002 fecc 	bl	80037c4 <HAL_RTC_SetTime>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000a32:	f000 ff7f 	bl	8001934 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000a36:	2303      	movs	r3, #3
 8000a38:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_RTC_Init+0xb0>)
 8000a4e:	f002 ff77 	bl	8003940 <HAL_RTC_SetDate>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000a58:	f000 ff6c 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000160 	.word	0x20000160
 8000a68:	40002800 	.word	0x40002800

08000a6c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_UART7_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <MX_UART7_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_UART7_Init+0x58>)
 8000a78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a7c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_UART7_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_UART7_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_UART7_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_UART7_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_UART7_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_UART7_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_UART7_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_UART7_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_UART7_Init+0x58>)
 8000ab0:	f003 fb40 	bl	8004134 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000aba:	f000 ff3b 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000d8 	.word	0x200000d8
 8000ac8:	40007800 	.word	0x40007800

08000acc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_RXNE);
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_USART6_UART_Init+0x78>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_USART6_UART_Init+0x78>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f042 0220 	orr.w	r2, r2, #32
 8000ade:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_IDLE);
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_USART6_UART_Init+0x78>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_USART6_UART_Init+0x78>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f042 0210 	orr.w	r2, r2, #16
 8000aee:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_USART6_UART_Init+0x7c>)
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <MX_USART6_UART_Init+0x80>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USART6_UART_Init+0x7c>)
 8000af8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000afc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_USART6_UART_Init+0x7c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_USART6_UART_Init+0x7c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_USART6_UART_Init+0x7c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <MX_USART6_UART_Init+0x7c>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_USART6_UART_Init+0x7c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_USART6_UART_Init+0x7c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_USART6_UART_Init+0x7c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_USART6_UART_Init+0x7c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_USART6_UART_Init+0x7c>)
 8000b30:	f003 fb00 	bl	8004134 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART6_UART_Init+0x72>
  {
    Error_Handler();
 8000b3a:	f000 fefb 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000d8 	.word	0x200000d8
 8000b48:	20000180 	.word	0x20000180
 8000b4c:	40011400 	.word	0x40011400

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b090      	sub	sp, #64	; 0x40
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b66:	4bae      	ldr	r3, [pc, #696]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4aad      	ldr	r2, [pc, #692]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4bab      	ldr	r3, [pc, #684]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b7e:	4ba8      	ldr	r3, [pc, #672]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4aa7      	ldr	r2, [pc, #668]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4ba5      	ldr	r3, [pc, #660]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4ba2      	ldr	r3, [pc, #648]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4aa1      	ldr	r2, [pc, #644]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b9f      	ldr	r3, [pc, #636]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4b9c      	ldr	r3, [pc, #624]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a9b      	ldr	r2, [pc, #620]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b99      	ldr	r3, [pc, #612]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	61fb      	str	r3, [r7, #28]
 8000bc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	4b96      	ldr	r3, [pc, #600]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a95      	ldr	r2, [pc, #596]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b93      	ldr	r3, [pc, #588]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b90      	ldr	r3, [pc, #576]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a8f      	ldr	r2, [pc, #572]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b8d      	ldr	r3, [pc, #564]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bf6:	4b8a      	ldr	r3, [pc, #552]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a89      	ldr	r2, [pc, #548]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b87      	ldr	r3, [pc, #540]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c0e:	4b84      	ldr	r3, [pc, #528]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a83      	ldr	r2, [pc, #524]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b81      	ldr	r3, [pc, #516]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c26:	4b7e      	ldr	r3, [pc, #504]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a7d      	ldr	r2, [pc, #500]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b7b      	ldr	r3, [pc, #492]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3e:	4b78      	ldr	r3, [pc, #480]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a77      	ldr	r2, [pc, #476]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c44:	f043 0320 	orr.w	r3, r3, #32
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b75      	ldr	r3, [pc, #468]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0320 	and.w	r3, r3, #32
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c56:	4b72      	ldr	r3, [pc, #456]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a71      	ldr	r2, [pc, #452]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <MX_GPIO_Init+0x2d0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2120      	movs	r1, #32
 8000c72:	486c      	ldr	r0, [pc, #432]	; (8000e24 <MX_GPIO_Init+0x2d4>)
 8000c74:	f001 fbfe 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	210c      	movs	r1, #12
 8000c7c:	486a      	ldr	r0, [pc, #424]	; (8000e28 <MX_GPIO_Init+0x2d8>)
 8000c7e:	f001 fbf9 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2108      	movs	r1, #8
 8000c86:	4869      	ldr	r0, [pc, #420]	; (8000e2c <MX_GPIO_Init+0x2dc>)
 8000c88:	f001 fbf4 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c92:	4865      	ldr	r0, [pc, #404]	; (8000e28 <MX_GPIO_Init+0x2d8>)
 8000c94:	f001 fbee 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9e:	4864      	ldr	r0, [pc, #400]	; (8000e30 <MX_GPIO_Init+0x2e0>)
 8000ca0:	f001 fbe8 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	21c8      	movs	r1, #200	; 0xc8
 8000ca8:	4862      	ldr	r0, [pc, #392]	; (8000e34 <MX_GPIO_Init+0x2e4>)
 8000caa:	f001 fbe3 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cbe:	230e      	movs	r3, #14
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	485b      	ldr	r0, [pc, #364]	; (8000e38 <MX_GPIO_Init+0x2e8>)
 8000cca:	f001 fa27 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000cce:	2308      	movs	r3, #8
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4855      	ldr	r0, [pc, #340]	; (8000e38 <MX_GPIO_Init+0x2e8>)
 8000ce2:	f001 fa1b 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cf6:	2309      	movs	r3, #9
 8000cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	484d      	ldr	r0, [pc, #308]	; (8000e38 <MX_GPIO_Init+0x2e8>)
 8000d02:	f001 fa0b 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000d06:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d18:	230b      	movs	r3, #11
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d20:	4619      	mov	r1, r3
 8000d22:	4844      	ldr	r0, [pc, #272]	; (8000e34 <MX_GPIO_Init+0x2e4>)
 8000d24:	f001 f9fa 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000d28:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	483c      	ldr	r0, [pc, #240]	; (8000e38 <MX_GPIO_Init+0x2e8>)
 8000d46:	f001 f9e9 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d50:	2312      	movs	r3, #18
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	4835      	ldr	r0, [pc, #212]	; (8000e3c <MX_GPIO_Init+0x2ec>)
 8000d68:	f001 f9d8 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000d6c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d7e:	230a      	movs	r3, #10
 8000d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d86:	4619      	mov	r1, r3
 8000d88:	482c      	ldr	r0, [pc, #176]	; (8000e3c <MX_GPIO_Init+0x2ec>)
 8000d8a:	f001 f9c7 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000d8e:	2310      	movs	r3, #16
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	4824      	ldr	r0, [pc, #144]	; (8000e3c <MX_GPIO_Init+0x2ec>)
 8000daa:	f001 f9b7 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4816      	ldr	r0, [pc, #88]	; (8000e24 <MX_GPIO_Init+0x2d4>)
 8000dca:	f001 f9a7 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000dce:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000de0:	230c      	movs	r3, #12
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4815      	ldr	r0, [pc, #84]	; (8000e40 <MX_GPIO_Init+0x2f0>)
 8000dec:	f001 f996 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e02:	2301      	movs	r3, #1
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_GPIO_Init+0x2f4>)
 8000e0e:	f001 f985 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000e12:	2360      	movs	r3, #96	; 0x60
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e014      	b.n	8000e48 <MX_GPIO_Init+0x2f8>
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020c00 	.word	0x40020c00
 8000e28:	40022000 	.word	0x40022000
 8000e2c:	40022800 	.word	0x40022800
 8000e30:	40021c00 	.word	0x40021c00
 8000e34:	40021800 	.word	0x40021800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e4e:	230d      	movs	r3, #13
 8000e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e56:	4619      	mov	r1, r3
 8000e58:	48bb      	ldr	r0, [pc, #748]	; (8001148 <MX_GPIO_Init+0x5f8>)
 8000e5a:	f001 f95f 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e6e:	2307      	movs	r3, #7
 8000e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e76:	4619      	mov	r1, r3
 8000e78:	48b4      	ldr	r0, [pc, #720]	; (800114c <MX_GPIO_Init+0x5fc>)
 8000e7a:	f001 f94f 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000e7e:	2340      	movs	r3, #64	; 0x40
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e8e:	230a      	movs	r3, #10
 8000e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e96:	4619      	mov	r1, r3
 8000e98:	48ac      	ldr	r0, [pc, #688]	; (800114c <MX_GPIO_Init+0x5fc>)
 8000e9a:	f001 f93f 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000e9e:	f248 1333 	movw	r3, #33075	; 0x8133
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	48a5      	ldr	r0, [pc, #660]	; (8001150 <MX_GPIO_Init+0x600>)
 8000ebc:	f001 f92e 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000ec0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed2:	230e      	movs	r3, #14
 8000ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eda:	4619      	mov	r1, r3
 8000edc:	489d      	ldr	r0, [pc, #628]	; (8001154 <MX_GPIO_Init+0x604>)
 8000ede:	f001 f91d 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4897      	ldr	r0, [pc, #604]	; (8001154 <MX_GPIO_Init+0x604>)
 8000ef8:	f001 f910 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000efc:	2340      	movs	r3, #64	; 0x40
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f00:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4891      	ldr	r0, [pc, #580]	; (8001158 <MX_GPIO_Init+0x608>)
 8000f12:	f001 f903 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000f16:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f30:	4619      	mov	r1, r3
 8000f32:	4889      	ldr	r0, [pc, #548]	; (8001158 <MX_GPIO_Init+0x608>)
 8000f34:	f001 f8f2 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000f38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f52:	4619      	mov	r1, r3
 8000f54:	4881      	ldr	r0, [pc, #516]	; (800115c <MX_GPIO_Init+0x60c>)
 8000f56:	f001 f8e1 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000f5a:	23f0      	movs	r3, #240	; 0xf0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f72:	4619      	mov	r1, r3
 8000f74:	487a      	ldr	r0, [pc, #488]	; (8001160 <MX_GPIO_Init+0x610>)
 8000f76:	f001 f8d1 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000f7a:	23f7      	movs	r3, #247	; 0xf7
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f8a:	230e      	movs	r3, #14
 8000f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f92:	4619      	mov	r1, r3
 8000f94:	4873      	ldr	r0, [pc, #460]	; (8001164 <MX_GPIO_Init+0x614>)
 8000f96:	f001 f8c1 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fac:	2309      	movs	r3, #9
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4866      	ldr	r0, [pc, #408]	; (8001150 <MX_GPIO_Init+0x600>)
 8000fb8:	f001 f8b0 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	485d      	ldr	r0, [pc, #372]	; (8001150 <MX_GPIO_Init+0x600>)
 8000fda:	f001 f89f 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4858      	ldr	r0, [pc, #352]	; (8001158 <MX_GPIO_Init+0x608>)
 8000ff6:	f001 f891 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800100a:	230d      	movs	r3, #13
 800100c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001012:	4619      	mov	r1, r3
 8001014:	4850      	ldr	r0, [pc, #320]	; (8001158 <MX_GPIO_Init+0x608>)
 8001016:	f001 f881 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800101a:	f241 030c 	movw	r3, #4108	; 0x100c
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800102c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001030:	4619      	mov	r1, r3
 8001032:	484b      	ldr	r0, [pc, #300]	; (8001160 <MX_GPIO_Init+0x610>)
 8001034:	f001 f872 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103e:	2300      	movs	r3, #0
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104a:	4619      	mov	r1, r3
 800104c:	4846      	ldr	r0, [pc, #280]	; (8001168 <MX_GPIO_Init+0x618>)
 800104e:	f001 f865 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001052:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001064:	230c      	movs	r3, #12
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106c:	4619      	mov	r1, r3
 800106e:	483f      	ldr	r0, [pc, #252]	; (800116c <MX_GPIO_Init+0x61c>)
 8001070:	f001 f854 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001074:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001086:	230e      	movs	r3, #14
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800108a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108e:	4619      	mov	r1, r3
 8001090:	4833      	ldr	r0, [pc, #204]	; (8001160 <MX_GPIO_Init+0x610>)
 8001092:	f001 f843 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001096:	2308      	movs	r3, #8
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010aa:	4619      	mov	r1, r3
 80010ac:	482d      	ldr	r0, [pc, #180]	; (8001164 <MX_GPIO_Init+0x614>)
 80010ae:	f001 f835 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80010b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010c4:	230d      	movs	r3, #13
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010cc:	4619      	mov	r1, r3
 80010ce:	4820      	ldr	r0, [pc, #128]	; (8001150 <MX_GPIO_Init+0x600>)
 80010d0:	f001 f824 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010d4:	2310      	movs	r3, #16
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e4:	4619      	mov	r1, r3
 80010e6:	481c      	ldr	r0, [pc, #112]	; (8001158 <MX_GPIO_Init+0x608>)
 80010e8:	f001 f818 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80010ec:	2304      	movs	r3, #4
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010fc:	230c      	movs	r3, #12
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001104:	4619      	mov	r1, r3
 8001106:	4814      	ldr	r0, [pc, #80]	; (8001158 <MX_GPIO_Init+0x608>)
 8001108:	f001 f808 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800110c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800111a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111e:	4619      	mov	r1, r3
 8001120:	4813      	ldr	r0, [pc, #76]	; (8001170 <MX_GPIO_Init+0x620>)
 8001122:	f000 fffb 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001126:	2302      	movs	r3, #2
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001136:	2305      	movs	r3, #5
 8001138:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113e:	4619      	mov	r1, r3
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <MX_GPIO_Init+0x610>)
 8001142:	f000 ffeb 	bl	800211c <HAL_GPIO_Init>
 8001146:	e015      	b.n	8001174 <MX_GPIO_Init+0x624>
 8001148:	40021000 	.word	0x40021000
 800114c:	40020400 	.word	0x40020400
 8001150:	40021800 	.word	0x40021800
 8001154:	40022400 	.word	0x40022400
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40020000 	.word	0x40020000
 8001160:	40022000 	.word	0x40022000
 8001164:	40022800 	.word	0x40022800
 8001168:	40020800 	.word	0x40020800
 800116c:	40021400 	.word	0x40021400
 8001170:	40021c00 	.word	0x40021c00

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	48ae      	ldr	r0, [pc, #696]	; (8001448 <MX_GPIO_Init+0x8f8>)
 800118e:	f000 ffc5 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001192:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011a4:	230d      	movs	r3, #13
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ac:	4619      	mov	r1, r3
 80011ae:	48a6      	ldr	r0, [pc, #664]	; (8001448 <MX_GPIO_Init+0x8f8>)
 80011b0:	f000 ffb4 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80011c4:	2302      	movs	r3, #2
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011cc:	4619      	mov	r1, r3
 80011ce:	489f      	ldr	r0, [pc, #636]	; (800144c <MX_GPIO_Init+0x8fc>)
 80011d0:	f000 ffa4 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80011d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e6:	2307      	movs	r3, #7
 80011e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ee:	4619      	mov	r1, r3
 80011f0:	4897      	ldr	r0, [pc, #604]	; (8001450 <MX_GPIO_Init+0x900>)
 80011f2:	f000 ff93 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80011f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001208:	2301      	movs	r3, #1
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001210:	4619      	mov	r1, r3
 8001212:	488f      	ldr	r0, [pc, #572]	; (8001450 <MX_GPIO_Init+0x900>)
 8001214:	f000 ff82 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800121e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122c:	4619      	mov	r1, r3
 800122e:	4887      	ldr	r0, [pc, #540]	; (800144c <MX_GPIO_Init+0x8fc>)
 8001230:	f000 ff74 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001234:	2310      	movs	r3, #16
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001244:	230a      	movs	r3, #10
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124c:	4619      	mov	r1, r3
 800124e:	487e      	ldr	r0, [pc, #504]	; (8001448 <MX_GPIO_Init+0x8f8>)
 8001250:	f000 ff64 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001254:	2328      	movs	r3, #40	; 0x28
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001264:	230c      	movs	r3, #12
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126c:	4619      	mov	r1, r3
 800126e:	4876      	ldr	r0, [pc, #472]	; (8001448 <MX_GPIO_Init+0x8f8>)
 8001270:	f000 ff54 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001274:	23c8      	movs	r3, #200	; 0xc8
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001288:	4619      	mov	r1, r3
 800128a:	4872      	ldr	r0, [pc, #456]	; (8001454 <MX_GPIO_Init+0x904>)
 800128c:	f000 ff46 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001290:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001296:	2303      	movs	r3, #3
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800129e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a2:	4619      	mov	r1, r3
 80012a4:	486c      	ldr	r0, [pc, #432]	; (8001458 <MX_GPIO_Init+0x908>)
 80012a6:	f000 ff39 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80012aa:	2308      	movs	r3, #8
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ba:	230c      	movs	r3, #12
 80012bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c2:	4619      	mov	r1, r3
 80012c4:	4865      	ldr	r0, [pc, #404]	; (800145c <MX_GPIO_Init+0x90c>)
 80012c6:	f000 ff29 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80012ca:	2305      	movs	r3, #5
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012da:	230a      	movs	r3, #10
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e2:	4619      	mov	r1, r3
 80012e4:	485d      	ldr	r0, [pc, #372]	; (800145c <MX_GPIO_Init+0x90c>)
 80012e6:	f000 ff19 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012ea:	2332      	movs	r3, #50	; 0x32
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012fa:	230b      	movs	r3, #11
 80012fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001302:	4619      	mov	r1, r3
 8001304:	4855      	ldr	r0, [pc, #340]	; (800145c <MX_GPIO_Init+0x90c>)
 8001306:	f000 ff09 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800130a:	2304      	movs	r3, #4
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131a:	2309      	movs	r3, #9
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001322:	4619      	mov	r1, r3
 8001324:	484e      	ldr	r0, [pc, #312]	; (8001460 <MX_GPIO_Init+0x910>)
 8001326:	f000 fef9 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800132a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800133c:	2309      	movs	r3, #9
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001344:	4619      	mov	r1, r3
 8001346:	4847      	ldr	r0, [pc, #284]	; (8001464 <MX_GPIO_Init+0x914>)
 8001348:	f000 fee8 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800134c:	2304      	movs	r3, #4
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135c:	4619      	mov	r1, r3
 800135e:	483d      	ldr	r0, [pc, #244]	; (8001454 <MX_GPIO_Init+0x904>)
 8001360:	f000 fedc 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001364:	2386      	movs	r3, #134	; 0x86
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001374:	230b      	movs	r3, #11
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137c:	4619      	mov	r1, r3
 800137e:	4834      	ldr	r0, [pc, #208]	; (8001450 <MX_GPIO_Init+0x900>)
 8001380:	f000 fecc 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001384:	2301      	movs	r3, #1
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001388:	2303      	movs	r3, #3
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001394:	4619      	mov	r1, r3
 8001396:	482e      	ldr	r0, [pc, #184]	; (8001450 <MX_GPIO_Init+0x900>)
 8001398:	f000 fec0 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800139c:	2350      	movs	r3, #80	; 0x50
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013ac:	230d      	movs	r3, #13
 80013ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b4:	4619      	mov	r1, r3
 80013b6:	4826      	ldr	r0, [pc, #152]	; (8001450 <MX_GPIO_Init+0x900>)
 80013b8:	f000 feb0 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80013bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c2:	2312      	movs	r3, #18
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013ce:	2304      	movs	r3, #4
 80013d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d6:	4619      	mov	r1, r3
 80013d8:	481b      	ldr	r0, [pc, #108]	; (8001448 <MX_GPIO_Init+0x8f8>)
 80013da:	f000 fe9f 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80013de:	2328      	movs	r3, #40	; 0x28
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80013ee:	230a      	movs	r3, #10
 80013f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f6:	4619      	mov	r1, r3
 80013f8:	4815      	ldr	r0, [pc, #84]	; (8001450 <MX_GPIO_Init+0x900>)
 80013fa:	f000 fe8f 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80013fe:	2340      	movs	r3, #64	; 0x40
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800140e:	2309      	movs	r3, #9
 8001410:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001416:	4619      	mov	r1, r3
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <MX_GPIO_Init+0x8f8>)
 800141a:	f000 fe7f 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800141e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001430:	2305      	movs	r3, #5
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001438:	4619      	mov	r1, r3
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <MX_GPIO_Init+0x910>)
 800143c:	f000 fe6e 	bl	800211c <HAL_GPIO_Init>

}
 8001440:	bf00      	nop
 8001442:	3740      	adds	r7, #64	; 0x40
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021c00 	.word	0x40021c00
 800144c:	40022000 	.word	0x40022000
 8001450:	40020000 	.word	0x40020000
 8001454:	40021800 	.word	0x40021800
 8001458:	40021400 	.word	0x40021400
 800145c:	40020800 	.word	0x40020800
 8001460:	40020400 	.word	0x40020400
 8001464:	40020c00 	.word	0x40020c00

08001468 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b085      	sub	sp, #20
 800146c:	af02      	add	r7, sp, #8
 800146e:	6078      	str	r0, [r7, #4]
	if(huart == &huart7) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <HAL_UART_RxCpltCallback+0x60>)
 8001474:	4293      	cmp	r3, r2
 8001476:	f040 8207 	bne.w	8001888 <HAL_UART_RxCpltCallback+0x420>
		//$ message start
		if(buff[0]=='$'){
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_UART_RxCpltCallback+0x64>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b24      	cmp	r3, #36	; 0x24
 8001480:	d106      	bne.n	8001490 <HAL_UART_RxCpltCallback+0x28>
			count=0;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_UART_RxCpltCallback+0x68>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
			zpt=0;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_UART_RxCpltCallback+0x6c>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e00f      	b.n	80014b0 <HAL_UART_RxCpltCallback+0x48>
		}
		//Message error
		else if (count==1&&buff[0]!='G'){
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_UART_RxCpltCallback+0x68>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d10b      	bne.n	80014b0 <HAL_UART_RxCpltCallback+0x48>
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_UART_RxCpltCallback+0x64>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b47      	cmp	r3, #71	; 0x47
 800149e:	d007      	beq.n	80014b0 <HAL_UART_RxCpltCallback+0x48>
			count=0;
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_UART_RxCpltCallback+0x68>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
			ERRORS++;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_UART_RxCpltCallback+0x70>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_UART_RxCpltCallback+0x70>)
 80014ae:	6013      	str	r3, [r2, #0]
//		int res = calc_crc(buff[0],count);
//		if(res){
//			//printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
//		}
		//ZDA OR RMC
		if (count==3&&buff[0]=='Z'){
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <HAL_UART_RxCpltCallback+0x68>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d113      	bne.n	80014e0 <HAL_UART_RxCpltCallback+0x78>
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <HAL_UART_RxCpltCallback+0x64>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b5a      	cmp	r3, #90	; 0x5a
 80014be:	d10f      	bne.n	80014e0 <HAL_UART_RxCpltCallback+0x78>
			Tipe_Mes=1;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_UART_RxCpltCallback+0x74>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e016      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x8e>
 80014c8:	200000d8 	.word	0x200000d8
 80014cc:	200000b4 	.word	0x200000b4
 80014d0:	200000a4 	.word	0x200000a4
 80014d4:	2000009c 	.word	0x2000009c
 80014d8:	20000094 	.word	0x20000094
 80014dc:	20000098 	.word	0x20000098
		}
		else if(count==3&&buff[0]=='R'){
 80014e0:	4b91      	ldr	r3, [pc, #580]	; (8001728 <HAL_UART_RxCpltCallback+0x2c0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d106      	bne.n	80014f6 <HAL_UART_RxCpltCallback+0x8e>
 80014e8:	4b90      	ldr	r3, [pc, #576]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b52      	cmp	r3, #82	; 0x52
 80014ee:	d102      	bne.n	80014f6 <HAL_UART_RxCpltCallback+0x8e>
			Tipe_Mes=2;
 80014f0:	4b8f      	ldr	r3, [pc, #572]	; (8001730 <HAL_UART_RxCpltCallback+0x2c8>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
		}
		//If ZDA
		if(Tipe_Mes==1){
 80014f6:	4b8e      	ldr	r3, [pc, #568]	; (8001730 <HAL_UART_RxCpltCallback+0x2c8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	f040 80cc 	bne.w	8001698 <HAL_UART_RxCpltCallback+0x230>

			if(count==6&&buff[0]!=','){
 8001500:	4b89      	ldr	r3, [pc, #548]	; (8001728 <HAL_UART_RxCpltCallback+0x2c0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b06      	cmp	r3, #6
 8001506:	d10b      	bne.n	8001520 <HAL_UART_RxCpltCallback+0xb8>
 8001508:	4b88      	ldr	r3, [pc, #544]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b2c      	cmp	r3, #44	; 0x2c
 800150e:	d007      	beq.n	8001520 <HAL_UART_RxCpltCallback+0xb8>
				count=0;
 8001510:	4b85      	ldr	r3, [pc, #532]	; (8001728 <HAL_UART_RxCpltCallback+0x2c0>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
				ERRORS++;
 8001516:	4b87      	ldr	r3, [pc, #540]	; (8001734 <HAL_UART_RxCpltCallback+0x2cc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	4a85      	ldr	r2, [pc, #532]	; (8001734 <HAL_UART_RxCpltCallback+0x2cc>)
 800151e:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 8001520:	4b82      	ldr	r3, [pc, #520]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b2c      	cmp	r3, #44	; 0x2c
 8001526:	d107      	bne.n	8001538 <HAL_UART_RxCpltCallback+0xd0>
				zpt++;
 8001528:	4b83      	ldr	r3, [pc, #524]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a82      	ldr	r2, [pc, #520]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 8001530:	6013      	str	r3, [r2, #0]
				ind=0;
 8001532:	4b82      	ldr	r3, [pc, #520]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 8001538:	4b7f      	ldr	r3, [pc, #508]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d10e      	bne.n	800155e <HAL_UART_RxCpltCallback+0xf6>
 8001540:	4b7a      	ldr	r3, [pc, #488]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b2c      	cmp	r3, #44	; 0x2c
 8001546:	d00a      	beq.n	800155e <HAL_UART_RxCpltCallback+0xf6>
				time_buff[ind]=buff[0];
 8001548:	4b7c      	ldr	r3, [pc, #496]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a77      	ldr	r2, [pc, #476]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 800154e:	7811      	ldrb	r1, [r2, #0]
 8001550:	4a7b      	ldr	r2, [pc, #492]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001552:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001554:	4b79      	ldr	r3, [pc, #484]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a78      	ldr	r2, [pc, #480]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 800155c:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 800155e:	4b76      	ldr	r3, [pc, #472]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d127      	bne.n	80015b6 <HAL_UART_RxCpltCallback+0x14e>
 8001566:	4b71      	ldr	r3, [pc, #452]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b2c      	cmp	r3, #44	; 0x2c
 800156c:	d123      	bne.n	80015b6 <HAL_UART_RxCpltCallback+0x14e>
				gps.hours[0]=time_buff[0];
 800156e:	4b74      	ldr	r3, [pc, #464]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	4b74      	ldr	r3, [pc, #464]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 8001574:	721a      	strb	r2, [r3, #8]
				gps.hours[1]=time_buff[1];
 8001576:	4b72      	ldr	r3, [pc, #456]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001578:	785a      	ldrb	r2, [r3, #1]
 800157a:	4b72      	ldr	r3, [pc, #456]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 800157c:	725a      	strb	r2, [r3, #9]
				gps.minuttes[0]=time_buff[2];
 800157e:	4b70      	ldr	r3, [pc, #448]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001580:	789a      	ldrb	r2, [r3, #2]
 8001582:	4b70      	ldr	r3, [pc, #448]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 8001584:	729a      	strb	r2, [r3, #10]
				gps.minuttes[1]=time_buff[3];
 8001586:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001588:	78da      	ldrb	r2, [r3, #3]
 800158a:	4b6e      	ldr	r3, [pc, #440]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 800158c:	72da      	strb	r2, [r3, #11]
				gps.seconds[0]=time_buff[4];
 800158e:	4b6c      	ldr	r3, [pc, #432]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001590:	791a      	ldrb	r2, [r3, #4]
 8001592:	4b6c      	ldr	r3, [pc, #432]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 8001594:	731a      	strb	r2, [r3, #12]
				gps.seconds[1]=time_buff[5];
 8001596:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001598:	795a      	ldrb	r2, [r3, #5]
 800159a:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 800159c:	735a      	strb	r2, [r3, #13]
				gps.seconds[2]=time_buff[6];
 800159e:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 80015a0:	799a      	ldrb	r2, [r3, #6]
 80015a2:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 80015a4:	739a      	strb	r2, [r3, #14]
				gps.seconds[3]=time_buff[7];
 80015a6:	4b66      	ldr	r3, [pc, #408]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 80015a8:	79da      	ldrb	r2, [r3, #7]
 80015aa:	4b66      	ldr	r3, [pc, #408]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 80015ac:	73da      	strb	r2, [r3, #15]
				gps.seconds[4]=time_buff[8];
 80015ae:	4b64      	ldr	r3, [pc, #400]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 80015b0:	7a1a      	ldrb	r2, [r3, #8]
 80015b2:	4b64      	ldr	r3, [pc, #400]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 80015b4:	741a      	strb	r2, [r3, #16]
			}
			if(zpt==2&&buff[0]!=','){
 80015b6:	4b60      	ldr	r3, [pc, #384]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d10e      	bne.n	80015dc <HAL_UART_RxCpltCallback+0x174>
 80015be:	4b5b      	ldr	r3, [pc, #364]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b2c      	cmp	r3, #44	; 0x2c
 80015c4:	d00a      	beq.n	80015dc <HAL_UART_RxCpltCallback+0x174>

				time_buff[ind]=buff[0];
 80015c6:	4b5d      	ldr	r3, [pc, #372]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a58      	ldr	r2, [pc, #352]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 80015cc:	7811      	ldrb	r1, [r2, #0]
 80015ce:	4a5c      	ldr	r2, [pc, #368]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 80015d0:	54d1      	strb	r1, [r2, r3]
				ind++;
 80015d2:	4b5a      	ldr	r3, [pc, #360]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a58      	ldr	r2, [pc, #352]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 80015da:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 80015dc:	4b56      	ldr	r3, [pc, #344]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d10b      	bne.n	80015fc <HAL_UART_RxCpltCallback+0x194>
 80015e4:	4b51      	ldr	r3, [pc, #324]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b2c      	cmp	r3, #44	; 0x2c
 80015ea:	d107      	bne.n	80015fc <HAL_UART_RxCpltCallback+0x194>
				gps.day[0]=time_buff[0];
 80015ec:	4b54      	ldr	r3, [pc, #336]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	4b54      	ldr	r3, [pc, #336]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 80015f2:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 80015f4:	4b52      	ldr	r3, [pc, #328]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 80015f6:	785a      	ldrb	r2, [r3, #1]
 80015f8:	4b52      	ldr	r3, [pc, #328]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 80015fa:	705a      	strb	r2, [r3, #1]
			}
			if(zpt==3&&buff[0]!=','){
 80015fc:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d10e      	bne.n	8001622 <HAL_UART_RxCpltCallback+0x1ba>
 8001604:	4b49      	ldr	r3, [pc, #292]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b2c      	cmp	r3, #44	; 0x2c
 800160a:	d00a      	beq.n	8001622 <HAL_UART_RxCpltCallback+0x1ba>

				time_buff[ind]=buff[0];
 800160c:	4b4b      	ldr	r3, [pc, #300]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a46      	ldr	r2, [pc, #280]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 8001612:	7811      	ldrb	r1, [r2, #0]
 8001614:	4a4a      	ldr	r2, [pc, #296]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001616:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001618:	4b48      	ldr	r3, [pc, #288]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	4a47      	ldr	r2, [pc, #284]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 8001620:	6013      	str	r3, [r2, #0]
			}
			if(zpt==4&&buff[0]==','){
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b04      	cmp	r3, #4
 8001628:	d10b      	bne.n	8001642 <HAL_UART_RxCpltCallback+0x1da>
 800162a:	4b40      	ldr	r3, [pc, #256]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b2c      	cmp	r3, #44	; 0x2c
 8001630:	d107      	bne.n	8001642 <HAL_UART_RxCpltCallback+0x1da>
				gps.month[0]=time_buff[0];
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	4b43      	ldr	r3, [pc, #268]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 8001638:	709a      	strb	r2, [r3, #2]
				gps.month[1]=time_buff[1];
 800163a:	4b41      	ldr	r3, [pc, #260]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 800163c:	785a      	ldrb	r2, [r3, #1]
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 8001640:	70da      	strb	r2, [r3, #3]
			}
			if(zpt==4&&buff[0]!=','){
 8001642:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b04      	cmp	r3, #4
 8001648:	d10e      	bne.n	8001668 <HAL_UART_RxCpltCallback+0x200>
 800164a:	4b38      	ldr	r3, [pc, #224]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b2c      	cmp	r3, #44	; 0x2c
 8001650:	d00a      	beq.n	8001668 <HAL_UART_RxCpltCallback+0x200>

				time_buff[ind]=buff[0];
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a35      	ldr	r2, [pc, #212]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 8001658:	7811      	ldrb	r1, [r2, #0]
 800165a:	4a39      	ldr	r2, [pc, #228]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 800165c:	54d1      	strb	r1, [r2, r3]
				ind++;
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	4a35      	ldr	r2, [pc, #212]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 8001666:	6013      	str	r3, [r2, #0]
			}
			if(zpt==5&&buff[0]==','){
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d113      	bne.n	8001698 <HAL_UART_RxCpltCallback+0x230>
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b2c      	cmp	r3, #44	; 0x2c
 8001676:	d10f      	bne.n	8001698 <HAL_UART_RxCpltCallback+0x230>
				gps.year[0]=time_buff[0];
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 800167a:	781a      	ldrb	r2, [r3, #0]
 800167c:	4b31      	ldr	r3, [pc, #196]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 800167e:	711a      	strb	r2, [r3, #4]
				gps.year[1]=time_buff[1];
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001682:	785a      	ldrb	r2, [r3, #1]
 8001684:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 8001686:	715a      	strb	r2, [r3, #5]
				gps.year[2]=time_buff[2];
 8001688:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 800168a:	789a      	ldrb	r2, [r3, #2]
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 800168e:	719a      	strb	r2, [r3, #6]
				gps.year[3]=time_buff[3];
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001692:	78da      	ldrb	r2, [r3, #3]
 8001694:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 8001696:	71da      	strb	r2, [r3, #7]
			}
		}


		//IF RMC
		if(Tipe_Mes==2){
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_UART_RxCpltCallback+0x2c8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b02      	cmp	r3, #2
 800169e:	f040 80bf 	bne.w	8001820 <HAL_UART_RxCpltCallback+0x3b8>

			if(count==6&&buff[0]!=','){
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <HAL_UART_RxCpltCallback+0x2c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d10b      	bne.n	80016c2 <HAL_UART_RxCpltCallback+0x25a>
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b2c      	cmp	r3, #44	; 0x2c
 80016b0:	d007      	beq.n	80016c2 <HAL_UART_RxCpltCallback+0x25a>
				count=0;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_UART_RxCpltCallback+0x2c0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
				ERRORS++;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_UART_RxCpltCallback+0x2cc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <HAL_UART_RxCpltCallback+0x2cc>)
 80016c0:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b2c      	cmp	r3, #44	; 0x2c
 80016c8:	d107      	bne.n	80016da <HAL_UART_RxCpltCallback+0x272>
				zpt++;
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 80016d2:	6013      	str	r3, [r2, #0]
				ind=0;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d10e      	bne.n	8001700 <HAL_UART_RxCpltCallback+0x298>
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b2c      	cmp	r3, #44	; 0x2c
 80016e8:	d00a      	beq.n	8001700 <HAL_UART_RxCpltCallback+0x298>

				time_buff[ind]=buff[0];
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a0f      	ldr	r2, [pc, #60]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 80016f0:	7811      	ldrb	r1, [r2, #0]
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 80016f4:	54d1      	strb	r1, [r2, r3]
				ind++;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4a0f      	ldr	r2, [pc, #60]	; (800173c <HAL_UART_RxCpltCallback+0x2d4>)
 80016fe:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_UART_RxCpltCallback+0x2d0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d139      	bne.n	800177c <HAL_UART_RxCpltCallback+0x314>
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_UART_RxCpltCallback+0x2c4>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b2c      	cmp	r3, #44	; 0x2c
 800170e:	d135      	bne.n	800177c <HAL_UART_RxCpltCallback+0x314>
				gps.hours[0]=time_buff[0];
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001712:	781a      	ldrb	r2, [r3, #0]
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 8001716:	721a      	strb	r2, [r3, #8]
				gps.hours[1]=time_buff[1];
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 800171a:	785a      	ldrb	r2, [r3, #1]
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_UART_RxCpltCallback+0x2dc>)
 800171e:	725a      	strb	r2, [r3, #9]
				gps.minuttes[0]=time_buff[2];
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_UART_RxCpltCallback+0x2d8>)
 8001722:	789a      	ldrb	r2, [r3, #2]
 8001724:	e010      	b.n	8001748 <HAL_UART_RxCpltCallback+0x2e0>
 8001726:	bf00      	nop
 8001728:	200000a4 	.word	0x200000a4
 800172c:	200000b4 	.word	0x200000b4
 8001730:	20000098 	.word	0x20000098
 8001734:	20000094 	.word	0x20000094
 8001738:	2000009c 	.word	0x2000009c
 800173c:	200000a0 	.word	0x200000a0
 8001740:	200000a8 	.word	0x200000a8
 8001744:	200000c4 	.word	0x200000c4
 8001748:	4b51      	ldr	r3, [pc, #324]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 800174a:	729a      	strb	r2, [r3, #10]
				gps.minuttes[1]=time_buff[3];
 800174c:	4b51      	ldr	r3, [pc, #324]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 800174e:	78da      	ldrb	r2, [r3, #3]
 8001750:	4b4f      	ldr	r3, [pc, #316]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 8001752:	72da      	strb	r2, [r3, #11]
				gps.seconds[0]=time_buff[4];
 8001754:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 8001756:	791a      	ldrb	r2, [r3, #4]
 8001758:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 800175a:	731a      	strb	r2, [r3, #12]
				gps.seconds[1]=time_buff[5];
 800175c:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 800175e:	795a      	ldrb	r2, [r3, #5]
 8001760:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 8001762:	735a      	strb	r2, [r3, #13]
				gps.seconds[2]=time_buff[6];
 8001764:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 8001766:	799a      	ldrb	r2, [r3, #6]
 8001768:	4b49      	ldr	r3, [pc, #292]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 800176a:	739a      	strb	r2, [r3, #14]
				gps.seconds[3]=time_buff[7];
 800176c:	4b49      	ldr	r3, [pc, #292]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 800176e:	79da      	ldrb	r2, [r3, #7]
 8001770:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 8001772:	73da      	strb	r2, [r3, #15]
				gps.seconds[4]=time_buff[8];
 8001774:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 8001776:	7a1a      	ldrb	r2, [r3, #8]
 8001778:	4b45      	ldr	r3, [pc, #276]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 800177a:	741a      	strb	r2, [r3, #16]
			}
			if(zpt==2&&buff[0]!=','){
 800177c:	4b46      	ldr	r3, [pc, #280]	; (8001898 <HAL_UART_RxCpltCallback+0x430>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d10e      	bne.n	80017a2 <HAL_UART_RxCpltCallback+0x33a>
 8001784:	4b45      	ldr	r3, [pc, #276]	; (800189c <HAL_UART_RxCpltCallback+0x434>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b2c      	cmp	r3, #44	; 0x2c
 800178a:	d00a      	beq.n	80017a2 <HAL_UART_RxCpltCallback+0x33a>

				time_buff[ind]=buff[0];
 800178c:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <HAL_UART_RxCpltCallback+0x438>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a42      	ldr	r2, [pc, #264]	; (800189c <HAL_UART_RxCpltCallback+0x434>)
 8001792:	7811      	ldrb	r1, [r2, #0]
 8001794:	4a3f      	ldr	r2, [pc, #252]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 8001796:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001798:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <HAL_UART_RxCpltCallback+0x438>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a40      	ldr	r2, [pc, #256]	; (80018a0 <HAL_UART_RxCpltCallback+0x438>)
 80017a0:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <HAL_UART_RxCpltCallback+0x430>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d107      	bne.n	80017ba <HAL_UART_RxCpltCallback+0x352>
 80017aa:	4b3c      	ldr	r3, [pc, #240]	; (800189c <HAL_UART_RxCpltCallback+0x434>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b2c      	cmp	r3, #44	; 0x2c
 80017b0:	d103      	bne.n	80017ba <HAL_UART_RxCpltCallback+0x352>
				gps.sinc=time_buff[0];
 80017b2:	4b38      	ldr	r3, [pc, #224]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	4b36      	ldr	r3, [pc, #216]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 80017b8:	749a      	strb	r2, [r3, #18]
			}

			if(zpt==9&&buff[0]!=','){
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <HAL_UART_RxCpltCallback+0x430>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b09      	cmp	r3, #9
 80017c0:	d10e      	bne.n	80017e0 <HAL_UART_RxCpltCallback+0x378>
 80017c2:	4b36      	ldr	r3, [pc, #216]	; (800189c <HAL_UART_RxCpltCallback+0x434>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b2c      	cmp	r3, #44	; 0x2c
 80017c8:	d00a      	beq.n	80017e0 <HAL_UART_RxCpltCallback+0x378>

				time_buff[ind]=buff[0];
 80017ca:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_UART_RxCpltCallback+0x438>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a33      	ldr	r2, [pc, #204]	; (800189c <HAL_UART_RxCpltCallback+0x434>)
 80017d0:	7811      	ldrb	r1, [r2, #0]
 80017d2:	4a30      	ldr	r2, [pc, #192]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 80017d4:	54d1      	strb	r1, [r2, r3]
				ind++;
 80017d6:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <HAL_UART_RxCpltCallback+0x438>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	3301      	adds	r3, #1
 80017dc:	4a30      	ldr	r2, [pc, #192]	; (80018a0 <HAL_UART_RxCpltCallback+0x438>)
 80017de:	6013      	str	r3, [r2, #0]
			}
			if(zpt==10&&buff[0]==','){
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <HAL_UART_RxCpltCallback+0x430>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b0a      	cmp	r3, #10
 80017e6:	d11b      	bne.n	8001820 <HAL_UART_RxCpltCallback+0x3b8>
 80017e8:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_UART_RxCpltCallback+0x434>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b2c      	cmp	r3, #44	; 0x2c
 80017ee:	d117      	bne.n	8001820 <HAL_UART_RxCpltCallback+0x3b8>
				gps.day[0]=time_buff[0];
 80017f0:	4b28      	ldr	r3, [pc, #160]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	4b26      	ldr	r3, [pc, #152]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 80017f6:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 80017fa:	785a      	ldrb	r2, [r3, #1]
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 80017fe:	705a      	strb	r2, [r3, #1]
				gps.month[0]=time_buff[2];
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 8001802:	789a      	ldrb	r2, [r3, #2]
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 8001806:	709a      	strb	r2, [r3, #2]
				gps.month[1]=time_buff[3];
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 800180a:	78da      	ldrb	r2, [r3, #3]
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 800180e:	70da      	strb	r2, [r3, #3]
				gps.year[0]=time_buff[4];
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 8001812:	791a      	ldrb	r2, [r3, #4]
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 8001816:	711a      	strb	r2, [r3, #4]
				gps.year[1]=time_buff[5];
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_UART_RxCpltCallback+0x42c>)
 800181a:	795a      	ldrb	r2, [r3, #5]
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 800181e:	715a      	strb	r2, [r3, #5]
			}
		}
		printf("buff=%c\tcount=%d\tzpt=%d\tind=%d\tTipe_Mes=%d\n\r",buff[0],count,zpt,ind,Tipe_Mes);
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_UART_RxCpltCallback+0x434>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461c      	mov	r4, r3
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_UART_RxCpltCallback+0x43c>)
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_UART_RxCpltCallback+0x430>)
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <HAL_UART_RxCpltCallback+0x438>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_UART_RxCpltCallback+0x440>)
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	9201      	str	r2, [sp, #4]
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	4603      	mov	r3, r0
 800183c:	460a      	mov	r2, r1
 800183e:	4621      	mov	r1, r4
 8001840:	481a      	ldr	r0, [pc, #104]	; (80018ac <HAL_UART_RxCpltCallback+0x444>)
 8001842:	f004 f8a7 	bl	8005994 <iprintf>
		//printf("crc_hx=%s\t crc=%d\t crc_buff=%s\t dec=%d\n\r",crc_hx,crc,crc_buff,dec);
		dataReceived=1;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_UART_RxCpltCallback+0x448>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

		if( dataTransmitted != 0 ) {
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_UART_RxCpltCallback+0x44c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00a      	beq.n	800186a <HAL_UART_RxCpltCallback+0x402>

			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 8001854:	2201      	movs	r2, #1
 8001856:	4911      	ldr	r1, [pc, #68]	; (800189c <HAL_UART_RxCpltCallback+0x434>)
 8001858:	4817      	ldr	r0, [pc, #92]	; (80018b8 <HAL_UART_RxCpltCallback+0x450>)
 800185a:	f002 fd4d 	bl	80042f8 <HAL_UART_Transmit_IT>

			dataReceived=0;
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_UART_RxCpltCallback+0x448>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_UART_RxCpltCallback+0x44c>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT (&huart7, (uint8_t *)buff, 1);
 800186a:	2201      	movs	r2, #1
 800186c:	490b      	ldr	r1, [pc, #44]	; (800189c <HAL_UART_RxCpltCallback+0x434>)
 800186e:	4813      	ldr	r0, [pc, #76]	; (80018bc <HAL_UART_RxCpltCallback+0x454>)
 8001870:	f002 fdb0 	bl	80043d4 <HAL_UART_Receive_IT>
		gps.errors=ERRORS;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_UART_RxCpltCallback+0x458>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_UART_RxCpltCallback+0x428>)
 800187c:	745a      	strb	r2, [r3, #17]
		count++;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_UART_RxCpltCallback+0x43c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_UART_RxCpltCallback+0x43c>)
 8001886:	6013      	str	r3, [r2, #0]
	}
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	200000c4 	.word	0x200000c4
 8001894:	200000a8 	.word	0x200000a8
 8001898:	2000009c 	.word	0x2000009c
 800189c:	200000b4 	.word	0x200000b4
 80018a0:	200000a0 	.word	0x200000a0
 80018a4:	200000a4 	.word	0x200000a4
 80018a8:	20000098 	.word	0x20000098
 80018ac:	0800691c 	.word	0x0800691c
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000004 	.word	0x20000004
 80018b8:	20000180 	.word	0x20000180
 80018bc:	200000d8 	.word	0x200000d8
 80018c0:	20000094 	.word	0x20000094

080018c4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  if(huart == &huart6) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <HAL_UART_TxCpltCallback+0x3c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d111      	bne.n	80018f8 <HAL_UART_TxCpltCallback+0x34>

    dataTransmitted=1;
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_UART_TxCpltCallback+0x40>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

    if( dataReceived != 0 ) {
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_UART_TxCpltCallback+0x44>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00a      	beq.n	80018f8 <HAL_UART_TxCpltCallback+0x34>
      HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 80018e2:	2201      	movs	r2, #1
 80018e4:	4909      	ldr	r1, [pc, #36]	; (800190c <HAL_UART_TxCpltCallback+0x48>)
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <HAL_UART_TxCpltCallback+0x3c>)
 80018e8:	f002 fd06 	bl	80042f8 <HAL_UART_Transmit_IT>
      dataReceived=0;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_UART_TxCpltCallback+0x44>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
      dataTransmitted=0;
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <HAL_UART_TxCpltCallback+0x40>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
   }
  }
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000180 	.word	0x20000180
 8001904:	20000004 	.word	0x20000004
 8001908:	20000000 	.word	0x20000000
 800190c:	200000b4 	.word	0x200000b4

08001910 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d101      	bne.n	8001926 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001922:	f000 fa43 	bl	8001dac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40001000 	.word	0x40001000

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193c:	e7fe      	b.n	800193c <Error_Handler+0x8>
	...

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_MspInit+0x44>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_MspInit+0x44>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_MspInit+0x44>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_MspInit+0x44>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_MspInit+0x44>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_MspInit+0x44>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_RTC_MspInit+0x2c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d105      	bne.n	80019a6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_RTC_MspInit+0x30>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_RTC_MspInit+0x30>)
 80019a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40002800 	.word	0x40002800
 80019b8:	40023800 	.word	0x40023800

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08c      	sub	sp, #48	; 0x30
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a36      	ldr	r2, [pc, #216]	; (8001ab4 <HAL_UART_MspInit+0xf8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d130      	bne.n	8001a40 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80019de:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a35      	ldr	r2, [pc, #212]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 80019e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a2f      	ldr	r2, [pc, #188]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 80019fc:	f043 0320 	orr.w	r3, r3, #32
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001a0e:	23c0      	movs	r3, #192	; 0xc0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001a1e:	2308      	movs	r3, #8
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	4824      	ldr	r0, [pc, #144]	; (8001abc <HAL_UART_MspInit+0x100>)
 8001a2a:	f000 fb77 	bl	800211c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2052      	movs	r0, #82	; 0x52
 8001a34:	f000 fab6 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001a38:	2052      	movs	r0, #82	; 0x52
 8001a3a:	f000 facf 	bl	8001fdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a3e:	e034      	b.n	8001aaa <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <HAL_UART_MspInit+0x104>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d12f      	bne.n	8001aaa <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 8001a50:	f043 0320 	orr.w	r3, r3, #32
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_UART_MspInit+0xfc>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001a7a:	23c0      	movs	r3, #192	; 0xc0
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4619      	mov	r1, r3
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <HAL_UART_MspInit+0x108>)
 8001a96:	f000 fb41 	bl	800211c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2047      	movs	r0, #71	; 0x47
 8001aa0:	f000 fa80 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001aa4:	2047      	movs	r0, #71	; 0x47
 8001aa6:	f000 fa99 	bl	8001fdc <HAL_NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3730      	adds	r7, #48	; 0x30
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40007800 	.word	0x40007800
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40021400 	.word	0x40021400
 8001ac0:	40011400 	.word	0x40011400
 8001ac4:	40020800 	.word	0x40020800

08001ac8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	2036      	movs	r0, #54	; 0x36
 8001ade:	f000 fa61 	bl	8001fa4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ae2:	2036      	movs	r0, #54	; 0x36
 8001ae4:	f000 fa7a 	bl	8001fdc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_InitTick+0xa0>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_InitTick+0xa0>)
 8001aee:	f043 0310 	orr.w	r3, r3, #16
 8001af2:	6413      	str	r3, [r2, #64]	; 0x40
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_InitTick+0xa0>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b00:	f107 0210 	add.w	r2, r7, #16
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 f9a6 	bl	8002e5c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b10:	f001 f97c 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8001b14:	4603      	mov	r3, r0
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1c:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <HAL_InitTick+0xa4>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9b      	lsrs	r3, r3, #18
 8001b24:	3b01      	subs	r3, #1
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_InitTick+0xa8>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <HAL_InitTick+0xac>)
 8001b2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_InitTick+0xa8>)
 8001b30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_InitTick+0xa8>)
 8001b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_InitTick+0xa8>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_InitTick+0xa8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b48:	4809      	ldr	r0, [pc, #36]	; (8001b70 <HAL_InitTick+0xa8>)
 8001b4a:	f002 f813 	bl	8003b74 <HAL_TIM_Base_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d104      	bne.n	8001b5e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b54:	4806      	ldr	r0, [pc, #24]	; (8001b70 <HAL_InitTick+0xa8>)
 8001b56:	f002 f86f 	bl	8003c38 <HAL_TIM_Base_Start_IT>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3730      	adds	r7, #48	; 0x30
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	431bde83 	.word	0x431bde83
 8001b70:	20000204 	.word	0x20000204
 8001b74:	40001000 	.word	0x40001000

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <NMI_Handler+0x4>

08001b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM6_DAC_IRQHandler+0x10>)
 8001bd6:	f002 f8a7 	bl	8003d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000204 	.word	0x20000204

08001be4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <USART6_IRQHandler+0x10>)
 8001bea:	f002 fc41 	bl	8004470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000180 	.word	0x20000180

08001bf8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
//	  } else {
//	    uart7_handler();
//	  }
//	  return;
  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <UART7_IRQHandler+0x10>)
 8001bfe:	f002 fc37 	bl	8004470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200000d8 	.word	0x200000d8

08001c0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e00a      	b.n	8001c34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c1e:	f3af 8000 	nop.w
 8001c22:	4601      	mov	r1, r0
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60ba      	str	r2, [r7, #8]
 8001c2a:	b2ca      	uxtb	r2, r1
 8001c2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf0      	blt.n	8001c1e <_read+0x12>
	}

return len;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_isatty>:

int _isatty(int file)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
	return 1;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f003 fe26 	bl	8005930 <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20050000 	.word	0x20050000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	200000b8 	.word	0x200000b8
 8001d18:	20000268 	.word	0x20000268

08001d1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d44:	480d      	ldr	r0, [pc, #52]	; (8001d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d46:	490e      	ldr	r1, [pc, #56]	; (8001d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d5c:	4c0b      	ldr	r4, [pc, #44]	; (8001d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d6a:	f7ff ffd7 	bl	8001d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f003 fde5 	bl	800593c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d72:	f7fe fc5f 	bl	8000634 <main>
  bx  lr    
 8001d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d84:	08006a0c 	.word	0x08006a0c
  ldr r2, =_sbss
 8001d88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d8c:	20000264 	.word	0x20000264

08001d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC_IRQHandler>

08001d92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d96:	2003      	movs	r0, #3
 8001d98:	f000 f8f9 	bl	8001f8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff fe93 	bl	8001ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da2:	f7ff fdcd 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x20>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x24>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <HAL_IncTick+0x24>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000010 	.word	0x20000010
 8001dd0:	20000250 	.word	0x20000250

08001dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_GetTick+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000250 	.word	0x20000250

08001dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff ffee 	bl	8001dd4 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e12:	bf00      	nop
 8001e14:	f7ff ffde 	bl	8001dd4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
  {
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000010 	.word	0x20000010

08001e34 <__NVIC_SetPriorityGrouping>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <__NVIC_SetPriorityGrouping+0x40>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <__NVIC_SetPriorityGrouping+0x40>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00
 8001e78:	05fa0000 	.word	0x05fa0000

08001e7c <__NVIC_GetPriorityGrouping>:
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_EnableIRQ>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0b      	blt.n	8001ec2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4907      	ldr	r1, [pc, #28]	; (8001ed0 <__NVIC_EnableIRQ+0x38>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	fa00 f202 	lsl.w	r2, r0, r2
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff4c 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb6:	f7ff ff61 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8001fba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	6978      	ldr	r0, [r7, #20]
 8001fc2:	f7ff ffb1 	bl	8001f28 <NVIC_EncodePriority>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff80 	bl	8001ed4 <__NVIC_SetPriority>
}
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff54 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002006:	f7ff fee5 	bl	8001dd4 <HAL_GetTick>
 800200a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d008      	beq.n	800202a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e052      	b.n	80020d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0216 	bic.w	r2, r2, #22
 8002038:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002048:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <HAL_DMA_Abort+0x62>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0208 	bic.w	r2, r2, #8
 8002068:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800207a:	e013      	b.n	80020a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800207c:	f7ff feaa 	bl	8001dd4 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b05      	cmp	r3, #5
 8002088:	d90c      	bls.n	80020a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2203      	movs	r2, #3
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e015      	b.n	80020d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1e4      	bne.n	800207c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	223f      	movs	r2, #63	; 0x3f
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d004      	beq.n	80020f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00c      	b.n	8002110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2205      	movs	r2, #5
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	e175      	b.n	8002428 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8164 	bne.w	8002422 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d005      	beq.n	8002172 <HAL_GPIO_Init+0x56>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d130      	bne.n	80021d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 0201 	and.w	r2, r3, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d017      	beq.n	8002210 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d123      	bne.n	8002264 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80be 	beq.w	8002422 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a6:	4b66      	ldr	r3, [pc, #408]	; (8002440 <HAL_GPIO_Init+0x324>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a65      	ldr	r2, [pc, #404]	; (8002440 <HAL_GPIO_Init+0x324>)
 80022ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <HAL_GPIO_Init+0x324>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022be:	4a61      	ldr	r2, [pc, #388]	; (8002444 <HAL_GPIO_Init+0x328>)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	220f      	movs	r2, #15
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a58      	ldr	r2, [pc, #352]	; (8002448 <HAL_GPIO_Init+0x32c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d037      	beq.n	800235a <HAL_GPIO_Init+0x23e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a57      	ldr	r2, [pc, #348]	; (800244c <HAL_GPIO_Init+0x330>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d031      	beq.n	8002356 <HAL_GPIO_Init+0x23a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a56      	ldr	r2, [pc, #344]	; (8002450 <HAL_GPIO_Init+0x334>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d02b      	beq.n	8002352 <HAL_GPIO_Init+0x236>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a55      	ldr	r2, [pc, #340]	; (8002454 <HAL_GPIO_Init+0x338>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d025      	beq.n	800234e <HAL_GPIO_Init+0x232>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a54      	ldr	r2, [pc, #336]	; (8002458 <HAL_GPIO_Init+0x33c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01f      	beq.n	800234a <HAL_GPIO_Init+0x22e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a53      	ldr	r2, [pc, #332]	; (800245c <HAL_GPIO_Init+0x340>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d019      	beq.n	8002346 <HAL_GPIO_Init+0x22a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a52      	ldr	r2, [pc, #328]	; (8002460 <HAL_GPIO_Init+0x344>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_GPIO_Init+0x226>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a51      	ldr	r2, [pc, #324]	; (8002464 <HAL_GPIO_Init+0x348>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00d      	beq.n	800233e <HAL_GPIO_Init+0x222>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a50      	ldr	r2, [pc, #320]	; (8002468 <HAL_GPIO_Init+0x34c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d007      	beq.n	800233a <HAL_GPIO_Init+0x21e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4f      	ldr	r2, [pc, #316]	; (800246c <HAL_GPIO_Init+0x350>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_GPIO_Init+0x21a>
 8002332:	2309      	movs	r3, #9
 8002334:	e012      	b.n	800235c <HAL_GPIO_Init+0x240>
 8002336:	230a      	movs	r3, #10
 8002338:	e010      	b.n	800235c <HAL_GPIO_Init+0x240>
 800233a:	2308      	movs	r3, #8
 800233c:	e00e      	b.n	800235c <HAL_GPIO_Init+0x240>
 800233e:	2307      	movs	r3, #7
 8002340:	e00c      	b.n	800235c <HAL_GPIO_Init+0x240>
 8002342:	2306      	movs	r3, #6
 8002344:	e00a      	b.n	800235c <HAL_GPIO_Init+0x240>
 8002346:	2305      	movs	r3, #5
 8002348:	e008      	b.n	800235c <HAL_GPIO_Init+0x240>
 800234a:	2304      	movs	r3, #4
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x240>
 800234e:	2303      	movs	r3, #3
 8002350:	e004      	b.n	800235c <HAL_GPIO_Init+0x240>
 8002352:	2302      	movs	r3, #2
 8002354:	e002      	b.n	800235c <HAL_GPIO_Init+0x240>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_GPIO_Init+0x240>
 800235a:	2300      	movs	r3, #0
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	f002 0203 	and.w	r2, r2, #3
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	4093      	lsls	r3, r2
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800236c:	4935      	ldr	r1, [pc, #212]	; (8002444 <HAL_GPIO_Init+0x328>)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <HAL_GPIO_Init+0x354>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800239e:	4a34      	ldr	r2, [pc, #208]	; (8002470 <HAL_GPIO_Init+0x354>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <HAL_GPIO_Init+0x354>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c8:	4a29      	ldr	r2, [pc, #164]	; (8002470 <HAL_GPIO_Init+0x354>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <HAL_GPIO_Init+0x354>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f2:	4a1f      	ldr	r2, [pc, #124]	; (8002470 <HAL_GPIO_Init+0x354>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_GPIO_Init+0x354>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800241c:	4a14      	ldr	r2, [pc, #80]	; (8002470 <HAL_GPIO_Init+0x354>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3301      	adds	r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b0f      	cmp	r3, #15
 800242c:	f67f ae86 	bls.w	800213c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40013800 	.word	0x40013800
 8002448:	40020000 	.word	0x40020000
 800244c:	40020400 	.word	0x40020400
 8002450:	40020800 	.word	0x40020800
 8002454:	40020c00 	.word	0x40020c00
 8002458:	40021000 	.word	0x40021000
 800245c:	40021400 	.word	0x40021400
 8002460:	40021800 	.word	0x40021800
 8002464:	40021c00 	.word	0x40021c00
 8002468:	40022000 	.word	0x40022000
 800246c:	40022400 	.word	0x40022400
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	619a      	str	r2, [r3, #24]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b6:	6013      	str	r3, [r2, #0]
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40007000 	.word	0x40007000

080024c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <HAL_PWREx_EnableOverDrive+0x98>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_PWREx_EnableOverDrive+0x98>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_PWREx_EnableOverDrive+0x98>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f6:	f7ff fc6d 	bl	8001dd4 <HAL_GetTick>
 80024fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024fc:	e009      	b.n	8002512 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024fe:	f7ff fc69 	bl	8001dd4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800250c:	d901      	bls.n	8002512 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e022      	b.n	8002558 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251e:	d1ee      	bne.n	80024fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800252c:	f7ff fc52 	bl	8001dd4 <HAL_GetTick>
 8002530:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002532:	e009      	b.n	8002548 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002534:	f7ff fc4e 	bl	8001dd4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002542:	d901      	bls.n	8002548 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e007      	b.n	8002558 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_PWREx_EnableOverDrive+0x9c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002554:	d1ee      	bne.n	8002534 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	40007000 	.word	0x40007000

08002568 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e291      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8087 	beq.w	800269a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800258c:	4b96      	ldr	r3, [pc, #600]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b04      	cmp	r3, #4
 8002596:	d00c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002598:	4b93      	ldr	r3, [pc, #588]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 030c 	and.w	r3, r3, #12
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d112      	bne.n	80025ca <HAL_RCC_OscConfig+0x62>
 80025a4:	4b90      	ldr	r3, [pc, #576]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b0:	d10b      	bne.n	80025ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b2:	4b8d      	ldr	r3, [pc, #564]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d06c      	beq.n	8002698 <HAL_RCC_OscConfig+0x130>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d168      	bne.n	8002698 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e26b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x7a>
 80025d4:	4b84      	ldr	r3, [pc, #528]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a83      	ldr	r2, [pc, #524]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	e02e      	b.n	8002640 <HAL_RCC_OscConfig+0xd8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0x9c>
 80025ea:	4b7f      	ldr	r3, [pc, #508]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a7e      	ldr	r2, [pc, #504]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b7c      	ldr	r3, [pc, #496]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7b      	ldr	r2, [pc, #492]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80025fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e01d      	b.n	8002640 <HAL_RCC_OscConfig+0xd8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0xc0>
 800260e:	4b76      	ldr	r3, [pc, #472]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a75      	ldr	r2, [pc, #468]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a72      	ldr	r2, [pc, #456]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0xd8>
 8002628:	4b6f      	ldr	r3, [pc, #444]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6e      	ldr	r2, [pc, #440]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b6c      	ldr	r3, [pc, #432]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a6b      	ldr	r2, [pc, #428]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800263a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff fbc4 	bl	8001dd4 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002650:	f7ff fbc0 	bl	8001dd4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e21f      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0xe8>
 800266e:	e014      	b.n	800269a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7ff fbb0 	bl	8001dd4 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002678:	f7ff fbac 	bl	8001dd4 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e20b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	4b57      	ldr	r3, [pc, #348]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x110>
 8002696:	e000      	b.n	800269a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d069      	beq.n	800277a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a6:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b4d      	ldr	r3, [pc, #308]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x190>
 80026be:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1df      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	493d      	ldr	r1, [pc, #244]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e040      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d023      	beq.n	8002748 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a38      	ldr	r2, [pc, #224]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7ff fb62 	bl	8001dd4 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002714:	f7ff fb5e 	bl	8001dd4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e1bd      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4929      	ldr	r1, [pc, #164]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]
 8002746:	e018      	b.n	800277a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7ff fb3e 	bl	8001dd4 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275c:	f7ff fb3a 	bl	8001dd4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e199      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d038      	beq.n	80027f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d019      	beq.n	80027c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002792:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7ff fb1b 	bl	8001dd4 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a2:	f7ff fb17 	bl	8001dd4 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e176      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x23a>
 80027c0:	e01a      	b.n	80027f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80027c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_RCC_OscConfig+0x280>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7ff fb01 	bl	8001dd4 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d6:	f7ff fafd 	bl	8001dd4 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d903      	bls.n	80027ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e15c      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
 80027e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	4b91      	ldr	r3, [pc, #580]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ee      	bne.n	80027d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80a4 	beq.w	800294e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4b8b      	ldr	r3, [pc, #556]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10d      	bne.n	800282e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	4b88      	ldr	r3, [pc, #544]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a87      	ldr	r2, [pc, #540]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b85      	ldr	r3, [pc, #532]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282e:	4b82      	ldr	r3, [pc, #520]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d118      	bne.n	800286c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800283a:	4b7f      	ldr	r3, [pc, #508]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a7e      	ldr	r2, [pc, #504]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002846:	f7ff fac5 	bl	8001dd4 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284e:	f7ff fac1 	bl	8001dd4 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b64      	cmp	r3, #100	; 0x64
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e120      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002860:	4b75      	ldr	r3, [pc, #468]	; (8002a38 <HAL_RCC_OscConfig+0x4d0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x31a>
 8002874:	4b6f      	ldr	r3, [pc, #444]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	4a6e      	ldr	r2, [pc, #440]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	; 0x70
 8002880:	e02d      	b.n	80028de <HAL_RCC_OscConfig+0x376>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x33c>
 800288a:	4b6a      	ldr	r3, [pc, #424]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4a69      	ldr	r2, [pc, #420]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
 8002896:	4b67      	ldr	r3, [pc, #412]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	4a66      	ldr	r2, [pc, #408]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 800289c:	f023 0304 	bic.w	r3, r3, #4
 80028a0:	6713      	str	r3, [r2, #112]	; 0x70
 80028a2:	e01c      	b.n	80028de <HAL_RCC_OscConfig+0x376>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d10c      	bne.n	80028c6 <HAL_RCC_OscConfig+0x35e>
 80028ac:	4b61      	ldr	r3, [pc, #388]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4a60      	ldr	r2, [pc, #384]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	6713      	str	r3, [r2, #112]	; 0x70
 80028b8:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028bc:	4a5d      	ldr	r2, [pc, #372]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	; 0x70
 80028c4:	e00b      	b.n	80028de <HAL_RCC_OscConfig+0x376>
 80028c6:	4b5b      	ldr	r3, [pc, #364]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a5a      	ldr	r2, [pc, #360]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
 80028d2:	4b58      	ldr	r3, [pc, #352]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a57      	ldr	r2, [pc, #348]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d015      	beq.n	8002912 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e6:	f7ff fa75 	bl	8001dd4 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7ff fa71 	bl	8001dd4 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e0ce      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ee      	beq.n	80028ee <HAL_RCC_OscConfig+0x386>
 8002910:	e014      	b.n	800293c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002912:	f7ff fa5f 	bl	8001dd4 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002918:	e00a      	b.n	8002930 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7ff fa5b 	bl	8001dd4 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0b8      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002930:	4b40      	ldr	r3, [pc, #256]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1ee      	bne.n	800291a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800293c:	7dfb      	ldrb	r3, [r7, #23]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d105      	bne.n	800294e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002942:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a3b      	ldr	r2, [pc, #236]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80a4 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002958:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d06b      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d149      	bne.n	8002a00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296c:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a30      	ldr	r2, [pc, #192]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff fa2c 	bl	8001dd4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7ff fa28 	bl	8001dd4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e087      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	019b      	lsls	r3, r3, #6
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	3b01      	subs	r3, #1
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	061b      	lsls	r3, r3, #24
 80029c2:	4313      	orrs	r3, r2
 80029c4:	4a1b      	ldr	r2, [pc, #108]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80029c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80029d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7ff f9fc 	bl	8001dd4 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7ff f9f8 	bl	8001dd4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e057      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x478>
 80029fe:	e04f      	b.n	8002aa0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7ff f9e2 	bl	8001dd4 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7ff f9de 	bl	8001dd4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e03d      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_RCC_OscConfig+0x4cc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4ac>
 8002a32:	e035      	b.n	8002aa0 <HAL_RCC_OscConfig+0x538>
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_RCC_OscConfig+0x544>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d028      	beq.n	8002a9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d121      	bne.n	8002a9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d11a      	bne.n	8002a9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d111      	bne.n	8002a9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	085b      	lsrs	r3, r3, #1
 8002a84:	3b01      	subs	r3, #1
 8002a86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800

08002ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0d0      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d910      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 020f 	bic.w	r2, r3, #15
 8002ade:	4965      	ldr	r1, [pc, #404]	; (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b63      	ldr	r3, [pc, #396]	; (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b8      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a58      	ldr	r2, [pc, #352]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b28:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a52      	ldr	r2, [pc, #328]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	494d      	ldr	r1, [pc, #308]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d040      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d115      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b72:	4b41      	ldr	r3, [pc, #260]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e073      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b82:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e06b      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b92:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4936      	ldr	r1, [pc, #216]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba4:	f7ff f916 	bl	8001dd4 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bac:	f7ff f912 	bl	8001dd4 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e053      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 020c 	and.w	r2, r3, #12
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1eb      	bne.n	8002bac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d210      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 020f 	bic.w	r2, r3, #15
 8002bea:	4922      	ldr	r1, [pc, #136]	; (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e032      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4916      	ldr	r1, [pc, #88]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	490e      	ldr	r1, [pc, #56]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c42:	f000 f821 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	490a      	ldr	r1, [pc, #40]	; (8002c7c <HAL_RCC_ClockConfig+0x1cc>)
 8002c54:	5ccb      	ldrb	r3, [r1, r3]
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <HAL_RCC_ClockConfig+0x1d0>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x1d4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe ff30 	bl	8001ac8 <HAL_InitTick>

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023c00 	.word	0x40023c00
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	0800694c 	.word	0x0800694c
 8002c80:	20000008 	.word	0x20000008
 8002c84:	2000000c 	.word	0x2000000c

08002c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c8e:	2100      	movs	r1, #0
 8002c90:	6079      	str	r1, [r7, #4]
 8002c92:	2100      	movs	r1, #0
 8002c94:	60f9      	str	r1, [r7, #12]
 8002c96:	2100      	movs	r1, #0
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c9e:	4952      	ldr	r1, [pc, #328]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ca0:	6889      	ldr	r1, [r1, #8]
 8002ca2:	f001 010c 	and.w	r1, r1, #12
 8002ca6:	2908      	cmp	r1, #8
 8002ca8:	d00d      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x3e>
 8002caa:	2908      	cmp	r1, #8
 8002cac:	f200 8094 	bhi.w	8002dd8 <HAL_RCC_GetSysClockFreq+0x150>
 8002cb0:	2900      	cmp	r1, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x32>
 8002cb4:	2904      	cmp	r1, #4
 8002cb6:	d003      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x38>
 8002cb8:	e08e      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cba:	4b4c      	ldr	r3, [pc, #304]	; (8002dec <HAL_RCC_GetSysClockFreq+0x164>)
 8002cbc:	60bb      	str	r3, [r7, #8]
      break;
 8002cbe:	e08e      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc0:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002cc2:	60bb      	str	r3, [r7, #8]
      break;
 8002cc4:	e08b      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc6:	4948      	ldr	r1, [pc, #288]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cc8:	6849      	ldr	r1, [r1, #4]
 8002cca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002cce:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002cd0:	4945      	ldr	r1, [pc, #276]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cd2:	6849      	ldr	r1, [r1, #4]
 8002cd4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002cd8:	2900      	cmp	r1, #0
 8002cda:	d024      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cdc:	4942      	ldr	r1, [pc, #264]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cde:	6849      	ldr	r1, [r1, #4]
 8002ce0:	0989      	lsrs	r1, r1, #6
 8002ce2:	4608      	mov	r0, r1
 8002ce4:	f04f 0100 	mov.w	r1, #0
 8002ce8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002cec:	f04f 0500 	mov.w	r5, #0
 8002cf0:	ea00 0204 	and.w	r2, r0, r4
 8002cf4:	ea01 0305 	and.w	r3, r1, r5
 8002cf8:	493d      	ldr	r1, [pc, #244]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002cfa:	fb01 f003 	mul.w	r0, r1, r3
 8002cfe:	2100      	movs	r1, #0
 8002d00:	fb01 f102 	mul.w	r1, r1, r2
 8002d04:	1844      	adds	r4, r0, r1
 8002d06:	493a      	ldr	r1, [pc, #232]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d08:	fba2 0101 	umull	r0, r1, r2, r1
 8002d0c:	1863      	adds	r3, r4, r1
 8002d0e:	4619      	mov	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	f7fd faca 	bl	80002b0 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e04a      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d26:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d36:	f04f 0100 	mov.w	r1, #0
 8002d3a:	ea02 0400 	and.w	r4, r2, r0
 8002d3e:	ea03 0501 	and.w	r5, r3, r1
 8002d42:	4620      	mov	r0, r4
 8002d44:	4629      	mov	r1, r5
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	014b      	lsls	r3, r1, #5
 8002d50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d54:	0142      	lsls	r2, r0, #5
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	1b00      	subs	r0, r0, r4
 8002d5c:	eb61 0105 	sbc.w	r1, r1, r5
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	018b      	lsls	r3, r1, #6
 8002d6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d6e:	0182      	lsls	r2, r0, #6
 8002d70:	1a12      	subs	r2, r2, r0
 8002d72:	eb63 0301 	sbc.w	r3, r3, r1
 8002d76:	f04f 0000 	mov.w	r0, #0
 8002d7a:	f04f 0100 	mov.w	r1, #0
 8002d7e:	00d9      	lsls	r1, r3, #3
 8002d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d84:	00d0      	lsls	r0, r2, #3
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	1912      	adds	r2, r2, r4
 8002d8c:	eb45 0303 	adc.w	r3, r5, r3
 8002d90:	f04f 0000 	mov.w	r0, #0
 8002d94:	f04f 0100 	mov.w	r1, #0
 8002d98:	0299      	lsls	r1, r3, #10
 8002d9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d9e:	0290      	lsls	r0, r2, #10
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	f7fd fa7e 	bl	80002b0 <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4613      	mov	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	60bb      	str	r3, [r7, #8]
      break;
 8002dd6:	e002      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <HAL_RCC_GetSysClockFreq+0x164>)
 8002dda:	60bb      	str	r3, [r7, #8]
      break;
 8002ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dde:	68bb      	ldr	r3, [r7, #8]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bdb0      	pop	{r4, r5, r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	017d7840 	.word	0x017d7840

08002df4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000008 	.word	0x20000008

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e10:	f7ff fff0 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	0800695c 	.word	0x0800695c

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e38:	f7ff ffdc 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0b5b      	lsrs	r3, r3, #13
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	0800695c 	.word	0x0800695c

08002e5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	220f      	movs	r2, #15
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_RCC_GetClockConfig+0x60>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	601a      	str	r2, [r3, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40023c00 	.word	0x40023c00

08002ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d012      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ee8:	4b69      	ldr	r3, [pc, #420]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a68      	ldr	r2, [pc, #416]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ef2:	6093      	str	r3, [r2, #8]
 8002ef4:	4b66      	ldr	r3, [pc, #408]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efc:	4964      	ldr	r1, [pc, #400]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d017      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	4959      	ldr	r1, [pc, #356]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f38:	d101      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d017      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f56:	4b4e      	ldr	r3, [pc, #312]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	494a      	ldr	r1, [pc, #296]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f74:	d101      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f92:	2301      	movs	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 808b 	beq.w	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fa4:	4b3a      	ldr	r3, [pc, #232]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	4a39      	ldr	r2, [pc, #228]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fae:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb0:	4b37      	ldr	r3, [pc, #220]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a34      	ldr	r2, [pc, #208]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc8:	f7fe ff04 	bl	8001dd4 <HAL_GetTick>
 8002fcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd0:	f7fe ff00 	bl	8001dd4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e357      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fee:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d035      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	429a      	cmp	r2, r3
 800300a:	d02e      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800300c:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003014:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003016:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800302e:	4a18      	ldr	r2, [pc, #96]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d114      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fec8 	bl	8001dd4 <HAL_GetTick>
 8003044:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	e00a      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe fec4 	bl	8001dd4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e319      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0ee      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003076:	d111      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003086:	400b      	ands	r3, r1
 8003088:	4901      	ldr	r1, [pc, #4]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
 800308e:	e00b      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003090:	40023800 	.word	0x40023800
 8003094:	40007000 	.word	0x40007000
 8003098:	0ffffcff 	.word	0x0ffffcff
 800309c:	4bb1      	ldr	r3, [pc, #708]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4ab0      	ldr	r2, [pc, #704]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030a6:	6093      	str	r3, [r2, #8]
 80030a8:	4bae      	ldr	r3, [pc, #696]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b4:	49ab      	ldr	r1, [pc, #684]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d010      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030c6:	4ba7      	ldr	r3, [pc, #668]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030cc:	4aa5      	ldr	r2, [pc, #660]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030d6:	4ba3      	ldr	r3, [pc, #652]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	49a0      	ldr	r1, [pc, #640]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030f4:	4b9b      	ldr	r3, [pc, #620]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003102:	4998      	ldr	r1, [pc, #608]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003116:	4b93      	ldr	r3, [pc, #588]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003124:	498f      	ldr	r1, [pc, #572]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003138:	4b8a      	ldr	r3, [pc, #552]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003146:	4987      	ldr	r1, [pc, #540]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800315a:	4b82      	ldr	r3, [pc, #520]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	497e      	ldr	r1, [pc, #504]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800317c:	4b79      	ldr	r3, [pc, #484]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4976      	ldr	r1, [pc, #472]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800319e:	4b71      	ldr	r3, [pc, #452]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f023 020c 	bic.w	r2, r3, #12
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ac:	496d      	ldr	r1, [pc, #436]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031c0:	4b68      	ldr	r3, [pc, #416]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	4965      	ldr	r1, [pc, #404]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031e2:	4b60      	ldr	r3, [pc, #384]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f0:	495c      	ldr	r1, [pc, #368]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003204:	4b57      	ldr	r3, [pc, #348]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	4954      	ldr	r1, [pc, #336]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003226:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	494b      	ldr	r1, [pc, #300]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003248:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	4943      	ldr	r1, [pc, #268]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800326a:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	493a      	ldr	r1, [pc, #232]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800328c:	4b35      	ldr	r3, [pc, #212]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329a:	4932      	ldr	r1, [pc, #200]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d011      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032bc:	4929      	ldr	r1, [pc, #164]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032cc:	d101      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032de:	2301      	movs	r3, #1
 80032e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fc:	4919      	ldr	r1, [pc, #100]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00b      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003320:	4910      	ldr	r1, [pc, #64]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d006      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 80d9 	beq.w	80034ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a08      	ldr	r2, [pc, #32]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003342:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003348:	f7fe fd44 	bl	8001dd4 <HAL_GetTick>
 800334c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800334e:	e00b      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003350:	f7fe fd40 	bl	8001dd4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d904      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e197      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003368:	4b6c      	ldr	r3, [pc, #432]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ed      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d021      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	2b00      	cmp	r3, #0
 8003386:	d11d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003388:	4b64      	ldr	r3, [pc, #400]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338e:	0c1b      	lsrs	r3, r3, #16
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003396:	4b61      	ldr	r3, [pc, #388]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339c:	0e1b      	lsrs	r3, r3, #24
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	019a      	lsls	r2, r3, #6
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	431a      	orrs	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	071b      	lsls	r3, r3, #28
 80033bc:	4957      	ldr	r1, [pc, #348]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d02e      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ee:	d129      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033f0:	4b4a      	ldr	r3, [pc, #296]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f6:	0c1b      	lsrs	r3, r3, #16
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003404:	0f1b      	lsrs	r3, r3, #28
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	019a      	lsls	r2, r3, #6
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	431a      	orrs	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	071b      	lsls	r3, r3, #28
 8003424:	493d      	ldr	r1, [pc, #244]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800342c:	4b3b      	ldr	r3, [pc, #236]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800342e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003432:	f023 021f 	bic.w	r2, r3, #31
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	3b01      	subs	r3, #1
 800343c:	4937      	ldr	r1, [pc, #220]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01d      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003450:	4b32      	ldr	r3, [pc, #200]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003456:	0e1b      	lsrs	r3, r3, #24
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800345e:	4b2f      	ldr	r3, [pc, #188]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003464:	0f1b      	lsrs	r3, r3, #28
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	019a      	lsls	r2, r3, #6
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	431a      	orrs	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	431a      	orrs	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	071b      	lsls	r3, r3, #28
 8003484:	4925      	ldr	r1, [pc, #148]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d011      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	019a      	lsls	r2, r3, #6
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	041b      	lsls	r3, r3, #16
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	061b      	lsls	r3, r3, #24
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	071b      	lsls	r3, r3, #28
 80034b4:	4919      	ldr	r1, [pc, #100]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034bc:	4b17      	ldr	r3, [pc, #92]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c8:	f7fe fc84 	bl	8001dd4 <HAL_GetTick>
 80034cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034d0:	f7fe fc80 	bl	8001dd4 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e0d7      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	f040 80cd 	bne.w	8003690 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a08      	ldr	r2, [pc, #32]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003502:	f7fe fc67 	bl	8001dd4 <HAL_GetTick>
 8003506:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800350a:	f7fe fc63 	bl	8001dd4 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b64      	cmp	r3, #100	; 0x64
 8003516:	d903      	bls.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e0ba      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800351c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003520:	4b5e      	ldr	r3, [pc, #376]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352c:	d0ed      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02e      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d12a      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003556:	4b51      	ldr	r3, [pc, #324]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003564:	4b4d      	ldr	r3, [pc, #308]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	0f1b      	lsrs	r3, r3, #28
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	019a      	lsls	r2, r3, #6
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	071b      	lsls	r3, r3, #28
 800358a:	4944      	ldr	r1, [pc, #272]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003592:	4b42      	ldr	r3, [pc, #264]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003598:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	3b01      	subs	r3, #1
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	493d      	ldr	r1, [pc, #244]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d022      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035c0:	d11d      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	0e1b      	lsrs	r3, r3, #24
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035d0:	4b32      	ldr	r3, [pc, #200]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	0f1b      	lsrs	r3, r3, #28
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	019a      	lsls	r2, r3, #6
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	431a      	orrs	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	061b      	lsls	r3, r3, #24
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	071b      	lsls	r3, r3, #28
 80035f6:	4929      	ldr	r1, [pc, #164]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d028      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	0e1b      	lsrs	r3, r3, #24
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003618:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	0c1b      	lsrs	r3, r3, #16
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	019a      	lsls	r2, r3, #6
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	041b      	lsls	r3, r3, #16
 8003630:	431a      	orrs	r2, r3
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	071b      	lsls	r3, r3, #28
 800363e:	4917      	ldr	r1, [pc, #92]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800364c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	4911      	ldr	r1, [pc, #68]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0e      	ldr	r2, [pc, #56]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003668:	f7fe fbb4 	bl	8001dd4 <HAL_GetTick>
 800366c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003670:	f7fe fbb0 	bl	8001dd4 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e007      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800368a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368e:	d1ef      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800

080036a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e081      	b.n	80037b6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	7f5b      	ldrb	r3, [r3, #29]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fe f960 	bl	8001988 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	22ca      	movs	r2, #202	; 0xca
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2253      	movs	r2, #83	; 0x53
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f9fe 	bl	8003ae0 <RTC_EnterInitMode>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	22ff      	movs	r2, #255	; 0xff
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2204      	movs	r2, #4
 80036f6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e05c      	b.n	80037b6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6899      	ldr	r1, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <HAL_RTC_Init+0x120>)
 8003708:	400b      	ands	r3, r1
 800370a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68d2      	ldr	r2, [r2, #12]
 8003732:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6919      	ldr	r1, [r3, #16]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	041a      	lsls	r2, r3, #16
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003756:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10e      	bne.n	8003784 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f992 	bl	8003a90 <HAL_RTC_WaitForSynchro>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	22ff      	movs	r2, #255	; 0xff
 8003778:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2204      	movs	r2, #4
 800377e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e018      	b.n	80037b6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0208 	bic.w	r2, r2, #8
 8003792:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	22ff      	movs	r2, #255	; 0xff
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
  }
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	ff8fffbf 	.word	0xff8fffbf

080037c4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	7f1b      	ldrb	r3, [r3, #28]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_RTC_SetTime+0x1c>
 80037dc:	2302      	movs	r3, #2
 80037de:	e0a8      	b.n	8003932 <HAL_RTC_SetTime+0x16e>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2202      	movs	r2, #2
 80037ea:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d126      	bne.n	8003840 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2200      	movs	r2, #0
 8003804:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f994 	bl	8003b38 <RTC_ByteToBcd2>
 8003810:	4603      	mov	r3, r0
 8003812:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f98d 	bl	8003b38 <RTC_ByteToBcd2>
 800381e:	4603      	mov	r3, r0
 8003820:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003822:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	789b      	ldrb	r3, [r3, #2]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 f985 	bl	8003b38 <RTC_ByteToBcd2>
 800382e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003830:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	7b1b      	ldrb	r3, [r3, #12]
 8003838:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	e018      	b.n	8003872 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2200      	movs	r2, #0
 8003852:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	785b      	ldrb	r3, [r3, #1]
 800385e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003860:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003866:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	7b1b      	ldrb	r3, [r3, #12]
 800386c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	22ca      	movs	r2, #202	; 0xca
 8003878:	625a      	str	r2, [r3, #36]	; 0x24
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2253      	movs	r2, #83	; 0x53
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f92c 	bl	8003ae0 <RTC_EnterInitMode>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	22ff      	movs	r2, #255	; 0xff
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2204      	movs	r2, #4
 800389a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e045      	b.n	8003932 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	6979      	ldr	r1, [r7, #20]
 80038ac:	4b23      	ldr	r3, [pc, #140]	; (800393c <HAL_RTC_SetTime+0x178>)
 80038ae:	400b      	ands	r3, r1
 80038b0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038c0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6899      	ldr	r1, [r3, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038e8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d111      	bne.n	800391c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f8c9 	bl	8003a90 <HAL_RTC_WaitForSynchro>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	22ff      	movs	r2, #255	; 0xff
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2204      	movs	r2, #4
 8003910:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e00a      	b.n	8003932 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	22ff      	movs	r2, #255	; 0xff
 8003922:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003930:	2300      	movs	r3, #0
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	bd90      	pop	{r4, r7, pc}
 800393a:	bf00      	nop
 800393c:	007f7f7f 	.word	0x007f7f7f

08003940 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	7f1b      	ldrb	r3, [r3, #28]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_RTC_SetDate+0x1c>
 8003958:	2302      	movs	r3, #2
 800395a:	e092      	b.n	8003a82 <HAL_RTC_SetDate+0x142>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2202      	movs	r2, #2
 8003966:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10e      	bne.n	800398c <HAL_RTC_SetDate+0x4c>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	785b      	ldrb	r3, [r3, #1]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	785b      	ldrb	r3, [r3, #1]
 800397e:	f023 0310 	bic.w	r3, r3, #16
 8003982:	b2db      	uxtb	r3, r3
 8003984:	330a      	adds	r3, #10
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11c      	bne.n	80039cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	78db      	ldrb	r3, [r3, #3]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f8ce 	bl	8003b38 <RTC_ByteToBcd2>
 800399c:	4603      	mov	r3, r0
 800399e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	785b      	ldrb	r3, [r3, #1]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f8c7 	bl	8003b38 <RTC_ByteToBcd2>
 80039aa:	4603      	mov	r3, r0
 80039ac:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80039ae:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	789b      	ldrb	r3, [r3, #2]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f8bf 	bl	8003b38 <RTC_ByteToBcd2>
 80039ba:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80039bc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e00e      	b.n	80039ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	78db      	ldrb	r3, [r3, #3]
 80039d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	785b      	ldrb	r3, [r3, #1]
 80039d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80039d8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80039de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	22ca      	movs	r2, #202	; 0xca
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2253      	movs	r2, #83	; 0x53
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f870 	bl	8003ae0 <RTC_EnterInitMode>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	22ff      	movs	r2, #255	; 0xff
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2204      	movs	r2, #4
 8003a12:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e031      	b.n	8003a82 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	6979      	ldr	r1, [r7, #20]
 8003a24:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <HAL_RTC_SetDate+0x14c>)
 8003a26:	400b      	ands	r3, r1
 8003a28:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a38:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d111      	bne.n	8003a6c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f821 	bl	8003a90 <HAL_RTC_WaitForSynchro>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	22ff      	movs	r2, #255	; 0xff
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2204      	movs	r2, #4
 8003a60:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e00a      	b.n	8003a82 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	22ff      	movs	r2, #255	; 0xff
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
  }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd90      	pop	{r4, r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	00ffff3f 	.word	0x00ffff3f

08003a90 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aaa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003aac:	f7fe f992 	bl	8001dd4 <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003ab2:	e009      	b.n	8003ac8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ab4:	f7fe f98e 	bl	8001dd4 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e007      	b.n	8003ad8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0ee      	beq.n	8003ab4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d119      	bne.n	8003b2e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f04f 32ff 	mov.w	r2, #4294967295
 8003b02:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b04:	f7fe f966 	bl	8001dd4 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b0a:	e009      	b.n	8003b20 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b0c:	f7fe f962 	bl	8001dd4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b1a:	d901      	bls.n	8003b20 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e007      	b.n	8003b30 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0ee      	beq.n	8003b0c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8003b46:	e005      	b.n	8003b54 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	3b0a      	subs	r3, #10
 8003b52:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	2b09      	cmp	r3, #9
 8003b58:	d8f6      	bhi.n	8003b48 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	b2db      	uxtb	r3, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e049      	b.n	8003c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f841 	bl	8003c22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f000 fa00 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d001      	beq.n	8003c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e054      	b.n	8003cfa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d022      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7a:	d01d      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <HAL_TIM_Base_Start_IT+0xd4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d018      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a21      	ldr	r2, [pc, #132]	; (8003d10 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00e      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d009      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_TIM_Base_Start_IT+0xe4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_TIM_Base_Start_IT+0x80>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d115      	bne.n	8003ce4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <HAL_TIM_Base_Start_IT+0xec>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d015      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0xbe>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd0:	d011      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce2:	e008      	b.n	8003cf6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e000      	b.n	8003cf8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00
 8003d18:	40010400 	.word	0x40010400
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	40001800 	.word	0x40001800
 8003d24:	00010007 	.word	0x00010007

08003d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0202 	mvn.w	r2, #2
 8003d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f905 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f8f7 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f908 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d122      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0204 	mvn.w	r2, #4
 8003da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f8db 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f8cd 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f8de 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d122      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d11b      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0208 	mvn.w	r2, #8
 8003dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2204      	movs	r2, #4
 8003e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f8b1 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8a3 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f8b4 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d122      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d11b      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0210 	mvn.w	r2, #16
 8003e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2208      	movs	r2, #8
 8003e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f887 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f879 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f88a 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10e      	bne.n	8003eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d107      	bne.n	8003eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0201 	mvn.w	r2, #1
 8003ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd fd32 	bl	8001910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f91a 	bl	800410c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee6:	d10e      	bne.n	8003f06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b80      	cmp	r3, #128	; 0x80
 8003ef4:	d107      	bne.n	8003f06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f90d 	bl	8004120 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d10e      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d107      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f838 	bl	8003fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d10e      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d107      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f06f 0220 	mvn.w	r2, #32
 8003f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f8cd 	bl	80040f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a40      	ldr	r2, [pc, #256]	; (80040cc <TIM_Base_SetConfig+0x114>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd6:	d00f      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3d      	ldr	r2, [pc, #244]	; (80040d0 <TIM_Base_SetConfig+0x118>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00b      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3c      	ldr	r2, [pc, #240]	; (80040d4 <TIM_Base_SetConfig+0x11c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d007      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3b      	ldr	r2, [pc, #236]	; (80040d8 <TIM_Base_SetConfig+0x120>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3a      	ldr	r2, [pc, #232]	; (80040dc <TIM_Base_SetConfig+0x124>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d108      	bne.n	800400a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <TIM_Base_SetConfig+0x114>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d02b      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004018:	d027      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <TIM_Base_SetConfig+0x118>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d023      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2b      	ldr	r2, [pc, #172]	; (80040d4 <TIM_Base_SetConfig+0x11c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d01f      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <TIM_Base_SetConfig+0x120>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01b      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a29      	ldr	r2, [pc, #164]	; (80040dc <TIM_Base_SetConfig+0x124>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d017      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a28      	ldr	r2, [pc, #160]	; (80040e0 <TIM_Base_SetConfig+0x128>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a27      	ldr	r2, [pc, #156]	; (80040e4 <TIM_Base_SetConfig+0x12c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00f      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a26      	ldr	r2, [pc, #152]	; (80040e8 <TIM_Base_SetConfig+0x130>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00b      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a25      	ldr	r2, [pc, #148]	; (80040ec <TIM_Base_SetConfig+0x134>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d007      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <TIM_Base_SetConfig+0x138>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a23      	ldr	r2, [pc, #140]	; (80040f4 <TIM_Base_SetConfig+0x13c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d108      	bne.n	800407c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <TIM_Base_SetConfig+0x114>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0xf8>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <TIM_Base_SetConfig+0x124>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d103      	bne.n	80040b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	615a      	str	r2, [r3, #20]
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40010400 	.word	0x40010400
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800
 80040ec:	40001800 	.word	0x40001800
 80040f0:	40001c00 	.word	0x40001c00
 80040f4:	40002000 	.word	0x40002000

080040f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e040      	b.n	80041c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fd fc30 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2224      	movs	r2, #36	; 0x24
 8004160:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fc5c 	bl	8004a30 <UART_SetConfig>
 8004178:	4603      	mov	r3, r0
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e022      	b.n	80041c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 feb2 	bl	8004ef4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800419e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 ff39 	bl	8005038 <UART_CheckIdleState>
 80041c6:	4603      	mov	r3, r0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	; 0x28
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	4613      	mov	r3, r2
 80041de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	f040 8081 	bne.w	80042ec <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_UART_Transmit+0x26>
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e079      	b.n	80042ee <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_UART_Transmit+0x38>
 8004204:	2302      	movs	r3, #2
 8004206:	e072      	b.n	80042ee <HAL_UART_Transmit+0x11e>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2221      	movs	r2, #33	; 0x21
 800421c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800421e:	f7fd fdd9 	bl	8001dd4 <HAL_GetTick>
 8004222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d108      	bne.n	8004250 <HAL_UART_Transmit+0x80>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d104      	bne.n	8004250 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	61bb      	str	r3, [r7, #24]
 800424e:	e003      	b.n	8004258 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004260:	e02c      	b.n	80042bc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	2180      	movs	r1, #128	; 0x80
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 ff16 	bl	800509e <UART_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e038      	b.n	80042ee <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10b      	bne.n	800429a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004290:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	3302      	adds	r3, #2
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e007      	b.n	80042aa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	3301      	adds	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1cc      	bne.n	8004262 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2140      	movs	r1, #64	; 0x40
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fee3 	bl	800509e <UART_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e005      	b.n	80042ee <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e000      	b.n	80042ee <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80042ec:	2302      	movs	r3, #2
  }
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3720      	adds	r7, #32
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b08b      	sub	sp, #44	; 0x2c
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	4613      	mov	r3, r2
 8004304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430a:	2b20      	cmp	r3, #32
 800430c:	d156      	bne.n	80043bc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_UART_Transmit_IT+0x22>
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e04f      	b.n	80043be <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_UART_Transmit_IT+0x34>
 8004328:	2302      	movs	r3, #2
 800432a:	e048      	b.n	80043be <HAL_UART_Transmit_IT+0xc6>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	88fa      	ldrh	r2, [r7, #6]
 8004346:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2221      	movs	r2, #33	; 0x21
 800435c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004366:	d107      	bne.n	8004378 <HAL_UART_Transmit_IT+0x80>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d103      	bne.n	8004378 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a16      	ldr	r2, [pc, #88]	; (80043cc <HAL_UART_Transmit_IT+0xd4>)
 8004374:	669a      	str	r2, [r3, #104]	; 0x68
 8004376:	e002      	b.n	800437e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4a15      	ldr	r2, [pc, #84]	; (80043d0 <HAL_UART_Transmit_IT+0xd8>)
 800437c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	613b      	str	r3, [r7, #16]
   return(result);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	623b      	str	r3, [r7, #32]
 80043a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	69f9      	ldr	r1, [r7, #28]
 80043aa:	6a3a      	ldr	r2, [r7, #32]
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e6      	bne.n	8004386 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
  }
}
 80043be:	4618      	mov	r0, r3
 80043c0:	372c      	adds	r7, #44	; 0x2c
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	08005565 	.word	0x08005565
 80043d0:	080054af 	.word	0x080054af

080043d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d13d      	bne.n	8004466 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_UART_Receive_IT+0x22>
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e036      	b.n	8004468 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_UART_Receive_IT+0x34>
 8004404:	2302      	movs	r3, #2
 8004406:	e02f      	b.n	8004468 <HAL_UART_Receive_IT+0x94>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d018      	beq.n	8004456 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	613b      	str	r3, [r7, #16]
   return(result);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	623b      	str	r3, [r7, #32]
 8004444:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	69f9      	ldr	r1, [r7, #28]
 8004448:	6a3a      	ldr	r2, [r7, #32]
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e6      	bne.n	8004424 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	461a      	mov	r2, r3
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fee3 	bl	8005228 <UART_Start_Receive_IT>
 8004462:	4603      	mov	r3, r0
 8004464:	e000      	b.n	8004468 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3728      	adds	r7, #40	; 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b0ba      	sub	sp, #232	; 0xe8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004496:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800449a:	f640 030f 	movw	r3, #2063	; 0x80f
 800449e:	4013      	ands	r3, r2
 80044a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80044a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d115      	bne.n	80044d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00f      	beq.n	80044d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 828f 	beq.w	80049ec <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	4798      	blx	r3
      }
      return;
 80044d6:	e289      	b.n	80049ec <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8117 	beq.w	8004710 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044f2:	4b85      	ldr	r3, [pc, #532]	; (8004708 <HAL_UART_IRQHandler+0x298>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 810a 	beq.w	8004710 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d011      	beq.n	800452c <HAL_UART_IRQHandler+0xbc>
 8004508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00b      	beq.n	800452c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2201      	movs	r2, #1
 800451a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004522:	f043 0201 	orr.w	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800452c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d011      	beq.n	800455c <HAL_UART_IRQHandler+0xec>
 8004538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00b      	beq.n	800455c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2202      	movs	r2, #2
 800454a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800455c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d011      	beq.n	800458c <HAL_UART_IRQHandler+0x11c>
 8004568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00b      	beq.n	800458c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2204      	movs	r2, #4
 800457a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004582:	f043 0202 	orr.w	r2, r3, #2
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800458c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d017      	beq.n	80045c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00b      	beq.n	80045c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2208      	movs	r2, #8
 80045b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045be:	f043 0208 	orr.w	r2, r3, #8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d012      	beq.n	80045fa <HAL_UART_IRQHandler+0x18a>
 80045d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00c      	beq.n	80045fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 81f5 	beq.w	80049f0 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d007      	beq.n	800462e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	d005      	beq.n	8004652 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800464a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800464e:	2b00      	cmp	r3, #0
 8004650:	d04f      	beq.n	80046f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 feb2 	bl	80053bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d141      	bne.n	80046ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800467c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3308      	adds	r3, #8
 800468e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800469e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1d9      	bne.n	8004666 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d013      	beq.n	80046e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	4a13      	ldr	r2, [pc, #76]	; (800470c <HAL_UART_IRQHandler+0x29c>)
 80046c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fd fd06 	bl	80020d8 <HAL_DMA_Abort_IT>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d017      	beq.n	8004702 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80046dc:	4610      	mov	r0, r2
 80046de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e0:	e00f      	b.n	8004702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f98e 	bl	8004a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e8:	e00b      	b.n	8004702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f98a 	bl	8004a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	e007      	b.n	8004702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f986 	bl	8004a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004700:	e176      	b.n	80049f0 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004702:	bf00      	nop
    return;
 8004704:	e174      	b.n	80049f0 <HAL_UART_IRQHandler+0x580>
 8004706:	bf00      	nop
 8004708:	04000120 	.word	0x04000120
 800470c:	08005483 	.word	0x08005483

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004714:	2b01      	cmp	r3, #1
 8004716:	f040 8144 	bne.w	80049a2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 813d 	beq.w	80049a2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8136 	beq.w	80049a2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2210      	movs	r2, #16
 800473c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	f040 80b2 	bne.w	80048b2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800475a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8148 	beq.w	80049f4 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800476a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800476e:	429a      	cmp	r2, r3
 8004770:	f080 8140 	bcs.w	80049f4 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800477a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004788:	f000 8085 	beq.w	8004896 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1da      	bne.n	800478c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3308      	adds	r3, #8
 80047dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3308      	adds	r3, #8
 80047f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004802:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800480c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e1      	bne.n	80047d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004836:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004838:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800483c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e3      	bne.n	8004812 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004866:	f023 0310 	bic.w	r3, r3, #16
 800486a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004878:	65bb      	str	r3, [r7, #88]	; 0x58
 800487a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800487e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e4      	bne.n	8004856 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004890:	4618      	mov	r0, r3
 8004892:	f7fd fbb1 	bl	8001ff8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f8b4 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048b0:	e0a0      	b.n	80049f4 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8092 	beq.w	80049f8 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80048d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 808d 	beq.w	80049f8 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004900:	647b      	str	r3, [r7, #68]	; 0x44
 8004902:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800490e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e4      	bne.n	80048de <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	623b      	str	r3, [r7, #32]
   return(result);
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3308      	adds	r3, #8
 8004934:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004938:	633a      	str	r2, [r7, #48]	; 0x30
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800493e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e3      	bne.n	8004914 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	60fb      	str	r3, [r7, #12]
   return(result);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0310 	bic.w	r3, r3, #16
 8004972:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	69b9      	ldr	r1, [r7, #24]
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	617b      	str	r3, [r7, #20]
   return(result);
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e4      	bne.n	800495e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004994:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f83c 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049a0:	e02a      	b.n	80049f8 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00e      	beq.n	80049cc <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01c      	beq.n	80049fc <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	4798      	blx	r3
    }
    return;
 80049ca:	e017      	b.n	80049fc <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d012      	beq.n	80049fe <HAL_UART_IRQHandler+0x58e>
 80049d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00c      	beq.n	80049fe <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fe1d 	bl	8005624 <UART_EndTransmit_IT>
    return;
 80049ea:	e008      	b.n	80049fe <HAL_UART_IRQHandler+0x58e>
      return;
 80049ec:	bf00      	nop
 80049ee:	e006      	b.n	80049fe <HAL_UART_IRQHandler+0x58e>
    return;
 80049f0:	bf00      	nop
 80049f2:	e004      	b.n	80049fe <HAL_UART_IRQHandler+0x58e>
      return;
 80049f4:	bf00      	nop
 80049f6:	e002      	b.n	80049fe <HAL_UART_IRQHandler+0x58e>
      return;
 80049f8:	bf00      	nop
 80049fa:	e000      	b.n	80049fe <HAL_UART_IRQHandler+0x58e>
    return;
 80049fc:	bf00      	nop
  }

}
 80049fe:	37e8      	adds	r7, #232	; 0xe8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4ba7      	ldr	r3, [pc, #668]	; (8004cf8 <UART_SetConfig+0x2c8>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	6979      	ldr	r1, [r7, #20]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a95      	ldr	r2, [pc, #596]	; (8004cfc <UART_SetConfig+0x2cc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d120      	bne.n	8004aee <UART_SetConfig+0xbe>
 8004aac:	4b94      	ldr	r3, [pc, #592]	; (8004d00 <UART_SetConfig+0x2d0>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d816      	bhi.n	8004ae8 <UART_SetConfig+0xb8>
 8004aba:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0x90>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004ad1 	.word	0x08004ad1
 8004ac4:	08004add 	.word	0x08004add
 8004ac8:	08004ad7 	.word	0x08004ad7
 8004acc:	08004ae3 	.word	0x08004ae3
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	e14f      	b.n	8004d76 <UART_SetConfig+0x346>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e14c      	b.n	8004d76 <UART_SetConfig+0x346>
 8004adc:	2304      	movs	r3, #4
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e149      	b.n	8004d76 <UART_SetConfig+0x346>
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e146      	b.n	8004d76 <UART_SetConfig+0x346>
 8004ae8:	2310      	movs	r3, #16
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e143      	b.n	8004d76 <UART_SetConfig+0x346>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a84      	ldr	r2, [pc, #528]	; (8004d04 <UART_SetConfig+0x2d4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d132      	bne.n	8004b5e <UART_SetConfig+0x12e>
 8004af8:	4b81      	ldr	r3, [pc, #516]	; (8004d00 <UART_SetConfig+0x2d0>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b0c      	cmp	r3, #12
 8004b04:	d828      	bhi.n	8004b58 <UART_SetConfig+0x128>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0xdc>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b41 	.word	0x08004b41
 8004b10:	08004b59 	.word	0x08004b59
 8004b14:	08004b59 	.word	0x08004b59
 8004b18:	08004b59 	.word	0x08004b59
 8004b1c:	08004b4d 	.word	0x08004b4d
 8004b20:	08004b59 	.word	0x08004b59
 8004b24:	08004b59 	.word	0x08004b59
 8004b28:	08004b59 	.word	0x08004b59
 8004b2c:	08004b47 	.word	0x08004b47
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b59 	.word	0x08004b59
 8004b3c:	08004b53 	.word	0x08004b53
 8004b40:	2300      	movs	r3, #0
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e117      	b.n	8004d76 <UART_SetConfig+0x346>
 8004b46:	2302      	movs	r3, #2
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e114      	b.n	8004d76 <UART_SetConfig+0x346>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e111      	b.n	8004d76 <UART_SetConfig+0x346>
 8004b52:	2308      	movs	r3, #8
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e10e      	b.n	8004d76 <UART_SetConfig+0x346>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e10b      	b.n	8004d76 <UART_SetConfig+0x346>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a69      	ldr	r2, [pc, #420]	; (8004d08 <UART_SetConfig+0x2d8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d120      	bne.n	8004baa <UART_SetConfig+0x17a>
 8004b68:	4b65      	ldr	r3, [pc, #404]	; (8004d00 <UART_SetConfig+0x2d0>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b72:	2b30      	cmp	r3, #48	; 0x30
 8004b74:	d013      	beq.n	8004b9e <UART_SetConfig+0x16e>
 8004b76:	2b30      	cmp	r3, #48	; 0x30
 8004b78:	d814      	bhi.n	8004ba4 <UART_SetConfig+0x174>
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d009      	beq.n	8004b92 <UART_SetConfig+0x162>
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d810      	bhi.n	8004ba4 <UART_SetConfig+0x174>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <UART_SetConfig+0x15c>
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d006      	beq.n	8004b98 <UART_SetConfig+0x168>
 8004b8a:	e00b      	b.n	8004ba4 <UART_SetConfig+0x174>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e0f1      	b.n	8004d76 <UART_SetConfig+0x346>
 8004b92:	2302      	movs	r3, #2
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e0ee      	b.n	8004d76 <UART_SetConfig+0x346>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e0eb      	b.n	8004d76 <UART_SetConfig+0x346>
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e0e8      	b.n	8004d76 <UART_SetConfig+0x346>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e0e5      	b.n	8004d76 <UART_SetConfig+0x346>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a57      	ldr	r2, [pc, #348]	; (8004d0c <UART_SetConfig+0x2dc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d120      	bne.n	8004bf6 <UART_SetConfig+0x1c6>
 8004bb4:	4b52      	ldr	r3, [pc, #328]	; (8004d00 <UART_SetConfig+0x2d0>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc0:	d013      	beq.n	8004bea <UART_SetConfig+0x1ba>
 8004bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc4:	d814      	bhi.n	8004bf0 <UART_SetConfig+0x1c0>
 8004bc6:	2b80      	cmp	r3, #128	; 0x80
 8004bc8:	d009      	beq.n	8004bde <UART_SetConfig+0x1ae>
 8004bca:	2b80      	cmp	r3, #128	; 0x80
 8004bcc:	d810      	bhi.n	8004bf0 <UART_SetConfig+0x1c0>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <UART_SetConfig+0x1a8>
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d006      	beq.n	8004be4 <UART_SetConfig+0x1b4>
 8004bd6:	e00b      	b.n	8004bf0 <UART_SetConfig+0x1c0>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e0cb      	b.n	8004d76 <UART_SetConfig+0x346>
 8004bde:	2302      	movs	r3, #2
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e0c8      	b.n	8004d76 <UART_SetConfig+0x346>
 8004be4:	2304      	movs	r3, #4
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e0c5      	b.n	8004d76 <UART_SetConfig+0x346>
 8004bea:	2308      	movs	r3, #8
 8004bec:	77fb      	strb	r3, [r7, #31]
 8004bee:	e0c2      	b.n	8004d76 <UART_SetConfig+0x346>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e0bf      	b.n	8004d76 <UART_SetConfig+0x346>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a45      	ldr	r2, [pc, #276]	; (8004d10 <UART_SetConfig+0x2e0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d125      	bne.n	8004c4c <UART_SetConfig+0x21c>
 8004c00:	4b3f      	ldr	r3, [pc, #252]	; (8004d00 <UART_SetConfig+0x2d0>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c0e:	d017      	beq.n	8004c40 <UART_SetConfig+0x210>
 8004c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c14:	d817      	bhi.n	8004c46 <UART_SetConfig+0x216>
 8004c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1a:	d00b      	beq.n	8004c34 <UART_SetConfig+0x204>
 8004c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c20:	d811      	bhi.n	8004c46 <UART_SetConfig+0x216>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <UART_SetConfig+0x1fe>
 8004c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2a:	d006      	beq.n	8004c3a <UART_SetConfig+0x20a>
 8004c2c:	e00b      	b.n	8004c46 <UART_SetConfig+0x216>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e0a0      	b.n	8004d76 <UART_SetConfig+0x346>
 8004c34:	2302      	movs	r3, #2
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e09d      	b.n	8004d76 <UART_SetConfig+0x346>
 8004c3a:	2304      	movs	r3, #4
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e09a      	b.n	8004d76 <UART_SetConfig+0x346>
 8004c40:	2308      	movs	r3, #8
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e097      	b.n	8004d76 <UART_SetConfig+0x346>
 8004c46:	2310      	movs	r3, #16
 8004c48:	77fb      	strb	r3, [r7, #31]
 8004c4a:	e094      	b.n	8004d76 <UART_SetConfig+0x346>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a30      	ldr	r2, [pc, #192]	; (8004d14 <UART_SetConfig+0x2e4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d125      	bne.n	8004ca2 <UART_SetConfig+0x272>
 8004c56:	4b2a      	ldr	r3, [pc, #168]	; (8004d00 <UART_SetConfig+0x2d0>)
 8004c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c64:	d017      	beq.n	8004c96 <UART_SetConfig+0x266>
 8004c66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c6a:	d817      	bhi.n	8004c9c <UART_SetConfig+0x26c>
 8004c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c70:	d00b      	beq.n	8004c8a <UART_SetConfig+0x25a>
 8004c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c76:	d811      	bhi.n	8004c9c <UART_SetConfig+0x26c>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <UART_SetConfig+0x254>
 8004c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c80:	d006      	beq.n	8004c90 <UART_SetConfig+0x260>
 8004c82:	e00b      	b.n	8004c9c <UART_SetConfig+0x26c>
 8004c84:	2301      	movs	r3, #1
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e075      	b.n	8004d76 <UART_SetConfig+0x346>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e072      	b.n	8004d76 <UART_SetConfig+0x346>
 8004c90:	2304      	movs	r3, #4
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	e06f      	b.n	8004d76 <UART_SetConfig+0x346>
 8004c96:	2308      	movs	r3, #8
 8004c98:	77fb      	strb	r3, [r7, #31]
 8004c9a:	e06c      	b.n	8004d76 <UART_SetConfig+0x346>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e069      	b.n	8004d76 <UART_SetConfig+0x346>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <UART_SetConfig+0x2e8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d137      	bne.n	8004d1c <UART_SetConfig+0x2ec>
 8004cac:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <UART_SetConfig+0x2d0>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004cb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cba:	d017      	beq.n	8004cec <UART_SetConfig+0x2bc>
 8004cbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cc0:	d817      	bhi.n	8004cf2 <UART_SetConfig+0x2c2>
 8004cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc6:	d00b      	beq.n	8004ce0 <UART_SetConfig+0x2b0>
 8004cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ccc:	d811      	bhi.n	8004cf2 <UART_SetConfig+0x2c2>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <UART_SetConfig+0x2aa>
 8004cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd6:	d006      	beq.n	8004ce6 <UART_SetConfig+0x2b6>
 8004cd8:	e00b      	b.n	8004cf2 <UART_SetConfig+0x2c2>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e04a      	b.n	8004d76 <UART_SetConfig+0x346>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e047      	b.n	8004d76 <UART_SetConfig+0x346>
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e044      	b.n	8004d76 <UART_SetConfig+0x346>
 8004cec:	2308      	movs	r3, #8
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e041      	b.n	8004d76 <UART_SetConfig+0x346>
 8004cf2:	2310      	movs	r3, #16
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e03e      	b.n	8004d76 <UART_SetConfig+0x346>
 8004cf8:	efff69f3 	.word	0xefff69f3
 8004cfc:	40011000 	.word	0x40011000
 8004d00:	40023800 	.word	0x40023800
 8004d04:	40004400 	.word	0x40004400
 8004d08:	40004800 	.word	0x40004800
 8004d0c:	40004c00 	.word	0x40004c00
 8004d10:	40005000 	.word	0x40005000
 8004d14:	40011400 	.word	0x40011400
 8004d18:	40007800 	.word	0x40007800
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a71      	ldr	r2, [pc, #452]	; (8004ee8 <UART_SetConfig+0x4b8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d125      	bne.n	8004d72 <UART_SetConfig+0x342>
 8004d26:	4b71      	ldr	r3, [pc, #452]	; (8004eec <UART_SetConfig+0x4bc>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d34:	d017      	beq.n	8004d66 <UART_SetConfig+0x336>
 8004d36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d3a:	d817      	bhi.n	8004d6c <UART_SetConfig+0x33c>
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d40:	d00b      	beq.n	8004d5a <UART_SetConfig+0x32a>
 8004d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d46:	d811      	bhi.n	8004d6c <UART_SetConfig+0x33c>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <UART_SetConfig+0x324>
 8004d4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d50:	d006      	beq.n	8004d60 <UART_SetConfig+0x330>
 8004d52:	e00b      	b.n	8004d6c <UART_SetConfig+0x33c>
 8004d54:	2300      	movs	r3, #0
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e00d      	b.n	8004d76 <UART_SetConfig+0x346>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	77fb      	strb	r3, [r7, #31]
 8004d5e:	e00a      	b.n	8004d76 <UART_SetConfig+0x346>
 8004d60:	2304      	movs	r3, #4
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e007      	b.n	8004d76 <UART_SetConfig+0x346>
 8004d66:	2308      	movs	r3, #8
 8004d68:	77fb      	strb	r3, [r7, #31]
 8004d6a:	e004      	b.n	8004d76 <UART_SetConfig+0x346>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e001      	b.n	8004d76 <UART_SetConfig+0x346>
 8004d72:	2310      	movs	r3, #16
 8004d74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7e:	d15a      	bne.n	8004e36 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004d80:	7ffb      	ldrb	r3, [r7, #31]
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d827      	bhi.n	8004dd6 <UART_SetConfig+0x3a6>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <UART_SetConfig+0x35c>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004db9 	.word	0x08004db9
 8004d94:	08004dc1 	.word	0x08004dc1
 8004d98:	08004dd7 	.word	0x08004dd7
 8004d9c:	08004dc7 	.word	0x08004dc7
 8004da0:	08004dd7 	.word	0x08004dd7
 8004da4:	08004dd7 	.word	0x08004dd7
 8004da8:	08004dd7 	.word	0x08004dd7
 8004dac:	08004dcf 	.word	0x08004dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db0:	f7fe f82c 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8004db4:	61b8      	str	r0, [r7, #24]
        break;
 8004db6:	e013      	b.n	8004de0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db8:	f7fe f83c 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8004dbc:	61b8      	str	r0, [r7, #24]
        break;
 8004dbe:	e00f      	b.n	8004de0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc0:	4b4b      	ldr	r3, [pc, #300]	; (8004ef0 <UART_SetConfig+0x4c0>)
 8004dc2:	61bb      	str	r3, [r7, #24]
        break;
 8004dc4:	e00c      	b.n	8004de0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc6:	f7fd ff5f 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8004dca:	61b8      	str	r0, [r7, #24]
        break;
 8004dcc:	e008      	b.n	8004de0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd2:	61bb      	str	r3, [r7, #24]
        break;
 8004dd4:	e004      	b.n	8004de0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	77bb      	strb	r3, [r7, #30]
        break;
 8004dde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d074      	beq.n	8004ed0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	005a      	lsls	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	441a      	add	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	d916      	bls.n	8004e30 <UART_SetConfig+0x400>
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d212      	bcs.n	8004e30 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f023 030f 	bic.w	r3, r3, #15
 8004e12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	89fa      	ldrh	r2, [r7, #14]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	e04f      	b.n	8004ed0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	77bb      	strb	r3, [r7, #30]
 8004e34:	e04c      	b.n	8004ed0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e36:	7ffb      	ldrb	r3, [r7, #31]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d828      	bhi.n	8004e8e <UART_SetConfig+0x45e>
 8004e3c:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <UART_SetConfig+0x414>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e69 	.word	0x08004e69
 8004e48:	08004e71 	.word	0x08004e71
 8004e4c:	08004e79 	.word	0x08004e79
 8004e50:	08004e8f 	.word	0x08004e8f
 8004e54:	08004e7f 	.word	0x08004e7f
 8004e58:	08004e8f 	.word	0x08004e8f
 8004e5c:	08004e8f 	.word	0x08004e8f
 8004e60:	08004e8f 	.word	0x08004e8f
 8004e64:	08004e87 	.word	0x08004e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e68:	f7fd ffd0 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8004e6c:	61b8      	str	r0, [r7, #24]
        break;
 8004e6e:	e013      	b.n	8004e98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e70:	f7fd ffe0 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8004e74:	61b8      	str	r0, [r7, #24]
        break;
 8004e76:	e00f      	b.n	8004e98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e78:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <UART_SetConfig+0x4c0>)
 8004e7a:	61bb      	str	r3, [r7, #24]
        break;
 8004e7c:	e00c      	b.n	8004e98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7e:	f7fd ff03 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8004e82:	61b8      	str	r0, [r7, #24]
        break;
 8004e84:	e008      	b.n	8004e98 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e8a:	61bb      	str	r3, [r7, #24]
        break;
 8004e8c:	e004      	b.n	8004e98 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	77bb      	strb	r3, [r7, #30]
        break;
 8004e96:	bf00      	nop
    }

    if (pclk != 0U)
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	085a      	lsrs	r2, r3, #1
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	441a      	add	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b0f      	cmp	r3, #15
 8004eb6:	d909      	bls.n	8004ecc <UART_SetConfig+0x49c>
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ebe:	d205      	bcs.n	8004ecc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	e001      	b.n	8004ed0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004edc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40007c00 	.word	0x40007c00
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	00f42400 	.word	0x00f42400

08004ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01a      	beq.n	800500a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff2:	d10a      	bne.n	800500a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
  }
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af02      	add	r7, sp, #8
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005048:	f7fc fec4 	bl	8001dd4 <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d10e      	bne.n	800507a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f817 	bl	800509e <UART_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e00d      	b.n	8005096 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b09c      	sub	sp, #112	; 0x70
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	603b      	str	r3, [r7, #0]
 80050aa:	4613      	mov	r3, r2
 80050ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ae:	e0a5      	b.n	80051fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	f000 80a1 	beq.w	80051fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fc fe8b 	bl	8001dd4 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80050ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d13e      	bne.n	800514e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050e4:	667b      	str	r3, [r7, #100]	; 0x64
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e6      	bne.n	80050d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	f023 0301 	bic.w	r3, r3, #1
 8005118:	663b      	str	r3, [r7, #96]	; 0x60
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3308      	adds	r3, #8
 8005120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005122:	64ba      	str	r2, [r7, #72]	; 0x48
 8005124:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e5      	bne.n	8005102 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2220      	movs	r2, #32
 800513a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e067      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d04f      	beq.n	80051fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516a:	d147      	bne.n	80051fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800518a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005194:	637b      	str	r3, [r7, #52]	; 0x34
 8005196:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800519a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e6      	bne.n	8005176 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3308      	adds	r3, #8
 80051ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	613b      	str	r3, [r7, #16]
   return(result);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	66bb      	str	r3, [r7, #104]	; 0x68
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051c8:	623a      	str	r2, [r7, #32]
 80051ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	69f9      	ldr	r1, [r7, #28]
 80051ce:	6a3a      	ldr	r2, [r7, #32]
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e5      	bne.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e010      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4013      	ands	r3, r2
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	461a      	mov	r2, r3
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	429a      	cmp	r2, r3
 8005218:	f43f af4a 	beq.w	80050b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3770      	adds	r7, #112	; 0x70
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005228:	b480      	push	{r7}
 800522a:	b097      	sub	sp, #92	; 0x5c
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525a:	d10e      	bne.n	800527a <UART_Start_Receive_IT+0x52>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d105      	bne.n	8005270 <UART_Start_Receive_IT+0x48>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f240 12ff 	movw	r2, #511	; 0x1ff
 800526a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800526e:	e02d      	b.n	80052cc <UART_Start_Receive_IT+0xa4>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	22ff      	movs	r2, #255	; 0xff
 8005274:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005278:	e028      	b.n	80052cc <UART_Start_Receive_IT+0xa4>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10d      	bne.n	800529e <UART_Start_Receive_IT+0x76>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d104      	bne.n	8005294 <UART_Start_Receive_IT+0x6c>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	22ff      	movs	r2, #255	; 0xff
 800528e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005292:	e01b      	b.n	80052cc <UART_Start_Receive_IT+0xa4>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	227f      	movs	r2, #127	; 0x7f
 8005298:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800529c:	e016      	b.n	80052cc <UART_Start_Receive_IT+0xa4>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052a6:	d10d      	bne.n	80052c4 <UART_Start_Receive_IT+0x9c>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <UART_Start_Receive_IT+0x92>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	227f      	movs	r2, #127	; 0x7f
 80052b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052b8:	e008      	b.n	80052cc <UART_Start_Receive_IT+0xa4>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	223f      	movs	r2, #63	; 0x3f
 80052be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052c2:	e003      	b.n	80052cc <UART_Start_Receive_IT+0xa4>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2222      	movs	r2, #34	; 0x22
 80052d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3308      	adds	r3, #8
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	657b      	str	r3, [r7, #84]	; 0x54
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3308      	adds	r3, #8
 80052f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80052fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005316:	d107      	bne.n	8005328 <UART_Start_Receive_IT+0x100>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d103      	bne.n	8005328 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <UART_Start_Receive_IT+0x18c>)
 8005324:	665a      	str	r2, [r3, #100]	; 0x64
 8005326:	e002      	b.n	800532e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <UART_Start_Receive_IT+0x190>)
 800532c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d019      	beq.n	8005372 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
 800535e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e6      	bne.n	800533e <UART_Start_Receive_IT+0x116>
 8005370:	e018      	b.n	80053a4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	613b      	str	r3, [r7, #16]
   return(result);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f043 0320 	orr.w	r3, r3, #32
 8005386:	653b      	str	r3, [r7, #80]	; 0x50
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	69f9      	ldr	r1, [r7, #28]
 8005396:	6a3a      	ldr	r2, [r7, #32]
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	61bb      	str	r3, [r7, #24]
   return(result);
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e6      	bne.n	8005372 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	375c      	adds	r7, #92	; 0x5c
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	080057d5 	.word	0x080057d5
 80053b8:	08005679 	.word	0x08005679

080053bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b095      	sub	sp, #84	; 0x54
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e2:	643b      	str	r3, [r7, #64]	; 0x40
 80053e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e6      	bne.n	80053c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3308      	adds	r3, #8
 80053fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	61fb      	str	r3, [r7, #28]
   return(result);
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	64bb      	str	r3, [r7, #72]	; 0x48
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3308      	adds	r3, #8
 8005414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005418:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800541c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e5      	bne.n	80053f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542e:	2b01      	cmp	r3, #1
 8005430:	d118      	bne.n	8005464 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f023 0310 	bic.w	r3, r3, #16
 8005446:	647b      	str	r3, [r7, #68]	; 0x44
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6979      	ldr	r1, [r7, #20]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	613b      	str	r3, [r7, #16]
   return(result);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e6      	bne.n	8005432 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005476:	bf00      	nop
 8005478:	3754      	adds	r7, #84	; 0x54
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7ff faaf 	bl	8004a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b08f      	sub	sp, #60	; 0x3c
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ba:	2b21      	cmp	r3, #33	; 0x21
 80054bc:	d14c      	bne.n	8005558 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d132      	bne.n	8005530 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e6      	bne.n	80054ca <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	60bb      	str	r3, [r7, #8]
   return(result);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005510:	633b      	str	r3, [r7, #48]	; 0x30
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	61bb      	str	r3, [r7, #24]
 800551c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6979      	ldr	r1, [r7, #20]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	613b      	str	r3, [r7, #16]
   return(result);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e6      	bne.n	80054fc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800552e:	e013      	b.n	8005558 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005558:	bf00      	nop
 800555a:	373c      	adds	r7, #60	; 0x3c
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005564:	b480      	push	{r7}
 8005566:	b091      	sub	sp, #68	; 0x44
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005570:	2b21      	cmp	r3, #33	; 0x21
 8005572:	d151      	bne.n	8005618 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d132      	bne.n	80055e6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	623b      	str	r3, [r7, #32]
   return(result);
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005594:	63bb      	str	r3, [r7, #56]	; 0x38
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
 80055a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e6      	bne.n	8005580 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	60fb      	str	r3, [r7, #12]
   return(result);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	69b9      	ldr	r1, [r7, #24]
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	617b      	str	r3, [r7, #20]
   return(result);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e6      	bne.n	80055b2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80055e4:	e018      	b.n	8005618 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80055ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005600:	1c9a      	adds	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005618:	bf00      	nop
 800561a:	3744      	adds	r7, #68	; 0x44
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	60bb      	str	r3, [r7, #8]
   return(result);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	61bb      	str	r3, [r7, #24]
 800564c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6979      	ldr	r1, [r7, #20]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	613b      	str	r3, [r7, #16]
   return(result);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e6      	bne.n	800562c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fc f92a 	bl	80018c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005670:	bf00      	nop
 8005672:	3720      	adds	r7, #32
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b096      	sub	sp, #88	; 0x58
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005686:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800568e:	2b22      	cmp	r3, #34	; 0x22
 8005690:	f040 8094 	bne.w	80057bc <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800569e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80056a2:	b2d9      	uxtb	r1, r3
 80056a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ae:	400a      	ands	r2, r1
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d177      	bne.n	80057cc <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056f0:	653b      	str	r3, [r7, #80]	; 0x50
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056fa:	647b      	str	r3, [r7, #68]	; 0x44
 80056fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e6      	bne.n	80056dc <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	623b      	str	r3, [r7, #32]
   return(result);
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3308      	adds	r3, #8
 800572c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800572e:	633a      	str	r2, [r7, #48]	; 0x30
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e5      	bne.n	800570e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005752:	2b01      	cmp	r3, #1
 8005754:	d12e      	bne.n	80057b4 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	60fb      	str	r3, [r7, #12]
   return(result);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f023 0310 	bic.w	r3, r3, #16
 8005770:	64bb      	str	r3, [r7, #72]	; 0x48
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	69b9      	ldr	r1, [r7, #24]
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	617b      	str	r3, [r7, #20]
   return(result);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e6      	bne.n	800575c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	f003 0310 	and.w	r3, r3, #16
 8005798:	2b10      	cmp	r3, #16
 800579a:	d103      	bne.n	80057a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2210      	movs	r2, #16
 80057a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff f933 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057b2:	e00b      	b.n	80057cc <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fb fe57 	bl	8001468 <HAL_UART_RxCpltCallback>
}
 80057ba:	e007      	b.n	80057cc <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0208 	orr.w	r2, r2, #8
 80057ca:	619a      	str	r2, [r3, #24]
}
 80057cc:	bf00      	nop
 80057ce:	3758      	adds	r7, #88	; 0x58
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b096      	sub	sp, #88	; 0x58
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ea:	2b22      	cmp	r3, #34	; 0x22
 80057ec:	f040 8094 	bne.w	8005918 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005800:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005804:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005808:	4013      	ands	r3, r2
 800580a:	b29a      	uxth	r2, r3
 800580c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800580e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	1c9a      	adds	r2, r3, #2
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d177      	bne.n	8005928 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800584c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005856:	643b      	str	r3, [r7, #64]	; 0x40
 8005858:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800585c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e6      	bne.n	8005838 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3308      	adds	r3, #8
 8005870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	61fb      	str	r3, [r7, #28]
   return(result);
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	64bb      	str	r3, [r7, #72]	; 0x48
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3308      	adds	r3, #8
 8005888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800588a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e5      	bne.n	800586a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d12e      	bne.n	8005910 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f023 0310 	bic.w	r3, r3, #16
 80058cc:	647b      	str	r3, [r7, #68]	; 0x44
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6979      	ldr	r1, [r7, #20]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	613b      	str	r3, [r7, #16]
   return(result);
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e6      	bne.n	80058b8 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b10      	cmp	r3, #16
 80058f6:	d103      	bne.n	8005900 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2210      	movs	r2, #16
 80058fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff f885 	bl	8004a18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800590e:	e00b      	b.n	8005928 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fb fda9 	bl	8001468 <HAL_UART_RxCpltCallback>
}
 8005916:	e007      	b.n	8005928 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0208 	orr.w	r2, r2, #8
 8005926:	619a      	str	r2, [r3, #24]
}
 8005928:	bf00      	nop
 800592a:	3758      	adds	r7, #88	; 0x58
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <__errno>:
 8005930:	4b01      	ldr	r3, [pc, #4]	; (8005938 <__errno+0x8>)
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000014 	.word	0x20000014

0800593c <__libc_init_array>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	4d0d      	ldr	r5, [pc, #52]	; (8005974 <__libc_init_array+0x38>)
 8005940:	4c0d      	ldr	r4, [pc, #52]	; (8005978 <__libc_init_array+0x3c>)
 8005942:	1b64      	subs	r4, r4, r5
 8005944:	10a4      	asrs	r4, r4, #2
 8005946:	2600      	movs	r6, #0
 8005948:	42a6      	cmp	r6, r4
 800594a:	d109      	bne.n	8005960 <__libc_init_array+0x24>
 800594c:	4d0b      	ldr	r5, [pc, #44]	; (800597c <__libc_init_array+0x40>)
 800594e:	4c0c      	ldr	r4, [pc, #48]	; (8005980 <__libc_init_array+0x44>)
 8005950:	f000 ff76 	bl	8006840 <_init>
 8005954:	1b64      	subs	r4, r4, r5
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	2600      	movs	r6, #0
 800595a:	42a6      	cmp	r6, r4
 800595c:	d105      	bne.n	800596a <__libc_init_array+0x2e>
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	f855 3b04 	ldr.w	r3, [r5], #4
 8005964:	4798      	blx	r3
 8005966:	3601      	adds	r6, #1
 8005968:	e7ee      	b.n	8005948 <__libc_init_array+0xc>
 800596a:	f855 3b04 	ldr.w	r3, [r5], #4
 800596e:	4798      	blx	r3
 8005970:	3601      	adds	r6, #1
 8005972:	e7f2      	b.n	800595a <__libc_init_array+0x1e>
 8005974:	08006a04 	.word	0x08006a04
 8005978:	08006a04 	.word	0x08006a04
 800597c:	08006a04 	.word	0x08006a04
 8005980:	08006a08 	.word	0x08006a08

08005984 <memset>:
 8005984:	4402      	add	r2, r0
 8005986:	4603      	mov	r3, r0
 8005988:	4293      	cmp	r3, r2
 800598a:	d100      	bne.n	800598e <memset+0xa>
 800598c:	4770      	bx	lr
 800598e:	f803 1b01 	strb.w	r1, [r3], #1
 8005992:	e7f9      	b.n	8005988 <memset+0x4>

08005994 <iprintf>:
 8005994:	b40f      	push	{r0, r1, r2, r3}
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <iprintf+0x2c>)
 8005998:	b513      	push	{r0, r1, r4, lr}
 800599a:	681c      	ldr	r4, [r3, #0]
 800599c:	b124      	cbz	r4, 80059a8 <iprintf+0x14>
 800599e:	69a3      	ldr	r3, [r4, #24]
 80059a0:	b913      	cbnz	r3, 80059a8 <iprintf+0x14>
 80059a2:	4620      	mov	r0, r4
 80059a4:	f000 f866 	bl	8005a74 <__sinit>
 80059a8:	ab05      	add	r3, sp, #20
 80059aa:	9a04      	ldr	r2, [sp, #16]
 80059ac:	68a1      	ldr	r1, [r4, #8]
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	4620      	mov	r0, r4
 80059b2:	f000 f983 	bl	8005cbc <_vfiprintf_r>
 80059b6:	b002      	add	sp, #8
 80059b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059bc:	b004      	add	sp, #16
 80059be:	4770      	bx	lr
 80059c0:	20000014 	.word	0x20000014

080059c4 <std>:
 80059c4:	2300      	movs	r3, #0
 80059c6:	b510      	push	{r4, lr}
 80059c8:	4604      	mov	r4, r0
 80059ca:	e9c0 3300 	strd	r3, r3, [r0]
 80059ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059d2:	6083      	str	r3, [r0, #8]
 80059d4:	8181      	strh	r1, [r0, #12]
 80059d6:	6643      	str	r3, [r0, #100]	; 0x64
 80059d8:	81c2      	strh	r2, [r0, #14]
 80059da:	6183      	str	r3, [r0, #24]
 80059dc:	4619      	mov	r1, r3
 80059de:	2208      	movs	r2, #8
 80059e0:	305c      	adds	r0, #92	; 0x5c
 80059e2:	f7ff ffcf 	bl	8005984 <memset>
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <std+0x38>)
 80059e8:	6263      	str	r3, [r4, #36]	; 0x24
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <std+0x3c>)
 80059ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80059ee:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <std+0x40>)
 80059f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <std+0x44>)
 80059f4:	6224      	str	r4, [r4, #32]
 80059f6:	6323      	str	r3, [r4, #48]	; 0x30
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	bf00      	nop
 80059fc:	08006265 	.word	0x08006265
 8005a00:	08006287 	.word	0x08006287
 8005a04:	080062bf 	.word	0x080062bf
 8005a08:	080062e3 	.word	0x080062e3

08005a0c <_cleanup_r>:
 8005a0c:	4901      	ldr	r1, [pc, #4]	; (8005a14 <_cleanup_r+0x8>)
 8005a0e:	f000 b8af 	b.w	8005b70 <_fwalk_reent>
 8005a12:	bf00      	nop
 8005a14:	080065bd 	.word	0x080065bd

08005a18 <__sfmoreglue>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	1e4a      	subs	r2, r1, #1
 8005a1c:	2568      	movs	r5, #104	; 0x68
 8005a1e:	4355      	muls	r5, r2
 8005a20:	460e      	mov	r6, r1
 8005a22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a26:	f000 f8c5 	bl	8005bb4 <_malloc_r>
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	b140      	cbz	r0, 8005a40 <__sfmoreglue+0x28>
 8005a2e:	2100      	movs	r1, #0
 8005a30:	e9c0 1600 	strd	r1, r6, [r0]
 8005a34:	300c      	adds	r0, #12
 8005a36:	60a0      	str	r0, [r4, #8]
 8005a38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a3c:	f7ff ffa2 	bl	8005984 <memset>
 8005a40:	4620      	mov	r0, r4
 8005a42:	bd70      	pop	{r4, r5, r6, pc}

08005a44 <__sfp_lock_acquire>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__sfp_lock_acquire+0x8>)
 8005a46:	f000 b8b3 	b.w	8005bb0 <__retarget_lock_acquire_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	2000025c 	.word	0x2000025c

08005a50 <__sfp_lock_release>:
 8005a50:	4801      	ldr	r0, [pc, #4]	; (8005a58 <__sfp_lock_release+0x8>)
 8005a52:	f000 b8ae 	b.w	8005bb2 <__retarget_lock_release_recursive>
 8005a56:	bf00      	nop
 8005a58:	2000025c 	.word	0x2000025c

08005a5c <__sinit_lock_acquire>:
 8005a5c:	4801      	ldr	r0, [pc, #4]	; (8005a64 <__sinit_lock_acquire+0x8>)
 8005a5e:	f000 b8a7 	b.w	8005bb0 <__retarget_lock_acquire_recursive>
 8005a62:	bf00      	nop
 8005a64:	20000257 	.word	0x20000257

08005a68 <__sinit_lock_release>:
 8005a68:	4801      	ldr	r0, [pc, #4]	; (8005a70 <__sinit_lock_release+0x8>)
 8005a6a:	f000 b8a2 	b.w	8005bb2 <__retarget_lock_release_recursive>
 8005a6e:	bf00      	nop
 8005a70:	20000257 	.word	0x20000257

08005a74 <__sinit>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	4604      	mov	r4, r0
 8005a78:	f7ff fff0 	bl	8005a5c <__sinit_lock_acquire>
 8005a7c:	69a3      	ldr	r3, [r4, #24]
 8005a7e:	b11b      	cbz	r3, 8005a88 <__sinit+0x14>
 8005a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a84:	f7ff bff0 	b.w	8005a68 <__sinit_lock_release>
 8005a88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a8c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a8e:	4b13      	ldr	r3, [pc, #76]	; (8005adc <__sinit+0x68>)
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <__sinit+0x6c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a96:	42a3      	cmp	r3, r4
 8005a98:	bf04      	itt	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	61a3      	streq	r3, [r4, #24]
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 f820 	bl	8005ae4 <__sfp>
 8005aa4:	6060      	str	r0, [r4, #4]
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 f81c 	bl	8005ae4 <__sfp>
 8005aac:	60a0      	str	r0, [r4, #8]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 f818 	bl	8005ae4 <__sfp>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	60e0      	str	r0, [r4, #12]
 8005ab8:	2104      	movs	r1, #4
 8005aba:	6860      	ldr	r0, [r4, #4]
 8005abc:	f7ff ff82 	bl	80059c4 <std>
 8005ac0:	68a0      	ldr	r0, [r4, #8]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	2109      	movs	r1, #9
 8005ac6:	f7ff ff7d 	bl	80059c4 <std>
 8005aca:	68e0      	ldr	r0, [r4, #12]
 8005acc:	2202      	movs	r2, #2
 8005ace:	2112      	movs	r1, #18
 8005ad0:	f7ff ff78 	bl	80059c4 <std>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	61a3      	str	r3, [r4, #24]
 8005ad8:	e7d2      	b.n	8005a80 <__sinit+0xc>
 8005ada:	bf00      	nop
 8005adc:	08006964 	.word	0x08006964
 8005ae0:	08005a0d 	.word	0x08005a0d

08005ae4 <__sfp>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	4607      	mov	r7, r0
 8005ae8:	f7ff ffac 	bl	8005a44 <__sfp_lock_acquire>
 8005aec:	4b1e      	ldr	r3, [pc, #120]	; (8005b68 <__sfp+0x84>)
 8005aee:	681e      	ldr	r6, [r3, #0]
 8005af0:	69b3      	ldr	r3, [r6, #24]
 8005af2:	b913      	cbnz	r3, 8005afa <__sfp+0x16>
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7ff ffbd 	bl	8005a74 <__sinit>
 8005afa:	3648      	adds	r6, #72	; 0x48
 8005afc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	d503      	bpl.n	8005b0c <__sfp+0x28>
 8005b04:	6833      	ldr	r3, [r6, #0]
 8005b06:	b30b      	cbz	r3, 8005b4c <__sfp+0x68>
 8005b08:	6836      	ldr	r6, [r6, #0]
 8005b0a:	e7f7      	b.n	8005afc <__sfp+0x18>
 8005b0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b10:	b9d5      	cbnz	r5, 8005b48 <__sfp+0x64>
 8005b12:	4b16      	ldr	r3, [pc, #88]	; (8005b6c <__sfp+0x88>)
 8005b14:	60e3      	str	r3, [r4, #12]
 8005b16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b1a:	6665      	str	r5, [r4, #100]	; 0x64
 8005b1c:	f000 f847 	bl	8005bae <__retarget_lock_init_recursive>
 8005b20:	f7ff ff96 	bl	8005a50 <__sfp_lock_release>
 8005b24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b2c:	6025      	str	r5, [r4, #0]
 8005b2e:	61a5      	str	r5, [r4, #24]
 8005b30:	2208      	movs	r2, #8
 8005b32:	4629      	mov	r1, r5
 8005b34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b38:	f7ff ff24 	bl	8005984 <memset>
 8005b3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b44:	4620      	mov	r0, r4
 8005b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b48:	3468      	adds	r4, #104	; 0x68
 8005b4a:	e7d9      	b.n	8005b00 <__sfp+0x1c>
 8005b4c:	2104      	movs	r1, #4
 8005b4e:	4638      	mov	r0, r7
 8005b50:	f7ff ff62 	bl	8005a18 <__sfmoreglue>
 8005b54:	4604      	mov	r4, r0
 8005b56:	6030      	str	r0, [r6, #0]
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d1d5      	bne.n	8005b08 <__sfp+0x24>
 8005b5c:	f7ff ff78 	bl	8005a50 <__sfp_lock_release>
 8005b60:	230c      	movs	r3, #12
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	e7ee      	b.n	8005b44 <__sfp+0x60>
 8005b66:	bf00      	nop
 8005b68:	08006964 	.word	0x08006964
 8005b6c:	ffff0001 	.word	0xffff0001

08005b70 <_fwalk_reent>:
 8005b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b74:	4606      	mov	r6, r0
 8005b76:	4688      	mov	r8, r1
 8005b78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b7c:	2700      	movs	r7, #0
 8005b7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b82:	f1b9 0901 	subs.w	r9, r9, #1
 8005b86:	d505      	bpl.n	8005b94 <_fwalk_reent+0x24>
 8005b88:	6824      	ldr	r4, [r4, #0]
 8005b8a:	2c00      	cmp	r4, #0
 8005b8c:	d1f7      	bne.n	8005b7e <_fwalk_reent+0xe>
 8005b8e:	4638      	mov	r0, r7
 8005b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b94:	89ab      	ldrh	r3, [r5, #12]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d907      	bls.n	8005baa <_fwalk_reent+0x3a>
 8005b9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	d003      	beq.n	8005baa <_fwalk_reent+0x3a>
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	47c0      	blx	r8
 8005ba8:	4307      	orrs	r7, r0
 8005baa:	3568      	adds	r5, #104	; 0x68
 8005bac:	e7e9      	b.n	8005b82 <_fwalk_reent+0x12>

08005bae <__retarget_lock_init_recursive>:
 8005bae:	4770      	bx	lr

08005bb0 <__retarget_lock_acquire_recursive>:
 8005bb0:	4770      	bx	lr

08005bb2 <__retarget_lock_release_recursive>:
 8005bb2:	4770      	bx	lr

08005bb4 <_malloc_r>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	1ccd      	adds	r5, r1, #3
 8005bb8:	f025 0503 	bic.w	r5, r5, #3
 8005bbc:	3508      	adds	r5, #8
 8005bbe:	2d0c      	cmp	r5, #12
 8005bc0:	bf38      	it	cc
 8005bc2:	250c      	movcc	r5, #12
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	db01      	blt.n	8005bce <_malloc_r+0x1a>
 8005bca:	42a9      	cmp	r1, r5
 8005bcc:	d903      	bls.n	8005bd6 <_malloc_r+0x22>
 8005bce:	230c      	movs	r3, #12
 8005bd0:	6033      	str	r3, [r6, #0]
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd6:	f000 fda3 	bl	8006720 <__malloc_lock>
 8005bda:	4921      	ldr	r1, [pc, #132]	; (8005c60 <_malloc_r+0xac>)
 8005bdc:	680a      	ldr	r2, [r1, #0]
 8005bde:	4614      	mov	r4, r2
 8005be0:	b99c      	cbnz	r4, 8005c0a <_malloc_r+0x56>
 8005be2:	4f20      	ldr	r7, [pc, #128]	; (8005c64 <_malloc_r+0xb0>)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	b923      	cbnz	r3, 8005bf2 <_malloc_r+0x3e>
 8005be8:	4621      	mov	r1, r4
 8005bea:	4630      	mov	r0, r6
 8005bec:	f000 fb2a 	bl	8006244 <_sbrk_r>
 8005bf0:	6038      	str	r0, [r7, #0]
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	f000 fb25 	bl	8006244 <_sbrk_r>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	d123      	bne.n	8005c46 <_malloc_r+0x92>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	6033      	str	r3, [r6, #0]
 8005c02:	4630      	mov	r0, r6
 8005c04:	f000 fd92 	bl	800672c <__malloc_unlock>
 8005c08:	e7e3      	b.n	8005bd2 <_malloc_r+0x1e>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	1b5b      	subs	r3, r3, r5
 8005c0e:	d417      	bmi.n	8005c40 <_malloc_r+0x8c>
 8005c10:	2b0b      	cmp	r3, #11
 8005c12:	d903      	bls.n	8005c1c <_malloc_r+0x68>
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	441c      	add	r4, r3
 8005c18:	6025      	str	r5, [r4, #0]
 8005c1a:	e004      	b.n	8005c26 <_malloc_r+0x72>
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	42a2      	cmp	r2, r4
 8005c20:	bf0c      	ite	eq
 8005c22:	600b      	streq	r3, [r1, #0]
 8005c24:	6053      	strne	r3, [r2, #4]
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 fd80 	bl	800672c <__malloc_unlock>
 8005c2c:	f104 000b 	add.w	r0, r4, #11
 8005c30:	1d23      	adds	r3, r4, #4
 8005c32:	f020 0007 	bic.w	r0, r0, #7
 8005c36:	1ac2      	subs	r2, r0, r3
 8005c38:	d0cc      	beq.n	8005bd4 <_malloc_r+0x20>
 8005c3a:	1a1b      	subs	r3, r3, r0
 8005c3c:	50a3      	str	r3, [r4, r2]
 8005c3e:	e7c9      	b.n	8005bd4 <_malloc_r+0x20>
 8005c40:	4622      	mov	r2, r4
 8005c42:	6864      	ldr	r4, [r4, #4]
 8005c44:	e7cc      	b.n	8005be0 <_malloc_r+0x2c>
 8005c46:	1cc4      	adds	r4, r0, #3
 8005c48:	f024 0403 	bic.w	r4, r4, #3
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d0e3      	beq.n	8005c18 <_malloc_r+0x64>
 8005c50:	1a21      	subs	r1, r4, r0
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 faf6 	bl	8006244 <_sbrk_r>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d1dd      	bne.n	8005c18 <_malloc_r+0x64>
 8005c5c:	e7cf      	b.n	8005bfe <_malloc_r+0x4a>
 8005c5e:	bf00      	nop
 8005c60:	200000bc 	.word	0x200000bc
 8005c64:	200000c0 	.word	0x200000c0

08005c68 <__sfputc_r>:
 8005c68:	6893      	ldr	r3, [r2, #8]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	b410      	push	{r4}
 8005c70:	6093      	str	r3, [r2, #8]
 8005c72:	da08      	bge.n	8005c86 <__sfputc_r+0x1e>
 8005c74:	6994      	ldr	r4, [r2, #24]
 8005c76:	42a3      	cmp	r3, r4
 8005c78:	db01      	blt.n	8005c7e <__sfputc_r+0x16>
 8005c7a:	290a      	cmp	r1, #10
 8005c7c:	d103      	bne.n	8005c86 <__sfputc_r+0x1e>
 8005c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c82:	f000 bb33 	b.w	80062ec <__swbuf_r>
 8005c86:	6813      	ldr	r3, [r2, #0]
 8005c88:	1c58      	adds	r0, r3, #1
 8005c8a:	6010      	str	r0, [r2, #0]
 8005c8c:	7019      	strb	r1, [r3, #0]
 8005c8e:	4608      	mov	r0, r1
 8005c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <__sfputs_r>:
 8005c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c98:	4606      	mov	r6, r0
 8005c9a:	460f      	mov	r7, r1
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	18d5      	adds	r5, r2, r3
 8005ca0:	42ac      	cmp	r4, r5
 8005ca2:	d101      	bne.n	8005ca8 <__sfputs_r+0x12>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e007      	b.n	8005cb8 <__sfputs_r+0x22>
 8005ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cac:	463a      	mov	r2, r7
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f7ff ffda 	bl	8005c68 <__sfputc_r>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d1f3      	bne.n	8005ca0 <__sfputs_r+0xa>
 8005cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cbc <_vfiprintf_r>:
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	460d      	mov	r5, r1
 8005cc2:	b09d      	sub	sp, #116	; 0x74
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	4698      	mov	r8, r3
 8005cc8:	4606      	mov	r6, r0
 8005cca:	b118      	cbz	r0, 8005cd4 <_vfiprintf_r+0x18>
 8005ccc:	6983      	ldr	r3, [r0, #24]
 8005cce:	b90b      	cbnz	r3, 8005cd4 <_vfiprintf_r+0x18>
 8005cd0:	f7ff fed0 	bl	8005a74 <__sinit>
 8005cd4:	4b89      	ldr	r3, [pc, #548]	; (8005efc <_vfiprintf_r+0x240>)
 8005cd6:	429d      	cmp	r5, r3
 8005cd8:	d11b      	bne.n	8005d12 <_vfiprintf_r+0x56>
 8005cda:	6875      	ldr	r5, [r6, #4]
 8005cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cde:	07d9      	lsls	r1, r3, #31
 8005ce0:	d405      	bmi.n	8005cee <_vfiprintf_r+0x32>
 8005ce2:	89ab      	ldrh	r3, [r5, #12]
 8005ce4:	059a      	lsls	r2, r3, #22
 8005ce6:	d402      	bmi.n	8005cee <_vfiprintf_r+0x32>
 8005ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cea:	f7ff ff61 	bl	8005bb0 <__retarget_lock_acquire_recursive>
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	071b      	lsls	r3, r3, #28
 8005cf2:	d501      	bpl.n	8005cf8 <_vfiprintf_r+0x3c>
 8005cf4:	692b      	ldr	r3, [r5, #16]
 8005cf6:	b9eb      	cbnz	r3, 8005d34 <_vfiprintf_r+0x78>
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f000 fb5a 	bl	80063b4 <__swsetup_r>
 8005d00:	b1c0      	cbz	r0, 8005d34 <_vfiprintf_r+0x78>
 8005d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d04:	07dc      	lsls	r4, r3, #31
 8005d06:	d50e      	bpl.n	8005d26 <_vfiprintf_r+0x6a>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	b01d      	add	sp, #116	; 0x74
 8005d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	4b7b      	ldr	r3, [pc, #492]	; (8005f00 <_vfiprintf_r+0x244>)
 8005d14:	429d      	cmp	r5, r3
 8005d16:	d101      	bne.n	8005d1c <_vfiprintf_r+0x60>
 8005d18:	68b5      	ldr	r5, [r6, #8]
 8005d1a:	e7df      	b.n	8005cdc <_vfiprintf_r+0x20>
 8005d1c:	4b79      	ldr	r3, [pc, #484]	; (8005f04 <_vfiprintf_r+0x248>)
 8005d1e:	429d      	cmp	r5, r3
 8005d20:	bf08      	it	eq
 8005d22:	68f5      	ldreq	r5, [r6, #12]
 8005d24:	e7da      	b.n	8005cdc <_vfiprintf_r+0x20>
 8005d26:	89ab      	ldrh	r3, [r5, #12]
 8005d28:	0598      	lsls	r0, r3, #22
 8005d2a:	d4ed      	bmi.n	8005d08 <_vfiprintf_r+0x4c>
 8005d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d2e:	f7ff ff40 	bl	8005bb2 <__retarget_lock_release_recursive>
 8005d32:	e7e9      	b.n	8005d08 <_vfiprintf_r+0x4c>
 8005d34:	2300      	movs	r3, #0
 8005d36:	9309      	str	r3, [sp, #36]	; 0x24
 8005d38:	2320      	movs	r3, #32
 8005d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d42:	2330      	movs	r3, #48	; 0x30
 8005d44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f08 <_vfiprintf_r+0x24c>
 8005d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d4c:	f04f 0901 	mov.w	r9, #1
 8005d50:	4623      	mov	r3, r4
 8005d52:	469a      	mov	sl, r3
 8005d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d58:	b10a      	cbz	r2, 8005d5e <_vfiprintf_r+0xa2>
 8005d5a:	2a25      	cmp	r2, #37	; 0x25
 8005d5c:	d1f9      	bne.n	8005d52 <_vfiprintf_r+0x96>
 8005d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d62:	d00b      	beq.n	8005d7c <_vfiprintf_r+0xc0>
 8005d64:	465b      	mov	r3, fp
 8005d66:	4622      	mov	r2, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff ff93 	bl	8005c96 <__sfputs_r>
 8005d70:	3001      	adds	r0, #1
 8005d72:	f000 80aa 	beq.w	8005eca <_vfiprintf_r+0x20e>
 8005d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d78:	445a      	add	r2, fp
 8005d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80a2 	beq.w	8005eca <_vfiprintf_r+0x20e>
 8005d86:	2300      	movs	r3, #0
 8005d88:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d90:	f10a 0a01 	add.w	sl, sl, #1
 8005d94:	9304      	str	r3, [sp, #16]
 8005d96:	9307      	str	r3, [sp, #28]
 8005d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d9e:	4654      	mov	r4, sl
 8005da0:	2205      	movs	r2, #5
 8005da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da6:	4858      	ldr	r0, [pc, #352]	; (8005f08 <_vfiprintf_r+0x24c>)
 8005da8:	f7fa fa32 	bl	8000210 <memchr>
 8005dac:	9a04      	ldr	r2, [sp, #16]
 8005dae:	b9d8      	cbnz	r0, 8005de8 <_vfiprintf_r+0x12c>
 8005db0:	06d1      	lsls	r1, r2, #27
 8005db2:	bf44      	itt	mi
 8005db4:	2320      	movmi	r3, #32
 8005db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dba:	0713      	lsls	r3, r2, #28
 8005dbc:	bf44      	itt	mi
 8005dbe:	232b      	movmi	r3, #43	; 0x2b
 8005dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dca:	d015      	beq.n	8005df8 <_vfiprintf_r+0x13c>
 8005dcc:	9a07      	ldr	r2, [sp, #28]
 8005dce:	4654      	mov	r4, sl
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f04f 0c0a 	mov.w	ip, #10
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ddc:	3b30      	subs	r3, #48	; 0x30
 8005dde:	2b09      	cmp	r3, #9
 8005de0:	d94e      	bls.n	8005e80 <_vfiprintf_r+0x1c4>
 8005de2:	b1b0      	cbz	r0, 8005e12 <_vfiprintf_r+0x156>
 8005de4:	9207      	str	r2, [sp, #28]
 8005de6:	e014      	b.n	8005e12 <_vfiprintf_r+0x156>
 8005de8:	eba0 0308 	sub.w	r3, r0, r8
 8005dec:	fa09 f303 	lsl.w	r3, r9, r3
 8005df0:	4313      	orrs	r3, r2
 8005df2:	9304      	str	r3, [sp, #16]
 8005df4:	46a2      	mov	sl, r4
 8005df6:	e7d2      	b.n	8005d9e <_vfiprintf_r+0xe2>
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	1d19      	adds	r1, r3, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	9103      	str	r1, [sp, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bfbb      	ittet	lt
 8005e04:	425b      	neglt	r3, r3
 8005e06:	f042 0202 	orrlt.w	r2, r2, #2
 8005e0a:	9307      	strge	r3, [sp, #28]
 8005e0c:	9307      	strlt	r3, [sp, #28]
 8005e0e:	bfb8      	it	lt
 8005e10:	9204      	strlt	r2, [sp, #16]
 8005e12:	7823      	ldrb	r3, [r4, #0]
 8005e14:	2b2e      	cmp	r3, #46	; 0x2e
 8005e16:	d10c      	bne.n	8005e32 <_vfiprintf_r+0x176>
 8005e18:	7863      	ldrb	r3, [r4, #1]
 8005e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1c:	d135      	bne.n	8005e8a <_vfiprintf_r+0x1ce>
 8005e1e:	9b03      	ldr	r3, [sp, #12]
 8005e20:	1d1a      	adds	r2, r3, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	9203      	str	r2, [sp, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bfb8      	it	lt
 8005e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e2e:	3402      	adds	r4, #2
 8005e30:	9305      	str	r3, [sp, #20]
 8005e32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005f18 <_vfiprintf_r+0x25c>
 8005e36:	7821      	ldrb	r1, [r4, #0]
 8005e38:	2203      	movs	r2, #3
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	f7fa f9e8 	bl	8000210 <memchr>
 8005e40:	b140      	cbz	r0, 8005e54 <_vfiprintf_r+0x198>
 8005e42:	2340      	movs	r3, #64	; 0x40
 8005e44:	eba0 000a 	sub.w	r0, r0, sl
 8005e48:	fa03 f000 	lsl.w	r0, r3, r0
 8005e4c:	9b04      	ldr	r3, [sp, #16]
 8005e4e:	4303      	orrs	r3, r0
 8005e50:	3401      	adds	r4, #1
 8005e52:	9304      	str	r3, [sp, #16]
 8005e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e58:	482c      	ldr	r0, [pc, #176]	; (8005f0c <_vfiprintf_r+0x250>)
 8005e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e5e:	2206      	movs	r2, #6
 8005e60:	f7fa f9d6 	bl	8000210 <memchr>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d03f      	beq.n	8005ee8 <_vfiprintf_r+0x22c>
 8005e68:	4b29      	ldr	r3, [pc, #164]	; (8005f10 <_vfiprintf_r+0x254>)
 8005e6a:	bb1b      	cbnz	r3, 8005eb4 <_vfiprintf_r+0x1f8>
 8005e6c:	9b03      	ldr	r3, [sp, #12]
 8005e6e:	3307      	adds	r3, #7
 8005e70:	f023 0307 	bic.w	r3, r3, #7
 8005e74:	3308      	adds	r3, #8
 8005e76:	9303      	str	r3, [sp, #12]
 8005e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7a:	443b      	add	r3, r7
 8005e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e7e:	e767      	b.n	8005d50 <_vfiprintf_r+0x94>
 8005e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e84:	460c      	mov	r4, r1
 8005e86:	2001      	movs	r0, #1
 8005e88:	e7a5      	b.n	8005dd6 <_vfiprintf_r+0x11a>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	3401      	adds	r4, #1
 8005e8e:	9305      	str	r3, [sp, #20]
 8005e90:	4619      	mov	r1, r3
 8005e92:	f04f 0c0a 	mov.w	ip, #10
 8005e96:	4620      	mov	r0, r4
 8005e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e9c:	3a30      	subs	r2, #48	; 0x30
 8005e9e:	2a09      	cmp	r2, #9
 8005ea0:	d903      	bls.n	8005eaa <_vfiprintf_r+0x1ee>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0c5      	beq.n	8005e32 <_vfiprintf_r+0x176>
 8005ea6:	9105      	str	r1, [sp, #20]
 8005ea8:	e7c3      	b.n	8005e32 <_vfiprintf_r+0x176>
 8005eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eae:	4604      	mov	r4, r0
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e7f0      	b.n	8005e96 <_vfiprintf_r+0x1da>
 8005eb4:	ab03      	add	r3, sp, #12
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	462a      	mov	r2, r5
 8005eba:	4b16      	ldr	r3, [pc, #88]	; (8005f14 <_vfiprintf_r+0x258>)
 8005ebc:	a904      	add	r1, sp, #16
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	f3af 8000 	nop.w
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	1c78      	adds	r0, r7, #1
 8005ec8:	d1d6      	bne.n	8005e78 <_vfiprintf_r+0x1bc>
 8005eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ecc:	07d9      	lsls	r1, r3, #31
 8005ece:	d405      	bmi.n	8005edc <_vfiprintf_r+0x220>
 8005ed0:	89ab      	ldrh	r3, [r5, #12]
 8005ed2:	059a      	lsls	r2, r3, #22
 8005ed4:	d402      	bmi.n	8005edc <_vfiprintf_r+0x220>
 8005ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ed8:	f7ff fe6b 	bl	8005bb2 <__retarget_lock_release_recursive>
 8005edc:	89ab      	ldrh	r3, [r5, #12]
 8005ede:	065b      	lsls	r3, r3, #25
 8005ee0:	f53f af12 	bmi.w	8005d08 <_vfiprintf_r+0x4c>
 8005ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ee6:	e711      	b.n	8005d0c <_vfiprintf_r+0x50>
 8005ee8:	ab03      	add	r3, sp, #12
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	462a      	mov	r2, r5
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <_vfiprintf_r+0x258>)
 8005ef0:	a904      	add	r1, sp, #16
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f000 f880 	bl	8005ff8 <_printf_i>
 8005ef8:	e7e4      	b.n	8005ec4 <_vfiprintf_r+0x208>
 8005efa:	bf00      	nop
 8005efc:	08006988 	.word	0x08006988
 8005f00:	080069a8 	.word	0x080069a8
 8005f04:	08006968 	.word	0x08006968
 8005f08:	080069c8 	.word	0x080069c8
 8005f0c:	080069d2 	.word	0x080069d2
 8005f10:	00000000 	.word	0x00000000
 8005f14:	08005c97 	.word	0x08005c97
 8005f18:	080069ce 	.word	0x080069ce

08005f1c <_printf_common>:
 8005f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f20:	4616      	mov	r6, r2
 8005f22:	4699      	mov	r9, r3
 8005f24:	688a      	ldr	r2, [r1, #8]
 8005f26:	690b      	ldr	r3, [r1, #16]
 8005f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	bfb8      	it	lt
 8005f30:	4613      	movlt	r3, r2
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f38:	4607      	mov	r7, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	b10a      	cbz	r2, 8005f42 <_printf_common+0x26>
 8005f3e:	3301      	adds	r3, #1
 8005f40:	6033      	str	r3, [r6, #0]
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	0699      	lsls	r1, r3, #26
 8005f46:	bf42      	ittt	mi
 8005f48:	6833      	ldrmi	r3, [r6, #0]
 8005f4a:	3302      	addmi	r3, #2
 8005f4c:	6033      	strmi	r3, [r6, #0]
 8005f4e:	6825      	ldr	r5, [r4, #0]
 8005f50:	f015 0506 	ands.w	r5, r5, #6
 8005f54:	d106      	bne.n	8005f64 <_printf_common+0x48>
 8005f56:	f104 0a19 	add.w	sl, r4, #25
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	6832      	ldr	r2, [r6, #0]
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	dc26      	bgt.n	8005fb2 <_printf_common+0x96>
 8005f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f68:	1e13      	subs	r3, r2, #0
 8005f6a:	6822      	ldr	r2, [r4, #0]
 8005f6c:	bf18      	it	ne
 8005f6e:	2301      	movne	r3, #1
 8005f70:	0692      	lsls	r2, r2, #26
 8005f72:	d42b      	bmi.n	8005fcc <_printf_common+0xb0>
 8005f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f78:	4649      	mov	r1, r9
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	47c0      	blx	r8
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d01e      	beq.n	8005fc0 <_printf_common+0xa4>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	68e5      	ldr	r5, [r4, #12]
 8005f86:	6832      	ldr	r2, [r6, #0]
 8005f88:	f003 0306 	and.w	r3, r3, #6
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	bf08      	it	eq
 8005f90:	1aad      	subeq	r5, r5, r2
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	6922      	ldr	r2, [r4, #16]
 8005f96:	bf0c      	ite	eq
 8005f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f9c:	2500      	movne	r5, #0
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	bfc4      	itt	gt
 8005fa2:	1a9b      	subgt	r3, r3, r2
 8005fa4:	18ed      	addgt	r5, r5, r3
 8005fa6:	2600      	movs	r6, #0
 8005fa8:	341a      	adds	r4, #26
 8005faa:	42b5      	cmp	r5, r6
 8005fac:	d11a      	bne.n	8005fe4 <_printf_common+0xc8>
 8005fae:	2000      	movs	r0, #0
 8005fb0:	e008      	b.n	8005fc4 <_printf_common+0xa8>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4652      	mov	r2, sl
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4638      	mov	r0, r7
 8005fba:	47c0      	blx	r8
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d103      	bne.n	8005fc8 <_printf_common+0xac>
 8005fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc8:	3501      	adds	r5, #1
 8005fca:	e7c6      	b.n	8005f5a <_printf_common+0x3e>
 8005fcc:	18e1      	adds	r1, r4, r3
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	2030      	movs	r0, #48	; 0x30
 8005fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fd6:	4422      	add	r2, r4
 8005fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	e7c7      	b.n	8005f74 <_printf_common+0x58>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	4649      	mov	r1, r9
 8005fea:	4638      	mov	r0, r7
 8005fec:	47c0      	blx	r8
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d0e6      	beq.n	8005fc0 <_printf_common+0xa4>
 8005ff2:	3601      	adds	r6, #1
 8005ff4:	e7d9      	b.n	8005faa <_printf_common+0x8e>
	...

08005ff8 <_printf_i>:
 8005ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	4691      	mov	r9, r2
 8006000:	7e27      	ldrb	r7, [r4, #24]
 8006002:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006004:	2f78      	cmp	r7, #120	; 0x78
 8006006:	4680      	mov	r8, r0
 8006008:	469a      	mov	sl, r3
 800600a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800600e:	d807      	bhi.n	8006020 <_printf_i+0x28>
 8006010:	2f62      	cmp	r7, #98	; 0x62
 8006012:	d80a      	bhi.n	800602a <_printf_i+0x32>
 8006014:	2f00      	cmp	r7, #0
 8006016:	f000 80d8 	beq.w	80061ca <_printf_i+0x1d2>
 800601a:	2f58      	cmp	r7, #88	; 0x58
 800601c:	f000 80a3 	beq.w	8006166 <_printf_i+0x16e>
 8006020:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006028:	e03a      	b.n	80060a0 <_printf_i+0xa8>
 800602a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800602e:	2b15      	cmp	r3, #21
 8006030:	d8f6      	bhi.n	8006020 <_printf_i+0x28>
 8006032:	a001      	add	r0, pc, #4	; (adr r0, 8006038 <_printf_i+0x40>)
 8006034:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006038:	08006091 	.word	0x08006091
 800603c:	080060a5 	.word	0x080060a5
 8006040:	08006021 	.word	0x08006021
 8006044:	08006021 	.word	0x08006021
 8006048:	08006021 	.word	0x08006021
 800604c:	08006021 	.word	0x08006021
 8006050:	080060a5 	.word	0x080060a5
 8006054:	08006021 	.word	0x08006021
 8006058:	08006021 	.word	0x08006021
 800605c:	08006021 	.word	0x08006021
 8006060:	08006021 	.word	0x08006021
 8006064:	080061b1 	.word	0x080061b1
 8006068:	080060d5 	.word	0x080060d5
 800606c:	08006193 	.word	0x08006193
 8006070:	08006021 	.word	0x08006021
 8006074:	08006021 	.word	0x08006021
 8006078:	080061d3 	.word	0x080061d3
 800607c:	08006021 	.word	0x08006021
 8006080:	080060d5 	.word	0x080060d5
 8006084:	08006021 	.word	0x08006021
 8006088:	08006021 	.word	0x08006021
 800608c:	0800619b 	.word	0x0800619b
 8006090:	680b      	ldr	r3, [r1, #0]
 8006092:	1d1a      	adds	r2, r3, #4
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	600a      	str	r2, [r1, #0]
 8006098:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800609c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0a3      	b.n	80061ec <_printf_i+0x1f4>
 80060a4:	6825      	ldr	r5, [r4, #0]
 80060a6:	6808      	ldr	r0, [r1, #0]
 80060a8:	062e      	lsls	r6, r5, #24
 80060aa:	f100 0304 	add.w	r3, r0, #4
 80060ae:	d50a      	bpl.n	80060c6 <_printf_i+0xce>
 80060b0:	6805      	ldr	r5, [r0, #0]
 80060b2:	600b      	str	r3, [r1, #0]
 80060b4:	2d00      	cmp	r5, #0
 80060b6:	da03      	bge.n	80060c0 <_printf_i+0xc8>
 80060b8:	232d      	movs	r3, #45	; 0x2d
 80060ba:	426d      	negs	r5, r5
 80060bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c0:	485e      	ldr	r0, [pc, #376]	; (800623c <_printf_i+0x244>)
 80060c2:	230a      	movs	r3, #10
 80060c4:	e019      	b.n	80060fa <_printf_i+0x102>
 80060c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80060ca:	6805      	ldr	r5, [r0, #0]
 80060cc:	600b      	str	r3, [r1, #0]
 80060ce:	bf18      	it	ne
 80060d0:	b22d      	sxthne	r5, r5
 80060d2:	e7ef      	b.n	80060b4 <_printf_i+0xbc>
 80060d4:	680b      	ldr	r3, [r1, #0]
 80060d6:	6825      	ldr	r5, [r4, #0]
 80060d8:	1d18      	adds	r0, r3, #4
 80060da:	6008      	str	r0, [r1, #0]
 80060dc:	0628      	lsls	r0, r5, #24
 80060de:	d501      	bpl.n	80060e4 <_printf_i+0xec>
 80060e0:	681d      	ldr	r5, [r3, #0]
 80060e2:	e002      	b.n	80060ea <_printf_i+0xf2>
 80060e4:	0669      	lsls	r1, r5, #25
 80060e6:	d5fb      	bpl.n	80060e0 <_printf_i+0xe8>
 80060e8:	881d      	ldrh	r5, [r3, #0]
 80060ea:	4854      	ldr	r0, [pc, #336]	; (800623c <_printf_i+0x244>)
 80060ec:	2f6f      	cmp	r7, #111	; 0x6f
 80060ee:	bf0c      	ite	eq
 80060f0:	2308      	moveq	r3, #8
 80060f2:	230a      	movne	r3, #10
 80060f4:	2100      	movs	r1, #0
 80060f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060fa:	6866      	ldr	r6, [r4, #4]
 80060fc:	60a6      	str	r6, [r4, #8]
 80060fe:	2e00      	cmp	r6, #0
 8006100:	bfa2      	ittt	ge
 8006102:	6821      	ldrge	r1, [r4, #0]
 8006104:	f021 0104 	bicge.w	r1, r1, #4
 8006108:	6021      	strge	r1, [r4, #0]
 800610a:	b90d      	cbnz	r5, 8006110 <_printf_i+0x118>
 800610c:	2e00      	cmp	r6, #0
 800610e:	d04d      	beq.n	80061ac <_printf_i+0x1b4>
 8006110:	4616      	mov	r6, r2
 8006112:	fbb5 f1f3 	udiv	r1, r5, r3
 8006116:	fb03 5711 	mls	r7, r3, r1, r5
 800611a:	5dc7      	ldrb	r7, [r0, r7]
 800611c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006120:	462f      	mov	r7, r5
 8006122:	42bb      	cmp	r3, r7
 8006124:	460d      	mov	r5, r1
 8006126:	d9f4      	bls.n	8006112 <_printf_i+0x11a>
 8006128:	2b08      	cmp	r3, #8
 800612a:	d10b      	bne.n	8006144 <_printf_i+0x14c>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	07df      	lsls	r7, r3, #31
 8006130:	d508      	bpl.n	8006144 <_printf_i+0x14c>
 8006132:	6923      	ldr	r3, [r4, #16]
 8006134:	6861      	ldr	r1, [r4, #4]
 8006136:	4299      	cmp	r1, r3
 8006138:	bfde      	ittt	le
 800613a:	2330      	movle	r3, #48	; 0x30
 800613c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006140:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006144:	1b92      	subs	r2, r2, r6
 8006146:	6122      	str	r2, [r4, #16]
 8006148:	f8cd a000 	str.w	sl, [sp]
 800614c:	464b      	mov	r3, r9
 800614e:	aa03      	add	r2, sp, #12
 8006150:	4621      	mov	r1, r4
 8006152:	4640      	mov	r0, r8
 8006154:	f7ff fee2 	bl	8005f1c <_printf_common>
 8006158:	3001      	adds	r0, #1
 800615a:	d14c      	bne.n	80061f6 <_printf_i+0x1fe>
 800615c:	f04f 30ff 	mov.w	r0, #4294967295
 8006160:	b004      	add	sp, #16
 8006162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006166:	4835      	ldr	r0, [pc, #212]	; (800623c <_printf_i+0x244>)
 8006168:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	680e      	ldr	r6, [r1, #0]
 8006170:	061f      	lsls	r7, r3, #24
 8006172:	f856 5b04 	ldr.w	r5, [r6], #4
 8006176:	600e      	str	r6, [r1, #0]
 8006178:	d514      	bpl.n	80061a4 <_printf_i+0x1ac>
 800617a:	07d9      	lsls	r1, r3, #31
 800617c:	bf44      	itt	mi
 800617e:	f043 0320 	orrmi.w	r3, r3, #32
 8006182:	6023      	strmi	r3, [r4, #0]
 8006184:	b91d      	cbnz	r5, 800618e <_printf_i+0x196>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	f023 0320 	bic.w	r3, r3, #32
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	2310      	movs	r3, #16
 8006190:	e7b0      	b.n	80060f4 <_printf_i+0xfc>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f043 0320 	orr.w	r3, r3, #32
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	2378      	movs	r3, #120	; 0x78
 800619c:	4828      	ldr	r0, [pc, #160]	; (8006240 <_printf_i+0x248>)
 800619e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061a2:	e7e3      	b.n	800616c <_printf_i+0x174>
 80061a4:	065e      	lsls	r6, r3, #25
 80061a6:	bf48      	it	mi
 80061a8:	b2ad      	uxthmi	r5, r5
 80061aa:	e7e6      	b.n	800617a <_printf_i+0x182>
 80061ac:	4616      	mov	r6, r2
 80061ae:	e7bb      	b.n	8006128 <_printf_i+0x130>
 80061b0:	680b      	ldr	r3, [r1, #0]
 80061b2:	6826      	ldr	r6, [r4, #0]
 80061b4:	6960      	ldr	r0, [r4, #20]
 80061b6:	1d1d      	adds	r5, r3, #4
 80061b8:	600d      	str	r5, [r1, #0]
 80061ba:	0635      	lsls	r5, r6, #24
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	d501      	bpl.n	80061c4 <_printf_i+0x1cc>
 80061c0:	6018      	str	r0, [r3, #0]
 80061c2:	e002      	b.n	80061ca <_printf_i+0x1d2>
 80061c4:	0671      	lsls	r1, r6, #25
 80061c6:	d5fb      	bpl.n	80061c0 <_printf_i+0x1c8>
 80061c8:	8018      	strh	r0, [r3, #0]
 80061ca:	2300      	movs	r3, #0
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	4616      	mov	r6, r2
 80061d0:	e7ba      	b.n	8006148 <_printf_i+0x150>
 80061d2:	680b      	ldr	r3, [r1, #0]
 80061d4:	1d1a      	adds	r2, r3, #4
 80061d6:	600a      	str	r2, [r1, #0]
 80061d8:	681e      	ldr	r6, [r3, #0]
 80061da:	6862      	ldr	r2, [r4, #4]
 80061dc:	2100      	movs	r1, #0
 80061de:	4630      	mov	r0, r6
 80061e0:	f7fa f816 	bl	8000210 <memchr>
 80061e4:	b108      	cbz	r0, 80061ea <_printf_i+0x1f2>
 80061e6:	1b80      	subs	r0, r0, r6
 80061e8:	6060      	str	r0, [r4, #4]
 80061ea:	6863      	ldr	r3, [r4, #4]
 80061ec:	6123      	str	r3, [r4, #16]
 80061ee:	2300      	movs	r3, #0
 80061f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f4:	e7a8      	b.n	8006148 <_printf_i+0x150>
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	4632      	mov	r2, r6
 80061fa:	4649      	mov	r1, r9
 80061fc:	4640      	mov	r0, r8
 80061fe:	47d0      	blx	sl
 8006200:	3001      	adds	r0, #1
 8006202:	d0ab      	beq.n	800615c <_printf_i+0x164>
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	079b      	lsls	r3, r3, #30
 8006208:	d413      	bmi.n	8006232 <_printf_i+0x23a>
 800620a:	68e0      	ldr	r0, [r4, #12]
 800620c:	9b03      	ldr	r3, [sp, #12]
 800620e:	4298      	cmp	r0, r3
 8006210:	bfb8      	it	lt
 8006212:	4618      	movlt	r0, r3
 8006214:	e7a4      	b.n	8006160 <_printf_i+0x168>
 8006216:	2301      	movs	r3, #1
 8006218:	4632      	mov	r2, r6
 800621a:	4649      	mov	r1, r9
 800621c:	4640      	mov	r0, r8
 800621e:	47d0      	blx	sl
 8006220:	3001      	adds	r0, #1
 8006222:	d09b      	beq.n	800615c <_printf_i+0x164>
 8006224:	3501      	adds	r5, #1
 8006226:	68e3      	ldr	r3, [r4, #12]
 8006228:	9903      	ldr	r1, [sp, #12]
 800622a:	1a5b      	subs	r3, r3, r1
 800622c:	42ab      	cmp	r3, r5
 800622e:	dcf2      	bgt.n	8006216 <_printf_i+0x21e>
 8006230:	e7eb      	b.n	800620a <_printf_i+0x212>
 8006232:	2500      	movs	r5, #0
 8006234:	f104 0619 	add.w	r6, r4, #25
 8006238:	e7f5      	b.n	8006226 <_printf_i+0x22e>
 800623a:	bf00      	nop
 800623c:	080069d9 	.word	0x080069d9
 8006240:	080069ea 	.word	0x080069ea

08006244 <_sbrk_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d06      	ldr	r5, [pc, #24]	; (8006260 <_sbrk_r+0x1c>)
 8006248:	2300      	movs	r3, #0
 800624a:	4604      	mov	r4, r0
 800624c:	4608      	mov	r0, r1
 800624e:	602b      	str	r3, [r5, #0]
 8006250:	f7fb fd2e 	bl	8001cb0 <_sbrk>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d102      	bne.n	800625e <_sbrk_r+0x1a>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	b103      	cbz	r3, 800625e <_sbrk_r+0x1a>
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	20000260 	.word	0x20000260

08006264 <__sread>:
 8006264:	b510      	push	{r4, lr}
 8006266:	460c      	mov	r4, r1
 8006268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626c:	f000 fab4 	bl	80067d8 <_read_r>
 8006270:	2800      	cmp	r0, #0
 8006272:	bfab      	itete	ge
 8006274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006276:	89a3      	ldrhlt	r3, [r4, #12]
 8006278:	181b      	addge	r3, r3, r0
 800627a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800627e:	bfac      	ite	ge
 8006280:	6563      	strge	r3, [r4, #84]	; 0x54
 8006282:	81a3      	strhlt	r3, [r4, #12]
 8006284:	bd10      	pop	{r4, pc}

08006286 <__swrite>:
 8006286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628a:	461f      	mov	r7, r3
 800628c:	898b      	ldrh	r3, [r1, #12]
 800628e:	05db      	lsls	r3, r3, #23
 8006290:	4605      	mov	r5, r0
 8006292:	460c      	mov	r4, r1
 8006294:	4616      	mov	r6, r2
 8006296:	d505      	bpl.n	80062a4 <__swrite+0x1e>
 8006298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629c:	2302      	movs	r3, #2
 800629e:	2200      	movs	r2, #0
 80062a0:	f000 f9c8 	bl	8006634 <_lseek_r>
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	4632      	mov	r2, r6
 80062b2:	463b      	mov	r3, r7
 80062b4:	4628      	mov	r0, r5
 80062b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ba:	f000 b869 	b.w	8006390 <_write_r>

080062be <__sseek>:
 80062be:	b510      	push	{r4, lr}
 80062c0:	460c      	mov	r4, r1
 80062c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c6:	f000 f9b5 	bl	8006634 <_lseek_r>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	bf15      	itete	ne
 80062d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80062d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062da:	81a3      	strheq	r3, [r4, #12]
 80062dc:	bf18      	it	ne
 80062de:	81a3      	strhne	r3, [r4, #12]
 80062e0:	bd10      	pop	{r4, pc}

080062e2 <__sclose>:
 80062e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e6:	f000 b8d3 	b.w	8006490 <_close_r>
	...

080062ec <__swbuf_r>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	460e      	mov	r6, r1
 80062f0:	4614      	mov	r4, r2
 80062f2:	4605      	mov	r5, r0
 80062f4:	b118      	cbz	r0, 80062fe <__swbuf_r+0x12>
 80062f6:	6983      	ldr	r3, [r0, #24]
 80062f8:	b90b      	cbnz	r3, 80062fe <__swbuf_r+0x12>
 80062fa:	f7ff fbbb 	bl	8005a74 <__sinit>
 80062fe:	4b21      	ldr	r3, [pc, #132]	; (8006384 <__swbuf_r+0x98>)
 8006300:	429c      	cmp	r4, r3
 8006302:	d12b      	bne.n	800635c <__swbuf_r+0x70>
 8006304:	686c      	ldr	r4, [r5, #4]
 8006306:	69a3      	ldr	r3, [r4, #24]
 8006308:	60a3      	str	r3, [r4, #8]
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	071a      	lsls	r2, r3, #28
 800630e:	d52f      	bpl.n	8006370 <__swbuf_r+0x84>
 8006310:	6923      	ldr	r3, [r4, #16]
 8006312:	b36b      	cbz	r3, 8006370 <__swbuf_r+0x84>
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	6820      	ldr	r0, [r4, #0]
 8006318:	1ac0      	subs	r0, r0, r3
 800631a:	6963      	ldr	r3, [r4, #20]
 800631c:	b2f6      	uxtb	r6, r6
 800631e:	4283      	cmp	r3, r0
 8006320:	4637      	mov	r7, r6
 8006322:	dc04      	bgt.n	800632e <__swbuf_r+0x42>
 8006324:	4621      	mov	r1, r4
 8006326:	4628      	mov	r0, r5
 8006328:	f000 f948 	bl	80065bc <_fflush_r>
 800632c:	bb30      	cbnz	r0, 800637c <__swbuf_r+0x90>
 800632e:	68a3      	ldr	r3, [r4, #8]
 8006330:	3b01      	subs	r3, #1
 8006332:	60a3      	str	r3, [r4, #8]
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	6022      	str	r2, [r4, #0]
 800633a:	701e      	strb	r6, [r3, #0]
 800633c:	6963      	ldr	r3, [r4, #20]
 800633e:	3001      	adds	r0, #1
 8006340:	4283      	cmp	r3, r0
 8006342:	d004      	beq.n	800634e <__swbuf_r+0x62>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	07db      	lsls	r3, r3, #31
 8006348:	d506      	bpl.n	8006358 <__swbuf_r+0x6c>
 800634a:	2e0a      	cmp	r6, #10
 800634c:	d104      	bne.n	8006358 <__swbuf_r+0x6c>
 800634e:	4621      	mov	r1, r4
 8006350:	4628      	mov	r0, r5
 8006352:	f000 f933 	bl	80065bc <_fflush_r>
 8006356:	b988      	cbnz	r0, 800637c <__swbuf_r+0x90>
 8006358:	4638      	mov	r0, r7
 800635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <__swbuf_r+0x9c>)
 800635e:	429c      	cmp	r4, r3
 8006360:	d101      	bne.n	8006366 <__swbuf_r+0x7a>
 8006362:	68ac      	ldr	r4, [r5, #8]
 8006364:	e7cf      	b.n	8006306 <__swbuf_r+0x1a>
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <__swbuf_r+0xa0>)
 8006368:	429c      	cmp	r4, r3
 800636a:	bf08      	it	eq
 800636c:	68ec      	ldreq	r4, [r5, #12]
 800636e:	e7ca      	b.n	8006306 <__swbuf_r+0x1a>
 8006370:	4621      	mov	r1, r4
 8006372:	4628      	mov	r0, r5
 8006374:	f000 f81e 	bl	80063b4 <__swsetup_r>
 8006378:	2800      	cmp	r0, #0
 800637a:	d0cb      	beq.n	8006314 <__swbuf_r+0x28>
 800637c:	f04f 37ff 	mov.w	r7, #4294967295
 8006380:	e7ea      	b.n	8006358 <__swbuf_r+0x6c>
 8006382:	bf00      	nop
 8006384:	08006988 	.word	0x08006988
 8006388:	080069a8 	.word	0x080069a8
 800638c:	08006968 	.word	0x08006968

08006390 <_write_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	; (80063b0 <_write_r+0x20>)
 8006394:	4604      	mov	r4, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	602a      	str	r2, [r5, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7fa f929 	bl	80005f6 <_write>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_write_r+0x1e>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_write_r+0x1e>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	20000260 	.word	0x20000260

080063b4 <__swsetup_r>:
 80063b4:	4b32      	ldr	r3, [pc, #200]	; (8006480 <__swsetup_r+0xcc>)
 80063b6:	b570      	push	{r4, r5, r6, lr}
 80063b8:	681d      	ldr	r5, [r3, #0]
 80063ba:	4606      	mov	r6, r0
 80063bc:	460c      	mov	r4, r1
 80063be:	b125      	cbz	r5, 80063ca <__swsetup_r+0x16>
 80063c0:	69ab      	ldr	r3, [r5, #24]
 80063c2:	b913      	cbnz	r3, 80063ca <__swsetup_r+0x16>
 80063c4:	4628      	mov	r0, r5
 80063c6:	f7ff fb55 	bl	8005a74 <__sinit>
 80063ca:	4b2e      	ldr	r3, [pc, #184]	; (8006484 <__swsetup_r+0xd0>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	d10f      	bne.n	80063f0 <__swsetup_r+0x3c>
 80063d0:	686c      	ldr	r4, [r5, #4]
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063d8:	0719      	lsls	r1, r3, #28
 80063da:	d42c      	bmi.n	8006436 <__swsetup_r+0x82>
 80063dc:	06dd      	lsls	r5, r3, #27
 80063de:	d411      	bmi.n	8006404 <__swsetup_r+0x50>
 80063e0:	2309      	movs	r3, #9
 80063e2:	6033      	str	r3, [r6, #0]
 80063e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	f04f 30ff 	mov.w	r0, #4294967295
 80063ee:	e03e      	b.n	800646e <__swsetup_r+0xba>
 80063f0:	4b25      	ldr	r3, [pc, #148]	; (8006488 <__swsetup_r+0xd4>)
 80063f2:	429c      	cmp	r4, r3
 80063f4:	d101      	bne.n	80063fa <__swsetup_r+0x46>
 80063f6:	68ac      	ldr	r4, [r5, #8]
 80063f8:	e7eb      	b.n	80063d2 <__swsetup_r+0x1e>
 80063fa:	4b24      	ldr	r3, [pc, #144]	; (800648c <__swsetup_r+0xd8>)
 80063fc:	429c      	cmp	r4, r3
 80063fe:	bf08      	it	eq
 8006400:	68ec      	ldreq	r4, [r5, #12]
 8006402:	e7e6      	b.n	80063d2 <__swsetup_r+0x1e>
 8006404:	0758      	lsls	r0, r3, #29
 8006406:	d512      	bpl.n	800642e <__swsetup_r+0x7a>
 8006408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800640a:	b141      	cbz	r1, 800641e <__swsetup_r+0x6a>
 800640c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006410:	4299      	cmp	r1, r3
 8006412:	d002      	beq.n	800641a <__swsetup_r+0x66>
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f98f 	bl	8006738 <_free_r>
 800641a:	2300      	movs	r3, #0
 800641c:	6363      	str	r3, [r4, #52]	; 0x34
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	2300      	movs	r3, #0
 8006428:	6063      	str	r3, [r4, #4]
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	f043 0308 	orr.w	r3, r3, #8
 8006434:	81a3      	strh	r3, [r4, #12]
 8006436:	6923      	ldr	r3, [r4, #16]
 8006438:	b94b      	cbnz	r3, 800644e <__swsetup_r+0x9a>
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006444:	d003      	beq.n	800644e <__swsetup_r+0x9a>
 8006446:	4621      	mov	r1, r4
 8006448:	4630      	mov	r0, r6
 800644a:	f000 f929 	bl	80066a0 <__smakebuf_r>
 800644e:	89a0      	ldrh	r0, [r4, #12]
 8006450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006454:	f010 0301 	ands.w	r3, r0, #1
 8006458:	d00a      	beq.n	8006470 <__swsetup_r+0xbc>
 800645a:	2300      	movs	r3, #0
 800645c:	60a3      	str	r3, [r4, #8]
 800645e:	6963      	ldr	r3, [r4, #20]
 8006460:	425b      	negs	r3, r3
 8006462:	61a3      	str	r3, [r4, #24]
 8006464:	6923      	ldr	r3, [r4, #16]
 8006466:	b943      	cbnz	r3, 800647a <__swsetup_r+0xc6>
 8006468:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800646c:	d1ba      	bne.n	80063e4 <__swsetup_r+0x30>
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	0781      	lsls	r1, r0, #30
 8006472:	bf58      	it	pl
 8006474:	6963      	ldrpl	r3, [r4, #20]
 8006476:	60a3      	str	r3, [r4, #8]
 8006478:	e7f4      	b.n	8006464 <__swsetup_r+0xb0>
 800647a:	2000      	movs	r0, #0
 800647c:	e7f7      	b.n	800646e <__swsetup_r+0xba>
 800647e:	bf00      	nop
 8006480:	20000014 	.word	0x20000014
 8006484:	08006988 	.word	0x08006988
 8006488:	080069a8 	.word	0x080069a8
 800648c:	08006968 	.word	0x08006968

08006490 <_close_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4d06      	ldr	r5, [pc, #24]	; (80064ac <_close_r+0x1c>)
 8006494:	2300      	movs	r3, #0
 8006496:	4604      	mov	r4, r0
 8006498:	4608      	mov	r0, r1
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	f7fb fbd3 	bl	8001c46 <_close>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_close_r+0x1a>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_close_r+0x1a>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20000260 	.word	0x20000260

080064b0 <__sflush_r>:
 80064b0:	898a      	ldrh	r2, [r1, #12]
 80064b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b6:	4605      	mov	r5, r0
 80064b8:	0710      	lsls	r0, r2, #28
 80064ba:	460c      	mov	r4, r1
 80064bc:	d458      	bmi.n	8006570 <__sflush_r+0xc0>
 80064be:	684b      	ldr	r3, [r1, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dc05      	bgt.n	80064d0 <__sflush_r+0x20>
 80064c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	dc02      	bgt.n	80064d0 <__sflush_r+0x20>
 80064ca:	2000      	movs	r0, #0
 80064cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	d0f9      	beq.n	80064ca <__sflush_r+0x1a>
 80064d6:	2300      	movs	r3, #0
 80064d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064dc:	682f      	ldr	r7, [r5, #0]
 80064de:	602b      	str	r3, [r5, #0]
 80064e0:	d032      	beq.n	8006548 <__sflush_r+0x98>
 80064e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	075a      	lsls	r2, r3, #29
 80064e8:	d505      	bpl.n	80064f6 <__sflush_r+0x46>
 80064ea:	6863      	ldr	r3, [r4, #4]
 80064ec:	1ac0      	subs	r0, r0, r3
 80064ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064f0:	b10b      	cbz	r3, 80064f6 <__sflush_r+0x46>
 80064f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064f4:	1ac0      	subs	r0, r0, r3
 80064f6:	2300      	movs	r3, #0
 80064f8:	4602      	mov	r2, r0
 80064fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064fc:	6a21      	ldr	r1, [r4, #32]
 80064fe:	4628      	mov	r0, r5
 8006500:	47b0      	blx	r6
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	d106      	bne.n	8006516 <__sflush_r+0x66>
 8006508:	6829      	ldr	r1, [r5, #0]
 800650a:	291d      	cmp	r1, #29
 800650c:	d82c      	bhi.n	8006568 <__sflush_r+0xb8>
 800650e:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <__sflush_r+0x108>)
 8006510:	40ca      	lsrs	r2, r1
 8006512:	07d6      	lsls	r6, r2, #31
 8006514:	d528      	bpl.n	8006568 <__sflush_r+0xb8>
 8006516:	2200      	movs	r2, #0
 8006518:	6062      	str	r2, [r4, #4]
 800651a:	04d9      	lsls	r1, r3, #19
 800651c:	6922      	ldr	r2, [r4, #16]
 800651e:	6022      	str	r2, [r4, #0]
 8006520:	d504      	bpl.n	800652c <__sflush_r+0x7c>
 8006522:	1c42      	adds	r2, r0, #1
 8006524:	d101      	bne.n	800652a <__sflush_r+0x7a>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	b903      	cbnz	r3, 800652c <__sflush_r+0x7c>
 800652a:	6560      	str	r0, [r4, #84]	; 0x54
 800652c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800652e:	602f      	str	r7, [r5, #0]
 8006530:	2900      	cmp	r1, #0
 8006532:	d0ca      	beq.n	80064ca <__sflush_r+0x1a>
 8006534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006538:	4299      	cmp	r1, r3
 800653a:	d002      	beq.n	8006542 <__sflush_r+0x92>
 800653c:	4628      	mov	r0, r5
 800653e:	f000 f8fb 	bl	8006738 <_free_r>
 8006542:	2000      	movs	r0, #0
 8006544:	6360      	str	r0, [r4, #52]	; 0x34
 8006546:	e7c1      	b.n	80064cc <__sflush_r+0x1c>
 8006548:	6a21      	ldr	r1, [r4, #32]
 800654a:	2301      	movs	r3, #1
 800654c:	4628      	mov	r0, r5
 800654e:	47b0      	blx	r6
 8006550:	1c41      	adds	r1, r0, #1
 8006552:	d1c7      	bne.n	80064e4 <__sflush_r+0x34>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0c4      	beq.n	80064e4 <__sflush_r+0x34>
 800655a:	2b1d      	cmp	r3, #29
 800655c:	d001      	beq.n	8006562 <__sflush_r+0xb2>
 800655e:	2b16      	cmp	r3, #22
 8006560:	d101      	bne.n	8006566 <__sflush_r+0xb6>
 8006562:	602f      	str	r7, [r5, #0]
 8006564:	e7b1      	b.n	80064ca <__sflush_r+0x1a>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	e7ad      	b.n	80064cc <__sflush_r+0x1c>
 8006570:	690f      	ldr	r7, [r1, #16]
 8006572:	2f00      	cmp	r7, #0
 8006574:	d0a9      	beq.n	80064ca <__sflush_r+0x1a>
 8006576:	0793      	lsls	r3, r2, #30
 8006578:	680e      	ldr	r6, [r1, #0]
 800657a:	bf08      	it	eq
 800657c:	694b      	ldreq	r3, [r1, #20]
 800657e:	600f      	str	r7, [r1, #0]
 8006580:	bf18      	it	ne
 8006582:	2300      	movne	r3, #0
 8006584:	eba6 0807 	sub.w	r8, r6, r7
 8006588:	608b      	str	r3, [r1, #8]
 800658a:	f1b8 0f00 	cmp.w	r8, #0
 800658e:	dd9c      	ble.n	80064ca <__sflush_r+0x1a>
 8006590:	6a21      	ldr	r1, [r4, #32]
 8006592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006594:	4643      	mov	r3, r8
 8006596:	463a      	mov	r2, r7
 8006598:	4628      	mov	r0, r5
 800659a:	47b0      	blx	r6
 800659c:	2800      	cmp	r0, #0
 800659e:	dc06      	bgt.n	80065ae <__sflush_r+0xfe>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ac:	e78e      	b.n	80064cc <__sflush_r+0x1c>
 80065ae:	4407      	add	r7, r0
 80065b0:	eba8 0800 	sub.w	r8, r8, r0
 80065b4:	e7e9      	b.n	800658a <__sflush_r+0xda>
 80065b6:	bf00      	nop
 80065b8:	20400001 	.word	0x20400001

080065bc <_fflush_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	690b      	ldr	r3, [r1, #16]
 80065c0:	4605      	mov	r5, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	b913      	cbnz	r3, 80065cc <_fflush_r+0x10>
 80065c6:	2500      	movs	r5, #0
 80065c8:	4628      	mov	r0, r5
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	b118      	cbz	r0, 80065d6 <_fflush_r+0x1a>
 80065ce:	6983      	ldr	r3, [r0, #24]
 80065d0:	b90b      	cbnz	r3, 80065d6 <_fflush_r+0x1a>
 80065d2:	f7ff fa4f 	bl	8005a74 <__sinit>
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <_fflush_r+0x6c>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	d11b      	bne.n	8006614 <_fflush_r+0x58>
 80065dc:	686c      	ldr	r4, [r5, #4]
 80065de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0ef      	beq.n	80065c6 <_fflush_r+0xa>
 80065e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065e8:	07d0      	lsls	r0, r2, #31
 80065ea:	d404      	bmi.n	80065f6 <_fflush_r+0x3a>
 80065ec:	0599      	lsls	r1, r3, #22
 80065ee:	d402      	bmi.n	80065f6 <_fflush_r+0x3a>
 80065f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065f2:	f7ff fadd 	bl	8005bb0 <__retarget_lock_acquire_recursive>
 80065f6:	4628      	mov	r0, r5
 80065f8:	4621      	mov	r1, r4
 80065fa:	f7ff ff59 	bl	80064b0 <__sflush_r>
 80065fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006600:	07da      	lsls	r2, r3, #31
 8006602:	4605      	mov	r5, r0
 8006604:	d4e0      	bmi.n	80065c8 <_fflush_r+0xc>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	059b      	lsls	r3, r3, #22
 800660a:	d4dd      	bmi.n	80065c8 <_fflush_r+0xc>
 800660c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800660e:	f7ff fad0 	bl	8005bb2 <__retarget_lock_release_recursive>
 8006612:	e7d9      	b.n	80065c8 <_fflush_r+0xc>
 8006614:	4b05      	ldr	r3, [pc, #20]	; (800662c <_fflush_r+0x70>)
 8006616:	429c      	cmp	r4, r3
 8006618:	d101      	bne.n	800661e <_fflush_r+0x62>
 800661a:	68ac      	ldr	r4, [r5, #8]
 800661c:	e7df      	b.n	80065de <_fflush_r+0x22>
 800661e:	4b04      	ldr	r3, [pc, #16]	; (8006630 <_fflush_r+0x74>)
 8006620:	429c      	cmp	r4, r3
 8006622:	bf08      	it	eq
 8006624:	68ec      	ldreq	r4, [r5, #12]
 8006626:	e7da      	b.n	80065de <_fflush_r+0x22>
 8006628:	08006988 	.word	0x08006988
 800662c:	080069a8 	.word	0x080069a8
 8006630:	08006968 	.word	0x08006968

08006634 <_lseek_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4d07      	ldr	r5, [pc, #28]	; (8006654 <_lseek_r+0x20>)
 8006638:	4604      	mov	r4, r0
 800663a:	4608      	mov	r0, r1
 800663c:	4611      	mov	r1, r2
 800663e:	2200      	movs	r2, #0
 8006640:	602a      	str	r2, [r5, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	f7fb fb26 	bl	8001c94 <_lseek>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_lseek_r+0x1e>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	b103      	cbz	r3, 8006652 <_lseek_r+0x1e>
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	20000260 	.word	0x20000260

08006658 <__swhatbuf_r>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	460e      	mov	r6, r1
 800665c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006660:	2900      	cmp	r1, #0
 8006662:	b096      	sub	sp, #88	; 0x58
 8006664:	4614      	mov	r4, r2
 8006666:	461d      	mov	r5, r3
 8006668:	da07      	bge.n	800667a <__swhatbuf_r+0x22>
 800666a:	2300      	movs	r3, #0
 800666c:	602b      	str	r3, [r5, #0]
 800666e:	89b3      	ldrh	r3, [r6, #12]
 8006670:	061a      	lsls	r2, r3, #24
 8006672:	d410      	bmi.n	8006696 <__swhatbuf_r+0x3e>
 8006674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006678:	e00e      	b.n	8006698 <__swhatbuf_r+0x40>
 800667a:	466a      	mov	r2, sp
 800667c:	f000 f8be 	bl	80067fc <_fstat_r>
 8006680:	2800      	cmp	r0, #0
 8006682:	dbf2      	blt.n	800666a <__swhatbuf_r+0x12>
 8006684:	9a01      	ldr	r2, [sp, #4]
 8006686:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800668a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800668e:	425a      	negs	r2, r3
 8006690:	415a      	adcs	r2, r3
 8006692:	602a      	str	r2, [r5, #0]
 8006694:	e7ee      	b.n	8006674 <__swhatbuf_r+0x1c>
 8006696:	2340      	movs	r3, #64	; 0x40
 8006698:	2000      	movs	r0, #0
 800669a:	6023      	str	r3, [r4, #0]
 800669c:	b016      	add	sp, #88	; 0x58
 800669e:	bd70      	pop	{r4, r5, r6, pc}

080066a0 <__smakebuf_r>:
 80066a0:	898b      	ldrh	r3, [r1, #12]
 80066a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066a4:	079d      	lsls	r5, r3, #30
 80066a6:	4606      	mov	r6, r0
 80066a8:	460c      	mov	r4, r1
 80066aa:	d507      	bpl.n	80066bc <__smakebuf_r+0x1c>
 80066ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	6123      	str	r3, [r4, #16]
 80066b4:	2301      	movs	r3, #1
 80066b6:	6163      	str	r3, [r4, #20]
 80066b8:	b002      	add	sp, #8
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	ab01      	add	r3, sp, #4
 80066be:	466a      	mov	r2, sp
 80066c0:	f7ff ffca 	bl	8006658 <__swhatbuf_r>
 80066c4:	9900      	ldr	r1, [sp, #0]
 80066c6:	4605      	mov	r5, r0
 80066c8:	4630      	mov	r0, r6
 80066ca:	f7ff fa73 	bl	8005bb4 <_malloc_r>
 80066ce:	b948      	cbnz	r0, 80066e4 <__smakebuf_r+0x44>
 80066d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d4:	059a      	lsls	r2, r3, #22
 80066d6:	d4ef      	bmi.n	80066b8 <__smakebuf_r+0x18>
 80066d8:	f023 0303 	bic.w	r3, r3, #3
 80066dc:	f043 0302 	orr.w	r3, r3, #2
 80066e0:	81a3      	strh	r3, [r4, #12]
 80066e2:	e7e3      	b.n	80066ac <__smakebuf_r+0xc>
 80066e4:	4b0d      	ldr	r3, [pc, #52]	; (800671c <__smakebuf_r+0x7c>)
 80066e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	6020      	str	r0, [r4, #0]
 80066ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	9b00      	ldr	r3, [sp, #0]
 80066f4:	6163      	str	r3, [r4, #20]
 80066f6:	9b01      	ldr	r3, [sp, #4]
 80066f8:	6120      	str	r0, [r4, #16]
 80066fa:	b15b      	cbz	r3, 8006714 <__smakebuf_r+0x74>
 80066fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006700:	4630      	mov	r0, r6
 8006702:	f000 f88d 	bl	8006820 <_isatty_r>
 8006706:	b128      	cbz	r0, 8006714 <__smakebuf_r+0x74>
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	f023 0303 	bic.w	r3, r3, #3
 800670e:	f043 0301 	orr.w	r3, r3, #1
 8006712:	81a3      	strh	r3, [r4, #12]
 8006714:	89a0      	ldrh	r0, [r4, #12]
 8006716:	4305      	orrs	r5, r0
 8006718:	81a5      	strh	r5, [r4, #12]
 800671a:	e7cd      	b.n	80066b8 <__smakebuf_r+0x18>
 800671c:	08005a0d 	.word	0x08005a0d

08006720 <__malloc_lock>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__malloc_lock+0x8>)
 8006722:	f7ff ba45 	b.w	8005bb0 <__retarget_lock_acquire_recursive>
 8006726:	bf00      	nop
 8006728:	20000258 	.word	0x20000258

0800672c <__malloc_unlock>:
 800672c:	4801      	ldr	r0, [pc, #4]	; (8006734 <__malloc_unlock+0x8>)
 800672e:	f7ff ba40 	b.w	8005bb2 <__retarget_lock_release_recursive>
 8006732:	bf00      	nop
 8006734:	20000258 	.word	0x20000258

08006738 <_free_r>:
 8006738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800673a:	2900      	cmp	r1, #0
 800673c:	d048      	beq.n	80067d0 <_free_r+0x98>
 800673e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006742:	9001      	str	r0, [sp, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	f1a1 0404 	sub.w	r4, r1, #4
 800674a:	bfb8      	it	lt
 800674c:	18e4      	addlt	r4, r4, r3
 800674e:	f7ff ffe7 	bl	8006720 <__malloc_lock>
 8006752:	4a20      	ldr	r2, [pc, #128]	; (80067d4 <_free_r+0x9c>)
 8006754:	9801      	ldr	r0, [sp, #4]
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	4615      	mov	r5, r2
 800675a:	b933      	cbnz	r3, 800676a <_free_r+0x32>
 800675c:	6063      	str	r3, [r4, #4]
 800675e:	6014      	str	r4, [r2, #0]
 8006760:	b003      	add	sp, #12
 8006762:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006766:	f7ff bfe1 	b.w	800672c <__malloc_unlock>
 800676a:	42a3      	cmp	r3, r4
 800676c:	d90b      	bls.n	8006786 <_free_r+0x4e>
 800676e:	6821      	ldr	r1, [r4, #0]
 8006770:	1862      	adds	r2, r4, r1
 8006772:	4293      	cmp	r3, r2
 8006774:	bf04      	itt	eq
 8006776:	681a      	ldreq	r2, [r3, #0]
 8006778:	685b      	ldreq	r3, [r3, #4]
 800677a:	6063      	str	r3, [r4, #4]
 800677c:	bf04      	itt	eq
 800677e:	1852      	addeq	r2, r2, r1
 8006780:	6022      	streq	r2, [r4, #0]
 8006782:	602c      	str	r4, [r5, #0]
 8006784:	e7ec      	b.n	8006760 <_free_r+0x28>
 8006786:	461a      	mov	r2, r3
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	b10b      	cbz	r3, 8006790 <_free_r+0x58>
 800678c:	42a3      	cmp	r3, r4
 800678e:	d9fa      	bls.n	8006786 <_free_r+0x4e>
 8006790:	6811      	ldr	r1, [r2, #0]
 8006792:	1855      	adds	r5, r2, r1
 8006794:	42a5      	cmp	r5, r4
 8006796:	d10b      	bne.n	80067b0 <_free_r+0x78>
 8006798:	6824      	ldr	r4, [r4, #0]
 800679a:	4421      	add	r1, r4
 800679c:	1854      	adds	r4, r2, r1
 800679e:	42a3      	cmp	r3, r4
 80067a0:	6011      	str	r1, [r2, #0]
 80067a2:	d1dd      	bne.n	8006760 <_free_r+0x28>
 80067a4:	681c      	ldr	r4, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	6053      	str	r3, [r2, #4]
 80067aa:	4421      	add	r1, r4
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	e7d7      	b.n	8006760 <_free_r+0x28>
 80067b0:	d902      	bls.n	80067b8 <_free_r+0x80>
 80067b2:	230c      	movs	r3, #12
 80067b4:	6003      	str	r3, [r0, #0]
 80067b6:	e7d3      	b.n	8006760 <_free_r+0x28>
 80067b8:	6825      	ldr	r5, [r4, #0]
 80067ba:	1961      	adds	r1, r4, r5
 80067bc:	428b      	cmp	r3, r1
 80067be:	bf04      	itt	eq
 80067c0:	6819      	ldreq	r1, [r3, #0]
 80067c2:	685b      	ldreq	r3, [r3, #4]
 80067c4:	6063      	str	r3, [r4, #4]
 80067c6:	bf04      	itt	eq
 80067c8:	1949      	addeq	r1, r1, r5
 80067ca:	6021      	streq	r1, [r4, #0]
 80067cc:	6054      	str	r4, [r2, #4]
 80067ce:	e7c7      	b.n	8006760 <_free_r+0x28>
 80067d0:	b003      	add	sp, #12
 80067d2:	bd30      	pop	{r4, r5, pc}
 80067d4:	200000bc 	.word	0x200000bc

080067d8 <_read_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d07      	ldr	r5, [pc, #28]	; (80067f8 <_read_r+0x20>)
 80067dc:	4604      	mov	r4, r0
 80067de:	4608      	mov	r0, r1
 80067e0:	4611      	mov	r1, r2
 80067e2:	2200      	movs	r2, #0
 80067e4:	602a      	str	r2, [r5, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f7fb fa10 	bl	8001c0c <_read>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_read_r+0x1e>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_read_r+0x1e>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	20000260 	.word	0x20000260

080067fc <_fstat_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4d07      	ldr	r5, [pc, #28]	; (800681c <_fstat_r+0x20>)
 8006800:	2300      	movs	r3, #0
 8006802:	4604      	mov	r4, r0
 8006804:	4608      	mov	r0, r1
 8006806:	4611      	mov	r1, r2
 8006808:	602b      	str	r3, [r5, #0]
 800680a:	f7fb fa28 	bl	8001c5e <_fstat>
 800680e:	1c43      	adds	r3, r0, #1
 8006810:	d102      	bne.n	8006818 <_fstat_r+0x1c>
 8006812:	682b      	ldr	r3, [r5, #0]
 8006814:	b103      	cbz	r3, 8006818 <_fstat_r+0x1c>
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	bd38      	pop	{r3, r4, r5, pc}
 800681a:	bf00      	nop
 800681c:	20000260 	.word	0x20000260

08006820 <_isatty_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d06      	ldr	r5, [pc, #24]	; (800683c <_isatty_r+0x1c>)
 8006824:	2300      	movs	r3, #0
 8006826:	4604      	mov	r4, r0
 8006828:	4608      	mov	r0, r1
 800682a:	602b      	str	r3, [r5, #0]
 800682c:	f7fb fa27 	bl	8001c7e <_isatty>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_isatty_r+0x1a>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_isatty_r+0x1a>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	20000260 	.word	0x20000260

08006840 <_init>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr

0800684c <_fini>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr
