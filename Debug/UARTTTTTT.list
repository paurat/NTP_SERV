
UARTTTTTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023914  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005780  08023ae8  08023ae8  00033ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029268  08029268  00040a50  2**0
                  CONTENTS
  4 .ARM          00000008  08029268  08029268  00039268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029270  08029270  00040a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08029270  08029270  00039270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029278  08029278  00039278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a50  20000000  0802927c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b3f4  20000a50  08029ccc  00040a50  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000be44  08029ccc  0004be44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a50  2**0
                  CONTENTS, READONLY
 12 .debug_info   00050563  00000000  00000000  00040a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009d02  00000000  00000000  00090fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025e8  00000000  00000000  0009ace8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002470  00000000  00000000  0009d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a74c  00000000  00000000  0009f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003d223  00000000  00000000  000d9e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001205f5  00000000  00000000  001170af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002376a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b820  00000000  00000000  002376f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a50 	.word	0x20000a50
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08023acc 	.word	0x08023acc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a54 	.word	0x20000a54
 800020c:	08023acc 	.word	0x08023acc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9b9 	b.w	8000f9c <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <vApplicationGetIdleTaskMemory+0x2c>)
 8000fb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <vApplicationGetIdleTaskMemory+0x30>)
 8000fb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000a6c 	.word	0x20000a6c
 8000fd0:	20000ac0 	.word	0x20000ac0

08000fd4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fdc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fe0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d013      	beq.n	8001014 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ff0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ff4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00b      	beq.n	8001014 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ffc:	e000      	b.n	8001000 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ffe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001000:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f9      	beq.n	8000ffe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800100a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001014:	687b      	ldr	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// это же дебаг
int _write(int file, char *ptr,int len){
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
	int i=0;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e009      	b.n	800104c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffc7 	bl	8000fd4 <ITM_SendChar>
	for(i=0;i<len;i++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf1      	blt.n	8001038 <_write+0x16>
	return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b0c0      	sub	sp, #256	; 0x100
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	memset(gps.day,0,sizeof(gps));
 8001066:	221b      	movs	r2, #27
 8001068:	2100      	movs	r1, #0
 800106a:	4894      	ldr	r0, [pc, #592]	; (80012bc <main+0x25c>)
 800106c:	f019 fc64 	bl	801a938 <memset>
	// ZDA-38;RMC-68



	 //включение ZDA
	 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 8001070:	4b93      	ldr	r3, [pc, #588]	; (80012c0 <main+0x260>)
 8001072:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8001076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001078:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 800107c:	4a91      	ldr	r2, [pc, #580]	; (80012c4 <main+0x264>)
 800107e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001082:	ca07      	ldmia	r2, {r0, r1, r2}
 8001084:	c303      	stmia	r3!, {r0, r1}
 8001086:	801a      	strh	r2, [r3, #0]
	 //отключение ZDA
	 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
	 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

	 //отключение остального
	 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8001088:	4b8f      	ldr	r3, [pc, #572]	; (80012c8 <main+0x268>)
 800108a:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 800108e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 8001094:	4a8d      	ldr	r2, [pc, #564]	; (80012cc <main+0x26c>)
 8001096:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800109a:	ca07      	ldmia	r2, {r0, r1, r2}
 800109c:	c303      	stmia	r3!, {r0, r1}
 800109e:	801a      	strh	r2, [r3, #0]

	 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 80010a0:	4b8b      	ldr	r3, [pc, #556]	; (80012d0 <main+0x270>)
 80010a2:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 80010a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 80010ac:	4a89      	ldr	r2, [pc, #548]	; (80012d4 <main+0x274>)
 80010ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b4:	c303      	stmia	r3!, {r0, r1}
 80010b6:	801a      	strh	r2, [r3, #0]

	 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 80010b8:	4b87      	ldr	r3, [pc, #540]	; (80012d8 <main+0x278>)
 80010ba:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 80010be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 80010c4:	4a85      	ldr	r2, [pc, #532]	; (80012dc <main+0x27c>)
 80010c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80010ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80010cc:	c303      	stmia	r3!, {r0, r1}
 80010ce:	801a      	strh	r2, [r3, #0]

	 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 80010d0:	4b83      	ldr	r3, [pc, #524]	; (80012e0 <main+0x280>)
 80010d2:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80010d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 80010dc:	4a81      	ldr	r2, [pc, #516]	; (80012e4 <main+0x284>)
 80010de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80010e4:	c303      	stmia	r3!, {r0, r1}
 80010e6:	801a      	strh	r2, [r3, #0]

	 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 80010e8:	4b7f      	ldr	r3, [pc, #508]	; (80012e8 <main+0x288>)
 80010ea:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80010ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 80010f4:	4a7d      	ldr	r2, [pc, #500]	; (80012ec <main+0x28c>)
 80010f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80010fc:	c303      	stmia	r3!, {r0, r1}
 80010fe:	801a      	strh	r2, [r3, #0]
	 //отключение RMC на всякий
	 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
	 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

	 //включение RMC
	 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 8001100:	4b7b      	ldr	r3, [pc, #492]	; (80012f0 <main+0x290>)
 8001102:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 800110c:	4a79      	ldr	r2, [pc, #484]	; (80012f4 <main+0x294>)
 800110e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001112:	ca07      	ldmia	r2, {r0, r1, r2}
 8001114:	c303      	stmia	r3!, {r0, r1}
 8001116:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f002 fe01 	bl	8003d1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111c:	f000 f8f6 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //MX_LWIP_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001120:	f000 fa5c 	bl	80015dc <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001124:	f000 fa18 	bl	8001558 <MX_USART6_UART_Init>
  MX_UART7_Init();
 8001128:	f000 f9e6 	bl	80014f8 <MX_UART7_Init>
  MX_RTC_Init();
 800112c:	f000 f988 	bl	8001440 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(5000);
 8001130:	f241 3088 	movw	r0, #5000	; 0x1388
 8001134:	f002 fe20 	bl	8003d78 <HAL_Delay>
  //ON ZDA
  HAL_UART_Transmit(&huart7,(uint8_t*) MESZDA, 16, 1000);
 8001138:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800113c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001140:	2210      	movs	r2, #16
 8001142:	486d      	ldr	r0, [pc, #436]	; (80012f8 <main+0x298>)
 8001144:	f006 f8e0 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001148:	2064      	movs	r0, #100	; 0x64
 800114a:	f002 fe15 	bl	8003d78 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONZDA, 10, 1000);
 800114e:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	220a      	movs	r2, #10
 8001158:	4867      	ldr	r0, [pc, #412]	; (80012f8 <main+0x298>)
 800115a:	f006 f8d5 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 800115e:	2064      	movs	r0, #100	; 0x64
 8001160:	f002 fe0a 	bl	8003d78 <HAL_Delay>

  // OFF protokol
  HAL_UART_Transmit(&huart7,(uint8_t*) MESGGA, 16, 1000);
 8001164:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	2210      	movs	r2, #16
 800116e:	4862      	ldr	r0, [pc, #392]	; (80012f8 <main+0x298>)
 8001170:	f006 f8ca 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001174:	2064      	movs	r0, #100	; 0x64
 8001176:	f002 fdff 	bl	8003d78 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGGA, 10, 1000);
 800117a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	220a      	movs	r2, #10
 8001184:	485c      	ldr	r0, [pc, #368]	; (80012f8 <main+0x298>)
 8001186:	f006 f8bf 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 800118a:	2064      	movs	r0, #100	; 0x64
 800118c:	f002 fdf4 	bl	8003d78 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGLL, 16, 1000);
 8001190:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	2210      	movs	r2, #16
 800119a:	4857      	ldr	r0, [pc, #348]	; (80012f8 <main+0x298>)
 800119c:	f006 f8b4 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 80011a0:	2064      	movs	r0, #100	; 0x64
 80011a2:	f002 fde9 	bl	8003d78 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGLL, 10, 1000);
 80011a6:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	220a      	movs	r2, #10
 80011b0:	4851      	ldr	r0, [pc, #324]	; (80012f8 <main+0x298>)
 80011b2:	f006 f8a9 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 80011b6:	2064      	movs	r0, #100	; 0x64
 80011b8:	f002 fdde 	bl	8003d78 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSA, 16, 1000);
 80011bc:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	2210      	movs	r2, #16
 80011c6:	484c      	ldr	r0, [pc, #304]	; (80012f8 <main+0x298>)
 80011c8:	f006 f89e 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 80011cc:	2064      	movs	r0, #100	; 0x64
 80011ce:	f002 fdd3 	bl	8003d78 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSA, 10, 1000);
 80011d2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	220a      	movs	r2, #10
 80011dc:	4846      	ldr	r0, [pc, #280]	; (80012f8 <main+0x298>)
 80011de:	f006 f893 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 80011e2:	2064      	movs	r0, #100	; 0x64
 80011e4:	f002 fdc8 	bl	8003d78 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSV, 16, 1000);
 80011e8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80011ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f0:	2210      	movs	r2, #16
 80011f2:	4841      	ldr	r0, [pc, #260]	; (80012f8 <main+0x298>)
 80011f4:	f006 f888 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 80011f8:	2064      	movs	r0, #100	; 0x64
 80011fa:	f002 fdbd 	bl	8003d78 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSV, 10, 1000);
 80011fe:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	220a      	movs	r2, #10
 8001208:	483b      	ldr	r0, [pc, #236]	; (80012f8 <main+0x298>)
 800120a:	f006 f87d 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 800120e:	2064      	movs	r0, #100	; 0x64
 8001210:	f002 fdb2 	bl	8003d78 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESVTG, 16, 1000);
 8001214:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121c:	2210      	movs	r2, #16
 800121e:	4836      	ldr	r0, [pc, #216]	; (80012f8 <main+0x298>)
 8001220:	f006 f872 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001224:	2064      	movs	r0, #100	; 0x64
 8001226:	f002 fda7 	bl	8003d78 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONVTG, 10, 1000);
 800122a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	220a      	movs	r2, #10
 8001234:	4830      	ldr	r0, [pc, #192]	; (80012f8 <main+0x298>)
 8001236:	f006 f867 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 800123a:	2064      	movs	r0, #100	; 0x64
 800123c:	f002 fd9c 	bl	8003d78 <HAL_Delay>

  //отключение и включение RMC на всякий
  HAL_UART_Transmit(&huart7,(uint8_t*) MESRMC, 16, 1000);
 8001240:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001248:	2210      	movs	r2, #16
 800124a:	482b      	ldr	r0, [pc, #172]	; (80012f8 <main+0x298>)
 800124c:	f006 f85c 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001250:	2064      	movs	r0, #100	; 0x64
 8001252:	f002 fd91 	bl	8003d78 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONRMC, 10, 1000);
 8001256:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	220a      	movs	r2, #10
 8001260:	4825      	ldr	r0, [pc, #148]	; (80012f8 <main+0x298>)
 8001262:	f006 f851 	bl	8007308 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001266:	2064      	movs	r0, #100	; 0x64
 8001268:	f002 fd86 	bl	8003d78 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <main+0x29c>)
 800126e:	f107 0420 	add.w	r4, r7, #32
 8001272:	461d      	mov	r5, r3
 8001274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800127c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f008 f89e 	bl	80093c8 <osThreadCreate>
 800128c:	4603      	mov	r3, r0
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <main+0x2a0>)
 8001290:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, tcpecho_thread, osPriorityIdle, 0, 128);
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <main+0x2a4>)
 8001294:	1d3c      	adds	r4, r7, #4
 8001296:	461d      	mov	r5, r3
 8001298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f008 f88d 	bl	80093c8 <osThreadCreate>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a15      	ldr	r2, [pc, #84]	; (8001308 <main+0x2a8>)
 80012b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012b4:	f008 f871 	bl	800939a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <main+0x258>
 80012ba:	bf00      	nop
 80012bc:	20005088 	.word	0x20005088
 80012c0:	08023b00 	.word	0x08023b00
 80012c4:	08023b10 	.word	0x08023b10
 80012c8:	08023b1c 	.word	0x08023b1c
 80012cc:	08023b2c 	.word	0x08023b2c
 80012d0:	08023b38 	.word	0x08023b38
 80012d4:	08023b48 	.word	0x08023b48
 80012d8:	08023b54 	.word	0x08023b54
 80012dc:	08023b64 	.word	0x08023b64
 80012e0:	08023b70 	.word	0x08023b70
 80012e4:	08023b80 	.word	0x08023b80
 80012e8:	08023b8c 	.word	0x08023b8c
 80012ec:	08023b9c 	.word	0x08023b9c
 80012f0:	08023ba8 	.word	0x08023ba8
 80012f4:	08023bb8 	.word	0x08023bb8
 80012f8:	200050cc 	.word	0x200050cc
 80012fc:	08023bc4 	.word	0x08023bc4
 8001300:	200050c8 	.word	0x200050c8
 8001304:	08023be0 	.word	0x08023be0
 8001308:	20005268 	.word	0x20005268

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0b4      	sub	sp, #208	; 0xd0
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001316:	2230      	movs	r2, #48	; 0x30
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f019 fb0c 	bl	801a938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	2284      	movs	r2, #132	; 0x84
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f019 fafd 	bl	801a938 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800133e:	f004 f883 	bl	8005448 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <SystemClock_Config+0x12c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a3c      	ldr	r2, [pc, #240]	; (8001438 <SystemClock_Config+0x12c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <SystemClock_Config+0x12c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <SystemClock_Config+0x130>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a37      	ldr	r2, [pc, #220]	; (800143c <SystemClock_Config+0x130>)
 8001360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b35      	ldr	r3, [pc, #212]	; (800143c <SystemClock_Config+0x130>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001372:	2309      	movs	r3, #9
 8001374:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001380:	2301      	movs	r3, #1
 8001382:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001394:	2319      	movs	r3, #25
 8001396:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800139a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800139e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80013a8:	2309      	movs	r3, #9
 80013aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 f8a8 	bl	8005508 <HAL_RCC_OscConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80013be:	f001 fa6d 	bl	800289c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013c2:	f004 f851 	bl	8005468 <HAL_PWREx_EnableOverDrive>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013cc:	f001 fa66 	bl	800289c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80013f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013f6:	2106      	movs	r1, #6
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 fb29 	bl	8005a50 <HAL_RCC_ClockConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001404:	f001 fa4a 	bl	800289c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 8001408:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800140c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800140e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001414:	2300      	movs	r3, #0
 8001416:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001418:	2300      	movs	r3, #0
 800141a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4618      	mov	r0, r3
 8001422:	f004 fd1d 	bl	8005e60 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x124>
  {
    Error_Handler();
 800142c:	f001 fa36 	bl	800289c <Error_Handler>
  }
}
 8001430:	bf00      	nop
 8001432:	37d0      	adds	r7, #208	; 0xd0
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40007000 	.word	0x40007000

08001440 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <MX_RTC_Init+0xb0>)
 800145e:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <MX_RTC_Init+0xb4>)
 8001460:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <MX_RTC_Init+0xb0>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <MX_RTC_Init+0xb0>)
 800146a:	227f      	movs	r2, #127	; 0x7f
 800146c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <MX_RTC_Init+0xb0>)
 8001470:	22ff      	movs	r2, #255	; 0xff
 8001472:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <MX_RTC_Init+0xb0>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MX_RTC_Init+0xb0>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MX_RTC_Init+0xb0>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001486:	481a      	ldr	r0, [pc, #104]	; (80014f0 <MX_RTC_Init+0xb0>)
 8001488:	f005 f8da 	bl	8006640 <HAL_RTC_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001492:	f001 fa03 	bl	800289c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 8001496:	2317      	movs	r3, #23
 8001498:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 59;
 800149a:	233b      	movs	r3, #59	; 0x3b
 800149c:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	2200      	movs	r2, #0
 80014b0:	4619      	mov	r1, r3
 80014b2:	480f      	ldr	r0, [pc, #60]	; (80014f0 <MX_RTC_Init+0xb0>)
 80014b4:	f005 f956 	bl	8006764 <HAL_RTC_SetTime>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80014be:	f001 f9ed 	bl	800289c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80014c2:	2307      	movs	r3, #7
 80014c4:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_DECEMBER;
 80014c6:	2312      	movs	r3, #18
 80014c8:	717b      	strb	r3, [r7, #5]
  sDate.Date = 31;
 80014ca:	231f      	movs	r3, #31
 80014cc:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_RTC_Init+0xb0>)
 80014da:	f005 fa5f 	bl	800699c <HAL_RTC_SetDate>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80014e4:	f001 f9da 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000526c 	.word	0x2000526c
 80014f4:	40002800 	.word	0x40002800

080014f8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_UART7_Init+0x58>)
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <MX_UART7_Init+0x5c>)
 8001500:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_UART7_Init+0x58>)
 8001504:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001508:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_UART7_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_UART7_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_UART7_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_UART7_Init+0x58>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <MX_UART7_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_UART7_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MX_UART7_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_UART7_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_UART7_Init+0x58>)
 800153c:	f005 fe96 	bl	800726c <HAL_UART_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001546:	f001 f9a9 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200050cc 	.word	0x200050cc
 8001554:	40007800 	.word	0x40007800

08001558 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_RXNE);
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_USART6_UART_Init+0x78>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_USART6_UART_Init+0x78>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0220 	orr.w	r2, r2, #32
 800156a:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_IDLE);
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_USART6_UART_Init+0x78>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_USART6_UART_Init+0x78>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0210 	orr.w	r2, r2, #16
 800157a:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_USART6_UART_Init+0x7c>)
 800157e:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <MX_USART6_UART_Init+0x80>)
 8001580:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_USART6_UART_Init+0x7c>)
 8001584:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001588:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_USART6_UART_Init+0x7c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_USART6_UART_Init+0x7c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_USART6_UART_Init+0x7c>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_USART6_UART_Init+0x7c>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART6_UART_Init+0x7c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_USART6_UART_Init+0x7c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART6_UART_Init+0x7c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_USART6_UART_Init+0x7c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_USART6_UART_Init+0x7c>)
 80015bc:	f005 fe56 	bl	800726c <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART6_UART_Init+0x72>
  {
    Error_Handler();
 80015c6:	f001 f969 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200050cc 	.word	0x200050cc
 80015d4:	20005290 	.word	0x20005290
 80015d8:	40011400 	.word	0x40011400

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b090      	sub	sp, #64	; 0x40
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f2:	4bae      	ldr	r3, [pc, #696]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4aad      	ldr	r2, [pc, #692]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80015f8:	f043 0310 	orr.w	r3, r3, #16
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4bab      	ldr	r3, [pc, #684]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800160a:	4ba8      	ldr	r3, [pc, #672]	; (80018ac <MX_GPIO_Init+0x2d0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4aa7      	ldr	r2, [pc, #668]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4ba5      	ldr	r3, [pc, #660]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	4ba2      	ldr	r3, [pc, #648]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4aa1      	ldr	r2, [pc, #644]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b9f      	ldr	r3, [pc, #636]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800163a:	4b9c      	ldr	r3, [pc, #624]	; (80018ac <MX_GPIO_Init+0x2d0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a9b      	ldr	r2, [pc, #620]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b99      	ldr	r3, [pc, #612]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	4b96      	ldr	r3, [pc, #600]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a95      	ldr	r2, [pc, #596]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b93      	ldr	r3, [pc, #588]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b90      	ldr	r3, [pc, #576]	; (80018ac <MX_GPIO_Init+0x2d0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a8f      	ldr	r2, [pc, #572]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b8d      	ldr	r3, [pc, #564]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001682:	4b8a      	ldr	r3, [pc, #552]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a89      	ldr	r2, [pc, #548]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001688:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b87      	ldr	r3, [pc, #540]	; (80018ac <MX_GPIO_Init+0x2d0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800169a:	4b84      	ldr	r3, [pc, #528]	; (80018ac <MX_GPIO_Init+0x2d0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a83      	ldr	r2, [pc, #524]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b81      	ldr	r3, [pc, #516]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016b2:	4b7e      	ldr	r3, [pc, #504]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a7d      	ldr	r2, [pc, #500]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80016b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b7b      	ldr	r3, [pc, #492]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ca:	4b78      	ldr	r3, [pc, #480]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a77      	ldr	r2, [pc, #476]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b75      	ldr	r3, [pc, #468]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	4b72      	ldr	r3, [pc, #456]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a71      	ldr	r2, [pc, #452]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80016e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <MX_GPIO_Init+0x2d0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	2120      	movs	r1, #32
 80016fe:	486c      	ldr	r0, [pc, #432]	; (80018b0 <MX_GPIO_Init+0x2d4>)
 8001700:	f003 fe6e 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|Led_Pin|Led1_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	210f      	movs	r1, #15
 8001708:	486a      	ldr	r0, [pc, #424]	; (80018b4 <MX_GPIO_Init+0x2d8>)
 800170a:	f003 fe69 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2108      	movs	r1, #8
 8001712:	4869      	ldr	r0, [pc, #420]	; (80018b8 <MX_GPIO_Init+0x2dc>)
 8001714:	f003 fe64 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171e:	4865      	ldr	r0, [pc, #404]	; (80018b4 <MX_GPIO_Init+0x2d8>)
 8001720:	f003 fe5e 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172a:	4864      	ldr	r0, [pc, #400]	; (80018bc <MX_GPIO_Init+0x2e0>)
 800172c:	f003 fe58 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	21c8      	movs	r1, #200	; 0xc8
 8001734:	4862      	ldr	r0, [pc, #392]	; (80018c0 <MX_GPIO_Init+0x2e4>)
 8001736:	f003 fe53 	bl	80053e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800173a:	2310      	movs	r3, #16
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800174a:	230e      	movs	r3, #14
 800174c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001752:	4619      	mov	r1, r3
 8001754:	485b      	ldr	r0, [pc, #364]	; (80018c4 <MX_GPIO_Init+0x2e8>)
 8001756:	f003 fc97 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800175a:	2308      	movs	r3, #8
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175e:	2300      	movs	r3, #0
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176a:	4619      	mov	r1, r3
 800176c:	4855      	ldr	r0, [pc, #340]	; (80018c4 <MX_GPIO_Init+0x2e8>)
 800176e:	f003 fc8b 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001772:	2304      	movs	r3, #4
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001782:	2309      	movs	r3, #9
 8001784:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178a:	4619      	mov	r1, r3
 800178c:	484d      	ldr	r0, [pc, #308]	; (80018c4 <MX_GPIO_Init+0x2e8>)
 800178e:	f003 fc7b 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001792:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017a4:	230c      	movs	r3, #12
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ac:	4619      	mov	r1, r3
 80017ae:	4845      	ldr	r0, [pc, #276]	; (80018c4 <MX_GPIO_Init+0x2e8>)
 80017b0:	f003 fc6a 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80017b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ba:	2312      	movs	r3, #18
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017be:	2301      	movs	r3, #1
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017c6:	2304      	movs	r3, #4
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	4619      	mov	r1, r3
 80017d0:	483d      	ldr	r0, [pc, #244]	; (80018c8 <MX_GPIO_Init+0x2ec>)
 80017d2:	f003 fc59 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80017d6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017e8:	230a      	movs	r3, #10
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f0:	4619      	mov	r1, r3
 80017f2:	4835      	ldr	r0, [pc, #212]	; (80018c8 <MX_GPIO_Init+0x2ec>)
 80017f4:	f003 fc48 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80017f8:	2310      	movs	r3, #16
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001808:	2302      	movs	r3, #2
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001810:	4619      	mov	r1, r3
 8001812:	482d      	ldr	r0, [pc, #180]	; (80018c8 <MX_GPIO_Init+0x2ec>)
 8001814:	f003 fc38 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001828:	2308      	movs	r3, #8
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001830:	4619      	mov	r1, r3
 8001832:	481f      	ldr	r0, [pc, #124]	; (80018b0 <MX_GPIO_Init+0x2d4>)
 8001834:	f003 fc28 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001838:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800184a:	230c      	movs	r3, #12
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001852:	4619      	mov	r1, r3
 8001854:	481d      	ldr	r0, [pc, #116]	; (80018cc <MX_GPIO_Init+0x2f0>)
 8001856:	f003 fc17 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800185a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186c:	2301      	movs	r3, #1
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	4816      	ldr	r0, [pc, #88]	; (80018d0 <MX_GPIO_Init+0x2f4>)
 8001878:	f003 fc06 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800187c:	2360      	movs	r3, #96	; 0x60
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800188c:	230d      	movs	r3, #13
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001894:	4619      	mov	r1, r3
 8001896:	480b      	ldr	r0, [pc, #44]	; (80018c4 <MX_GPIO_Init+0x2e8>)
 8001898:	f003 fbf6 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
 80018a8:	e014      	b.n	80018d4 <MX_GPIO_Init+0x2f8>
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40022000 	.word	0x40022000
 80018b8:	40022800 	.word	0x40022800
 80018bc:	40021c00 	.word	0x40021c00
 80018c0:	40021800 	.word	0x40021800
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018d8:	2307      	movs	r3, #7
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e0:	4619      	mov	r1, r3
 80018e2:	48bd      	ldr	r0, [pc, #756]	; (8001bd8 <MX_GPIO_Init+0x5fc>)
 80018e4:	f003 fbd0 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80018e8:	2340      	movs	r3, #64	; 0x40
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018f8:	230a      	movs	r3, #10
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001900:	4619      	mov	r1, r3
 8001902:	48b5      	ldr	r0, [pc, #724]	; (8001bd8 <MX_GPIO_Init+0x5fc>)
 8001904:	f003 fbc0 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001908:	f248 1333 	movw	r3, #33075	; 0x8133
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800191a:	230c      	movs	r3, #12
 800191c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800191e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001922:	4619      	mov	r1, r3
 8001924:	48ad      	ldr	r0, [pc, #692]	; (8001bdc <MX_GPIO_Init+0x600>)
 8001926:	f003 fbaf 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800192a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800193c:	230e      	movs	r3, #14
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	48a6      	ldr	r0, [pc, #664]	; (8001be0 <MX_GPIO_Init+0x604>)
 8001948:	f003 fb9e 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800194c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	4619      	mov	r1, r3
 8001960:	489f      	ldr	r0, [pc, #636]	; (8001be0 <MX_GPIO_Init+0x604>)
 8001962:	f003 fb91 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001966:	2340      	movs	r3, #64	; 0x40
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800196a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001978:	4619      	mov	r1, r3
 800197a:	489a      	ldr	r0, [pc, #616]	; (8001be4 <MX_GPIO_Init+0x608>)
 800197c:	f003 fb84 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001980:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001992:	230c      	movs	r3, #12
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199a:	4619      	mov	r1, r3
 800199c:	4891      	ldr	r0, [pc, #580]	; (8001be4 <MX_GPIO_Init+0x608>)
 800199e:	f003 fb73 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80019a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019b4:	230a      	movs	r3, #10
 80019b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019bc:	4619      	mov	r1, r3
 80019be:	488a      	ldr	r0, [pc, #552]	; (8001be8 <MX_GPIO_Init+0x60c>)
 80019c0:	f003 fb62 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80019c4:	23f0      	movs	r3, #240	; 0xf0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80019d4:	230a      	movs	r3, #10
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019dc:	4619      	mov	r1, r3
 80019de:	4883      	ldr	r0, [pc, #524]	; (8001bec <MX_GPIO_Init+0x610>)
 80019e0:	f003 fb52 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80019e4:	23f7      	movs	r3, #247	; 0xf7
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019f4:	230e      	movs	r3, #14
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	487c      	ldr	r0, [pc, #496]	; (8001bf0 <MX_GPIO_Init+0x614>)
 8001a00:	f003 fb42 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a16:	2309      	movs	r3, #9
 8001a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	486e      	ldr	r0, [pc, #440]	; (8001bdc <MX_GPIO_Init+0x600>)
 8001a22:	f003 fb31 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001a38:	230a      	movs	r3, #10
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a40:	4619      	mov	r1, r3
 8001a42:	4866      	ldr	r0, [pc, #408]	; (8001bdc <MX_GPIO_Init+0x600>)
 8001a44:	f003 fb20 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a48:	2320      	movs	r3, #32
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4861      	ldr	r0, [pc, #388]	; (8001be4 <MX_GPIO_Init+0x608>)
 8001a60:	f003 fb12 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001a64:	2308      	movs	r3, #8
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a74:	230d      	movs	r3, #13
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4859      	ldr	r0, [pc, #356]	; (8001be4 <MX_GPIO_Init+0x608>)
 8001a80:	f003 fb02 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin Led_Pin LCD_DISP_Pin
                           Led1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|Led_Pin|LCD_DISP_Pin
 8001a84:	f241 030f 	movw	r3, #4111	; 0x100f
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |Led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4853      	ldr	r0, [pc, #332]	; (8001bec <MX_GPIO_Init+0x610>)
 8001a9e:	f003 faf3 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	484f      	ldr	r0, [pc, #316]	; (8001bf4 <MX_GPIO_Init+0x618>)
 8001ab8:	f003 fae6 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001abc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ace:	230c      	movs	r3, #12
 8001ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4847      	ldr	r0, [pc, #284]	; (8001bf8 <MX_GPIO_Init+0x61c>)
 8001ada:	f003 fad5 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001ade:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001af0:	230e      	movs	r3, #14
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af8:	4619      	mov	r1, r3
 8001afa:	483c      	ldr	r0, [pc, #240]	; (8001bec <MX_GPIO_Init+0x610>)
 8001afc:	f003 fac4 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b00:	2308      	movs	r3, #8
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b14:	4619      	mov	r1, r3
 8001b16:	4836      	ldr	r0, [pc, #216]	; (8001bf0 <MX_GPIO_Init+0x614>)
 8001b18:	f003 fab6 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b2e:	230d      	movs	r3, #13
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b36:	4619      	mov	r1, r3
 8001b38:	4828      	ldr	r0, [pc, #160]	; (8001bdc <MX_GPIO_Init+0x600>)
 8001b3a:	f003 faa5 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b3e:	2310      	movs	r3, #16
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b42:	2300      	movs	r3, #0
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4824      	ldr	r0, [pc, #144]	; (8001be4 <MX_GPIO_Init+0x608>)
 8001b52:	f003 fa99 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001b56:	2304      	movs	r3, #4
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b66:	230c      	movs	r3, #12
 8001b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	481c      	ldr	r0, [pc, #112]	; (8001be4 <MX_GPIO_Init+0x608>)
 8001b72:	f003 fa89 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001b76:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481c      	ldr	r0, [pc, #112]	; (8001bfc <MX_GPIO_Init+0x620>)
 8001b8c:	f003 fa7c 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4814      	ldr	r0, [pc, #80]	; (8001bfc <MX_GPIO_Init+0x620>)
 8001baa:	f003 fa6d 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001bae:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bc0:	230d      	movs	r3, #13
 8001bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480c      	ldr	r0, [pc, #48]	; (8001bfc <MX_GPIO_Init+0x620>)
 8001bcc:	f003 fa5c 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	e014      	b.n	8001c00 <MX_GPIO_Init+0x624>
 8001bd6:	bf00      	nop
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40022400 	.word	0x40022400
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40022800 	.word	0x40022800
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40021400 	.word	0x40021400
 8001bfc:	40021c00 	.word	0x40021c00
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c0e:	2307      	movs	r3, #7
 8001c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c16:	4619      	mov	r1, r3
 8001c18:	4885      	ldr	r0, [pc, #532]	; (8001e30 <MX_GPIO_Init+0x854>)
 8001c1a:	f003 fa35 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c30:	2301      	movs	r3, #1
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c38:	4619      	mov	r1, r3
 8001c3a:	487d      	ldr	r0, [pc, #500]	; (8001e30 <MX_GPIO_Init+0x854>)
 8001c3c:	f003 fa24 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c46:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c54:	4619      	mov	r1, r3
 8001c56:	4877      	ldr	r0, [pc, #476]	; (8001e34 <MX_GPIO_Init+0x858>)
 8001c58:	f003 fa16 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c74:	4619      	mov	r1, r3
 8001c76:	4870      	ldr	r0, [pc, #448]	; (8001e38 <MX_GPIO_Init+0x85c>)
 8001c78:	f003 fa06 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001c7c:	2328      	movs	r3, #40	; 0x28
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c8c:	230c      	movs	r3, #12
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c94:	4619      	mov	r1, r3
 8001c96:	4868      	ldr	r0, [pc, #416]	; (8001e38 <MX_GPIO_Init+0x85c>)
 8001c98:	f003 f9f6 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001c9c:	23c8      	movs	r3, #200	; 0xc8
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4862      	ldr	r0, [pc, #392]	; (8001e3c <MX_GPIO_Init+0x860>)
 8001cb4:	f003 f9e8 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001cb8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cca:	4619      	mov	r1, r3
 8001ccc:	485c      	ldr	r0, [pc, #368]	; (8001e40 <MX_GPIO_Init+0x864>)
 8001cce:	f003 f9db 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cea:	4619      	mov	r1, r3
 8001cec:	4855      	ldr	r0, [pc, #340]	; (8001e44 <MX_GPIO_Init+0x868>)
 8001cee:	f003 f9cb 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d02:	230a      	movs	r3, #10
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	484d      	ldr	r0, [pc, #308]	; (8001e44 <MX_GPIO_Init+0x868>)
 8001d0e:	f003 f9bb 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d12:	2304      	movs	r3, #4
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d22:	2309      	movs	r3, #9
 8001d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4846      	ldr	r0, [pc, #280]	; (8001e48 <MX_GPIO_Init+0x86c>)
 8001d2e:	f003 f9ab 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001d32:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d44:	2309      	movs	r3, #9
 8001d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	483f      	ldr	r0, [pc, #252]	; (8001e4c <MX_GPIO_Init+0x870>)
 8001d50:	f003 f99a 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001d54:	2304      	movs	r3, #4
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d64:	4619      	mov	r1, r3
 8001d66:	4835      	ldr	r0, [pc, #212]	; (8001e3c <MX_GPIO_Init+0x860>)
 8001d68:	f003 f98e 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d70:	2303      	movs	r3, #3
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	482c      	ldr	r0, [pc, #176]	; (8001e30 <MX_GPIO_Init+0x854>)
 8001d80:	f003 f982 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001d84:	2350      	movs	r3, #80	; 0x50
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d94:	230d      	movs	r3, #13
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4824      	ldr	r0, [pc, #144]	; (8001e30 <MX_GPIO_Init+0x854>)
 8001da0:	f003 f972 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001da4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001daa:	2312      	movs	r3, #18
 8001dac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001db6:	2304      	movs	r3, #4
 8001db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	481d      	ldr	r0, [pc, #116]	; (8001e38 <MX_GPIO_Init+0x85c>)
 8001dc2:	f003 f961 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001dc6:	2328      	movs	r3, #40	; 0x28
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dd6:	230a      	movs	r3, #10
 8001dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dde:	4619      	mov	r1, r3
 8001de0:	4813      	ldr	r0, [pc, #76]	; (8001e30 <MX_GPIO_Init+0x854>)
 8001de2:	f003 f951 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001de6:	2340      	movs	r3, #64	; 0x40
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001df6:	2309      	movs	r3, #9
 8001df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <MX_GPIO_Init+0x85c>)
 8001e02:	f003 f941 	bl	8005088 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001e06:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e18:	2305      	movs	r3, #5
 8001e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e20:	4619      	mov	r1, r3
 8001e22:	4809      	ldr	r0, [pc, #36]	; (8001e48 <MX_GPIO_Init+0x86c>)
 8001e24:	f003 f930 	bl	8005088 <HAL_GPIO_Init>

}
 8001e28:	bf00      	nop
 8001e2a:	3740      	adds	r7, #64	; 0x40
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40020000 	.word	0x40020000
 8001e34:	40022000 	.word	0x40022000
 8001e38:	40021c00 	.word	0x40021c00
 8001e3c:	40021800 	.word	0x40021800
 8001e40:	40021400 	.word	0x40021400
 8001e44:	40020800 	.word	0x40020800
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020c00 	.word	0x40020c00

08001e50 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
 8001e68:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
	if(huart == &huart7) {
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a62      	ldr	r2, [pc, #392]	; (8001ffc <HAL_UART_RxCpltCallback+0x1ac>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	f040 82b9 	bne.w	80023ea <HAL_UART_RxCpltCallback+0x59a>
		//$ message start
		if(buff[0]=='$'){
 8001e78:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_UART_RxCpltCallback+0x1b0>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b24      	cmp	r3, #36	; 0x24
 8001e7e:	d106      	bne.n	8001e8e <HAL_UART_RxCpltCallback+0x3e>
			count=0;
 8001e80:	4b60      	ldr	r3, [pc, #384]	; (8002004 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
			zpt=0;
 8001e86:	4b60      	ldr	r3, [pc, #384]	; (8002008 <HAL_UART_RxCpltCallback+0x1b8>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e00f      	b.n	8001eae <HAL_UART_RxCpltCallback+0x5e>
		}
		//Message error
		else if (count==1&&buff[0]!='G'){
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_UART_RxCpltCallback+0x1b4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10b      	bne.n	8001eae <HAL_UART_RxCpltCallback+0x5e>
 8001e96:	4b5a      	ldr	r3, [pc, #360]	; (8002000 <HAL_UART_RxCpltCallback+0x1b0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b47      	cmp	r3, #71	; 0x47
 8001e9c:	d007      	beq.n	8001eae <HAL_UART_RxCpltCallback+0x5e>
			count=0;
 8001e9e:	4b59      	ldr	r3, [pc, #356]	; (8002004 <HAL_UART_RxCpltCallback+0x1b4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
			ERRORS++;
 8001ea4:	4b59      	ldr	r3, [pc, #356]	; (800200c <HAL_UART_RxCpltCallback+0x1bc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4a58      	ldr	r2, [pc, #352]	; (800200c <HAL_UART_RxCpltCallback+0x1bc>)
 8001eac:	6013      	str	r3, [r2, #0]
		}


		//CRC calculation
		int res = calc_crc(buff[0],count);
 8001eae:	4b54      	ldr	r3, [pc, #336]	; (8002000 <HAL_UART_RxCpltCallback+0x1b0>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	4a54      	ldr	r2, [pc, #336]	; (8002004 <HAL_UART_RxCpltCallback+0x1b4>)
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fb5f 	bl	800257c <calc_crc>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
		if(res==1){
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d13e      	bne.n	8001f46 <HAL_UART_RxCpltCallback+0xf6>
			//printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
			//RTC READ
			rtc_read();
 8001ec8:	f000 fbb4 	bl	8002634 <rtc_read>
			//printf("rtc_read=%llu\t",rtc_read());
			//comparison RTC&CRC
			//Time_calc.tm_wday = 1;//atoi(gps.);
			Time_calc.tm_mon = atoi(gps.month)-1;//-1 do January==0 month
 8001ecc:	4850      	ldr	r0, [pc, #320]	; (8002010 <HAL_UART_RxCpltCallback+0x1c0>)
 8001ece:	f018 fbdf 	bl	801a690 <atoi>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	4a4f      	ldr	r2, [pc, #316]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001ed8:	6113      	str	r3, [r2, #16]
			Time_calc.tm_mday = atoi(gps.day);
 8001eda:	484f      	ldr	r0, [pc, #316]	; (8002018 <HAL_UART_RxCpltCallback+0x1c8>)
 8001edc:	f018 fbd8 	bl	801a690 <atoi>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4a4c      	ldr	r2, [pc, #304]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001ee4:	60d3      	str	r3, [r2, #12]
			if(year_str[0]=='0'&&year_str[1]=='0'){
 8001ee6:	4b4d      	ldr	r3, [pc, #308]	; (800201c <HAL_UART_RxCpltCallback+0x1cc>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b30      	cmp	r3, #48	; 0x30
 8001eec:	d108      	bne.n	8001f00 <HAL_UART_RxCpltCallback+0xb0>
 8001eee:	4b4b      	ldr	r3, [pc, #300]	; (800201c <HAL_UART_RxCpltCallback+0x1cc>)
 8001ef0:	785b      	ldrb	r3, [r3, #1]
 8001ef2:	2b30      	cmp	r3, #48	; 0x30
 8001ef4:	d104      	bne.n	8001f00 <HAL_UART_RxCpltCallback+0xb0>
				century=century+100;//atoi(gps.year)
 8001ef6:	4b4a      	ldr	r3, [pc, #296]	; (8002020 <HAL_UART_RxCpltCallback+0x1d0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3364      	adds	r3, #100	; 0x64
 8001efc:	4a48      	ldr	r2, [pc, #288]	; (8002020 <HAL_UART_RxCpltCallback+0x1d0>)
 8001efe:	6013      	str	r3, [r2, #0]
			}
			Time_calc.tm_year = atoi(year_str) + century;
 8001f00:	4846      	ldr	r0, [pc, #280]	; (800201c <HAL_UART_RxCpltCallback+0x1cc>)
 8001f02:	f018 fbc5 	bl	801a690 <atoi>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b45      	ldr	r3, [pc, #276]	; (8002020 <HAL_UART_RxCpltCallback+0x1d0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a41      	ldr	r2, [pc, #260]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f10:	6153      	str	r3, [r2, #20]
			Time_calc.tm_hour = atoi(gps.hours);
 8001f12:	4844      	ldr	r0, [pc, #272]	; (8002024 <HAL_UART_RxCpltCallback+0x1d4>)
 8001f14:	f018 fbbc 	bl	801a690 <atoi>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a3e      	ldr	r2, [pc, #248]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f1c:	6093      	str	r3, [r2, #8]
			Time_calc.tm_min = atoi(gps.minuttes);
 8001f1e:	4842      	ldr	r0, [pc, #264]	; (8002028 <HAL_UART_RxCpltCallback+0x1d8>)
 8001f20:	f018 fbb6 	bl	801a690 <atoi>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f28:	6053      	str	r3, [r2, #4]
			Time_calc.tm_sec = atoi(gps.seconds);
 8001f2a:	4840      	ldr	r0, [pc, #256]	; (800202c <HAL_UART_RxCpltCallback+0x1dc>)
 8001f2c:	f018 fbb0 	bl	801a690 <atoi>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4a38      	ldr	r2, [pc, #224]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f34:	6013      	str	r3, [r2, #0]
			gps_unix = mktime(&Time_calc);
 8001f36:	4837      	ldr	r0, [pc, #220]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f38:	f018 fdde 	bl	801aaf8 <mktime>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	493b      	ldr	r1, [pc, #236]	; (8002030 <HAL_UART_RxCpltCallback+0x1e0>)
 8001f42:	e9c1 2300 	strd	r2, r3, [r1]
			//printf("tm_year=%d\t tm_mon=%d\t tm_mday=%d\t tm_hour=%d\t tm_min=%d\t tm_sec=%d\n",Time_calc.tm_year,Time_calc.tm_mon,Time_calc.tm_mday,Time_calc.tm_hour,Time_calc.tm_min,Time_calc.tm_sec);
			//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		}
		if(res==1&&gps_unix!=rtc_read()){
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d14a      	bne.n	8001fe2 <HAL_UART_RxCpltCallback+0x192>
 8001f4c:	f000 fb72 	bl	8002634 <rtc_read>
 8001f50:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_UART_RxCpltCallback+0x1e0>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	4299      	cmp	r1, r3
 8001f58:	bf08      	it	eq
 8001f5a:	4290      	cmpeq	r0, r2
 8001f5c:	d041      	beq.n	8001fe2 <HAL_UART_RxCpltCallback+0x192>

			time_ref_s=htonl(gps_unix- DIFF_SEC_1970_2036);
 8001f5e:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_UART_RxCpltCallback+0x1e0>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	4b33      	ldr	r3, [pc, #204]	; (8002034 <HAL_UART_RxCpltCallback+0x1e4>)
 8001f66:	4413      	add	r3, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00d f9da 	bl	800f322 <lwip_htonl>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a31      	ldr	r2, [pc, #196]	; (8002038 <HAL_UART_RxCpltCallback+0x1e8>)
 8001f72:	6013      	str	r3, [r2, #0]
			sTime.Hours = Time_calc.tm_hour;
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	733b      	strb	r3, [r7, #12]
			sTime.Minutes = Time_calc.tm_min;
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	737b      	strb	r3, [r7, #13]
			sTime.Seconds = Time_calc.tm_sec;
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	73bb      	strb	r3, [r7, #14]
			sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]




			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	2200      	movs	r2, #0
 8001f96:	4619      	mov	r1, r3
 8001f98:	4828      	ldr	r0, [pc, #160]	; (800203c <HAL_UART_RxCpltCallback+0x1ec>)
 8001f9a:	f004 fbe3 	bl	8006764 <HAL_RTC_SetTime>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_UART_RxCpltCallback+0x158>
			{
				Error_Handler();
 8001fa4:	f000 fc7a 	bl	800289c <Error_Handler>
			}
			sDate.Month = Time_calc.tm_mon;
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	727b      	strb	r3, [r7, #9]
			sDate.Date = Time_calc.tm_mday;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	72bb      	strb	r3, [r7, #10]
			sDate.Year = Time_calc.tm_year-century;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_UART_RxCpltCallback+0x1c4>)
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_UART_RxCpltCallback+0x1d0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	72fb      	strb	r3, [r7, #11]
			if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	481a      	ldr	r0, [pc, #104]	; (800203c <HAL_UART_RxCpltCallback+0x1ec>)
 8001fd4:	f004 fce2 	bl	800699c <HAL_RTC_SetDate>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_UART_RxCpltCallback+0x192>
			{
				Error_Handler();
 8001fde:	f000 fc5d 	bl	800289c <Error_Handler>

		}
		//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		//ZDA OR RMC
		if (count==3&&buff[0]=='Z'){
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_UART_RxCpltCallback+0x1b4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d12c      	bne.n	8002044 <HAL_UART_RxCpltCallback+0x1f4>
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_UART_RxCpltCallback+0x1b0>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b5a      	cmp	r3, #90	; 0x5a
 8001ff0:	d128      	bne.n	8002044 <HAL_UART_RxCpltCallback+0x1f4>
			Tipe_Mes=1;
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_UART_RxCpltCallback+0x1f0>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e02f      	b.n	800205a <HAL_UART_RxCpltCallback+0x20a>
 8001ffa:	bf00      	nop
 8001ffc:	200050cc 	.word	0x200050cc
 8002000:	20000cfc 	.word	0x20000cfc
 8002004:	20000ce4 	.word	0x20000ce4
 8002008:	20000cd0 	.word	0x20000cd0
 800200c:	20000cc0 	.word	0x20000cc0
 8002010:	2000508b 	.word	0x2000508b
 8002014:	20005318 	.word	0x20005318
 8002018:	20005088 	.word	0x20005088
 800201c:	20000d00 	.word	0x20000d00
 8002020:	20000008 	.word	0x20000008
 8002024:	20005093 	.word	0x20005093
 8002028:	20005096 	.word	0x20005096
 800202c:	20005099 	.word	0x20005099
 8002030:	20000cc8 	.word	0x20000cc8
 8002034:	83aa7e80 	.word	0x83aa7e80
 8002038:	20005314 	.word	0x20005314
 800203c:	2000526c 	.word	0x2000526c
 8002040:	20000cc4 	.word	0x20000cc4
		}
		else if(count==3&&buff[0]=='R'){
 8002044:	4b91      	ldr	r3, [pc, #580]	; (800228c <HAL_UART_RxCpltCallback+0x43c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d106      	bne.n	800205a <HAL_UART_RxCpltCallback+0x20a>
 800204c:	4b90      	ldr	r3, [pc, #576]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b52      	cmp	r3, #82	; 0x52
 8002052:	d102      	bne.n	800205a <HAL_UART_RxCpltCallback+0x20a>
			Tipe_Mes=2;
 8002054:	4b8f      	ldr	r3, [pc, #572]	; (8002294 <HAL_UART_RxCpltCallback+0x444>)
 8002056:	2202      	movs	r2, #2
 8002058:	601a      	str	r2, [r3, #0]
		}
		//If ZDA
		if(Tipe_Mes==1){
 800205a:	4b8e      	ldr	r3, [pc, #568]	; (8002294 <HAL_UART_RxCpltCallback+0x444>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	f040 80d4 	bne.w	800220c <HAL_UART_RxCpltCallback+0x3bc>

			if(count==6&&buff[0]!=','){
 8002064:	4b89      	ldr	r3, [pc, #548]	; (800228c <HAL_UART_RxCpltCallback+0x43c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b06      	cmp	r3, #6
 800206a:	d10b      	bne.n	8002084 <HAL_UART_RxCpltCallback+0x234>
 800206c:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b2c      	cmp	r3, #44	; 0x2c
 8002072:	d007      	beq.n	8002084 <HAL_UART_RxCpltCallback+0x234>
				count=0;
 8002074:	4b85      	ldr	r3, [pc, #532]	; (800228c <HAL_UART_RxCpltCallback+0x43c>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
				ERRORS++;
 800207a:	4b87      	ldr	r3, [pc, #540]	; (8002298 <HAL_UART_RxCpltCallback+0x448>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a85      	ldr	r2, [pc, #532]	; (8002298 <HAL_UART_RxCpltCallback+0x448>)
 8002082:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 8002084:	4b82      	ldr	r3, [pc, #520]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b2c      	cmp	r3, #44	; 0x2c
 800208a:	d107      	bne.n	800209c <HAL_UART_RxCpltCallback+0x24c>
				zpt++;
 800208c:	4b83      	ldr	r3, [pc, #524]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3301      	adds	r3, #1
 8002092:	4a82      	ldr	r2, [pc, #520]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 8002094:	6013      	str	r3, [r2, #0]
				ind=0;
 8002096:	4b82      	ldr	r3, [pc, #520]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 800209c:	4b7f      	ldr	r3, [pc, #508]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d10e      	bne.n	80020c2 <HAL_UART_RxCpltCallback+0x272>
 80020a4:	4b7a      	ldr	r3, [pc, #488]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b2c      	cmp	r3, #44	; 0x2c
 80020aa:	d00a      	beq.n	80020c2 <HAL_UART_RxCpltCallback+0x272>
				time_buff[ind]=buff[0];
 80020ac:	4b7c      	ldr	r3, [pc, #496]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a77      	ldr	r2, [pc, #476]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 80020b2:	7811      	ldrb	r1, [r2, #0]
 80020b4:	4a7b      	ldr	r2, [pc, #492]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80020b6:	54d1      	strb	r1, [r2, r3]
				ind++;
 80020b8:	4b79      	ldr	r3, [pc, #484]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	4a78      	ldr	r2, [pc, #480]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 80020c0:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 80020c2:	4b76      	ldr	r3, [pc, #472]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d127      	bne.n	800211a <HAL_UART_RxCpltCallback+0x2ca>
 80020ca:	4b71      	ldr	r3, [pc, #452]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b2c      	cmp	r3, #44	; 0x2c
 80020d0:	d123      	bne.n	800211a <HAL_UART_RxCpltCallback+0x2ca>
				gps.hours[0]=time_buff[0];
 80020d2:	4b74      	ldr	r3, [pc, #464]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	4b74      	ldr	r3, [pc, #464]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 80020d8:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 80020da:	4b72      	ldr	r3, [pc, #456]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80020dc:	785a      	ldrb	r2, [r3, #1]
 80020de:	4b72      	ldr	r3, [pc, #456]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 80020e0:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 80020e2:	4b70      	ldr	r3, [pc, #448]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80020e4:	789a      	ldrb	r2, [r3, #2]
 80020e6:	4b70      	ldr	r3, [pc, #448]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 80020e8:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 80020ea:	4b6e      	ldr	r3, [pc, #440]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80020ec:	78da      	ldrb	r2, [r3, #3]
 80020ee:	4b6e      	ldr	r3, [pc, #440]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 80020f0:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 80020f2:	4b6c      	ldr	r3, [pc, #432]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80020f4:	791a      	ldrb	r2, [r3, #4]
 80020f6:	4b6c      	ldr	r3, [pc, #432]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 80020f8:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 80020fa:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80020fc:	795a      	ldrb	r2, [r3, #5]
 80020fe:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 8002100:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 8002102:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 8002104:	799a      	ldrb	r2, [r3, #6]
 8002106:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 8002108:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 800210a:	4b66      	ldr	r3, [pc, #408]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 800210c:	79da      	ldrb	r2, [r3, #7]
 800210e:	4b66      	ldr	r3, [pc, #408]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 8002110:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 8002112:	4b64      	ldr	r3, [pc, #400]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 8002114:	7a1a      	ldrb	r2, [r3, #8]
 8002116:	4b64      	ldr	r3, [pc, #400]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 8002118:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 800211a:	4b60      	ldr	r3, [pc, #384]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d10e      	bne.n	8002140 <HAL_UART_RxCpltCallback+0x2f0>
 8002122:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b2c      	cmp	r3, #44	; 0x2c
 8002128:	d00a      	beq.n	8002140 <HAL_UART_RxCpltCallback+0x2f0>

				time_buff[ind]=buff[0];
 800212a:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a58      	ldr	r2, [pc, #352]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 8002130:	7811      	ldrb	r1, [r2, #0]
 8002132:	4a5c      	ldr	r2, [pc, #368]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 8002134:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002136:	4b5a      	ldr	r3, [pc, #360]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 800213e:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 8002140:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d10b      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x310>
 8002148:	4b51      	ldr	r3, [pc, #324]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b2c      	cmp	r3, #44	; 0x2c
 800214e:	d107      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x310>
				gps.day[0]=time_buff[0];
 8002150:	4b54      	ldr	r3, [pc, #336]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 8002156:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 8002158:	4b52      	ldr	r3, [pc, #328]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 800215a:	785a      	ldrb	r2, [r3, #1]
 800215c:	4b52      	ldr	r3, [pc, #328]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 800215e:	705a      	strb	r2, [r3, #1]
			}
			if(zpt==3&&buff[0]!=','){
 8002160:	4b4e      	ldr	r3, [pc, #312]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d10e      	bne.n	8002186 <HAL_UART_RxCpltCallback+0x336>
 8002168:	4b49      	ldr	r3, [pc, #292]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b2c      	cmp	r3, #44	; 0x2c
 800216e:	d00a      	beq.n	8002186 <HAL_UART_RxCpltCallback+0x336>

				time_buff[ind]=buff[0];
 8002170:	4b4b      	ldr	r3, [pc, #300]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a46      	ldr	r2, [pc, #280]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 8002176:	7811      	ldrb	r1, [r2, #0]
 8002178:	4a4a      	ldr	r2, [pc, #296]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 800217a:	54d1      	strb	r1, [r2, r3]
				ind++;
 800217c:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	4a47      	ldr	r2, [pc, #284]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 8002184:	6013      	str	r3, [r2, #0]
			}
			if(zpt==4&&buff[0]==','){
 8002186:	4b45      	ldr	r3, [pc, #276]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d10b      	bne.n	80021a6 <HAL_UART_RxCpltCallback+0x356>
 800218e:	4b40      	ldr	r3, [pc, #256]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b2c      	cmp	r3, #44	; 0x2c
 8002194:	d107      	bne.n	80021a6 <HAL_UART_RxCpltCallback+0x356>
				gps.month[0]=time_buff[0];
 8002196:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 800219c:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[1];
 800219e:	4b41      	ldr	r3, [pc, #260]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80021a0:	785a      	ldrb	r2, [r3, #1]
 80021a2:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 80021a4:	711a      	strb	r2, [r3, #4]
			}
			if(zpt==4&&buff[0]!=','){
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d10e      	bne.n	80021cc <HAL_UART_RxCpltCallback+0x37c>
 80021ae:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b2c      	cmp	r3, #44	; 0x2c
 80021b4:	d00a      	beq.n	80021cc <HAL_UART_RxCpltCallback+0x37c>

				time_buff[ind]=buff[0];
 80021b6:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a35      	ldr	r2, [pc, #212]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 80021bc:	7811      	ldrb	r1, [r2, #0]
 80021be:	4a39      	ldr	r2, [pc, #228]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80021c0:	54d1      	strb	r1, [r2, r3]
				ind++;
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3301      	adds	r3, #1
 80021c8:	4a35      	ldr	r2, [pc, #212]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 80021ca:	6013      	str	r3, [r2, #0]
			}
			if(zpt==5&&buff[0]==','){
 80021cc:	4b33      	ldr	r3, [pc, #204]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d11b      	bne.n	800220c <HAL_UART_RxCpltCallback+0x3bc>
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b2c      	cmp	r3, #44	; 0x2c
 80021da:	d117      	bne.n	800220c <HAL_UART_RxCpltCallback+0x3bc>
				gps.year[0]=time_buff[0];
 80021dc:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 80021e2:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[1];
 80021e4:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80021e6:	785a      	ldrb	r2, [r3, #1]
 80021e8:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 80021ea:	71da      	strb	r2, [r3, #7]
				gps.year[2]=time_buff[2];
 80021ec:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80021ee:	789a      	ldrb	r2, [r3, #2]
 80021f0:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 80021f2:	721a      	strb	r2, [r3, #8]
				gps.year[3]=time_buff[3];
 80021f4:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80021f6:	78da      	ldrb	r2, [r3, #3]
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_UART_RxCpltCallback+0x458>)
 80021fa:	725a      	strb	r2, [r3, #9]
				year_str[0]=time_buff[2];
 80021fc:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 80021fe:	789a      	ldrb	r2, [r3, #2]
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_UART_RxCpltCallback+0x45c>)
 8002202:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[3];
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 8002206:	78da      	ldrb	r2, [r3, #3]
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_UART_RxCpltCallback+0x45c>)
 800220a:	705a      	strb	r2, [r3, #1]
			}
		}


		//IF RMC
		if(Tipe_Mes==2){
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <HAL_UART_RxCpltCallback+0x444>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b02      	cmp	r3, #2
 8002212:	f040 80c9 	bne.w	80023a8 <HAL_UART_RxCpltCallback+0x558>

			if(count==6&&buff[0]!=','){
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_UART_RxCpltCallback+0x43c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b06      	cmp	r3, #6
 800221c:	d10b      	bne.n	8002236 <HAL_UART_RxCpltCallback+0x3e6>
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b2c      	cmp	r3, #44	; 0x2c
 8002224:	d007      	beq.n	8002236 <HAL_UART_RxCpltCallback+0x3e6>
				count=0;
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_UART_RxCpltCallback+0x43c>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
				ERRORS++;
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_UART_RxCpltCallback+0x448>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	4a19      	ldr	r2, [pc, #100]	; (8002298 <HAL_UART_RxCpltCallback+0x448>)
 8002234:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b2c      	cmp	r3, #44	; 0x2c
 800223c:	d107      	bne.n	800224e <HAL_UART_RxCpltCallback+0x3fe>
				zpt++;
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 8002246:	6013      	str	r3, [r2, #0]
				ind=0;
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d10e      	bne.n	8002274 <HAL_UART_RxCpltCallback+0x424>
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b2c      	cmp	r3, #44	; 0x2c
 800225c:	d00a      	beq.n	8002274 <HAL_UART_RxCpltCallback+0x424>

				time_buff[ind]=buff[0];
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 8002264:	7811      	ldrb	r1, [r2, #0]
 8002266:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 8002268:	54d1      	strb	r1, [r2, r3]
				ind++;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3301      	adds	r3, #1
 8002270:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <HAL_UART_RxCpltCallback+0x450>)
 8002272:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_UART_RxCpltCallback+0x44c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d13b      	bne.n	80022f4 <HAL_UART_RxCpltCallback+0x4a4>
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <HAL_UART_RxCpltCallback+0x440>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b2c      	cmp	r3, #44	; 0x2c
 8002282:	d137      	bne.n	80022f4 <HAL_UART_RxCpltCallback+0x4a4>
				gps.hours[0]=time_buff[0];
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <HAL_UART_RxCpltCallback+0x454>)
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	e012      	b.n	80022b0 <HAL_UART_RxCpltCallback+0x460>
 800228a:	bf00      	nop
 800228c:	20000ce4 	.word	0x20000ce4
 8002290:	20000cfc 	.word	0x20000cfc
 8002294:	20000cc4 	.word	0x20000cc4
 8002298:	20000cc0 	.word	0x20000cc0
 800229c:	20000cd0 	.word	0x20000cd0
 80022a0:	20000cdc 	.word	0x20000cdc
 80022a4:	20000cec 	.word	0x20000cec
 80022a8:	20005088 	.word	0x20005088
 80022ac:	20000d00 	.word	0x20000d00
 80022b0:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 80022b2:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 80022b6:	785a      	ldrb	r2, [r3, #1]
 80022b8:	4b4e      	ldr	r3, [pc, #312]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 80022ba:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 80022bc:	4b4e      	ldr	r3, [pc, #312]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 80022be:	789a      	ldrb	r2, [r3, #2]
 80022c0:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 80022c2:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 80022c4:	4b4c      	ldr	r3, [pc, #304]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 80022c6:	78da      	ldrb	r2, [r3, #3]
 80022c8:	4b4a      	ldr	r3, [pc, #296]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 80022ca:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 80022cc:	4b4a      	ldr	r3, [pc, #296]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 80022ce:	791a      	ldrb	r2, [r3, #4]
 80022d0:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 80022d2:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 80022d4:	4b48      	ldr	r3, [pc, #288]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 80022d6:	795a      	ldrb	r2, [r3, #5]
 80022d8:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 80022da:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 80022dc:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 80022de:	799a      	ldrb	r2, [r3, #6]
 80022e0:	4b44      	ldr	r3, [pc, #272]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 80022e2:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 80022e4:	4b44      	ldr	r3, [pc, #272]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 80022e6:	79da      	ldrb	r2, [r3, #7]
 80022e8:	4b42      	ldr	r3, [pc, #264]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 80022ea:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 80022ec:	4b42      	ldr	r3, [pc, #264]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 80022ee:	7a1a      	ldrb	r2, [r3, #8]
 80022f0:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 80022f2:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 80022f4:	4b41      	ldr	r3, [pc, #260]	; (80023fc <HAL_UART_RxCpltCallback+0x5ac>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d10e      	bne.n	800231a <HAL_UART_RxCpltCallback+0x4ca>
 80022fc:	4b40      	ldr	r3, [pc, #256]	; (8002400 <HAL_UART_RxCpltCallback+0x5b0>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b2c      	cmp	r3, #44	; 0x2c
 8002302:	d00a      	beq.n	800231a <HAL_UART_RxCpltCallback+0x4ca>

				time_buff[ind]=buff[0];
 8002304:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_UART_RxCpltCallback+0x5b4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a3d      	ldr	r2, [pc, #244]	; (8002400 <HAL_UART_RxCpltCallback+0x5b0>)
 800230a:	7811      	ldrb	r1, [r2, #0]
 800230c:	4a3a      	ldr	r2, [pc, #232]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 800230e:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002310:	4b3c      	ldr	r3, [pc, #240]	; (8002404 <HAL_UART_RxCpltCallback+0x5b4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <HAL_UART_RxCpltCallback+0x5b4>)
 8002318:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 800231a:	4b38      	ldr	r3, [pc, #224]	; (80023fc <HAL_UART_RxCpltCallback+0x5ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d107      	bne.n	8002332 <HAL_UART_RxCpltCallback+0x4e2>
 8002322:	4b37      	ldr	r3, [pc, #220]	; (8002400 <HAL_UART_RxCpltCallback+0x5b0>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b2c      	cmp	r3, #44	; 0x2c
 8002328:	d103      	bne.n	8002332 <HAL_UART_RxCpltCallback+0x4e2>
				gps.sinc[1]=time_buff[0];
 800232a:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 800232c:	781a      	ldrb	r2, [r3, #0]
 800232e:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 8002330:	769a      	strb	r2, [r3, #26]
			}

			if(zpt==9&&buff[0]!=','){
 8002332:	4b32      	ldr	r3, [pc, #200]	; (80023fc <HAL_UART_RxCpltCallback+0x5ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b09      	cmp	r3, #9
 8002338:	d10e      	bne.n	8002358 <HAL_UART_RxCpltCallback+0x508>
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <HAL_UART_RxCpltCallback+0x5b0>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b2c      	cmp	r3, #44	; 0x2c
 8002340:	d00a      	beq.n	8002358 <HAL_UART_RxCpltCallback+0x508>

				time_buff[ind]=buff[0];
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_UART_RxCpltCallback+0x5b4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2e      	ldr	r2, [pc, #184]	; (8002400 <HAL_UART_RxCpltCallback+0x5b0>)
 8002348:	7811      	ldrb	r1, [r2, #0]
 800234a:	4a2b      	ldr	r2, [pc, #172]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 800234c:	54d1      	strb	r1, [r2, r3]
				ind++;
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_UART_RxCpltCallback+0x5b4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3301      	adds	r3, #1
 8002354:	4a2b      	ldr	r2, [pc, #172]	; (8002404 <HAL_UART_RxCpltCallback+0x5b4>)
 8002356:	6013      	str	r3, [r2, #0]
			}
			if(zpt==10&&buff[0]==','){
 8002358:	4b28      	ldr	r3, [pc, #160]	; (80023fc <HAL_UART_RxCpltCallback+0x5ac>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b0a      	cmp	r3, #10
 800235e:	d123      	bne.n	80023a8 <HAL_UART_RxCpltCallback+0x558>
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <HAL_UART_RxCpltCallback+0x5b0>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b2c      	cmp	r3, #44	; 0x2c
 8002366:	d11f      	bne.n	80023a8 <HAL_UART_RxCpltCallback+0x558>
				gps.day[0]=time_buff[0];
 8002368:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 800236e:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 8002372:	785a      	ldrb	r2, [r3, #1]
 8002374:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 8002376:	705a      	strb	r2, [r3, #1]
				gps.month[0]=time_buff[2];
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 800237a:	789a      	ldrb	r2, [r3, #2]
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 800237e:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[3];
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 8002382:	78da      	ldrb	r2, [r3, #3]
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 8002386:	711a      	strb	r2, [r3, #4]
				gps.year[0]=time_buff[4];
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 800238a:	791a      	ldrb	r2, [r3, #4]
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 800238e:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[5];
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 8002392:	795a      	ldrb	r2, [r3, #5]
 8002394:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 8002396:	71da      	strb	r2, [r3, #7]
				year_str[0]=time_buff[4];
 8002398:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 800239a:	791a      	ldrb	r2, [r3, #4]
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_UART_RxCpltCallback+0x5b8>)
 800239e:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[5];
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_UART_RxCpltCallback+0x5a8>)
 80023a2:	795a      	ldrb	r2, [r3, #5]
 80023a4:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_UART_RxCpltCallback+0x5b8>)
 80023a6:	705a      	strb	r2, [r3, #1]
			}
		}
		//printf("buff=%c\tcount=%d\tzpt=%d\tind=%d\tTipe_Mes=%d\n\r",buff[0],count,zpt,ind,Tipe_Mes);
		//printf("crc_hx=%s\t crc=%d\t crc_buff=%s\t dec=%d\n\r",crc_hx,crc,crc_buff,dec);
		dataReceived=1;
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_UART_RxCpltCallback+0x5bc>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

		if( dataTransmitted != 0 ) {
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <HAL_UART_RxCpltCallback+0x5c0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_UART_RxCpltCallback+0x57c>

			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 80023b6:	2201      	movs	r2, #1
 80023b8:	4911      	ldr	r1, [pc, #68]	; (8002400 <HAL_UART_RxCpltCallback+0x5b0>)
 80023ba:	4816      	ldr	r0, [pc, #88]	; (8002414 <HAL_UART_RxCpltCallback+0x5c4>)
 80023bc:	f005 f838 	bl	8007430 <HAL_UART_Transmit_IT>

			dataReceived=0;
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_UART_RxCpltCallback+0x5bc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_UART_RxCpltCallback+0x5c0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT (&huart7, (uint8_t *)buff, 1);
 80023cc:	2201      	movs	r2, #1
 80023ce:	490c      	ldr	r1, [pc, #48]	; (8002400 <HAL_UART_RxCpltCallback+0x5b0>)
 80023d0:	4811      	ldr	r0, [pc, #68]	; (8002418 <HAL_UART_RxCpltCallback+0x5c8>)
 80023d2:	f005 f89b 	bl	800750c <HAL_UART_Receive_IT>
		gps.errors[1]=ERRORS;
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_UART_RxCpltCallback+0x5cc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_UART_RxCpltCallback+0x5a4>)
 80023de:	761a      	strb	r2, [r3, #24]
		count++;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_UART_RxCpltCallback+0x5d0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_UART_RxCpltCallback+0x5d0>)
 80023e8:	6013      	str	r3, [r2, #0]
	}
}
 80023ea:	bf00      	nop
 80023ec:	3728      	adds	r7, #40	; 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20005088 	.word	0x20005088
 80023f8:	20000cec 	.word	0x20000cec
 80023fc:	20000cd0 	.word	0x20000cd0
 8002400:	20000cfc 	.word	0x20000cfc
 8002404:	20000cdc 	.word	0x20000cdc
 8002408:	20000d00 	.word	0x20000d00
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004
 8002414:	20005290 	.word	0x20005290
 8002418:	200050cc 	.word	0x200050cc
 800241c:	20000cc0 	.word	0x20000cc0
 8002420:	20000ce4 	.word	0x20000ce4

08002424 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

	if(huart == &huart6) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <HAL_UART_TxCpltCallback+0x3c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d111      	bne.n	8002458 <HAL_UART_TxCpltCallback+0x34>

		dataTransmitted=1;
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_UART_TxCpltCallback+0x40>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]

		if( dataReceived != 0 ) {
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_UART_TxCpltCallback+0x44>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_UART_TxCpltCallback+0x34>
			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 8002442:	2201      	movs	r2, #1
 8002444:	4909      	ldr	r1, [pc, #36]	; (800246c <HAL_UART_TxCpltCallback+0x48>)
 8002446:	4806      	ldr	r0, [pc, #24]	; (8002460 <HAL_UART_TxCpltCallback+0x3c>)
 8002448:	f004 fff2 	bl	8007430 <HAL_UART_Transmit_IT>
			dataReceived=0;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_UART_TxCpltCallback+0x44>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_UART_TxCpltCallback+0x40>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20005290 	.word	0x20005290
 8002464:	20000004 	.word	0x20000004
 8002468:	20000000 	.word	0x20000000
 800246c:	20000cfc 	.word	0x20000cfc

08002470 <Hex_to_dec>:

char Hex_to_dec(char hex[2]){
 8002470:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
    int i;
    int dig; /*to store digit*/
    int cont = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
    dec = 0;
 800247e:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <Hex_to_dec+0x108>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7fd fecd 	bl	8000224 <strlen>
 800248a:	4603      	mov	r3, r0
 800248c:	3b01      	subs	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e060      	b.n	8002554 <Hex_to_dec+0xe4>
        switch (hex[i]) {
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	3b41      	subs	r3, #65	; 0x41
 800249c:	2b05      	cmp	r3, #5
 800249e:	d821      	bhi.n	80024e4 <Hex_to_dec+0x74>
 80024a0:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <Hex_to_dec+0x38>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024c1 	.word	0x080024c1
 80024ac:	080024c7 	.word	0x080024c7
 80024b0:	080024cd 	.word	0x080024cd
 80024b4:	080024d3 	.word	0x080024d3
 80024b8:	080024d9 	.word	0x080024d9
 80024bc:	080024df 	.word	0x080024df
        case 'A':
            dig = 10;
 80024c0:	230a      	movs	r3, #10
 80024c2:	613b      	str	r3, [r7, #16]
            break;
 80024c4:	e014      	b.n	80024f0 <Hex_to_dec+0x80>
        case 'B':
            dig = 11;
 80024c6:	230b      	movs	r3, #11
 80024c8:	613b      	str	r3, [r7, #16]
            break;
 80024ca:	e011      	b.n	80024f0 <Hex_to_dec+0x80>
        case 'C':
            dig = 12;
 80024cc:	230c      	movs	r3, #12
 80024ce:	613b      	str	r3, [r7, #16]
            break;
 80024d0:	e00e      	b.n	80024f0 <Hex_to_dec+0x80>
        case 'D':
            dig = 13;
 80024d2:	230d      	movs	r3, #13
 80024d4:	613b      	str	r3, [r7, #16]
            break;
 80024d6:	e00b      	b.n	80024f0 <Hex_to_dec+0x80>
        case 'E':
            dig = 14;
 80024d8:	230e      	movs	r3, #14
 80024da:	613b      	str	r3, [r7, #16]
            break;
 80024dc:	e008      	b.n	80024f0 <Hex_to_dec+0x80>
        case 'F':
            dig = 15;
 80024de:	230f      	movs	r3, #15
 80024e0:	613b      	str	r3, [r7, #16]
            break;
 80024e2:	e005      	b.n	80024f0 <Hex_to_dec+0x80>
        default:
            dig = hex[i] - 0x30;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	3b30      	subs	r3, #48	; 0x30
 80024ee:	613b      	str	r3, [r7, #16]
        }
        dec = dec + (dig)*pow((double)16, (double)cont);
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <Hex_to_dec+0x108>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f845 	bl	8000584 <__aeabi_i2d>
 80024fa:	4604      	mov	r4, r0
 80024fc:	460d      	mov	r5, r1
 80024fe:	6938      	ldr	r0, [r7, #16]
 8002500:	f7fe f840 	bl	8000584 <__aeabi_i2d>
 8002504:	4680      	mov	r8, r0
 8002506:	4689      	mov	r9, r1
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7fe f83b 	bl	8000584 <__aeabi_i2d>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	ec43 2b11 	vmov	d1, r2, r3
 8002516:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002570 <Hex_to_dec+0x100>
 800251a:	f020 fb23 	bl	8022b64 <pow>
 800251e:	ec53 2b10 	vmov	r2, r3, d0
 8002522:	4640      	mov	r0, r8
 8002524:	4649      	mov	r1, r9
 8002526:	f7fe f897 	bl	8000658 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4620      	mov	r0, r4
 8002530:	4629      	mov	r1, r5
 8002532:	f7fd fedb 	bl	80002ec <__adddf3>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f7fe fb3b 	bl	8000bb8 <__aeabi_d2iz>
 8002542:	4603      	mov	r3, r0
 8002544:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <Hex_to_dec+0x108>)
 8002546:	6013      	str	r3, [r2, #0]
        cont++;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3301      	adds	r3, #1
 800254c:	60fb      	str	r3, [r7, #12]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3b01      	subs	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	da9b      	bge.n	8002492 <Hex_to_dec+0x22>
    }
    return dec;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <Hex_to_dec+0x108>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	b2db      	uxtb	r3, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800256a:	bf00      	nop
 800256c:	f3af 8000 	nop.w
 8002570:	00000000 	.word	0x00000000
 8002574:	40300000 	.word	0x40300000
 8002578:	20005264 	.word	0x20005264

0800257c <calc_crc>:


char calc_crc(char c,int cnt){
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
	if (c=='*'){
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	2b2a      	cmp	r3, #42	; 0x2a
 800258c:	d108      	bne.n	80025a0 <calc_crc+0x24>
		start_crc=0;
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <calc_crc+0xa0>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
		crc_pars=1;
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <calc_crc+0xa4>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]
		z=0;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <calc_crc+0xa8>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
	}
	if(start_crc==1){
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <calc_crc+0xa0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <calc_crc+0x38>
		crc^=c;
 80025a8:	79fa      	ldrb	r2, [r7, #7]
 80025aa:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <calc_crc+0xac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4053      	eors	r3, r2
 80025b0:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <calc_crc+0xac>)
 80025b2:	6013      	str	r3, [r2, #0]
	}
	if(crc_pars==1&&c!='*'&&z<=1){
 80025b4:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <calc_crc+0xa4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d110      	bne.n	80025de <calc_crc+0x62>
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	2b2a      	cmp	r3, #42	; 0x2a
 80025c0:	d00d      	beq.n	80025de <calc_crc+0x62>
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <calc_crc+0xa8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	dc09      	bgt.n	80025de <calc_crc+0x62>
		crc_buff[z]=c;
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <calc_crc+0xa8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4917      	ldr	r1, [pc, #92]	; (800262c <calc_crc+0xb0>)
 80025d0:	79fa      	ldrb	r2, [r7, #7]
 80025d2:	54ca      	strb	r2, [r1, r3]
		z++;
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <calc_crc+0xa8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <calc_crc+0xa8>)
 80025dc:	6013      	str	r3, [r2, #0]
	}
	if(c=='\n'){
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	2b0a      	cmp	r3, #10
 80025e2:	d10a      	bne.n	80025fa <calc_crc+0x7e>
		Hex_to_dec(crc_buff);
 80025e4:	4811      	ldr	r0, [pc, #68]	; (800262c <calc_crc+0xb0>)
 80025e6:	f7ff ff43 	bl	8002470 <Hex_to_dec>
		if(crc==dec){
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <calc_crc+0xac>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <calc_crc+0xb4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d101      	bne.n	80025fa <calc_crc+0x7e>
			//Test++;
			return 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00c      	b.n	8002614 <calc_crc+0x98>
		}
	}
	if(cnt==0){
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d108      	bne.n	8002612 <calc_crc+0x96>
		start_crc=1;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <calc_crc+0xa0>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]
		crc_pars=0;
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <calc_crc+0xa4>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
		crc=0;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <calc_crc+0xac>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
	}
//	printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
	return 0;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000cd4 	.word	0x20000cd4
 8002620:	20000ce8 	.word	0x20000ce8
 8002624:	20000cd8 	.word	0x20000cd8
 8002628:	20000ce0 	.word	0x20000ce0
 800262c:	20000cf8 	.word	0x20000cf8
 8002630:	20005264 	.word	0x20005264

08002634 <rtc_read>:

time_t rtc_read(void) {
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b092      	sub	sp, #72	; 0x48
 8002638:	af00      	add	r7, sp, #0
	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	struct tm timeinfo;

	hrtc.Instance = RTC;
 800263a:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <rtc_read+0x84>)
 800263c:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <rtc_read+0x88>)
 800263e:	601a      	str	r2, [r3, #0]

	// Read actual date and time
	HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 8002640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002644:	2200      	movs	r2, #0
 8002646:	4619      	mov	r1, r3
 8002648:	481b      	ldr	r0, [pc, #108]	; (80026b8 <rtc_read+0x84>)
 800264a:	f004 f949 	bl	80068e0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 800264e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002652:	2200      	movs	r2, #0
 8002654:	4619      	mov	r1, r3
 8002656:	4818      	ldr	r0, [pc, #96]	; (80026b8 <rtc_read+0x84>)
 8002658:	f004 fa48 	bl	8006aec <HAL_RTC_GetDate>

	// Setup a tm structure based on the RTC
	// monday==1 sunday==7
	timeinfo.tm_wday = dateStruct.WeekDay;
 800265c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002660:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 8002662:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002666:	613b      	str	r3, [r7, #16]
	timeinfo.tm_mday = dateStruct.Date;
 8002668:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800266c:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_year = dateStruct.Year + 100;
 800266e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002672:	3364      	adds	r3, #100	; 0x64
 8002674:	617b      	str	r3, [r7, #20]
	timeinfo.tm_hour = timeStruct.Hours;
 8002676:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800267a:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_min = timeStruct.Minutes;
 800267c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002680:	607b      	str	r3, [r7, #4]
	timeinfo.tm_sec = timeStruct.Seconds;
 8002682:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002686:	603b      	str	r3, [r7, #0]
	//printf("tm_wday=%d\t\n",timeinfo.tm_wday);

	// Convert to timestamp
	time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 8002688:	463b      	mov	r3, r7
 800268a:	4618      	mov	r0, r3
 800268c:	f018 fa34 	bl	801aaf8 <mktime>
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <rtc_read+0x8c>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <rtc_read+0x90>)
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	461a      	mov	r2, r3
 800269c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80026a0:	1884      	adds	r4, r0, r2
 80026a2:	eb41 0503 	adc.w	r5, r1, r3
 80026a6:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40


	return t;
 80026aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	3748      	adds	r7, #72	; 0x48
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bdb0      	pop	{r4, r5, r7, pc}
 80026b8:	2000526c 	.word	0x2000526c
 80026bc:	40002800 	.word	0x40002800
 80026c0:	20005150 	.word	0x20005150
 80026c4:	080274ec 	.word	0x080274ec

080026c8 <tcpecho_init>:

void tcpecho_init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL,DEFAULT_THREAD_STACKSIZE, 1);
 80026ce:	2301      	movs	r3, #1
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d6:	2200      	movs	r2, #0
 80026d8:	4903      	ldr	r1, [pc, #12]	; (80026e8 <tcpecho_init+0x20>)
 80026da:	4804      	ldr	r0, [pc, #16]	; (80026ec <tcpecho_init+0x24>)
 80026dc:	f017 ff94 	bl	801a608 <sys_thread_new>
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	0800272d 	.word	0x0800272d
 80026ec:	08023bfc 	.word	0x08023bfc

080026f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80026f8:	f006 f9b6 	bl	8008a68 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 80026fc:	f00c fddc 	bl	800f2b8 <httpd_init>
	/* Initialize tcp echo server */
	tcpecho_init();
 8002700:	f7ff ffe2 	bl	80026c8 <tcpecho_init>

	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 8002704:	2201      	movs	r2, #1
 8002706:	4906      	ldr	r1, [pc, #24]	; (8002720 <StartDefaultTask+0x30>)
 8002708:	4806      	ldr	r0, [pc, #24]	; (8002724 <StartDefaultTask+0x34>)
 800270a:	f004 feff 	bl	800750c <HAL_UART_Receive_IT>
		//HAL_GPIO_TogglePin(Led_GPIO_Port, Led1_Pin);
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 800270e:	2102      	movs	r1, #2
 8002710:	4805      	ldr	r0, [pc, #20]	; (8002728 <StartDefaultTask+0x38>)
 8002712:	f002 fe7e 	bl	8005412 <HAL_GPIO_TogglePin>
		//HAL_UART_Receive(&huart7, (uint8_t*)RXstr, MESsize, 1000);
		//HAL_UART_Transmit(&huart6, (uint8_t*)str, 8, 1000);
		HAL_Delay(1000);
 8002716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800271a:	f001 fb2d 	bl	8003d78 <HAL_Delay>
		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 800271e:	e7f1      	b.n	8002704 <StartDefaultTask+0x14>
 8002720:	20000cfc 	.word	0x20000cfc
 8002724:	200050cc 	.word	0x200050cc
 8002728:	40022000 	.word	0x40022000

0800272c <tcpecho_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tcpecho_thread */
void tcpecho_thread(void const * argument)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
		//struct tm tm_;
		//uint32_t tm_ms_;


		/* Create a new connection identifier. */
		conn = netconn_new(NETCONN_UDP);
 8002734:	2200      	movs	r2, #0
 8002736:	2100      	movs	r1, #0
 8002738:	2020      	movs	r0, #32
 800273a:	f009 fe0d 	bl	800c358 <netconn_new_with_proto_and_callback>
 800273e:	61f8      	str	r0, [r7, #28]
		if (conn!=NULL)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8089 	beq.w	800285a <tcpecho_thread+0x12e>
		{
			/* Bind connection to well known port number 7. */
			err = netconn_bind(conn, NULL, 123);
 8002748:	227b      	movs	r2, #123	; 0x7b
 800274a:	2100      	movs	r1, #0
 800274c:	69f8      	ldr	r0, [r7, #28]
 800274e:	f009 febd 	bl	800c4cc <netconn_bind>
 8002752:	4603      	mov	r3, r0
 8002754:	76fb      	strb	r3, [r7, #27]
			if (err == ERR_OK)
 8002756:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d17a      	bne.n	8002854 <tcpecho_thread+0x128>
			{
				while (1)
				{
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 800275e:	e067      	b.n	8002830 <tcpecho_thread+0x104>
					{
						do
						{
							netbuf_data(buf, (void **)&ntp_packet_ptr, &buf_data_len);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f107 0212 	add.w	r2, r7, #18
 8002766:	f107 010c 	add.w	r1, r7, #12
 800276a:	4618      	mov	r0, r3
 800276c:	f00b fbb4 	bl	800ded8 <netbuf_data>

							if(buf_data_len < 48 || buf_data_len > 2048)
 8002770:	8a7b      	ldrh	r3, [r7, #18]
 8002772:	2b2f      	cmp	r3, #47	; 0x2f
 8002774:	d903      	bls.n	800277e <tcpecho_thread+0x52>
 8002776:	8a7b      	ldrh	r3, [r7, #18]
 8002778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800277c:	d904      	bls.n	8002788 <tcpecho_thread+0x5c>
							{
								netbuf_delete(buf);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	4618      	mov	r0, r3
 8002782:	f00b fb89 	bl	800de98 <netbuf_delete>
								continue;
 8002786:	e048      	b.n	800281a <tcpecho_thread+0xee>
							}
							ntp_packet_ptr->li_vn_mode = (0 << 6) | (4 << 3) | (4); // Leap Warning: None, Version: NTPv4, Mode: 4 - Server
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2224      	movs	r2, #36	; 0x24
 800278c:	701a      	strb	r2, [r3, #0]
							ntp_packet_ptr->stratum = ntpd_status.stratum;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4a34      	ldr	r2, [pc, #208]	; (8002864 <tcpecho_thread+0x138>)
 8002792:	7a12      	ldrb	r2, [r2, #8]
 8002794:	705a      	strb	r2, [r3, #1]
							ntp_packet_ptr->poll = 5; // 32s
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2205      	movs	r2, #5
 800279a:	709a      	strb	r2, [r3, #2]
							ntp_packet_ptr->precision = -10; // ~1ms
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	22f6      	movs	r2, #246	; 0xf6
 80027a0:	70da      	strb	r2, [r3, #3]

							ntp_packet_ptr->rootDelay = 0; // Delay from GPS clock is ~zero
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
							ntp_packet_ptr->rootDispersion_s = 0;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	811a      	strh	r2, [r3, #8]
							ntp_packet_ptr->rootDispersion_f = htonl(NTP_MS_TO_FS_U16 * 1.0); // 1ms
 80027ae:	2041      	movs	r0, #65	; 0x41
 80027b0:	f00c fdb7 	bl	800f322 <lwip_htonl>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	b292      	uxth	r2, r2
 80027ba:	815a      	strh	r2, [r3, #10]
							ntp_packet_ptr->refId = ('G') | ('P' << 8) | ('S' << 16) | ('\0' << 24);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a2a      	ldr	r2, [pc, #168]	; (8002868 <tcpecho_thread+0x13c>)
 80027c0:	60da      	str	r2, [r3, #12]
							/* Move client's transmit timestamp into origin fields */
							ntp_packet_ptr->origTm_s = ntp_packet_ptr->txTm_s;
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027c8:	619a      	str	r2, [r3, #24]
							ntp_packet_ptr->origTm_f = ntp_packet_ptr->txTm_f;
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027d0:	61da      	str	r2, [r3, #28]

							ntp_packet_ptr->refTm_s = time_ref_s;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a25      	ldr	r2, [pc, #148]	; (800286c <tcpecho_thread+0x140>)
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	611a      	str	r2, [r3, #16]
							ntp_packet_ptr->refTm_f = time_ref_f;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4a24      	ldr	r2, [pc, #144]	; (8002870 <tcpecho_thread+0x144>)
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	615a      	str	r2, [r3, #20]

							//rtcGetTime(&RTCD1, &ntpd_datetime);
							//rtcConvertDateTimeToStructTm(&ntpd_datetime, &tm_, &tm_ms_);

							ntp_packet_ptr->rxTm_s = htonl(rtc_read()- DIFF_SEC_1970_2036);//htonl(mktime(&tm_) - DIFF_SEC_1970_2036);
 80027e2:	f7ff ff27 	bl	8002634 <rtc_read>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4b22      	ldr	r3, [pc, #136]	; (8002874 <tcpecho_thread+0x148>)
 80027ec:	4413      	add	r3, r2
 80027ee:	68fc      	ldr	r4, [r7, #12]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00c fd96 	bl	800f322 <lwip_htonl>
 80027f6:	4603      	mov	r3, r0
 80027f8:	6223      	str	r3, [r4, #32]
							ntp_packet_ptr->rxTm_f = 0;//htonl((NTP_MS_TO_FS_U32 * tm_ms_));
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24

							/* Copy into transmit timestamp fields */
							ntp_packet_ptr->txTm_s = ntp_packet_ptr->rxTm_s;
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a12      	ldr	r2, [r2, #32]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
							ntp_packet_ptr->txTm_f = ntp_packet_ptr->rxTm_f;
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c

							netconn_send(conn, buf);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	4619      	mov	r1, r3
 8002814:	69f8      	ldr	r0, [r7, #28]
 8002816:	f00a f887 	bl	800c928 <netconn_send>
						}
						while (netbuf_next(buf) >= 0);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	4618      	mov	r0, r3
 800281e:	f00b fba5 	bl	800df6c <netbuf_next>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	da9b      	bge.n	8002760 <tcpecho_thread+0x34>

						netbuf_delete(buf);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4618      	mov	r0, r3
 800282c:	f00b fb34 	bl	800de98 <netbuf_delete>
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	4619      	mov	r1, r3
 8002836:	69f8      	ldr	r0, [r7, #28]
 8002838:	f009 fffc 	bl	800c834 <netconn_recv>
 800283c:	4603      	mov	r3, r0
 800283e:	76bb      	strb	r3, [r7, #26]
 8002840:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d08b      	beq.n	8002760 <tcpecho_thread+0x34>
					}
					/* Close connection and discard connection identifier. */
					//netconn_close(newconn);
					//netconn_delete(newconn);
					ntpd_status.requests_count++;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <tcpecho_thread+0x138>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	3301      	adds	r3, #1
 800284e:	4a05      	ldr	r2, [pc, #20]	; (8002864 <tcpecho_thread+0x138>)
 8002850:	6053      	str	r3, [r2, #4]
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002852:	e7ed      	b.n	8002830 <tcpecho_thread+0x104>
				}
			}
			else
			{
				netconn_delete(conn);
 8002854:	69f8      	ldr	r0, [r7, #28]
 8002856:	f009 fe1d 	bl	800c494 <netconn_delete>
			}
		}
	}
  /* USER CODE END tcpecho_thread */
}
 800285a:	bf00      	nop
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}
 8002862:	bf00      	nop
 8002864:	2000000c 	.word	0x2000000c
 8002868:	00535047 	.word	0x00535047
 800286c:	20005314 	.word	0x20005314
 8002870:	2000528c 	.word	0x2000528c
 8002874:	83aa7e80 	.word	0x83aa7e80

08002878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800288a:	f001 fa55 	bl	8003d38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40001000 	.word	0x40001000

0800289c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028a0:	b672      	cpsid	i
}
 80028a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <Error_Handler+0x8>
	...

080028a8 <fs_open_custom>:
#define JSON_SIZE 1608

int fs_read_custom(struct fs_file *file, char *buffer, int count){
	return 0;
}
int fs_open_custom(struct fs_file *file, const char *name){
 80028a8:	b5b0      	push	{r4, r5, r7, lr}
 80028aa:	f5ad 6ddb 	sub.w	sp, sp, #1752	; 0x6d8
 80028ae:	af04      	add	r7, sp, #16
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	6018      	str	r0, [r3, #0]
 80028b4:	463b      	mov	r3, r7
 80028b6:	6019      	str	r1, [r3, #0]
	char generated_html[JSON_SIZE];
	memset(generated_html, 0, JSON_SIZE);
 80028b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028bc:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f018 f838 	bl	801a938 <memset>
	u16_t offset = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8a7 36c6 	strh.w	r3, [r7, #1734]	; 0x6c6

	if (!strcmp(name, "/info.json")) {
 80028ce:	463b      	mov	r3, r7
 80028d0:	4986      	ldr	r1, [pc, #536]	; (8002aec <fs_open_custom+0x244>)
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	f7fd fc9c 	bl	8000210 <strcmp>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d119      	bne.n	8002912 <fs_open_custom+0x6a>

		char* ip=user_info.ip;
 80028de:	4b84      	ldr	r3, [pc, #528]	; (8002af0 <fs_open_custom+0x248>)
 80028e0:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
		int zone=user_info.zone;
 80028e4:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <fs_open_custom+0x248>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
		char* contacts=user_info.contacts;
 80028ec:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <fs_open_custom+0x24c>)
 80028ee:	f8c7 36a0 	str.w	r3, [r7, #1696]	; 0x6a0

			offset = sprintf(generated_html,"[{\"IPaddress\":\"%s\",\"Timezone\":\"%d\",\"contacts\":\"%s\",\"software_version\":\"0.000000001\",\"mac\":\"no\"}]",ip,zone,contacts);
 80028f2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80028f6:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	; 0x6a0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8002900:	f8d7 26a8 	ldr.w	r2, [r7, #1704]	; 0x6a8
 8002904:	497c      	ldr	r1, [pc, #496]	; (8002af8 <fs_open_custom+0x250>)
 8002906:	f018 fb01 	bl	801af0c <sprintf>
 800290a:	4603      	mov	r3, r0
 800290c:	f8a7 36c6 	strh.w	r3, [r7, #1734]	; 0x6c6
 8002910:	e0a7      	b.n	8002a62 <fs_open_custom+0x1ba>
	}
	else if (!strcmp(name, "/uptime.json")) {
 8002912:	463b      	mov	r3, r7
 8002914:	4979      	ldr	r1, [pc, #484]	; (8002afc <fs_open_custom+0x254>)
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	f7fd fc7a 	bl	8000210 <strcmp>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	f040 809f 	bne.w	8002a62 <fs_open_custom+0x1ba>
		RTC_DateTypeDef dateStruct;
		RTC_TimeTypeDef timeStruct;

		//hrtc.Instance = RTC;
		if (gps.year[0]!='V'){
 8002924:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <fs_open_custom+0x258>)
 8002926:	799b      	ldrb	r3, [r3, #6]
 8002928:	2b56      	cmp	r3, #86	; 0x56
 800292a:	f000 808d 	beq.w	8002a48 <fs_open_custom+0x1a0>
			// Read actual date and time
			HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 800292e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002932:	2200      	movs	r2, #0
 8002934:	4619      	mov	r1, r3
 8002936:	4873      	ldr	r0, [pc, #460]	; (8002b04 <fs_open_custom+0x25c>)
 8002938:	f003 ffd2 	bl	80068e0 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 800293c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002940:	2200      	movs	r2, #0
 8002942:	4619      	mov	r1, r3
 8002944:	486f      	ldr	r0, [pc, #444]	; (8002b04 <fs_open_custom+0x25c>)
 8002946:	f004 f8d1 	bl	8006aec <HAL_RTC_GetDate>

			struct tm timeinfo;

			timeinfo.tm_wday = dateStruct.WeekDay;
 800294a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	f107 030c 	add.w	r3, r7, #12
 8002956:	619a      	str	r2, [r3, #24]
			timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 8002958:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800295c:	785b      	ldrb	r3, [r3, #1]
 800295e:	461a      	mov	r2, r3
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	611a      	str	r2, [r3, #16]
			timeinfo.tm_mday = dateStruct.Date;
 8002966:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800296a:	789b      	ldrb	r3, [r3, #2]
 800296c:	461a      	mov	r2, r3
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	60da      	str	r2, [r3, #12]
			timeinfo.tm_year = dateStruct.Year;
 8002974:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002978:	78db      	ldrb	r3, [r3, #3]
 800297a:	461a      	mov	r2, r3
 800297c:	f107 030c 	add.w	r3, r7, #12
 8002980:	615a      	str	r2, [r3, #20]
			timeinfo.tm_hour = timeStruct.Hours;
 8002982:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	609a      	str	r2, [r3, #8]
			timeinfo.tm_min = timeStruct.Minutes;
 8002990:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002994:	785b      	ldrb	r3, [r3, #1]
 8002996:	461a      	mov	r2, r3
 8002998:	f107 030c 	add.w	r3, r7, #12
 800299c:	605a      	str	r2, [r3, #4]
			timeinfo.tm_sec = timeStruct.Seconds;
 800299e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029a2:	789b      	ldrb	r3, [r3, #2]
 80029a4:	461a      	mov	r2, r3
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	601a      	str	r2, [r3, #0]

			time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	4618      	mov	r0, r3
 80029b2:	f018 f8a1 	bl	801aaf8 <mktime>
 80029b6:	4b4e      	ldr	r3, [pc, #312]	; (8002af0 <fs_open_custom+0x248>)
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	4a53      	ldr	r2, [pc, #332]	; (8002b08 <fs_open_custom+0x260>)
 80029bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c0:	461a      	mov	r2, r3
 80029c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80029c6:	1884      	adds	r4, r0, r2
 80029c8:	eb41 0503 	adc.w	r5, r1, r3
 80029cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029d0:	e9c3 4500 	strd	r4, r5, [r3]
			// time_t  to   tm

			localtime_r(  &t, &WebPageTime );
 80029d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029d8:	494c      	ldr	r1, [pc, #304]	; (8002b0c <fs_open_custom+0x264>)
 80029da:	4618      	mov	r0, r3
 80029dc:	f017 fe80 	bl	801a6e0 <localtime_r>

			int Hours=WebPageTime.tm_hour;
 80029e0:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <fs_open_custom+0x264>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
			int Minutes=WebPageTime.tm_min;
 80029e8:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <fs_open_custom+0x264>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
			int Seconds=WebPageTime.tm_sec;
 80029f0:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <fs_open_custom+0x264>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
			int Date=WebPageTime.tm_mday;
 80029f8:	4b44      	ldr	r3, [pc, #272]	; (8002b0c <fs_open_custom+0x264>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
			int Month=WebPageTime.tm_mon+1;
 8002a00:	4b42      	ldr	r3, [pc, #264]	; (8002b0c <fs_open_custom+0x264>)
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	3301      	adds	r3, #1
 8002a06:	f8c7 36b0 	str.w	r3, [r7, #1712]	; 0x6b0
			int Year=WebPageTime.tm_year+2000;
 8002a0a:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <fs_open_custom+0x264>)
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002a12:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac


			offset = sprintf(generated_html,"%02d:%02d:%02d %02d.%02d.%04d",Hours,Minutes,Seconds,Date,Month,Year);
 8002a16:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002a1a:	f8d7 36ac 	ldr.w	r3, [r7, #1708]	; 0x6ac
 8002a1e:	9303      	str	r3, [sp, #12]
 8002a20:	f8d7 36b0 	ldr.w	r3, [r7, #1712]	; 0x6b0
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002a36:	f8d7 26c0 	ldr.w	r2, [r7, #1728]	; 0x6c0
 8002a3a:	4935      	ldr	r1, [pc, #212]	; (8002b10 <fs_open_custom+0x268>)
 8002a3c:	f018 fa66 	bl	801af0c <sprintf>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f8a7 36c6 	strh.w	r3, [r7, #1734]	; 0x6c6
 8002a46:	e00c      	b.n	8002a62 <fs_open_custom+0x1ba>
		}
		else if (gps.year[0]=='V') {
 8002a48:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <fs_open_custom+0x258>)
 8002a4a:	799b      	ldrb	r3, [r3, #6]
 8002a4c:	2b56      	cmp	r3, #86	; 0x56
 8002a4e:	d108      	bne.n	8002a62 <fs_open_custom+0x1ba>
			offset = sprintf(generated_html,"no Reference Timestamp");
 8002a50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a54:	492f      	ldr	r1, [pc, #188]	; (8002b14 <fs_open_custom+0x26c>)
 8002a56:	4618      	mov	r0, r3
 8002a58:	f018 fa58 	bl	801af0c <sprintf>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f8a7 36c6 	strh.w	r3, [r7, #1734]	; 0x6c6
		}
	}

	if (offset>0){
 8002a62:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	; 0x6c6
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00e      	beq.n	8002a88 <fs_open_custom+0x1e0>
		memset(file, 0, sizeof(struct fs_file));
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	2214      	movs	r2, #20
 8002a6e:	2100      	movs	r1, #0
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	f017 ff61 	bl	801a938 <memset>
		file->pextension = mem_malloc(offset);
 8002a76:	f8b7 36c6 	ldrh.w	r3, [r7, #1734]	; 0x6c6
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f00c ffa6 	bl	800f9cc <mem_malloc>
 8002a80:	4602      	mov	r2, r0
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60da      	str	r2, [r3, #12]
	}

	if (file->pextension != NULL) {
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d020      	beq.n	8002ad4 <fs_open_custom+0x22c>
		/* instead of doing memcpy, you would generate e.g. a JSON here */
		memcpy(file->pextension, generated_html, offset);
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f8b7 26c6 	ldrh.w	r2, [r7, #1734]	; 0x6c6
 8002a9c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f017 ff21 	bl	801a8e8 <memcpy>
		file->data = (const char *)file->pextension;
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	601a      	str	r2, [r3, #0]
		file->len = offset; /* don't send the trailing 0 */
 8002ab2:	f8b7 26c6 	ldrh.w	r2, [r7, #1734]	; 0x6c6
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
		file->index = file->len;
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	609a      	str	r2, [r3, #8]
		/* allow persisteng connections */
		file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2201      	movs	r2, #1
 8002ace:	741a      	strb	r2, [r3, #16]
		return 1;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e005      	b.n	8002ae0 <fs_open_custom+0x238>
	}

	printf("Extension fail %s\n\r",name);
 8002ad4:	463b      	mov	r3, r7
 8002ad6:	6819      	ldr	r1, [r3, #0]
 8002ad8:	480f      	ldr	r0, [pc, #60]	; (8002b18 <fs_open_custom+0x270>)
 8002ada:	f018 f9b3 	bl	801ae44 <printf>
	return 0;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f507 67d9 	add.w	r7, r7, #1736	; 0x6c8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	08023c0c 	.word	0x08023c0c
 8002af0:	20005150 	.word	0x20005150
 8002af4:	20005164 	.word	0x20005164
 8002af8:	08023c18 	.word	0x08023c18
 8002afc:	08023c7c 	.word	0x08023c7c
 8002b00:	20005088 	.word	0x20005088
 8002b04:	2000526c 	.word	0x2000526c
 8002b08:	080274ec 	.word	0x080274ec
 8002b0c:	200050a4 	.word	0x200050a4
 8002b10:	08023c8c 	.word	0x08023c8c
 8002b14:	08023cac 	.word	0x08023cac
 8002b18:	08023cc4 	.word	0x08023cc4

08002b1c <fs_close_custom>:
void fs_close_custom(struct fs_file *file){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	if (file && file->pextension) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <fs_close_custom+0x26>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <fs_close_custom+0x26>
		mem_free(file->pextension);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f00c fdae 	bl	800f698 <mem_free>
		file->pextension = NULL;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
	}
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8002b4a:	b480      	push	{r7}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d801      	bhi.n	8002b64 <jsmn_alloc_token+0x1a>
    return NULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e014      	b.n	8002b8e <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	1c59      	adds	r1, r3, #1
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	6051      	str	r1, [r2, #4]
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	4413      	add	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	609a      	str	r2, [r3, #8]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8002b8c:	697b      	ldr	r3, [r7, #20]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	7afa      	ldrb	r2, [r7, #11]
 8002bae:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	605a      	str	r2, [r3, #4]
  token->end = end;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002be4:	e07c      	b.n	8002ce0 <jsmn_parse_primitive+0x110>
    switch (js[parser->pos]) {
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4413      	add	r3, r2
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b7d      	cmp	r3, #125	; 0x7d
 8002bf2:	f000 8083 	beq.w	8002cfc <jsmn_parse_primitive+0x12c>
 8002bf6:	2b7d      	cmp	r3, #125	; 0x7d
 8002bf8:	dc58      	bgt.n	8002cac <jsmn_parse_primitive+0xdc>
 8002bfa:	2b5d      	cmp	r3, #93	; 0x5d
 8002bfc:	d07e      	beq.n	8002cfc <jsmn_parse_primitive+0x12c>
 8002bfe:	2b5d      	cmp	r3, #93	; 0x5d
 8002c00:	dc54      	bgt.n	8002cac <jsmn_parse_primitive+0xdc>
 8002c02:	2b2c      	cmp	r3, #44	; 0x2c
 8002c04:	dc50      	bgt.n	8002ca8 <jsmn_parse_primitive+0xd8>
 8002c06:	2b09      	cmp	r3, #9
 8002c08:	db50      	blt.n	8002cac <jsmn_parse_primitive+0xdc>
 8002c0a:	3b09      	subs	r3, #9
 8002c0c:	2b23      	cmp	r3, #35	; 0x23
 8002c0e:	d84d      	bhi.n	8002cac <jsmn_parse_primitive+0xdc>
 8002c10:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <jsmn_parse_primitive+0x48>)
 8002c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c16:	bf00      	nop
 8002c18:	08002cfd 	.word	0x08002cfd
 8002c1c:	08002cfd 	.word	0x08002cfd
 8002c20:	08002cad 	.word	0x08002cad
 8002c24:	08002cad 	.word	0x08002cad
 8002c28:	08002cfd 	.word	0x08002cfd
 8002c2c:	08002cad 	.word	0x08002cad
 8002c30:	08002cad 	.word	0x08002cad
 8002c34:	08002cad 	.word	0x08002cad
 8002c38:	08002cad 	.word	0x08002cad
 8002c3c:	08002cad 	.word	0x08002cad
 8002c40:	08002cad 	.word	0x08002cad
 8002c44:	08002cad 	.word	0x08002cad
 8002c48:	08002cad 	.word	0x08002cad
 8002c4c:	08002cad 	.word	0x08002cad
 8002c50:	08002cad 	.word	0x08002cad
 8002c54:	08002cad 	.word	0x08002cad
 8002c58:	08002cad 	.word	0x08002cad
 8002c5c:	08002cad 	.word	0x08002cad
 8002c60:	08002cad 	.word	0x08002cad
 8002c64:	08002cad 	.word	0x08002cad
 8002c68:	08002cad 	.word	0x08002cad
 8002c6c:	08002cad 	.word	0x08002cad
 8002c70:	08002cad 	.word	0x08002cad
 8002c74:	08002cfd 	.word	0x08002cfd
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002cad 	.word	0x08002cad
 8002c80:	08002cad 	.word	0x08002cad
 8002c84:	08002cad 	.word	0x08002cad
 8002c88:	08002cad 	.word	0x08002cad
 8002c8c:	08002cad 	.word	0x08002cad
 8002c90:	08002cad 	.word	0x08002cad
 8002c94:	08002cad 	.word	0x08002cad
 8002c98:	08002cad 	.word	0x08002cad
 8002c9c:	08002cad 	.word	0x08002cad
 8002ca0:	08002cad 	.word	0x08002cad
 8002ca4:	08002cfd 	.word	0x08002cfd
 8002ca8:	2b3a      	cmp	r3, #58	; 0x3a
 8002caa:	d027      	beq.n	8002cfc <jsmn_parse_primitive+0x12c>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8002cac:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b1f      	cmp	r3, #31
 8002cba:	d906      	bls.n	8002cca <jsmn_parse_primitive+0xfa>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b7e      	cmp	r3, #126	; 0x7e
 8002cc8:	d905      	bls.n	8002cd6 <jsmn_parse_primitive+0x106>
      parser->pos = start;
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8002cd0:	f06f 0301 	mvn.w	r3, #1
 8002cd4:	e03b      	b.n	8002d4e <jsmn_parse_primitive+0x17e>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d90a      	bls.n	8002d00 <jsmn_parse_primitive+0x130>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f af76 	bne.w	8002be6 <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8002cfa:	e001      	b.n	8002d00 <jsmn_parse_primitive+0x130>
      goto found;
 8002cfc:	bf00      	nop
 8002cfe:	e000      	b.n	8002d02 <jsmn_parse_primitive+0x132>
found:
 8002d00:	bf00      	nop
  if (tokens == NULL) {
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d106      	bne.n	8002d16 <jsmn_parse_primitive+0x146>
    parser->pos--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1e5a      	subs	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	601a      	str	r2, [r3, #0]
    return 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e01b      	b.n	8002d4e <jsmn_parse_primitive+0x17e>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002d16:	6a3a      	ldr	r2, [r7, #32]
 8002d18:	6839      	ldr	r1, [r7, #0]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7ff ff15 	bl	8002b4a <jsmn_alloc_token>
 8002d20:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <jsmn_parse_primitive+0x164>
    parser->pos = start;
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8002d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d32:	e00c      	b.n	8002d4e <jsmn_parse_primitive+0x17e>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	2108      	movs	r1, #8
 8002d3c:	6938      	ldr	r0, [r7, #16]
 8002d3e:	f7ff ff2c 	bl	8002b9a <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	1e5a      	subs	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	601a      	str	r2, [r3, #0]
  return 0;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop

08002d58 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002d76:	e0e6      	b.n	8002f46 <jsmn_parse_string+0x1ee>
    char c = js[parser->pos];
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	4413      	add	r3, r2
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	2b22      	cmp	r3, #34	; 0x22
 8002d88:	d11d      	bne.n	8002dc6 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <jsmn_parse_string+0x3c>
        return 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e0ea      	b.n	8002f6a <jsmn_parse_string+0x212>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7ff fed6 	bl	8002b4a <jsmn_alloc_token>
 8002d9e:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d105      	bne.n	8002db2 <jsmn_parse_string+0x5a>
        parser->pos = start;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
 8002db0:	e0db      	b.n	8002f6a <jsmn_parse_string+0x212>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2104      	movs	r1, #4
 8002dbc:	6938      	ldr	r0, [r7, #16]
 8002dbe:	f7ff feec 	bl	8002b9a <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e0d1      	b.n	8002f6a <jsmn_parse_string+0x212>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	2b5c      	cmp	r3, #92	; 0x5c
 8002dca:	f040 80b4 	bne.w	8002f36 <jsmn_parse_string+0x1de>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	f240 80ad 	bls.w	8002f36 <jsmn_parse_string+0x1de>
      int i;
      parser->pos++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	4413      	add	r3, r2
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b75      	cmp	r3, #117	; 0x75
 8002df2:	f300 809a 	bgt.w	8002f2a <jsmn_parse_string+0x1d2>
 8002df6:	2b5c      	cmp	r3, #92	; 0x5c
 8002df8:	da06      	bge.n	8002e08 <jsmn_parse_string+0xb0>
 8002dfa:	2b22      	cmp	r3, #34	; 0x22
 8002dfc:	f000 809d 	beq.w	8002f3a <jsmn_parse_string+0x1e2>
 8002e00:	2b2f      	cmp	r3, #47	; 0x2f
 8002e02:	f000 809a 	beq.w	8002f3a <jsmn_parse_string+0x1e2>
 8002e06:	e090      	b.n	8002f2a <jsmn_parse_string+0x1d2>
 8002e08:	3b5c      	subs	r3, #92	; 0x5c
 8002e0a:	2b19      	cmp	r3, #25
 8002e0c:	f200 808d 	bhi.w	8002f2a <jsmn_parse_string+0x1d2>
 8002e10:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <jsmn_parse_string+0xc0>)
 8002e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e16:	bf00      	nop
 8002e18:	08002f3b 	.word	0x08002f3b
 8002e1c:	08002f2b 	.word	0x08002f2b
 8002e20:	08002f2b 	.word	0x08002f2b
 8002e24:	08002f2b 	.word	0x08002f2b
 8002e28:	08002f2b 	.word	0x08002f2b
 8002e2c:	08002f2b 	.word	0x08002f2b
 8002e30:	08002f3b 	.word	0x08002f3b
 8002e34:	08002f2b 	.word	0x08002f2b
 8002e38:	08002f2b 	.word	0x08002f2b
 8002e3c:	08002f2b 	.word	0x08002f2b
 8002e40:	08002f3b 	.word	0x08002f3b
 8002e44:	08002f2b 	.word	0x08002f2b
 8002e48:	08002f2b 	.word	0x08002f2b
 8002e4c:	08002f2b 	.word	0x08002f2b
 8002e50:	08002f2b 	.word	0x08002f2b
 8002e54:	08002f2b 	.word	0x08002f2b
 8002e58:	08002f2b 	.word	0x08002f2b
 8002e5c:	08002f2b 	.word	0x08002f2b
 8002e60:	08002f3b 	.word	0x08002f3b
 8002e64:	08002f2b 	.word	0x08002f2b
 8002e68:	08002f2b 	.word	0x08002f2b
 8002e6c:	08002f2b 	.word	0x08002f2b
 8002e70:	08002f3b 	.word	0x08002f3b
 8002e74:	08002f2b 	.word	0x08002f2b
 8002e78:	08002f3b 	.word	0x08002f3b
 8002e7c:	08002e81 	.word	0x08002e81
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e037      	b.n	8002f00 <jsmn_parse_string+0x1a8>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	4413      	add	r3, r2
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b2f      	cmp	r3, #47	; 0x2f
 8002e9c:	d906      	bls.n	8002eac <jsmn_parse_string+0x154>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b39      	cmp	r3, #57	; 0x39
 8002eaa:	d921      	bls.n	8002ef0 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d906      	bls.n	8002ec8 <jsmn_parse_string+0x170>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b46      	cmp	r3, #70	; 0x46
 8002ec6:	d913      	bls.n	8002ef0 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4413      	add	r3, r2
 8002ed0:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8002ed2:	2b60      	cmp	r3, #96	; 0x60
 8002ed4:	d906      	bls.n	8002ee4 <jsmn_parse_string+0x18c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	4413      	add	r3, r2
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b66      	cmp	r3, #102	; 0x66
 8002ee2:	d905      	bls.n	8002ef0 <jsmn_parse_string+0x198>
            parser->pos = start;
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8002eea:	f06f 0301 	mvn.w	r3, #1
 8002eee:	e03c      	b.n	8002f6a <jsmn_parse_string+0x212>
          }
          parser->pos++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	601a      	str	r2, [r3, #0]
             i++) {
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3301      	adds	r3, #1
 8002efe:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	dc0b      	bgt.n	8002f1e <jsmn_parse_string+0x1c6>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d906      	bls.n	8002f1e <jsmn_parse_string+0x1c6>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	4413      	add	r3, r2
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1b8      	bne.n	8002e90 <jsmn_parse_string+0x138>
        }
        parser->pos--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	1e5a      	subs	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	601a      	str	r2, [r3, #0]
        break;
 8002f28:	e008      	b.n	8002f3c <jsmn_parse_string+0x1e4>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8002f30:	f06f 0301 	mvn.w	r3, #1
 8002f34:	e019      	b.n	8002f6a <jsmn_parse_string+0x212>
      }
    }
 8002f36:	bf00      	nop
 8002f38:	e000      	b.n	8002f3c <jsmn_parse_string+0x1e4>
        break;
 8002f3a:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d907      	bls.n	8002f60 <jsmn_parse_string+0x208>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	4413      	add	r3, r2
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f47f af0c 	bne.w	8002d78 <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8002f66:	f06f 0302 	mvn.w	r3, #2
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop

08002f74 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08c      	sub	sp, #48	; 0x30
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002f88:	e1bf      	b.n	800330a <jsmn_parse+0x396>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	4413      	add	r3, r2
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8002f96:	7ffb      	ldrb	r3, [r7, #31]
 8002f98:	2b7d      	cmp	r3, #125	; 0x7d
 8002f9a:	f000 80b9 	beq.w	8003110 <jsmn_parse+0x19c>
 8002f9e:	2b7d      	cmp	r3, #125	; 0x7d
 8002fa0:	f300 8181 	bgt.w	80032a6 <jsmn_parse+0x332>
 8002fa4:	2b7b      	cmp	r3, #123	; 0x7b
 8002fa6:	d07c      	beq.n	80030a2 <jsmn_parse+0x12e>
 8002fa8:	2b7b      	cmp	r3, #123	; 0x7b
 8002faa:	f300 817c 	bgt.w	80032a6 <jsmn_parse+0x332>
 8002fae:	2b5d      	cmp	r3, #93	; 0x5d
 8002fb0:	f000 80ae 	beq.w	8003110 <jsmn_parse+0x19c>
 8002fb4:	2b5d      	cmp	r3, #93	; 0x5d
 8002fb6:	f300 8176 	bgt.w	80032a6 <jsmn_parse+0x332>
 8002fba:	2b3a      	cmp	r3, #58	; 0x3a
 8002fbc:	dc6e      	bgt.n	800309c <jsmn_parse+0x128>
 8002fbe:	2b09      	cmp	r3, #9
 8002fc0:	f2c0 8171 	blt.w	80032a6 <jsmn_parse+0x332>
 8002fc4:	3b09      	subs	r3, #9
 8002fc6:	2b31      	cmp	r3, #49	; 0x31
 8002fc8:	f200 816d 	bhi.w	80032a6 <jsmn_parse+0x332>
 8002fcc:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <jsmn_parse+0x60>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	080032eb 	.word	0x080032eb
 8002fd8:	080032eb 	.word	0x080032eb
 8002fdc:	080032a7 	.word	0x080032a7
 8002fe0:	080032a7 	.word	0x080032a7
 8002fe4:	080032eb 	.word	0x080032eb
 8002fe8:	080032a7 	.word	0x080032a7
 8002fec:	080032a7 	.word	0x080032a7
 8002ff0:	080032a7 	.word	0x080032a7
 8002ff4:	080032a7 	.word	0x080032a7
 8002ff8:	080032a7 	.word	0x080032a7
 8002ffc:	080032a7 	.word	0x080032a7
 8003000:	080032a7 	.word	0x080032a7
 8003004:	080032a7 	.word	0x080032a7
 8003008:	080032a7 	.word	0x080032a7
 800300c:	080032a7 	.word	0x080032a7
 8003010:	080032a7 	.word	0x080032a7
 8003014:	080032a7 	.word	0x080032a7
 8003018:	080032a7 	.word	0x080032a7
 800301c:	080032a7 	.word	0x080032a7
 8003020:	080032a7 	.word	0x080032a7
 8003024:	080032a7 	.word	0x080032a7
 8003028:	080032a7 	.word	0x080032a7
 800302c:	080032a7 	.word	0x080032a7
 8003030:	080032eb 	.word	0x080032eb
 8003034:	080032a7 	.word	0x080032a7
 8003038:	080031c5 	.word	0x080031c5
 800303c:	080032a7 	.word	0x080032a7
 8003040:	080032a7 	.word	0x080032a7
 8003044:	080032a7 	.word	0x080032a7
 8003048:	080032a7 	.word	0x080032a7
 800304c:	080032a7 	.word	0x080032a7
 8003050:	080032a7 	.word	0x080032a7
 8003054:	080032a7 	.word	0x080032a7
 8003058:	080032a7 	.word	0x080032a7
 800305c:	080032a7 	.word	0x080032a7
 8003060:	08003219 	.word	0x08003219
 8003064:	080032a7 	.word	0x080032a7
 8003068:	080032a7 	.word	0x080032a7
 800306c:	080032a7 	.word	0x080032a7
 8003070:	080032a7 	.word	0x080032a7
 8003074:	080032a7 	.word	0x080032a7
 8003078:	080032a7 	.word	0x080032a7
 800307c:	080032a7 	.word	0x080032a7
 8003080:	080032a7 	.word	0x080032a7
 8003084:	080032a7 	.word	0x080032a7
 8003088:	080032a7 	.word	0x080032a7
 800308c:	080032a7 	.word	0x080032a7
 8003090:	080032a7 	.word	0x080032a7
 8003094:	080032a7 	.word	0x080032a7
 8003098:	0800320b 	.word	0x0800320b
 800309c:	2b5b      	cmp	r3, #91	; 0x5b
 800309e:	f040 8102 	bne.w	80032a6 <jsmn_parse+0x332>
    case '{':
    case '[':
      count++;
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	3301      	adds	r3, #1
 80030a6:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 811f 	beq.w	80032ee <jsmn_parse+0x37a>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 80030b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b2:	6839      	ldr	r1, [r7, #0]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fd48 	bl	8002b4a <jsmn_alloc_token>
 80030ba:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <jsmn_parse+0x154>
        return JSMN_ERROR_NOMEM;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	e14f      	b.n	8003368 <jsmn_parse+0x3f4>
      }
      if (parser->toksuper != -1) {
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d00a      	beq.n	80030e8 <jsmn_parse+0x174>
        jsmntok_t *t = &tokens[parser->toksuper];
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80030e8:	7ffb      	ldrb	r3, [r7, #31]
 80030ea:	2b7b      	cmp	r3, #123	; 0x7b
 80030ec:	d101      	bne.n	80030f2 <jsmn_parse+0x17e>
 80030ee:	2201      	movs	r2, #1
 80030f0:	e000      	b.n	80030f4 <jsmn_parse+0x180>
 80030f2:	2202      	movs	r2, #2
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	461a      	mov	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	609a      	str	r2, [r3, #8]
      break;
 800310e:	e0f7      	b.n	8003300 <jsmn_parse+0x38c>
    case '}':
    case ']':
      if (tokens == NULL) {
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80ed 	beq.w	80032f2 <jsmn_parse+0x37e>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8003118:	7ffb      	ldrb	r3, [r7, #31]
 800311a:	2b7d      	cmp	r3, #125	; 0x7d
 800311c:	d101      	bne.n	8003122 <jsmn_parse+0x1ae>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <jsmn_parse+0x1b0>
 8003122:	2302      	movs	r3, #2
 8003124:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	e024      	b.n	800317a <jsmn_parse+0x206>
        token = &tokens[i];
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	4413      	add	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d017      	beq.n	8003174 <jsmn_parse+0x200>
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d112      	bne.n	8003174 <jsmn_parse+0x200>
          if (token->type != type) {
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	7fba      	ldrb	r2, [r7, #30]
 8003154:	429a      	cmp	r2, r3
 8003156:	d002      	beq.n	800315e <jsmn_parse+0x1ea>
            return JSMN_ERROR_INVAL;
 8003158:	f06f 0301 	mvn.w	r3, #1
 800315c:	e104      	b.n	8003368 <jsmn_parse+0x3f4>
          }
          parser->toksuper = -1;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
 8003164:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	461a      	mov	r2, r3
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	609a      	str	r2, [r3, #8]
          break;
 8003172:	e005      	b.n	8003180 <jsmn_parse+0x20c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	3b01      	subs	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	dad7      	bge.n	8003130 <jsmn_parse+0x1bc>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d119      	bne.n	80031bc <jsmn_parse+0x248>
        return JSMN_ERROR_INVAL;
 8003188:	f06f 0301 	mvn.w	r3, #1
 800318c:	e0ec      	b.n	8003368 <jsmn_parse+0x3f4>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	4413      	add	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d009      	beq.n	80031b6 <jsmn_parse+0x242>
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d104      	bne.n	80031b6 <jsmn_parse+0x242>
          parser->toksuper = i;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b0:	609a      	str	r2, [r3, #8]
          break;
 80031b2:	bf00      	nop
        }
      }
#endif
      break;
 80031b4:	e0a4      	b.n	8003300 <jsmn_parse+0x38c>
      for (; i >= 0; i--) {
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	3b01      	subs	r3, #1
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	dae5      	bge.n	800318e <jsmn_parse+0x21a>
      break;
 80031c2:	e09d      	b.n	8003300 <jsmn_parse+0x38c>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7ff fdc2 	bl	8002d58 <jsmn_parse_string>
 80031d4:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	da01      	bge.n	80031e0 <jsmn_parse+0x26c>
        return r;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	e0c3      	b.n	8003368 <jsmn_parse+0x3f4>
      }
      count++;
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	3301      	adds	r3, #1
 80031e4:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ee:	f000 8082 	beq.w	80032f6 <jsmn_parse+0x382>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d07e      	beq.n	80032f6 <jsmn_parse+0x382>
        tokens[parser->toksuper].size++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	4413      	add	r3, r2
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	3201      	adds	r2, #1
 8003206:	60da      	str	r2, [r3, #12]
      }
      break;
 8003208:	e075      	b.n	80032f6 <jsmn_parse+0x382>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	461a      	mov	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	609a      	str	r2, [r3, #8]
      break;
 8003216:	e073      	b.n	8003300 <jsmn_parse+0x38c>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d06d      	beq.n	80032fa <jsmn_parse+0x386>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003226:	d068      	beq.n	80032fa <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	4413      	add	r3, r2
 8003232:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8003234:	2b02      	cmp	r3, #2
 8003236:	d060      	beq.n	80032fa <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	4413      	add	r3, r2
 8003242:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8003244:	2b01      	cmp	r3, #1
 8003246:	d058      	beq.n	80032fa <jsmn_parse+0x386>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	3b01      	subs	r3, #1
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
 8003250:	e025      	b.n	800329e <jsmn_parse+0x32a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	4413      	add	r3, r2
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d006      	beq.n	800326e <jsmn_parse+0x2fa>
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	4413      	add	r3, r2
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d114      	bne.n	8003298 <jsmn_parse+0x324>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	4413      	add	r3, r2
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d00c      	beq.n	8003298 <jsmn_parse+0x324>
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	4413      	add	r3, r2
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d104      	bne.n	8003298 <jsmn_parse+0x324>
              parser->toksuper = i;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003292:	609a      	str	r2, [r3, #8]
              break;
 8003294:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8003296:	e030      	b.n	80032fa <jsmn_parse+0x386>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	3b01      	subs	r3, #1
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	dad6      	bge.n	8003252 <jsmn_parse+0x2de>
      break;
 80032a4:	e029      	b.n	80032fa <jsmn_parse+0x386>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f7ff fc8d 	bl	8002bd0 <jsmn_parse_primitive>
 80032b6:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	da01      	bge.n	80032c2 <jsmn_parse+0x34e>
        return r;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	e052      	b.n	8003368 <jsmn_parse+0x3f4>
      }
      count++;
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	3301      	adds	r3, #1
 80032c6:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d015      	beq.n	80032fe <jsmn_parse+0x38a>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d012      	beq.n	80032fe <jsmn_parse+0x38a>
        tokens[parser->toksuper].size++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	4413      	add	r3, r2
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	3201      	adds	r2, #1
 80032e6:	60da      	str	r2, [r3, #12]
      }
      break;
 80032e8:	e009      	b.n	80032fe <jsmn_parse+0x38a>
      break;
 80032ea:	bf00      	nop
 80032ec:	e008      	b.n	8003300 <jsmn_parse+0x38c>
        break;
 80032ee:	bf00      	nop
 80032f0:	e006      	b.n	8003300 <jsmn_parse+0x38c>
        break;
 80032f2:	bf00      	nop
 80032f4:	e004      	b.n	8003300 <jsmn_parse+0x38c>
      break;
 80032f6:	bf00      	nop
 80032f8:	e002      	b.n	8003300 <jsmn_parse+0x38c>
      break;
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <jsmn_parse+0x38c>
      break;
 80032fe:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d907      	bls.n	8003324 <jsmn_parse+0x3b0>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f47f ae33 	bne.w	8002f8a <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01d      	beq.n	8003366 <jsmn_parse+0x3f2>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	e015      	b.n	8003360 <jsmn_parse+0x3ec>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	4413      	add	r3, r2
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003342:	d00a      	beq.n	800335a <jsmn_parse+0x3e6>
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	4413      	add	r3, r2
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d102      	bne.n	800335a <jsmn_parse+0x3e6>
        return JSMN_ERROR_PART;
 8003354:	f06f 0302 	mvn.w	r3, #2
 8003358:	e006      	b.n	8003368 <jsmn_parse+0x3f4>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	3b01      	subs	r3, #1
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	2b00      	cmp	r3, #0
 8003364:	dae6      	bge.n	8003334 <jsmn_parse+0x3c0>
      }
    }
  }

  return count;
 8003366:	6a3b      	ldr	r3, [r7, #32]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3728      	adds	r7, #40	; 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f04f 32ff 	mov.w	r2, #4294967295
 800338a:	609a      	str	r2, [r3, #8]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <jsoneq>:
static void *valid_connection;
//static char last_user[USER_PASS_BUFSIZE];

char buf_data[USER_PASS_BUFSIZE];

static int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d11e      	bne.n	80033ea <jsoneq+0x52>
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7fc ff39 	bl	8000224 <strlen>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4619      	mov	r1, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	4299      	cmp	r1, r3
 80033c2:	d112      	bne.n	80033ea <jsoneq+0x52>
			strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	461a      	mov	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1898      	adds	r0, r3, r2
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	f017 fdc3 	bl	801af66 <strncmp>
 80033e0:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <jsoneq+0x52>
		return 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e001      	b.n	80033ee <jsoneq+0x56>
	}
	return -1;
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <httpd_post_begin>:
err_t
httpd_post_begin(void *connection, const char *uri, const char *http_request, u16_t http_request_len, int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	807b      	strh	r3, [r7, #2]
	memset(buf_data,0,sizeof(buf_data));
 8003406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800340a:	2100      	movs	r1, #0
 800340c:	4813      	ldr	r0, [pc, #76]	; (800345c <httpd_post_begin+0x64>)
 800340e:	f017 fa93 	bl	801a938 <memset>
	LWIP_UNUSED_ARG(connection);
	LWIP_UNUSED_ARG(http_request);
	LWIP_UNUSED_ARG(http_request_len);
	LWIP_UNUSED_ARG(content_len);
	LWIP_UNUSED_ARG(post_auto_wnd);
	if (!memcmp(uri, "/info.html", 10)) {
 8003412:	220a      	movs	r2, #10
 8003414:	4912      	ldr	r1, [pc, #72]	; (8003460 <httpd_post_begin+0x68>)
 8003416:	68b8      	ldr	r0, [r7, #8]
 8003418:	f017 fa58 	bl	801a8cc <memcmp>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d115      	bne.n	800344e <httpd_post_begin+0x56>
		if (current_connection != connection) {
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <httpd_post_begin+0x6c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	429a      	cmp	r2, r3
 800342a:	d010      	beq.n	800344e <httpd_post_begin+0x56>
			current_connection = connection;
 800342c:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <httpd_post_begin+0x6c>)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6013      	str	r3, [r2, #0]
			valid_connection = NULL;
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <httpd_post_begin+0x70>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
			/* default page is "login failed" */
			snprintf(response_uri, response_uri_len, "/info.html");
 8003438:	8c3b      	ldrh	r3, [r7, #32]
 800343a:	4a09      	ldr	r2, [pc, #36]	; (8003460 <httpd_post_begin+0x68>)
 800343c:	4619      	mov	r1, r3
 800343e:	69f8      	ldr	r0, [r7, #28]
 8003440:	f017 fd30 	bl	801aea4 <snprintf>
			/* e.g. for large uploads to slow flash over a fast connection, you should
         manually update the rx window. That way, a sender can only send a full
         tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
         We do not need to throttle upload speed here, so: */
			*post_auto_wnd = 1;
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
			return ERR_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e001      	b.n	8003452 <httpd_post_begin+0x5a>
		}
	}
	return ERR_VAL;
 800344e:	f06f 0305 	mvn.w	r3, #5
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000533c 	.word	0x2000533c
 8003460:	08023cd8 	.word	0x08023cd8
 8003464:	20000d04 	.word	0x20000d04
 8003468:	20000d08 	.word	0x20000d08

0800346c <httpd_post_receive_data>:

err_t
httpd_post_receive_data(void *connection, struct pbuf *p)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8003472:	af02      	add	r7, sp, #8
 8003474:	4b85      	ldr	r3, [pc, #532]	; (800368c <httpd_post_receive_data+0x220>)
 8003476:	f242 0238 	movw	r2, #8248	; 0x2038
 800347a:	443a      	add	r2, r7
 800347c:	4413      	add	r3, r2
 800347e:	6018      	str	r0, [r3, #0]
 8003480:	4b83      	ldr	r3, [pc, #524]	; (8003690 <httpd_post_receive_data+0x224>)
 8003482:	f242 0238 	movw	r2, #8248	; 0x2038
 8003486:	443a      	add	r2, r7
 8003488:	4413      	add	r3, r2
 800348a:	6019      	str	r1, [r3, #0]
	err_t ret;

	LWIP_ASSERT("NULL pbuf", p != NULL);
 800348c:	4b80      	ldr	r3, [pc, #512]	; (8003690 <httpd_post_receive_data+0x224>)
 800348e:	f242 0238 	movw	r2, #8248	; 0x2038
 8003492:	443a      	add	r2, r7
 8003494:	4413      	add	r3, r2
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <httpd_post_receive_data+0x3c>
 800349c:	4b7d      	ldr	r3, [pc, #500]	; (8003694 <httpd_post_receive_data+0x228>)
 800349e:	2235      	movs	r2, #53	; 0x35
 80034a0:	497d      	ldr	r1, [pc, #500]	; (8003698 <httpd_post_receive_data+0x22c>)
 80034a2:	487e      	ldr	r0, [pc, #504]	; (800369c <httpd_post_receive_data+0x230>)
 80034a4:	f017 fcce 	bl	801ae44 <printf>
	strncpy(buf_data, p->payload, p->len);
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <httpd_post_receive_data+0x224>)
 80034aa:	f242 0238 	movw	r2, #8248	; 0x2038
 80034ae:	443a      	add	r2, r7
 80034b0:	4413      	add	r3, r2
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	4b76      	ldr	r3, [pc, #472]	; (8003690 <httpd_post_receive_data+0x224>)
 80034b8:	f242 0238 	movw	r2, #8248	; 0x2038
 80034bc:	443a      	add	r2, r7
 80034be:	4413      	add	r3, r2
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	895b      	ldrh	r3, [r3, #10]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4876      	ldr	r0, [pc, #472]	; (80036a0 <httpd_post_receive_data+0x234>)
 80034c8:	f017 fd5f 	bl	801af8a <strncpy>
	if (current_connection == connection) {
 80034cc:	4b75      	ldr	r3, [pc, #468]	; (80036a4 <httpd_post_receive_data+0x238>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b6e      	ldr	r3, [pc, #440]	; (800368c <httpd_post_receive_data+0x220>)
 80034d2:	f242 0138 	movw	r1, #8248	; 0x2038
 80034d6:	4439      	add	r1, r7
 80034d8:	440b      	add	r3, r1
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4293      	cmp	r3, r2
 80034de:	f040 8185 	bne.w	80037ec <httpd_post_receive_data+0x380>
		jsmn_parser parser;
		jsmntok_t t[512]; /* We expect no more than 512 JSON tokens */
		jsmn_init(&parser);
 80034e2:	f242 0308 	movw	r3, #8200	; 0x2008
 80034e6:	443b      	add	r3, r7
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff41 	bl	8003370 <jsmn_init>

		int tokens = jsmn_parse(&parser, buf_data, strlen(buf_data), t, 128);
 80034ee:	486c      	ldr	r0, [pc, #432]	; (80036a0 <httpd_post_receive_data+0x234>)
 80034f0:	f7fc fe98 	bl	8000224 <strlen>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <httpd_post_receive_data+0x23c>)
 80034f8:	f242 0138 	movw	r1, #8248	; 0x2038
 80034fc:	4439      	add	r1, r7
 80034fe:	440b      	add	r3, r1
 8003500:	f242 0008 	movw	r0, #8200	; 0x2008
 8003504:	4438      	add	r0, r7
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	9100      	str	r1, [sp, #0]
 800350a:	4965      	ldr	r1, [pc, #404]	; (80036a0 <httpd_post_receive_data+0x234>)
 800350c:	f7ff fd32 	bl	8002f74 <jsmn_parse>
 8003510:	f242 032c 	movw	r3, #8236	; 0x202c
 8003514:	443b      	add	r3, r7
 8003516:	6018      	str	r0, [r3, #0]
		for (int i = 0; i<tokens; i++){
 8003518:	2300      	movs	r3, #0
 800351a:	f242 0230 	movw	r2, #8240	; 0x2030
 800351e:	443a      	add	r2, r7
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e152      	b.n	80037ca <httpd_post_receive_data+0x35e>
			if (jsoneq(buf_data, &t[i], "IPaddress") == 0) {
 8003524:	4b60      	ldr	r3, [pc, #384]	; (80036a8 <httpd_post_receive_data+0x23c>)
 8003526:	f242 0238 	movw	r2, #8248	; 0x2038
 800352a:	443a      	add	r2, r7
 800352c:	4413      	add	r3, r2
 800352e:	f242 0230 	movw	r2, #8240	; 0x2030
 8003532:	443a      	add	r2, r7
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	0112      	lsls	r2, r2, #4
 8003538:	4413      	add	r3, r2
 800353a:	4a5c      	ldr	r2, [pc, #368]	; (80036ac <httpd_post_receive_data+0x240>)
 800353c:	4619      	mov	r1, r3
 800353e:	4858      	ldr	r0, [pc, #352]	; (80036a0 <httpd_post_receive_data+0x234>)
 8003540:	f7ff ff2a 	bl	8003398 <jsoneq>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d16c      	bne.n	8003624 <httpd_post_receive_data+0x1b8>
				buf_data[t[i+1].end] = '\0';
 800354a:	f242 0330 	movw	r3, #8240	; 0x2030
 800354e:	443b      	add	r3, r7
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	4b54      	ldr	r3, [pc, #336]	; (80036a8 <httpd_post_receive_data+0x23c>)
 8003556:	f242 0138 	movw	r1, #8248	; 0x2038
 800355a:	4439      	add	r1, r7
 800355c:	440b      	add	r3, r1
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	4413      	add	r3, r2
 8003562:	3308      	adds	r3, #8
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a4e      	ldr	r2, [pc, #312]	; (80036a0 <httpd_post_receive_data+0x234>)
 8003568:	2100      	movs	r1, #0
 800356a:	54d1      	strb	r1, [r2, r3]
				memset(user_info.ip,0,16);
 800356c:	2210      	movs	r2, #16
 800356e:	2100      	movs	r1, #0
 8003570:	484f      	ldr	r0, [pc, #316]	; (80036b0 <httpd_post_receive_data+0x244>)
 8003572:	f017 f9e1 	bl	801a938 <memset>
				int len = mymin(16,t[i+1].end-t[i+1].start);
 8003576:	2310      	movs	r3, #16
 8003578:	f242 021c 	movw	r2, #8220	; 0x201c
 800357c:	443a      	add	r2, r7
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	f242 0330 	movw	r3, #8240	; 0x2030
 8003584:	443b      	add	r3, r7
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <httpd_post_receive_data+0x23c>)
 800358c:	f242 0138 	movw	r1, #8248	; 0x2038
 8003590:	4439      	add	r1, r7
 8003592:	440b      	add	r3, r1
 8003594:	0112      	lsls	r2, r2, #4
 8003596:	4413      	add	r3, r2
 8003598:	3308      	adds	r3, #8
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	f242 0330 	movw	r3, #8240	; 0x2030
 80035a0:	443b      	add	r3, r7
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	1c59      	adds	r1, r3, #1
 80035a6:	4b40      	ldr	r3, [pc, #256]	; (80036a8 <httpd_post_receive_data+0x23c>)
 80035a8:	f242 0038 	movw	r0, #8248	; 0x2038
 80035ac:	4438      	add	r0, r7
 80035ae:	4403      	add	r3, r0
 80035b0:	0109      	lsls	r1, r1, #4
 80035b2:	440b      	add	r3, r1
 80035b4:	3304      	adds	r3, #4
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f242 0218 	movw	r2, #8216	; 0x2018
 80035be:	443a      	add	r2, r7
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	f242 0318 	movw	r3, #8216	; 0x2018
 80035c6:	443b      	add	r3, r7
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	f242 031c 	movw	r3, #8220	; 0x201c
 80035ce:	443b      	add	r3, r7
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4293      	cmp	r3, r2
 80035d4:	bfa8      	it	ge
 80035d6:	4613      	movge	r3, r2
 80035d8:	f242 0214 	movw	r2, #8212	; 0x2014
 80035dc:	443a      	add	r2, r7
 80035de:	6013      	str	r3, [r2, #0]
				strncpy(user_info.ip,&buf_data[t[i+1].start],len);
 80035e0:	f242 0330 	movw	r3, #8240	; 0x2030
 80035e4:	443b      	add	r3, r7
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <httpd_post_receive_data+0x23c>)
 80035ec:	f242 0138 	movw	r1, #8248	; 0x2038
 80035f0:	4439      	add	r1, r7
 80035f2:	440b      	add	r3, r1
 80035f4:	0112      	lsls	r2, r2, #4
 80035f6:	4413      	add	r3, r2
 80035f8:	3304      	adds	r3, #4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a28      	ldr	r2, [pc, #160]	; (80036a0 <httpd_post_receive_data+0x234>)
 80035fe:	4413      	add	r3, r2
 8003600:	f242 0214 	movw	r2, #8212	; 0x2014
 8003604:	443a      	add	r2, r7
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	4829      	ldr	r0, [pc, #164]	; (80036b0 <httpd_post_receive_data+0x244>)
 800360c:	f017 fcbd 	bl	801af8a <strncpy>
				i++;
 8003610:	f242 0330 	movw	r3, #8240	; 0x2030
 8003614:	443b      	add	r3, r7
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	f242 0230 	movw	r2, #8240	; 0x2030
 800361e:	443a      	add	r2, r7
 8003620:	6013      	str	r3, [r2, #0]
				continue;
 8003622:	e0c9      	b.n	80037b8 <httpd_post_receive_data+0x34c>
			}
			if (jsoneq(buf_data, &t[i], "Timezone") == 0) {
 8003624:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <httpd_post_receive_data+0x23c>)
 8003626:	f242 0238 	movw	r2, #8248	; 0x2038
 800362a:	443a      	add	r2, r7
 800362c:	4413      	add	r3, r2
 800362e:	f242 0230 	movw	r2, #8240	; 0x2030
 8003632:	443a      	add	r2, r7
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	0112      	lsls	r2, r2, #4
 8003638:	4413      	add	r3, r2
 800363a:	4a1e      	ldr	r2, [pc, #120]	; (80036b4 <httpd_post_receive_data+0x248>)
 800363c:	4619      	mov	r1, r3
 800363e:	4818      	ldr	r0, [pc, #96]	; (80036a0 <httpd_post_receive_data+0x234>)
 8003640:	f7ff feaa 	bl	8003398 <jsoneq>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d136      	bne.n	80036b8 <httpd_post_receive_data+0x24c>
				user_info.zone = atoi(&buf_data[t[i+1].start]);
 800364a:	f242 0330 	movw	r3, #8240	; 0x2030
 800364e:	443b      	add	r3, r7
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <httpd_post_receive_data+0x23c>)
 8003656:	f242 0138 	movw	r1, #8248	; 0x2038
 800365a:	4439      	add	r1, r7
 800365c:	440b      	add	r3, r1
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	4413      	add	r3, r2
 8003662:	3304      	adds	r3, #4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <httpd_post_receive_data+0x234>)
 8003668:	4413      	add	r3, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f017 f810 	bl	801a690 <atoi>
 8003670:	4603      	mov	r3, r0
 8003672:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <httpd_post_receive_data+0x244>)
 8003674:	6113      	str	r3, [r2, #16]
				i++;
 8003676:	f242 0330 	movw	r3, #8240	; 0x2030
 800367a:	443b      	add	r3, r7
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3301      	adds	r3, #1
 8003680:	f242 0230 	movw	r2, #8240	; 0x2030
 8003684:	443a      	add	r2, r7
 8003686:	6013      	str	r3, [r2, #0]
				continue;
 8003688:	e096      	b.n	80037b8 <httpd_post_receive_data+0x34c>
 800368a:	bf00      	nop
 800368c:	ffffdfcc 	.word	0xffffdfcc
 8003690:	ffffdfc8 	.word	0xffffdfc8
 8003694:	08023ce4 	.word	0x08023ce4
 8003698:	08023cfc 	.word	0x08023cfc
 800369c:	08023d08 	.word	0x08023d08
 80036a0:	2000533c 	.word	0x2000533c
 80036a4:	20000d04 	.word	0x20000d04
 80036a8:	ffffdfd0 	.word	0xffffdfd0
 80036ac:	08023d30 	.word	0x08023d30
 80036b0:	20005150 	.word	0x20005150
 80036b4:	08023d3c 	.word	0x08023d3c
			}
			if (jsoneq(buf_data, &t[i], "contacts") == 0) {
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <httpd_post_receive_data+0x3b0>)
 80036ba:	f242 0238 	movw	r2, #8248	; 0x2038
 80036be:	443a      	add	r2, r7
 80036c0:	4413      	add	r3, r2
 80036c2:	f242 0230 	movw	r2, #8240	; 0x2030
 80036c6:	443a      	add	r2, r7
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	0112      	lsls	r2, r2, #4
 80036cc:	4413      	add	r3, r2
 80036ce:	4a54      	ldr	r2, [pc, #336]	; (8003820 <httpd_post_receive_data+0x3b4>)
 80036d0:	4619      	mov	r1, r3
 80036d2:	4854      	ldr	r0, [pc, #336]	; (8003824 <httpd_post_receive_data+0x3b8>)
 80036d4:	f7ff fe60 	bl	8003398 <jsoneq>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d16c      	bne.n	80037b8 <httpd_post_receive_data+0x34c>
				memset(user_info.contacts,0,INFOLEN);
 80036de:	22ff      	movs	r2, #255	; 0xff
 80036e0:	2100      	movs	r1, #0
 80036e2:	4851      	ldr	r0, [pc, #324]	; (8003828 <httpd_post_receive_data+0x3bc>)
 80036e4:	f017 f928 	bl	801a938 <memset>
				buf_data[t[i+1].end] = '\0';
 80036e8:	f242 0330 	movw	r3, #8240	; 0x2030
 80036ec:	443b      	add	r3, r7
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	4b4a      	ldr	r3, [pc, #296]	; (800381c <httpd_post_receive_data+0x3b0>)
 80036f4:	f242 0138 	movw	r1, #8248	; 0x2038
 80036f8:	4439      	add	r1, r7
 80036fa:	440b      	add	r3, r1
 80036fc:	0112      	lsls	r2, r2, #4
 80036fe:	4413      	add	r3, r2
 8003700:	3308      	adds	r3, #8
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a47      	ldr	r2, [pc, #284]	; (8003824 <httpd_post_receive_data+0x3b8>)
 8003706:	2100      	movs	r1, #0
 8003708:	54d1      	strb	r1, [r2, r3]
				int len = mymin(INFOLEN,t[i+1].end-t[i+1].start);
 800370a:	23ff      	movs	r3, #255	; 0xff
 800370c:	f242 0228 	movw	r2, #8232	; 0x2028
 8003710:	443a      	add	r2, r7
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	f242 0330 	movw	r3, #8240	; 0x2030
 8003718:	443b      	add	r3, r7
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	4b3f      	ldr	r3, [pc, #252]	; (800381c <httpd_post_receive_data+0x3b0>)
 8003720:	f242 0138 	movw	r1, #8248	; 0x2038
 8003724:	4439      	add	r1, r7
 8003726:	440b      	add	r3, r1
 8003728:	0112      	lsls	r2, r2, #4
 800372a:	4413      	add	r3, r2
 800372c:	3308      	adds	r3, #8
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	f242 0330 	movw	r3, #8240	; 0x2030
 8003734:	443b      	add	r3, r7
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	1c59      	adds	r1, r3, #1
 800373a:	4b38      	ldr	r3, [pc, #224]	; (800381c <httpd_post_receive_data+0x3b0>)
 800373c:	f242 0038 	movw	r0, #8248	; 0x2038
 8003740:	4438      	add	r0, r7
 8003742:	4403      	add	r3, r0
 8003744:	0109      	lsls	r1, r1, #4
 8003746:	440b      	add	r3, r1
 8003748:	3304      	adds	r3, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f242 0224 	movw	r2, #8228	; 0x2024
 8003752:	443a      	add	r2, r7
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	f242 0324 	movw	r3, #8228	; 0x2024
 800375a:	443b      	add	r3, r7
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f242 0328 	movw	r3, #8232	; 0x2028
 8003762:	443b      	add	r3, r7
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4293      	cmp	r3, r2
 8003768:	bfa8      	it	ge
 800376a:	4613      	movge	r3, r2
 800376c:	f242 0220 	movw	r2, #8224	; 0x2020
 8003770:	443a      	add	r2, r7
 8003772:	6013      	str	r3, [r2, #0]
				strncpy(user_info.contacts,&buf_data[t[i+1].start],len);
 8003774:	f242 0330 	movw	r3, #8240	; 0x2030
 8003778:	443b      	add	r3, r7
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	4b27      	ldr	r3, [pc, #156]	; (800381c <httpd_post_receive_data+0x3b0>)
 8003780:	f242 0138 	movw	r1, #8248	; 0x2038
 8003784:	4439      	add	r1, r7
 8003786:	440b      	add	r3, r1
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	4413      	add	r3, r2
 800378c:	3304      	adds	r3, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a24      	ldr	r2, [pc, #144]	; (8003824 <httpd_post_receive_data+0x3b8>)
 8003792:	4413      	add	r3, r2
 8003794:	f242 0220 	movw	r2, #8224	; 0x2020
 8003798:	443a      	add	r2, r7
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	4619      	mov	r1, r3
 800379e:	4822      	ldr	r0, [pc, #136]	; (8003828 <httpd_post_receive_data+0x3bc>)
 80037a0:	f017 fbf3 	bl	801af8a <strncpy>
				i++;
 80037a4:	f242 0330 	movw	r3, #8240	; 0x2030
 80037a8:	443b      	add	r3, r7
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	f242 0230 	movw	r2, #8240	; 0x2030
 80037b2:	443a      	add	r2, r7
 80037b4:	6013      	str	r3, [r2, #0]
				continue;
 80037b6:	bf00      	nop
		for (int i = 0; i<tokens; i++){
 80037b8:	f242 0330 	movw	r3, #8240	; 0x2030
 80037bc:	443b      	add	r3, r7
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	f242 0230 	movw	r2, #8240	; 0x2030
 80037c6:	443a      	add	r2, r7
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	f242 0330 	movw	r3, #8240	; 0x2030
 80037ce:	443b      	add	r3, r7
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	f242 032c 	movw	r3, #8236	; 0x202c
 80037d6:	443b      	add	r3, r7
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	f6ff aea2 	blt.w	8003524 <httpd_post_receive_data+0xb8>
			}
		}
		/* not returning ERR_OK aborts the connection, so return ERR_OK unless the
       connection is unknown */
		ret = ERR_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f242 0237 	movw	r2, #8247	; 0x2037
 80037e6:	443a      	add	r2, r7
 80037e8:	7013      	strb	r3, [r2, #0]
 80037ea:	e004      	b.n	80037f6 <httpd_post_receive_data+0x38a>
	} else {
		ret = ERR_VAL;
 80037ec:	23fa      	movs	r3, #250	; 0xfa
 80037ee:	f242 0237 	movw	r2, #8247	; 0x2037
 80037f2:	443a      	add	r2, r7
 80037f4:	7013      	strb	r3, [r2, #0]
	}

	/* this function must ALWAYS free the pbuf it is passed or it will leak memory */
	pbuf_free(p);
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <httpd_post_receive_data+0x3c0>)
 80037f8:	f242 0238 	movw	r2, #8248	; 0x2038
 80037fc:	443a      	add	r2, r7
 80037fe:	4413      	add	r3, r2
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	f00d f8e3 	bl	80109cc <pbuf_free>

	return ret;
 8003806:	f242 0337 	movw	r3, #8247	; 0x2037
 800380a:	443b      	add	r3, r7
 800380c:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003810:	4618      	mov	r0, r3
 8003812:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8003816:	3738      	adds	r7, #56	; 0x38
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	ffffdfd0 	.word	0xffffdfd0
 8003820:	08023d48 	.word	0x08023d48
 8003824:	2000533c 	.word	0x2000533c
 8003828:	20005164 	.word	0x20005164
 800382c:	ffffdfc8 	.word	0xffffdfc8

08003830 <httpd_post_finished>:

void
httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	80fb      	strh	r3, [r7, #6]
	/* default page is "login failed" */
	snprintf(response_uri, response_uri_len, "/404.html");
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	4a0f      	ldr	r2, [pc, #60]	; (8003880 <httpd_post_finished+0x50>)
 8003842:	4619      	mov	r1, r3
 8003844:	68b8      	ldr	r0, [r7, #8]
 8003846:	f017 fb2d 	bl	801aea4 <snprintf>
	if (current_connection == connection) {
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <httpd_post_finished+0x54>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	429a      	cmp	r2, r3
 8003852:	d110      	bne.n	8003876 <httpd_post_finished+0x46>
		if (valid_connection == connection) {
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <httpd_post_finished+0x58>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	429a      	cmp	r2, r3
 800385c:	d105      	bne.n	800386a <httpd_post_finished+0x3a>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/info.html");
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	4a0a      	ldr	r2, [pc, #40]	; (800388c <httpd_post_finished+0x5c>)
 8003862:	4619      	mov	r1, r3
 8003864:	68b8      	ldr	r0, [r7, #8]
 8003866:	f017 fb1d 	bl	801aea4 <snprintf>
		}
		current_connection = NULL;
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <httpd_post_finished+0x54>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <httpd_post_finished+0x58>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
	}
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	08023d54 	.word	0x08023d54
 8003884:	20000d04 	.word	0x20000d04
 8003888:	20000d08 	.word	0x20000d08
 800388c:	08023cd8 	.word	0x08023cd8

08003890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	4b11      	ldr	r3, [pc, #68]	; (80038dc <HAL_MspInit+0x4c>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <HAL_MspInit+0x4c>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	; 0x40
 80038a2:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <HAL_MspInit+0x4c>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_MspInit+0x4c>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <HAL_MspInit+0x4c>)
 80038b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <HAL_MspInit+0x4c>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80038c6:	2200      	movs	r2, #0
 80038c8:	210f      	movs	r1, #15
 80038ca:	f06f 0001 	mvn.w	r0, #1
 80038ce:	f000 fb2f 	bl	8003f30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800

080038e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a07      	ldr	r2, [pc, #28]	; (800390c <HAL_RTC_MspInit+0x2c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d105      	bne.n	80038fe <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038f2:	4b07      	ldr	r3, [pc, #28]	; (8003910 <HAL_RTC_MspInit+0x30>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a06      	ldr	r2, [pc, #24]	; (8003910 <HAL_RTC_MspInit+0x30>)
 80038f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40002800 	.word	0x40002800
 8003910:	40023800 	.word	0x40023800

08003914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08c      	sub	sp, #48	; 0x30
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	f107 031c 	add.w	r3, r7, #28
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a36      	ldr	r2, [pc, #216]	; (8003a0c <HAL_UART_MspInit+0xf8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d130      	bne.n	8003998 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003936:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	4a35      	ldr	r2, [pc, #212]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 800393c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003940:	6413      	str	r3, [r2, #64]	; 0x40
 8003942:	4b33      	ldr	r3, [pc, #204]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800394e:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a2f      	ldr	r2, [pc, #188]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 8003954:	f043 0320 	orr.w	r3, r3, #32
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003966:	23c0      	movs	r3, #192	; 0xc0
 8003968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396a:	2302      	movs	r3, #2
 800396c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003972:	2303      	movs	r3, #3
 8003974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003976:	2308      	movs	r3, #8
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800397a:	f107 031c 	add.w	r3, r7, #28
 800397e:	4619      	mov	r1, r3
 8003980:	4824      	ldr	r0, [pc, #144]	; (8003a14 <HAL_UART_MspInit+0x100>)
 8003982:	f001 fb81 	bl	8005088 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8003986:	2200      	movs	r2, #0
 8003988:	2105      	movs	r1, #5
 800398a:	2052      	movs	r0, #82	; 0x52
 800398c:	f000 fad0 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003990:	2052      	movs	r0, #82	; 0x52
 8003992:	f000 fae9 	bl	8003f68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003996:	e034      	b.n	8003a02 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <HAL_UART_MspInit+0x104>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d12f      	bne.n	8003a02 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039a2:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 80039a8:	f043 0320 	orr.w	r3, r3, #32
 80039ac:	6453      	str	r3, [r2, #68]	; 0x44
 80039ae:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 80039c0:	f043 0304 	orr.w	r3, r3, #4
 80039c4:	6313      	str	r3, [r2, #48]	; 0x30
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_UART_MspInit+0xfc>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80039d2:	23c0      	movs	r3, #192	; 0xc0
 80039d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039de:	2303      	movs	r3, #3
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80039e2:	2308      	movs	r3, #8
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e6:	f107 031c 	add.w	r3, r7, #28
 80039ea:	4619      	mov	r1, r3
 80039ec:	480b      	ldr	r0, [pc, #44]	; (8003a1c <HAL_UART_MspInit+0x108>)
 80039ee:	f001 fb4b 	bl	8005088 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80039f2:	2200      	movs	r2, #0
 80039f4:	2105      	movs	r1, #5
 80039f6:	2047      	movs	r0, #71	; 0x47
 80039f8:	f000 fa9a 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80039fc:	2047      	movs	r0, #71	; 0x47
 80039fe:	f000 fab3 	bl	8003f68 <HAL_NVIC_EnableIRQ>
}
 8003a02:	bf00      	nop
 8003a04:	3730      	adds	r7, #48	; 0x30
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40007800 	.word	0x40007800
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40021400 	.word	0x40021400
 8003a18:	40011400 	.word	0x40011400
 8003a1c:	40020800 	.word	0x40020800

08003a20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08c      	sub	sp, #48	; 0x30
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003a30:	2200      	movs	r2, #0
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	2036      	movs	r0, #54	; 0x36
 8003a36:	f000 fa7b 	bl	8003f30 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a3a:	2036      	movs	r0, #54	; 0x36
 8003a3c:	f000 fa94 	bl	8003f68 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a40:	4b1f      	ldr	r3, [pc, #124]	; (8003ac0 <HAL_InitTick+0xa0>)
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <HAL_InitTick+0xa0>)
 8003a46:	f043 0310 	orr.w	r3, r3, #16
 8003a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <HAL_InitTick+0xa0>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a58:	f107 0210 	add.w	r2, r7, #16
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f002 f9ca 	bl	8005dfc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003a68:	f002 f9a0 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <HAL_InitTick+0xa4>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0c9b      	lsrs	r3, r3, #18
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_InitTick+0xa8>)
 8003a82:	4a12      	ldr	r2, [pc, #72]	; (8003acc <HAL_InitTick+0xac>)
 8003a84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_InitTick+0xa8>)
 8003a88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a8c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a8e:	4a0e      	ldr	r2, [pc, #56]	; (8003ac8 <HAL_InitTick+0xa8>)
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <HAL_InitTick+0xa8>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_InitTick+0xa8>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003aa0:	4809      	ldr	r0, [pc, #36]	; (8003ac8 <HAL_InitTick+0xa8>)
 8003aa2:	f003 f903 	bl	8006cac <HAL_TIM_Base_Init>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003aac:	4806      	ldr	r0, [pc, #24]	; (8003ac8 <HAL_InitTick+0xa8>)
 8003aae:	f003 f95f 	bl	8006d70 <HAL_TIM_Base_Start_IT>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	e000      	b.n	8003ab8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3730      	adds	r7, #48	; 0x30
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	431bde83 	.word	0x431bde83
 8003ac8:	2000553c 	.word	0x2000553c
 8003acc:	40001000 	.word	0x40001000

08003ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ad4:	e7fe      	b.n	8003ad4 <NMI_Handler+0x4>

08003ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ada:	e7fe      	b.n	8003ada <HardFault_Handler+0x4>

08003adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae0:	e7fe      	b.n	8003ae0 <MemManage_Handler+0x4>

08003ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ae6:	e7fe      	b.n	8003ae6 <BusFault_Handler+0x4>

08003ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aec:	e7fe      	b.n	8003aec <UsageFault_Handler+0x4>

08003aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b00:	4802      	ldr	r0, [pc, #8]	; (8003b0c <TIM6_DAC_IRQHandler+0x10>)
 8003b02:	f003 f9ad 	bl	8006e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	2000553c 	.word	0x2000553c

08003b10 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <ETH_IRQHandler+0x10>)
 8003b16:	f000 fea9 	bl	800486c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20006ea4 	.word	0x20006ea4

08003b24 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003b28:	4802      	ldr	r0, [pc, #8]	; (8003b34 <USART6_IRQHandler+0x10>)
 8003b2a:	f003 fd3d 	bl	80075a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20005290 	.word	0x20005290

08003b38 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
//	  } else {
//	    uart7_handler();
//	  }
//	  return;
  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003b3c:	4802      	ldr	r0, [pc, #8]	; (8003b48 <UART7_IRQHandler+0x10>)
 8003b3e:	f003 fd33 	bl	80075a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200050cc 	.word	0x200050cc

08003b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
	return 1;
 8003b50:	2301      	movs	r3, #1
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <_kill>:

int _kill(int pid, int sig)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <_kill+0x20>)
 8003b68:	2216      	movs	r2, #22
 8003b6a:	601a      	str	r2, [r3, #0]
	return -1;
 8003b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	2000be30 	.word	0x2000be30

08003b80 <_exit>:

void _exit (int status)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b88:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ffe5 	bl	8003b5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b92:	e7fe      	b.n	8003b92 <_exit+0x12>

08003b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e00a      	b.n	8003bbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ba6:	f3af 8000 	nop.w
 8003baa:	4601      	mov	r1, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	60ba      	str	r2, [r7, #8]
 8003bb2:	b2ca      	uxtb	r2, r1
 8003bb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	dbf0      	blt.n	8003ba6 <_read+0x12>
	}

return len;
 8003bc4:	687b      	ldr	r3, [r7, #4]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <_close>:
	}
	return len;
}

int _close(int file)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <_isatty>:

int _isatty(int file)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8003c0e:	2301      	movs	r3, #1
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
	return 0;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c40:	4a14      	ldr	r2, [pc, #80]	; (8003c94 <_sbrk+0x5c>)
 8003c42:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <_sbrk+0x60>)
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <_sbrk+0x64>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d102      	bne.n	8003c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <_sbrk+0x64>)
 8003c56:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <_sbrk+0x68>)
 8003c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <_sbrk+0x64>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d205      	bcs.n	8003c74 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <_sbrk+0x6c>)
 8003c6a:	220c      	movs	r2, #12
 8003c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c72:	e009      	b.n	8003c88 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <_sbrk+0x64>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <_sbrk+0x64>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	4a06      	ldr	r2, [pc, #24]	; (8003c9c <_sbrk+0x64>)
 8003c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c86:	68fb      	ldr	r3, [r7, #12]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	20050000 	.word	0x20050000
 8003c98:	00000400 	.word	0x00000400
 8003c9c:	20000d10 	.word	0x20000d10
 8003ca0:	2000be48 	.word	0x2000be48
 8003ca4:	2000be30 	.word	0x2000be30

08003ca8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cac:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <SystemInit+0x20>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <SystemInit+0x20>)
 8003cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cd0:	480d      	ldr	r0, [pc, #52]	; (8003d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cd2:	490e      	ldr	r1, [pc, #56]	; (8003d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cd4:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cd8:	e002      	b.n	8003ce0 <LoopCopyDataInit>

08003cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cde:	3304      	adds	r3, #4

08003ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ce4:	d3f9      	bcc.n	8003cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ce6:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ce8:	4c0b      	ldr	r4, [pc, #44]	; (8003d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cec:	e001      	b.n	8003cf2 <LoopFillZerobss>

08003cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cf0:	3204      	adds	r2, #4

08003cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cf4:	d3fb      	bcc.n	8003cee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cf6:	f7ff ffd7 	bl	8003ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cfa:	f016 fccd 	bl	801a698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cfe:	f7fd f9af 	bl	8001060 <main>
  bx  lr    
 8003d02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d0c:	20000a50 	.word	0x20000a50
  ldr r2, =_sidata
 8003d10:	0802927c 	.word	0x0802927c
  ldr r2, =_sbss
 8003d14:	20000a50 	.word	0x20000a50
  ldr r4, =_ebss
 8003d18:	2000be44 	.word	0x2000be44

08003d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d1c:	e7fe      	b.n	8003d1c <ADC_IRQHandler>

08003d1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d22:	2003      	movs	r0, #3
 8003d24:	f000 f8f9 	bl	8003f1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d28:	2000      	movs	r0, #0
 8003d2a:	f7ff fe79 	bl	8003a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d2e:	f7ff fdaf 	bl	8003890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_IncTick+0x20>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_IncTick+0x24>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4413      	add	r3, r2
 8003d48:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <HAL_IncTick+0x24>)
 8003d4a:	6013      	str	r3, [r2, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000024 	.word	0x20000024
 8003d5c:	20005588 	.word	0x20005588

08003d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return uwTick;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <HAL_GetTick+0x14>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20005588 	.word	0x20005588

08003d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d80:	f7ff ffee 	bl	8003d60 <HAL_GetTick>
 8003d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d005      	beq.n	8003d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <HAL_Delay+0x44>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d9e:	bf00      	nop
 8003da0:	f7ff ffde 	bl	8003d60 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d8f7      	bhi.n	8003da0 <HAL_Delay+0x28>
  {
  }
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000024 	.word	0x20000024

08003dc0 <__NVIC_SetPriorityGrouping>:
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <__NVIC_SetPriorityGrouping+0x40>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dee:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <__NVIC_SetPriorityGrouping+0x40>)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	60d3      	str	r3, [r2, #12]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00
 8003e04:	05fa0000 	.word	0x05fa0000

08003e08 <__NVIC_GetPriorityGrouping>:
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e0c:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <__NVIC_GetPriorityGrouping+0x18>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 0307 	and.w	r3, r3, #7
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <__NVIC_EnableIRQ>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	db0b      	blt.n	8003e4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	f003 021f 	and.w	r2, r3, #31
 8003e3c:	4907      	ldr	r1, [pc, #28]	; (8003e5c <__NVIC_EnableIRQ+0x38>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2001      	movs	r0, #1
 8003e46:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e100 	.word	0xe000e100

08003e60 <__NVIC_SetPriority>:
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	db0a      	blt.n	8003e8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	490c      	ldr	r1, [pc, #48]	; (8003eac <__NVIC_SetPriority+0x4c>)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	0112      	lsls	r2, r2, #4
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	440b      	add	r3, r1
 8003e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e88:	e00a      	b.n	8003ea0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4908      	ldr	r1, [pc, #32]	; (8003eb0 <__NVIC_SetPriority+0x50>)
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	3b04      	subs	r3, #4
 8003e98:	0112      	lsls	r2, r2, #4
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	761a      	strb	r2, [r3, #24]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000e100 	.word	0xe000e100
 8003eb0:	e000ed00 	.word	0xe000ed00

08003eb4 <NVIC_EncodePriority>:
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	; 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f1c3 0307 	rsb	r3, r3, #7
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	bf28      	it	cs
 8003ed2:	2304      	movcs	r3, #4
 8003ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d902      	bls.n	8003ee4 <NVIC_EncodePriority+0x30>
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3b03      	subs	r3, #3
 8003ee2:	e000      	b.n	8003ee6 <NVIC_EncodePriority+0x32>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003efc:	f04f 31ff 	mov.w	r1, #4294967295
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	43d9      	mvns	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f0c:	4313      	orrs	r3, r2
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3724      	adds	r7, #36	; 0x24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ff4c 	bl	8003dc0 <__NVIC_SetPriorityGrouping>
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f42:	f7ff ff61 	bl	8003e08 <__NVIC_GetPriorityGrouping>
 8003f46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	6978      	ldr	r0, [r7, #20]
 8003f4e:	f7ff ffb1 	bl	8003eb4 <NVIC_EncodePriority>
 8003f52:	4602      	mov	r2, r0
 8003f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff ff80 	bl	8003e60 <__NVIC_SetPriority>
}
 8003f60:	bf00      	nop
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ff54 	bl	8003e24 <__NVIC_EnableIRQ>
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f92:	f7ff fee5 	bl	8003d60 <HAL_GetTick>
 8003f96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d008      	beq.n	8003fb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2280      	movs	r2, #128	; 0x80
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e052      	b.n	800405c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0216 	bic.w	r2, r2, #22
 8003fc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d103      	bne.n	8003fe6 <HAL_DMA_Abort+0x62>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0208 	bic.w	r2, r2, #8
 8003ff4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004006:	e013      	b.n	8004030 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004008:	f7ff feaa 	bl	8003d60 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b05      	cmp	r3, #5
 8004014:	d90c      	bls.n	8004030 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2203      	movs	r2, #3
 8004020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e015      	b.n	800405c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e4      	bne.n	8004008 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004042:	223f      	movs	r2, #63	; 0x3f
 8004044:	409a      	lsls	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d004      	beq.n	8004082 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2280      	movs	r2, #128	; 0x80
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e00c      	b.n	800409c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2205      	movs	r2, #5
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80040b8:	4ba9      	ldr	r3, [pc, #676]	; (8004360 <HAL_ETH_Init+0x2b8>)
 80040ba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e181      	b.n	80043d2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f004 fdee 	bl	8008cc4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e8:	4b9e      	ldr	r3, [pc, #632]	; (8004364 <HAL_ETH_Init+0x2bc>)
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	4a9d      	ldr	r2, [pc, #628]	; (8004364 <HAL_ETH_Init+0x2bc>)
 80040ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f2:	6453      	str	r3, [r2, #68]	; 0x44
 80040f4:	4b9b      	ldr	r3, [pc, #620]	; (8004364 <HAL_ETH_Init+0x2bc>)
 80040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004100:	4b99      	ldr	r3, [pc, #612]	; (8004368 <HAL_ETH_Init+0x2c0>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a98      	ldr	r2, [pc, #608]	; (8004368 <HAL_ETH_Init+0x2c0>)
 8004106:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800410a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800410c:	4b96      	ldr	r3, [pc, #600]	; (8004368 <HAL_ETH_Init+0x2c0>)
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4994      	ldr	r1, [pc, #592]	; (8004368 <HAL_ETH_Init+0x2c0>)
 8004116:	4313      	orrs	r3, r2
 8004118:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004130:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004132:	f7ff fe15 	bl	8003d60 <HAL_GetTick>
 8004136:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004138:	e011      	b.n	800415e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800413a:	f7ff fe11 	bl	8003d60 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004148:	d909      	bls.n	800415e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2203      	movs	r2, #3
 800414e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e139      	b.n	80043d2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e4      	bne.n	800413a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f023 031c 	bic.w	r3, r3, #28
 800417e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004180:	f001 fe08 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8004184:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	4a78      	ldr	r2, [pc, #480]	; (800436c <HAL_ETH_Init+0x2c4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d908      	bls.n	80041a0 <HAL_ETH_Init+0xf8>
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	4a77      	ldr	r2, [pc, #476]	; (8004370 <HAL_ETH_Init+0x2c8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d804      	bhi.n	80041a0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f043 0308 	orr.w	r3, r3, #8
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e027      	b.n	80041f0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4a73      	ldr	r2, [pc, #460]	; (8004370 <HAL_ETH_Init+0x2c8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d908      	bls.n	80041ba <HAL_ETH_Init+0x112>
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	4a6d      	ldr	r2, [pc, #436]	; (8004360 <HAL_ETH_Init+0x2b8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d204      	bcs.n	80041ba <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f043 030c 	orr.w	r3, r3, #12
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	e01a      	b.n	80041f0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	4a68      	ldr	r2, [pc, #416]	; (8004360 <HAL_ETH_Init+0x2b8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d303      	bcc.n	80041ca <HAL_ETH_Init+0x122>
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	4a6b      	ldr	r2, [pc, #428]	; (8004374 <HAL_ETH_Init+0x2cc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d911      	bls.n	80041ee <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4a69      	ldr	r2, [pc, #420]	; (8004374 <HAL_ETH_Init+0x2cc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d908      	bls.n	80041e4 <HAL_ETH_Init+0x13c>
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	4a68      	ldr	r2, [pc, #416]	; (8004378 <HAL_ETH_Init+0x2d0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d804      	bhi.n	80041e4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e005      	b.n	80041f0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f043 0310 	orr.w	r3, r3, #16
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	e000      	b.n	80041f0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80041ee:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80041f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80041fc:	2100      	movs	r1, #0
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fc17 	bl	8004a32 <HAL_ETH_WritePHYRegister>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800420e:	6939      	ldr	r1, [r7, #16]
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fca3 	bl	8004b5c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e0d7      	b.n	80043d2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004222:	20ff      	movs	r0, #255	; 0xff
 8004224:	f7ff fda8 	bl	8003d78 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 80a5 	beq.w	800437c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004232:	f7ff fd95 	bl	8003d60 <HAL_GetTick>
 8004236:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004238:	f107 030c 	add.w	r3, r7, #12
 800423c:	461a      	mov	r2, r3
 800423e:	2101      	movs	r1, #1
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fb8e 	bl	8004962 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004246:	f7ff fd8b 	bl	8003d60 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4293      	cmp	r3, r2
 8004256:	d90f      	bls.n	8004278 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800425c:	6939      	ldr	r1, [r7, #16]
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fc7c 	bl	8004b5c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0ac      	b.n	80043d2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0da      	beq.n	8004238 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004282:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004286:	2100      	movs	r1, #0
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fbd2 	bl	8004a32 <HAL_ETH_WritePHYRegister>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004298:	6939      	ldr	r1, [r7, #16]
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fc5e 	bl	8004b5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80042a8:	2301      	movs	r3, #1
 80042aa:	e092      	b.n	80043d2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ac:	f7ff fd58 	bl	8003d60 <HAL_GetTick>
 80042b0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80042b2:	f107 030c 	add.w	r3, r7, #12
 80042b6:	461a      	mov	r2, r3
 80042b8:	2101      	movs	r1, #1
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fb51 	bl	8004962 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80042c0:	f7ff fd4e 	bl	8003d60 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d90f      	bls.n	80042f2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80042d6:	6939      	ldr	r1, [r7, #16]
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fc3f 	bl	8004b5c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e06f      	b.n	80043d2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0da      	beq.n	80042b2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80042fc:	f107 030c 	add.w	r3, r7, #12
 8004300:	461a      	mov	r2, r3
 8004302:	2110      	movs	r1, #16
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fb2c 	bl	8004962 <HAL_ETH_ReadPHYRegister>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004314:	6939      	ldr	r1, [r7, #16]
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fc20 	bl	8004b5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004324:	2301      	movs	r3, #1
 8004326:	e054      	b.n	80043d2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	e002      	b.n	8004342 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
 8004352:	e035      	b.n	80043c0 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	e030      	b.n	80043c0 <HAL_ETH_Init+0x318>
 800435e:	bf00      	nop
 8004360:	03938700 	.word	0x03938700
 8004364:	40023800 	.word	0x40023800
 8004368:	40013800 	.word	0x40013800
 800436c:	01312cff 	.word	0x01312cff
 8004370:	02160ebf 	.word	0x02160ebf
 8004374:	05f5e0ff 	.word	0x05f5e0ff
 8004378:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	08db      	lsrs	r3, r3, #3
 8004382:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800438c:	4313      	orrs	r3, r2
 800438e:	b29b      	uxth	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	2100      	movs	r1, #0
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fb4c 	bl	8004a32 <HAL_ETH_WritePHYRegister>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00b      	beq.n	80043b8 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80043a4:	6939      	ldr	r1, [r7, #16]
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fbd8 	bl	8004b5c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e00c      	b.n	80043d2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80043b8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80043bc:	f7ff fcdc 	bl	8003d78 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80043c0:	6939      	ldr	r1, [r7, #16]
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fbca 	bl	8004b5c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3720      	adds	r7, #32
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop

080043dc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_ETH_DMATxDescListInit+0x20>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e052      	b.n	80044a2 <HAL_ETH_DMATxDescListInit+0xc6>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	e030      	b.n	800447a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	015b      	lsls	r3, r3, #5
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	4413      	add	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004428:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4413      	add	r3, r2
 8004438:	461a      	mov	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d105      	bne.n	8004452 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	3b01      	subs	r3, #1
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	429a      	cmp	r2, r3
 800445a:	d208      	bcs.n	800446e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3301      	adds	r3, #1
 8004460:	015b      	lsls	r3, r3, #5
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	4413      	add	r3, r2
 8004466:	461a      	mov	r2, r3
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	60da      	str	r2, [r3, #12]
 800446c:	e002      	b.n	8004474 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	3301      	adds	r3, #1
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d3ca      	bcc.n	8004418 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	f241 0310 	movw	r3, #4112	; 0x1010
 800448c:	440b      	add	r3, r1
 800448e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b087      	sub	sp, #28
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_ETH_DMARxDescListInit+0x20>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e056      	b.n	800457c <HAL_ETH_DMARxDescListInit+0xce>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2202      	movs	r2, #2
 80044da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	e034      	b.n	8004554 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	015b      	lsls	r3, r3, #5
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4413      	add	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044fa:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004502:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4413      	add	r3, r2
 8004512:	461a      	mov	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d105      	bne.n	800452c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	3b01      	subs	r3, #1
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	429a      	cmp	r2, r3
 8004534:	d208      	bcs.n	8004548 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	3301      	adds	r3, #1
 800453a:	015b      	lsls	r3, r3, #5
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4413      	add	r3, r2
 8004540:	461a      	mov	r2, r3
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	e002      	b.n	800454e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	3301      	adds	r3, #1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d3c6      	bcc.n	80044ea <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	f241 030c 	movw	r3, #4108	; 0x100c
 8004566:	440b      	add	r3, r1
 8004568:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_ETH_TransmitFrame+0x24>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e0cd      	b.n	8004748 <HAL_ETH_TransmitFrame+0x1c0>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0b8      	b.n	8004748 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da09      	bge.n	80045f4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2212      	movs	r2, #18
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0a9      	b.n	8004748 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d915      	bls.n	800462a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	4a54      	ldr	r2, [pc, #336]	; (8004754 <HAL_ETH_TransmitFrame+0x1cc>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	0a9b      	lsrs	r3, r3, #10
 8004608:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_ETH_TransmitFrame+0x1cc>)
 800460e:	fba3 1302 	umull	r1, r3, r3, r2
 8004612:	0a9b      	lsrs	r3, r3, #10
 8004614:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	3301      	adds	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e001      	b.n	800462e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d11c      	bne.n	800466e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004642:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800464e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800465e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	461a      	mov	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	62da      	str	r2, [r3, #44]	; 0x2c
 800466c:	e04b      	b.n	8004706 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	e044      	b.n	80046fe <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004682:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d107      	bne.n	800469a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004698:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80046a2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d116      	bne.n	80046dc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80046bc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	4a25      	ldr	r2, [pc, #148]	; (8004758 <HAL_ETH_TransmitFrame+0x1d0>)
 80046c2:	fb02 f203 	mul.w	r2, r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80046ce:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80046da:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80046ea:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	461a      	mov	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	3301      	adds	r3, #1
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	429a      	cmp	r2, r3
 8004704:	d3b6      	bcc.n	8004674 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	f241 0314 	movw	r3, #4116	; 0x1014
 800470e:	4413      	add	r3, r2
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00d      	beq.n	8004736 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	f241 0314 	movw	r3, #4116	; 0x1014
 8004722:	4413      	add	r3, r2
 8004724:	2204      	movs	r2, #4
 8004726:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	f241 0304 	movw	r3, #4100	; 0x1004
 8004730:	4413      	add	r3, r2
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	ac02b00b 	.word	0xac02b00b
 8004758:	fffffa0c 	.word	0xfffffa0c

0800475c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8004772:	2302      	movs	r3, #2
 8004774:	e074      	b.n	8004860 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004786:	e05a      	b.n	800483e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800479c:	d10d      	bne.n	80047ba <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	461a      	mov	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
 80047b8:	e041      	b.n	800483e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	461a      	mov	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	629a      	str	r2, [r3, #40]	; 0x28
 80047de:	e02e      	b.n	800483e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d103      	bne.n	8004802 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800480e:	1f1a      	subs	r2, r3, #4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	461a      	mov	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e010      	b.n	8004860 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	db02      	blt.n	800484e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d99c      	bls.n	8004788 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	f241 0314 	movw	r3, #4116	; 0x1014
 800487c:	4413      	add	r3, r2
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d112      	bne.n	80048ae <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f004 fabd 	bl	8008e08 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	f241 0314 	movw	r3, #4116	; 0x1014
 8004896:	4413      	add	r3, r2
 8004898:	2240      	movs	r2, #64	; 0x40
 800489a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ac:	e01b      	b.n	80048e6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	f241 0314 	movw	r3, #4116	; 0x1014
 80048b6:	4413      	add	r3, r2
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d111      	bne.n	80048e6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f839 	bl	800493a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	f241 0314 	movw	r3, #4116	; 0x1014
 80048d0:	4413      	add	r3, r2
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	f241 0314 	movw	r3, #4116	; 0x1014
 80048ee:	4413      	add	r3, r2
 80048f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048f4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	f241 0314 	movw	r3, #4116	; 0x1014
 80048fe:	4413      	add	r3, r2
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490a:	d112      	bne.n	8004932 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f81e 	bl	800494e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	f241 0314 	movw	r3, #4116	; 0x1014
 800491a:	4413      	add	r3, r2
 800491c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004920:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	460b      	mov	r3, r1
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b82      	cmp	r3, #130	; 0x82
 8004982:	d101      	bne.n	8004988 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004984:	2302      	movs	r3, #2
 8004986:	e050      	b.n	8004a2a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2282      	movs	r2, #130	; 0x82
 800498c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f003 031c 	and.w	r3, r3, #28
 800499e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8a1b      	ldrh	r3, [r3, #16]
 80049a4:	02db      	lsls	r3, r3, #11
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80049ae:	897b      	ldrh	r3, [r7, #10]
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0302 	bic.w	r3, r3, #2
 80049c2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80049d4:	f7ff f9c4 	bl	8003d60 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80049da:	e015      	b.n	8004a08 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80049dc:	f7ff f9c0 	bl	8003d60 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d309      	bcc.n	8004a00 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e014      	b.n	8004a2a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e4      	bne.n	80049dc <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b086      	sub	sp, #24
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b42      	cmp	r3, #66	; 0x42
 8004a52:	d101      	bne.n	8004a58 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
 8004a56:	e04e      	b.n	8004af6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2242      	movs	r2, #66	; 0x42
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f003 031c 	and.w	r3, r3, #28
 8004a6e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8a1b      	ldrh	r3, [r3, #16]
 8004a74:	02db      	lsls	r3, r3, #11
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004a7e:	897b      	ldrh	r3, [r7, #10]
 8004a80:	019b      	lsls	r3, r3, #6
 8004a82:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f043 0302 	orr.w	r3, r3, #2
 8004a92:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004aae:	f7ff f957 	bl	8003d60 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ab4:	e015      	b.n	8004ae2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004ab6:	f7ff f953 	bl	8003d60 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac4:	d309      	bcc.n	8004ada <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e00d      	b.n	8004af6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e4      	bne.n	8004ab6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_ETH_Start+0x16>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e01f      	b.n	8004b54 <HAL_ETH_Start+0x56>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fa1b 	bl	8004f60 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fa35 	bl	8004f9a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fa7f 	bl	8005034 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa4c 	bl	8004fd4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fa61 	bl	8005004 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b0b0      	sub	sp, #192	; 0xc0
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b78:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b80:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ba8:	e001      	b.n	8004bae <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bb2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004bc8:	2340      	movs	r3, #64	; 0x40
 8004bca:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004bde:	2300      	movs	r3, #0
 8004be0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c34:	4bab      	ldr	r3, [pc, #684]	; (8004ee4 <ETH_MACDMAConfig+0x388>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004c40:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004c44:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004c48:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004c4e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004c52:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004c56:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004c5c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004c60:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004c64:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004c68:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004c6c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004c70:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004c72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c84:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c90:	2001      	movs	r0, #1
 8004c92:	f7ff f871 	bl	8003d78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c9e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004ca0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004ca4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004ca6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004ca8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004caa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004cae:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004cb4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004cba:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004cc0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004cc4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004ccc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004cce:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004cda:	2001      	movs	r0, #1
 8004cdc:	f7ff f84c 	bl	8003d78 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ce8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cf2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004cfc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004d08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d0c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004d10:	4013      	ands	r3, r2
 8004d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004d16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d1a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004d1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004d20:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004d22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004d26:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004d2c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004d32:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004d38:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004d3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d4c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d58:	2001      	movs	r0, #1
 8004d5a:	f7ff f80d 	bl	8003d78 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d66:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004d68:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004d6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d82:	2001      	movs	r0, #1
 8004d84:	f7fe fff8 	bl	8003d78 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d90:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d9a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004da0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004da4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004dae:	2300      	movs	r3, #0
 8004db0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004db2:	2300      	movs	r3, #0
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004db6:	2304      	movs	r3, #4
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dc4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004dc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004dca:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dd0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	f241 0318 	movw	r3, #4120	; 0x1018
 8004de6:	4413      	add	r3, r2
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8004dee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004df2:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <ETH_MACDMAConfig+0x38c>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004dfa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004dfc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004dfe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004e00:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004e02:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004e04:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004e06:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004e08:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004e0a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004e0c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004e0e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004e10:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004e12:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004e16:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004e1a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004e1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e2e:	4413      	add	r3, r2
 8004e30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e34:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e3e:	4413      	add	r3, r2
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e46:	2001      	movs	r0, #1
 8004e48:	f7fe ff96 	bl	8003d78 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e54:	4413      	add	r3, r2
 8004e56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e5a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004e60:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004e64:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004e68:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004e6c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e70:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004e72:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8004e76:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e94:	2001      	movs	r0, #1
 8004e96:	f7fe ff6f 	bl	8003d78 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ea6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10d      	bne.n	8004ecc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	f241 031c 	movw	r3, #4124	; 0x101c
 8004eb8:	4413      	add	r3, r2
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6811      	ldr	r1, [r2, #0]
 8004ec0:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <ETH_MACDMAConfig+0x390>)
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	f241 031c 	movw	r3, #4124	; 0x101c
 8004ec8:	440b      	add	r3, r1
 8004eca:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f80b 	bl	8004ef0 <ETH_MACAddressConfig>
}
 8004eda:	bf00      	nop
 8004edc:	37c0      	adds	r7, #192	; 0xc0
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	ff20810f 	.word	0xff20810f
 8004ee8:	f8de3f23 	.word	0xf8de3f23
 8004eec:	00010040 	.word	0x00010040

08004ef0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3305      	adds	r3, #5
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	3204      	adds	r2, #4
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <ETH_MACAddressConfig+0x68>)
 8004f12:	4413      	add	r3, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3303      	adds	r3, #3
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	061a      	lsls	r2, r3, #24
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3302      	adds	r3, #2
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	041b      	lsls	r3, r3, #16
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	4313      	orrs	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	7812      	ldrb	r2, [r2, #0]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <ETH_MACAddressConfig+0x6c>)
 8004f42:	4413      	add	r3, r2
 8004f44:	461a      	mov	r2, r3
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6013      	str	r3, [r2, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40028040 	.word	0x40028040
 8004f5c:	40028044 	.word	0x40028044

08004f60 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0208 	orr.w	r2, r2, #8
 8004f7a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f84:	2001      	movs	r0, #1
 8004f86:	f7fe fef7 	bl	8003d78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	601a      	str	r2, [r3, #0]
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0204 	orr.w	r2, r2, #4
 8004fb4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	f7fe feda 	bl	8003d78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	f241 0318 	movw	r3, #4120	; 0x1018
 8004fe4:	4413      	add	r3, r2
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6811      	ldr	r1, [r2, #0]
 8004fec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004ff0:	f241 0318 	movw	r3, #4120	; 0x1018
 8004ff4:	440b      	add	r3, r1
 8004ff6:	601a      	str	r2, [r3, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	f241 0318 	movw	r3, #4120	; 0x1018
 8005014:	4413      	add	r3, r2
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6811      	ldr	r1, [r2, #0]
 800501c:	f043 0202 	orr.w	r2, r3, #2
 8005020:	f241 0318 	movw	r3, #4120	; 0x1018
 8005024:	440b      	add	r3, r1
 8005026:	601a      	str	r2, [r3, #0]
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	f241 0318 	movw	r3, #4120	; 0x1018
 8005048:	4413      	add	r3, r2
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6811      	ldr	r1, [r2, #0]
 8005050:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005054:	f241 0318 	movw	r3, #4120	; 0x1018
 8005058:	440b      	add	r3, r1
 800505a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	f241 0318 	movw	r3, #4120	; 0x1018
 8005064:	4413      	add	r3, r2
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800506a:	2001      	movs	r0, #1
 800506c:	f7fe fe84 	bl	8003d78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6819      	ldr	r1, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	f241 0318 	movw	r3, #4120	; 0x1018
 800507a:	440b      	add	r3, r1
 800507c:	601a      	str	r2, [r3, #0]
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005088:	b480      	push	{r7}
 800508a:	b089      	sub	sp, #36	; 0x24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800509e:	2300      	movs	r3, #0
 80050a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	e175      	b.n	8005394 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050a8:	2201      	movs	r2, #1
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4013      	ands	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	f040 8164 	bne.w	800538e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d005      	beq.n	80050de <HAL_GPIO_Init+0x56>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d130      	bne.n	8005140 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	2203      	movs	r2, #3
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43db      	mvns	r3, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4013      	ands	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4313      	orrs	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005114:	2201      	movs	r2, #1
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	43db      	mvns	r3, r3
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4013      	ands	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	091b      	lsrs	r3, r3, #4
 800512a:	f003 0201 	and.w	r2, r3, #1
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4313      	orrs	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f003 0303 	and.w	r3, r3, #3
 8005148:	2b03      	cmp	r3, #3
 800514a:	d017      	beq.n	800517c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	2203      	movs	r2, #3
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d123      	bne.n	80051d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	08da      	lsrs	r2, r3, #3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3208      	adds	r2, #8
 8005190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	220f      	movs	r2, #15
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	08da      	lsrs	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3208      	adds	r2, #8
 80051ca:	69b9      	ldr	r1, [r7, #24]
 80051cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	2203      	movs	r2, #3
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f003 0203 	and.w	r2, r3, #3
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80be 	beq.w	800538e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005212:	4b66      	ldr	r3, [pc, #408]	; (80053ac <HAL_GPIO_Init+0x324>)
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	4a65      	ldr	r2, [pc, #404]	; (80053ac <HAL_GPIO_Init+0x324>)
 8005218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800521c:	6453      	str	r3, [r2, #68]	; 0x44
 800521e:	4b63      	ldr	r3, [pc, #396]	; (80053ac <HAL_GPIO_Init+0x324>)
 8005220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800522a:	4a61      	ldr	r2, [pc, #388]	; (80053b0 <HAL_GPIO_Init+0x328>)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	089b      	lsrs	r3, r3, #2
 8005230:	3302      	adds	r3, #2
 8005232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005236:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	220f      	movs	r2, #15
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	43db      	mvns	r3, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4013      	ands	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a58      	ldr	r2, [pc, #352]	; (80053b4 <HAL_GPIO_Init+0x32c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d037      	beq.n	80052c6 <HAL_GPIO_Init+0x23e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a57      	ldr	r2, [pc, #348]	; (80053b8 <HAL_GPIO_Init+0x330>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d031      	beq.n	80052c2 <HAL_GPIO_Init+0x23a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a56      	ldr	r2, [pc, #344]	; (80053bc <HAL_GPIO_Init+0x334>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d02b      	beq.n	80052be <HAL_GPIO_Init+0x236>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a55      	ldr	r2, [pc, #340]	; (80053c0 <HAL_GPIO_Init+0x338>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d025      	beq.n	80052ba <HAL_GPIO_Init+0x232>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a54      	ldr	r2, [pc, #336]	; (80053c4 <HAL_GPIO_Init+0x33c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01f      	beq.n	80052b6 <HAL_GPIO_Init+0x22e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a53      	ldr	r2, [pc, #332]	; (80053c8 <HAL_GPIO_Init+0x340>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d019      	beq.n	80052b2 <HAL_GPIO_Init+0x22a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a52      	ldr	r2, [pc, #328]	; (80053cc <HAL_GPIO_Init+0x344>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d013      	beq.n	80052ae <HAL_GPIO_Init+0x226>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a51      	ldr	r2, [pc, #324]	; (80053d0 <HAL_GPIO_Init+0x348>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00d      	beq.n	80052aa <HAL_GPIO_Init+0x222>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a50      	ldr	r2, [pc, #320]	; (80053d4 <HAL_GPIO_Init+0x34c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d007      	beq.n	80052a6 <HAL_GPIO_Init+0x21e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a4f      	ldr	r2, [pc, #316]	; (80053d8 <HAL_GPIO_Init+0x350>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d101      	bne.n	80052a2 <HAL_GPIO_Init+0x21a>
 800529e:	2309      	movs	r3, #9
 80052a0:	e012      	b.n	80052c8 <HAL_GPIO_Init+0x240>
 80052a2:	230a      	movs	r3, #10
 80052a4:	e010      	b.n	80052c8 <HAL_GPIO_Init+0x240>
 80052a6:	2308      	movs	r3, #8
 80052a8:	e00e      	b.n	80052c8 <HAL_GPIO_Init+0x240>
 80052aa:	2307      	movs	r3, #7
 80052ac:	e00c      	b.n	80052c8 <HAL_GPIO_Init+0x240>
 80052ae:	2306      	movs	r3, #6
 80052b0:	e00a      	b.n	80052c8 <HAL_GPIO_Init+0x240>
 80052b2:	2305      	movs	r3, #5
 80052b4:	e008      	b.n	80052c8 <HAL_GPIO_Init+0x240>
 80052b6:	2304      	movs	r3, #4
 80052b8:	e006      	b.n	80052c8 <HAL_GPIO_Init+0x240>
 80052ba:	2303      	movs	r3, #3
 80052bc:	e004      	b.n	80052c8 <HAL_GPIO_Init+0x240>
 80052be:	2302      	movs	r3, #2
 80052c0:	e002      	b.n	80052c8 <HAL_GPIO_Init+0x240>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_GPIO_Init+0x240>
 80052c6:	2300      	movs	r3, #0
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	f002 0203 	and.w	r2, r2, #3
 80052ce:	0092      	lsls	r2, r2, #2
 80052d0:	4093      	lsls	r3, r2
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80052d8:	4935      	ldr	r1, [pc, #212]	; (80053b0 <HAL_GPIO_Init+0x328>)
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	089b      	lsrs	r3, r3, #2
 80052de:	3302      	adds	r3, #2
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052e6:	4b3d      	ldr	r3, [pc, #244]	; (80053dc <HAL_GPIO_Init+0x354>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	43db      	mvns	r3, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4013      	ands	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800530a:	4a34      	ldr	r2, [pc, #208]	; (80053dc <HAL_GPIO_Init+0x354>)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005310:	4b32      	ldr	r3, [pc, #200]	; (80053dc <HAL_GPIO_Init+0x354>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005334:	4a29      	ldr	r2, [pc, #164]	; (80053dc <HAL_GPIO_Init+0x354>)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800533a:	4b28      	ldr	r3, [pc, #160]	; (80053dc <HAL_GPIO_Init+0x354>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	43db      	mvns	r3, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4013      	ands	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800535e:	4a1f      	ldr	r2, [pc, #124]	; (80053dc <HAL_GPIO_Init+0x354>)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005364:	4b1d      	ldr	r3, [pc, #116]	; (80053dc <HAL_GPIO_Init+0x354>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005388:	4a14      	ldr	r2, [pc, #80]	; (80053dc <HAL_GPIO_Init+0x354>)
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	3301      	adds	r3, #1
 8005392:	61fb      	str	r3, [r7, #28]
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	2b0f      	cmp	r3, #15
 8005398:	f67f ae86 	bls.w	80050a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	3724      	adds	r7, #36	; 0x24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40023800 	.word	0x40023800
 80053b0:	40013800 	.word	0x40013800
 80053b4:	40020000 	.word	0x40020000
 80053b8:	40020400 	.word	0x40020400
 80053bc:	40020800 	.word	0x40020800
 80053c0:	40020c00 	.word	0x40020c00
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40021400 	.word	0x40021400
 80053cc:	40021800 	.word	0x40021800
 80053d0:	40021c00 	.word	0x40021c00
 80053d4:	40022000 	.word	0x40022000
 80053d8:	40022400 	.word	0x40022400
 80053dc:	40013c00 	.word	0x40013c00

080053e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	807b      	strh	r3, [r7, #2]
 80053ec:	4613      	mov	r3, r2
 80053ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053f0:	787b      	ldrb	r3, [r7, #1]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053f6:	887a      	ldrh	r2, [r7, #2]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80053fc:	e003      	b.n	8005406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80053fe:	887b      	ldrh	r3, [r7, #2]
 8005400:	041a      	lsls	r2, r3, #16
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	619a      	str	r2, [r3, #24]
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	460b      	mov	r3, r1
 800541c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005424:	887a      	ldrh	r2, [r7, #2]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4013      	ands	r3, r2
 800542a:	041a      	lsls	r2, r3, #16
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	43d9      	mvns	r1, r3
 8005430:	887b      	ldrh	r3, [r7, #2]
 8005432:	400b      	ands	r3, r1
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	619a      	str	r2, [r3, #24]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a04      	ldr	r2, [pc, #16]	; (8005464 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005456:	6013      	str	r3, [r2, #0]
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40007000 	.word	0x40007000

08005468 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005472:	4b23      	ldr	r3, [pc, #140]	; (8005500 <HAL_PWREx_EnableOverDrive+0x98>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	4a22      	ldr	r2, [pc, #136]	; (8005500 <HAL_PWREx_EnableOverDrive+0x98>)
 8005478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547c:	6413      	str	r3, [r2, #64]	; 0x40
 800547e:	4b20      	ldr	r3, [pc, #128]	; (8005500 <HAL_PWREx_EnableOverDrive+0x98>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800548a:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <HAL_PWREx_EnableOverDrive+0x9c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005494:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005496:	f7fe fc63 	bl	8003d60 <HAL_GetTick>
 800549a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800549c:	e009      	b.n	80054b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800549e:	f7fe fc5f 	bl	8003d60 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ac:	d901      	bls.n	80054b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e022      	b.n	80054f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054b2:	4b14      	ldr	r3, [pc, #80]	; (8005504 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054be:	d1ee      	bne.n	800549e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80054c0:	4b10      	ldr	r3, [pc, #64]	; (8005504 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a0f      	ldr	r2, [pc, #60]	; (8005504 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054cc:	f7fe fc48 	bl	8003d60 <HAL_GetTick>
 80054d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054d2:	e009      	b.n	80054e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054d4:	f7fe fc44 	bl	8003d60 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e2:	d901      	bls.n	80054e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e007      	b.n	80054f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054f4:	d1ee      	bne.n	80054d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40023800 	.word	0x40023800
 8005504:	40007000 	.word	0x40007000

08005508 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005510:	2300      	movs	r3, #0
 8005512:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e291      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 8087 	beq.w	800563a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800552c:	4b96      	ldr	r3, [pc, #600]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	2b04      	cmp	r3, #4
 8005536:	d00c      	beq.n	8005552 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005538:	4b93      	ldr	r3, [pc, #588]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 030c 	and.w	r3, r3, #12
 8005540:	2b08      	cmp	r3, #8
 8005542:	d112      	bne.n	800556a <HAL_RCC_OscConfig+0x62>
 8005544:	4b90      	ldr	r3, [pc, #576]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800554c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005550:	d10b      	bne.n	800556a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005552:	4b8d      	ldr	r3, [pc, #564]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d06c      	beq.n	8005638 <HAL_RCC_OscConfig+0x130>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d168      	bne.n	8005638 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e26b      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005572:	d106      	bne.n	8005582 <HAL_RCC_OscConfig+0x7a>
 8005574:	4b84      	ldr	r3, [pc, #528]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a83      	ldr	r2, [pc, #524]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 800557a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	e02e      	b.n	80055e0 <HAL_RCC_OscConfig+0xd8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x9c>
 800558a:	4b7f      	ldr	r3, [pc, #508]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a7e      	ldr	r2, [pc, #504]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	4b7c      	ldr	r3, [pc, #496]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a7b      	ldr	r2, [pc, #492]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 800559c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e01d      	b.n	80055e0 <HAL_RCC_OscConfig+0xd8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0xc0>
 80055ae:	4b76      	ldr	r3, [pc, #472]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a75      	ldr	r2, [pc, #468]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80055b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b73      	ldr	r3, [pc, #460]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a72      	ldr	r2, [pc, #456]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0xd8>
 80055c8:	4b6f      	ldr	r3, [pc, #444]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a6e      	ldr	r2, [pc, #440]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b6c      	ldr	r3, [pc, #432]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a6b      	ldr	r2, [pc, #428]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80055da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fe fbba 	bl	8003d60 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f0:	f7fe fbb6 	bl	8003d60 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	; 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e21f      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005602:	4b61      	ldr	r3, [pc, #388]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0xe8>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fe fba6 	bl	8003d60 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005618:	f7fe fba2 	bl	8003d60 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	; 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e20b      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562a:	4b57      	ldr	r3, [pc, #348]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0x110>
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d069      	beq.n	800571a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005646:	4b50      	ldr	r3, [pc, #320]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005652:	4b4d      	ldr	r3, [pc, #308]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b08      	cmp	r3, #8
 800565c:	d11c      	bne.n	8005698 <HAL_RCC_OscConfig+0x190>
 800565e:	4b4a      	ldr	r3, [pc, #296]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d116      	bne.n	8005698 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566a:	4b47      	ldr	r3, [pc, #284]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_RCC_OscConfig+0x17a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d001      	beq.n	8005682 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e1df      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005682:	4b41      	ldr	r3, [pc, #260]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	493d      	ldr	r1, [pc, #244]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005692:	4313      	orrs	r3, r2
 8005694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005696:	e040      	b.n	800571a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d023      	beq.n	80056e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a0:	4b39      	ldr	r3, [pc, #228]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a38      	ldr	r2, [pc, #224]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fe fb58 	bl	8003d60 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b4:	f7fe fb54 	bl	8003d60 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e1bd      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c6:	4b30      	ldr	r3, [pc, #192]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d2:	4b2d      	ldr	r3, [pc, #180]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4929      	ldr	r1, [pc, #164]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	600b      	str	r3, [r1, #0]
 80056e6:	e018      	b.n	800571a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056e8:	4b27      	ldr	r3, [pc, #156]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a26      	ldr	r2, [pc, #152]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 80056ee:	f023 0301 	bic.w	r3, r3, #1
 80056f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fe fb34 	bl	8003d60 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056fc:	f7fe fb30 	bl	8003d60 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e199      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800570e:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d038      	beq.n	8005798 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d019      	beq.n	8005762 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800572e:	4b16      	ldr	r3, [pc, #88]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005732:	4a15      	ldr	r2, [pc, #84]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573a:	f7fe fb11 	bl	8003d60 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005742:	f7fe fb0d 	bl	8003d60 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e176      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x23a>
 8005760:	e01a      	b.n	8005798 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005762:	4b09      	ldr	r3, [pc, #36]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005766:	4a08      	ldr	r2, [pc, #32]	; (8005788 <HAL_RCC_OscConfig+0x280>)
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576e:	f7fe faf7 	bl	8003d60 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005774:	e00a      	b.n	800578c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005776:	f7fe faf3 	bl	8003d60 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d903      	bls.n	800578c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e15c      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
 8005788:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800578c:	4b91      	ldr	r3, [pc, #580]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 800578e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ee      	bne.n	8005776 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80a4 	beq.w	80058ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a6:	4b8b      	ldr	r3, [pc, #556]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10d      	bne.n	80057ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b2:	4b88      	ldr	r3, [pc, #544]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	4a87      	ldr	r2, [pc, #540]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80057b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057bc:	6413      	str	r3, [r2, #64]	; 0x40
 80057be:	4b85      	ldr	r3, [pc, #532]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c6:	60bb      	str	r3, [r7, #8]
 80057c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ca:	2301      	movs	r3, #1
 80057cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ce:	4b82      	ldr	r3, [pc, #520]	; (80059d8 <HAL_RCC_OscConfig+0x4d0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d118      	bne.n	800580c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80057da:	4b7f      	ldr	r3, [pc, #508]	; (80059d8 <HAL_RCC_OscConfig+0x4d0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a7e      	ldr	r2, [pc, #504]	; (80059d8 <HAL_RCC_OscConfig+0x4d0>)
 80057e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057e6:	f7fe fabb 	bl	8003d60 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ee:	f7fe fab7 	bl	8003d60 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b64      	cmp	r3, #100	; 0x64
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e120      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005800:	4b75      	ldr	r3, [pc, #468]	; (80059d8 <HAL_RCC_OscConfig+0x4d0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0f0      	beq.n	80057ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d106      	bne.n	8005822 <HAL_RCC_OscConfig+0x31a>
 8005814:	4b6f      	ldr	r3, [pc, #444]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	4a6e      	ldr	r2, [pc, #440]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	6713      	str	r3, [r2, #112]	; 0x70
 8005820:	e02d      	b.n	800587e <HAL_RCC_OscConfig+0x376>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10c      	bne.n	8005844 <HAL_RCC_OscConfig+0x33c>
 800582a:	4b6a      	ldr	r3, [pc, #424]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 800582c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582e:	4a69      	ldr	r2, [pc, #420]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	6713      	str	r3, [r2, #112]	; 0x70
 8005836:	4b67      	ldr	r3, [pc, #412]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	4a66      	ldr	r2, [pc, #408]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 800583c:	f023 0304 	bic.w	r3, r3, #4
 8005840:	6713      	str	r3, [r2, #112]	; 0x70
 8005842:	e01c      	b.n	800587e <HAL_RCC_OscConfig+0x376>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b05      	cmp	r3, #5
 800584a:	d10c      	bne.n	8005866 <HAL_RCC_OscConfig+0x35e>
 800584c:	4b61      	ldr	r3, [pc, #388]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 800584e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005850:	4a60      	ldr	r2, [pc, #384]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005852:	f043 0304 	orr.w	r3, r3, #4
 8005856:	6713      	str	r3, [r2, #112]	; 0x70
 8005858:	4b5e      	ldr	r3, [pc, #376]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585c:	4a5d      	ldr	r2, [pc, #372]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	6713      	str	r3, [r2, #112]	; 0x70
 8005864:	e00b      	b.n	800587e <HAL_RCC_OscConfig+0x376>
 8005866:	4b5b      	ldr	r3, [pc, #364]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	4a5a      	ldr	r2, [pc, #360]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	6713      	str	r3, [r2, #112]	; 0x70
 8005872:	4b58      	ldr	r3, [pc, #352]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005876:	4a57      	ldr	r2, [pc, #348]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005878:	f023 0304 	bic.w	r3, r3, #4
 800587c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d015      	beq.n	80058b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005886:	f7fe fa6b 	bl	8003d60 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588c:	e00a      	b.n	80058a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fe fa67 	bl	8003d60 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	; 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e0ce      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a4:	4b4b      	ldr	r3, [pc, #300]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0ee      	beq.n	800588e <HAL_RCC_OscConfig+0x386>
 80058b0:	e014      	b.n	80058dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b2:	f7fe fa55 	bl	8003d60 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ba:	f7fe fa51 	bl	8003d60 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0b8      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d0:	4b40      	ldr	r3, [pc, #256]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1ee      	bne.n	80058ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e2:	4b3c      	ldr	r3, [pc, #240]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	4a3b      	ldr	r2, [pc, #236]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80058e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80a4 	beq.w	8005a40 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058f8:	4b36      	ldr	r3, [pc, #216]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 030c 	and.w	r3, r3, #12
 8005900:	2b08      	cmp	r3, #8
 8005902:	d06b      	beq.n	80059dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d149      	bne.n	80059a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590c:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a30      	ldr	r2, [pc, #192]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fe fa22 	bl	8003d60 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005920:	f7fe fa1e 	bl	8003d60 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e087      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005932:	4b28      	ldr	r3, [pc, #160]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	019b      	lsls	r3, r3, #6
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	3b01      	subs	r3, #1
 8005958:	041b      	lsls	r3, r3, #16
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	061b      	lsls	r3, r3, #24
 8005962:	4313      	orrs	r3, r2
 8005964:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005966:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800596a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800596c:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7fe f9f2 	bl	8003d60 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005980:	f7fe f9ee 	bl	8003d60 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e057      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x478>
 800599e:	e04f      	b.n	8005a40 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a0:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a0b      	ldr	r2, [pc, #44]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80059a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fe f9d8 	bl	8003d60 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b4:	f7fe f9d4 	bl	8003d60 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e03d      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c6:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <HAL_RCC_OscConfig+0x4cc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x4ac>
 80059d2:	e035      	b.n	8005a40 <HAL_RCC_OscConfig+0x538>
 80059d4:	40023800 	.word	0x40023800
 80059d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80059dc:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <HAL_RCC_OscConfig+0x544>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d028      	beq.n	8005a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d121      	bne.n	8005a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d11a      	bne.n	8005a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d111      	bne.n	8005a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	085b      	lsrs	r3, r3, #1
 8005a24:	3b01      	subs	r3, #1
 8005a26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d107      	bne.n	8005a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800

08005a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0d0      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a68:	4b6a      	ldr	r3, [pc, #424]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d910      	bls.n	8005a98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a76:	4b67      	ldr	r3, [pc, #412]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f023 020f 	bic.w	r2, r3, #15
 8005a7e:	4965      	ldr	r1, [pc, #404]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a86:	4b63      	ldr	r3, [pc, #396]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d001      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0b8      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d020      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ab0:	4b59      	ldr	r3, [pc, #356]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	4a58      	ldr	r2, [pc, #352]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005aba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ac8:	4b53      	ldr	r3, [pc, #332]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	4a52      	ldr	r2, [pc, #328]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005ace:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ad2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad4:	4b50      	ldr	r3, [pc, #320]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	494d      	ldr	r1, [pc, #308]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d040      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d107      	bne.n	8005b0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	4b47      	ldr	r3, [pc, #284]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d115      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e07f      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d107      	bne.n	8005b22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b12:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e073      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b22:	4b3d      	ldr	r3, [pc, #244]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e06b      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b32:	4b39      	ldr	r3, [pc, #228]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f023 0203 	bic.w	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	4936      	ldr	r1, [pc, #216]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b44:	f7fe f90c 	bl	8003d60 <HAL_GetTick>
 8005b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4a:	e00a      	b.n	8005b62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b4c:	f7fe f908 	bl	8003d60 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e053      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b62:	4b2d      	ldr	r3, [pc, #180]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 020c 	and.w	r2, r3, #12
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d1eb      	bne.n	8005b4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b74:	4b27      	ldr	r3, [pc, #156]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d210      	bcs.n	8005ba4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b82:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f023 020f 	bic.w	r2, r3, #15
 8005b8a:	4922      	ldr	r1, [pc, #136]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b92:	4b20      	ldr	r3, [pc, #128]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e032      	b.n	8005c0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d008      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bb0:	4b19      	ldr	r3, [pc, #100]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4916      	ldr	r1, [pc, #88]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bce:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	490e      	ldr	r1, [pc, #56]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005be2:	f000 f821 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8005be6:	4602      	mov	r2, r0
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	091b      	lsrs	r3, r3, #4
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	490a      	ldr	r1, [pc, #40]	; (8005c1c <HAL_RCC_ClockConfig+0x1cc>)
 8005bf4:	5ccb      	ldrb	r3, [r1, r3]
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <HAL_RCC_ClockConfig+0x1d0>)
 8005bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bfe:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <HAL_RCC_ClockConfig+0x1d4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fd ff0c 	bl	8003a20 <HAL_InitTick>

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40023c00 	.word	0x40023c00
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	08027584 	.word	0x08027584
 8005c20:	2000001c 	.word	0x2000001c
 8005c24:	20000020 	.word	0x20000020

08005c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c28:	b5b0      	push	{r4, r5, r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c2e:	2100      	movs	r1, #0
 8005c30:	6079      	str	r1, [r7, #4]
 8005c32:	2100      	movs	r1, #0
 8005c34:	60f9      	str	r1, [r7, #12]
 8005c36:	2100      	movs	r1, #0
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c3e:	4952      	ldr	r1, [pc, #328]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c40:	6889      	ldr	r1, [r1, #8]
 8005c42:	f001 010c 	and.w	r1, r1, #12
 8005c46:	2908      	cmp	r1, #8
 8005c48:	d00d      	beq.n	8005c66 <HAL_RCC_GetSysClockFreq+0x3e>
 8005c4a:	2908      	cmp	r1, #8
 8005c4c:	f200 8094 	bhi.w	8005d78 <HAL_RCC_GetSysClockFreq+0x150>
 8005c50:	2900      	cmp	r1, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_RCC_GetSysClockFreq+0x32>
 8005c54:	2904      	cmp	r1, #4
 8005c56:	d003      	beq.n	8005c60 <HAL_RCC_GetSysClockFreq+0x38>
 8005c58:	e08e      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c5a:	4b4c      	ldr	r3, [pc, #304]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x164>)
 8005c5c:	60bb      	str	r3, [r7, #8]
      break;
 8005c5e:	e08e      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c60:	4b4b      	ldr	r3, [pc, #300]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x168>)
 8005c62:	60bb      	str	r3, [r7, #8]
      break;
 8005c64:	e08b      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c66:	4948      	ldr	r1, [pc, #288]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c68:	6849      	ldr	r1, [r1, #4]
 8005c6a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005c6e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c70:	4945      	ldr	r1, [pc, #276]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c72:	6849      	ldr	r1, [r1, #4]
 8005c74:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	d024      	beq.n	8005cc6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c7c:	4942      	ldr	r1, [pc, #264]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c7e:	6849      	ldr	r1, [r1, #4]
 8005c80:	0989      	lsrs	r1, r1, #6
 8005c82:	4608      	mov	r0, r1
 8005c84:	f04f 0100 	mov.w	r1, #0
 8005c88:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005c8c:	f04f 0500 	mov.w	r5, #0
 8005c90:	ea00 0204 	and.w	r2, r0, r4
 8005c94:	ea01 0305 	and.w	r3, r1, r5
 8005c98:	493d      	ldr	r1, [pc, #244]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x168>)
 8005c9a:	fb01 f003 	mul.w	r0, r1, r3
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	fb01 f102 	mul.w	r1, r1, r2
 8005ca4:	1844      	adds	r4, r0, r1
 8005ca6:	493a      	ldr	r1, [pc, #232]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ca8:	fba2 0101 	umull	r0, r1, r2, r1
 8005cac:	1863      	adds	r3, r4, r1
 8005cae:	4619      	mov	r1, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	f7fa fff6 	bl	8000ca8 <__aeabi_uldivmod>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e04a      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cc6:	4b30      	ldr	r3, [pc, #192]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	099b      	lsrs	r3, r3, #6
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cd6:	f04f 0100 	mov.w	r1, #0
 8005cda:	ea02 0400 	and.w	r4, r2, r0
 8005cde:	ea03 0501 	and.w	r5, r3, r1
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	014b      	lsls	r3, r1, #5
 8005cf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cf4:	0142      	lsls	r2, r0, #5
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	1b00      	subs	r0, r0, r4
 8005cfc:	eb61 0105 	sbc.w	r1, r1, r5
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	018b      	lsls	r3, r1, #6
 8005d0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d0e:	0182      	lsls	r2, r0, #6
 8005d10:	1a12      	subs	r2, r2, r0
 8005d12:	eb63 0301 	sbc.w	r3, r3, r1
 8005d16:	f04f 0000 	mov.w	r0, #0
 8005d1a:	f04f 0100 	mov.w	r1, #0
 8005d1e:	00d9      	lsls	r1, r3, #3
 8005d20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d24:	00d0      	lsls	r0, r2, #3
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	1912      	adds	r2, r2, r4
 8005d2c:	eb45 0303 	adc.w	r3, r5, r3
 8005d30:	f04f 0000 	mov.w	r0, #0
 8005d34:	f04f 0100 	mov.w	r1, #0
 8005d38:	0299      	lsls	r1, r3, #10
 8005d3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d3e:	0290      	lsls	r0, r2, #10
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4610      	mov	r0, r2
 8005d46:	4619      	mov	r1, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	f7fa ffaa 	bl	8000ca8 <__aeabi_uldivmod>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4613      	mov	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	3301      	adds	r3, #1
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	60bb      	str	r3, [r7, #8]
      break;
 8005d76:	e002      	b.n	8005d7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d78:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x164>)
 8005d7a:	60bb      	str	r3, [r7, #8]
      break;
 8005d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bdb0      	pop	{r4, r5, r7, pc}
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	00f42400 	.word	0x00f42400
 8005d90:	017d7840 	.word	0x017d7840

08005d94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d98:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	2000001c 	.word	0x2000001c

08005dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005db0:	f7ff fff0 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005db4:	4602      	mov	r2, r0
 8005db6:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	0a9b      	lsrs	r3, r3, #10
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	4903      	ldr	r1, [pc, #12]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dc2:	5ccb      	ldrb	r3, [r1, r3]
 8005dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	08027594 	.word	0x08027594

08005dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005dd8:	f7ff ffdc 	bl	8005d94 <HAL_RCC_GetHCLKFreq>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	0b5b      	lsrs	r3, r3, #13
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	4903      	ldr	r1, [pc, #12]	; (8005df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dea:	5ccb      	ldrb	r3, [r1, r3]
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40023800 	.word	0x40023800
 8005df8:	08027594 	.word	0x08027594

08005dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	220f      	movs	r2, #15
 8005e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e0c:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <HAL_RCC_GetClockConfig+0x5c>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0203 	and.w	r2, r3, #3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e18:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <HAL_RCC_GetClockConfig+0x5c>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e24:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <HAL_RCC_GetClockConfig+0x5c>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005e30:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <HAL_RCC_GetClockConfig+0x5c>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	08db      	lsrs	r3, r3, #3
 8005e36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e3e:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <HAL_RCC_GetClockConfig+0x60>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 020f 	and.w	r2, r3, #15
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	601a      	str	r2, [r3, #0]
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	40023c00 	.word	0x40023c00

08005e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d012      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e88:	4b69      	ldr	r3, [pc, #420]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4a68      	ldr	r2, [pc, #416]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e92:	6093      	str	r3, [r2, #8]
 8005e94:	4b66      	ldr	r3, [pc, #408]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	4964      	ldr	r1, [pc, #400]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d017      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eba:	4b5d      	ldr	r3, [pc, #372]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec8:	4959      	ldr	r1, [pc, #356]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed8:	d101      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005eda:	2301      	movs	r3, #1
 8005edc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d017      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ef6:	4b4e      	ldr	r3, [pc, #312]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	494a      	ldr	r1, [pc, #296]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f14:	d101      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f16:	2301      	movs	r3, #1
 8005f18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005f22:	2301      	movs	r3, #1
 8005f24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005f32:	2301      	movs	r3, #1
 8005f34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 808b 	beq.w	800605a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f44:	4b3a      	ldr	r3, [pc, #232]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	4a39      	ldr	r2, [pc, #228]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8005f50:	4b37      	ldr	r3, [pc, #220]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f58:	60bb      	str	r3, [r7, #8]
 8005f5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f5c:	4b35      	ldr	r3, [pc, #212]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a34      	ldr	r2, [pc, #208]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f68:	f7fd fefa 	bl	8003d60 <HAL_GetTick>
 8005f6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f70:	f7fd fef6 	bl	8003d60 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b64      	cmp	r3, #100	; 0x64
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e357      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f82:	4b2c      	ldr	r3, [pc, #176]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f8e:	4b28      	ldr	r3, [pc, #160]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d035      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d02e      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fac:	4b20      	ldr	r3, [pc, #128]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fb6:	4b1e      	ldr	r3, [pc, #120]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fba:	4a1d      	ldr	r2, [pc, #116]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fc2:	4b1b      	ldr	r3, [pc, #108]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	4a1a      	ldr	r2, [pc, #104]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005fce:	4a18      	ldr	r2, [pc, #96]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fd4:	4b16      	ldr	r3, [pc, #88]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d114      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fd febe 	bl	8003d60 <HAL_GetTick>
 8005fe4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe6:	e00a      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe8:	f7fd feba 	bl	8003d60 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e319      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ffe:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0ee      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006016:	d111      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006024:	4b04      	ldr	r3, [pc, #16]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006026:	400b      	ands	r3, r1
 8006028:	4901      	ldr	r1, [pc, #4]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602a:	4313      	orrs	r3, r2
 800602c:	608b      	str	r3, [r1, #8]
 800602e:	e00b      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006030:	40023800 	.word	0x40023800
 8006034:	40007000 	.word	0x40007000
 8006038:	0ffffcff 	.word	0x0ffffcff
 800603c:	4bb1      	ldr	r3, [pc, #708]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4ab0      	ldr	r2, [pc, #704]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006042:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006046:	6093      	str	r3, [r2, #8]
 8006048:	4bae      	ldr	r3, [pc, #696]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800604a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006054:	49ab      	ldr	r1, [pc, #684]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006056:	4313      	orrs	r3, r2
 8006058:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2b00      	cmp	r3, #0
 8006064:	d010      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006066:	4ba7      	ldr	r3, [pc, #668]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800606c:	4aa5      	ldr	r2, [pc, #660]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800606e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006072:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006076:	4ba3      	ldr	r3, [pc, #652]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006078:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	49a0      	ldr	r1, [pc, #640]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006094:	4b9b      	ldr	r3, [pc, #620]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a2:	4998      	ldr	r1, [pc, #608]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060b6:	4b93      	ldr	r3, [pc, #588]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060c4:	498f      	ldr	r1, [pc, #572]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060d8:	4b8a      	ldr	r3, [pc, #552]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e6:	4987      	ldr	r1, [pc, #540]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060fa:	4b82      	ldr	r3, [pc, #520]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006100:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006108:	497e      	ldr	r1, [pc, #504]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800611c:	4b79      	ldr	r3, [pc, #484]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006122:	f023 0203 	bic.w	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612a:	4976      	ldr	r1, [pc, #472]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800613e:	4b71      	ldr	r3, [pc, #452]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006144:	f023 020c 	bic.w	r2, r3, #12
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614c:	496d      	ldr	r1, [pc, #436]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006160:	4b68      	ldr	r3, [pc, #416]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006166:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616e:	4965      	ldr	r1, [pc, #404]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006182:	4b60      	ldr	r3, [pc, #384]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006188:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006190:	495c      	ldr	r1, [pc, #368]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061a4:	4b57      	ldr	r3, [pc, #348]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b2:	4954      	ldr	r1, [pc, #336]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80061c6:	4b4f      	ldr	r3, [pc, #316]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d4:	494b      	ldr	r1, [pc, #300]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80061e8:	4b46      	ldr	r3, [pc, #280]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f6:	4943      	ldr	r1, [pc, #268]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800620a:	4b3e      	ldr	r3, [pc, #248]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800620c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006218:	493a      	ldr	r1, [pc, #232]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800622c:	4b35      	ldr	r3, [pc, #212]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800623a:	4932      	ldr	r1, [pc, #200]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d011      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800624e:	4b2d      	ldr	r3, [pc, #180]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006254:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800625c:	4929      	ldr	r1, [pc, #164]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800626c:	d101      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800626e:	2301      	movs	r3, #1
 8006270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800627e:	2301      	movs	r3, #1
 8006280:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800628e:	4b1d      	ldr	r3, [pc, #116]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006294:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800629c:	4919      	ldr	r1, [pc, #100]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062b0:	4b14      	ldr	r3, [pc, #80]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c0:	4910      	ldr	r1, [pc, #64]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d006      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 80d9 	beq.w	800648e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a08      	ldr	r2, [pc, #32]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e8:	f7fd fd3a 	bl	8003d60 <HAL_GetTick>
 80062ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062ee:	e00b      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062f0:	f7fd fd36 	bl	8003d60 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b64      	cmp	r3, #100	; 0x64
 80062fc:	d904      	bls.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e197      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006302:	bf00      	nop
 8006304:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006308:	4b6c      	ldr	r3, [pc, #432]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1ed      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d021      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006324:	2b00      	cmp	r3, #0
 8006326:	d11d      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006328:	4b64      	ldr	r3, [pc, #400]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800632a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800632e:	0c1b      	lsrs	r3, r3, #16
 8006330:	f003 0303 	and.w	r3, r3, #3
 8006334:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006336:	4b61      	ldr	r3, [pc, #388]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800633c:	0e1b      	lsrs	r3, r3, #24
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	019a      	lsls	r2, r3, #6
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	431a      	orrs	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	061b      	lsls	r3, r3, #24
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	071b      	lsls	r3, r3, #28
 800635c:	4957      	ldr	r1, [pc, #348]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006378:	d00a      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006382:	2b00      	cmp	r3, #0
 8006384:	d02e      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800638e:	d129      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006390:	4b4a      	ldr	r3, [pc, #296]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006396:	0c1b      	lsrs	r3, r3, #16
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800639e:	4b47      	ldr	r3, [pc, #284]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a4:	0f1b      	lsrs	r3, r3, #28
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	019a      	lsls	r2, r3, #6
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	041b      	lsls	r3, r3, #16
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	061b      	lsls	r3, r3, #24
 80063be:	431a      	orrs	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	071b      	lsls	r3, r3, #28
 80063c4:	493d      	ldr	r1, [pc, #244]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80063cc:	4b3b      	ldr	r3, [pc, #236]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063d2:	f023 021f 	bic.w	r2, r3, #31
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	3b01      	subs	r3, #1
 80063dc:	4937      	ldr	r1, [pc, #220]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01d      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063f0:	4b32      	ldr	r3, [pc, #200]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f6:	0e1b      	lsrs	r3, r3, #24
 80063f8:	f003 030f 	and.w	r3, r3, #15
 80063fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063fe:	4b2f      	ldr	r3, [pc, #188]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006404:	0f1b      	lsrs	r3, r3, #28
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	019a      	lsls	r2, r3, #6
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	431a      	orrs	r2, r3
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	061b      	lsls	r3, r3, #24
 800641e:	431a      	orrs	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	071b      	lsls	r3, r3, #28
 8006424:	4925      	ldr	r1, [pc, #148]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d011      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	019a      	lsls	r2, r3, #6
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	041b      	lsls	r3, r3, #16
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	061b      	lsls	r3, r3, #24
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	071b      	lsls	r3, r3, #28
 8006454:	4919      	ldr	r1, [pc, #100]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800645c:	4b17      	ldr	r3, [pc, #92]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a16      	ldr	r2, [pc, #88]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006462:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006468:	f7fd fc7a 	bl	8003d60 <HAL_GetTick>
 800646c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800646e:	e008      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006470:	f7fd fc76 	bl	8003d60 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b64      	cmp	r3, #100	; 0x64
 800647c:	d901      	bls.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e0d7      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006482:	4b0e      	ldr	r3, [pc, #56]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d0f0      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	2b01      	cmp	r3, #1
 8006492:	f040 80cd 	bne.w	8006630 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006496:	4b09      	ldr	r3, [pc, #36]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a08      	ldr	r2, [pc, #32]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800649c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a2:	f7fd fc5d 	bl	8003d60 <HAL_GetTick>
 80064a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064a8:	e00a      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064aa:	f7fd fc59 	bl	8003d60 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b64      	cmp	r3, #100	; 0x64
 80064b6:	d903      	bls.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e0ba      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80064bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064c0:	4b5e      	ldr	r3, [pc, #376]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064cc:	d0ed      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d009      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d02e      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d12a      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80064f6:	4b51      	ldr	r3, [pc, #324]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fc:	0c1b      	lsrs	r3, r3, #16
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006504:	4b4d      	ldr	r3, [pc, #308]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650a:	0f1b      	lsrs	r3, r3, #28
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	019a      	lsls	r2, r3, #6
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	061b      	lsls	r3, r3, #24
 8006524:	431a      	orrs	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	071b      	lsls	r3, r3, #28
 800652a:	4944      	ldr	r1, [pc, #272]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006532:	4b42      	ldr	r3, [pc, #264]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006538:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	3b01      	subs	r3, #1
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	493d      	ldr	r1, [pc, #244]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d022      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800655c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006560:	d11d      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006562:	4b36      	ldr	r3, [pc, #216]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006568:	0e1b      	lsrs	r3, r3, #24
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006570:	4b32      	ldr	r3, [pc, #200]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	0f1b      	lsrs	r3, r3, #28
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	019a      	lsls	r2, r3, #6
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	041b      	lsls	r3, r3, #16
 800658a:	431a      	orrs	r2, r3
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	061b      	lsls	r3, r3, #24
 8006590:	431a      	orrs	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	071b      	lsls	r3, r3, #28
 8006596:	4929      	ldr	r1, [pc, #164]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006598:	4313      	orrs	r3, r2
 800659a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d028      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065aa:	4b24      	ldr	r3, [pc, #144]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b0:	0e1b      	lsrs	r3, r3, #24
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065b8:	4b20      	ldr	r3, [pc, #128]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065be:	0c1b      	lsrs	r3, r3, #16
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	019a      	lsls	r2, r3, #6
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	041b      	lsls	r3, r3, #16
 80065d0:	431a      	orrs	r2, r3
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	061b      	lsls	r3, r3, #24
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	071b      	lsls	r3, r3, #28
 80065de:	4917      	ldr	r1, [pc, #92]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80065e6:	4b15      	ldr	r3, [pc, #84]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	4911      	ldr	r1, [pc, #68]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a0e      	ldr	r2, [pc, #56]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006608:	f7fd fbaa 	bl	8003d60 <HAL_GetTick>
 800660c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800660e:	e008      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006610:	f7fd fba6 	bl	8003d60 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	; 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e007      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006622:	4b06      	ldr	r3, [pc, #24]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800662a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800662e:	d1ef      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3720      	adds	r7, #32
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	40023800 	.word	0x40023800

08006640 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e081      	b.n	8006756 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	7f5b      	ldrb	r3, [r3, #29]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d105      	bne.n	8006668 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fd f93c 	bl	80038e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	22ca      	movs	r2, #202	; 0xca
 8006674:	625a      	str	r2, [r3, #36]	; 0x24
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2253      	movs	r2, #83	; 0x53
 800667c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 faac 	bl	8006bdc <RTC_EnterInitMode>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	22ff      	movs	r2, #255	; 0xff
 8006690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2204      	movs	r2, #4
 8006696:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e05c      	b.n	8006756 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6899      	ldr	r1, [r3, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	4b2e      	ldr	r3, [pc, #184]	; (8006760 <HAL_RTC_Init+0x120>)
 80066a8:	400b      	ands	r3, r1
 80066aa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6899      	ldr	r1, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	68d2      	ldr	r2, [r2, #12]
 80066d2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6919      	ldr	r1, [r3, #16]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	041a      	lsls	r2, r3, #16
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066f6:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10e      	bne.n	8006724 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa40 	bl	8006b8c <HAL_RTC_WaitForSynchro>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d008      	beq.n	8006724 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	22ff      	movs	r2, #255	; 0xff
 8006718:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2204      	movs	r2, #4
 800671e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e018      	b.n	8006756 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0208 	bic.w	r2, r2, #8
 8006732:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	22ff      	movs	r2, #255	; 0xff
 800674c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006754:	2300      	movs	r3, #0
  }
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	ff8fffbf 	.word	0xff8fffbf

08006764 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	7f1b      	ldrb	r3, [r3, #28]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_RTC_SetTime+0x1c>
 800677c:	2302      	movs	r3, #2
 800677e:	e0a8      	b.n	80068d2 <HAL_RTC_SetTime+0x16e>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2202      	movs	r2, #2
 800678a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d126      	bne.n	80067e0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d102      	bne.n	80067a6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2200      	movs	r2, #0
 80067a4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fa42 	bl	8006c34 <RTC_ByteToBcd2>
 80067b0:	4603      	mov	r3, r0
 80067b2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fa3b 	bl	8006c34 <RTC_ByteToBcd2>
 80067be:	4603      	mov	r3, r0
 80067c0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80067c2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	789b      	ldrb	r3, [r3, #2]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fa33 	bl	8006c34 <RTC_ByteToBcd2>
 80067ce:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80067d0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	7b1b      	ldrb	r3, [r3, #12]
 80067d8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	e018      	b.n	8006812 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2200      	movs	r2, #0
 80067f2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006800:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006806:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	7b1b      	ldrb	r3, [r3, #12]
 800680c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800680e:	4313      	orrs	r3, r2
 8006810:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	22ca      	movs	r2, #202	; 0xca
 8006818:	625a      	str	r2, [r3, #36]	; 0x24
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2253      	movs	r2, #83	; 0x53
 8006820:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 f9da 	bl	8006bdc <RTC_EnterInitMode>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00b      	beq.n	8006846 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	22ff      	movs	r2, #255	; 0xff
 8006834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2204      	movs	r2, #4
 800683a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e045      	b.n	80068d2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	6979      	ldr	r1, [r7, #20]
 800684c:	4b23      	ldr	r3, [pc, #140]	; (80068dc <HAL_RTC_SetTime+0x178>)
 800684e:	400b      	ands	r3, r1
 8006850:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006860:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6899      	ldr	r1, [r3, #8]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	431a      	orrs	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006888:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d111      	bne.n	80068bc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f977 	bl	8006b8c <HAL_RTC_WaitForSynchro>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00b      	beq.n	80068bc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	22ff      	movs	r2, #255	; 0xff
 80068aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2204      	movs	r2, #4
 80068b0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e00a      	b.n	80068d2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	22ff      	movs	r2, #255	; 0xff
 80068c2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80068d0:	2300      	movs	r3, #0
  }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd90      	pop	{r4, r7, pc}
 80068da:	bf00      	nop
 80068dc:	007f7f7f 	.word	0x007f7f7f

080068e0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4b22      	ldr	r3, [pc, #136]	; (8006998 <HAL_RTC_GetTime+0xb8>)
 8006910:	4013      	ands	r3, r2
 8006912:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	b2db      	uxtb	r3, r3
 800691a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800691e:	b2da      	uxtb	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	0a1b      	lsrs	r3, r3, #8
 8006928:	b2db      	uxtb	r3, r3
 800692a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692e:	b2da      	uxtb	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800693c:	b2da      	uxtb	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	0c1b      	lsrs	r3, r3, #16
 8006946:	b2db      	uxtb	r3, r3
 8006948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694c:	b2da      	uxtb	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d11a      	bne.n	800698e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	4618      	mov	r0, r3
 800695e:	f000 f987 	bl	8006c70 <RTC_Bcd2ToByte>
 8006962:	4603      	mov	r3, r0
 8006964:	461a      	mov	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f97e 	bl	8006c70 <RTC_Bcd2ToByte>
 8006974:	4603      	mov	r3, r0
 8006976:	461a      	mov	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	789b      	ldrb	r3, [r3, #2]
 8006980:	4618      	mov	r0, r3
 8006982:	f000 f975 	bl	8006c70 <RTC_Bcd2ToByte>
 8006986:	4603      	mov	r3, r0
 8006988:	461a      	mov	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	007f7f7f 	.word	0x007f7f7f

0800699c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800699c:	b590      	push	{r4, r7, lr}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	7f1b      	ldrb	r3, [r3, #28]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_RTC_SetDate+0x1c>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e092      	b.n	8006ade <HAL_RTC_SetDate+0x142>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2202      	movs	r2, #2
 80069c2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10e      	bne.n	80069e8 <HAL_RTC_SetDate+0x4c>
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	f003 0310 	and.w	r3, r3, #16
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d008      	beq.n	80069e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	f023 0310 	bic.w	r3, r3, #16
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	330a      	adds	r3, #10
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d11c      	bne.n	8006a28 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	78db      	ldrb	r3, [r3, #3]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f91e 	bl	8006c34 <RTC_ByteToBcd2>
 80069f8:	4603      	mov	r3, r0
 80069fa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 f917 	bl	8006c34 <RTC_ByteToBcd2>
 8006a06:	4603      	mov	r3, r0
 8006a08:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006a0a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	789b      	ldrb	r3, [r3, #2]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 f90f 	bl	8006c34 <RTC_ByteToBcd2>
 8006a16:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006a18:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	e00e      	b.n	8006a46 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	78db      	ldrb	r3, [r3, #3]
 8006a2c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006a34:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8006a3a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	22ca      	movs	r2, #202	; 0xca
 8006a4c:	625a      	str	r2, [r3, #36]	; 0x24
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2253      	movs	r2, #83	; 0x53
 8006a54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f8c0 	bl	8006bdc <RTC_EnterInitMode>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	22ff      	movs	r2, #255	; 0xff
 8006a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e031      	b.n	8006ade <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	6979      	ldr	r1, [r7, #20]
 8006a80:	4b19      	ldr	r3, [pc, #100]	; (8006ae8 <HAL_RTC_SetDate+0x14c>)
 8006a82:	400b      	ands	r3, r1
 8006a84:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a94:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d111      	bne.n	8006ac8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f871 	bl	8006b8c <HAL_RTC_WaitForSynchro>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	22ff      	movs	r2, #255	; 0xff
 8006ab6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2204      	movs	r2, #4
 8006abc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e00a      	b.n	8006ade <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	22ff      	movs	r2, #255	; 0xff
 8006ace:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006adc:	2300      	movs	r3, #0
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd90      	pop	{r4, r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	00ffff3f 	.word	0x00ffff3f

08006aec <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	4b21      	ldr	r3, [pc, #132]	; (8006b88 <HAL_RTC_GetDate+0x9c>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	0a1b      	lsrs	r3, r3, #8
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f003 031f 	and.w	r3, r3, #31
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	0b5b      	lsrs	r3, r3, #13
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d11a      	bne.n	8006b7c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	78db      	ldrb	r3, [r3, #3]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 f890 	bl	8006c70 <RTC_Bcd2ToByte>
 8006b50:	4603      	mov	r3, r0
 8006b52:	461a      	mov	r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 f887 	bl	8006c70 <RTC_Bcd2ToByte>
 8006b62:	4603      	mov	r3, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	789b      	ldrb	r3, [r3, #2]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 f87e 	bl	8006c70 <RTC_Bcd2ToByte>
 8006b74:	4603      	mov	r3, r0
 8006b76:	461a      	mov	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	00ffff3f 	.word	0x00ffff3f

08006b8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ba6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ba8:	f7fd f8da 	bl	8003d60 <HAL_GetTick>
 8006bac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006bae:	e009      	b.n	8006bc4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006bb0:	f7fd f8d6 	bl	8003d60 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e007      	b.n	8006bd4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0ee      	beq.n	8006bb0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d119      	bne.n	8006c2a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c00:	f7fd f8ae 	bl	8003d60 <HAL_GetTick>
 8006c04:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c06:	e009      	b.n	8006c1c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006c08:	f7fd f8aa 	bl	8003d60 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c16:	d901      	bls.n	8006c1c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e007      	b.n	8006c2c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0ee      	beq.n	8006c08 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8006c42:	e005      	b.n	8006c50 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3301      	adds	r3, #1
 8006c48:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	3b0a      	subs	r3, #10
 8006c4e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	2b09      	cmp	r3, #9
 8006c54:	d8f6      	bhi.n	8006c44 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	b2db      	uxtb	r3, r3
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	091b      	lsrs	r3, r3, #4
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	4413      	add	r3, r2
 8006c9e:	b2db      	uxtb	r3, r3
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e049      	b.n	8006d52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f841 	bl	8006d5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f000 fa00 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d001      	beq.n	8006d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e054      	b.n	8006e32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0201 	orr.w	r2, r2, #1
 8006d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a26      	ldr	r2, [pc, #152]	; (8006e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d022      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x80>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db2:	d01d      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x80>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a22      	ldr	r2, [pc, #136]	; (8006e44 <HAL_TIM_Base_Start_IT+0xd4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d018      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x80>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a21      	ldr	r2, [pc, #132]	; (8006e48 <HAL_TIM_Base_Start_IT+0xd8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d013      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x80>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a1f      	ldr	r2, [pc, #124]	; (8006e4c <HAL_TIM_Base_Start_IT+0xdc>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00e      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x80>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <HAL_TIM_Base_Start_IT+0xe0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d009      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x80>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a1c      	ldr	r2, [pc, #112]	; (8006e54 <HAL_TIM_Base_Start_IT+0xe4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x80>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a1b      	ldr	r2, [pc, #108]	; (8006e58 <HAL_TIM_Base_Start_IT+0xe8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d115      	bne.n	8006e1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	4b19      	ldr	r3, [pc, #100]	; (8006e5c <HAL_TIM_Base_Start_IT+0xec>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b06      	cmp	r3, #6
 8006e00:	d015      	beq.n	8006e2e <HAL_TIM_Base_Start_IT+0xbe>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e08:	d011      	beq.n	8006e2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0201 	orr.w	r2, r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1a:	e008      	b.n	8006e2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0201 	orr.w	r2, r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	e000      	b.n	8006e30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40010000 	.word	0x40010000
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800
 8006e4c:	40000c00 	.word	0x40000c00
 8006e50:	40010400 	.word	0x40010400
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40001800 	.word	0x40001800
 8006e5c:	00010007 	.word	0x00010007

08006e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d122      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d11b      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0202 	mvn.w	r2, #2
 8006e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f905 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006ea8:	e005      	b.n	8006eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f8f7 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f908 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0304 	and.w	r3, r3, #4
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d122      	bne.n	8006f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d11b      	bne.n	8006f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0204 	mvn.w	r2, #4
 8006ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f8db 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006efc:	e005      	b.n	8006f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f8cd 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f8de 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b08      	cmp	r3, #8
 8006f1c:	d122      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d11b      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0208 	mvn.w	r2, #8
 8006f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f003 0303 	and.w	r3, r3, #3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f8b1 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006f50:	e005      	b.n	8006f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f8a3 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f8b4 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	d122      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f003 0310 	and.w	r3, r3, #16
 8006f7c:	2b10      	cmp	r3, #16
 8006f7e:	d11b      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0210 	mvn.w	r2, #16
 8006f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f887 	bl	80070b2 <HAL_TIM_IC_CaptureCallback>
 8006fa4:	e005      	b.n	8006fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f879 	bl	800709e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f88a 	bl	80070c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d10e      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d107      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f06f 0201 	mvn.w	r2, #1
 8006fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fb fc4a 	bl	8002878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fee:	2b80      	cmp	r3, #128	; 0x80
 8006ff0:	d10e      	bne.n	8007010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ffc:	2b80      	cmp	r3, #128	; 0x80
 8006ffe:	d107      	bne.n	8007010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f91a 	bl	8007244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701e:	d10e      	bne.n	800703e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702a:	2b80      	cmp	r3, #128	; 0x80
 800702c:	d107      	bne.n	800703e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f90d 	bl	8007258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007048:	2b40      	cmp	r3, #64	; 0x40
 800704a:	d10e      	bne.n	800706a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007056:	2b40      	cmp	r3, #64	; 0x40
 8007058:	d107      	bne.n	800706a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f838 	bl	80070da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b20      	cmp	r3, #32
 8007076:	d10e      	bne.n	8007096 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b20      	cmp	r3, #32
 8007084:	d107      	bne.n	8007096 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f06f 0220 	mvn.w	r2, #32
 800708e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f8cd 	bl	8007230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
	...

080070f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a40      	ldr	r2, [pc, #256]	; (8007204 <TIM_Base_SetConfig+0x114>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d013      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710e:	d00f      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a3d      	ldr	r2, [pc, #244]	; (8007208 <TIM_Base_SetConfig+0x118>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00b      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a3c      	ldr	r2, [pc, #240]	; (800720c <TIM_Base_SetConfig+0x11c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d007      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a3b      	ldr	r2, [pc, #236]	; (8007210 <TIM_Base_SetConfig+0x120>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a3a      	ldr	r2, [pc, #232]	; (8007214 <TIM_Base_SetConfig+0x124>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d108      	bne.n	8007142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a2f      	ldr	r2, [pc, #188]	; (8007204 <TIM_Base_SetConfig+0x114>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d02b      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007150:	d027      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a2c      	ldr	r2, [pc, #176]	; (8007208 <TIM_Base_SetConfig+0x118>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d023      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a2b      	ldr	r2, [pc, #172]	; (800720c <TIM_Base_SetConfig+0x11c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d01f      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a2a      	ldr	r2, [pc, #168]	; (8007210 <TIM_Base_SetConfig+0x120>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d01b      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a29      	ldr	r2, [pc, #164]	; (8007214 <TIM_Base_SetConfig+0x124>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d017      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a28      	ldr	r2, [pc, #160]	; (8007218 <TIM_Base_SetConfig+0x128>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d013      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a27      	ldr	r2, [pc, #156]	; (800721c <TIM_Base_SetConfig+0x12c>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00f      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a26      	ldr	r2, [pc, #152]	; (8007220 <TIM_Base_SetConfig+0x130>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00b      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a25      	ldr	r2, [pc, #148]	; (8007224 <TIM_Base_SetConfig+0x134>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d007      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a24      	ldr	r2, [pc, #144]	; (8007228 <TIM_Base_SetConfig+0x138>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d003      	beq.n	80071a2 <TIM_Base_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a23      	ldr	r2, [pc, #140]	; (800722c <TIM_Base_SetConfig+0x13c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d108      	bne.n	80071b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a0a      	ldr	r2, [pc, #40]	; (8007204 <TIM_Base_SetConfig+0x114>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_Base_SetConfig+0xf8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a0c      	ldr	r2, [pc, #48]	; (8007214 <TIM_Base_SetConfig+0x124>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d103      	bne.n	80071f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	615a      	str	r2, [r3, #20]
}
 80071f6:	bf00      	nop
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40010000 	.word	0x40010000
 8007208:	40000400 	.word	0x40000400
 800720c:	40000800 	.word	0x40000800
 8007210:	40000c00 	.word	0x40000c00
 8007214:	40010400 	.word	0x40010400
 8007218:	40014000 	.word	0x40014000
 800721c:	40014400 	.word	0x40014400
 8007220:	40014800 	.word	0x40014800
 8007224:	40001800 	.word	0x40001800
 8007228:	40001c00 	.word	0x40001c00
 800722c:	40002000 	.word	0x40002000

08007230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e040      	b.n	8007300 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007282:	2b00      	cmp	r3, #0
 8007284:	d106      	bne.n	8007294 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fc fb40 	bl	8003914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2224      	movs	r2, #36	; 0x24
 8007298:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0201 	bic.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fc5c 	bl	8007b68 <UART_SetConfig>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d101      	bne.n	80072ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e022      	b.n	8007300 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 feb2 	bl	800802c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689a      	ldr	r2, [r3, #8]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 ff39 	bl	8008170 <UART_CheckIdleState>
 80072fe:	4603      	mov	r3, r0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08a      	sub	sp, #40	; 0x28
 800730c:	af02      	add	r7, sp, #8
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	4613      	mov	r3, r2
 8007316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800731c:	2b20      	cmp	r3, #32
 800731e:	f040 8081 	bne.w	8007424 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <HAL_UART_Transmit+0x26>
 8007328:	88fb      	ldrh	r3, [r7, #6]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e079      	b.n	8007426 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <HAL_UART_Transmit+0x38>
 800733c:	2302      	movs	r3, #2
 800733e:	e072      	b.n	8007426 <HAL_UART_Transmit+0x11e>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2221      	movs	r2, #33	; 0x21
 8007354:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007356:	f7fc fd03 	bl	8003d60 <HAL_GetTick>
 800735a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	88fa      	ldrh	r2, [r7, #6]
 8007368:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007374:	d108      	bne.n	8007388 <HAL_UART_Transmit+0x80>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d104      	bne.n	8007388 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800737e:	2300      	movs	r3, #0
 8007380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	e003      	b.n	8007390 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800738c:	2300      	movs	r3, #0
 800738e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007398:	e02c      	b.n	80073f4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2200      	movs	r2, #0
 80073a2:	2180      	movs	r1, #128	; 0x80
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 ff16 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e038      	b.n	8007426 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	3302      	adds	r3, #2
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	e007      	b.n	80073e2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	781a      	ldrb	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	3301      	adds	r3, #1
 80073e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1cc      	bne.n	800739a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2200      	movs	r2, #0
 8007408:	2140      	movs	r1, #64	; 0x40
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fee3 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e005      	b.n	8007426 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	e000      	b.n	8007426 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007424:	2302      	movs	r3, #2
  }
}
 8007426:	4618      	mov	r0, r3
 8007428:	3720      	adds	r7, #32
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007430:	b480      	push	{r7}
 8007432:	b08b      	sub	sp, #44	; 0x2c
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007442:	2b20      	cmp	r3, #32
 8007444:	d156      	bne.n	80074f4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <HAL_UART_Transmit_IT+0x22>
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e04f      	b.n	80074f6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_UART_Transmit_IT+0x34>
 8007460:	2302      	movs	r3, #2
 8007462:	e048      	b.n	80074f6 <HAL_UART_Transmit_IT+0xc6>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	88fa      	ldrh	r2, [r7, #6]
 8007476:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	88fa      	ldrh	r2, [r7, #6]
 800747e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2221      	movs	r2, #33	; 0x21
 8007494:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749e:	d107      	bne.n	80074b0 <HAL_UART_Transmit_IT+0x80>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4a16      	ldr	r2, [pc, #88]	; (8007504 <HAL_UART_Transmit_IT+0xd4>)
 80074ac:	669a      	str	r2, [r3, #104]	; 0x68
 80074ae:	e002      	b.n	80074b6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4a15      	ldr	r2, [pc, #84]	; (8007508 <HAL_UART_Transmit_IT+0xd8>)
 80074b4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	e853 3f00 	ldrex	r3, [r3]
 80074ca:	613b      	str	r3, [r7, #16]
   return(result);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	623b      	str	r3, [r7, #32]
 80074de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	69f9      	ldr	r1, [r7, #28]
 80074e2:	6a3a      	ldr	r2, [r7, #32]
 80074e4:	e841 2300 	strex	r3, r2, [r1]
 80074e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e6      	bne.n	80074be <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	e000      	b.n	80074f6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
  }
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	372c      	adds	r7, #44	; 0x2c
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	0800869d 	.word	0x0800869d
 8007508:	080085e7 	.word	0x080085e7

0800750c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08a      	sub	sp, #40	; 0x28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	4613      	mov	r3, r2
 8007518:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800751e:	2b20      	cmp	r3, #32
 8007520:	d13d      	bne.n	800759e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_UART_Receive_IT+0x22>
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e036      	b.n	80075a0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_UART_Receive_IT+0x34>
 800753c:	2302      	movs	r3, #2
 800753e:	e02f      	b.n	80075a0 <HAL_UART_Receive_IT+0x94>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d018      	beq.n	800758e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	613b      	str	r3, [r7, #16]
   return(result);
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	623b      	str	r3, [r7, #32]
 800757c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	69f9      	ldr	r1, [r7, #28]
 8007580:	6a3a      	ldr	r2, [r7, #32]
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	61bb      	str	r3, [r7, #24]
   return(result);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e6      	bne.n	800755c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800758e:	88fb      	ldrh	r3, [r7, #6]
 8007590:	461a      	mov	r2, r3
 8007592:	68b9      	ldr	r1, [r7, #8]
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fee3 	bl	8008360 <UART_Start_Receive_IT>
 800759a:	4603      	mov	r3, r0
 800759c:	e000      	b.n	80075a0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800759e:	2302      	movs	r3, #2
  }
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3728      	adds	r7, #40	; 0x28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b0ba      	sub	sp, #232	; 0xe8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80075d6:	4013      	ands	r3, r2
 80075d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d115      	bne.n	8007610 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00f      	beq.n	8007610 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f4:	f003 0320 	and.w	r3, r3, #32
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d009      	beq.n	8007610 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 828f 	beq.w	8007b24 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
      }
      return;
 800760e:	e289      	b.n	8007b24 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 8117 	beq.w	8007848 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800761a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007626:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800762a:	4b85      	ldr	r3, [pc, #532]	; (8007840 <HAL_UART_IRQHandler+0x298>)
 800762c:	4013      	ands	r3, r2
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 810a 	beq.w	8007848 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d011      	beq.n	8007664 <HAL_UART_IRQHandler+0xbc>
 8007640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2201      	movs	r2, #1
 8007652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800765a:	f043 0201 	orr.w	r2, r3, #1
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d011      	beq.n	8007694 <HAL_UART_IRQHandler+0xec>
 8007670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2202      	movs	r2, #2
 8007682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800768a:	f043 0204 	orr.w	r2, r3, #4
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d011      	beq.n	80076c4 <HAL_UART_IRQHandler+0x11c>
 80076a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2204      	movs	r2, #4
 80076b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076ba:	f043 0202 	orr.w	r2, r3, #2
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d017      	beq.n	8007700 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d4:	f003 0320 	and.w	r3, r3, #32
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d105      	bne.n	80076e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2208      	movs	r2, #8
 80076ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076f6:	f043 0208 	orr.w	r2, r3, #8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007708:	2b00      	cmp	r3, #0
 800770a:	d012      	beq.n	8007732 <HAL_UART_IRQHandler+0x18a>
 800770c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00c      	beq.n	8007732 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007728:	f043 0220 	orr.w	r2, r3, #32
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 81f5 	beq.w	8007b28 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00d      	beq.n	8007766 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800774a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800774e:	f003 0320 	and.w	r3, r3, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	d007      	beq.n	8007766 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800776c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b40      	cmp	r3, #64	; 0x40
 800777c:	d005      	beq.n	800778a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800777e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007782:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007786:	2b00      	cmp	r3, #0
 8007788:	d04f      	beq.n	800782a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 feb2 	bl	80084f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d141      	bne.n	8007822 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3308      	adds	r3, #8
 80077a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3308      	adds	r3, #8
 80077c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1d9      	bne.n	800779e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d013      	beq.n	800781a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f6:	4a13      	ldr	r2, [pc, #76]	; (8007844 <HAL_UART_IRQHandler+0x29c>)
 80077f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fc fc30 	bl	8004064 <HAL_DMA_Abort_IT>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d017      	beq.n	800783a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007814:	4610      	mov	r0, r2
 8007816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007818:	e00f      	b.n	800783a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f98e 	bl	8007b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007820:	e00b      	b.n	800783a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f98a 	bl	8007b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007828:	e007      	b.n	800783a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f986 	bl	8007b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007838:	e176      	b.n	8007b28 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783a:	bf00      	nop
    return;
 800783c:	e174      	b.n	8007b28 <HAL_UART_IRQHandler+0x580>
 800783e:	bf00      	nop
 8007840:	04000120 	.word	0x04000120
 8007844:	080085bb 	.word	0x080085bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784c:	2b01      	cmp	r3, #1
 800784e:	f040 8144 	bne.w	8007ada <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007856:	f003 0310 	and.w	r3, r3, #16
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 813d 	beq.w	8007ada <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007864:	f003 0310 	and.w	r3, r3, #16
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 8136 	beq.w	8007ada <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2210      	movs	r2, #16
 8007874:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007880:	2b40      	cmp	r3, #64	; 0x40
 8007882:	f040 80b2 	bne.w	80079ea <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007892:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 8148 	beq.w	8007b2c <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078a6:	429a      	cmp	r2, r3
 80078a8:	f080 8140 	bcs.w	8007b2c <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c0:	f000 8085 	beq.w	80079ce <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078d0:	e853 3f00 	ldrex	r3, [r3]
 80078d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1da      	bne.n	80078c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3308      	adds	r3, #8
 8007914:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800791e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007920:	f023 0301 	bic.w	r3, r3, #1
 8007924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3308      	adds	r3, #8
 800792e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007932:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007936:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800793a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e1      	bne.n	800790e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800795a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800795c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3308      	adds	r3, #8
 800796a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800796e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007970:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007974:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800797c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e3      	bne.n	800794a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2220      	movs	r2, #32
 8007986:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800799c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800799e:	f023 0310 	bic.w	r3, r3, #16
 80079a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80079b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e4      	bne.n	800798e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fc fadb 	bl	8003f84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079da:	b29b      	uxth	r3, r3
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	b29b      	uxth	r3, r3
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f8b4 	bl	8007b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079e8:	e0a0      	b.n	8007b2c <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8092 	beq.w	8007b30 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8007a0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 808d 	beq.w	8007b30 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a38:	647b      	str	r3, [r7, #68]	; 0x44
 8007a3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a40:	e841 2300 	strex	r3, r2, [r1]
 8007a44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1e4      	bne.n	8007a16 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3308      	adds	r3, #8
 8007a52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	f023 0301 	bic.w	r3, r3, #1
 8007a62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a70:	633a      	str	r2, [r7, #48]	; 0x30
 8007a72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e3      	bne.n	8007a4c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2220      	movs	r2, #32
 8007a88:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0310 	bic.w	r3, r3, #16
 8007aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ab8:	61fb      	str	r3, [r7, #28]
 8007aba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	69b9      	ldr	r1, [r7, #24]
 8007abe:	69fa      	ldr	r2, [r7, #28]
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e4      	bne.n	8007a96 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f83c 	bl	8007b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ad8:	e02a      	b.n	8007b30 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00e      	beq.n	8007b04 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d008      	beq.n	8007b04 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01c      	beq.n	8007b34 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
    }
    return;
 8007b02:	e017      	b.n	8007b34 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d012      	beq.n	8007b36 <HAL_UART_IRQHandler+0x58e>
 8007b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00c      	beq.n	8007b36 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fe1d 	bl	800875c <UART_EndTransmit_IT>
    return;
 8007b22:	e008      	b.n	8007b36 <HAL_UART_IRQHandler+0x58e>
      return;
 8007b24:	bf00      	nop
 8007b26:	e006      	b.n	8007b36 <HAL_UART_IRQHandler+0x58e>
    return;
 8007b28:	bf00      	nop
 8007b2a:	e004      	b.n	8007b36 <HAL_UART_IRQHandler+0x58e>
      return;
 8007b2c:	bf00      	nop
 8007b2e:	e002      	b.n	8007b36 <HAL_UART_IRQHandler+0x58e>
      return;
 8007b30:	bf00      	nop
 8007b32:	e000      	b.n	8007b36 <HAL_UART_IRQHandler+0x58e>
    return;
 8007b34:	bf00      	nop
  }

}
 8007b36:	37e8      	adds	r7, #232	; 0xe8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4ba7      	ldr	r3, [pc, #668]	; (8007e30 <UART_SetConfig+0x2c8>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6812      	ldr	r2, [r2, #0]
 8007b9a:	6979      	ldr	r1, [r7, #20]
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a95      	ldr	r2, [pc, #596]	; (8007e34 <UART_SetConfig+0x2cc>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d120      	bne.n	8007c26 <UART_SetConfig+0xbe>
 8007be4:	4b94      	ldr	r3, [pc, #592]	; (8007e38 <UART_SetConfig+0x2d0>)
 8007be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d816      	bhi.n	8007c20 <UART_SetConfig+0xb8>
 8007bf2:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <UART_SetConfig+0x90>)
 8007bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf8:	08007c09 	.word	0x08007c09
 8007bfc:	08007c15 	.word	0x08007c15
 8007c00:	08007c0f 	.word	0x08007c0f
 8007c04:	08007c1b 	.word	0x08007c1b
 8007c08:	2301      	movs	r3, #1
 8007c0a:	77fb      	strb	r3, [r7, #31]
 8007c0c:	e14f      	b.n	8007eae <UART_SetConfig+0x346>
 8007c0e:	2302      	movs	r3, #2
 8007c10:	77fb      	strb	r3, [r7, #31]
 8007c12:	e14c      	b.n	8007eae <UART_SetConfig+0x346>
 8007c14:	2304      	movs	r3, #4
 8007c16:	77fb      	strb	r3, [r7, #31]
 8007c18:	e149      	b.n	8007eae <UART_SetConfig+0x346>
 8007c1a:	2308      	movs	r3, #8
 8007c1c:	77fb      	strb	r3, [r7, #31]
 8007c1e:	e146      	b.n	8007eae <UART_SetConfig+0x346>
 8007c20:	2310      	movs	r3, #16
 8007c22:	77fb      	strb	r3, [r7, #31]
 8007c24:	e143      	b.n	8007eae <UART_SetConfig+0x346>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a84      	ldr	r2, [pc, #528]	; (8007e3c <UART_SetConfig+0x2d4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d132      	bne.n	8007c96 <UART_SetConfig+0x12e>
 8007c30:	4b81      	ldr	r3, [pc, #516]	; (8007e38 <UART_SetConfig+0x2d0>)
 8007c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c36:	f003 030c 	and.w	r3, r3, #12
 8007c3a:	2b0c      	cmp	r3, #12
 8007c3c:	d828      	bhi.n	8007c90 <UART_SetConfig+0x128>
 8007c3e:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <UART_SetConfig+0xdc>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c79 	.word	0x08007c79
 8007c48:	08007c91 	.word	0x08007c91
 8007c4c:	08007c91 	.word	0x08007c91
 8007c50:	08007c91 	.word	0x08007c91
 8007c54:	08007c85 	.word	0x08007c85
 8007c58:	08007c91 	.word	0x08007c91
 8007c5c:	08007c91 	.word	0x08007c91
 8007c60:	08007c91 	.word	0x08007c91
 8007c64:	08007c7f 	.word	0x08007c7f
 8007c68:	08007c91 	.word	0x08007c91
 8007c6c:	08007c91 	.word	0x08007c91
 8007c70:	08007c91 	.word	0x08007c91
 8007c74:	08007c8b 	.word	0x08007c8b
 8007c78:	2300      	movs	r3, #0
 8007c7a:	77fb      	strb	r3, [r7, #31]
 8007c7c:	e117      	b.n	8007eae <UART_SetConfig+0x346>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	77fb      	strb	r3, [r7, #31]
 8007c82:	e114      	b.n	8007eae <UART_SetConfig+0x346>
 8007c84:	2304      	movs	r3, #4
 8007c86:	77fb      	strb	r3, [r7, #31]
 8007c88:	e111      	b.n	8007eae <UART_SetConfig+0x346>
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	77fb      	strb	r3, [r7, #31]
 8007c8e:	e10e      	b.n	8007eae <UART_SetConfig+0x346>
 8007c90:	2310      	movs	r3, #16
 8007c92:	77fb      	strb	r3, [r7, #31]
 8007c94:	e10b      	b.n	8007eae <UART_SetConfig+0x346>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a69      	ldr	r2, [pc, #420]	; (8007e40 <UART_SetConfig+0x2d8>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d120      	bne.n	8007ce2 <UART_SetConfig+0x17a>
 8007ca0:	4b65      	ldr	r3, [pc, #404]	; (8007e38 <UART_SetConfig+0x2d0>)
 8007ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007caa:	2b30      	cmp	r3, #48	; 0x30
 8007cac:	d013      	beq.n	8007cd6 <UART_SetConfig+0x16e>
 8007cae:	2b30      	cmp	r3, #48	; 0x30
 8007cb0:	d814      	bhi.n	8007cdc <UART_SetConfig+0x174>
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d009      	beq.n	8007cca <UART_SetConfig+0x162>
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d810      	bhi.n	8007cdc <UART_SetConfig+0x174>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <UART_SetConfig+0x15c>
 8007cbe:	2b10      	cmp	r3, #16
 8007cc0:	d006      	beq.n	8007cd0 <UART_SetConfig+0x168>
 8007cc2:	e00b      	b.n	8007cdc <UART_SetConfig+0x174>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	77fb      	strb	r3, [r7, #31]
 8007cc8:	e0f1      	b.n	8007eae <UART_SetConfig+0x346>
 8007cca:	2302      	movs	r3, #2
 8007ccc:	77fb      	strb	r3, [r7, #31]
 8007cce:	e0ee      	b.n	8007eae <UART_SetConfig+0x346>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	77fb      	strb	r3, [r7, #31]
 8007cd4:	e0eb      	b.n	8007eae <UART_SetConfig+0x346>
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	77fb      	strb	r3, [r7, #31]
 8007cda:	e0e8      	b.n	8007eae <UART_SetConfig+0x346>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	77fb      	strb	r3, [r7, #31]
 8007ce0:	e0e5      	b.n	8007eae <UART_SetConfig+0x346>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a57      	ldr	r2, [pc, #348]	; (8007e44 <UART_SetConfig+0x2dc>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d120      	bne.n	8007d2e <UART_SetConfig+0x1c6>
 8007cec:	4b52      	ldr	r3, [pc, #328]	; (8007e38 <UART_SetConfig+0x2d0>)
 8007cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8007cf8:	d013      	beq.n	8007d22 <UART_SetConfig+0x1ba>
 8007cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8007cfc:	d814      	bhi.n	8007d28 <UART_SetConfig+0x1c0>
 8007cfe:	2b80      	cmp	r3, #128	; 0x80
 8007d00:	d009      	beq.n	8007d16 <UART_SetConfig+0x1ae>
 8007d02:	2b80      	cmp	r3, #128	; 0x80
 8007d04:	d810      	bhi.n	8007d28 <UART_SetConfig+0x1c0>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <UART_SetConfig+0x1a8>
 8007d0a:	2b40      	cmp	r3, #64	; 0x40
 8007d0c:	d006      	beq.n	8007d1c <UART_SetConfig+0x1b4>
 8007d0e:	e00b      	b.n	8007d28 <UART_SetConfig+0x1c0>
 8007d10:	2300      	movs	r3, #0
 8007d12:	77fb      	strb	r3, [r7, #31]
 8007d14:	e0cb      	b.n	8007eae <UART_SetConfig+0x346>
 8007d16:	2302      	movs	r3, #2
 8007d18:	77fb      	strb	r3, [r7, #31]
 8007d1a:	e0c8      	b.n	8007eae <UART_SetConfig+0x346>
 8007d1c:	2304      	movs	r3, #4
 8007d1e:	77fb      	strb	r3, [r7, #31]
 8007d20:	e0c5      	b.n	8007eae <UART_SetConfig+0x346>
 8007d22:	2308      	movs	r3, #8
 8007d24:	77fb      	strb	r3, [r7, #31]
 8007d26:	e0c2      	b.n	8007eae <UART_SetConfig+0x346>
 8007d28:	2310      	movs	r3, #16
 8007d2a:	77fb      	strb	r3, [r7, #31]
 8007d2c:	e0bf      	b.n	8007eae <UART_SetConfig+0x346>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a45      	ldr	r2, [pc, #276]	; (8007e48 <UART_SetConfig+0x2e0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d125      	bne.n	8007d84 <UART_SetConfig+0x21c>
 8007d38:	4b3f      	ldr	r3, [pc, #252]	; (8007e38 <UART_SetConfig+0x2d0>)
 8007d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d46:	d017      	beq.n	8007d78 <UART_SetConfig+0x210>
 8007d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d4c:	d817      	bhi.n	8007d7e <UART_SetConfig+0x216>
 8007d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d52:	d00b      	beq.n	8007d6c <UART_SetConfig+0x204>
 8007d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d58:	d811      	bhi.n	8007d7e <UART_SetConfig+0x216>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <UART_SetConfig+0x1fe>
 8007d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d62:	d006      	beq.n	8007d72 <UART_SetConfig+0x20a>
 8007d64:	e00b      	b.n	8007d7e <UART_SetConfig+0x216>
 8007d66:	2300      	movs	r3, #0
 8007d68:	77fb      	strb	r3, [r7, #31]
 8007d6a:	e0a0      	b.n	8007eae <UART_SetConfig+0x346>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	77fb      	strb	r3, [r7, #31]
 8007d70:	e09d      	b.n	8007eae <UART_SetConfig+0x346>
 8007d72:	2304      	movs	r3, #4
 8007d74:	77fb      	strb	r3, [r7, #31]
 8007d76:	e09a      	b.n	8007eae <UART_SetConfig+0x346>
 8007d78:	2308      	movs	r3, #8
 8007d7a:	77fb      	strb	r3, [r7, #31]
 8007d7c:	e097      	b.n	8007eae <UART_SetConfig+0x346>
 8007d7e:	2310      	movs	r3, #16
 8007d80:	77fb      	strb	r3, [r7, #31]
 8007d82:	e094      	b.n	8007eae <UART_SetConfig+0x346>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a30      	ldr	r2, [pc, #192]	; (8007e4c <UART_SetConfig+0x2e4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d125      	bne.n	8007dda <UART_SetConfig+0x272>
 8007d8e:	4b2a      	ldr	r3, [pc, #168]	; (8007e38 <UART_SetConfig+0x2d0>)
 8007d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d9c:	d017      	beq.n	8007dce <UART_SetConfig+0x266>
 8007d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007da2:	d817      	bhi.n	8007dd4 <UART_SetConfig+0x26c>
 8007da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da8:	d00b      	beq.n	8007dc2 <UART_SetConfig+0x25a>
 8007daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dae:	d811      	bhi.n	8007dd4 <UART_SetConfig+0x26c>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <UART_SetConfig+0x254>
 8007db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db8:	d006      	beq.n	8007dc8 <UART_SetConfig+0x260>
 8007dba:	e00b      	b.n	8007dd4 <UART_SetConfig+0x26c>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	77fb      	strb	r3, [r7, #31]
 8007dc0:	e075      	b.n	8007eae <UART_SetConfig+0x346>
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	77fb      	strb	r3, [r7, #31]
 8007dc6:	e072      	b.n	8007eae <UART_SetConfig+0x346>
 8007dc8:	2304      	movs	r3, #4
 8007dca:	77fb      	strb	r3, [r7, #31]
 8007dcc:	e06f      	b.n	8007eae <UART_SetConfig+0x346>
 8007dce:	2308      	movs	r3, #8
 8007dd0:	77fb      	strb	r3, [r7, #31]
 8007dd2:	e06c      	b.n	8007eae <UART_SetConfig+0x346>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	77fb      	strb	r3, [r7, #31]
 8007dd8:	e069      	b.n	8007eae <UART_SetConfig+0x346>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a1c      	ldr	r2, [pc, #112]	; (8007e50 <UART_SetConfig+0x2e8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d137      	bne.n	8007e54 <UART_SetConfig+0x2ec>
 8007de4:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <UART_SetConfig+0x2d0>)
 8007de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007df2:	d017      	beq.n	8007e24 <UART_SetConfig+0x2bc>
 8007df4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007df8:	d817      	bhi.n	8007e2a <UART_SetConfig+0x2c2>
 8007dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dfe:	d00b      	beq.n	8007e18 <UART_SetConfig+0x2b0>
 8007e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e04:	d811      	bhi.n	8007e2a <UART_SetConfig+0x2c2>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <UART_SetConfig+0x2aa>
 8007e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e0e:	d006      	beq.n	8007e1e <UART_SetConfig+0x2b6>
 8007e10:	e00b      	b.n	8007e2a <UART_SetConfig+0x2c2>
 8007e12:	2300      	movs	r3, #0
 8007e14:	77fb      	strb	r3, [r7, #31]
 8007e16:	e04a      	b.n	8007eae <UART_SetConfig+0x346>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	77fb      	strb	r3, [r7, #31]
 8007e1c:	e047      	b.n	8007eae <UART_SetConfig+0x346>
 8007e1e:	2304      	movs	r3, #4
 8007e20:	77fb      	strb	r3, [r7, #31]
 8007e22:	e044      	b.n	8007eae <UART_SetConfig+0x346>
 8007e24:	2308      	movs	r3, #8
 8007e26:	77fb      	strb	r3, [r7, #31]
 8007e28:	e041      	b.n	8007eae <UART_SetConfig+0x346>
 8007e2a:	2310      	movs	r3, #16
 8007e2c:	77fb      	strb	r3, [r7, #31]
 8007e2e:	e03e      	b.n	8007eae <UART_SetConfig+0x346>
 8007e30:	efff69f3 	.word	0xefff69f3
 8007e34:	40011000 	.word	0x40011000
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	40004400 	.word	0x40004400
 8007e40:	40004800 	.word	0x40004800
 8007e44:	40004c00 	.word	0x40004c00
 8007e48:	40005000 	.word	0x40005000
 8007e4c:	40011400 	.word	0x40011400
 8007e50:	40007800 	.word	0x40007800
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a71      	ldr	r2, [pc, #452]	; (8008020 <UART_SetConfig+0x4b8>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d125      	bne.n	8007eaa <UART_SetConfig+0x342>
 8007e5e:	4b71      	ldr	r3, [pc, #452]	; (8008024 <UART_SetConfig+0x4bc>)
 8007e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e6c:	d017      	beq.n	8007e9e <UART_SetConfig+0x336>
 8007e6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e72:	d817      	bhi.n	8007ea4 <UART_SetConfig+0x33c>
 8007e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e78:	d00b      	beq.n	8007e92 <UART_SetConfig+0x32a>
 8007e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7e:	d811      	bhi.n	8007ea4 <UART_SetConfig+0x33c>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <UART_SetConfig+0x324>
 8007e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e88:	d006      	beq.n	8007e98 <UART_SetConfig+0x330>
 8007e8a:	e00b      	b.n	8007ea4 <UART_SetConfig+0x33c>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	77fb      	strb	r3, [r7, #31]
 8007e90:	e00d      	b.n	8007eae <UART_SetConfig+0x346>
 8007e92:	2302      	movs	r3, #2
 8007e94:	77fb      	strb	r3, [r7, #31]
 8007e96:	e00a      	b.n	8007eae <UART_SetConfig+0x346>
 8007e98:	2304      	movs	r3, #4
 8007e9a:	77fb      	strb	r3, [r7, #31]
 8007e9c:	e007      	b.n	8007eae <UART_SetConfig+0x346>
 8007e9e:	2308      	movs	r3, #8
 8007ea0:	77fb      	strb	r3, [r7, #31]
 8007ea2:	e004      	b.n	8007eae <UART_SetConfig+0x346>
 8007ea4:	2310      	movs	r3, #16
 8007ea6:	77fb      	strb	r3, [r7, #31]
 8007ea8:	e001      	b.n	8007eae <UART_SetConfig+0x346>
 8007eaa:	2310      	movs	r3, #16
 8007eac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb6:	d15a      	bne.n	8007f6e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007eb8:	7ffb      	ldrb	r3, [r7, #31]
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	d827      	bhi.n	8007f0e <UART_SetConfig+0x3a6>
 8007ebe:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <UART_SetConfig+0x35c>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007ee9 	.word	0x08007ee9
 8007ec8:	08007ef1 	.word	0x08007ef1
 8007ecc:	08007ef9 	.word	0x08007ef9
 8007ed0:	08007f0f 	.word	0x08007f0f
 8007ed4:	08007eff 	.word	0x08007eff
 8007ed8:	08007f0f 	.word	0x08007f0f
 8007edc:	08007f0f 	.word	0x08007f0f
 8007ee0:	08007f0f 	.word	0x08007f0f
 8007ee4:	08007f07 	.word	0x08007f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ee8:	f7fd ff60 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8007eec:	61b8      	str	r0, [r7, #24]
        break;
 8007eee:	e013      	b.n	8007f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ef0:	f7fd ff70 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 8007ef4:	61b8      	str	r0, [r7, #24]
        break;
 8007ef6:	e00f      	b.n	8007f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ef8:	4b4b      	ldr	r3, [pc, #300]	; (8008028 <UART_SetConfig+0x4c0>)
 8007efa:	61bb      	str	r3, [r7, #24]
        break;
 8007efc:	e00c      	b.n	8007f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007efe:	f7fd fe93 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8007f02:	61b8      	str	r0, [r7, #24]
        break;
 8007f04:	e008      	b.n	8007f18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f0a:	61bb      	str	r3, [r7, #24]
        break;
 8007f0c:	e004      	b.n	8007f18 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	77bb      	strb	r3, [r7, #30]
        break;
 8007f16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d074      	beq.n	8008008 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	005a      	lsls	r2, r3, #1
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	085b      	lsrs	r3, r3, #1
 8007f28:	441a      	add	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	2b0f      	cmp	r3, #15
 8007f38:	d916      	bls.n	8007f68 <UART_SetConfig+0x400>
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f40:	d212      	bcs.n	8007f68 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f023 030f 	bic.w	r3, r3, #15
 8007f4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	89fb      	ldrh	r3, [r7, #14]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	89fa      	ldrh	r2, [r7, #14]
 8007f64:	60da      	str	r2, [r3, #12]
 8007f66:	e04f      	b.n	8008008 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	77bb      	strb	r3, [r7, #30]
 8007f6c:	e04c      	b.n	8008008 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f6e:	7ffb      	ldrb	r3, [r7, #31]
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d828      	bhi.n	8007fc6 <UART_SetConfig+0x45e>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <UART_SetConfig+0x414>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fa1 	.word	0x08007fa1
 8007f80:	08007fa9 	.word	0x08007fa9
 8007f84:	08007fb1 	.word	0x08007fb1
 8007f88:	08007fc7 	.word	0x08007fc7
 8007f8c:	08007fb7 	.word	0x08007fb7
 8007f90:	08007fc7 	.word	0x08007fc7
 8007f94:	08007fc7 	.word	0x08007fc7
 8007f98:	08007fc7 	.word	0x08007fc7
 8007f9c:	08007fbf 	.word	0x08007fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa0:	f7fd ff04 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8007fa4:	61b8      	str	r0, [r7, #24]
        break;
 8007fa6:	e013      	b.n	8007fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fa8:	f7fd ff14 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 8007fac:	61b8      	str	r0, [r7, #24]
        break;
 8007fae:	e00f      	b.n	8007fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fb0:	4b1d      	ldr	r3, [pc, #116]	; (8008028 <UART_SetConfig+0x4c0>)
 8007fb2:	61bb      	str	r3, [r7, #24]
        break;
 8007fb4:	e00c      	b.n	8007fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fb6:	f7fd fe37 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8007fba:	61b8      	str	r0, [r7, #24]
        break;
 8007fbc:	e008      	b.n	8007fd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fc2:	61bb      	str	r3, [r7, #24]
        break;
 8007fc4:	e004      	b.n	8007fd0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	77bb      	strb	r3, [r7, #30]
        break;
 8007fce:	bf00      	nop
    }

    if (pclk != 0U)
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d018      	beq.n	8008008 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	085a      	lsrs	r2, r3, #1
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	441a      	add	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b0f      	cmp	r3, #15
 8007fee:	d909      	bls.n	8008004 <UART_SetConfig+0x49c>
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff6:	d205      	bcs.n	8008004 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60da      	str	r2, [r3, #12]
 8008002:	e001      	b.n	8008008 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008014:	7fbb      	ldrb	r3, [r7, #30]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3720      	adds	r7, #32
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	40007c00 	.word	0x40007c00
 8008024:	40023800 	.word	0x40023800
 8008028:	00f42400 	.word	0x00f42400

0800802c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	f003 0301 	and.w	r3, r3, #1
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00a      	beq.n	8008056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	f003 0308 	and.w	r3, r3, #8
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00a      	beq.n	80080de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	f003 0320 	and.w	r3, r3, #32
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01a      	beq.n	8008142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800812a:	d10a      	bne.n	8008142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	605a      	str	r2, [r3, #4]
  }
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af02      	add	r7, sp, #8
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008180:	f7fb fdee 	bl	8003d60 <HAL_GetTick>
 8008184:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0308 	and.w	r3, r3, #8
 8008190:	2b08      	cmp	r3, #8
 8008192:	d10e      	bne.n	80081b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f817 	bl	80081d6 <UART_WaitOnFlagUntilTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e00d      	b.n	80081ce <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2220      	movs	r2, #32
 80081bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b09c      	sub	sp, #112	; 0x70
 80081da:	af00      	add	r7, sp, #0
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	603b      	str	r3, [r7, #0]
 80081e2:	4613      	mov	r3, r2
 80081e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e6:	e0a5      	b.n	8008334 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	f000 80a1 	beq.w	8008334 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f2:	f7fb fdb5 	bl	8003d60 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081fe:	429a      	cmp	r2, r3
 8008200:	d302      	bcc.n	8008208 <UART_WaitOnFlagUntilTimeout+0x32>
 8008202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008204:	2b00      	cmp	r3, #0
 8008206:	d13e      	bne.n	8008286 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800821c:	667b      	str	r3, [r7, #100]	; 0x64
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008228:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800822c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e6      	bne.n	8008208 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	663b      	str	r3, [r7, #96]	; 0x60
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800825a:	64ba      	str	r2, [r7, #72]	; 0x48
 800825c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e5      	bne.n	800823a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2220      	movs	r2, #32
 8008272:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2220      	movs	r2, #32
 8008278:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e067      	b.n	8008356 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	d04f      	beq.n	8008334 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800829e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a2:	d147      	bne.n	8008334 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082cc:	637b      	str	r3, [r7, #52]	; 0x34
 80082ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e6      	bne.n	80082ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3308      	adds	r3, #8
 80082e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	e853 3f00 	ldrex	r3, [r3]
 80082ee:	613b      	str	r3, [r7, #16]
   return(result);
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f023 0301 	bic.w	r3, r3, #1
 80082f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3308      	adds	r3, #8
 80082fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008300:	623a      	str	r2, [r7, #32]
 8008302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	69f9      	ldr	r1, [r7, #28]
 8008306:	6a3a      	ldr	r2, [r7, #32]
 8008308:	e841 2300 	strex	r3, r2, [r1]
 800830c:	61bb      	str	r3, [r7, #24]
   return(result);
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1e5      	bne.n	80082e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2220      	movs	r2, #32
 8008318:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2220      	movs	r2, #32
 800831e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e010      	b.n	8008356 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	69da      	ldr	r2, [r3, #28]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	4013      	ands	r3, r2
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	429a      	cmp	r2, r3
 8008342:	bf0c      	ite	eq
 8008344:	2301      	moveq	r3, #1
 8008346:	2300      	movne	r3, #0
 8008348:	b2db      	uxtb	r3, r3
 800834a:	461a      	mov	r2, r3
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	429a      	cmp	r2, r3
 8008350:	f43f af4a 	beq.w	80081e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3770      	adds	r7, #112	; 0x70
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008360:	b480      	push	{r7}
 8008362:	b097      	sub	sp, #92	; 0x5c
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	88fa      	ldrh	r2, [r7, #6]
 8008378:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008392:	d10e      	bne.n	80083b2 <UART_Start_Receive_IT+0x52>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d105      	bne.n	80083a8 <UART_Start_Receive_IT+0x48>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80083a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083a6:	e02d      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	22ff      	movs	r2, #255	; 0xff
 80083ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083b0:	e028      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10d      	bne.n	80083d6 <UART_Start_Receive_IT+0x76>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d104      	bne.n	80083cc <UART_Start_Receive_IT+0x6c>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	22ff      	movs	r2, #255	; 0xff
 80083c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083ca:	e01b      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	227f      	movs	r2, #127	; 0x7f
 80083d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083d4:	e016      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083de:	d10d      	bne.n	80083fc <UART_Start_Receive_IT+0x9c>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d104      	bne.n	80083f2 <UART_Start_Receive_IT+0x92>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	227f      	movs	r2, #127	; 0x7f
 80083ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083f0:	e008      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	223f      	movs	r2, #63	; 0x3f
 80083f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083fa:	e003      	b.n	8008404 <UART_Start_Receive_IT+0xa4>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2222      	movs	r2, #34	; 0x22
 8008410:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	f043 0301 	orr.w	r3, r3, #1
 8008428:	657b      	str	r3, [r7, #84]	; 0x54
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3308      	adds	r3, #8
 8008430:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008432:	64ba      	str	r2, [r7, #72]	; 0x48
 8008434:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e5      	bne.n	8008412 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800844e:	d107      	bne.n	8008460 <UART_Start_Receive_IT+0x100>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d103      	bne.n	8008460 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4a24      	ldr	r2, [pc, #144]	; (80084ec <UART_Start_Receive_IT+0x18c>)
 800845c:	665a      	str	r2, [r3, #100]	; 0x64
 800845e:	e002      	b.n	8008466 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4a23      	ldr	r2, [pc, #140]	; (80084f0 <UART_Start_Receive_IT+0x190>)
 8008464:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d019      	beq.n	80084aa <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	e853 3f00 	ldrex	r3, [r3]
 8008482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800848a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	461a      	mov	r2, r3
 8008492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008494:	637b      	str	r3, [r7, #52]	; 0x34
 8008496:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800849a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800849c:	e841 2300 	strex	r3, r2, [r1]
 80084a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e6      	bne.n	8008476 <UART_Start_Receive_IT+0x116>
 80084a8:	e018      	b.n	80084dc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	613b      	str	r3, [r7, #16]
   return(result);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f043 0320 	orr.w	r3, r3, #32
 80084be:	653b      	str	r3, [r7, #80]	; 0x50
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c8:	623b      	str	r3, [r7, #32]
 80084ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	69f9      	ldr	r1, [r7, #28]
 80084ce:	6a3a      	ldr	r2, [r7, #32]
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e6      	bne.n	80084aa <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	375c      	adds	r7, #92	; 0x5c
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	0800890d 	.word	0x0800890d
 80084f0:	080087b1 	.word	0x080087b1

080084f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b095      	sub	sp, #84	; 0x54
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800851a:	643b      	str	r3, [r7, #64]	; 0x40
 800851c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e6      	bne.n	80084fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3308      	adds	r3, #8
 8008534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	61fb      	str	r3, [r7, #28]
   return(result);
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	64bb      	str	r3, [r7, #72]	; 0x48
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3308      	adds	r3, #8
 800854c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800854e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008556:	e841 2300 	strex	r3, r2, [r1]
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1e5      	bne.n	800852e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008566:	2b01      	cmp	r3, #1
 8008568:	d118      	bne.n	800859c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	60bb      	str	r3, [r7, #8]
   return(result);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f023 0310 	bic.w	r3, r3, #16
 800857e:	647b      	str	r3, [r7, #68]	; 0x44
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008588:	61bb      	str	r3, [r7, #24]
 800858a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6979      	ldr	r1, [r7, #20]
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	613b      	str	r3, [r7, #16]
   return(result);
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e6      	bne.n	800856a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2220      	movs	r2, #32
 80085a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	665a      	str	r2, [r3, #100]	; 0x64
}
 80085ae:	bf00      	nop
 80085b0:	3754      	adds	r7, #84	; 0x54
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff faaf 	bl	8007b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b08f      	sub	sp, #60	; 0x3c
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085f2:	2b21      	cmp	r3, #33	; 0x21
 80085f4:	d14c      	bne.n	8008690 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d132      	bne.n	8008668 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008622:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e6      	bne.n	8008602 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	60bb      	str	r3, [r7, #8]
   return(result);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008648:	633b      	str	r3, [r7, #48]	; 0x30
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008652:	61bb      	str	r3, [r7, #24]
 8008654:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	6979      	ldr	r1, [r7, #20]
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	613b      	str	r3, [r7, #16]
   return(result);
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e6      	bne.n	8008634 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008666:	e013      	b.n	8008690 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800866c:	781a      	ldrb	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008684:	b29b      	uxth	r3, r3
 8008686:	3b01      	subs	r3, #1
 8008688:	b29a      	uxth	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008690:	bf00      	nop
 8008692:	373c      	adds	r7, #60	; 0x3c
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b091      	sub	sp, #68	; 0x44
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086a8:	2b21      	cmp	r3, #33	; 0x21
 80086aa:	d151      	bne.n	8008750 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d132      	bne.n	800871e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	e853 3f00 	ldrex	r3, [r3]
 80086c4:	623b      	str	r3, [r7, #32]
   return(result);
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	633b      	str	r3, [r7, #48]	; 0x30
 80086d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086de:	e841 2300 	strex	r3, r2, [r1]
 80086e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1e6      	bne.n	80086b8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	e853 3f00 	ldrex	r3, [r3]
 80086f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008708:	61fb      	str	r3, [r7, #28]
 800870a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	69b9      	ldr	r1, [r7, #24]
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	617b      	str	r3, [r7, #20]
   return(result);
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e6      	bne.n	80086ea <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800871c:	e018      	b.n	8008750 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008732:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008738:	1c9a      	adds	r2, r3, #2
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008744:	b29b      	uxth	r3, r3
 8008746:	3b01      	subs	r3, #1
 8008748:	b29a      	uxth	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008750:	bf00      	nop
 8008752:	3744      	adds	r7, #68	; 0x44
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	e853 3f00 	ldrex	r3, [r3]
 8008770:	60bb      	str	r3, [r7, #8]
   return(result);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008778:	61fb      	str	r3, [r7, #28]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	6979      	ldr	r1, [r7, #20]
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	613b      	str	r3, [r7, #16]
   return(result);
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e6      	bne.n	8008764 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2220      	movs	r2, #32
 800879a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7f9 fe3e 	bl	8002424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087a8:	bf00      	nop
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b096      	sub	sp, #88	; 0x58
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087c6:	2b22      	cmp	r3, #34	; 0x22
 80087c8:	f040 8094 	bne.w	80088f4 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087d6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80087da:	b2d9      	uxtb	r1, r3
 80087dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e6:	400a      	ands	r2, r1
 80087e8:	b2d2      	uxtb	r2, r2
 80087ea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	3b01      	subs	r3, #1
 8008800:	b29a      	uxth	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800880e:	b29b      	uxth	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d177      	bne.n	8008904 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008828:	653b      	str	r3, [r7, #80]	; 0x50
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008832:	647b      	str	r3, [r7, #68]	; 0x44
 8008834:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e6      	bne.n	8008814 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	3308      	adds	r3, #8
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	e853 3f00 	ldrex	r3, [r3]
 8008854:	623b      	str	r3, [r7, #32]
   return(result);
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	f023 0301 	bic.w	r3, r3, #1
 800885c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3308      	adds	r3, #8
 8008864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008866:	633a      	str	r2, [r7, #48]	; 0x30
 8008868:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800886c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886e:	e841 2300 	strex	r3, r2, [r1]
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1e5      	bne.n	8008846 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2220      	movs	r2, #32
 800887e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800888a:	2b01      	cmp	r3, #1
 800888c:	d12e      	bne.n	80088ec <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f023 0310 	bic.w	r3, r3, #16
 80088a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088b2:	61fb      	str	r3, [r7, #28]
 80088b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	69b9      	ldr	r1, [r7, #24]
 80088b8:	69fa      	ldr	r2, [r7, #28]
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	617b      	str	r3, [r7, #20]
   return(result);
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e6      	bne.n	8008894 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	f003 0310 	and.w	r3, r3, #16
 80088d0:	2b10      	cmp	r3, #16
 80088d2:	d103      	bne.n	80088dc <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2210      	movs	r2, #16
 80088da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7ff f933 	bl	8007b50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088ea:	e00b      	b.n	8008904 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7f9 faaf 	bl	8001e50 <HAL_UART_RxCpltCallback>
}
 80088f2:	e007      	b.n	8008904 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	699a      	ldr	r2, [r3, #24]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f042 0208 	orr.w	r2, r2, #8
 8008902:	619a      	str	r2, [r3, #24]
}
 8008904:	bf00      	nop
 8008906:	3758      	adds	r7, #88	; 0x58
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b096      	sub	sp, #88	; 0x58
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800891a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008922:	2b22      	cmp	r3, #34	; 0x22
 8008924:	f040 8094 	bne.w	8008a50 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008936:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008938:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800893c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008940:	4013      	ands	r3, r2
 8008942:	b29a      	uxth	r2, r3
 8008944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008946:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894c:	1c9a      	adds	r2, r3, #2
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008958:	b29b      	uxth	r3, r3
 800895a:	3b01      	subs	r3, #1
 800895c:	b29a      	uxth	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800896a:	b29b      	uxth	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d177      	bne.n	8008a60 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008978:	e853 3f00 	ldrex	r3, [r3]
 800897c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898e:	643b      	str	r3, [r7, #64]	; 0x40
 8008990:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008994:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e6      	bne.n	8008970 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3308      	adds	r3, #8
 80089a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	f023 0301 	bic.w	r3, r3, #1
 80089b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3308      	adds	r3, #8
 80089c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e5      	bne.n	80089a2 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d12e      	bne.n	8008a48 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f023 0310 	bic.w	r3, r3, #16
 8008a04:	647b      	str	r3, [r7, #68]	; 0x44
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a0e:	61bb      	str	r3, [r7, #24]
 8008a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6979      	ldr	r1, [r7, #20]
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e6      	bne.n	80089f0 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	f003 0310 	and.w	r3, r3, #16
 8008a2c:	2b10      	cmp	r3, #16
 8008a2e:	d103      	bne.n	8008a38 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2210      	movs	r2, #16
 8008a36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff f885 	bl	8007b50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a46:	e00b      	b.n	8008a60 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7f9 fa01 	bl	8001e50 <HAL_UART_RxCpltCallback>
}
 8008a4e:	e007      	b.n	8008a60 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	699a      	ldr	r2, [r3, #24]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f042 0208 	orr.w	r2, r2, #8
 8008a5e:	619a      	str	r2, [r3, #24]
}
 8008a60:	bf00      	nop
 8008a62:	3758      	adds	r7, #88	; 0x58
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008a6e:	4b8c      	ldr	r3, [pc, #560]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008a70:	22c0      	movs	r2, #192	; 0xc0
 8008a72:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008a74:	4b8a      	ldr	r3, [pc, #552]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008a76:	22a8      	movs	r2, #168	; 0xa8
 8008a78:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8008a7a:	4b89      	ldr	r3, [pc, #548]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 55;
 8008a80:	4b87      	ldr	r3, [pc, #540]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008a82:	2237      	movs	r2, #55	; 0x37
 8008a84:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008a86:	4b87      	ldr	r3, [pc, #540]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008a88:	22ff      	movs	r2, #255	; 0xff
 8008a8a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008a8c:	4b85      	ldr	r3, [pc, #532]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008a8e:	22ff      	movs	r2, #255	; 0xff
 8008a90:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008a92:	4b84      	ldr	r3, [pc, #528]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008a94:	22ff      	movs	r2, #255	; 0xff
 8008a96:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008a98:	4b82      	ldr	r3, [pc, #520]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008a9e:	4b82      	ldr	r3, [pc, #520]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008aa0:	22c0      	movs	r2, #192	; 0xc0
 8008aa2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008aa4:	4b80      	ldr	r3, [pc, #512]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008aa6:	22a8      	movs	r2, #168	; 0xa8
 8008aa8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8008aaa:	4b7f      	ldr	r3, [pc, #508]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008ab0:	4b7d      	ldr	r3, [pc, #500]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	2000      	movs	r0, #0
 8008aba:	f005 fbf5 	bl	800e2a8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008abe:	4b78      	ldr	r3, [pc, #480]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	061a      	lsls	r2, r3, #24
 8008ac4:	4b76      	ldr	r3, [pc, #472]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008ac6:	785b      	ldrb	r3, [r3, #1]
 8008ac8:	041b      	lsls	r3, r3, #16
 8008aca:	431a      	orrs	r2, r3
 8008acc:	4b74      	ldr	r3, [pc, #464]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008ace:	789b      	ldrb	r3, [r3, #2]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	4a72      	ldr	r2, [pc, #456]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008ad6:	78d2      	ldrb	r2, [r2, #3]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	061a      	lsls	r2, r3, #24
 8008adc:	4b70      	ldr	r3, [pc, #448]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	0619      	lsls	r1, r3, #24
 8008ae2:	4b6f      	ldr	r3, [pc, #444]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	041b      	lsls	r3, r3, #16
 8008ae8:	4319      	orrs	r1, r3
 8008aea:	4b6d      	ldr	r3, [pc, #436]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008aec:	789b      	ldrb	r3, [r3, #2]
 8008aee:	021b      	lsls	r3, r3, #8
 8008af0:	430b      	orrs	r3, r1
 8008af2:	496b      	ldr	r1, [pc, #428]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008af4:	78c9      	ldrb	r1, [r1, #3]
 8008af6:	430b      	orrs	r3, r1
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008afe:	431a      	orrs	r2, r3
 8008b00:	4b67      	ldr	r3, [pc, #412]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	0619      	lsls	r1, r3, #24
 8008b06:	4b66      	ldr	r3, [pc, #408]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	041b      	lsls	r3, r3, #16
 8008b0c:	4319      	orrs	r1, r3
 8008b0e:	4b64      	ldr	r3, [pc, #400]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008b10:	789b      	ldrb	r3, [r3, #2]
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	430b      	orrs	r3, r1
 8008b16:	4962      	ldr	r1, [pc, #392]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008b18:	78c9      	ldrb	r1, [r1, #3]
 8008b1a:	430b      	orrs	r3, r1
 8008b1c:	0a1b      	lsrs	r3, r3, #8
 8008b1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b22:	431a      	orrs	r2, r3
 8008b24:	4b5e      	ldr	r3, [pc, #376]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	0619      	lsls	r1, r3, #24
 8008b2a:	4b5d      	ldr	r3, [pc, #372]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008b2c:	785b      	ldrb	r3, [r3, #1]
 8008b2e:	041b      	lsls	r3, r3, #16
 8008b30:	4319      	orrs	r1, r3
 8008b32:	4b5b      	ldr	r3, [pc, #364]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008b34:	789b      	ldrb	r3, [r3, #2]
 8008b36:	021b      	lsls	r3, r3, #8
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	4959      	ldr	r1, [pc, #356]	; (8008ca0 <MX_LWIP_Init+0x238>)
 8008b3c:	78c9      	ldrb	r1, [r1, #3]
 8008b3e:	430b      	orrs	r3, r1
 8008b40:	0e1b      	lsrs	r3, r3, #24
 8008b42:	4313      	orrs	r3, r2
 8008b44:	4a59      	ldr	r2, [pc, #356]	; (8008cac <MX_LWIP_Init+0x244>)
 8008b46:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008b48:	4b56      	ldr	r3, [pc, #344]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	061a      	lsls	r2, r3, #24
 8008b4e:	4b55      	ldr	r3, [pc, #340]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008b50:	785b      	ldrb	r3, [r3, #1]
 8008b52:	041b      	lsls	r3, r3, #16
 8008b54:	431a      	orrs	r2, r3
 8008b56:	4b53      	ldr	r3, [pc, #332]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008b58:	789b      	ldrb	r3, [r3, #2]
 8008b5a:	021b      	lsls	r3, r3, #8
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	4a51      	ldr	r2, [pc, #324]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008b60:	78d2      	ldrb	r2, [r2, #3]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	061a      	lsls	r2, r3, #24
 8008b66:	4b4f      	ldr	r3, [pc, #316]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	0619      	lsls	r1, r3, #24
 8008b6c:	4b4d      	ldr	r3, [pc, #308]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008b6e:	785b      	ldrb	r3, [r3, #1]
 8008b70:	041b      	lsls	r3, r3, #16
 8008b72:	4319      	orrs	r1, r3
 8008b74:	4b4b      	ldr	r3, [pc, #300]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008b76:	789b      	ldrb	r3, [r3, #2]
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	4949      	ldr	r1, [pc, #292]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008b7e:	78c9      	ldrb	r1, [r1, #3]
 8008b80:	430b      	orrs	r3, r1
 8008b82:	021b      	lsls	r3, r3, #8
 8008b84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b88:	431a      	orrs	r2, r3
 8008b8a:	4b46      	ldr	r3, [pc, #280]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	0619      	lsls	r1, r3, #24
 8008b90:	4b44      	ldr	r3, [pc, #272]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008b92:	785b      	ldrb	r3, [r3, #1]
 8008b94:	041b      	lsls	r3, r3, #16
 8008b96:	4319      	orrs	r1, r3
 8008b98:	4b42      	ldr	r3, [pc, #264]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008b9a:	789b      	ldrb	r3, [r3, #2]
 8008b9c:	021b      	lsls	r3, r3, #8
 8008b9e:	430b      	orrs	r3, r1
 8008ba0:	4940      	ldr	r1, [pc, #256]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008ba2:	78c9      	ldrb	r1, [r1, #3]
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	0a1b      	lsrs	r3, r3, #8
 8008ba8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008bac:	431a      	orrs	r2, r3
 8008bae:	4b3d      	ldr	r3, [pc, #244]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	0619      	lsls	r1, r3, #24
 8008bb4:	4b3b      	ldr	r3, [pc, #236]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008bb6:	785b      	ldrb	r3, [r3, #1]
 8008bb8:	041b      	lsls	r3, r3, #16
 8008bba:	4319      	orrs	r1, r3
 8008bbc:	4b39      	ldr	r3, [pc, #228]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008bbe:	789b      	ldrb	r3, [r3, #2]
 8008bc0:	021b      	lsls	r3, r3, #8
 8008bc2:	430b      	orrs	r3, r1
 8008bc4:	4937      	ldr	r1, [pc, #220]	; (8008ca4 <MX_LWIP_Init+0x23c>)
 8008bc6:	78c9      	ldrb	r1, [r1, #3]
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	0e1b      	lsrs	r3, r3, #24
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	4a38      	ldr	r2, [pc, #224]	; (8008cb0 <MX_LWIP_Init+0x248>)
 8008bd0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008bd2:	4b35      	ldr	r3, [pc, #212]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	061a      	lsls	r2, r3, #24
 8008bd8:	4b33      	ldr	r3, [pc, #204]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	041b      	lsls	r3, r3, #16
 8008bde:	431a      	orrs	r2, r3
 8008be0:	4b31      	ldr	r3, [pc, #196]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008be2:	789b      	ldrb	r3, [r3, #2]
 8008be4:	021b      	lsls	r3, r3, #8
 8008be6:	4313      	orrs	r3, r2
 8008be8:	4a2f      	ldr	r2, [pc, #188]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008bea:	78d2      	ldrb	r2, [r2, #3]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	061a      	lsls	r2, r3, #24
 8008bf0:	4b2d      	ldr	r3, [pc, #180]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	0619      	lsls	r1, r3, #24
 8008bf6:	4b2c      	ldr	r3, [pc, #176]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008bf8:	785b      	ldrb	r3, [r3, #1]
 8008bfa:	041b      	lsls	r3, r3, #16
 8008bfc:	4319      	orrs	r1, r3
 8008bfe:	4b2a      	ldr	r3, [pc, #168]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008c00:	789b      	ldrb	r3, [r3, #2]
 8008c02:	021b      	lsls	r3, r3, #8
 8008c04:	430b      	orrs	r3, r1
 8008c06:	4928      	ldr	r1, [pc, #160]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008c08:	78c9      	ldrb	r1, [r1, #3]
 8008c0a:	430b      	orrs	r3, r1
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c12:	431a      	orrs	r2, r3
 8008c14:	4b24      	ldr	r3, [pc, #144]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	0619      	lsls	r1, r3, #24
 8008c1a:	4b23      	ldr	r3, [pc, #140]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008c1c:	785b      	ldrb	r3, [r3, #1]
 8008c1e:	041b      	lsls	r3, r3, #16
 8008c20:	4319      	orrs	r1, r3
 8008c22:	4b21      	ldr	r3, [pc, #132]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008c24:	789b      	ldrb	r3, [r3, #2]
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	491f      	ldr	r1, [pc, #124]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008c2c:	78c9      	ldrb	r1, [r1, #3]
 8008c2e:	430b      	orrs	r3, r1
 8008c30:	0a1b      	lsrs	r3, r3, #8
 8008c32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c36:	431a      	orrs	r2, r3
 8008c38:	4b1b      	ldr	r3, [pc, #108]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	0619      	lsls	r1, r3, #24
 8008c3e:	4b1a      	ldr	r3, [pc, #104]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008c40:	785b      	ldrb	r3, [r3, #1]
 8008c42:	041b      	lsls	r3, r3, #16
 8008c44:	4319      	orrs	r1, r3
 8008c46:	4b18      	ldr	r3, [pc, #96]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008c48:	789b      	ldrb	r3, [r3, #2]
 8008c4a:	021b      	lsls	r3, r3, #8
 8008c4c:	430b      	orrs	r3, r1
 8008c4e:	4916      	ldr	r1, [pc, #88]	; (8008ca8 <MX_LWIP_Init+0x240>)
 8008c50:	78c9      	ldrb	r1, [r1, #3]
 8008c52:	430b      	orrs	r3, r1
 8008c54:	0e1b      	lsrs	r3, r3, #24
 8008c56:	4313      	orrs	r3, r2
 8008c58:	4a16      	ldr	r2, [pc, #88]	; (8008cb4 <MX_LWIP_Init+0x24c>)
 8008c5a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008c5c:	4b16      	ldr	r3, [pc, #88]	; (8008cb8 <MX_LWIP_Init+0x250>)
 8008c5e:	9302      	str	r3, [sp, #8]
 8008c60:	4b16      	ldr	r3, [pc, #88]	; (8008cbc <MX_LWIP_Init+0x254>)
 8008c62:	9301      	str	r3, [sp, #4]
 8008c64:	2300      	movs	r3, #0
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <MX_LWIP_Init+0x24c>)
 8008c6a:	4a11      	ldr	r2, [pc, #68]	; (8008cb0 <MX_LWIP_Init+0x248>)
 8008c6c:	490f      	ldr	r1, [pc, #60]	; (8008cac <MX_LWIP_Init+0x244>)
 8008c6e:	4814      	ldr	r0, [pc, #80]	; (8008cc0 <MX_LWIP_Init+0x258>)
 8008c70:	f007 f8b2 	bl	800fdd8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008c74:	4812      	ldr	r0, [pc, #72]	; (8008cc0 <MX_LWIP_Init+0x258>)
 8008c76:	f007 fa5f 	bl	8010138 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008c7a:	4b11      	ldr	r3, [pc, #68]	; (8008cc0 <MX_LWIP_Init+0x258>)
 8008c7c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008c80:	089b      	lsrs	r3, r3, #2
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008c8c:	480c      	ldr	r0, [pc, #48]	; (8008cc0 <MX_LWIP_Init+0x258>)
 8008c8e:	f007 fa63 	bl	8010158 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008c92:	e002      	b.n	8008c9a <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8008c94:	480a      	ldr	r0, [pc, #40]	; (8008cc0 <MX_LWIP_Init+0x258>)
 8008c96:	f007 facb 	bl	8010230 <netif_set_down>
}
 8008c9a:	bf00      	nop
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	200055c8 	.word	0x200055c8
 8008ca4:	200055c4 	.word	0x200055c4
 8008ca8:	2000558c 	.word	0x2000558c
 8008cac:	200055c0 	.word	0x200055c0
 8008cb0:	200055cc 	.word	0x200055cc
 8008cb4:	200055d0 	.word	0x200055d0
 8008cb8:	0800e1b9 	.word	0x0800e1b9
 8008cbc:	080092dd 	.word	0x080092dd
 8008cc0:	20005590 	.word	0x20005590

08008cc4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08e      	sub	sp, #56	; 0x38
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	609a      	str	r2, [r3, #8]
 8008cd8:	60da      	str	r2, [r3, #12]
 8008cda:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a44      	ldr	r2, [pc, #272]	; (8008df4 <HAL_ETH_MspInit+0x130>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	f040 8081 	bne.w	8008dea <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008ce8:	4b43      	ldr	r3, [pc, #268]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cec:	4a42      	ldr	r2, [pc, #264]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8008cf4:	4b40      	ldr	r3, [pc, #256]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cfc:	623b      	str	r3, [r7, #32]
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	4b3d      	ldr	r3, [pc, #244]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	4a3c      	ldr	r2, [pc, #240]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8008d0c:	4b3a      	ldr	r3, [pc, #232]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d14:	61fb      	str	r3, [r7, #28]
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4b37      	ldr	r3, [pc, #220]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1c:	4a36      	ldr	r2, [pc, #216]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d22:	6313      	str	r3, [r2, #48]	; 0x30
 8008d24:	4b34      	ldr	r3, [pc, #208]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d2c:	61bb      	str	r3, [r7, #24]
 8008d2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008d30:	4b31      	ldr	r3, [pc, #196]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d34:	4a30      	ldr	r2, [pc, #192]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8008d3c:	4b2e      	ldr	r3, [pc, #184]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d48:	4b2b      	ldr	r3, [pc, #172]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4c:	4a2a      	ldr	r2, [pc, #168]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d4e:	f043 0304 	orr.w	r3, r3, #4
 8008d52:	6313      	str	r3, [r2, #48]	; 0x30
 8008d54:	4b28      	ldr	r3, [pc, #160]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d58:	f003 0304 	and.w	r3, r3, #4
 8008d5c:	613b      	str	r3, [r7, #16]
 8008d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d60:	4b25      	ldr	r3, [pc, #148]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d64:	4a24      	ldr	r2, [pc, #144]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d66:	f043 0301 	orr.w	r3, r3, #1
 8008d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8008d6c:	4b22      	ldr	r3, [pc, #136]	; (8008df8 <HAL_ETH_MspInit+0x134>)
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8008d78:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d7e:	2302      	movs	r3, #2
 8008d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d86:	2303      	movs	r3, #3
 8008d88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008d8a:	230b      	movs	r3, #11
 8008d8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d92:	4619      	mov	r1, r3
 8008d94:	4819      	ldr	r0, [pc, #100]	; (8008dfc <HAL_ETH_MspInit+0x138>)
 8008d96:	f7fc f977 	bl	8005088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008d9a:	2332      	movs	r3, #50	; 0x32
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da2:	2300      	movs	r3, #0
 8008da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008da6:	2303      	movs	r3, #3
 8008da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008daa:	230b      	movs	r3, #11
 8008dac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008db2:	4619      	mov	r1, r3
 8008db4:	4812      	ldr	r0, [pc, #72]	; (8008e00 <HAL_ETH_MspInit+0x13c>)
 8008db6:	f7fc f967 	bl	8005088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008dba:	2386      	movs	r3, #134	; 0x86
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008dca:	230b      	movs	r3, #11
 8008dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	480b      	ldr	r0, [pc, #44]	; (8008e04 <HAL_ETH_MspInit+0x140>)
 8008dd6:	f7fc f957 	bl	8005088 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2105      	movs	r1, #5
 8008dde:	203d      	movs	r0, #61	; 0x3d
 8008de0:	f7fb f8a6 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008de4:	203d      	movs	r0, #61	; 0x3d
 8008de6:	f7fb f8bf 	bl	8003f68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008dea:	bf00      	nop
 8008dec:	3738      	adds	r7, #56	; 0x38
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	40028000 	.word	0x40028000
 8008df8:	40023800 	.word	0x40023800
 8008dfc:	40021800 	.word	0x40021800
 8008e00:	40020800 	.word	0x40020800
 8008e04:	40020000 	.word	0x40020000

08008e08 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8008e10:	4b04      	ldr	r3, [pc, #16]	; (8008e24 <HAL_ETH_RxCpltCallback+0x1c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 fc3f 	bl	8009698 <osSemaphoreRelease>
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20000d14 	.word	0x20000d14

08008e28 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008e28:	b5b0      	push	{r4, r5, r7, lr}
 8008e2a:	b090      	sub	sp, #64	; 0x40
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008e34:	4b60      	ldr	r3, [pc, #384]	; (8008fb8 <low_level_init+0x190>)
 8008e36:	4a61      	ldr	r2, [pc, #388]	; (8008fbc <low_level_init+0x194>)
 8008e38:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008e3a:	4b5f      	ldr	r3, [pc, #380]	; (8008fb8 <low_level_init+0x190>)
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008e40:	4b5d      	ldr	r3, [pc, #372]	; (8008fb8 <low_level_init+0x190>)
 8008e42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008e46:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008e48:	4b5b      	ldr	r3, [pc, #364]	; (8008fb8 <low_level_init+0x190>)
 8008e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e4e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008e50:	4b59      	ldr	r3, [pc, #356]	; (8008fb8 <low_level_init+0x190>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008e56:	2300      	movs	r3, #0
 8008e58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8008e5c:	2380      	movs	r3, #128	; 0x80
 8008e5e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8008e62:	23e1      	movs	r3, #225	; 0xe1
 8008e64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8008e74:	2300      	movs	r3, #0
 8008e76:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8008e7a:	4a4f      	ldr	r2, [pc, #316]	; (8008fb8 <low_level_init+0x190>)
 8008e7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e80:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8008e82:	4b4d      	ldr	r3, [pc, #308]	; (8008fb8 <low_level_init+0x190>)
 8008e84:	2201      	movs	r2, #1
 8008e86:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008e88:	4b4b      	ldr	r3, [pc, #300]	; (8008fb8 <low_level_init+0x190>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008e8e:	4b4a      	ldr	r3, [pc, #296]	; (8008fb8 <low_level_init+0x190>)
 8008e90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008e94:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008e96:	4848      	ldr	r0, [pc, #288]	; (8008fb8 <low_level_init+0x190>)
 8008e98:	f7fb f906 	bl	80040a8 <HAL_ETH_Init>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8008ea2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d108      	bne.n	8008ebc <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008eb0:	f043 0304 	orr.w	r3, r3, #4
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008ebc:	2304      	movs	r3, #4
 8008ebe:	4a40      	ldr	r2, [pc, #256]	; (8008fc0 <low_level_init+0x198>)
 8008ec0:	4940      	ldr	r1, [pc, #256]	; (8008fc4 <low_level_init+0x19c>)
 8008ec2:	483d      	ldr	r0, [pc, #244]	; (8008fb8 <low_level_init+0x190>)
 8008ec4:	f7fb fa8a 	bl	80043dc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008ec8:	2304      	movs	r3, #4
 8008eca:	4a3f      	ldr	r2, [pc, #252]	; (8008fc8 <low_level_init+0x1a0>)
 8008ecc:	493f      	ldr	r1, [pc, #252]	; (8008fcc <low_level_init+0x1a4>)
 8008ece:	483a      	ldr	r0, [pc, #232]	; (8008fb8 <low_level_init+0x190>)
 8008ed0:	f7fb faed 	bl	80044ae <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2206      	movs	r2, #6
 8008ed8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008edc:	4b36      	ldr	r3, [pc, #216]	; (8008fb8 <low_level_init+0x190>)
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	781a      	ldrb	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008ee8:	4b33      	ldr	r3, [pc, #204]	; (8008fb8 <low_level_init+0x190>)
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	785a      	ldrb	r2, [r3, #1]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008ef4:	4b30      	ldr	r3, [pc, #192]	; (8008fb8 <low_level_init+0x190>)
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	789a      	ldrb	r2, [r3, #2]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008f00:	4b2d      	ldr	r3, [pc, #180]	; (8008fb8 <low_level_init+0x190>)
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	78da      	ldrb	r2, [r3, #3]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008f0c:	4b2a      	ldr	r3, [pc, #168]	; (8008fb8 <low_level_init+0x190>)
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	791a      	ldrb	r2, [r3, #4]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008f18:	4b27      	ldr	r3, [pc, #156]	; (8008fb8 <low_level_init+0x190>)
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	795a      	ldrb	r2, [r3, #5]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008f2a:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008f32:	f043 030a 	orr.w	r3, r3, #10
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8008f3e:	2300      	movs	r3, #0
 8008f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f42:	2300      	movs	r3, #0
 8008f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fb23 	bl	8009598 <osSemaphoreCreate>
 8008f52:	4603      	mov	r3, r0
 8008f54:	4a1e      	ldr	r2, [pc, #120]	; (8008fd0 <low_level_init+0x1a8>)
 8008f56:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008f58:	4b1e      	ldr	r3, [pc, #120]	; (8008fd4 <low_level_init+0x1ac>)
 8008f5a:	f107 040c 	add.w	r4, r7, #12
 8008f5e:	461d      	mov	r5, r3
 8008f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008f68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008f6c:	f107 030c 	add.w	r3, r7, #12
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fa28 	bl	80093c8 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008f78:	480f      	ldr	r0, [pc, #60]	; (8008fb8 <low_level_init+0x190>)
 8008f7a:	f7fb fdc0 	bl	8004afe <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008f7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f82:	461a      	mov	r2, r3
 8008f84:	211d      	movs	r1, #29
 8008f86:	480c      	ldr	r0, [pc, #48]	; (8008fb8 <low_level_init+0x190>)
 8008f88:	f7fb fceb 	bl	8004962 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	f043 030b 	orr.w	r3, r3, #11
 8008f92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	461a      	mov	r2, r3
 8008f98:	211d      	movs	r1, #29
 8008f9a:	4807      	ldr	r0, [pc, #28]	; (8008fb8 <low_level_init+0x190>)
 8008f9c:	f7fb fd49 	bl	8004a32 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008fa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	211d      	movs	r1, #29
 8008fa8:	4803      	ldr	r0, [pc, #12]	; (8008fb8 <low_level_init+0x190>)
 8008faa:	f7fb fcda 	bl	8004962 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008fae:	bf00      	nop
 8008fb0:	3740      	adds	r7, #64	; 0x40
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20006ea4 	.word	0x20006ea4
 8008fbc:	40028000 	.word	0x40028000
 8008fc0:	20006eec 	.word	0x20006eec
 8008fc4:	200055d4 	.word	0x200055d4
 8008fc8:	20005654 	.word	0x20005654
 8008fcc:	20006e24 	.word	0x20006e24
 8008fd0:	20000d14 	.word	0x20000d14
 8008fd4:	08023d68 	.word	0x08023d68

08008fd8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08a      	sub	sp, #40	; 0x28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008fe2:	4b4b      	ldr	r3, [pc, #300]	; (8009110 <low_level_output+0x138>)
 8008fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008ffa:	4b45      	ldr	r3, [pc, #276]	; (8009110 <low_level_output+0x138>)
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffe:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	623b      	str	r3, [r7, #32]
 8009008:	e05a      	b.n	80090c0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	da03      	bge.n	800901a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8009012:	23f8      	movs	r3, #248	; 0xf8
 8009014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8009018:	e05c      	b.n	80090d4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	895b      	ldrh	r3, [r3, #10]
 800901e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009024:	e02f      	b.n	8009086 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8009026:	69fa      	ldr	r2, [r7, #28]
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	18d0      	adds	r0, r2, r3
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	18d1      	adds	r1, r2, r3
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	461a      	mov	r2, r3
 800903e:	f011 fc53 	bl	801a8e8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	da03      	bge.n	8009058 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009050:	23f8      	movs	r3, #248	; 0xf8
 8009052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009056:	e03d      	b.n	80090d4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4413      	add	r3, r2
 8009064:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009068:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009074:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009080:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	4413      	add	r3, r2
 800908c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009090:	4293      	cmp	r3, r2
 8009092:	d8c8      	bhi.n	8009026 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009094:	69fa      	ldr	r2, [r7, #28]
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	18d0      	adds	r0, r2, r3
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	4413      	add	r3, r2
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4619      	mov	r1, r3
 80090a6:	f011 fc1f 	bl	801a8e8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4413      	add	r3, r2
 80090b0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4413      	add	r3, r2
 80090b8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	623b      	str	r3, [r7, #32]
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1a1      	bne.n	800900a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80090c6:	6979      	ldr	r1, [r7, #20]
 80090c8:	4811      	ldr	r0, [pc, #68]	; (8009110 <low_level_output+0x138>)
 80090ca:	f7fb fa5d 	bl	8004588 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80090d4:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <low_level_output+0x138>)
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80090dc:	4413      	add	r3, r2
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0320 	and.w	r3, r3, #32
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00d      	beq.n	8009104 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80090e8:	4b09      	ldr	r3, [pc, #36]	; (8009110 <low_level_output+0x138>)
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	f241 0314 	movw	r3, #4116	; 0x1014
 80090f0:	4413      	add	r3, r2
 80090f2:	2220      	movs	r2, #32
 80090f4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80090f6:	4b06      	ldr	r3, [pc, #24]	; (8009110 <low_level_output+0x138>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	f241 0304 	movw	r3, #4100	; 0x1004
 80090fe:	4413      	add	r3, r2
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8009104:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009108:	4618      	mov	r0, r3
 800910a:	3728      	adds	r7, #40	; 0x28
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20006ea4 	.word	0x20006ea4

08009114 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	; 0x30
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800911c:	2300      	movs	r3, #0
 800911e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8009120:	2300      	movs	r3, #0
 8009122:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8009134:	2300      	movs	r3, #0
 8009136:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8009138:	484f      	ldr	r0, [pc, #316]	; (8009278 <low_level_input+0x164>)
 800913a:	f7fb fb0f 	bl	800475c <HAL_ETH_GetReceivedFrame_IT>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <low_level_input+0x34>

    return NULL;
 8009144:	2300      	movs	r3, #0
 8009146:	e092      	b.n	800926e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009148:	4b4b      	ldr	r3, [pc, #300]	; (8009278 <low_level_input+0x164>)
 800914a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800914e:	4b4a      	ldr	r3, [pc, #296]	; (8009278 <low_level_input+0x164>)
 8009150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009152:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8009154:	89fb      	ldrh	r3, [r7, #14]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d007      	beq.n	800916a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800915a:	89fb      	ldrh	r3, [r7, #14]
 800915c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009160:	4619      	mov	r1, r3
 8009162:	2000      	movs	r0, #0
 8009164:	f007 f94e 	bl	8010404 <pbuf_alloc>
 8009168:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916c:	2b00      	cmp	r3, #0
 800916e:	d04b      	beq.n	8009208 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009170:	4b41      	ldr	r3, [pc, #260]	; (8009278 <low_level_input+0x164>)
 8009172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009174:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	62bb      	str	r3, [r7, #40]	; 0x28
 800917e:	e040      	b.n	8009202 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	895b      	ldrh	r3, [r3, #10]
 8009184:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800918a:	e021      	b.n	80091d0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	18d0      	adds	r0, r2, r3
 8009194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	18d1      	adds	r1, r2, r3
 800919a:	69fa      	ldr	r2, [r7, #28]
 800919c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80091a0:	1a9b      	subs	r3, r3, r2
 80091a2:	461a      	mov	r2, r3
 80091a4:	f011 fba0 	bl	801a8e8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80091b4:	69fa      	ldr	r2, [r7, #28]
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	4413      	add	r3, r2
 80091ba:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80091be:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80091ca:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	4413      	add	r3, r2
 80091d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80091da:	4293      	cmp	r3, r2
 80091dc:	d8d6      	bhi.n	800918c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	18d0      	adds	r0, r2, r3
 80091e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	4413      	add	r3, r2
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	4619      	mov	r1, r3
 80091f0:	f011 fb7a 	bl	801a8e8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80091f4:	69fa      	ldr	r2, [r7, #28]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	4413      	add	r3, r2
 80091fa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	62bb      	str	r3, [r7, #40]	; 0x28
 8009202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1bb      	bne.n	8009180 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009208:	4b1b      	ldr	r3, [pc, #108]	; (8009278 <low_level_input+0x164>)
 800920a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800920e:	2300      	movs	r3, #0
 8009210:	613b      	str	r3, [r7, #16]
 8009212:	e00b      	b.n	800922c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	3301      	adds	r3, #1
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	4b12      	ldr	r3, [pc, #72]	; (8009278 <low_level_input+0x164>)
 800922e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	429a      	cmp	r2, r3
 8009234:	d3ee      	bcc.n	8009214 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <low_level_input+0x164>)
 8009238:	2200      	movs	r2, #0
 800923a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800923c:	4b0e      	ldr	r3, [pc, #56]	; (8009278 <low_level_input+0x164>)
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	f241 0314 	movw	r3, #4116	; 0x1014
 8009244:	4413      	add	r3, r2
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00d      	beq.n	800926c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009250:	4b09      	ldr	r3, [pc, #36]	; (8009278 <low_level_input+0x164>)
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	f241 0314 	movw	r3, #4116	; 0x1014
 8009258:	4413      	add	r3, r2
 800925a:	2280      	movs	r2, #128	; 0x80
 800925c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800925e:	4b06      	ldr	r3, [pc, #24]	; (8009278 <low_level_input+0x164>)
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	f241 0308 	movw	r3, #4104	; 0x1008
 8009266:	4413      	add	r3, r2
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800926e:	4618      	mov	r0, r3
 8009270:	3730      	adds	r7, #48	; 0x30
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20006ea4 	.word	0x20006ea4

0800927c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009288:	4b12      	ldr	r3, [pc, #72]	; (80092d4 <ethernetif_input+0x58>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f04f 31ff 	mov.w	r1, #4294967295
 8009290:	4618      	mov	r0, r3
 8009292:	f000 f9b3 	bl	80095fc <osSemaphoreWait>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1f5      	bne.n	8009288 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800929c:	480e      	ldr	r0, [pc, #56]	; (80092d8 <ethernetif_input+0x5c>)
 800929e:	f011 f997 	bl	801a5d0 <sys_mutex_lock>
        p = low_level_input( netif );
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff ff36 	bl	8009114 <low_level_input>
 80092a8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	68f9      	ldr	r1, [r7, #12]
 80092b6:	68b8      	ldr	r0, [r7, #8]
 80092b8:	4798      	blx	r3
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80092c0:	68b8      	ldr	r0, [r7, #8]
 80092c2:	f007 fb83 	bl	80109cc <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80092c6:	4804      	ldr	r0, [pc, #16]	; (80092d8 <ethernetif_input+0x5c>)
 80092c8:	f011 f991 	bl	801a5ee <sys_mutex_unlock>
      } while(p!=NULL);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1e4      	bne.n	800929c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80092d2:	e7d9      	b.n	8009288 <ethernetif_input+0xc>
 80092d4:	20000d14 	.word	0x20000d14
 80092d8:	200086fc 	.word	0x200086fc

080092dc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d106      	bne.n	80092f8 <ethernetif_init+0x1c>
 80092ea:	4b0e      	ldr	r3, [pc, #56]	; (8009324 <ethernetif_init+0x48>)
 80092ec:	f240 222b 	movw	r2, #555	; 0x22b
 80092f0:	490d      	ldr	r1, [pc, #52]	; (8009328 <ethernetif_init+0x4c>)
 80092f2:	480e      	ldr	r0, [pc, #56]	; (800932c <ethernetif_init+0x50>)
 80092f4:	f011 fda6 	bl	801ae44 <printf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2273      	movs	r2, #115	; 0x73
 80092fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2274      	movs	r2, #116	; 0x74
 8009304:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a09      	ldr	r2, [pc, #36]	; (8009330 <ethernetif_init+0x54>)
 800930c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a08      	ldr	r2, [pc, #32]	; (8009334 <ethernetif_init+0x58>)
 8009312:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff fd87 	bl	8008e28 <low_level_init>

  return ERR_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	08023d84 	.word	0x08023d84
 8009328:	08023da0 	.word	0x08023da0
 800932c:	08023db0 	.word	0x08023db0
 8009330:	080185e5 	.word	0x080185e5
 8009334:	08008fd9 	.word	0x08008fd9

08009338 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800933c:	f7fa fd10 	bl	8003d60 <HAL_GetTick>
 8009340:	4603      	mov	r3, r0
}
 8009342:	4618      	mov	r0, r3
 8009344:	bd80      	pop	{r7, pc}

08009346 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009346:	b480      	push	{r7}
 8009348:	b085      	sub	sp, #20
 800934a:	af00      	add	r7, sp, #0
 800934c:	4603      	mov	r3, r0
 800934e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009358:	2b84      	cmp	r3, #132	; 0x84
 800935a:	d005      	beq.n	8009368 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800935c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4413      	add	r3, r2
 8009364:	3303      	adds	r3, #3
 8009366:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009368:	68fb      	ldr	r3, [r7, #12]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800937c:	f3ef 8305 	mrs	r3, IPSR
 8009380:	607b      	str	r3, [r7, #4]
  return(result);
 8009382:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009384:	2b00      	cmp	r3, #0
 8009386:	bf14      	ite	ne
 8009388:	2301      	movne	r3, #1
 800938a:	2300      	moveq	r3, #0
 800938c:	b2db      	uxtb	r3, r3
}
 800938e:	4618      	mov	r0, r3
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800939e:	f001 fd29 	bl	800adf4 <vTaskStartScheduler>
  
  return osOK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80093ac:	f7ff ffe3 	bl	8009376 <inHandlerMode>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80093b6:	f001 fe3d 	bl	800b034 <xTaskGetTickCountFromISR>
 80093ba:	4603      	mov	r3, r0
 80093bc:	e002      	b.n	80093c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80093be:	f001 fe29 	bl	800b014 <xTaskGetTickCount>
 80093c2:	4603      	mov	r3, r0
  }
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80093c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ca:	b089      	sub	sp, #36	; 0x24
 80093cc:	af04      	add	r7, sp, #16
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d020      	beq.n	800941c <osThreadCreate+0x54>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d01c      	beq.n	800941c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685c      	ldr	r4, [r3, #4]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681d      	ldr	r5, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	691e      	ldr	r6, [r3, #16]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff ffa6 	bl	8009346 <makeFreeRtosPriority>
 80093fa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009404:	9202      	str	r2, [sp, #8]
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	9100      	str	r1, [sp, #0]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	4632      	mov	r2, r6
 800940e:	4629      	mov	r1, r5
 8009410:	4620      	mov	r0, r4
 8009412:	f001 fb53 	bl	800aabc <xTaskCreateStatic>
 8009416:	4603      	mov	r3, r0
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	e01c      	b.n	8009456 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685c      	ldr	r4, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009428:	b29e      	uxth	r6, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff ff88 	bl	8009346 <makeFreeRtosPriority>
 8009436:	4602      	mov	r2, r0
 8009438:	f107 030c 	add.w	r3, r7, #12
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	9200      	str	r2, [sp, #0]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	4632      	mov	r2, r6
 8009444:	4629      	mov	r1, r5
 8009446:	4620      	mov	r0, r4
 8009448:	f001 fb9b 	bl	800ab82 <xTaskCreate>
 800944c:	4603      	mov	r3, r0
 800944e:	2b01      	cmp	r3, #1
 8009450:	d001      	beq.n	8009456 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009452:	2300      	movs	r3, #0
 8009454:	e000      	b.n	8009458 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009456:	68fb      	ldr	r3, [r7, #12]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009460 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d007      	beq.n	8009480 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	4619      	mov	r1, r3
 8009476:	2001      	movs	r0, #1
 8009478:	f000 fc91 	bl	8009d9e <xQueueCreateMutexStatic>
 800947c:	4603      	mov	r3, r0
 800947e:	e003      	b.n	8009488 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009480:	2001      	movs	r0, #1
 8009482:	f000 fc74 	bl	8009d6e <xQueueCreateMutex>
 8009486:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009488:	4618      	mov	r0, r3
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800949a:	2300      	movs	r3, #0
 800949c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <osMutexWait+0x18>
    return osErrorParameter;
 80094a4:	2380      	movs	r3, #128	; 0x80
 80094a6:	e03a      	b.n	800951e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b2:	d103      	bne.n	80094bc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80094b4:	f04f 33ff 	mov.w	r3, #4294967295
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	e009      	b.n	80094d0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d006      	beq.n	80094d0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <osMutexWait+0x40>
      ticks = 1;
 80094cc:	2301      	movs	r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80094d0:	f7ff ff51 	bl	8009376 <inHandlerMode>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d017      	beq.n	800950a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80094da:	f107 0308 	add.w	r3, r7, #8
 80094de:	461a      	mov	r2, r3
 80094e0:	2100      	movs	r1, #0
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f001 f8ac 	bl	800a640 <xQueueReceiveFromISR>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d001      	beq.n	80094f2 <osMutexWait+0x62>
      return osErrorOS;
 80094ee:	23ff      	movs	r3, #255	; 0xff
 80094f0:	e015      	b.n	800951e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d011      	beq.n	800951c <osMutexWait+0x8c>
 80094f8:	4b0b      	ldr	r3, [pc, #44]	; (8009528 <osMutexWait+0x98>)
 80094fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	e008      	b.n	800951c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800950a:	68f9      	ldr	r1, [r7, #12]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 ff83 	bl	800a418 <xQueueSemaphoreTake>
 8009512:	4603      	mov	r3, r0
 8009514:	2b01      	cmp	r3, #1
 8009516:	d001      	beq.n	800951c <osMutexWait+0x8c>
    return osErrorOS;
 8009518:	23ff      	movs	r3, #255	; 0xff
 800951a:	e000      	b.n	800951e <osMutexWait+0x8e>
  }
  
  return osOK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	e000ed04 	.word	0xe000ed04

0800952c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009534:	2300      	movs	r3, #0
 8009536:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009538:	2300      	movs	r3, #0
 800953a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800953c:	f7ff ff1b 	bl	8009376 <inHandlerMode>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d016      	beq.n	8009574 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009546:	f107 0308 	add.w	r3, r7, #8
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fde7 	bl	800a120 <xQueueGiveFromISR>
 8009552:	4603      	mov	r3, r0
 8009554:	2b01      	cmp	r3, #1
 8009556:	d001      	beq.n	800955c <osMutexRelease+0x30>
      return osErrorOS;
 8009558:	23ff      	movs	r3, #255	; 0xff
 800955a:	e017      	b.n	800958c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d013      	beq.n	800958a <osMutexRelease+0x5e>
 8009562:	4b0c      	ldr	r3, [pc, #48]	; (8009594 <osMutexRelease+0x68>)
 8009564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	e00a      	b.n	800958a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009574:	2300      	movs	r3, #0
 8009576:	2200      	movs	r2, #0
 8009578:	2100      	movs	r1, #0
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fc2a 	bl	8009dd4 <xQueueGenericSend>
 8009580:	4603      	mov	r3, r0
 8009582:	2b01      	cmp	r3, #1
 8009584:	d001      	beq.n	800958a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009586:	23ff      	movs	r3, #255	; 0xff
 8009588:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800958a:	68fb      	ldr	r3, [r7, #12]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	e000ed04 	.word	0xe000ed04

08009598 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af02      	add	r7, sp, #8
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00f      	beq.n	80095ca <osSemaphoreCreate+0x32>
    if (count == 1) {
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d10a      	bne.n	80095c6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	2203      	movs	r2, #3
 80095b6:	9200      	str	r2, [sp, #0]
 80095b8:	2200      	movs	r2, #0
 80095ba:	2100      	movs	r1, #0
 80095bc:	2001      	movs	r0, #1
 80095be:	f000 fad9 	bl	8009b74 <xQueueGenericCreateStatic>
 80095c2:	4603      	mov	r3, r0
 80095c4:	e016      	b.n	80095f4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	e014      	b.n	80095f4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d110      	bne.n	80095f2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80095d0:	2203      	movs	r2, #3
 80095d2:	2100      	movs	r1, #0
 80095d4:	2001      	movs	r0, #1
 80095d6:	f000 fb4f 	bl	8009c78 <xQueueGenericCreate>
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d005      	beq.n	80095ee <osSemaphoreCreate+0x56>
 80095e2:	2300      	movs	r3, #0
 80095e4:	2200      	movs	r2, #0
 80095e6:	2100      	movs	r1, #0
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 fbf3 	bl	8009dd4 <xQueueGenericSend>
      return sema;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	e000      	b.n	80095f4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80095f2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009606:	2300      	movs	r3, #0
 8009608:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009610:	2380      	movs	r3, #128	; 0x80
 8009612:	e03a      	b.n	800968a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961e:	d103      	bne.n	8009628 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009620:	f04f 33ff 	mov.w	r3, #4294967295
 8009624:	60fb      	str	r3, [r7, #12]
 8009626:	e009      	b.n	800963c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d006      	beq.n	800963c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <osSemaphoreWait+0x40>
      ticks = 1;
 8009638:	2301      	movs	r3, #1
 800963a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800963c:	f7ff fe9b 	bl	8009376 <inHandlerMode>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d017      	beq.n	8009676 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009646:	f107 0308 	add.w	r3, r7, #8
 800964a:	461a      	mov	r2, r3
 800964c:	2100      	movs	r1, #0
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fff6 	bl	800a640 <xQueueReceiveFromISR>
 8009654:	4603      	mov	r3, r0
 8009656:	2b01      	cmp	r3, #1
 8009658:	d001      	beq.n	800965e <osSemaphoreWait+0x62>
      return osErrorOS;
 800965a:	23ff      	movs	r3, #255	; 0xff
 800965c:	e015      	b.n	800968a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d011      	beq.n	8009688 <osSemaphoreWait+0x8c>
 8009664:	4b0b      	ldr	r3, [pc, #44]	; (8009694 <osSemaphoreWait+0x98>)
 8009666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	e008      	b.n	8009688 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009676:	68f9      	ldr	r1, [r7, #12]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fecd 	bl	800a418 <xQueueSemaphoreTake>
 800967e:	4603      	mov	r3, r0
 8009680:	2b01      	cmp	r3, #1
 8009682:	d001      	beq.n	8009688 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009684:	23ff      	movs	r3, #255	; 0xff
 8009686:	e000      	b.n	800968a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	e000ed04 	.word	0xe000ed04

08009698 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80096a4:	2300      	movs	r3, #0
 80096a6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80096a8:	f7ff fe65 	bl	8009376 <inHandlerMode>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d016      	beq.n	80096e0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80096b2:	f107 0308 	add.w	r3, r7, #8
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fd31 	bl	800a120 <xQueueGiveFromISR>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d001      	beq.n	80096c8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80096c4:	23ff      	movs	r3, #255	; 0xff
 80096c6:	e017      	b.n	80096f8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d013      	beq.n	80096f6 <osSemaphoreRelease+0x5e>
 80096ce:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <osSemaphoreRelease+0x68>)
 80096d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	e00a      	b.n	80096f6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80096e0:	2300      	movs	r3, #0
 80096e2:	2200      	movs	r2, #0
 80096e4:	2100      	movs	r1, #0
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fb74 	bl	8009dd4 <xQueueGenericSend>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d001      	beq.n	80096f6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80096f2:	23ff      	movs	r3, #255	; 0xff
 80096f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80096f6:	68fb      	ldr	r3, [r7, #12]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	e000ed04 	.word	0xe000ed04

08009704 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800970c:	f7ff fe33 	bl	8009376 <inHandlerMode>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009716:	2382      	movs	r3, #130	; 0x82
 8009718:	e003      	b.n	8009722 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f001 f856 	bl	800a7cc <vQueueDelete>

  return osOK; 
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800972a:	b590      	push	{r4, r7, lr}
 800972c:	b085      	sub	sp, #20
 800972e:	af02      	add	r7, sp, #8
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d011      	beq.n	8009760 <osMessageCreate+0x36>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00d      	beq.n	8009760 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6859      	ldr	r1, [r3, #4]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	2400      	movs	r4, #0
 8009756:	9400      	str	r4, [sp, #0]
 8009758:	f000 fa0c 	bl	8009b74 <xQueueGenericCreateStatic>
 800975c:	4603      	mov	r3, r0
 800975e:	e008      	b.n	8009772 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	4619      	mov	r1, r3
 800976c:	f000 fa84 	bl	8009c78 <xQueueGenericCreate>
 8009770:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	bd90      	pop	{r4, r7, pc}
	...

0800977c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009788:	2300      	movs	r3, #0
 800978a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <osMessagePut+0x1e>
    ticks = 1;
 8009796:	2301      	movs	r3, #1
 8009798:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800979a:	f7ff fdec 	bl	8009376 <inHandlerMode>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d018      	beq.n	80097d6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80097a4:	f107 0210 	add.w	r2, r7, #16
 80097a8:	f107 0108 	add.w	r1, r7, #8
 80097ac:	2300      	movs	r3, #0
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 fc16 	bl	8009fe0 <xQueueGenericSendFromISR>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d001      	beq.n	80097be <osMessagePut+0x42>
      return osErrorOS;
 80097ba:	23ff      	movs	r3, #255	; 0xff
 80097bc:	e018      	b.n	80097f0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d014      	beq.n	80097ee <osMessagePut+0x72>
 80097c4:	4b0c      	ldr	r3, [pc, #48]	; (80097f8 <osMessagePut+0x7c>)
 80097c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	e00b      	b.n	80097ee <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80097d6:	f107 0108 	add.w	r1, r7, #8
 80097da:	2300      	movs	r3, #0
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 faf8 	bl	8009dd4 <xQueueGenericSend>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d001      	beq.n	80097ee <osMessagePut+0x72>
      return osErrorOS;
 80097ea:	23ff      	movs	r3, #255	; 0xff
 80097ec:	e000      	b.n	80097f0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80097fc:	b590      	push	{r4, r7, lr}
 80097fe:	b08b      	sub	sp, #44	; 0x2c
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10a      	bne.n	800982c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009816:	2380      	movs	r3, #128	; 0x80
 8009818:	617b      	str	r3, [r7, #20]
    return event;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	461c      	mov	r4, r3
 800981e:	f107 0314 	add.w	r3, r7, #20
 8009822:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009826:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800982a:	e054      	b.n	80098d6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800982c:	2300      	movs	r3, #0
 800982e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983a:	d103      	bne.n	8009844 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800983c:	f04f 33ff 	mov.w	r3, #4294967295
 8009840:	627b      	str	r3, [r7, #36]	; 0x24
 8009842:	e009      	b.n	8009858 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d006      	beq.n	8009858 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <osMessageGet+0x5c>
      ticks = 1;
 8009854:	2301      	movs	r3, #1
 8009856:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009858:	f7ff fd8d 	bl	8009376 <inHandlerMode>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d01c      	beq.n	800989c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009862:	f107 0220 	add.w	r2, r7, #32
 8009866:	f107 0314 	add.w	r3, r7, #20
 800986a:	3304      	adds	r3, #4
 800986c:	4619      	mov	r1, r3
 800986e:	68b8      	ldr	r0, [r7, #8]
 8009870:	f000 fee6 	bl	800a640 <xQueueReceiveFromISR>
 8009874:	4603      	mov	r3, r0
 8009876:	2b01      	cmp	r3, #1
 8009878:	d102      	bne.n	8009880 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800987a:	2310      	movs	r3, #16
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	e001      	b.n	8009884 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009880:	2300      	movs	r3, #0
 8009882:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d01d      	beq.n	80098c6 <osMessageGet+0xca>
 800988a:	4b15      	ldr	r3, [pc, #84]	; (80098e0 <osMessageGet+0xe4>)
 800988c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	e014      	b.n	80098c6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800989c:	f107 0314 	add.w	r3, r7, #20
 80098a0:	3304      	adds	r3, #4
 80098a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a4:	4619      	mov	r1, r3
 80098a6:	68b8      	ldr	r0, [r7, #8]
 80098a8:	f000 fcd0 	bl	800a24c <xQueueReceive>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d102      	bne.n	80098b8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80098b2:	2310      	movs	r3, #16
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	e006      	b.n	80098c6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <osMessageGet+0xc6>
 80098be:	2300      	movs	r3, #0
 80098c0:	e000      	b.n	80098c4 <osMessageGet+0xc8>
 80098c2:	2340      	movs	r3, #64	; 0x40
 80098c4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	461c      	mov	r4, r3
 80098ca:	f107 0314 	add.w	r3, r7, #20
 80098ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	372c      	adds	r7, #44	; 0x2c
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd90      	pop	{r4, r7, pc}
 80098de:	bf00      	nop
 80098e0:	e000ed04 	.word	0xe000ed04

080098e4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80098ec:	f7ff fd43 	bl	8009376 <inHandlerMode>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d004      	beq.n	8009900 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 ff48 	bl	800a78c <uxQueueMessagesWaitingFromISR>
 80098fc:	4603      	mov	r3, r0
 80098fe:	e003      	b.n	8009908 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 ff23 	bl	800a74c <uxQueueMessagesWaiting>
 8009906:	4603      	mov	r3, r0
  }
}
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009918:	f7ff fd2d 	bl	8009376 <inHandlerMode>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <osMessageDelete+0x16>
    return osErrorISR;
 8009922:	2382      	movs	r3, #130	; 0x82
 8009924:	e003      	b.n	800992e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 ff50 	bl	800a7cc <vQueueDelete>

  return osOK; 
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009936:	b480      	push	{r7}
 8009938:	b083      	sub	sp, #12
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f103 0208 	add.w	r2, r3, #8
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f04f 32ff 	mov.w	r2, #4294967295
 800994e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f103 0208 	add.w	r2, r3, #8
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f103 0208 	add.w	r2, r3, #8
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800996a:	bf00      	nop
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	601a      	str	r2, [r3, #0]
}
 80099cc:	bf00      	nop
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ee:	d103      	bne.n	80099f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	60fb      	str	r3, [r7, #12]
 80099f6:	e00c      	b.n	8009a12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3308      	adds	r3, #8
 80099fc:	60fb      	str	r3, [r7, #12]
 80099fe:	e002      	b.n	8009a06 <vListInsert+0x2e>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d2f6      	bcs.n	8009a00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	601a      	str	r2, [r3, #0]
}
 8009a3e:	bf00      	nop
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	6892      	ldr	r2, [r2, #8]
 8009a60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	6852      	ldr	r2, [r2, #4]
 8009a6a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d103      	bne.n	8009a7e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	689a      	ldr	r2, [r3, #8]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	1e5a      	subs	r2, r3, #1
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
	...

08009aa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10c      	bne.n	8009ace <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	b672      	cpsid	i
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	b662      	cpsie	i
 8009ac8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009ace:	f002 f915 	bl	800bcfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ada:	68f9      	ldr	r1, [r7, #12]
 8009adc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ade:	fb01 f303 	mul.w	r3, r1, r3
 8009ae2:	441a      	add	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009afe:	3b01      	subs	r3, #1
 8009b00:	68f9      	ldr	r1, [r7, #12]
 8009b02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b04:	fb01 f303 	mul.w	r3, r1, r3
 8009b08:	441a      	add	r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	22ff      	movs	r2, #255	; 0xff
 8009b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	22ff      	movs	r2, #255	; 0xff
 8009b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d114      	bne.n	8009b4e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d01a      	beq.n	8009b62 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3310      	adds	r3, #16
 8009b30:	4618      	mov	r0, r3
 8009b32:	f001 fbcf 	bl	800b2d4 <xTaskRemoveFromEventList>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d012      	beq.n	8009b62 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b3c:	4b0c      	ldr	r3, [pc, #48]	; (8009b70 <xQueueGenericReset+0xd0>)
 8009b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	e009      	b.n	8009b62 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	3310      	adds	r3, #16
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7ff feef 	bl	8009936 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3324      	adds	r3, #36	; 0x24
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7ff feea 	bl	8009936 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b62:	f002 f8ff 	bl	800bd64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b66:	2301      	movs	r3, #1
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	e000ed04 	.word	0xe000ed04

08009b74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08e      	sub	sp, #56	; 0x38
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10c      	bne.n	8009ba2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	b672      	cpsid	i
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	b662      	cpsie	i
 8009b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b9e:	bf00      	nop
 8009ba0:	e7fe      	b.n	8009ba0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10c      	bne.n	8009bc2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bac:	b672      	cpsid	i
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	b662      	cpsie	i
 8009bbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bbe:	bf00      	nop
 8009bc0:	e7fe      	b.n	8009bc0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <xQueueGenericCreateStatic+0x5a>
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <xQueueGenericCreateStatic+0x5e>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e000      	b.n	8009bd4 <xQueueGenericCreateStatic+0x60>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10c      	bne.n	8009bf2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bdc:	b672      	cpsid	i
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	b662      	cpsie	i
 8009bec:	623b      	str	r3, [r7, #32]
}
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d102      	bne.n	8009bfe <xQueueGenericCreateStatic+0x8a>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <xQueueGenericCreateStatic+0x8e>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e000      	b.n	8009c04 <xQueueGenericCreateStatic+0x90>
 8009c02:	2300      	movs	r3, #0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10c      	bne.n	8009c22 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0c:	b672      	cpsid	i
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	b662      	cpsie	i
 8009c1c:	61fb      	str	r3, [r7, #28]
}
 8009c1e:	bf00      	nop
 8009c20:	e7fe      	b.n	8009c20 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c22:	2348      	movs	r3, #72	; 0x48
 8009c24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2b48      	cmp	r3, #72	; 0x48
 8009c2a:	d00c      	beq.n	8009c46 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c30:	b672      	cpsid	i
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	b662      	cpsie	i
 8009c40:	61bb      	str	r3, [r7, #24]
}
 8009c42:	bf00      	nop
 8009c44:	e7fe      	b.n	8009c44 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00d      	beq.n	8009c6e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	4613      	mov	r3, r2
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	68b9      	ldr	r1, [r7, #8]
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 f847 	bl	8009cfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3730      	adds	r7, #48	; 0x30
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	; 0x28
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4613      	mov	r3, r2
 8009c84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10c      	bne.n	8009ca6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	b672      	cpsid	i
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	b662      	cpsie	i
 8009ca0:	613b      	str	r3, [r7, #16]
}
 8009ca2:	bf00      	nop
 8009ca4:	e7fe      	b.n	8009ca4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d102      	bne.n	8009cb2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009cac:	2300      	movs	r3, #0
 8009cae:	61fb      	str	r3, [r7, #28]
 8009cb0:	e004      	b.n	8009cbc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	fb02 f303 	mul.w	r3, r2, r3
 8009cba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	3348      	adds	r3, #72	; 0x48
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f002 f947 	bl	800bf54 <pvPortMalloc>
 8009cc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d011      	beq.n	8009cf2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	3348      	adds	r3, #72	; 0x48
 8009cd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ce0:	79fa      	ldrb	r2, [r7, #7]
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	68b9      	ldr	r1, [r7, #8]
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 f805 	bl	8009cfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009cf2:	69bb      	ldr	r3, [r7, #24]
	}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3720      	adds	r7, #32
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d103      	bne.n	8009d18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	e002      	b.n	8009d1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	69b8      	ldr	r0, [r7, #24]
 8009d2e:	f7ff feb7 	bl	8009aa0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d32:	bf00      	nop
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00e      	beq.n	8009d66 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	2100      	movs	r1, #0
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f837 	bl	8009dd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b086      	sub	sp, #24
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	4603      	mov	r3, r0
 8009d76:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	617b      	str	r3, [r7, #20]
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009d80:	79fb      	ldrb	r3, [r7, #7]
 8009d82:	461a      	mov	r2, r3
 8009d84:	6939      	ldr	r1, [r7, #16]
 8009d86:	6978      	ldr	r0, [r7, #20]
 8009d88:	f7ff ff76 	bl	8009c78 <xQueueGenericCreate>
 8009d8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f7ff ffd3 	bl	8009d3a <prvInitialiseMutex>

		return xNewQueue;
 8009d94:	68fb      	ldr	r3, [r7, #12]
	}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b088      	sub	sp, #32
 8009da2:	af02      	add	r7, sp, #8
 8009da4:	4603      	mov	r3, r0
 8009da6:	6039      	str	r1, [r7, #0]
 8009da8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009daa:	2301      	movs	r3, #1
 8009dac:	617b      	str	r3, [r7, #20]
 8009dae:	2300      	movs	r3, #0
 8009db0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2200      	movs	r2, #0
 8009dba:	6939      	ldr	r1, [r7, #16]
 8009dbc:	6978      	ldr	r0, [r7, #20]
 8009dbe:	f7ff fed9 	bl	8009b74 <xQueueGenericCreateStatic>
 8009dc2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7ff ffb8 	bl	8009d3a <prvInitialiseMutex>

		return xNewQueue;
 8009dca:	68fb      	ldr	r3, [r7, #12]
	}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08e      	sub	sp, #56	; 0x38
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009de2:	2300      	movs	r3, #0
 8009de4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10c      	bne.n	8009e0a <xQueueGenericSend+0x36>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	b672      	cpsid	i
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	b662      	cpsie	i
 8009e04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e06:	bf00      	nop
 8009e08:	e7fe      	b.n	8009e08 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d103      	bne.n	8009e18 <xQueueGenericSend+0x44>
 8009e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <xQueueGenericSend+0x48>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e000      	b.n	8009e1e <xQueueGenericSend+0x4a>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10c      	bne.n	8009e3c <xQueueGenericSend+0x68>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e26:	b672      	cpsid	i
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	b662      	cpsie	i
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e38:	bf00      	nop
 8009e3a:	e7fe      	b.n	8009e3a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d103      	bne.n	8009e4a <xQueueGenericSend+0x76>
 8009e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <xQueueGenericSend+0x7a>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e000      	b.n	8009e50 <xQueueGenericSend+0x7c>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10c      	bne.n	8009e6e <xQueueGenericSend+0x9a>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	b672      	cpsid	i
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	b662      	cpsie	i
 8009e68:	623b      	str	r3, [r7, #32]
}
 8009e6a:	bf00      	nop
 8009e6c:	e7fe      	b.n	8009e6c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e6e:	f001 fbf5 	bl	800b65c <xTaskGetSchedulerState>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d102      	bne.n	8009e7e <xQueueGenericSend+0xaa>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <xQueueGenericSend+0xae>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e000      	b.n	8009e84 <xQueueGenericSend+0xb0>
 8009e82:	2300      	movs	r3, #0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10c      	bne.n	8009ea2 <xQueueGenericSend+0xce>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	b672      	cpsid	i
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	b662      	cpsie	i
 8009e9c:	61fb      	str	r3, [r7, #28]
}
 8009e9e:	bf00      	nop
 8009ea0:	e7fe      	b.n	8009ea0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ea2:	f001 ff2b 	bl	800bcfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d302      	bcc.n	8009eb8 <xQueueGenericSend+0xe4>
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d129      	bne.n	8009f0c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	68b9      	ldr	r1, [r7, #8]
 8009ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ebe:	f000 fcc2 	bl	800a846 <prvCopyDataToQueue>
 8009ec2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d010      	beq.n	8009eee <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	3324      	adds	r3, #36	; 0x24
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f001 f9ff 	bl	800b2d4 <xTaskRemoveFromEventList>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d013      	beq.n	8009f04 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009edc:	4b3f      	ldr	r3, [pc, #252]	; (8009fdc <xQueueGenericSend+0x208>)
 8009ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	e00a      	b.n	8009f04 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d007      	beq.n	8009f04 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ef4:	4b39      	ldr	r3, [pc, #228]	; (8009fdc <xQueueGenericSend+0x208>)
 8009ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f04:	f001 ff2e 	bl	800bd64 <vPortExitCritical>
				return pdPASS;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e063      	b.n	8009fd4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d103      	bne.n	8009f1a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f12:	f001 ff27 	bl	800bd64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f16:	2300      	movs	r3, #0
 8009f18:	e05c      	b.n	8009fd4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d106      	bne.n	8009f2e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f20:	f107 0314 	add.w	r3, r7, #20
 8009f24:	4618      	mov	r0, r3
 8009f26:	f001 fa39 	bl	800b39c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f2e:	f001 ff19 	bl	800bd64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f32:	f000 ffc3 	bl	800aebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f36:	f001 fee1 	bl	800bcfc <vPortEnterCritical>
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f40:	b25b      	sxtb	r3, r3
 8009f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f46:	d103      	bne.n	8009f50 <xQueueGenericSend+0x17c>
 8009f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f56:	b25b      	sxtb	r3, r3
 8009f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5c:	d103      	bne.n	8009f66 <xQueueGenericSend+0x192>
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f66:	f001 fefd 	bl	800bd64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f6a:	1d3a      	adds	r2, r7, #4
 8009f6c:	f107 0314 	add.w	r3, r7, #20
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 fa28 	bl	800b3c8 <xTaskCheckForTimeOut>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d124      	bne.n	8009fc8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f80:	f000 fd59 	bl	800aa36 <prvIsQueueFull>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d018      	beq.n	8009fbc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	3310      	adds	r3, #16
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	4611      	mov	r1, r2
 8009f92:	4618      	mov	r0, r3
 8009f94:	f001 f978 	bl	800b288 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f9a:	f000 fce4 	bl	800a966 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f9e:	f000 ff9b 	bl	800aed8 <xTaskResumeAll>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f47f af7c 	bne.w	8009ea2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009faa:	4b0c      	ldr	r3, [pc, #48]	; (8009fdc <xQueueGenericSend+0x208>)
 8009fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	e772      	b.n	8009ea2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fbe:	f000 fcd2 	bl	800a966 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fc2:	f000 ff89 	bl	800aed8 <xTaskResumeAll>
 8009fc6:	e76c      	b.n	8009ea2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fca:	f000 fccc 	bl	800a966 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fce:	f000 ff83 	bl	800aed8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3738      	adds	r7, #56	; 0x38
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	e000ed04 	.word	0xe000ed04

08009fe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b08e      	sub	sp, #56	; 0x38
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10c      	bne.n	800a012 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	b672      	cpsid	i
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	b662      	cpsie	i
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a00e:	bf00      	nop
 800a010:	e7fe      	b.n	800a010 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d103      	bne.n	800a020 <xQueueGenericSendFromISR+0x40>
 800a018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <xQueueGenericSendFromISR+0x44>
 800a020:	2301      	movs	r3, #1
 800a022:	e000      	b.n	800a026 <xQueueGenericSendFromISR+0x46>
 800a024:	2300      	movs	r3, #0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10c      	bne.n	800a044 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02e:	b672      	cpsid	i
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	b662      	cpsie	i
 800a03e:	623b      	str	r3, [r7, #32]
}
 800a040:	bf00      	nop
 800a042:	e7fe      	b.n	800a042 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b02      	cmp	r3, #2
 800a048:	d103      	bne.n	800a052 <xQueueGenericSendFromISR+0x72>
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d101      	bne.n	800a056 <xQueueGenericSendFromISR+0x76>
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <xQueueGenericSendFromISR+0x78>
 800a056:	2300      	movs	r3, #0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10c      	bne.n	800a076 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	b672      	cpsid	i
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	b662      	cpsie	i
 800a070:	61fb      	str	r3, [r7, #28]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a076:	f001 ff29 	bl	800becc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a07a:	f3ef 8211 	mrs	r2, BASEPRI
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	b672      	cpsid	i
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	b662      	cpsie	i
 800a092:	61ba      	str	r2, [r7, #24]
 800a094:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a096:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a098:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d302      	bcc.n	800a0ac <xQueueGenericSendFromISR+0xcc>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d12c      	bne.n	800a106 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	68b9      	ldr	r1, [r7, #8]
 800a0ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0bc:	f000 fbc3 	bl	800a846 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c8:	d112      	bne.n	800a0f0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d016      	beq.n	800a100 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d4:	3324      	adds	r3, #36	; 0x24
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f001 f8fc 	bl	800b2d4 <xTaskRemoveFromEventList>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00e      	beq.n	800a100 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00b      	beq.n	800a100 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	e007      	b.n	800a100 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	b25a      	sxtb	r2, r3
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a100:	2301      	movs	r3, #1
 800a102:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a104:	e001      	b.n	800a10a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a106:	2300      	movs	r3, #0
 800a108:	637b      	str	r3, [r7, #52]	; 0x34
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a114:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3738      	adds	r7, #56	; 0x38
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b08e      	sub	sp, #56	; 0x38
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10c      	bne.n	800a14e <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	b672      	cpsid	i
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	b662      	cpsie	i
 800a148:	623b      	str	r3, [r7, #32]
}
 800a14a:	bf00      	nop
 800a14c:	e7fe      	b.n	800a14c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00c      	beq.n	800a170 <xQueueGiveFromISR+0x50>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	b672      	cpsid	i
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	b662      	cpsie	i
 800a16a:	61fb      	str	r3, [r7, #28]
}
 800a16c:	bf00      	nop
 800a16e:	e7fe      	b.n	800a16e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d103      	bne.n	800a180 <xQueueGiveFromISR+0x60>
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d101      	bne.n	800a184 <xQueueGiveFromISR+0x64>
 800a180:	2301      	movs	r3, #1
 800a182:	e000      	b.n	800a186 <xQueueGiveFromISR+0x66>
 800a184:	2300      	movs	r3, #0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10c      	bne.n	800a1a4 <xQueueGiveFromISR+0x84>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	b672      	cpsid	i
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	b662      	cpsie	i
 800a19e:	61bb      	str	r3, [r7, #24]
}
 800a1a0:	bf00      	nop
 800a1a2:	e7fe      	b.n	800a1a2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1a4:	f001 fe92 	bl	800becc <vPortValidateInterruptPriority>
	__asm volatile
 800a1a8:	f3ef 8211 	mrs	r2, BASEPRI
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	b672      	cpsid	i
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	b662      	cpsie	i
 800a1c0:	617a      	str	r2, [r7, #20]
 800a1c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a1c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1cc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d22b      	bcs.n	800a230 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d112      	bne.n	800a21a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d016      	beq.n	800a22a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	3324      	adds	r3, #36	; 0x24
 800a200:	4618      	mov	r0, r3
 800a202:	f001 f867 	bl	800b2d4 <xTaskRemoveFromEventList>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00e      	beq.n	800a22a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00b      	beq.n	800a22a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2201      	movs	r2, #1
 800a216:	601a      	str	r2, [r3, #0]
 800a218:	e007      	b.n	800a22a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a21a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a21e:	3301      	adds	r3, #1
 800a220:	b2db      	uxtb	r3, r3
 800a222:	b25a      	sxtb	r2, r3
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a22a:	2301      	movs	r3, #1
 800a22c:	637b      	str	r3, [r7, #52]	; 0x34
 800a22e:	e001      	b.n	800a234 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a230:	2300      	movs	r3, #0
 800a232:	637b      	str	r3, [r7, #52]	; 0x34
 800a234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a236:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f383 8811 	msr	BASEPRI, r3
}
 800a23e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a242:	4618      	mov	r0, r3
 800a244:	3738      	adds	r7, #56	; 0x38
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
	...

0800a24c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08c      	sub	sp, #48	; 0x30
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a258:	2300      	movs	r3, #0
 800a25a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10c      	bne.n	800a280 <xQueueReceive+0x34>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26a:	b672      	cpsid	i
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	b662      	cpsie	i
 800a27a:	623b      	str	r3, [r7, #32]
}
 800a27c:	bf00      	nop
 800a27e:	e7fe      	b.n	800a27e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d103      	bne.n	800a28e <xQueueReceive+0x42>
 800a286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <xQueueReceive+0x46>
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <xQueueReceive+0x48>
 800a292:	2300      	movs	r3, #0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10c      	bne.n	800a2b2 <xQueueReceive+0x66>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	b672      	cpsid	i
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	b662      	cpsie	i
 800a2ac:	61fb      	str	r3, [r7, #28]
}
 800a2ae:	bf00      	nop
 800a2b0:	e7fe      	b.n	800a2b0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2b2:	f001 f9d3 	bl	800b65c <xTaskGetSchedulerState>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d102      	bne.n	800a2c2 <xQueueReceive+0x76>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <xQueueReceive+0x7a>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <xQueueReceive+0x7c>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10c      	bne.n	800a2e6 <xQueueReceive+0x9a>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	b672      	cpsid	i
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	b662      	cpsie	i
 800a2e0:	61bb      	str	r3, [r7, #24]
}
 800a2e2:	bf00      	nop
 800a2e4:	e7fe      	b.n	800a2e4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2e6:	f001 fd09 	bl	800bcfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d01f      	beq.n	800a336 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2fa:	f000 fb0e 	bl	800a91a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	1e5a      	subs	r2, r3, #1
 800a302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a304:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00f      	beq.n	800a32e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	3310      	adds	r3, #16
 800a312:	4618      	mov	r0, r3
 800a314:	f000 ffde 	bl	800b2d4 <xTaskRemoveFromEventList>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d007      	beq.n	800a32e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a31e:	4b3d      	ldr	r3, [pc, #244]	; (800a414 <xQueueReceive+0x1c8>)
 800a320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a32e:	f001 fd19 	bl	800bd64 <vPortExitCritical>
				return pdPASS;
 800a332:	2301      	movs	r3, #1
 800a334:	e069      	b.n	800a40a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d103      	bne.n	800a344 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a33c:	f001 fd12 	bl	800bd64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a340:	2300      	movs	r3, #0
 800a342:	e062      	b.n	800a40a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d106      	bne.n	800a358 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a34a:	f107 0310 	add.w	r3, r7, #16
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 f824 	bl	800b39c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a354:	2301      	movs	r3, #1
 800a356:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a358:	f001 fd04 	bl	800bd64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a35c:	f000 fdae 	bl	800aebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a360:	f001 fccc 	bl	800bcfc <vPortEnterCritical>
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a366:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a36a:	b25b      	sxtb	r3, r3
 800a36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a370:	d103      	bne.n	800a37a <xQueueReceive+0x12e>
 800a372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a380:	b25b      	sxtb	r3, r3
 800a382:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a386:	d103      	bne.n	800a390 <xQueueReceive+0x144>
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a390:	f001 fce8 	bl	800bd64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a394:	1d3a      	adds	r2, r7, #4
 800a396:	f107 0310 	add.w	r3, r7, #16
 800a39a:	4611      	mov	r1, r2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f001 f813 	bl	800b3c8 <xTaskCheckForTimeOut>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d123      	bne.n	800a3f0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3aa:	f000 fb2e 	bl	800aa0a <prvIsQueueEmpty>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d017      	beq.n	800a3e4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b6:	3324      	adds	r3, #36	; 0x24
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 ff63 	bl	800b288 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3c4:	f000 facf 	bl	800a966 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3c8:	f000 fd86 	bl	800aed8 <xTaskResumeAll>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d189      	bne.n	800a2e6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a3d2:	4b10      	ldr	r3, [pc, #64]	; (800a414 <xQueueReceive+0x1c8>)
 800a3d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	e780      	b.n	800a2e6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a3e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3e6:	f000 fabe 	bl	800a966 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3ea:	f000 fd75 	bl	800aed8 <xTaskResumeAll>
 800a3ee:	e77a      	b.n	800a2e6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a3f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f2:	f000 fab8 	bl	800a966 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3f6:	f000 fd6f 	bl	800aed8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3fc:	f000 fb05 	bl	800aa0a <prvIsQueueEmpty>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	f43f af6f 	beq.w	800a2e6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a408:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3730      	adds	r7, #48	; 0x30
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	e000ed04 	.word	0xe000ed04

0800a418 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08e      	sub	sp, #56	; 0x38
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a422:	2300      	movs	r3, #0
 800a424:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a42a:	2300      	movs	r3, #0
 800a42c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10c      	bne.n	800a44e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	b672      	cpsid	i
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	b662      	cpsie	i
 800a448:	623b      	str	r3, [r7, #32]
}
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00c      	beq.n	800a470 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	b672      	cpsid	i
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	b662      	cpsie	i
 800a46a:	61fb      	str	r3, [r7, #28]
}
 800a46c:	bf00      	nop
 800a46e:	e7fe      	b.n	800a46e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a470:	f001 f8f4 	bl	800b65c <xTaskGetSchedulerState>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d102      	bne.n	800a480 <xQueueSemaphoreTake+0x68>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <xQueueSemaphoreTake+0x6c>
 800a480:	2301      	movs	r3, #1
 800a482:	e000      	b.n	800a486 <xQueueSemaphoreTake+0x6e>
 800a484:	2300      	movs	r3, #0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10c      	bne.n	800a4a4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	b672      	cpsid	i
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	b662      	cpsie	i
 800a49e:	61bb      	str	r3, [r7, #24]
}
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4a4:	f001 fc2a 	bl	800bcfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d024      	beq.n	800a4fe <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	1e5a      	subs	r2, r3, #1
 800a4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d104      	bne.n	800a4ce <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a4c4:	f001 fa90 	bl	800b9e8 <pvTaskIncrementMutexHeldCount>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00f      	beq.n	800a4f6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d8:	3310      	adds	r3, #16
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fefa 	bl	800b2d4 <xTaskRemoveFromEventList>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d007      	beq.n	800a4f6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4e6:	4b55      	ldr	r3, [pc, #340]	; (800a63c <xQueueSemaphoreTake+0x224>)
 800a4e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4f6:	f001 fc35 	bl	800bd64 <vPortExitCritical>
				return pdPASS;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e099      	b.n	800a632 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d113      	bne.n	800a52c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00c      	beq.n	800a524 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	b672      	cpsid	i
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	b662      	cpsie	i
 800a51e:	617b      	str	r3, [r7, #20]
}
 800a520:	bf00      	nop
 800a522:	e7fe      	b.n	800a522 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a524:	f001 fc1e 	bl	800bd64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a528:	2300      	movs	r3, #0
 800a52a:	e082      	b.n	800a632 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d106      	bne.n	800a540 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a532:	f107 030c 	add.w	r3, r7, #12
 800a536:	4618      	mov	r0, r3
 800a538:	f000 ff30 	bl	800b39c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a53c:	2301      	movs	r3, #1
 800a53e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a540:	f001 fc10 	bl	800bd64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a544:	f000 fcba 	bl	800aebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a548:	f001 fbd8 	bl	800bcfc <vPortEnterCritical>
 800a54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a552:	b25b      	sxtb	r3, r3
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a558:	d103      	bne.n	800a562 <xQueueSemaphoreTake+0x14a>
 800a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a568:	b25b      	sxtb	r3, r3
 800a56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56e:	d103      	bne.n	800a578 <xQueueSemaphoreTake+0x160>
 800a570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a578:	f001 fbf4 	bl	800bd64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a57c:	463a      	mov	r2, r7
 800a57e:	f107 030c 	add.w	r3, r7, #12
 800a582:	4611      	mov	r1, r2
 800a584:	4618      	mov	r0, r3
 800a586:	f000 ff1f 	bl	800b3c8 <xTaskCheckForTimeOut>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d132      	bne.n	800a5f6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a592:	f000 fa3a 	bl	800aa0a <prvIsQueueEmpty>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d026      	beq.n	800a5ea <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d109      	bne.n	800a5b8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800a5a4:	f001 fbaa 	bl	800bcfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f001 f873 	bl	800b698 <xTaskPriorityInherit>
 800a5b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a5b4:	f001 fbd6 	bl	800bd64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ba:	3324      	adds	r3, #36	; 0x24
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fe61 	bl	800b288 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5c8:	f000 f9cd 	bl	800a966 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5cc:	f000 fc84 	bl	800aed8 <xTaskResumeAll>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f47f af66 	bne.w	800a4a4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800a5d8:	4b18      	ldr	r3, [pc, #96]	; (800a63c <xQueueSemaphoreTake+0x224>)
 800a5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	e75c      	b.n	800a4a4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a5ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5ec:	f000 f9bb 	bl	800a966 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5f0:	f000 fc72 	bl	800aed8 <xTaskResumeAll>
 800a5f4:	e756      	b.n	800a4a4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a5f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5f8:	f000 f9b5 	bl	800a966 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5fc:	f000 fc6c 	bl	800aed8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a602:	f000 fa02 	bl	800aa0a <prvIsQueueEmpty>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f43f af4b 	beq.w	800a4a4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00d      	beq.n	800a630 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800a614:	f001 fb72 	bl	800bcfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a61a:	f000 f8fc 	bl	800a816 <prvGetDisinheritPriorityAfterTimeout>
 800a61e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a626:	4618      	mov	r0, r3
 800a628:	f001 f940 	bl	800b8ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a62c:	f001 fb9a 	bl	800bd64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a632:	4618      	mov	r0, r3
 800a634:	3738      	adds	r7, #56	; 0x38
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	e000ed04 	.word	0xe000ed04

0800a640 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b08e      	sub	sp, #56	; 0x38
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10c      	bne.n	800a670 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	b672      	cpsid	i
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	b662      	cpsie	i
 800a66a:	623b      	str	r3, [r7, #32]
}
 800a66c:	bf00      	nop
 800a66e:	e7fe      	b.n	800a66e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d103      	bne.n	800a67e <xQueueReceiveFromISR+0x3e>
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <xQueueReceiveFromISR+0x42>
 800a67e:	2301      	movs	r3, #1
 800a680:	e000      	b.n	800a684 <xQueueReceiveFromISR+0x44>
 800a682:	2300      	movs	r3, #0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10c      	bne.n	800a6a2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	b672      	cpsid	i
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	b662      	cpsie	i
 800a69c:	61fb      	str	r3, [r7, #28]
}
 800a69e:	bf00      	nop
 800a6a0:	e7fe      	b.n	800a6a0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6a2:	f001 fc13 	bl	800becc <vPortValidateInterruptPriority>
	__asm volatile
 800a6a6:	f3ef 8211 	mrs	r2, BASEPRI
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	b672      	cpsid	i
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	b662      	cpsie	i
 800a6be:	61ba      	str	r2, [r7, #24]
 800a6c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a6c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d02f      	beq.n	800a732 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6dc:	68b9      	ldr	r1, [r7, #8]
 800a6de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6e0:	f000 f91b 	bl	800a91a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	1e5a      	subs	r2, r3, #1
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a6ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f4:	d112      	bne.n	800a71c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d016      	beq.n	800a72c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	3310      	adds	r3, #16
 800a702:	4618      	mov	r0, r3
 800a704:	f000 fde6 	bl	800b2d4 <xTaskRemoveFromEventList>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00e      	beq.n	800a72c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00b      	beq.n	800a72c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	e007      	b.n	800a72c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a720:	3301      	adds	r3, #1
 800a722:	b2db      	uxtb	r3, r3
 800a724:	b25a      	sxtb	r2, r3
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a72c:	2301      	movs	r3, #1
 800a72e:	637b      	str	r3, [r7, #52]	; 0x34
 800a730:	e001      	b.n	800a736 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800a732:	2300      	movs	r3, #0
 800a734:	637b      	str	r3, [r7, #52]	; 0x34
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f383 8811 	msr	BASEPRI, r3
}
 800a740:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a744:	4618      	mov	r0, r3
 800a746:	3738      	adds	r7, #56	; 0x38
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10c      	bne.n	800a774 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	b672      	cpsid	i
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	b662      	cpsie	i
 800a76e:	60bb      	str	r3, [r7, #8]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800a774:	f001 fac2 	bl	800bcfc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a77e:	f001 faf1 	bl	800bd64 <vPortExitCritical>

	return uxReturn;
 800a782:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a78c:	b480      	push	{r7}
 800a78e:	b087      	sub	sp, #28
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10c      	bne.n	800a7b8 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	b672      	cpsid	i
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	b662      	cpsie	i
 800a7b2:	60fb      	str	r3, [r7, #12]
}
 800a7b4:	bf00      	nop
 800a7b6:	e7fe      	b.n	800a7b6 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7bc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a7be:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	371c      	adds	r7, #28
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10c      	bne.n	800a7f8 <vQueueDelete+0x2c>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	b672      	cpsid	i
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	b662      	cpsie	i
 800a7f2:	60bb      	str	r3, [r7, #8]
}
 800a7f4:	bf00      	nop
 800a7f6:	e7fe      	b.n	800a7f6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 f935 	bl	800aa68 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a804:	2b00      	cmp	r3, #0
 800a806:	d102      	bne.n	800a80e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f001 fc6d 	bl	800c0e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a80e:	bf00      	nop
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a816:	b480      	push	{r7}
 800a818:	b085      	sub	sp, #20
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a822:	2b00      	cmp	r3, #0
 800a824:	d006      	beq.n	800a834 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f1c3 0307 	rsb	r3, r3, #7
 800a830:	60fb      	str	r3, [r7, #12]
 800a832:	e001      	b.n	800a838 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a834:	2300      	movs	r3, #0
 800a836:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a838:	68fb      	ldr	r3, [r7, #12]
	}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b086      	sub	sp, #24
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	60f8      	str	r0, [r7, #12]
 800a84e:	60b9      	str	r1, [r7, #8]
 800a850:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10d      	bne.n	800a880 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d14d      	bne.n	800a908 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	4618      	mov	r0, r3
 800a872:	f000 ff91 	bl	800b798 <xTaskPriorityDisinherit>
 800a876:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	609a      	str	r2, [r3, #8]
 800a87e:	e043      	b.n	800a908 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d119      	bne.n	800a8ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6858      	ldr	r0, [r3, #4]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88e:	461a      	mov	r2, r3
 800a890:	68b9      	ldr	r1, [r7, #8]
 800a892:	f010 f829 	bl	801a8e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	685a      	ldr	r2, [r3, #4]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89e:	441a      	add	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d32b      	bcc.n	800a908 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	605a      	str	r2, [r3, #4]
 800a8b8:	e026      	b.n	800a908 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	68d8      	ldr	r0, [r3, #12]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	68b9      	ldr	r1, [r7, #8]
 800a8c6:	f010 f80f 	bl	801a8e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	68da      	ldr	r2, [r3, #12]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	425b      	negs	r3, r3
 800a8d4:	441a      	add	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	68da      	ldr	r2, [r3, #12]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d207      	bcs.n	800a8f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ee:	425b      	negs	r3, r3
 800a8f0:	441a      	add	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d105      	bne.n	800a908 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	3b01      	subs	r3, #1
 800a906:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	1c5a      	adds	r2, r3, #1
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a910:	697b      	ldr	r3, [r7, #20]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d018      	beq.n	800a95e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68da      	ldr	r2, [r3, #12]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a934:	441a      	add	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68da      	ldr	r2, [r3, #12]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	429a      	cmp	r2, r3
 800a944:	d303      	bcc.n	800a94e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68d9      	ldr	r1, [r3, #12]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	461a      	mov	r2, r3
 800a958:	6838      	ldr	r0, [r7, #0]
 800a95a:	f00f ffc5 	bl	801a8e8 <memcpy>
	}
}
 800a95e:	bf00      	nop
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a96e:	f001 f9c5 	bl	800bcfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a978:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a97a:	e011      	b.n	800a9a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a980:	2b00      	cmp	r3, #0
 800a982:	d012      	beq.n	800a9aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3324      	adds	r3, #36	; 0x24
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fca3 	bl	800b2d4 <xTaskRemoveFromEventList>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a994:	f000 fd7e 	bl	800b494 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	dce9      	bgt.n	800a97c <prvUnlockQueue+0x16>
 800a9a8:	e000      	b.n	800a9ac <prvUnlockQueue+0x46>
					break;
 800a9aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	22ff      	movs	r2, #255	; 0xff
 800a9b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a9b4:	f001 f9d6 	bl	800bd64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9b8:	f001 f9a0 	bl	800bcfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9c4:	e011      	b.n	800a9ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d012      	beq.n	800a9f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	3310      	adds	r3, #16
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fc7e 	bl	800b2d4 <xTaskRemoveFromEventList>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9de:	f000 fd59 	bl	800b494 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9e2:	7bbb      	ldrb	r3, [r7, #14]
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	dce9      	bgt.n	800a9c6 <prvUnlockQueue+0x60>
 800a9f2:	e000      	b.n	800a9f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a9f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	22ff      	movs	r2, #255	; 0xff
 800a9fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a9fe:	f001 f9b1 	bl	800bd64 <vPortExitCritical>
}
 800aa02:	bf00      	nop
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa12:	f001 f973 	bl	800bcfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d102      	bne.n	800aa24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	60fb      	str	r3, [r7, #12]
 800aa22:	e001      	b.n	800aa28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa24:	2300      	movs	r3, #0
 800aa26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa28:	f001 f99c 	bl	800bd64 <vPortExitCritical>

	return xReturn;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b084      	sub	sp, #16
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa3e:	f001 f95d 	bl	800bcfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d102      	bne.n	800aa54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	60fb      	str	r3, [r7, #12]
 800aa52:	e001      	b.n	800aa58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa54:	2300      	movs	r3, #0
 800aa56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa58:	f001 f984 	bl	800bd64 <vPortExitCritical>

	return xReturn;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa70:	2300      	movs	r3, #0
 800aa72:	60fb      	str	r3, [r7, #12]
 800aa74:	e016      	b.n	800aaa4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aa76:	4a10      	ldr	r2, [pc, #64]	; (800aab8 <vQueueUnregisterQueue+0x50>)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	4413      	add	r3, r2
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d10b      	bne.n	800aa9e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aa86:	4a0c      	ldr	r2, [pc, #48]	; (800aab8 <vQueueUnregisterQueue+0x50>)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aa90:	4a09      	ldr	r2, [pc, #36]	; (800aab8 <vQueueUnregisterQueue+0x50>)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	4413      	add	r3, r2
 800aa98:	2200      	movs	r2, #0
 800aa9a:	605a      	str	r2, [r3, #4]
				break;
 800aa9c:	e006      	b.n	800aaac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b07      	cmp	r3, #7
 800aaa8:	d9e5      	bls.n	800aa76 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aaaa:	bf00      	nop
 800aaac:	bf00      	nop
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	200086bc 	.word	0x200086bc

0800aabc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b08e      	sub	sp, #56	; 0x38
 800aac0:	af04      	add	r7, sp, #16
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aaca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10c      	bne.n	800aaea <xTaskCreateStatic+0x2e>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	b672      	cpsid	i
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	b662      	cpsie	i
 800aae4:	623b      	str	r3, [r7, #32]
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10c      	bne.n	800ab0a <xTaskCreateStatic+0x4e>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	b672      	cpsid	i
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	b662      	cpsie	i
 800ab04:	61fb      	str	r3, [r7, #28]
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab0a:	2354      	movs	r3, #84	; 0x54
 800ab0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	2b54      	cmp	r3, #84	; 0x54
 800ab12:	d00c      	beq.n	800ab2e <xTaskCreateStatic+0x72>
	__asm volatile
 800ab14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab18:	b672      	cpsid	i
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	b662      	cpsie	i
 800ab28:	61bb      	str	r3, [r7, #24]
}
 800ab2a:	bf00      	nop
 800ab2c:	e7fe      	b.n	800ab2c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d01e      	beq.n	800ab74 <xTaskCreateStatic+0xb8>
 800ab36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d01b      	beq.n	800ab74 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab48:	2202      	movs	r2, #2
 800ab4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab4e:	2300      	movs	r3, #0
 800ab50:	9303      	str	r3, [sp, #12]
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	9302      	str	r3, [sp, #8]
 800ab56:	f107 0314 	add.w	r3, r7, #20
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	68b9      	ldr	r1, [r7, #8]
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 f850 	bl	800ac0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab6e:	f000 f8d7 	bl	800ad20 <prvAddNewTaskToReadyList>
 800ab72:	e001      	b.n	800ab78 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ab74:	2300      	movs	r3, #0
 800ab76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab78:	697b      	ldr	r3, [r7, #20]
	}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3728      	adds	r7, #40	; 0x28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b08c      	sub	sp, #48	; 0x30
 800ab86:	af04      	add	r7, sp, #16
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	603b      	str	r3, [r7, #0]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f001 f9dc 	bl	800bf54 <pvPortMalloc>
 800ab9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00e      	beq.n	800abc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aba4:	2054      	movs	r0, #84	; 0x54
 800aba6:	f001 f9d5 	bl	800bf54 <pvPortMalloc>
 800abaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	697a      	ldr	r2, [r7, #20]
 800abb6:	631a      	str	r2, [r3, #48]	; 0x30
 800abb8:	e005      	b.n	800abc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abba:	6978      	ldr	r0, [r7, #20]
 800abbc:	f001 fa94 	bl	800c0e8 <vPortFree>
 800abc0:	e001      	b.n	800abc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d017      	beq.n	800abfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	2200      	movs	r2, #0
 800abd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abd4:	88fa      	ldrh	r2, [r7, #6]
 800abd6:	2300      	movs	r3, #0
 800abd8:	9303      	str	r3, [sp, #12]
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	9302      	str	r3, [sp, #8]
 800abde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	68b9      	ldr	r1, [r7, #8]
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f000 f80e 	bl	800ac0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abf0:	69f8      	ldr	r0, [r7, #28]
 800abf2:	f000 f895 	bl	800ad20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abf6:	2301      	movs	r3, #1
 800abf8:	61bb      	str	r3, [r7, #24]
 800abfa:	e002      	b.n	800ac02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ac00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac02:	69bb      	ldr	r3, [r7, #24]
	}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3720      	adds	r7, #32
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
 800ac18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ac24:	440b      	add	r3, r1
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	f023 0307 	bic.w	r3, r3, #7
 800ac32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00c      	beq.n	800ac58 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800ac3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac42:	b672      	cpsid	i
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	b662      	cpsie	i
 800ac52:	617b      	str	r3, [r7, #20]
}
 800ac54:	bf00      	nop
 800ac56:	e7fe      	b.n	800ac56 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d01f      	beq.n	800ac9e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61fb      	str	r3, [r7, #28]
 800ac62:	e012      	b.n	800ac8a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	4413      	add	r3, r2
 800ac6a:	7819      	ldrb	r1, [r3, #0]
 800ac6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	4413      	add	r3, r2
 800ac72:	3334      	adds	r3, #52	; 0x34
 800ac74:	460a      	mov	r2, r1
 800ac76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d006      	beq.n	800ac92 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	3301      	adds	r3, #1
 800ac88:	61fb      	str	r3, [r7, #28]
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	2b0f      	cmp	r3, #15
 800ac8e:	d9e9      	bls.n	800ac64 <prvInitialiseNewTask+0x58>
 800ac90:	e000      	b.n	800ac94 <prvInitialiseNewTask+0x88>
			{
				break;
 800ac92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac9c:	e003      	b.n	800aca6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca8:	2b06      	cmp	r3, #6
 800acaa:	d901      	bls.n	800acb0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acac:	2306      	movs	r3, #6
 800acae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800acbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbe:	2200      	movs	r2, #0
 800acc0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc4:	3304      	adds	r3, #4
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fe55 	bl	8009976 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800accc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acce:	3318      	adds	r3, #24
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe fe50 	bl	8009976 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	f1c3 0207 	rsb	r2, r3, #7
 800ace2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ace6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	2200      	movs	r2, #0
 800acf0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	68f9      	ldr	r1, [r7, #12]
 800acfe:	69b8      	ldr	r0, [r7, #24]
 800ad00:	f000 feec 	bl	800badc <pxPortInitialiseStack>
 800ad04:	4602      	mov	r2, r0
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad16:	bf00      	nop
 800ad18:	3720      	adds	r7, #32
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
	...

0800ad20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad28:	f000 ffe8 	bl	800bcfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad2c:	4b2a      	ldr	r3, [pc, #168]	; (800add8 <prvAddNewTaskToReadyList+0xb8>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3301      	adds	r3, #1
 800ad32:	4a29      	ldr	r2, [pc, #164]	; (800add8 <prvAddNewTaskToReadyList+0xb8>)
 800ad34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad36:	4b29      	ldr	r3, [pc, #164]	; (800addc <prvAddNewTaskToReadyList+0xbc>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d109      	bne.n	800ad52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad3e:	4a27      	ldr	r2, [pc, #156]	; (800addc <prvAddNewTaskToReadyList+0xbc>)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad44:	4b24      	ldr	r3, [pc, #144]	; (800add8 <prvAddNewTaskToReadyList+0xb8>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d110      	bne.n	800ad6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad4c:	f000 fbc6 	bl	800b4dc <prvInitialiseTaskLists>
 800ad50:	e00d      	b.n	800ad6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad52:	4b23      	ldr	r3, [pc, #140]	; (800ade0 <prvAddNewTaskToReadyList+0xc0>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d109      	bne.n	800ad6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad5a:	4b20      	ldr	r3, [pc, #128]	; (800addc <prvAddNewTaskToReadyList+0xbc>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d802      	bhi.n	800ad6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad68:	4a1c      	ldr	r2, [pc, #112]	; (800addc <prvAddNewTaskToReadyList+0xbc>)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad6e:	4b1d      	ldr	r3, [pc, #116]	; (800ade4 <prvAddNewTaskToReadyList+0xc4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	4a1b      	ldr	r2, [pc, #108]	; (800ade4 <prvAddNewTaskToReadyList+0xc4>)
 800ad76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	409a      	lsls	r2, r3
 800ad80:	4b19      	ldr	r3, [pc, #100]	; (800ade8 <prvAddNewTaskToReadyList+0xc8>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	4a18      	ldr	r2, [pc, #96]	; (800ade8 <prvAddNewTaskToReadyList+0xc8>)
 800ad88:	6013      	str	r3, [r2, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4a15      	ldr	r2, [pc, #84]	; (800adec <prvAddNewTaskToReadyList+0xcc>)
 800ad98:	441a      	add	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4610      	mov	r0, r2
 800ada2:	f7fe fdf5 	bl	8009990 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ada6:	f000 ffdd 	bl	800bd64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800adaa:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <prvAddNewTaskToReadyList+0xc0>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00e      	beq.n	800add0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adb2:	4b0a      	ldr	r3, [pc, #40]	; (800addc <prvAddNewTaskToReadyList+0xbc>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d207      	bcs.n	800add0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adc0:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <prvAddNewTaskToReadyList+0xd0>)
 800adc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	20000e18 	.word	0x20000e18
 800addc:	20000d18 	.word	0x20000d18
 800ade0:	20000e24 	.word	0x20000e24
 800ade4:	20000e34 	.word	0x20000e34
 800ade8:	20000e20 	.word	0x20000e20
 800adec:	20000d1c 	.word	0x20000d1c
 800adf0:	e000ed04 	.word	0xe000ed04

0800adf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08a      	sub	sp, #40	; 0x28
 800adf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800adfe:	2300      	movs	r3, #0
 800ae00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae02:	463a      	mov	r2, r7
 800ae04:	1d39      	adds	r1, r7, #4
 800ae06:	f107 0308 	add.w	r3, r7, #8
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7f6 f8c8 	bl	8000fa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	9202      	str	r2, [sp, #8]
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	460a      	mov	r2, r1
 800ae22:	4920      	ldr	r1, [pc, #128]	; (800aea4 <vTaskStartScheduler+0xb0>)
 800ae24:	4820      	ldr	r0, [pc, #128]	; (800aea8 <vTaskStartScheduler+0xb4>)
 800ae26:	f7ff fe49 	bl	800aabc <xTaskCreateStatic>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	4a1f      	ldr	r2, [pc, #124]	; (800aeac <vTaskStartScheduler+0xb8>)
 800ae2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae30:	4b1e      	ldr	r3, [pc, #120]	; (800aeac <vTaskStartScheduler+0xb8>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	617b      	str	r3, [r7, #20]
 800ae3c:	e001      	b.n	800ae42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d118      	bne.n	800ae7a <vTaskStartScheduler+0x86>
	__asm volatile
 800ae48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4c:	b672      	cpsid	i
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	b662      	cpsie	i
 800ae5c:	613b      	str	r3, [r7, #16]
}
 800ae5e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae60:	4b13      	ldr	r3, [pc, #76]	; (800aeb0 <vTaskStartScheduler+0xbc>)
 800ae62:	f04f 32ff 	mov.w	r2, #4294967295
 800ae66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae68:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <vTaskStartScheduler+0xc0>)
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae6e:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <vTaskStartScheduler+0xc4>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae74:	f000 fec4 	bl	800bc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae78:	e010      	b.n	800ae9c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae80:	d10c      	bne.n	800ae9c <vTaskStartScheduler+0xa8>
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	b672      	cpsid	i
 800ae88:	f383 8811 	msr	BASEPRI, r3
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	b662      	cpsie	i
 800ae96:	60fb      	str	r3, [r7, #12]
}
 800ae98:	bf00      	nop
 800ae9a:	e7fe      	b.n	800ae9a <vTaskStartScheduler+0xa6>
}
 800ae9c:	bf00      	nop
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	08023dd8 	.word	0x08023dd8
 800aea8:	0800b4ad 	.word	0x0800b4ad
 800aeac:	20000e3c 	.word	0x20000e3c
 800aeb0:	20000e38 	.word	0x20000e38
 800aeb4:	20000e24 	.word	0x20000e24
 800aeb8:	20000e1c 	.word	0x20000e1c

0800aebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aebc:	b480      	push	{r7}
 800aebe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aec0:	4b04      	ldr	r3, [pc, #16]	; (800aed4 <vTaskSuspendAll+0x18>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3301      	adds	r3, #1
 800aec6:	4a03      	ldr	r2, [pc, #12]	; (800aed4 <vTaskSuspendAll+0x18>)
 800aec8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800aeca:	bf00      	nop
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr
 800aed4:	20000e40 	.word	0x20000e40

0800aed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aee2:	2300      	movs	r3, #0
 800aee4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aee6:	4b42      	ldr	r3, [pc, #264]	; (800aff0 <xTaskResumeAll+0x118>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10c      	bne.n	800af08 <xTaskResumeAll+0x30>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	b672      	cpsid	i
 800aef4:	f383 8811 	msr	BASEPRI, r3
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	b662      	cpsie	i
 800af02:	603b      	str	r3, [r7, #0]
}
 800af04:	bf00      	nop
 800af06:	e7fe      	b.n	800af06 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af08:	f000 fef8 	bl	800bcfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af0c:	4b38      	ldr	r3, [pc, #224]	; (800aff0 <xTaskResumeAll+0x118>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3b01      	subs	r3, #1
 800af12:	4a37      	ldr	r2, [pc, #220]	; (800aff0 <xTaskResumeAll+0x118>)
 800af14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af16:	4b36      	ldr	r3, [pc, #216]	; (800aff0 <xTaskResumeAll+0x118>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d161      	bne.n	800afe2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af1e:	4b35      	ldr	r3, [pc, #212]	; (800aff4 <xTaskResumeAll+0x11c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d05d      	beq.n	800afe2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af26:	e02e      	b.n	800af86 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af28:	4b33      	ldr	r3, [pc, #204]	; (800aff8 <xTaskResumeAll+0x120>)
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	3318      	adds	r3, #24
 800af34:	4618      	mov	r0, r3
 800af36:	f7fe fd88 	bl	8009a4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	3304      	adds	r3, #4
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe fd83 	bl	8009a4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	2201      	movs	r2, #1
 800af4a:	409a      	lsls	r2, r3
 800af4c:	4b2b      	ldr	r3, [pc, #172]	; (800affc <xTaskResumeAll+0x124>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4313      	orrs	r3, r2
 800af52:	4a2a      	ldr	r2, [pc, #168]	; (800affc <xTaskResumeAll+0x124>)
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5a:	4613      	mov	r3, r2
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	4413      	add	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4a27      	ldr	r2, [pc, #156]	; (800b000 <xTaskResumeAll+0x128>)
 800af64:	441a      	add	r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	3304      	adds	r3, #4
 800af6a:	4619      	mov	r1, r3
 800af6c:	4610      	mov	r0, r2
 800af6e:	f7fe fd0f 	bl	8009990 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af76:	4b23      	ldr	r3, [pc, #140]	; (800b004 <xTaskResumeAll+0x12c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d302      	bcc.n	800af86 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800af80:	4b21      	ldr	r3, [pc, #132]	; (800b008 <xTaskResumeAll+0x130>)
 800af82:	2201      	movs	r2, #1
 800af84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af86:	4b1c      	ldr	r3, [pc, #112]	; (800aff8 <xTaskResumeAll+0x120>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1cc      	bne.n	800af28 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d001      	beq.n	800af98 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af94:	f000 fb42 	bl	800b61c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800af98:	4b1c      	ldr	r3, [pc, #112]	; (800b00c <xTaskResumeAll+0x134>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d010      	beq.n	800afc6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800afa4:	f000 f858 	bl	800b058 <xTaskIncrementTick>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d002      	beq.n	800afb4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800afae:	4b16      	ldr	r3, [pc, #88]	; (800b008 <xTaskResumeAll+0x130>)
 800afb0:	2201      	movs	r2, #1
 800afb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3b01      	subs	r3, #1
 800afb8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1f1      	bne.n	800afa4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800afc0:	4b12      	ldr	r3, [pc, #72]	; (800b00c <xTaskResumeAll+0x134>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800afc6:	4b10      	ldr	r3, [pc, #64]	; (800b008 <xTaskResumeAll+0x130>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d009      	beq.n	800afe2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800afce:	2301      	movs	r3, #1
 800afd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afd2:	4b0f      	ldr	r3, [pc, #60]	; (800b010 <xTaskResumeAll+0x138>)
 800afd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afe2:	f000 febf 	bl	800bd64 <vPortExitCritical>

	return xAlreadyYielded;
 800afe6:	68bb      	ldr	r3, [r7, #8]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	20000e40 	.word	0x20000e40
 800aff4:	20000e18 	.word	0x20000e18
 800aff8:	20000dd8 	.word	0x20000dd8
 800affc:	20000e20 	.word	0x20000e20
 800b000:	20000d1c 	.word	0x20000d1c
 800b004:	20000d18 	.word	0x20000d18
 800b008:	20000e2c 	.word	0x20000e2c
 800b00c:	20000e28 	.word	0x20000e28
 800b010:	e000ed04 	.word	0xe000ed04

0800b014 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b01a:	4b05      	ldr	r3, [pc, #20]	; (800b030 <xTaskGetTickCount+0x1c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b020:	687b      	ldr	r3, [r7, #4]
}
 800b022:	4618      	mov	r0, r3
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	20000e1c 	.word	0x20000e1c

0800b034 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b03a:	f000 ff47 	bl	800becc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b03e:	2300      	movs	r3, #0
 800b040:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b042:	4b04      	ldr	r3, [pc, #16]	; (800b054 <xTaskGetTickCountFromISR+0x20>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b048:	683b      	ldr	r3, [r7, #0]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	20000e1c 	.word	0x20000e1c

0800b058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b05e:	2300      	movs	r3, #0
 800b060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b062:	4b4f      	ldr	r3, [pc, #316]	; (800b1a0 <xTaskIncrementTick+0x148>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	f040 808a 	bne.w	800b180 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b06c:	4b4d      	ldr	r3, [pc, #308]	; (800b1a4 <xTaskIncrementTick+0x14c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3301      	adds	r3, #1
 800b072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b074:	4a4b      	ldr	r2, [pc, #300]	; (800b1a4 <xTaskIncrementTick+0x14c>)
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d122      	bne.n	800b0c6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b080:	4b49      	ldr	r3, [pc, #292]	; (800b1a8 <xTaskIncrementTick+0x150>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00c      	beq.n	800b0a4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08e:	b672      	cpsid	i
 800b090:	f383 8811 	msr	BASEPRI, r3
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	b662      	cpsie	i
 800b09e:	603b      	str	r3, [r7, #0]
}
 800b0a0:	bf00      	nop
 800b0a2:	e7fe      	b.n	800b0a2 <xTaskIncrementTick+0x4a>
 800b0a4:	4b40      	ldr	r3, [pc, #256]	; (800b1a8 <xTaskIncrementTick+0x150>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	4b40      	ldr	r3, [pc, #256]	; (800b1ac <xTaskIncrementTick+0x154>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a3e      	ldr	r2, [pc, #248]	; (800b1a8 <xTaskIncrementTick+0x150>)
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	4a3e      	ldr	r2, [pc, #248]	; (800b1ac <xTaskIncrementTick+0x154>)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6013      	str	r3, [r2, #0]
 800b0b8:	4b3d      	ldr	r3, [pc, #244]	; (800b1b0 <xTaskIncrementTick+0x158>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	4a3c      	ldr	r2, [pc, #240]	; (800b1b0 <xTaskIncrementTick+0x158>)
 800b0c0:	6013      	str	r3, [r2, #0]
 800b0c2:	f000 faab 	bl	800b61c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0c6:	4b3b      	ldr	r3, [pc, #236]	; (800b1b4 <xTaskIncrementTick+0x15c>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d348      	bcc.n	800b162 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0d0:	4b35      	ldr	r3, [pc, #212]	; (800b1a8 <xTaskIncrementTick+0x150>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d104      	bne.n	800b0e4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0da:	4b36      	ldr	r3, [pc, #216]	; (800b1b4 <xTaskIncrementTick+0x15c>)
 800b0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e0:	601a      	str	r2, [r3, #0]
					break;
 800b0e2:	e03e      	b.n	800b162 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e4:	4b30      	ldr	r3, [pc, #192]	; (800b1a8 <xTaskIncrementTick+0x150>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0f4:	693a      	ldr	r2, [r7, #16]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d203      	bcs.n	800b104 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0fc:	4a2d      	ldr	r2, [pc, #180]	; (800b1b4 <xTaskIncrementTick+0x15c>)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b102:	e02e      	b.n	800b162 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	3304      	adds	r3, #4
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fe fc9e 	bl	8009a4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b112:	2b00      	cmp	r3, #0
 800b114:	d004      	beq.n	800b120 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	3318      	adds	r3, #24
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe fc95 	bl	8009a4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	2201      	movs	r2, #1
 800b126:	409a      	lsls	r2, r3
 800b128:	4b23      	ldr	r3, [pc, #140]	; (800b1b8 <xTaskIncrementTick+0x160>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	4a22      	ldr	r2, [pc, #136]	; (800b1b8 <xTaskIncrementTick+0x160>)
 800b130:	6013      	str	r3, [r2, #0]
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b136:	4613      	mov	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4413      	add	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4a1f      	ldr	r2, [pc, #124]	; (800b1bc <xTaskIncrementTick+0x164>)
 800b140:	441a      	add	r2, r3
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	3304      	adds	r3, #4
 800b146:	4619      	mov	r1, r3
 800b148:	4610      	mov	r0, r2
 800b14a:	f7fe fc21 	bl	8009990 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b152:	4b1b      	ldr	r3, [pc, #108]	; (800b1c0 <xTaskIncrementTick+0x168>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	429a      	cmp	r2, r3
 800b15a:	d3b9      	bcc.n	800b0d0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b15c:	2301      	movs	r3, #1
 800b15e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b160:	e7b6      	b.n	800b0d0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b162:	4b17      	ldr	r3, [pc, #92]	; (800b1c0 <xTaskIncrementTick+0x168>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b168:	4914      	ldr	r1, [pc, #80]	; (800b1bc <xTaskIncrementTick+0x164>)
 800b16a:	4613      	mov	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	440b      	add	r3, r1
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d907      	bls.n	800b18a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800b17a:	2301      	movs	r3, #1
 800b17c:	617b      	str	r3, [r7, #20]
 800b17e:	e004      	b.n	800b18a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b180:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <xTaskIncrementTick+0x16c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3301      	adds	r3, #1
 800b186:	4a0f      	ldr	r2, [pc, #60]	; (800b1c4 <xTaskIncrementTick+0x16c>)
 800b188:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b18a:	4b0f      	ldr	r3, [pc, #60]	; (800b1c8 <xTaskIncrementTick+0x170>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d001      	beq.n	800b196 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800b192:	2301      	movs	r3, #1
 800b194:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b196:	697b      	ldr	r3, [r7, #20]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20000e40 	.word	0x20000e40
 800b1a4:	20000e1c 	.word	0x20000e1c
 800b1a8:	20000dd0 	.word	0x20000dd0
 800b1ac:	20000dd4 	.word	0x20000dd4
 800b1b0:	20000e30 	.word	0x20000e30
 800b1b4:	20000e38 	.word	0x20000e38
 800b1b8:	20000e20 	.word	0x20000e20
 800b1bc:	20000d1c 	.word	0x20000d1c
 800b1c0:	20000d18 	.word	0x20000d18
 800b1c4:	20000e28 	.word	0x20000e28
 800b1c8:	20000e2c 	.word	0x20000e2c

0800b1cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1d2:	4b28      	ldr	r3, [pc, #160]	; (800b274 <vTaskSwitchContext+0xa8>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d003      	beq.n	800b1e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1da:	4b27      	ldr	r3, [pc, #156]	; (800b278 <vTaskSwitchContext+0xac>)
 800b1dc:	2201      	movs	r2, #1
 800b1de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1e0:	e041      	b.n	800b266 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b1e2:	4b25      	ldr	r3, [pc, #148]	; (800b278 <vTaskSwitchContext+0xac>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1e8:	4b24      	ldr	r3, [pc, #144]	; (800b27c <vTaskSwitchContext+0xb0>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	fab3 f383 	clz	r3, r3
 800b1f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b1f6:	7afb      	ldrb	r3, [r7, #11]
 800b1f8:	f1c3 031f 	rsb	r3, r3, #31
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	4920      	ldr	r1, [pc, #128]	; (800b280 <vTaskSwitchContext+0xb4>)
 800b200:	697a      	ldr	r2, [r7, #20]
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	440b      	add	r3, r1
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10c      	bne.n	800b22c <vTaskSwitchContext+0x60>
	__asm volatile
 800b212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b216:	b672      	cpsid	i
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	b662      	cpsie	i
 800b226:	607b      	str	r3, [r7, #4]
}
 800b228:	bf00      	nop
 800b22a:	e7fe      	b.n	800b22a <vTaskSwitchContext+0x5e>
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	4613      	mov	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4a12      	ldr	r2, [pc, #72]	; (800b280 <vTaskSwitchContext+0xb4>)
 800b238:	4413      	add	r3, r2
 800b23a:	613b      	str	r3, [r7, #16]
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	605a      	str	r2, [r3, #4]
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	685a      	ldr	r2, [r3, #4]
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	3308      	adds	r3, #8
 800b24e:	429a      	cmp	r2, r3
 800b250:	d104      	bne.n	800b25c <vTaskSwitchContext+0x90>
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	605a      	str	r2, [r3, #4]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	4a08      	ldr	r2, [pc, #32]	; (800b284 <vTaskSwitchContext+0xb8>)
 800b264:	6013      	str	r3, [r2, #0]
}
 800b266:	bf00      	nop
 800b268:	371c      	adds	r7, #28
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	20000e40 	.word	0x20000e40
 800b278:	20000e2c 	.word	0x20000e2c
 800b27c:	20000e20 	.word	0x20000e20
 800b280:	20000d1c 	.word	0x20000d1c
 800b284:	20000d18 	.word	0x20000d18

0800b288 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10c      	bne.n	800b2b2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	b672      	cpsid	i
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	b662      	cpsie	i
 800b2ac:	60fb      	str	r3, [r7, #12]
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2b2:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <vTaskPlaceOnEventList+0x48>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3318      	adds	r3, #24
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7fe fb8c 	bl	80099d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	6838      	ldr	r0, [r7, #0]
 800b2c4:	f000 fba4 	bl	800ba10 <prvAddCurrentTaskToDelayedList>
}
 800b2c8:	bf00      	nop
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	20000d18 	.word	0x20000d18

0800b2d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10c      	bne.n	800b304 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ee:	b672      	cpsid	i
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	b662      	cpsie	i
 800b2fe:	60fb      	str	r3, [r7, #12]
}
 800b300:	bf00      	nop
 800b302:	e7fe      	b.n	800b302 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	3318      	adds	r3, #24
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fe fb9e 	bl	8009a4a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b30e:	4b1d      	ldr	r3, [pc, #116]	; (800b384 <xTaskRemoveFromEventList+0xb0>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d11c      	bne.n	800b350 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	3304      	adds	r3, #4
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe fb95 	bl	8009a4a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	2201      	movs	r2, #1
 800b326:	409a      	lsls	r2, r3
 800b328:	4b17      	ldr	r3, [pc, #92]	; (800b388 <xTaskRemoveFromEventList+0xb4>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	4a16      	ldr	r2, [pc, #88]	; (800b388 <xTaskRemoveFromEventList+0xb4>)
 800b330:	6013      	str	r3, [r2, #0]
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b336:	4613      	mov	r3, r2
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	4413      	add	r3, r2
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4a13      	ldr	r2, [pc, #76]	; (800b38c <xTaskRemoveFromEventList+0xb8>)
 800b340:	441a      	add	r2, r3
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	3304      	adds	r3, #4
 800b346:	4619      	mov	r1, r3
 800b348:	4610      	mov	r0, r2
 800b34a:	f7fe fb21 	bl	8009990 <vListInsertEnd>
 800b34e:	e005      	b.n	800b35c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	3318      	adds	r3, #24
 800b354:	4619      	mov	r1, r3
 800b356:	480e      	ldr	r0, [pc, #56]	; (800b390 <xTaskRemoveFromEventList+0xbc>)
 800b358:	f7fe fb1a 	bl	8009990 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b360:	4b0c      	ldr	r3, [pc, #48]	; (800b394 <xTaskRemoveFromEventList+0xc0>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b366:	429a      	cmp	r2, r3
 800b368:	d905      	bls.n	800b376 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b36a:	2301      	movs	r3, #1
 800b36c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b36e:	4b0a      	ldr	r3, [pc, #40]	; (800b398 <xTaskRemoveFromEventList+0xc4>)
 800b370:	2201      	movs	r2, #1
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	e001      	b.n	800b37a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b376:	2300      	movs	r3, #0
 800b378:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b37a:	697b      	ldr	r3, [r7, #20]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3718      	adds	r7, #24
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	20000e40 	.word	0x20000e40
 800b388:	20000e20 	.word	0x20000e20
 800b38c:	20000d1c 	.word	0x20000d1c
 800b390:	20000dd8 	.word	0x20000dd8
 800b394:	20000d18 	.word	0x20000d18
 800b398:	20000e2c 	.word	0x20000e2c

0800b39c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3a4:	4b06      	ldr	r3, [pc, #24]	; (800b3c0 <vTaskInternalSetTimeOutState+0x24>)
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3ac:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <vTaskInternalSetTimeOutState+0x28>)
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	605a      	str	r2, [r3, #4]
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	20000e30 	.word	0x20000e30
 800b3c4:	20000e1c 	.word	0x20000e1c

0800b3c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b088      	sub	sp, #32
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10c      	bne.n	800b3f2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3dc:	b672      	cpsid	i
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	b662      	cpsie	i
 800b3ec:	613b      	str	r3, [r7, #16]
}
 800b3ee:	bf00      	nop
 800b3f0:	e7fe      	b.n	800b3f0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10c      	bne.n	800b412 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fc:	b672      	cpsid	i
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	b662      	cpsie	i
 800b40c:	60fb      	str	r3, [r7, #12]
}
 800b40e:	bf00      	nop
 800b410:	e7fe      	b.n	800b410 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b412:	f000 fc73 	bl	800bcfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b416:	4b1d      	ldr	r3, [pc, #116]	; (800b48c <xTaskCheckForTimeOut+0xc4>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	69ba      	ldr	r2, [r7, #24]
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42e:	d102      	bne.n	800b436 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b430:	2300      	movs	r3, #0
 800b432:	61fb      	str	r3, [r7, #28]
 800b434:	e023      	b.n	800b47e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	4b15      	ldr	r3, [pc, #84]	; (800b490 <xTaskCheckForTimeOut+0xc8>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d007      	beq.n	800b452 <xTaskCheckForTimeOut+0x8a>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d302      	bcc.n	800b452 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b44c:	2301      	movs	r3, #1
 800b44e:	61fb      	str	r3, [r7, #28]
 800b450:	e015      	b.n	800b47e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d20b      	bcs.n	800b474 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	1ad2      	subs	r2, r2, r3
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff ff97 	bl	800b39c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b46e:	2300      	movs	r3, #0
 800b470:	61fb      	str	r3, [r7, #28]
 800b472:	e004      	b.n	800b47e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2200      	movs	r2, #0
 800b478:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b47a:	2301      	movs	r3, #1
 800b47c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b47e:	f000 fc71 	bl	800bd64 <vPortExitCritical>

	return xReturn;
 800b482:	69fb      	ldr	r3, [r7, #28]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3720      	adds	r7, #32
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	20000e1c 	.word	0x20000e1c
 800b490:	20000e30 	.word	0x20000e30

0800b494 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b494:	b480      	push	{r7}
 800b496:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b498:	4b03      	ldr	r3, [pc, #12]	; (800b4a8 <vTaskMissedYield+0x14>)
 800b49a:	2201      	movs	r2, #1
 800b49c:	601a      	str	r2, [r3, #0]
}
 800b49e:	bf00      	nop
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	20000e2c 	.word	0x20000e2c

0800b4ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4b4:	f000 f852 	bl	800b55c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4b8:	4b06      	ldr	r3, [pc, #24]	; (800b4d4 <prvIdleTask+0x28>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d9f9      	bls.n	800b4b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4c0:	4b05      	ldr	r3, [pc, #20]	; (800b4d8 <prvIdleTask+0x2c>)
 800b4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c6:	601a      	str	r2, [r3, #0]
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4d0:	e7f0      	b.n	800b4b4 <prvIdleTask+0x8>
 800b4d2:	bf00      	nop
 800b4d4:	20000d1c 	.word	0x20000d1c
 800b4d8:	e000ed04 	.word	0xe000ed04

0800b4dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	607b      	str	r3, [r7, #4]
 800b4e6:	e00c      	b.n	800b502 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4a12      	ldr	r2, [pc, #72]	; (800b53c <prvInitialiseTaskLists+0x60>)
 800b4f4:	4413      	add	r3, r2
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fe fa1d 	bl	8009936 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3301      	adds	r3, #1
 800b500:	607b      	str	r3, [r7, #4]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b06      	cmp	r3, #6
 800b506:	d9ef      	bls.n	800b4e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b508:	480d      	ldr	r0, [pc, #52]	; (800b540 <prvInitialiseTaskLists+0x64>)
 800b50a:	f7fe fa14 	bl	8009936 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b50e:	480d      	ldr	r0, [pc, #52]	; (800b544 <prvInitialiseTaskLists+0x68>)
 800b510:	f7fe fa11 	bl	8009936 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b514:	480c      	ldr	r0, [pc, #48]	; (800b548 <prvInitialiseTaskLists+0x6c>)
 800b516:	f7fe fa0e 	bl	8009936 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b51a:	480c      	ldr	r0, [pc, #48]	; (800b54c <prvInitialiseTaskLists+0x70>)
 800b51c:	f7fe fa0b 	bl	8009936 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b520:	480b      	ldr	r0, [pc, #44]	; (800b550 <prvInitialiseTaskLists+0x74>)
 800b522:	f7fe fa08 	bl	8009936 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b526:	4b0b      	ldr	r3, [pc, #44]	; (800b554 <prvInitialiseTaskLists+0x78>)
 800b528:	4a05      	ldr	r2, [pc, #20]	; (800b540 <prvInitialiseTaskLists+0x64>)
 800b52a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b52c:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <prvInitialiseTaskLists+0x7c>)
 800b52e:	4a05      	ldr	r2, [pc, #20]	; (800b544 <prvInitialiseTaskLists+0x68>)
 800b530:	601a      	str	r2, [r3, #0]
}
 800b532:	bf00      	nop
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	20000d1c 	.word	0x20000d1c
 800b540:	20000da8 	.word	0x20000da8
 800b544:	20000dbc 	.word	0x20000dbc
 800b548:	20000dd8 	.word	0x20000dd8
 800b54c:	20000dec 	.word	0x20000dec
 800b550:	20000e04 	.word	0x20000e04
 800b554:	20000dd0 	.word	0x20000dd0
 800b558:	20000dd4 	.word	0x20000dd4

0800b55c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b562:	e019      	b.n	800b598 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b564:	f000 fbca 	bl	800bcfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b568:	4b10      	ldr	r3, [pc, #64]	; (800b5ac <prvCheckTasksWaitingTermination+0x50>)
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3304      	adds	r3, #4
 800b574:	4618      	mov	r0, r3
 800b576:	f7fe fa68 	bl	8009a4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b57a:	4b0d      	ldr	r3, [pc, #52]	; (800b5b0 <prvCheckTasksWaitingTermination+0x54>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	3b01      	subs	r3, #1
 800b580:	4a0b      	ldr	r2, [pc, #44]	; (800b5b0 <prvCheckTasksWaitingTermination+0x54>)
 800b582:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b584:	4b0b      	ldr	r3, [pc, #44]	; (800b5b4 <prvCheckTasksWaitingTermination+0x58>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3b01      	subs	r3, #1
 800b58a:	4a0a      	ldr	r2, [pc, #40]	; (800b5b4 <prvCheckTasksWaitingTermination+0x58>)
 800b58c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b58e:	f000 fbe9 	bl	800bd64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 f810 	bl	800b5b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b598:	4b06      	ldr	r3, [pc, #24]	; (800b5b4 <prvCheckTasksWaitingTermination+0x58>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1e1      	bne.n	800b564 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	3708      	adds	r7, #8
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20000dec 	.word	0x20000dec
 800b5b0:	20000e18 	.word	0x20000e18
 800b5b4:	20000e00 	.word	0x20000e00

0800b5b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d108      	bne.n	800b5dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 fd8a 	bl	800c0e8 <vPortFree>
				vPortFree( pxTCB );
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 fd87 	bl	800c0e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5da:	e01a      	b.n	800b612 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d103      	bne.n	800b5ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fd7e 	bl	800c0e8 <vPortFree>
	}
 800b5ec:	e011      	b.n	800b612 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d00c      	beq.n	800b612 <prvDeleteTCB+0x5a>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	b672      	cpsid	i
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	b662      	cpsie	i
 800b60c:	60fb      	str	r3, [r7, #12]
}
 800b60e:	bf00      	nop
 800b610:	e7fe      	b.n	800b610 <prvDeleteTCB+0x58>
	}
 800b612:	bf00      	nop
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b622:	4b0c      	ldr	r3, [pc, #48]	; (800b654 <prvResetNextTaskUnblockTime+0x38>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d104      	bne.n	800b636 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <prvResetNextTaskUnblockTime+0x3c>)
 800b62e:	f04f 32ff 	mov.w	r2, #4294967295
 800b632:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b634:	e008      	b.n	800b648 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b636:	4b07      	ldr	r3, [pc, #28]	; (800b654 <prvResetNextTaskUnblockTime+0x38>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	4a04      	ldr	r2, [pc, #16]	; (800b658 <prvResetNextTaskUnblockTime+0x3c>)
 800b646:	6013      	str	r3, [r2, #0]
}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	20000dd0 	.word	0x20000dd0
 800b658:	20000e38 	.word	0x20000e38

0800b65c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b662:	4b0b      	ldr	r3, [pc, #44]	; (800b690 <xTaskGetSchedulerState+0x34>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d102      	bne.n	800b670 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b66a:	2301      	movs	r3, #1
 800b66c:	607b      	str	r3, [r7, #4]
 800b66e:	e008      	b.n	800b682 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b670:	4b08      	ldr	r3, [pc, #32]	; (800b694 <xTaskGetSchedulerState+0x38>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d102      	bne.n	800b67e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b678:	2302      	movs	r3, #2
 800b67a:	607b      	str	r3, [r7, #4]
 800b67c:	e001      	b.n	800b682 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b67e:	2300      	movs	r3, #0
 800b680:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b682:	687b      	ldr	r3, [r7, #4]
	}
 800b684:	4618      	mov	r0, r3
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr
 800b690:	20000e24 	.word	0x20000e24
 800b694:	20000e40 	.word	0x20000e40

0800b698 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d069      	beq.n	800b782 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b2:	4b36      	ldr	r3, [pc, #216]	; (800b78c <xTaskPriorityInherit+0xf4>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d259      	bcs.n	800b770 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	db06      	blt.n	800b6d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6c4:	4b31      	ldr	r3, [pc, #196]	; (800b78c <xTaskPriorityInherit+0xf4>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ca:	f1c3 0207 	rsb	r2, r3, #7
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	6959      	ldr	r1, [r3, #20]
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6da:	4613      	mov	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4a2b      	ldr	r2, [pc, #172]	; (800b790 <xTaskPriorityInherit+0xf8>)
 800b6e4:	4413      	add	r3, r2
 800b6e6:	4299      	cmp	r1, r3
 800b6e8:	d13a      	bne.n	800b760 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe f9ab 	bl	8009a4a <uxListRemove>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d115      	bne.n	800b726 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6fe:	4924      	ldr	r1, [pc, #144]	; (800b790 <xTaskPriorityInherit+0xf8>)
 800b700:	4613      	mov	r3, r2
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	4413      	add	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	440b      	add	r3, r1
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10a      	bne.n	800b726 <xTaskPriorityInherit+0x8e>
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b714:	2201      	movs	r2, #1
 800b716:	fa02 f303 	lsl.w	r3, r2, r3
 800b71a:	43da      	mvns	r2, r3
 800b71c:	4b1d      	ldr	r3, [pc, #116]	; (800b794 <xTaskPriorityInherit+0xfc>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4013      	ands	r3, r2
 800b722:	4a1c      	ldr	r2, [pc, #112]	; (800b794 <xTaskPriorityInherit+0xfc>)
 800b724:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b726:	4b19      	ldr	r3, [pc, #100]	; (800b78c <xTaskPriorityInherit+0xf4>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b734:	2201      	movs	r2, #1
 800b736:	409a      	lsls	r2, r3
 800b738:	4b16      	ldr	r3, [pc, #88]	; (800b794 <xTaskPriorityInherit+0xfc>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	4a15      	ldr	r2, [pc, #84]	; (800b794 <xTaskPriorityInherit+0xfc>)
 800b740:	6013      	str	r3, [r2, #0]
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b746:	4613      	mov	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4413      	add	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4a10      	ldr	r2, [pc, #64]	; (800b790 <xTaskPriorityInherit+0xf8>)
 800b750:	441a      	add	r2, r3
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	3304      	adds	r3, #4
 800b756:	4619      	mov	r1, r3
 800b758:	4610      	mov	r0, r2
 800b75a:	f7fe f919 	bl	8009990 <vListInsertEnd>
 800b75e:	e004      	b.n	800b76a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b760:	4b0a      	ldr	r3, [pc, #40]	; (800b78c <xTaskPriorityInherit+0xf4>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b76a:	2301      	movs	r3, #1
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	e008      	b.n	800b782 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b774:	4b05      	ldr	r3, [pc, #20]	; (800b78c <xTaskPriorityInherit+0xf4>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d201      	bcs.n	800b782 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b77e:	2301      	movs	r3, #1
 800b780:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b782:	68fb      	ldr	r3, [r7, #12]
	}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20000d18 	.word	0x20000d18
 800b790:	20000d1c 	.word	0x20000d1c
 800b794:	20000e20 	.word	0x20000e20

0800b798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d072      	beq.n	800b894 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7ae:	4b3c      	ldr	r3, [pc, #240]	; (800b8a0 <xTaskPriorityDisinherit+0x108>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d00c      	beq.n	800b7d2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	b672      	cpsid	i
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	b662      	cpsie	i
 800b7cc:	60fb      	str	r3, [r7, #12]
}
 800b7ce:	bf00      	nop
 800b7d0:	e7fe      	b.n	800b7d0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10c      	bne.n	800b7f4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7de:	b672      	cpsid	i
 800b7e0:	f383 8811 	msr	BASEPRI, r3
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	b662      	cpsie	i
 800b7ee:	60bb      	str	r3, [r7, #8]
}
 800b7f0:	bf00      	nop
 800b7f2:	e7fe      	b.n	800b7f2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7f8:	1e5a      	subs	r2, r3, #1
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b806:	429a      	cmp	r2, r3
 800b808:	d044      	beq.n	800b894 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d140      	bne.n	800b894 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	3304      	adds	r3, #4
 800b816:	4618      	mov	r0, r3
 800b818:	f7fe f917 	bl	8009a4a <uxListRemove>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d115      	bne.n	800b84e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b826:	491f      	ldr	r1, [pc, #124]	; (800b8a4 <xTaskPriorityDisinherit+0x10c>)
 800b828:	4613      	mov	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	440b      	add	r3, r1
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d10a      	bne.n	800b84e <xTaskPriorityDisinherit+0xb6>
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83c:	2201      	movs	r2, #1
 800b83e:	fa02 f303 	lsl.w	r3, r2, r3
 800b842:	43da      	mvns	r2, r3
 800b844:	4b18      	ldr	r3, [pc, #96]	; (800b8a8 <xTaskPriorityDisinherit+0x110>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4013      	ands	r3, r2
 800b84a:	4a17      	ldr	r2, [pc, #92]	; (800b8a8 <xTaskPriorityDisinherit+0x110>)
 800b84c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85a:	f1c3 0207 	rsb	r2, r3, #7
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b866:	2201      	movs	r2, #1
 800b868:	409a      	lsls	r2, r3
 800b86a:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <xTaskPriorityDisinherit+0x110>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4313      	orrs	r3, r2
 800b870:	4a0d      	ldr	r2, [pc, #52]	; (800b8a8 <xTaskPriorityDisinherit+0x110>)
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b878:	4613      	mov	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4413      	add	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4a08      	ldr	r2, [pc, #32]	; (800b8a4 <xTaskPriorityDisinherit+0x10c>)
 800b882:	441a      	add	r2, r3
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	3304      	adds	r3, #4
 800b888:	4619      	mov	r1, r3
 800b88a:	4610      	mov	r0, r2
 800b88c:	f7fe f880 	bl	8009990 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b890:	2301      	movs	r3, #1
 800b892:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b894:	697b      	ldr	r3, [r7, #20]
	}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	20000d18 	.word	0x20000d18
 800b8a4:	20000d1c 	.word	0x20000d1c
 800b8a8:	20000e20 	.word	0x20000e20

0800b8ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b088      	sub	sp, #32
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 8087 	beq.w	800b9d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10c      	bne.n	800b8e8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	b672      	cpsid	i
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	b662      	cpsie	i
 800b8e2:	60fb      	str	r3, [r7, #12]
}
 800b8e4:	bf00      	nop
 800b8e6:	e7fe      	b.n	800b8e6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d902      	bls.n	800b8f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	61fb      	str	r3, [r7, #28]
 800b8f6:	e002      	b.n	800b8fe <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b902:	69fa      	ldr	r2, [r7, #28]
 800b904:	429a      	cmp	r2, r3
 800b906:	d065      	beq.n	800b9d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d160      	bne.n	800b9d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b912:	4b32      	ldr	r3, [pc, #200]	; (800b9dc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d10c      	bne.n	800b936 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	b672      	cpsid	i
 800b922:	f383 8811 	msr	BASEPRI, r3
 800b926:	f3bf 8f6f 	isb	sy
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	b662      	cpsie	i
 800b930:	60bb      	str	r3, [r7, #8]
}
 800b932:	bf00      	nop
 800b934:	e7fe      	b.n	800b934 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	699b      	ldr	r3, [r3, #24]
 800b946:	2b00      	cmp	r3, #0
 800b948:	db04      	blt.n	800b954 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	f1c3 0207 	rsb	r2, r3, #7
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	6959      	ldr	r1, [r3, #20]
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	4613      	mov	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	4413      	add	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4a1f      	ldr	r2, [pc, #124]	; (800b9e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b964:	4413      	add	r3, r2
 800b966:	4299      	cmp	r1, r3
 800b968:	d134      	bne.n	800b9d4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	3304      	adds	r3, #4
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe f86b 	bl	8009a4a <uxListRemove>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d115      	bne.n	800b9a6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97e:	4918      	ldr	r1, [pc, #96]	; (800b9e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b980:	4613      	mov	r3, r2
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	4413      	add	r3, r2
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	440b      	add	r3, r1
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10a      	bne.n	800b9a6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b994:	2201      	movs	r2, #1
 800b996:	fa02 f303 	lsl.w	r3, r2, r3
 800b99a:	43da      	mvns	r2, r3
 800b99c:	4b11      	ldr	r3, [pc, #68]	; (800b9e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	4a10      	ldr	r2, [pc, #64]	; (800b9e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b9a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	409a      	lsls	r2, r3
 800b9ae:	4b0d      	ldr	r3, [pc, #52]	; (800b9e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	4a0b      	ldr	r2, [pc, #44]	; (800b9e4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9bc:	4613      	mov	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4a06      	ldr	r2, [pc, #24]	; (800b9e0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b9c6:	441a      	add	r2, r3
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	f7fd ffde 	bl	8009990 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9d4:	bf00      	nop
 800b9d6:	3720      	adds	r7, #32
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	20000d18 	.word	0x20000d18
 800b9e0:	20000d1c 	.word	0x20000d1c
 800b9e4:	20000e20 	.word	0x20000e20

0800b9e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b9e8:	b480      	push	{r7}
 800b9ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b9ec:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <pvTaskIncrementMutexHeldCount+0x24>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d004      	beq.n	800b9fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b9f4:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <pvTaskIncrementMutexHeldCount+0x24>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9fa:	3201      	adds	r2, #1
 800b9fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b9fe:	4b03      	ldr	r3, [pc, #12]	; (800ba0c <pvTaskIncrementMutexHeldCount+0x24>)
 800ba00:	681b      	ldr	r3, [r3, #0]
	}
 800ba02:	4618      	mov	r0, r3
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr
 800ba0c:	20000d18 	.word	0x20000d18

0800ba10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba1a:	4b29      	ldr	r3, [pc, #164]	; (800bac0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba20:	4b28      	ldr	r3, [pc, #160]	; (800bac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3304      	adds	r3, #4
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fe f80f 	bl	8009a4a <uxListRemove>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d10b      	bne.n	800ba4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ba32:	4b24      	ldr	r3, [pc, #144]	; (800bac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba38:	2201      	movs	r2, #1
 800ba3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba3e:	43da      	mvns	r2, r3
 800ba40:	4b21      	ldr	r3, [pc, #132]	; (800bac8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4013      	ands	r3, r2
 800ba46:	4a20      	ldr	r2, [pc, #128]	; (800bac8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba50:	d10a      	bne.n	800ba68 <prvAddCurrentTaskToDelayedList+0x58>
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d007      	beq.n	800ba68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba58:	4b1a      	ldr	r3, [pc, #104]	; (800bac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	4619      	mov	r1, r3
 800ba60:	481a      	ldr	r0, [pc, #104]	; (800bacc <prvAddCurrentTaskToDelayedList+0xbc>)
 800ba62:	f7fd ff95 	bl	8009990 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba66:	e026      	b.n	800bab6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba70:	4b14      	ldr	r3, [pc, #80]	; (800bac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d209      	bcs.n	800ba94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba80:	4b13      	ldr	r3, [pc, #76]	; (800bad0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	4b0f      	ldr	r3, [pc, #60]	; (800bac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3304      	adds	r3, #4
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	f7fd ffa3 	bl	80099d8 <vListInsert>
}
 800ba92:	e010      	b.n	800bab6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba94:	4b0f      	ldr	r3, [pc, #60]	; (800bad4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	4b0a      	ldr	r3, [pc, #40]	; (800bac4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4610      	mov	r0, r2
 800baa2:	f7fd ff99 	bl	80099d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800baa6:	4b0c      	ldr	r3, [pc, #48]	; (800bad8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	429a      	cmp	r2, r3
 800baae:	d202      	bcs.n	800bab6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bab0:	4a09      	ldr	r2, [pc, #36]	; (800bad8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	6013      	str	r3, [r2, #0]
}
 800bab6:	bf00      	nop
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	20000e1c 	.word	0x20000e1c
 800bac4:	20000d18 	.word	0x20000d18
 800bac8:	20000e20 	.word	0x20000e20
 800bacc:	20000e04 	.word	0x20000e04
 800bad0:	20000dd4 	.word	0x20000dd4
 800bad4:	20000dd0 	.word	0x20000dd0
 800bad8:	20000e38 	.word	0x20000e38

0800badc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	3b04      	subs	r3, #4
 800baec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800baf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3b04      	subs	r3, #4
 800bafa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	f023 0201 	bic.w	r2, r3, #1
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3b04      	subs	r3, #4
 800bb0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb0c:	4a0c      	ldr	r2, [pc, #48]	; (800bb40 <pxPortInitialiseStack+0x64>)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	3b14      	subs	r3, #20
 800bb16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3b04      	subs	r3, #4
 800bb22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f06f 0202 	mvn.w	r2, #2
 800bb2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	3b20      	subs	r3, #32
 800bb30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb32:	68fb      	ldr	r3, [r7, #12]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	0800bb45 	.word	0x0800bb45

0800bb44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb4e:	4b14      	ldr	r3, [pc, #80]	; (800bba0 <prvTaskExitError+0x5c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb56:	d00c      	beq.n	800bb72 <prvTaskExitError+0x2e>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	b672      	cpsid	i
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	b662      	cpsie	i
 800bb6c:	60fb      	str	r3, [r7, #12]
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <prvTaskExitError+0x2c>
	__asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb76:	b672      	cpsid	i
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	b662      	cpsie	i
 800bb86:	60bb      	str	r3, [r7, #8]
}
 800bb88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb8a:	bf00      	nop
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d0fc      	beq.n	800bb8c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb92:	bf00      	nop
 800bb94:	bf00      	nop
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	20000028 	.word	0x20000028
	...

0800bbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbb0:	4b07      	ldr	r3, [pc, #28]	; (800bbd0 <pxCurrentTCBConst2>)
 800bbb2:	6819      	ldr	r1, [r3, #0]
 800bbb4:	6808      	ldr	r0, [r1, #0]
 800bbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbba:	f380 8809 	msr	PSP, r0
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f04f 0000 	mov.w	r0, #0
 800bbc6:	f380 8811 	msr	BASEPRI, r0
 800bbca:	4770      	bx	lr
 800bbcc:	f3af 8000 	nop.w

0800bbd0 <pxCurrentTCBConst2>:
 800bbd0:	20000d18 	.word	0x20000d18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bbd4:	bf00      	nop
 800bbd6:	bf00      	nop

0800bbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bbd8:	4808      	ldr	r0, [pc, #32]	; (800bbfc <prvPortStartFirstTask+0x24>)
 800bbda:	6800      	ldr	r0, [r0, #0]
 800bbdc:	6800      	ldr	r0, [r0, #0]
 800bbde:	f380 8808 	msr	MSP, r0
 800bbe2:	f04f 0000 	mov.w	r0, #0
 800bbe6:	f380 8814 	msr	CONTROL, r0
 800bbea:	b662      	cpsie	i
 800bbec:	b661      	cpsie	f
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	df00      	svc	0
 800bbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbfa:	bf00      	nop
 800bbfc:	e000ed08 	.word	0xe000ed08

0800bc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc06:	4b37      	ldr	r3, [pc, #220]	; (800bce4 <xPortStartScheduler+0xe4>)
 800bc08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	22ff      	movs	r2, #255	; 0xff
 800bc16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc20:	78fb      	ldrb	r3, [r7, #3]
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	4b2f      	ldr	r3, [pc, #188]	; (800bce8 <xPortStartScheduler+0xe8>)
 800bc2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc2e:	4b2f      	ldr	r3, [pc, #188]	; (800bcec <xPortStartScheduler+0xec>)
 800bc30:	2207      	movs	r2, #7
 800bc32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc34:	e009      	b.n	800bc4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bc36:	4b2d      	ldr	r3, [pc, #180]	; (800bcec <xPortStartScheduler+0xec>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	4a2b      	ldr	r2, [pc, #172]	; (800bcec <xPortStartScheduler+0xec>)
 800bc3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc40:	78fb      	ldrb	r3, [r7, #3]
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc4a:	78fb      	ldrb	r3, [r7, #3]
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc52:	2b80      	cmp	r3, #128	; 0x80
 800bc54:	d0ef      	beq.n	800bc36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc56:	4b25      	ldr	r3, [pc, #148]	; (800bcec <xPortStartScheduler+0xec>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f1c3 0307 	rsb	r3, r3, #7
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	d00c      	beq.n	800bc7c <xPortStartScheduler+0x7c>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	b672      	cpsid	i
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	b662      	cpsie	i
 800bc76:	60bb      	str	r3, [r7, #8]
}
 800bc78:	bf00      	nop
 800bc7a:	e7fe      	b.n	800bc7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc7c:	4b1b      	ldr	r3, [pc, #108]	; (800bcec <xPortStartScheduler+0xec>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	021b      	lsls	r3, r3, #8
 800bc82:	4a1a      	ldr	r2, [pc, #104]	; (800bcec <xPortStartScheduler+0xec>)
 800bc84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc86:	4b19      	ldr	r3, [pc, #100]	; (800bcec <xPortStartScheduler+0xec>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc8e:	4a17      	ldr	r2, [pc, #92]	; (800bcec <xPortStartScheduler+0xec>)
 800bc90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc9a:	4b15      	ldr	r3, [pc, #84]	; (800bcf0 <xPortStartScheduler+0xf0>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a14      	ldr	r2, [pc, #80]	; (800bcf0 <xPortStartScheduler+0xf0>)
 800bca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bca4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bca6:	4b12      	ldr	r3, [pc, #72]	; (800bcf0 <xPortStartScheduler+0xf0>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a11      	ldr	r2, [pc, #68]	; (800bcf0 <xPortStartScheduler+0xf0>)
 800bcac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bcb0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcb2:	f000 f8dd 	bl	800be70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bcb6:	4b0f      	ldr	r3, [pc, #60]	; (800bcf4 <xPortStartScheduler+0xf4>)
 800bcb8:	2200      	movs	r2, #0
 800bcba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bcbc:	f000 f8fc 	bl	800beb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bcc0:	4b0d      	ldr	r3, [pc, #52]	; (800bcf8 <xPortStartScheduler+0xf8>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a0c      	ldr	r2, [pc, #48]	; (800bcf8 <xPortStartScheduler+0xf8>)
 800bcc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bcca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bccc:	f7ff ff84 	bl	800bbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bcd0:	f7ff fa7c 	bl	800b1cc <vTaskSwitchContext>
	prvTaskExitError();
 800bcd4:	f7ff ff36 	bl	800bb44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	e000e400 	.word	0xe000e400
 800bce8:	20000e44 	.word	0x20000e44
 800bcec:	20000e48 	.word	0x20000e48
 800bcf0:	e000ed20 	.word	0xe000ed20
 800bcf4:	20000028 	.word	0x20000028
 800bcf8:	e000ef34 	.word	0xe000ef34

0800bcfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	b672      	cpsid	i
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	b662      	cpsie	i
 800bd16:	607b      	str	r3, [r7, #4]
}
 800bd18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd1a:	4b10      	ldr	r3, [pc, #64]	; (800bd5c <vPortEnterCritical+0x60>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	4a0e      	ldr	r2, [pc, #56]	; (800bd5c <vPortEnterCritical+0x60>)
 800bd22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd24:	4b0d      	ldr	r3, [pc, #52]	; (800bd5c <vPortEnterCritical+0x60>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d111      	bne.n	800bd50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd2c:	4b0c      	ldr	r3, [pc, #48]	; (800bd60 <vPortEnterCritical+0x64>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00c      	beq.n	800bd50 <vPortEnterCritical+0x54>
	__asm volatile
 800bd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3a:	b672      	cpsid	i
 800bd3c:	f383 8811 	msr	BASEPRI, r3
 800bd40:	f3bf 8f6f 	isb	sy
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	b662      	cpsie	i
 800bd4a:	603b      	str	r3, [r7, #0]
}
 800bd4c:	bf00      	nop
 800bd4e:	e7fe      	b.n	800bd4e <vPortEnterCritical+0x52>
	}
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	20000028 	.word	0x20000028
 800bd60:	e000ed04 	.word	0xe000ed04

0800bd64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd6a:	4b13      	ldr	r3, [pc, #76]	; (800bdb8 <vPortExitCritical+0x54>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10c      	bne.n	800bd8c <vPortExitCritical+0x28>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	b672      	cpsid	i
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	b662      	cpsie	i
 800bd86:	607b      	str	r3, [r7, #4]
}
 800bd88:	bf00      	nop
 800bd8a:	e7fe      	b.n	800bd8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800bd8c:	4b0a      	ldr	r3, [pc, #40]	; (800bdb8 <vPortExitCritical+0x54>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	4a09      	ldr	r2, [pc, #36]	; (800bdb8 <vPortExitCritical+0x54>)
 800bd94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd96:	4b08      	ldr	r3, [pc, #32]	; (800bdb8 <vPortExitCritical+0x54>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d105      	bne.n	800bdaa <vPortExitCritical+0x46>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	f383 8811 	msr	BASEPRI, r3
}
 800bda8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdaa:	bf00      	nop
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	20000028 	.word	0x20000028
 800bdbc:	00000000 	.word	0x00000000

0800bdc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bdc0:	f3ef 8009 	mrs	r0, PSP
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	4b15      	ldr	r3, [pc, #84]	; (800be20 <pxCurrentTCBConst>)
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	f01e 0f10 	tst.w	lr, #16
 800bdd0:	bf08      	it	eq
 800bdd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bdd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdda:	6010      	str	r0, [r2, #0]
 800bddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bde0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bde4:	b672      	cpsid	i
 800bde6:	f380 8811 	msr	BASEPRI, r0
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	b662      	cpsie	i
 800bdf4:	f7ff f9ea 	bl	800b1cc <vTaskSwitchContext>
 800bdf8:	f04f 0000 	mov.w	r0, #0
 800bdfc:	f380 8811 	msr	BASEPRI, r0
 800be00:	bc09      	pop	{r0, r3}
 800be02:	6819      	ldr	r1, [r3, #0]
 800be04:	6808      	ldr	r0, [r1, #0]
 800be06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0a:	f01e 0f10 	tst.w	lr, #16
 800be0e:	bf08      	it	eq
 800be10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be14:	f380 8809 	msr	PSP, r0
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop

0800be20 <pxCurrentTCBConst>:
 800be20:	20000d18 	.word	0x20000d18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be24:	bf00      	nop
 800be26:	bf00      	nop

0800be28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	b672      	cpsid	i
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	b662      	cpsie	i
 800be42:	607b      	str	r3, [r7, #4]
}
 800be44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be46:	f7ff f907 	bl	800b058 <xTaskIncrementTick>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be50:	4b06      	ldr	r3, [pc, #24]	; (800be6c <SysTick_Handler+0x44>)
 800be52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be56:	601a      	str	r2, [r3, #0]
 800be58:	2300      	movs	r3, #0
 800be5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	f383 8811 	msr	BASEPRI, r3
}
 800be62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be64:	bf00      	nop
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	e000ed04 	.word	0xe000ed04

0800be70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be70:	b480      	push	{r7}
 800be72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be74:	4b0b      	ldr	r3, [pc, #44]	; (800bea4 <vPortSetupTimerInterrupt+0x34>)
 800be76:	2200      	movs	r2, #0
 800be78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be7a:	4b0b      	ldr	r3, [pc, #44]	; (800bea8 <vPortSetupTimerInterrupt+0x38>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be80:	4b0a      	ldr	r3, [pc, #40]	; (800beac <vPortSetupTimerInterrupt+0x3c>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a0a      	ldr	r2, [pc, #40]	; (800beb0 <vPortSetupTimerInterrupt+0x40>)
 800be86:	fba2 2303 	umull	r2, r3, r2, r3
 800be8a:	099b      	lsrs	r3, r3, #6
 800be8c:	4a09      	ldr	r2, [pc, #36]	; (800beb4 <vPortSetupTimerInterrupt+0x44>)
 800be8e:	3b01      	subs	r3, #1
 800be90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be92:	4b04      	ldr	r3, [pc, #16]	; (800bea4 <vPortSetupTimerInterrupt+0x34>)
 800be94:	2207      	movs	r2, #7
 800be96:	601a      	str	r2, [r3, #0]
}
 800be98:	bf00      	nop
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	e000e010 	.word	0xe000e010
 800bea8:	e000e018 	.word	0xe000e018
 800beac:	2000001c 	.word	0x2000001c
 800beb0:	10624dd3 	.word	0x10624dd3
 800beb4:	e000e014 	.word	0xe000e014

0800beb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800beb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bec8 <vPortEnableVFP+0x10>
 800bebc:	6801      	ldr	r1, [r0, #0]
 800bebe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bec2:	6001      	str	r1, [r0, #0]
 800bec4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bec6:	bf00      	nop
 800bec8:	e000ed88 	.word	0xe000ed88

0800becc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bed2:	f3ef 8305 	mrs	r3, IPSR
 800bed6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2b0f      	cmp	r3, #15
 800bedc:	d916      	bls.n	800bf0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bede:	4a19      	ldr	r2, [pc, #100]	; (800bf44 <vPortValidateInterruptPriority+0x78>)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	4413      	add	r3, r2
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bee8:	4b17      	ldr	r3, [pc, #92]	; (800bf48 <vPortValidateInterruptPriority+0x7c>)
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	7afa      	ldrb	r2, [r7, #11]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d20c      	bcs.n	800bf0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	b672      	cpsid	i
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	b662      	cpsie	i
 800bf06:	607b      	str	r3, [r7, #4]
}
 800bf08:	bf00      	nop
 800bf0a:	e7fe      	b.n	800bf0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf0c:	4b0f      	ldr	r3, [pc, #60]	; (800bf4c <vPortValidateInterruptPriority+0x80>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf14:	4b0e      	ldr	r3, [pc, #56]	; (800bf50 <vPortValidateInterruptPriority+0x84>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d90c      	bls.n	800bf36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800bf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf20:	b672      	cpsid	i
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	b662      	cpsie	i
 800bf30:	603b      	str	r3, [r7, #0]
}
 800bf32:	bf00      	nop
 800bf34:	e7fe      	b.n	800bf34 <vPortValidateInterruptPriority+0x68>
	}
 800bf36:	bf00      	nop
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	e000e3f0 	.word	0xe000e3f0
 800bf48:	20000e44 	.word	0x20000e44
 800bf4c:	e000ed0c 	.word	0xe000ed0c
 800bf50:	20000e48 	.word	0x20000e48

0800bf54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b08a      	sub	sp, #40	; 0x28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf60:	f7fe ffac 	bl	800aebc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf64:	4b5b      	ldr	r3, [pc, #364]	; (800c0d4 <pvPortMalloc+0x180>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d101      	bne.n	800bf70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf6c:	f000 f91a 	bl	800c1a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf70:	4b59      	ldr	r3, [pc, #356]	; (800c0d8 <pvPortMalloc+0x184>)
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4013      	ands	r3, r2
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f040 8092 	bne.w	800c0a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d01f      	beq.n	800bfc4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800bf84:	2208      	movs	r2, #8
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4413      	add	r3, r2
 800bf8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f003 0307 	and.w	r3, r3, #7
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d016      	beq.n	800bfc4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f023 0307 	bic.w	r3, r3, #7
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f003 0307 	and.w	r3, r3, #7
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00c      	beq.n	800bfc4 <pvPortMalloc+0x70>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	b672      	cpsid	i
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	b662      	cpsie	i
 800bfbe:	617b      	str	r3, [r7, #20]
}
 800bfc0:	bf00      	nop
 800bfc2:	e7fe      	b.n	800bfc2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d06b      	beq.n	800c0a2 <pvPortMalloc+0x14e>
 800bfca:	4b44      	ldr	r3, [pc, #272]	; (800c0dc <pvPortMalloc+0x188>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d866      	bhi.n	800c0a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfd4:	4b42      	ldr	r3, [pc, #264]	; (800c0e0 <pvPortMalloc+0x18c>)
 800bfd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfd8:	4b41      	ldr	r3, [pc, #260]	; (800c0e0 <pvPortMalloc+0x18c>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfde:	e004      	b.n	800bfea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d903      	bls.n	800bffc <pvPortMalloc+0xa8>
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1f1      	bne.n	800bfe0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bffc:	4b35      	ldr	r3, [pc, #212]	; (800c0d4 <pvPortMalloc+0x180>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c002:	429a      	cmp	r2, r3
 800c004:	d04d      	beq.n	800c0a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c006:	6a3b      	ldr	r3, [r7, #32]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2208      	movs	r2, #8
 800c00c:	4413      	add	r3, r2
 800c00e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	685a      	ldr	r2, [r3, #4]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	1ad2      	subs	r2, r2, r3
 800c020:	2308      	movs	r3, #8
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	429a      	cmp	r2, r3
 800c026:	d921      	bls.n	800c06c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4413      	add	r3, r2
 800c02e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	f003 0307 	and.w	r3, r3, #7
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00c      	beq.n	800c054 <pvPortMalloc+0x100>
	__asm volatile
 800c03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03e:	b672      	cpsid	i
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	b662      	cpsie	i
 800c04e:	613b      	str	r3, [r7, #16]
}
 800c050:	bf00      	nop
 800c052:	e7fe      	b.n	800c052 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c056:	685a      	ldr	r2, [r3, #4]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	1ad2      	subs	r2, r2, r3
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c066:	69b8      	ldr	r0, [r7, #24]
 800c068:	f000 f8fe 	bl	800c268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c06c:	4b1b      	ldr	r3, [pc, #108]	; (800c0dc <pvPortMalloc+0x188>)
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	1ad3      	subs	r3, r2, r3
 800c076:	4a19      	ldr	r2, [pc, #100]	; (800c0dc <pvPortMalloc+0x188>)
 800c078:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c07a:	4b18      	ldr	r3, [pc, #96]	; (800c0dc <pvPortMalloc+0x188>)
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	4b19      	ldr	r3, [pc, #100]	; (800c0e4 <pvPortMalloc+0x190>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	429a      	cmp	r2, r3
 800c084:	d203      	bcs.n	800c08e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c086:	4b15      	ldr	r3, [pc, #84]	; (800c0dc <pvPortMalloc+0x188>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a16      	ldr	r2, [pc, #88]	; (800c0e4 <pvPortMalloc+0x190>)
 800c08c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c090:	685a      	ldr	r2, [r3, #4]
 800c092:	4b11      	ldr	r3, [pc, #68]	; (800c0d8 <pvPortMalloc+0x184>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	431a      	orrs	r2, r3
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	2200      	movs	r2, #0
 800c0a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0a2:	f7fe ff19 	bl	800aed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	f003 0307 	and.w	r3, r3, #7
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00c      	beq.n	800c0ca <pvPortMalloc+0x176>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b4:	b672      	cpsid	i
 800c0b6:	f383 8811 	msr	BASEPRI, r3
 800c0ba:	f3bf 8f6f 	isb	sy
 800c0be:	f3bf 8f4f 	dsb	sy
 800c0c2:	b662      	cpsie	i
 800c0c4:	60fb      	str	r3, [r7, #12]
}
 800c0c6:	bf00      	nop
 800c0c8:	e7fe      	b.n	800c0c8 <pvPortMalloc+0x174>
	return pvReturn;
 800c0ca:	69fb      	ldr	r3, [r7, #28]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3728      	adds	r7, #40	; 0x28
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	20004a54 	.word	0x20004a54
 800c0d8:	20004a60 	.word	0x20004a60
 800c0dc:	20004a58 	.word	0x20004a58
 800c0e0:	20004a4c 	.word	0x20004a4c
 800c0e4:	20004a5c 	.word	0x20004a5c

0800c0e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b086      	sub	sp, #24
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d04c      	beq.n	800c194 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0fa:	2308      	movs	r3, #8
 800c0fc:	425b      	negs	r3, r3
 800c0fe:	697a      	ldr	r2, [r7, #20]
 800c100:	4413      	add	r3, r2
 800c102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	685a      	ldr	r2, [r3, #4]
 800c10c:	4b23      	ldr	r3, [pc, #140]	; (800c19c <vPortFree+0xb4>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4013      	ands	r3, r2
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10c      	bne.n	800c130 <vPortFree+0x48>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11a:	b672      	cpsid	i
 800c11c:	f383 8811 	msr	BASEPRI, r3
 800c120:	f3bf 8f6f 	isb	sy
 800c124:	f3bf 8f4f 	dsb	sy
 800c128:	b662      	cpsie	i
 800c12a:	60fb      	str	r3, [r7, #12]
}
 800c12c:	bf00      	nop
 800c12e:	e7fe      	b.n	800c12e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00c      	beq.n	800c152 <vPortFree+0x6a>
	__asm volatile
 800c138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13c:	b672      	cpsid	i
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	b662      	cpsie	i
 800c14c:	60bb      	str	r3, [r7, #8]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	685a      	ldr	r2, [r3, #4]
 800c156:	4b11      	ldr	r3, [pc, #68]	; (800c19c <vPortFree+0xb4>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4013      	ands	r3, r2
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d019      	beq.n	800c194 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d115      	bne.n	800c194 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	4b0b      	ldr	r3, [pc, #44]	; (800c19c <vPortFree+0xb4>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	43db      	mvns	r3, r3
 800c172:	401a      	ands	r2, r3
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c178:	f7fe fea0 	bl	800aebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <vPortFree+0xb8>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4413      	add	r3, r2
 800c186:	4a06      	ldr	r2, [pc, #24]	; (800c1a0 <vPortFree+0xb8>)
 800c188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c18a:	6938      	ldr	r0, [r7, #16]
 800c18c:	f000 f86c 	bl	800c268 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c190:	f7fe fea2 	bl	800aed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c194:	bf00      	nop
 800c196:	3718      	adds	r7, #24
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	20004a60 	.word	0x20004a60
 800c1a0:	20004a58 	.word	0x20004a58

0800c1a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c1ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1b0:	4b27      	ldr	r3, [pc, #156]	; (800c250 <prvHeapInit+0xac>)
 800c1b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f003 0307 	and.w	r3, r3, #7
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00c      	beq.n	800c1d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3307      	adds	r3, #7
 800c1c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f023 0307 	bic.w	r3, r3, #7
 800c1ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	4a1f      	ldr	r2, [pc, #124]	; (800c250 <prvHeapInit+0xac>)
 800c1d4:	4413      	add	r3, r2
 800c1d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1dc:	4a1d      	ldr	r2, [pc, #116]	; (800c254 <prvHeapInit+0xb0>)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1e2:	4b1c      	ldr	r3, [pc, #112]	; (800c254 <prvHeapInit+0xb0>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	1a9b      	subs	r3, r3, r2
 800c1f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f023 0307 	bic.w	r3, r3, #7
 800c1fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4a15      	ldr	r2, [pc, #84]	; (800c258 <prvHeapInit+0xb4>)
 800c204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c206:	4b14      	ldr	r3, [pc, #80]	; (800c258 <prvHeapInit+0xb4>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2200      	movs	r2, #0
 800c20c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c20e:	4b12      	ldr	r3, [pc, #72]	; (800c258 <prvHeapInit+0xb4>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2200      	movs	r2, #0
 800c214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	1ad2      	subs	r2, r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c224:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <prvHeapInit+0xb4>)
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	4a0a      	ldr	r2, [pc, #40]	; (800c25c <prvHeapInit+0xb8>)
 800c232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	4a09      	ldr	r2, [pc, #36]	; (800c260 <prvHeapInit+0xbc>)
 800c23a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c23c:	4b09      	ldr	r3, [pc, #36]	; (800c264 <prvHeapInit+0xc0>)
 800c23e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c242:	601a      	str	r2, [r3, #0]
}
 800c244:	bf00      	nop
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	20000e4c 	.word	0x20000e4c
 800c254:	20004a4c 	.word	0x20004a4c
 800c258:	20004a54 	.word	0x20004a54
 800c25c:	20004a5c 	.word	0x20004a5c
 800c260:	20004a58 	.word	0x20004a58
 800c264:	20004a60 	.word	0x20004a60

0800c268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c270:	4b28      	ldr	r3, [pc, #160]	; (800c314 <prvInsertBlockIntoFreeList+0xac>)
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	e002      	b.n	800c27c <prvInsertBlockIntoFreeList+0x14>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	429a      	cmp	r2, r3
 800c284:	d8f7      	bhi.n	800c276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	4413      	add	r3, r2
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	429a      	cmp	r2, r3
 800c296:	d108      	bne.n	800c2aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	441a      	add	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	441a      	add	r2, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d118      	bne.n	800c2f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	4b15      	ldr	r3, [pc, #84]	; (800c318 <prvInsertBlockIntoFreeList+0xb0>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d00d      	beq.n	800c2e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	441a      	add	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	601a      	str	r2, [r3, #0]
 800c2e4:	e008      	b.n	800c2f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	; (800c318 <prvInsertBlockIntoFreeList+0xb0>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	e003      	b.n	800c2f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d002      	beq.n	800c306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c306:	bf00      	nop
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	20004a4c 	.word	0x20004a4c
 800c318:	20004a54 	.word	0x20004a54

0800c31c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	330c      	adds	r3, #12
 800c32c:	461a      	mov	r2, r3
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 ffa3 	bl	800e27c <tcpip_send_msg_wait_sem>
 800c336:	4603      	mov	r3, r0
 800c338:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d103      	bne.n	800c34a <netconn_apimsg+0x2e>
    return apimsg->err;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c348:	e001      	b.n	800c34e <netconn_apimsg+0x32>
  }
  return err;
 800c34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
	...

0800c358 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b08c      	sub	sp, #48	; 0x30
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	4603      	mov	r3, r0
 800c360:	603a      	str	r2, [r7, #0]
 800c362:	71fb      	strb	r3, [r7, #7]
 800c364:	460b      	mov	r3, r1
 800c366:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c368:	79fb      	ldrb	r3, [r7, #7]
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f000 feff 	bl	800d170 <netconn_alloc>
 800c372:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c376:	2b00      	cmp	r3, #0
 800c378:	d054      	beq.n	800c424 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c37a:	79bb      	ldrb	r3, [r7, #6]
 800c37c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800c37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c380:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c382:	f107 0308 	add.w	r3, r7, #8
 800c386:	4619      	mov	r1, r3
 800c388:	4829      	ldr	r0, [pc, #164]	; (800c430 <netconn_new_with_proto_and_callback+0xd8>)
 800c38a:	f7ff ffc7 	bl	800c31c <netconn_apimsg>
 800c38e:	4603      	mov	r3, r0
 800c390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800c394:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d043      	beq.n	800c424 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d005      	beq.n	800c3b0 <netconn_new_with_proto_and_callback+0x58>
 800c3a4:	4b23      	ldr	r3, [pc, #140]	; (800c434 <netconn_new_with_proto_and_callback+0xdc>)
 800c3a6:	22a3      	movs	r2, #163	; 0xa3
 800c3a8:	4923      	ldr	r1, [pc, #140]	; (800c438 <netconn_new_with_proto_and_callback+0xe0>)
 800c3aa:	4824      	ldr	r0, [pc, #144]	; (800c43c <netconn_new_with_proto_and_callback+0xe4>)
 800c3ac:	f00e fd4a 	bl	801ae44 <printf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b2:	3310      	adds	r3, #16
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f00e f832 	bl	801a41e <sys_mbox_valid>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d105      	bne.n	800c3cc <netconn_new_with_proto_and_callback+0x74>
 800c3c0:	4b1c      	ldr	r3, [pc, #112]	; (800c434 <netconn_new_with_proto_and_callback+0xdc>)
 800c3c2:	22a4      	movs	r2, #164	; 0xa4
 800c3c4:	491e      	ldr	r1, [pc, #120]	; (800c440 <netconn_new_with_proto_and_callback+0xe8>)
 800c3c6:	481d      	ldr	r0, [pc, #116]	; (800c43c <netconn_new_with_proto_and_callback+0xe4>)
 800c3c8:	f00e fd3c 	bl	801ae44 <printf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ce:	3314      	adds	r3, #20
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f00e f824 	bl	801a41e <sys_mbox_valid>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d005      	beq.n	800c3e8 <netconn_new_with_proto_and_callback+0x90>
 800c3dc:	4b15      	ldr	r3, [pc, #84]	; (800c434 <netconn_new_with_proto_and_callback+0xdc>)
 800c3de:	22a6      	movs	r2, #166	; 0xa6
 800c3e0:	4918      	ldr	r1, [pc, #96]	; (800c444 <netconn_new_with_proto_and_callback+0xec>)
 800c3e2:	4816      	ldr	r0, [pc, #88]	; (800c43c <netconn_new_with_proto_and_callback+0xe4>)
 800c3e4:	f00e fd2e 	bl	801ae44 <printf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ea:	330c      	adds	r3, #12
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f00e f8a7 	bl	801a540 <sys_sem_valid>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d105      	bne.n	800c404 <netconn_new_with_proto_and_callback+0xac>
 800c3f8:	4b0e      	ldr	r3, [pc, #56]	; (800c434 <netconn_new_with_proto_and_callback+0xdc>)
 800c3fa:	22a9      	movs	r2, #169	; 0xa9
 800c3fc:	4912      	ldr	r1, [pc, #72]	; (800c448 <netconn_new_with_proto_and_callback+0xf0>)
 800c3fe:	480f      	ldr	r0, [pc, #60]	; (800c43c <netconn_new_with_proto_and_callback+0xe4>)
 800c400:	f00e fd20 	bl	801ae44 <printf>
      sys_sem_free(&conn->op_completed);
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	330c      	adds	r3, #12
 800c408:	4618      	mov	r0, r3
 800c40a:	f00e f88c 	bl	801a526 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	3310      	adds	r3, #16
 800c412:	4618      	mov	r0, r3
 800c414:	f00d ff7c 	bl	801a310 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c41a:	2007      	movs	r0, #7
 800c41c:	f003 fcaa 	bl	800fd74 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c420:	2300      	movs	r3, #0
 800c422:	e000      	b.n	800c426 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c426:	4618      	mov	r0, r3
 800c428:	3730      	adds	r7, #48	; 0x30
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	0800d145 	.word	0x0800d145
 800c434:	08023de0 	.word	0x08023de0
 800c438:	08023e14 	.word	0x08023e14
 800c43c:	08023e38 	.word	0x08023e38
 800c440:	08023e60 	.word	0x08023e60
 800c444:	08023e78 	.word	0x08023e78
 800c448:	08023e9c 	.word	0x08023e9c

0800c44c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b08c      	sub	sp, #48	; 0x30
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800c45a:	2300      	movs	r3, #0
 800c45c:	e014      	b.n	800c488 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c462:	2329      	movs	r3, #41	; 0x29
 800c464:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800c466:	f107 030c 	add.w	r3, r7, #12
 800c46a:	4619      	mov	r1, r3
 800c46c:	4808      	ldr	r0, [pc, #32]	; (800c490 <netconn_prepare_delete+0x44>)
 800c46e:	f7ff ff55 	bl	800c31c <netconn_apimsg>
 800c472:	4603      	mov	r3, r0
 800c474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800c478:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <netconn_prepare_delete+0x3a>
    return err;
 800c480:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c484:	e000      	b.n	800c488 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800c486:	2300      	movs	r3, #0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3730      	adds	r7, #48	; 0x30
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	0800d6a9 	.word	0x0800d6a9

0800c494 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <netconn_delete+0x12>
    return ERR_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e00d      	b.n	800c4c2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f7ff ffd0 	bl	800c44c <netconn_prepare_delete>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800c4b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d102      	bne.n	800c4be <netconn_delete+0x2a>
    netconn_free(conn);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fec7 	bl	800d24c <netconn_free>
  }
  return err;
 800c4be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
	...

0800c4cc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b08e      	sub	sp, #56	; 0x38
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d109      	bne.n	800c4f4 <netconn_bind+0x28>
 800c4e0:	4b11      	ldr	r3, [pc, #68]	; (800c528 <netconn_bind+0x5c>)
 800c4e2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800c4e6:	4911      	ldr	r1, [pc, #68]	; (800c52c <netconn_bind+0x60>)
 800c4e8:	4811      	ldr	r0, [pc, #68]	; (800c530 <netconn_bind+0x64>)
 800c4ea:	f00e fcab 	bl	801ae44 <printf>
 800c4ee:	f06f 030f 	mvn.w	r3, #15
 800c4f2:	e015      	b.n	800c520 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d101      	bne.n	800c4fe <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800c4fa:	4b0e      	ldr	r3, [pc, #56]	; (800c534 <netconn_bind+0x68>)
 800c4fc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c506:	88fb      	ldrh	r3, [r7, #6]
 800c508:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c50a:	f107 0314 	add.w	r3, r7, #20
 800c50e:	4619      	mov	r1, r3
 800c510:	4809      	ldr	r0, [pc, #36]	; (800c538 <netconn_bind+0x6c>)
 800c512:	f7ff ff03 	bl	800c31c <netconn_apimsg>
 800c516:	4603      	mov	r3, r0
 800c518:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c51c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c520:	4618      	mov	r0, r3
 800c522:	3738      	adds	r7, #56	; 0x38
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	08023de0 	.word	0x08023de0
 800c52c:	08023f18 	.word	0x08023f18
 800c530:	08023e38 	.word	0x08023e38
 800c534:	08028d2c 	.word	0x08028d2c
 800c538:	0800d871 	.word	0x0800d871

0800c53c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	4613      	mov	r3, r2
 800c548:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800c54a:	2300      	movs	r3, #0
 800c54c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d109      	bne.n	800c568 <netconn_recv_data+0x2c>
 800c554:	4b58      	ldr	r3, [pc, #352]	; (800c6b8 <netconn_recv_data+0x17c>)
 800c556:	f44f 7212 	mov.w	r2, #584	; 0x248
 800c55a:	4958      	ldr	r1, [pc, #352]	; (800c6bc <netconn_recv_data+0x180>)
 800c55c:	4858      	ldr	r0, [pc, #352]	; (800c6c0 <netconn_recv_data+0x184>)
 800c55e:	f00e fc71 	bl	801ae44 <printf>
 800c562:	f06f 030f 	mvn.w	r3, #15
 800c566:	e0a2      	b.n	800c6ae <netconn_recv_data+0x172>
  *new_buf = NULL;
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d109      	bne.n	800c588 <netconn_recv_data+0x4c>
 800c574:	4b50      	ldr	r3, [pc, #320]	; (800c6b8 <netconn_recv_data+0x17c>)
 800c576:	f240 224a 	movw	r2, #586	; 0x24a
 800c57a:	4952      	ldr	r1, [pc, #328]	; (800c6c4 <netconn_recv_data+0x188>)
 800c57c:	4850      	ldr	r0, [pc, #320]	; (800c6c0 <netconn_recv_data+0x184>)
 800c57e:	f00e fc61 	bl	801ae44 <printf>
 800c582:	f06f 030f 	mvn.w	r3, #15
 800c586:	e092      	b.n	800c6ae <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3310      	adds	r3, #16
 800c58c:	4618      	mov	r0, r3
 800c58e:	f00d ff46 	bl	801a41e <sys_mbox_valid>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10e      	bne.n	800c5b6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800c598:	68f8      	ldr	r0, [r7, #12]
 800c59a:	f000 fa23 	bl	800c9e4 <netconn_err>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800c5a2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d002      	beq.n	800c5b0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800c5aa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c5ae:	e07e      	b.n	800c6ae <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800c5b0:	f06f 030a 	mvn.w	r3, #10
 800c5b4:	e07b      	b.n	800c6ae <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	7f1b      	ldrb	r3, [r3, #28]
 800c5ba:	f003 0302 	and.w	r3, r3, #2
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10f      	bne.n	800c5e2 <netconn_recv_data+0xa6>
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
 800c5c4:	f003 0304 	and.w	r3, r3, #4
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10a      	bne.n	800c5e2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	7f1b      	ldrb	r3, [r3, #28]
 800c5d0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d104      	bne.n	800c5e2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d023      	beq.n	800c62a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3310      	adds	r3, #16
 800c5e6:	f107 0218 	add.w	r2, r7, #24
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f00d fefa 	bl	801a3e6 <sys_arch_mbox_tryfetch>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f8:	d11f      	bne.n	800c63a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f000 f9f2 	bl	800c9e4 <netconn_err>
 800c600:	4603      	mov	r3, r0
 800c602:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800c604:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800c60c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c610:	e04d      	b.n	800c6ae <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	7f1b      	ldrb	r3, [r3, #28]
 800c616:	f003 0301 	and.w	r3, r3, #1
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d002      	beq.n	800c624 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800c61e:	f06f 030a 	mvn.w	r3, #10
 800c622:	e044      	b.n	800c6ae <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800c624:	f06f 0306 	mvn.w	r3, #6
 800c628:	e041      	b.n	800c6ae <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	3310      	adds	r3, #16
 800c62e:	f107 0118 	add.w	r1, r7, #24
 800c632:	2200      	movs	r2, #0
 800c634:	4618      	mov	r0, r3
 800c636:	f00d fe97 	bl	801a368 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c642:	2b10      	cmp	r3, #16
 800c644:	d117      	bne.n	800c676 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	f107 0217 	add.w	r2, r7, #23
 800c64c:	4611      	mov	r1, r2
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 fa1a 	bl	800ca88 <lwip_netconn_is_err_msg>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d009      	beq.n	800c66e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800c65a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c65e:	f113 0f0f 	cmn.w	r3, #15
 800c662:	d101      	bne.n	800c668 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800c664:	2300      	movs	r3, #0
 800c666:	e022      	b.n	800c6ae <netconn_recv_data+0x172>
      }
      return err;
 800c668:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c66c:	e01f      	b.n	800c6ae <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	891b      	ldrh	r3, [r3, #8]
 800c672:	83fb      	strh	r3, [r7, #30]
 800c674:	e00d      	b.n	800c692 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d106      	bne.n	800c68a <netconn_recv_data+0x14e>
 800c67c:	4b0e      	ldr	r3, [pc, #56]	; (800c6b8 <netconn_recv_data+0x17c>)
 800c67e:	f240 2291 	movw	r2, #657	; 0x291
 800c682:	4911      	ldr	r1, [pc, #68]	; (800c6c8 <netconn_recv_data+0x18c>)
 800c684:	480e      	ldr	r0, [pc, #56]	; (800c6c0 <netconn_recv_data+0x184>)
 800c686:	f00e fbdd 	bl	801ae44 <printf>
    len = netbuf_len((struct netbuf *)buf);
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	891b      	ldrh	r3, [r3, #8]
 800c690:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c696:	2b00      	cmp	r3, #0
 800c698:	d005      	beq.n	800c6a6 <netconn_recv_data+0x16a>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69e:	8bfa      	ldrh	r2, [r7, #30]
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800c6a6:	69ba      	ldr	r2, [r7, #24]
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3720      	adds	r7, #32
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	08023de0 	.word	0x08023de0
 800c6bc:	08023ff8 	.word	0x08023ff8
 800c6c0:	08023e38 	.word	0x08023e38
 800c6c4:	08024018 	.word	0x08024018
 800c6c8:	08024034 	.word	0x08024034

0800c6cc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d005      	beq.n	800c6ea <netconn_tcp_recvd_msg+0x1e>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6e6:	2b10      	cmp	r3, #16
 800c6e8:	d009      	beq.n	800c6fe <netconn_tcp_recvd_msg+0x32>
 800c6ea:	4b0c      	ldr	r3, [pc, #48]	; (800c71c <netconn_tcp_recvd_msg+0x50>)
 800c6ec:	f240 22a7 	movw	r2, #679	; 0x2a7
 800c6f0:	490b      	ldr	r1, [pc, #44]	; (800c720 <netconn_tcp_recvd_msg+0x54>)
 800c6f2:	480c      	ldr	r0, [pc, #48]	; (800c724 <netconn_tcp_recvd_msg+0x58>)
 800c6f4:	f00e fba6 	bl	801ae44 <printf>
 800c6f8:	f06f 030f 	mvn.w	r3, #15
 800c6fc:	e00a      	b.n	800c714 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800c70a:	6879      	ldr	r1, [r7, #4]
 800c70c:	4806      	ldr	r0, [pc, #24]	; (800c728 <netconn_tcp_recvd_msg+0x5c>)
 800c70e:	f7ff fe05 	bl	800c31c <netconn_apimsg>
 800c712:	4603      	mov	r3, r0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	08023de0 	.word	0x08023de0
 800c720:	08024040 	.word	0x08024040
 800c724:	08023e38 	.word	0x08023e38
 800c728:	0800d97f 	.word	0x0800d97f

0800c72c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b090      	sub	sp, #64	; 0x40
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	4613      	mov	r3, r2
 800c738:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	3310      	adds	r3, #16
 800c73e:	4618      	mov	r0, r3
 800c740:	f00d fe6d 	bl	801a41e <sys_mbox_valid>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d102      	bne.n	800c750 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800c74a:	f06f 030a 	mvn.w	r3, #10
 800c74e:	e06d      	b.n	800c82c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	7f1b      	ldrb	r3, [r3, #28]
 800c754:	b25b      	sxtb	r3, r3
 800c756:	2b00      	cmp	r3, #0
 800c758:	da07      	bge.n	800c76a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	7f1b      	ldrb	r3, [r3, #28]
 800c75e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c762:	b2da      	uxtb	r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800c768:	e039      	b.n	800c7de <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c76a:	79fb      	ldrb	r3, [r7, #7]
 800c76c:	461a      	mov	r2, r3
 800c76e:	68b9      	ldr	r1, [r7, #8]
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f7ff fee3 	bl	800c53c <netconn_recv_data>
 800c776:	4603      	mov	r3, r0
 800c778:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800c77c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800c784:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c788:	e050      	b.n	800c82c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800c790:	79fb      	ldrb	r3, [r7, #7]
 800c792:	f003 0308 	and.w	r3, r3, #8
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10e      	bne.n	800c7b8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d002      	beq.n	800c7a6 <netconn_recv_data_tcp+0x7a>
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a2:	891b      	ldrh	r3, [r3, #8]
 800c7a4:	e000      	b.n	800c7a8 <netconn_recv_data_tcp+0x7c>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800c7aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c7ac:	f107 0214 	add.w	r2, r7, #20
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f7ff ff8a 	bl	800c6cc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d134      	bne.n	800c828 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	f003 0310 	and.w	r3, r3, #16
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d009      	beq.n	800c7dc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	7f1b      	ldrb	r3, [r3, #28]
 800c7cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800c7d6:	f06f 0306 	mvn.w	r3, #6
 800c7da:	e027      	b.n	800c82c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800c7dc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d005      	beq.n	800c7f2 <netconn_recv_data_tcp+0xc6>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	2101      	movs	r1, #1
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10f      	bne.n	800c81a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f000 f8f2 	bl	800c9e4 <netconn_err>
 800c800:	4603      	mov	r3, r0
 800c802:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800c806:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <netconn_recv_data_tcp+0xe8>
          return err;
 800c80e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c812:	e00b      	b.n	800c82c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800c814:	f06f 030d 	mvn.w	r3, #13
 800c818:	e008      	b.n	800c82c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c81a:	2101      	movs	r1, #1
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f000 f8b1 	bl	800c984 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c822:	f06f 030e 	mvn.w	r3, #14
 800c826:	e001      	b.n	800c82c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800c828:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3740      	adds	r7, #64	; 0x40
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800c83e:	2300      	movs	r3, #0
 800c840:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d109      	bne.n	800c85c <netconn_recv+0x28>
 800c848:	4b32      	ldr	r3, [pc, #200]	; (800c914 <netconn_recv+0xe0>)
 800c84a:	f240 3263 	movw	r2, #867	; 0x363
 800c84e:	4932      	ldr	r1, [pc, #200]	; (800c918 <netconn_recv+0xe4>)
 800c850:	4832      	ldr	r0, [pc, #200]	; (800c91c <netconn_recv+0xe8>)
 800c852:	f00e faf7 	bl	801ae44 <printf>
 800c856:	f06f 030f 	mvn.w	r3, #15
 800c85a:	e056      	b.n	800c90a <netconn_recv+0xd6>
  *new_buf = NULL;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2200      	movs	r2, #0
 800c860:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d109      	bne.n	800c87c <netconn_recv+0x48>
 800c868:	4b2a      	ldr	r3, [pc, #168]	; (800c914 <netconn_recv+0xe0>)
 800c86a:	f240 3265 	movw	r2, #869	; 0x365
 800c86e:	492c      	ldr	r1, [pc, #176]	; (800c920 <netconn_recv+0xec>)
 800c870:	482a      	ldr	r0, [pc, #168]	; (800c91c <netconn_recv+0xe8>)
 800c872:	f00e fae7 	bl	801ae44 <printf>
 800c876:	f06f 030f 	mvn.w	r3, #15
 800c87a:	e046      	b.n	800c90a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c884:	2b10      	cmp	r3, #16
 800c886:	d13a      	bne.n	800c8fe <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800c888:	2300      	movs	r3, #0
 800c88a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c88c:	2006      	movs	r0, #6
 800c88e:	f003 fa1f 	bl	800fcd0 <memp_malloc>
 800c892:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d102      	bne.n	800c8a0 <netconn_recv+0x6c>
      return ERR_MEM;
 800c89a:	f04f 33ff 	mov.w	r3, #4294967295
 800c89e:	e034      	b.n	800c90a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800c8a0:	f107 030c 	add.w	r3, r7, #12
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff ff3f 	bl	800c72c <netconn_recv_data_tcp>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c8b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d006      	beq.n	800c8c8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800c8ba:	6979      	ldr	r1, [r7, #20]
 800c8bc:	2006      	movs	r0, #6
 800c8be:	f003 fa59 	bl	800fd74 <memp_free>
      return err;
 800c8c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c8c6:	e020      	b.n	800c90a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d106      	bne.n	800c8dc <netconn_recv+0xa8>
 800c8ce:	4b11      	ldr	r3, [pc, #68]	; (800c914 <netconn_recv+0xe0>)
 800c8d0:	f240 3279 	movw	r2, #889	; 0x379
 800c8d4:	4913      	ldr	r1, [pc, #76]	; (800c924 <netconn_recv+0xf0>)
 800c8d6:	4811      	ldr	r0, [pc, #68]	; (800c91c <netconn_recv+0xe8>)
 800c8d8:	f00e fab4 	bl	801ae44 <printf>

    buf->p = p;
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	697a      	ldr	r2, [r7, #20]
 800c8f8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	e005      	b.n	800c90a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800c8fe:	2200      	movs	r2, #0
 800c900:	6839      	ldr	r1, [r7, #0]
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f7ff fe1a 	bl	800c53c <netconn_recv_data>
 800c908:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	08023de0 	.word	0x08023de0
 800c918:	08023ff8 	.word	0x08023ff8
 800c91c:	08023e38 	.word	0x08023e38
 800c920:	08024018 	.word	0x08024018
 800c924:	08024090 	.word	0x08024090

0800c928 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b08c      	sub	sp, #48	; 0x30
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d109      	bne.n	800c94c <netconn_send+0x24>
 800c938:	4b0e      	ldr	r3, [pc, #56]	; (800c974 <netconn_send+0x4c>)
 800c93a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800c93e:	490e      	ldr	r1, [pc, #56]	; (800c978 <netconn_send+0x50>)
 800c940:	480e      	ldr	r0, [pc, #56]	; (800c97c <netconn_send+0x54>)
 800c942:	f00e fa7f 	bl	801ae44 <printf>
 800c946:	f06f 030f 	mvn.w	r3, #15
 800c94a:	e00e      	b.n	800c96a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800c954:	f107 030c 	add.w	r3, r7, #12
 800c958:	4619      	mov	r1, r3
 800c95a:	4809      	ldr	r0, [pc, #36]	; (800c980 <netconn_send+0x58>)
 800c95c:	f7ff fcde 	bl	800c31c <netconn_apimsg>
 800c960:	4603      	mov	r3, r0
 800c962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c966:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3730      	adds	r7, #48	; 0x30
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	08023de0 	.word	0x08023de0
 800c978:	0802409c 	.word	0x0802409c
 800c97c:	08023e38 	.word	0x08023e38
 800c980:	0800d8e5 	.word	0x0800d8e5

0800c984 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b08c      	sub	sp, #48	; 0x30
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d109      	bne.n	800c9aa <netconn_close_shutdown+0x26>
 800c996:	4b0f      	ldr	r3, [pc, #60]	; (800c9d4 <netconn_close_shutdown+0x50>)
 800c998:	f240 4247 	movw	r2, #1095	; 0x447
 800c99c:	490e      	ldr	r1, [pc, #56]	; (800c9d8 <netconn_close_shutdown+0x54>)
 800c99e:	480f      	ldr	r0, [pc, #60]	; (800c9dc <netconn_close_shutdown+0x58>)
 800c9a0:	f00e fa50 	bl	801ae44 <printf>
 800c9a4:	f06f 030f 	mvn.w	r3, #15
 800c9a8:	e010      	b.n	800c9cc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800c9ae:	78fb      	ldrb	r3, [r7, #3]
 800c9b0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c9b2:	2329      	movs	r3, #41	; 0x29
 800c9b4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800c9b6:	f107 030c 	add.w	r3, r7, #12
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	4808      	ldr	r0, [pc, #32]	; (800c9e0 <netconn_close_shutdown+0x5c>)
 800c9be:	f7ff fcad 	bl	800c31c <netconn_apimsg>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c9c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3730      	adds	r7, #48	; 0x30
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	08023de0 	.word	0x08023de0
 800c9d8:	0802411c 	.word	0x0802411c
 800c9dc:	08023e38 	.word	0x08023e38
 800c9e0:	0800dd81 	.word	0x0800dd81

0800c9e4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d101      	bne.n	800c9f6 <netconn_err+0x12>
    return ERR_OK;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e00d      	b.n	800ca12 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800c9f6:	f00d fe2d 	bl	801a654 <sys_arch_protect>
 800c9fa:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	7a1b      	ldrb	r3, [r3, #8]
 800ca00:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f00d fe31 	bl	801a670 <sys_arch_unprotect>
  return err;
 800ca0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
	...

0800ca1c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	4603      	mov	r3, r0
 800ca24:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ca26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca2a:	f113 0f0d 	cmn.w	r3, #13
 800ca2e:	d009      	beq.n	800ca44 <lwip_netconn_err_to_msg+0x28>
 800ca30:	f113 0f0d 	cmn.w	r3, #13
 800ca34:	dc0c      	bgt.n	800ca50 <lwip_netconn_err_to_msg+0x34>
 800ca36:	f113 0f0f 	cmn.w	r3, #15
 800ca3a:	d007      	beq.n	800ca4c <lwip_netconn_err_to_msg+0x30>
 800ca3c:	f113 0f0e 	cmn.w	r3, #14
 800ca40:	d002      	beq.n	800ca48 <lwip_netconn_err_to_msg+0x2c>
 800ca42:	e005      	b.n	800ca50 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ca44:	4b0a      	ldr	r3, [pc, #40]	; (800ca70 <lwip_netconn_err_to_msg+0x54>)
 800ca46:	e00e      	b.n	800ca66 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ca48:	4b0a      	ldr	r3, [pc, #40]	; (800ca74 <lwip_netconn_err_to_msg+0x58>)
 800ca4a:	e00c      	b.n	800ca66 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800ca4c:	4b0a      	ldr	r3, [pc, #40]	; (800ca78 <lwip_netconn_err_to_msg+0x5c>)
 800ca4e:	e00a      	b.n	800ca66 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ca50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d005      	beq.n	800ca64 <lwip_netconn_err_to_msg+0x48>
 800ca58:	4b08      	ldr	r3, [pc, #32]	; (800ca7c <lwip_netconn_err_to_msg+0x60>)
 800ca5a:	227d      	movs	r2, #125	; 0x7d
 800ca5c:	4908      	ldr	r1, [pc, #32]	; (800ca80 <lwip_netconn_err_to_msg+0x64>)
 800ca5e:	4809      	ldr	r0, [pc, #36]	; (800ca84 <lwip_netconn_err_to_msg+0x68>)
 800ca60:	f00e f9f0 	bl	801ae44 <printf>
      return NULL;
 800ca64:	2300      	movs	r3, #0
  }
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	0802759c 	.word	0x0802759c
 800ca74:	0802759d 	.word	0x0802759d
 800ca78:	0802759e 	.word	0x0802759e
 800ca7c:	08024138 	.word	0x08024138
 800ca80:	0802416c 	.word	0x0802416c
 800ca84:	0802417c 	.word	0x0802417c

0800ca88 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d105      	bne.n	800caa4 <lwip_netconn_is_err_msg+0x1c>
 800ca98:	4b12      	ldr	r3, [pc, #72]	; (800cae4 <lwip_netconn_is_err_msg+0x5c>)
 800ca9a:	2285      	movs	r2, #133	; 0x85
 800ca9c:	4912      	ldr	r1, [pc, #72]	; (800cae8 <lwip_netconn_is_err_msg+0x60>)
 800ca9e:	4813      	ldr	r0, [pc, #76]	; (800caec <lwip_netconn_is_err_msg+0x64>)
 800caa0:	f00e f9d0 	bl	801ae44 <printf>

  if (msg == &netconn_aborted) {
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a12      	ldr	r2, [pc, #72]	; (800caf0 <lwip_netconn_is_err_msg+0x68>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d104      	bne.n	800cab6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	22f3      	movs	r2, #243	; 0xf3
 800cab0:	701a      	strb	r2, [r3, #0]
    return 1;
 800cab2:	2301      	movs	r3, #1
 800cab4:	e012      	b.n	800cadc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a0e      	ldr	r2, [pc, #56]	; (800caf4 <lwip_netconn_is_err_msg+0x6c>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d104      	bne.n	800cac8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	22f2      	movs	r2, #242	; 0xf2
 800cac2:	701a      	strb	r2, [r3, #0]
    return 1;
 800cac4:	2301      	movs	r3, #1
 800cac6:	e009      	b.n	800cadc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a0b      	ldr	r2, [pc, #44]	; (800caf8 <lwip_netconn_is_err_msg+0x70>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d104      	bne.n	800cada <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	22f1      	movs	r2, #241	; 0xf1
 800cad4:	701a      	strb	r2, [r3, #0]
    return 1;
 800cad6:	2301      	movs	r3, #1
 800cad8:	e000      	b.n	800cadc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	08024138 	.word	0x08024138
 800cae8:	080241a4 	.word	0x080241a4
 800caec:	0802417c 	.word	0x0802417c
 800caf0:	0802759c 	.word	0x0802759c
 800caf4:	0802759d 	.word	0x0802759d
 800caf8:	0802759e 	.word	0x0802759e

0800cafc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b088      	sub	sp, #32
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
 800cb08:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d105      	bne.n	800cb1c <recv_udp+0x20>
 800cb10:	4b34      	ldr	r3, [pc, #208]	; (800cbe4 <recv_udp+0xe8>)
 800cb12:	22e5      	movs	r2, #229	; 0xe5
 800cb14:	4934      	ldr	r1, [pc, #208]	; (800cbe8 <recv_udp+0xec>)
 800cb16:	4835      	ldr	r0, [pc, #212]	; (800cbec <recv_udp+0xf0>)
 800cb18:	f00e f994 	bl	801ae44 <printf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d105      	bne.n	800cb2e <recv_udp+0x32>
 800cb22:	4b30      	ldr	r3, [pc, #192]	; (800cbe4 <recv_udp+0xe8>)
 800cb24:	22e6      	movs	r2, #230	; 0xe6
 800cb26:	4932      	ldr	r1, [pc, #200]	; (800cbf0 <recv_udp+0xf4>)
 800cb28:	4830      	ldr	r0, [pc, #192]	; (800cbec <recv_udp+0xf0>)
 800cb2a:	f00e f98b 	bl	801ae44 <printf>
  conn = (struct netconn *)arg;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d103      	bne.n	800cb40 <recv_udp+0x44>
    pbuf_free(p);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f003 ff47 	bl	80109cc <pbuf_free>
    return;
 800cb3e:	e04d      	b.n	800cbdc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d005      	beq.n	800cb56 <recv_udp+0x5a>
 800cb4a:	4b26      	ldr	r3, [pc, #152]	; (800cbe4 <recv_udp+0xe8>)
 800cb4c:	22ee      	movs	r2, #238	; 0xee
 800cb4e:	4929      	ldr	r1, [pc, #164]	; (800cbf4 <recv_udp+0xf8>)
 800cb50:	4826      	ldr	r0, [pc, #152]	; (800cbec <recv_udp+0xf0>)
 800cb52:	f00e f977 	bl	801ae44 <printf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	3310      	adds	r3, #16
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f00d fc5f 	bl	801a41e <sys_mbox_valid>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d103      	bne.n	800cb6e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f003 ff30 	bl	80109cc <pbuf_free>
    return;
 800cb6c:	e036      	b.n	800cbdc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cb6e:	2006      	movs	r0, #6
 800cb70:	f003 f8ae 	bl	800fcd0 <memp_malloc>
 800cb74:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d103      	bne.n	800cb84 <recv_udp+0x88>
    pbuf_free(p);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f003 ff25 	bl	80109cc <pbuf_free>
    return;
 800cb82:	e02b      	b.n	800cbdc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d002      	beq.n	800cb9c <recv_udp+0xa0>
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	e000      	b.n	800cb9e <recv_udp+0xa2>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	69ba      	ldr	r2, [r7, #24]
 800cba0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cba6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	891b      	ldrh	r3, [r3, #8]
 800cbac:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	3310      	adds	r3, #16
 800cbb2:	69b9      	ldr	r1, [r7, #24]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f00d fbbd 	bl	801a334 <sys_mbox_trypost>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d003      	beq.n	800cbc8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800cbc0:	69b8      	ldr	r0, [r7, #24]
 800cbc2:	f001 f969 	bl	800de98 <netbuf_delete>
    return;
 800cbc6:	e009      	b.n	800cbdc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d005      	beq.n	800cbdc <recv_udp+0xe0>
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd4:	8afa      	ldrh	r2, [r7, #22]
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	69f8      	ldr	r0, [r7, #28]
 800cbda:	4798      	blx	r3
  }
}
 800cbdc:	3720      	adds	r7, #32
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	08024138 	.word	0x08024138
 800cbe8:	080241b0 	.word	0x080241b0
 800cbec:	0802417c 	.word	0x0802417c
 800cbf0:	080241d4 	.word	0x080241d4
 800cbf4:	080241f4 	.word	0x080241f4

0800cbf8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b088      	sub	sp, #32
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d106      	bne.n	800cc1a <recv_tcp+0x22>
 800cc0c:	4b36      	ldr	r3, [pc, #216]	; (800cce8 <recv_tcp+0xf0>)
 800cc0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cc12:	4936      	ldr	r1, [pc, #216]	; (800ccec <recv_tcp+0xf4>)
 800cc14:	4836      	ldr	r0, [pc, #216]	; (800ccf0 <recv_tcp+0xf8>)
 800cc16:	f00e f915 	bl	801ae44 <printf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d106      	bne.n	800cc2e <recv_tcp+0x36>
 800cc20:	4b31      	ldr	r3, [pc, #196]	; (800cce8 <recv_tcp+0xf0>)
 800cc22:	f240 122d 	movw	r2, #301	; 0x12d
 800cc26:	4933      	ldr	r1, [pc, #204]	; (800ccf4 <recv_tcp+0xfc>)
 800cc28:	4831      	ldr	r0, [pc, #196]	; (800ccf0 <recv_tcp+0xf8>)
 800cc2a:	f00e f90b 	bl	801ae44 <printf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800cc2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d006      	beq.n	800cc44 <recv_tcp+0x4c>
 800cc36:	4b2c      	ldr	r3, [pc, #176]	; (800cce8 <recv_tcp+0xf0>)
 800cc38:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800cc3c:	492e      	ldr	r1, [pc, #184]	; (800ccf8 <recv_tcp+0x100>)
 800cc3e:	482c      	ldr	r0, [pc, #176]	; (800ccf0 <recv_tcp+0xf8>)
 800cc40:	f00e f900 	bl	801ae44 <printf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d102      	bne.n	800cc54 <recv_tcp+0x5c>
    return ERR_VAL;
 800cc4e:	f06f 0305 	mvn.w	r3, #5
 800cc52:	e045      	b.n	800cce0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	68ba      	ldr	r2, [r7, #8]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d006      	beq.n	800cc6c <recv_tcp+0x74>
 800cc5e:	4b22      	ldr	r3, [pc, #136]	; (800cce8 <recv_tcp+0xf0>)
 800cc60:	f240 1235 	movw	r2, #309	; 0x135
 800cc64:	4925      	ldr	r1, [pc, #148]	; (800ccfc <recv_tcp+0x104>)
 800cc66:	4822      	ldr	r0, [pc, #136]	; (800ccf0 <recv_tcp+0xf8>)
 800cc68:	f00e f8ec 	bl	801ae44 <printf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	3310      	adds	r3, #16
 800cc70:	4618      	mov	r0, r3
 800cc72:	f00d fbd4 	bl	801a41e <sys_mbox_valid>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d10d      	bne.n	800cc98 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d008      	beq.n	800cc94 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	891b      	ldrh	r3, [r3, #8]
 800cc86:	4619      	mov	r1, r3
 800cc88:	68b8      	ldr	r0, [r7, #8]
 800cc8a:	f004 fe79 	bl	8011980 <tcp_recved>
      pbuf_free(p);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f003 fe9c 	bl	80109cc <pbuf_free>
    }
    return ERR_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	e023      	b.n	800cce0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d005      	beq.n	800ccaa <recv_tcp+0xb2>
    msg = p;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	891b      	ldrh	r3, [r3, #8]
 800cca6:	83fb      	strh	r3, [r7, #30]
 800cca8:	e003      	b.n	800ccb2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ccaa:	4b15      	ldr	r3, [pc, #84]	; (800cd00 <recv_tcp+0x108>)
 800ccac:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	3310      	adds	r3, #16
 800ccb6:	69b9      	ldr	r1, [r7, #24]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f00d fb3b 	bl	801a334 <sys_mbox_trypost>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ccc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc8:	e00a      	b.n	800cce0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d005      	beq.n	800ccde <recv_tcp+0xe6>
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd6:	8bfa      	ldrh	r2, [r7, #30]
 800ccd8:	2100      	movs	r1, #0
 800ccda:	6978      	ldr	r0, [r7, #20]
 800ccdc:	4798      	blx	r3
  }

  return ERR_OK;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3720      	adds	r7, #32
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	08024138 	.word	0x08024138
 800ccec:	08024214 	.word	0x08024214
 800ccf0:	0802417c 	.word	0x0802417c
 800ccf4:	08024238 	.word	0x08024238
 800ccf8:	08024258 	.word	0x08024258
 800ccfc:	08024270 	.word	0x08024270
 800cd00:	0802759e 	.word	0x0802759e

0800cd04 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d106      	bne.n	800cd26 <poll_tcp+0x22>
 800cd18:	4b29      	ldr	r3, [pc, #164]	; (800cdc0 <poll_tcp+0xbc>)
 800cd1a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800cd1e:	4929      	ldr	r1, [pc, #164]	; (800cdc4 <poll_tcp+0xc0>)
 800cd20:	4829      	ldr	r0, [pc, #164]	; (800cdc8 <poll_tcp+0xc4>)
 800cd22:	f00e f88f 	bl	801ae44 <printf>

  if (conn->state == NETCONN_WRITE) {
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	785b      	ldrb	r3, [r3, #1]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d104      	bne.n	800cd38 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800cd2e:	2101      	movs	r1, #1
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f000 fe59 	bl	800d9e8 <lwip_netconn_do_writemore>
 800cd36:	e016      	b.n	800cd66 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	785b      	ldrb	r3, [r3, #1]
 800cd3c:	2b04      	cmp	r3, #4
 800cd3e:	d112      	bne.n	800cd66 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	6a1b      	ldr	r3, [r3, #32]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d00a      	beq.n	800cd5e <poll_tcp+0x5a>
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6a1b      	ldr	r3, [r3, #32]
 800cd4c:	7a5b      	ldrb	r3, [r3, #9]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d005      	beq.n	800cd5e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6a1b      	ldr	r3, [r3, #32]
 800cd56:	7a5a      	ldrb	r2, [r3, #9]
 800cd58:	3a01      	subs	r2, #1
 800cd5a:	b2d2      	uxtb	r2, r2
 800cd5c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800cd5e:	2101      	movs	r1, #1
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f000 fb3b 	bl	800d3dc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	7f1b      	ldrb	r3, [r3, #28]
 800cd6a:	f003 0310 	and.w	r3, r3, #16
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d021      	beq.n	800cdb6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d01d      	beq.n	800cdb6 <poll_tcp+0xb2>
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cd82:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800cd86:	d316      	bcc.n	800cdb6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cd90:	2b04      	cmp	r3, #4
 800cd92:	d810      	bhi.n	800cdb6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	7f1b      	ldrb	r3, [r3, #28]
 800cd98:	f023 0310 	bic.w	r3, r3, #16
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d005      	beq.n	800cdb6 <poll_tcp+0xb2>
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2102      	movs	r1, #2
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	08024138 	.word	0x08024138
 800cdc4:	08024290 	.word	0x08024290
 800cdc8:	0802417c 	.word	0x0802417c

0800cdcc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d106      	bne.n	800cdf2 <sent_tcp+0x26>
 800cde4:	4b20      	ldr	r3, [pc, #128]	; (800ce68 <sent_tcp+0x9c>)
 800cde6:	f240 1293 	movw	r2, #403	; 0x193
 800cdea:	4920      	ldr	r1, [pc, #128]	; (800ce6c <sent_tcp+0xa0>)
 800cdec:	4820      	ldr	r0, [pc, #128]	; (800ce70 <sent_tcp+0xa4>)
 800cdee:	f00e f829 	bl	801ae44 <printf>

  if (conn) {
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d032      	beq.n	800ce5e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	785b      	ldrb	r3, [r3, #1]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d104      	bne.n	800ce0a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ce00:	2101      	movs	r1, #1
 800ce02:	6978      	ldr	r0, [r7, #20]
 800ce04:	f000 fdf0 	bl	800d9e8 <lwip_netconn_do_writemore>
 800ce08:	e007      	b.n	800ce1a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	785b      	ldrb	r3, [r3, #1]
 800ce0e:	2b04      	cmp	r3, #4
 800ce10:	d103      	bne.n	800ce1a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ce12:	2101      	movs	r1, #1
 800ce14:	6978      	ldr	r0, [r7, #20]
 800ce16:	f000 fae1 	bl	800d3dc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d01d      	beq.n	800ce5e <sent_tcp+0x92>
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ce2a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ce2e:	d316      	bcc.n	800ce5e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ce38:	2b04      	cmp	r3, #4
 800ce3a:	d810      	bhi.n	800ce5e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	7f1b      	ldrb	r3, [r3, #28]
 800ce40:	f023 0310 	bic.w	r3, r3, #16
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d005      	beq.n	800ce5e <sent_tcp+0x92>
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce56:	88fa      	ldrh	r2, [r7, #6]
 800ce58:	2102      	movs	r1, #2
 800ce5a:	6978      	ldr	r0, [r7, #20]
 800ce5c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ce5e:	2300      	movs	r3, #0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3718      	adds	r7, #24
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	08024138 	.word	0x08024138
 800ce6c:	08024290 	.word	0x08024290
 800ce70:	0802417c 	.word	0x0802417c

0800ce74 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b088      	sub	sp, #32
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d106      	bne.n	800ce98 <err_tcp+0x24>
 800ce8a:	4b5f      	ldr	r3, [pc, #380]	; (800d008 <err_tcp+0x194>)
 800ce8c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ce90:	495e      	ldr	r1, [pc, #376]	; (800d00c <err_tcp+0x198>)
 800ce92:	485f      	ldr	r0, [pc, #380]	; (800d010 <err_tcp+0x19c>)
 800ce94:	f00d ffd6 	bl	801ae44 <printf>

  SYS_ARCH_PROTECT(lev);
 800ce98:	f00d fbdc 	bl	801a654 <sys_arch_protect>
 800ce9c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	2200      	movs	r2, #0
 800cea2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	78fa      	ldrb	r2, [r7, #3]
 800cea8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	7f1b      	ldrb	r3, [r3, #28]
 800ceae:	f043 0301 	orr.w	r3, r3, #1
 800ceb2:	b2da      	uxtb	r2, r3
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	785b      	ldrb	r3, [r3, #1]
 800cebc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	2200      	movs	r2, #0
 800cec2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800cec4:	69b8      	ldr	r0, [r7, #24]
 800cec6:	f00d fbd3 	bl	801a670 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d005      	beq.n	800cede <err_tcp+0x6a>
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced6:	2200      	movs	r2, #0
 800ced8:	2104      	movs	r1, #4
 800ceda:	69f8      	ldr	r0, [r7, #28]
 800cedc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d005      	beq.n	800cef2 <err_tcp+0x7e>
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceea:	2200      	movs	r2, #0
 800ceec:	2100      	movs	r1, #0
 800ceee:	69f8      	ldr	r0, [r7, #28]
 800cef0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d005      	beq.n	800cf06 <err_tcp+0x92>
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefe:	2200      	movs	r2, #0
 800cf00:	2102      	movs	r1, #2
 800cf02:	69f8      	ldr	r0, [r7, #28]
 800cf04:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800cf06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7ff fd86 	bl	800ca1c <lwip_netconn_err_to_msg>
 800cf10:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	3310      	adds	r3, #16
 800cf16:	4618      	mov	r0, r3
 800cf18:	f00d fa81 	bl	801a41e <sys_mbox_valid>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d005      	beq.n	800cf2e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	3310      	adds	r3, #16
 800cf26:	6939      	ldr	r1, [r7, #16]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f00d fa03 	bl	801a334 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	3314      	adds	r3, #20
 800cf32:	4618      	mov	r0, r3
 800cf34:	f00d fa73 	bl	801a41e <sys_mbox_valid>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d005      	beq.n	800cf4a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	3314      	adds	r3, #20
 800cf42:	6939      	ldr	r1, [r7, #16]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f00d f9f5 	bl	801a334 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800cf4a:	7dfb      	ldrb	r3, [r7, #23]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d005      	beq.n	800cf5c <err_tcp+0xe8>
 800cf50:	7dfb      	ldrb	r3, [r7, #23]
 800cf52:	2b04      	cmp	r3, #4
 800cf54:	d002      	beq.n	800cf5c <err_tcp+0xe8>
 800cf56:	7dfb      	ldrb	r3, [r7, #23]
 800cf58:	2b03      	cmp	r3, #3
 800cf5a:	d143      	bne.n	800cfe4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	7f1b      	ldrb	r3, [r3, #28]
 800cf60:	f003 0304 	and.w	r3, r3, #4
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	bf14      	ite	ne
 800cf68:	2301      	movne	r3, #1
 800cf6a:	2300      	moveq	r3, #0
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	7f1b      	ldrb	r3, [r3, #28]
 800cf74:	f023 0304 	bic.w	r3, r3, #4
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d13b      	bne.n	800cffc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	6a1b      	ldr	r3, [r3, #32]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d106      	bne.n	800cf9a <err_tcp+0x126>
 800cf8c:	4b1e      	ldr	r3, [pc, #120]	; (800d008 <err_tcp+0x194>)
 800cf8e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cf92:	4920      	ldr	r1, [pc, #128]	; (800d014 <err_tcp+0x1a0>)
 800cf94:	481e      	ldr	r0, [pc, #120]	; (800d010 <err_tcp+0x19c>)
 800cf96:	f00d ff55 	bl	801ae44 <printf>
      if (old_state == NETCONN_CLOSE) {
 800cf9a:	7dfb      	ldrb	r3, [r7, #23]
 800cf9c:	2b04      	cmp	r3, #4
 800cf9e:	d104      	bne.n	800cfaa <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	6a1b      	ldr	r3, [r3, #32]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	711a      	strb	r2, [r3, #4]
 800cfa8:	e003      	b.n	800cfb2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	6a1b      	ldr	r3, [r3, #32]
 800cfae:	78fa      	ldrb	r2, [r7, #3]
 800cfb0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	6a1b      	ldr	r3, [r3, #32]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	330c      	adds	r3, #12
 800cfba:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800cfbc:	68b8      	ldr	r0, [r7, #8]
 800cfbe:	f00d fabf 	bl	801a540 <sys_sem_valid>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d106      	bne.n	800cfd6 <err_tcp+0x162>
 800cfc8:	4b0f      	ldr	r3, [pc, #60]	; (800d008 <err_tcp+0x194>)
 800cfca:	f240 12ef 	movw	r2, #495	; 0x1ef
 800cfce:	4912      	ldr	r1, [pc, #72]	; (800d018 <err_tcp+0x1a4>)
 800cfd0:	480f      	ldr	r0, [pc, #60]	; (800d010 <err_tcp+0x19c>)
 800cfd2:	f00d ff37 	bl	801ae44 <printf>
      conn->current_msg = NULL;
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800cfdc:	68b8      	ldr	r0, [r7, #8]
 800cfde:	f00d fa95 	bl	801a50c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800cfe2:	e00b      	b.n	800cffc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	6a1b      	ldr	r3, [r3, #32]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d008      	beq.n	800cffe <err_tcp+0x18a>
 800cfec:	4b06      	ldr	r3, [pc, #24]	; (800d008 <err_tcp+0x194>)
 800cfee:	f240 12f7 	movw	r2, #503	; 0x1f7
 800cff2:	490a      	ldr	r1, [pc, #40]	; (800d01c <err_tcp+0x1a8>)
 800cff4:	4806      	ldr	r0, [pc, #24]	; (800d010 <err_tcp+0x19c>)
 800cff6:	f00d ff25 	bl	801ae44 <printf>
  }
}
 800cffa:	e000      	b.n	800cffe <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800cffc:	bf00      	nop
}
 800cffe:	bf00      	nop
 800d000:	3720      	adds	r7, #32
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	08024138 	.word	0x08024138
 800d00c:	08024290 	.word	0x08024290
 800d010:	0802417c 	.word	0x0802417c
 800d014:	080242a0 	.word	0x080242a0
 800d018:	080242bc 	.word	0x080242bc
 800d01c:	080242d8 	.word	0x080242d8

0800d020 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d02e:	6879      	ldr	r1, [r7, #4]
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f005 fb89 	bl	8012748 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d036:	490a      	ldr	r1, [pc, #40]	; (800d060 <setup_tcp+0x40>)
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f005 fb97 	bl	801276c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d03e:	4909      	ldr	r1, [pc, #36]	; (800d064 <setup_tcp+0x44>)
 800d040:	68f8      	ldr	r0, [r7, #12]
 800d042:	f005 fbb5 	bl	80127b0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d046:	2202      	movs	r2, #2
 800d048:	4907      	ldr	r1, [pc, #28]	; (800d068 <setup_tcp+0x48>)
 800d04a:	68f8      	ldr	r0, [r7, #12]
 800d04c:	f005 fc0c 	bl	8012868 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d050:	4906      	ldr	r1, [pc, #24]	; (800d06c <setup_tcp+0x4c>)
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f005 fbce 	bl	80127f4 <tcp_err>
}
 800d058:	bf00      	nop
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	0800cbf9 	.word	0x0800cbf9
 800d064:	0800cdcd 	.word	0x0800cdcd
 800d068:	0800cd05 	.word	0x0800cd05
 800d06c:	0800ce75 	.word	0x0800ce75

0800d070 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d070:	b590      	push	{r4, r7, lr}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d078:	2300      	movs	r3, #0
 800d07a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d006      	beq.n	800d094 <pcb_new+0x24>
 800d086:	4b2b      	ldr	r3, [pc, #172]	; (800d134 <pcb_new+0xc4>)
 800d088:	f240 2265 	movw	r2, #613	; 0x265
 800d08c:	492a      	ldr	r1, [pc, #168]	; (800d138 <pcb_new+0xc8>)
 800d08e:	482b      	ldr	r0, [pc, #172]	; (800d13c <pcb_new+0xcc>)
 800d090:	f00d fed8 	bl	801ae44 <printf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d09e:	2b10      	cmp	r3, #16
 800d0a0:	d022      	beq.n	800d0e8 <pcb_new+0x78>
 800d0a2:	2b20      	cmp	r3, #32
 800d0a4:	d133      	bne.n	800d10e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681c      	ldr	r4, [r3, #0]
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f00a fe10 	bl	8017cd2 <udp_new_ip_type>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d02a      	beq.n	800d116 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	2b22      	cmp	r3, #34	; 0x22
 800d0c8:	d104      	bne.n	800d0d4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	6858      	ldr	r0, [r3, #4]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	4917      	ldr	r1, [pc, #92]	; (800d140 <pcb_new+0xd0>)
 800d0e2:	f00a fd7d 	bl	8017be0 <udp_recv>
      }
      break;
 800d0e6:	e016      	b.n	800d116 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681c      	ldr	r4, [r3, #0]
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f005 fb1c 	bl	801272c <tcp_new_ip_type>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00b      	beq.n	800d11a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4618      	mov	r0, r3
 800d108:	f7ff ff8a 	bl	800d020 <setup_tcp>
      }
      break;
 800d10c:	e005      	b.n	800d11a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	22fa      	movs	r2, #250	; 0xfa
 800d112:	711a      	strb	r2, [r3, #4]
      return;
 800d114:	e00a      	b.n	800d12c <pcb_new+0xbc>
      break;
 800d116:	bf00      	nop
 800d118:	e000      	b.n	800d11c <pcb_new+0xac>
      break;
 800d11a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d102      	bne.n	800d12c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	22ff      	movs	r2, #255	; 0xff
 800d12a:	711a      	strb	r2, [r3, #4]
  }
}
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd90      	pop	{r4, r7, pc}
 800d132:	bf00      	nop
 800d134:	08024138 	.word	0x08024138
 800d138:	0802431c 	.word	0x0802431c
 800d13c:	0802417c 	.word	0x0802417c
 800d140:	0800cafd 	.word	0x0800cafd

0800d144 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2200      	movs	r2, #0
 800d154:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d102      	bne.n	800d166 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f7ff ff85 	bl	800d070 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d166:	bf00      	nop
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
	...

0800d170 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	4603      	mov	r3, r0
 800d178:	6039      	str	r1, [r7, #0]
 800d17a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d17c:	2300      	movs	r3, #0
 800d17e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d180:	2007      	movs	r0, #7
 800d182:	f002 fda5 	bl	800fcd0 <memp_malloc>
 800d186:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <netconn_alloc+0x22>
    return NULL;
 800d18e:	2300      	movs	r3, #0
 800d190:	e052      	b.n	800d238 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	79fa      	ldrb	r2, [r7, #7]
 800d19c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1aa:	2b10      	cmp	r3, #16
 800d1ac:	d004      	beq.n	800d1b8 <netconn_alloc+0x48>
 800d1ae:	2b20      	cmp	r3, #32
 800d1b0:	d105      	bne.n	800d1be <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d1b2:	2306      	movs	r3, #6
 800d1b4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d1b6:	e00a      	b.n	800d1ce <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d1b8:	2306      	movs	r3, #6
 800d1ba:	617b      	str	r3, [r7, #20]
      break;
 800d1bc:	e007      	b.n	800d1ce <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d1be:	4b20      	ldr	r3, [pc, #128]	; (800d240 <netconn_alloc+0xd0>)
 800d1c0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d1c4:	491f      	ldr	r1, [pc, #124]	; (800d244 <netconn_alloc+0xd4>)
 800d1c6:	4820      	ldr	r0, [pc, #128]	; (800d248 <netconn_alloc+0xd8>)
 800d1c8:	f00d fe3c 	bl	801ae44 <printf>
      goto free_and_return;
 800d1cc:	e02f      	b.n	800d22e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3310      	adds	r3, #16
 800d1d2:	6979      	ldr	r1, [r7, #20]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f00d f879 	bl	801a2cc <sys_mbox_new>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d125      	bne.n	800d22c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	330c      	adds	r3, #12
 800d1e4:	2100      	movs	r1, #0
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f00d f937 	bl	801a45a <sys_sem_new>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d005      	beq.n	800d1fe <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	3310      	adds	r3, #16
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f00d f88a 	bl	801a310 <sys_mbox_free>
    goto free_and_return;
 800d1fc:	e017      	b.n	800d22e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3314      	adds	r3, #20
 800d202:	4618      	mov	r0, r3
 800d204:	f00d f91c 	bl	801a440 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2200      	movs	r2, #0
 800d20c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f04f 32ff 	mov.w	r2, #4294967295
 800d214:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	7cfa      	ldrb	r2, [r7, #19]
 800d226:	771a      	strb	r2, [r3, #28]
  return conn;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	e005      	b.n	800d238 <netconn_alloc+0xc8>
    goto free_and_return;
 800d22c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d22e:	68f9      	ldr	r1, [r7, #12]
 800d230:	2007      	movs	r0, #7
 800d232:	f002 fd9f 	bl	800fd74 <memp_free>
  return NULL;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3718      	adds	r7, #24
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	08024138 	.word	0x08024138
 800d244:	0802433c 	.word	0x0802433c
 800d248:	0802417c 	.word	0x0802417c

0800d24c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d006      	beq.n	800d26a <netconn_free+0x1e>
 800d25c:	4b1b      	ldr	r3, [pc, #108]	; (800d2cc <netconn_free+0x80>)
 800d25e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d262:	491b      	ldr	r1, [pc, #108]	; (800d2d0 <netconn_free+0x84>)
 800d264:	481b      	ldr	r0, [pc, #108]	; (800d2d4 <netconn_free+0x88>)
 800d266:	f00d fded 	bl	801ae44 <printf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3310      	adds	r3, #16
 800d26e:	4618      	mov	r0, r3
 800d270:	f00d f8d5 	bl	801a41e <sys_mbox_valid>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d006      	beq.n	800d288 <netconn_free+0x3c>
 800d27a:	4b14      	ldr	r3, [pc, #80]	; (800d2cc <netconn_free+0x80>)
 800d27c:	f240 3223 	movw	r2, #803	; 0x323
 800d280:	4915      	ldr	r1, [pc, #84]	; (800d2d8 <netconn_free+0x8c>)
 800d282:	4814      	ldr	r0, [pc, #80]	; (800d2d4 <netconn_free+0x88>)
 800d284:	f00d fdde 	bl	801ae44 <printf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	3314      	adds	r3, #20
 800d28c:	4618      	mov	r0, r3
 800d28e:	f00d f8c6 	bl	801a41e <sys_mbox_valid>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d006      	beq.n	800d2a6 <netconn_free+0x5a>
 800d298:	4b0c      	ldr	r3, [pc, #48]	; (800d2cc <netconn_free+0x80>)
 800d29a:	f240 3226 	movw	r2, #806	; 0x326
 800d29e:	490f      	ldr	r1, [pc, #60]	; (800d2dc <netconn_free+0x90>)
 800d2a0:	480c      	ldr	r0, [pc, #48]	; (800d2d4 <netconn_free+0x88>)
 800d2a2:	f00d fdcf 	bl	801ae44 <printf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	330c      	adds	r3, #12
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f00d f93b 	bl	801a526 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	330c      	adds	r3, #12
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f00d f954 	bl	801a562 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d2ba:	6879      	ldr	r1, [r7, #4]
 800d2bc:	2007      	movs	r0, #7
 800d2be:	f002 fd59 	bl	800fd74 <memp_free>
}
 800d2c2:	bf00      	nop
 800d2c4:	3708      	adds	r7, #8
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	08024138 	.word	0x08024138
 800d2d0:	08024364 	.word	0x08024364
 800d2d4:	0802417c 	.word	0x0802417c
 800d2d8:	08024394 	.word	0x08024394
 800d2dc:	080243d0 	.word	0x080243d0

0800d2e0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	3310      	adds	r3, #16
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f00d f896 	bl	801a41e <sys_mbox_valid>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d02f      	beq.n	800d358 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d2f8:	e018      	b.n	800d32c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d302:	2b10      	cmp	r3, #16
 800d304:	d10e      	bne.n	800d324 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	f107 020f 	add.w	r2, r7, #15
 800d30c:	4611      	mov	r1, r2
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff fbba 	bl	800ca88 <lwip_netconn_is_err_msg>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d108      	bne.n	800d32c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	4618      	mov	r0, r3
 800d31e:	f003 fb55 	bl	80109cc <pbuf_free>
 800d322:	e003      	b.n	800d32c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	4618      	mov	r0, r3
 800d328:	f000 fdb6 	bl	800de98 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	3310      	adds	r3, #16
 800d330:	f107 0210 	add.w	r2, r7, #16
 800d334:	4611      	mov	r1, r2
 800d336:	4618      	mov	r0, r3
 800d338:	f00d f855 	bl	801a3e6 <sys_arch_mbox_tryfetch>
 800d33c:	4603      	mov	r3, r0
 800d33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d342:	d1da      	bne.n	800d2fa <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	3310      	adds	r3, #16
 800d348:	4618      	mov	r0, r3
 800d34a:	f00c ffe1 	bl	801a310 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	3310      	adds	r3, #16
 800d352:	4618      	mov	r0, r3
 800d354:	f00d f874 	bl	801a440 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	3314      	adds	r3, #20
 800d35c:	4618      	mov	r0, r3
 800d35e:	f00d f85e 	bl	801a41e <sys_mbox_valid>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d034      	beq.n	800d3d2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d368:	e01d      	b.n	800d3a6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	f107 020e 	add.w	r2, r7, #14
 800d370:	4611      	mov	r1, r2
 800d372:	4618      	mov	r0, r3
 800d374:	f7ff fb88 	bl	800ca88 <lwip_netconn_is_err_msg>
 800d378:	4603      	mov	r3, r0
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d113      	bne.n	800d3a6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d382:	6978      	ldr	r0, [r7, #20]
 800d384:	f7ff ffac 	bl	800d2e0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d007      	beq.n	800d3a0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	4618      	mov	r0, r3
 800d396:	f004 f919 	bl	80115cc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2200      	movs	r2, #0
 800d39e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d3a0:	6978      	ldr	r0, [r7, #20]
 800d3a2:	f7ff ff53 	bl	800d24c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	3314      	adds	r3, #20
 800d3aa:	f107 0210 	add.w	r2, r7, #16
 800d3ae:	4611      	mov	r1, r2
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f00d f818 	bl	801a3e6 <sys_arch_mbox_tryfetch>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3bc:	d1d5      	bne.n	800d36a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	3314      	adds	r3, #20
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f00c ffa4 	bl	801a310 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	3314      	adds	r3, #20
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f00d f837 	bl	801a440 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d3d2:	bf00      	nop
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
	...

0800d3dc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b086      	sub	sp, #24
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d106      	bne.n	800d400 <lwip_netconn_do_close_internal+0x24>
 800d3f2:	4ba1      	ldr	r3, [pc, #644]	; (800d678 <lwip_netconn_do_close_internal+0x29c>)
 800d3f4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800d3f8:	49a0      	ldr	r1, [pc, #640]	; (800d67c <lwip_netconn_do_close_internal+0x2a0>)
 800d3fa:	48a1      	ldr	r0, [pc, #644]	; (800d680 <lwip_netconn_do_close_internal+0x2a4>)
 800d3fc:	f00d fd22 	bl	801ae44 <printf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d408:	2b10      	cmp	r3, #16
 800d40a:	d006      	beq.n	800d41a <lwip_netconn_do_close_internal+0x3e>
 800d40c:	4b9a      	ldr	r3, [pc, #616]	; (800d678 <lwip_netconn_do_close_internal+0x29c>)
 800d40e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800d412:	499c      	ldr	r1, [pc, #624]	; (800d684 <lwip_netconn_do_close_internal+0x2a8>)
 800d414:	489a      	ldr	r0, [pc, #616]	; (800d680 <lwip_netconn_do_close_internal+0x2a4>)
 800d416:	f00d fd15 	bl	801ae44 <printf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	785b      	ldrb	r3, [r3, #1]
 800d41e:	2b04      	cmp	r3, #4
 800d420:	d006      	beq.n	800d430 <lwip_netconn_do_close_internal+0x54>
 800d422:	4b95      	ldr	r3, [pc, #596]	; (800d678 <lwip_netconn_do_close_internal+0x29c>)
 800d424:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800d428:	4997      	ldr	r1, [pc, #604]	; (800d688 <lwip_netconn_do_close_internal+0x2ac>)
 800d42a:	4895      	ldr	r0, [pc, #596]	; (800d680 <lwip_netconn_do_close_internal+0x2a4>)
 800d42c:	f00d fd0a 	bl	801ae44 <printf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d106      	bne.n	800d446 <lwip_netconn_do_close_internal+0x6a>
 800d438:	4b8f      	ldr	r3, [pc, #572]	; (800d678 <lwip_netconn_do_close_internal+0x29c>)
 800d43a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800d43e:	4993      	ldr	r1, [pc, #588]	; (800d68c <lwip_netconn_do_close_internal+0x2b0>)
 800d440:	488f      	ldr	r0, [pc, #572]	; (800d680 <lwip_netconn_do_close_internal+0x2a4>)
 800d442:	f00d fcff 	bl	801ae44 <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6a1b      	ldr	r3, [r3, #32]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d106      	bne.n	800d45c <lwip_netconn_do_close_internal+0x80>
 800d44e:	4b8a      	ldr	r3, [pc, #552]	; (800d678 <lwip_netconn_do_close_internal+0x29c>)
 800d450:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d454:	498e      	ldr	r1, [pc, #568]	; (800d690 <lwip_netconn_do_close_internal+0x2b4>)
 800d456:	488a      	ldr	r0, [pc, #552]	; (800d680 <lwip_netconn_do_close_internal+0x2a4>)
 800d458:	f00d fcf4 	bl	801ae44 <printf>

  tpcb = conn->pcb.tcp;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a1b      	ldr	r3, [r3, #32]
 800d466:	7a1b      	ldrb	r3, [r3, #8]
 800d468:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d46a:	7bfb      	ldrb	r3, [r7, #15]
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d472:	7bfb      	ldrb	r3, [r7, #15]
 800d474:	f003 0302 	and.w	r3, r3, #2
 800d478:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d47a:	7bfb      	ldrb	r3, [r7, #15]
 800d47c:	2b03      	cmp	r3, #3
 800d47e:	d102      	bne.n	800d486 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800d480:	2301      	movs	r3, #1
 800d482:	75bb      	strb	r3, [r7, #22]
 800d484:	e01f      	b.n	800d4c6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d486:	7bbb      	ldrb	r3, [r7, #14]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00e      	beq.n	800d4aa <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d490:	2b05      	cmp	r3, #5
 800d492:	d007      	beq.n	800d4a4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d498:	2b06      	cmp	r3, #6
 800d49a:	d003      	beq.n	800d4a4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d4a0:	2b08      	cmp	r3, #8
 800d4a2:	d102      	bne.n	800d4aa <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	75bb      	strb	r3, [r7, #22]
 800d4a8:	e00d      	b.n	800d4c6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d4aa:	7b7b      	ldrb	r3, [r7, #13]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d008      	beq.n	800d4c2 <lwip_netconn_do_close_internal+0xe6>
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	8b5b      	ldrh	r3, [r3, #26]
 800d4b4:	f003 0310 	and.w	r3, r3, #16
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d002      	beq.n	800d4c2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	75bb      	strb	r3, [r7, #22]
 800d4c0:	e001      	b.n	800d4c6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800d4c6:	7dbb      	ldrb	r3, [r7, #22]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d003      	beq.n	800d4d4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	6938      	ldr	r0, [r7, #16]
 800d4d0:	f005 f93a 	bl	8012748 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	7d1b      	ldrb	r3, [r3, #20]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d104      	bne.n	800d4e6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800d4dc:	2100      	movs	r1, #0
 800d4de:	6938      	ldr	r0, [r7, #16]
 800d4e0:	f005 f9aa 	bl	8012838 <tcp_accept>
 800d4e4:	e01d      	b.n	800d522 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d4e6:	7bbb      	ldrb	r3, [r7, #14]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d007      	beq.n	800d4fc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800d4ec:	2100      	movs	r1, #0
 800d4ee:	6938      	ldr	r0, [r7, #16]
 800d4f0:	f005 f93c 	bl	801276c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	6938      	ldr	r0, [r7, #16]
 800d4f8:	f005 f99e 	bl	8012838 <tcp_accept>
    }
    if (shut_tx) {
 800d4fc:	7b7b      	ldrb	r3, [r7, #13]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d003      	beq.n	800d50a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d502:	2100      	movs	r1, #0
 800d504:	6938      	ldr	r0, [r7, #16]
 800d506:	f005 f953 	bl	80127b0 <tcp_sent>
    }
    if (shut_close) {
 800d50a:	7dbb      	ldrb	r3, [r7, #22]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d008      	beq.n	800d522 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d510:	2200      	movs	r2, #0
 800d512:	2100      	movs	r1, #0
 800d514:	6938      	ldr	r0, [r7, #16]
 800d516:	f005 f9a7 	bl	8012868 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d51a:	2100      	movs	r1, #0
 800d51c:	6938      	ldr	r0, [r7, #16]
 800d51e:	f005 f969 	bl	80127f4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d522:	7dbb      	ldrb	r3, [r7, #22]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d005      	beq.n	800d534 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d528:	6938      	ldr	r0, [r7, #16]
 800d52a:	f003 ff09 	bl	8011340 <tcp_close>
 800d52e:	4603      	mov	r3, r0
 800d530:	75fb      	strb	r3, [r7, #23]
 800d532:	e007      	b.n	800d544 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d534:	7bbb      	ldrb	r3, [r7, #14]
 800d536:	7b7a      	ldrb	r2, [r7, #13]
 800d538:	4619      	mov	r1, r3
 800d53a:	6938      	ldr	r0, [r7, #16]
 800d53c:	f003 ff2c 	bl	8011398 <tcp_shutdown>
 800d540:	4603      	mov	r3, r0
 800d542:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d544:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d102      	bne.n	800d552 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d54c:	2301      	movs	r3, #1
 800d54e:	757b      	strb	r3, [r7, #21]
 800d550:	e016      	b.n	800d580 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d552:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d55a:	d10f      	bne.n	800d57c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	7a5b      	ldrb	r3, [r3, #9]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d10c      	bne.n	800d580 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d566:	2301      	movs	r3, #1
 800d568:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d56a:	7dbb      	ldrb	r3, [r7, #22]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d007      	beq.n	800d580 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d570:	6938      	ldr	r0, [r7, #16]
 800d572:	f004 f82b 	bl	80115cc <tcp_abort>
          err = ERR_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	75fb      	strb	r3, [r7, #23]
 800d57a:	e001      	b.n	800d580 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d57c:	2301      	movs	r3, #1
 800d57e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d580:	7d7b      	ldrb	r3, [r7, #21]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d044      	beq.n	800d610 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6a1b      	ldr	r3, [r3, #32]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	330c      	adds	r3, #12
 800d58e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6a1b      	ldr	r3, [r3, #32]
 800d594:	7dfa      	ldrb	r2, [r7, #23]
 800d596:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d5a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d129      	bne.n	800d600 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800d5ac:	7dbb      	ldrb	r3, [r7, #22]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00c      	beq.n	800d5cc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d005      	beq.n	800d5cc <lwip_netconn_do_close_internal+0x1f0>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	2104      	movs	r1, #4
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	4798      	blx	r3
      }
      if (shut_rx) {
 800d5cc:	7bbb      	ldrb	r3, [r7, #14]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d009      	beq.n	800d5e6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d005      	beq.n	800d5e6 <lwip_netconn_do_close_internal+0x20a>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5de:	2200      	movs	r2, #0
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	4798      	blx	r3
      }
      if (shut_tx) {
 800d5e6:	7b7b      	ldrb	r3, [r7, #13]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d009      	beq.n	800d600 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d005      	beq.n	800d600 <lwip_netconn_do_close_internal+0x224>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2102      	movs	r1, #2
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d600:	78fb      	ldrb	r3, [r7, #3]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d002      	beq.n	800d60c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d606:	68b8      	ldr	r0, [r7, #8]
 800d608:	f00c ff80 	bl	801a50c <sys_sem_signal>
    }
    return ERR_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	e02e      	b.n	800d66e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800d610:	7d7b      	ldrb	r3, [r7, #21]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d11e      	bne.n	800d654 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	7d1b      	ldrb	r3, [r3, #20]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d106      	bne.n	800d62c <lwip_netconn_do_close_internal+0x250>
 800d61e:	4b16      	ldr	r3, [pc, #88]	; (800d678 <lwip_netconn_do_close_internal+0x29c>)
 800d620:	f240 4241 	movw	r2, #1089	; 0x441
 800d624:	491b      	ldr	r1, [pc, #108]	; (800d694 <lwip_netconn_do_close_internal+0x2b8>)
 800d626:	4816      	ldr	r0, [pc, #88]	; (800d680 <lwip_netconn_do_close_internal+0x2a4>)
 800d628:	f00d fc0c 	bl	801ae44 <printf>
    if (shut_tx) {
 800d62c:	7b7b      	ldrb	r3, [r7, #13]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d003      	beq.n	800d63a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800d632:	4919      	ldr	r1, [pc, #100]	; (800d698 <lwip_netconn_do_close_internal+0x2bc>)
 800d634:	6938      	ldr	r0, [r7, #16]
 800d636:	f005 f8bb 	bl	80127b0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d63a:	2201      	movs	r2, #1
 800d63c:	4917      	ldr	r1, [pc, #92]	; (800d69c <lwip_netconn_do_close_internal+0x2c0>)
 800d63e:	6938      	ldr	r0, [r7, #16]
 800d640:	f005 f912 	bl	8012868 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d644:	4916      	ldr	r1, [pc, #88]	; (800d6a0 <lwip_netconn_do_close_internal+0x2c4>)
 800d646:	6938      	ldr	r0, [r7, #16]
 800d648:	f005 f8d4 	bl	80127f4 <tcp_err>
    tcp_arg(tpcb, conn);
 800d64c:	6879      	ldr	r1, [r7, #4]
 800d64e:	6938      	ldr	r0, [r7, #16]
 800d650:	f005 f87a 	bl	8012748 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d106      	bne.n	800d66a <lwip_netconn_do_close_internal+0x28e>
 800d65c:	4b06      	ldr	r3, [pc, #24]	; (800d678 <lwip_netconn_do_close_internal+0x29c>)
 800d65e:	f240 424d 	movw	r2, #1101	; 0x44d
 800d662:	4910      	ldr	r1, [pc, #64]	; (800d6a4 <lwip_netconn_do_close_internal+0x2c8>)
 800d664:	4806      	ldr	r0, [pc, #24]	; (800d680 <lwip_netconn_do_close_internal+0x2a4>)
 800d666:	f00d fbed 	bl	801ae44 <printf>
  return err;
 800d66a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3718      	adds	r7, #24
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	08024138 	.word	0x08024138
 800d67c:	0802440c 	.word	0x0802440c
 800d680:	0802417c 	.word	0x0802417c
 800d684:	0802441c 	.word	0x0802441c
 800d688:	0802443c 	.word	0x0802443c
 800d68c:	08024460 	.word	0x08024460
 800d690:	080242a0 	.word	0x080242a0
 800d694:	08024474 	.word	0x08024474
 800d698:	0800cdcd 	.word	0x0800cdcd
 800d69c:	0800cd05 	.word	0x0800cd05
 800d6a0:	0800ce75 	.word	0x0800ce75
 800d6a4:	08024498 	.word	0x08024498

0800d6a8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	785b      	ldrb	r3, [r3, #1]
 800d6ba:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d6bc:	7afb      	ldrb	r3, [r7, #11]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00d      	beq.n	800d6de <lwip_netconn_do_delconn+0x36>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6cc:	2b10      	cmp	r3, #16
 800d6ce:	d006      	beq.n	800d6de <lwip_netconn_do_delconn+0x36>
 800d6d0:	4b60      	ldr	r3, [pc, #384]	; (800d854 <lwip_netconn_do_delconn+0x1ac>)
 800d6d2:	f240 425e 	movw	r2, #1118	; 0x45e
 800d6d6:	4960      	ldr	r1, [pc, #384]	; (800d858 <lwip_netconn_do_delconn+0x1b0>)
 800d6d8:	4860      	ldr	r0, [pc, #384]	; (800d85c <lwip_netconn_do_delconn+0x1b4>)
 800d6da:	f00d fbb3 	bl	801ae44 <printf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800d6de:	7afb      	ldrb	r3, [r7, #11]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d005      	beq.n	800d6f0 <lwip_netconn_do_delconn+0x48>
 800d6e4:	7afb      	ldrb	r3, [r7, #11]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d002      	beq.n	800d6f0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800d6ea:	7afb      	ldrb	r3, [r7, #11]
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d109      	bne.n	800d704 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800d6f0:	7afb      	ldrb	r3, [r7, #11]
 800d6f2:	2b03      	cmp	r3, #3
 800d6f4:	d10a      	bne.n	800d70c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	7f1b      	ldrb	r3, [r3, #28]
 800d6fc:	f003 0304 	and.w	r3, r3, #4
 800d700:	2b00      	cmp	r3, #0
 800d702:	d103      	bne.n	800d70c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	22fb      	movs	r2, #251	; 0xfb
 800d708:	711a      	strb	r2, [r3, #4]
 800d70a:	e097      	b.n	800d83c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800d70c:	7afb      	ldrb	r3, [r7, #11]
 800d70e:	2b03      	cmp	r3, #3
 800d710:	d10d      	bne.n	800d72e <lwip_netconn_do_delconn+0x86>
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	7f1b      	ldrb	r3, [r3, #28]
 800d718:	f003 0304 	and.w	r3, r3, #4
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d106      	bne.n	800d72e <lwip_netconn_do_delconn+0x86>
 800d720:	4b4c      	ldr	r3, [pc, #304]	; (800d854 <lwip_netconn_do_delconn+0x1ac>)
 800d722:	f240 427a 	movw	r2, #1146	; 0x47a
 800d726:	494e      	ldr	r1, [pc, #312]	; (800d860 <lwip_netconn_do_delconn+0x1b8>)
 800d728:	484c      	ldr	r0, [pc, #304]	; (800d85c <lwip_netconn_do_delconn+0x1b4>)
 800d72a:	f00d fb8b 	bl	801ae44 <printf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2200      	movs	r2, #0
 800d732:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7ff fdd1 	bl	800d2e0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d05f      	beq.n	800d808 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d752:	2b10      	cmp	r3, #16
 800d754:	d00d      	beq.n	800d772 <lwip_netconn_do_delconn+0xca>
 800d756:	2b20      	cmp	r3, #32
 800d758:	d151      	bne.n	800d7fe <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f00a fa58 	bl	8017c20 <udp_remove>
          break;
 800d770:	e046      	b.n	800d800 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	6a1b      	ldr	r3, [r3, #32]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d006      	beq.n	800d78a <lwip_netconn_do_delconn+0xe2>
 800d77c:	4b35      	ldr	r3, [pc, #212]	; (800d854 <lwip_netconn_do_delconn+0x1ac>)
 800d77e:	f240 4294 	movw	r2, #1172	; 0x494
 800d782:	4938      	ldr	r1, [pc, #224]	; (800d864 <lwip_netconn_do_delconn+0x1bc>)
 800d784:	4835      	ldr	r0, [pc, #212]	; (800d85c <lwip_netconn_do_delconn+0x1b4>)
 800d786:	f00d fb5d 	bl	801ae44 <printf>
          msg->conn->state = NETCONN_CLOSE;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2204      	movs	r2, #4
 800d790:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2203      	movs	r2, #3
 800d796:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7ff fe18 	bl	800d3dc <lwip_netconn_do_close_internal>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d04b      	beq.n	800d84a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	785b      	ldrb	r3, [r3, #1]
 800d7b8:	2b04      	cmp	r3, #4
 800d7ba:	d006      	beq.n	800d7ca <lwip_netconn_do_delconn+0x122>
 800d7bc:	4b25      	ldr	r3, [pc, #148]	; (800d854 <lwip_netconn_do_delconn+0x1ac>)
 800d7be:	f240 429a 	movw	r2, #1178	; 0x49a
 800d7c2:	4929      	ldr	r1, [pc, #164]	; (800d868 <lwip_netconn_do_delconn+0x1c0>)
 800d7c4:	4825      	ldr	r0, [pc, #148]	; (800d85c <lwip_netconn_do_delconn+0x1b4>)
 800d7c6:	f00d fb3d 	bl	801ae44 <printf>
            UNLOCK_TCPIP_CORE();
 800d7ca:	4828      	ldr	r0, [pc, #160]	; (800d86c <lwip_netconn_do_delconn+0x1c4>)
 800d7cc:	f00c ff0f 	bl	801a5ee <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	330c      	adds	r3, #12
 800d7d6:	2100      	movs	r1, #0
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f00c fe66 	bl	801a4aa <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800d7de:	4823      	ldr	r0, [pc, #140]	; (800d86c <lwip_netconn_do_delconn+0x1c4>)
 800d7e0:	f00c fef6 	bl	801a5d0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	785b      	ldrb	r3, [r3, #1]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d02d      	beq.n	800d84a <lwip_netconn_do_delconn+0x1a2>
 800d7ee:	4b19      	ldr	r3, [pc, #100]	; (800d854 <lwip_netconn_do_delconn+0x1ac>)
 800d7f0:	f240 429e 	movw	r2, #1182	; 0x49e
 800d7f4:	491c      	ldr	r1, [pc, #112]	; (800d868 <lwip_netconn_do_delconn+0x1c0>)
 800d7f6:	4819      	ldr	r0, [pc, #100]	; (800d85c <lwip_netconn_do_delconn+0x1b4>)
 800d7f8:	f00d fb24 	bl	801ae44 <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800d7fc:	e025      	b.n	800d84a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800d7fe:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2200      	movs	r2, #0
 800d806:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d007      	beq.n	800d822 <lwip_netconn_do_delconn+0x17a>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	6810      	ldr	r0, [r2, #0]
 800d81c:	2200      	movs	r2, #0
 800d81e:	2100      	movs	r1, #0
 800d820:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d007      	beq.n	800d83c <lwip_netconn_do_delconn+0x194>
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	6810      	ldr	r0, [r2, #0]
 800d836:	2200      	movs	r2, #0
 800d838:	2102      	movs	r1, #2
 800d83a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	330c      	adds	r3, #12
 800d842:	4618      	mov	r0, r3
 800d844:	f00c fe7c 	bl	801a540 <sys_sem_valid>
 800d848:	e000      	b.n	800d84c <lwip_netconn_do_delconn+0x1a4>
          return;
 800d84a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	08024138 	.word	0x08024138
 800d858:	080244a8 	.word	0x080244a8
 800d85c:	0802417c 	.word	0x0802417c
 800d860:	080244bc 	.word	0x080244bc
 800d864:	080244dc 	.word	0x080244dc
 800d868:	080244f8 	.word	0x080244f8
 800d86c:	200086fc 	.word	0x200086fc

0800d870 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d025      	beq.n	800d8d2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d890:	2b10      	cmp	r3, #16
 800d892:	d00e      	beq.n	800d8b2 <lwip_netconn_do_bind+0x42>
 800d894:	2b20      	cmp	r3, #32
 800d896:	d119      	bne.n	800d8cc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6858      	ldr	r0, [r3, #4]
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	6899      	ldr	r1, [r3, #8]
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	899b      	ldrh	r3, [r3, #12]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	f00a f912 	bl	8017ad0 <udp_bind>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	73fb      	strb	r3, [r7, #15]
        break;
 800d8b0:	e011      	b.n	800d8d6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6858      	ldr	r0, [r3, #4]
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	6899      	ldr	r1, [r3, #8]
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	899b      	ldrh	r3, [r3, #12]
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	f003 fe8f 	bl	80115e4 <tcp_bind>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	73fb      	strb	r3, [r7, #15]
        break;
 800d8ca:	e004      	b.n	800d8d6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800d8cc:	23fa      	movs	r3, #250	; 0xfa
 800d8ce:	73fb      	strb	r3, [r7, #15]
        break;
 800d8d0:	e001      	b.n	800d8d6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800d8d2:	23fa      	movs	r3, #250	; 0xfa
 800d8d4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	7bfa      	ldrb	r2, [r7, #15]
 800d8da:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d8dc:	bf00      	nop
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7ff f875 	bl	800c9e4 <netconn_err>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d134      	bne.n	800d970 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d02d      	beq.n	800d96c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d91a:	2b20      	cmp	r3, #32
 800d91c:	d123      	bne.n	800d966 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10c      	bne.n	800d942 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4619      	mov	r1, r3
 800d936:	4610      	mov	r0, r2
 800d938:	f009 fee0 	bl	80176fc <udp_send>
 800d93c:	4603      	mov	r3, r0
 800d93e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800d940:	e016      	b.n	800d970 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	6858      	ldr	r0, [r3, #4]
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	6819      	ldr	r1, [r3, #0]
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	f103 0208 	add.w	r2, r3, #8
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	899b      	ldrh	r3, [r3, #12]
 800d95c:	f009 ff02 	bl	8017764 <udp_sendto>
 800d960:	4603      	mov	r3, r0
 800d962:	73fb      	strb	r3, [r7, #15]
          break;
 800d964:	e004      	b.n	800d970 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800d966:	23f5      	movs	r3, #245	; 0xf5
 800d968:	73fb      	strb	r3, [r7, #15]
          break;
 800d96a:	e001      	b.n	800d970 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800d96c:	23f5      	movs	r3, #245	; 0xf5
 800d96e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	7bfa      	ldrb	r2, [r7, #15]
 800d974:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d976:	bf00      	nop
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800d97e:	b580      	push	{r7, lr}
 800d980:	b086      	sub	sp, #24
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	2200      	movs	r2, #0
 800d98e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d022      	beq.n	800d9e0 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9a4:	2b10      	cmp	r3, #16
 800d9a6:	d11b      	bne.n	800d9e0 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9b4:	d202      	bcs.n	800d9bc <lwip_netconn_do_recv+0x3e>
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	e001      	b.n	800d9c0 <lwip_netconn_do_recv+0x42>
 800d9bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9c0:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	89fa      	ldrh	r2, [r7, #14]
 800d9ca:	4611      	mov	r1, r2
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f003 ffd7 	bl	8011980 <tcp_recved>
        remaining -= recved;
 800d9d2:	89fb      	ldrh	r3, [r7, #14]
 800d9d4:	697a      	ldr	r2, [r7, #20]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1e6      	bne.n	800d9ae <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d9e0:	bf00      	nop
 800d9e2:	3718      	adds	r7, #24
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b088      	sub	sp, #32
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d106      	bne.n	800da0c <lwip_netconn_do_writemore+0x24>
 800d9fe:	4b96      	ldr	r3, [pc, #600]	; (800dc58 <lwip_netconn_do_writemore+0x270>)
 800da00:	f240 6273 	movw	r2, #1651	; 0x673
 800da04:	4995      	ldr	r1, [pc, #596]	; (800dc5c <lwip_netconn_do_writemore+0x274>)
 800da06:	4896      	ldr	r0, [pc, #600]	; (800dc60 <lwip_netconn_do_writemore+0x278>)
 800da08:	f00d fa1c 	bl	801ae44 <printf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	785b      	ldrb	r3, [r3, #1]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d006      	beq.n	800da22 <lwip_netconn_do_writemore+0x3a>
 800da14:	4b90      	ldr	r3, [pc, #576]	; (800dc58 <lwip_netconn_do_writemore+0x270>)
 800da16:	f240 6274 	movw	r2, #1652	; 0x674
 800da1a:	4992      	ldr	r1, [pc, #584]	; (800dc64 <lwip_netconn_do_writemore+0x27c>)
 800da1c:	4890      	ldr	r0, [pc, #576]	; (800dc60 <lwip_netconn_do_writemore+0x278>)
 800da1e:	f00d fa11 	bl	801ae44 <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a1b      	ldr	r3, [r3, #32]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d106      	bne.n	800da38 <lwip_netconn_do_writemore+0x50>
 800da2a:	4b8b      	ldr	r3, [pc, #556]	; (800dc58 <lwip_netconn_do_writemore+0x270>)
 800da2c:	f240 6275 	movw	r2, #1653	; 0x675
 800da30:	498d      	ldr	r1, [pc, #564]	; (800dc68 <lwip_netconn_do_writemore+0x280>)
 800da32:	488b      	ldr	r0, [pc, #556]	; (800dc60 <lwip_netconn_do_writemore+0x278>)
 800da34:	f00d fa06 	bl	801ae44 <printf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d106      	bne.n	800da4e <lwip_netconn_do_writemore+0x66>
 800da40:	4b85      	ldr	r3, [pc, #532]	; (800dc58 <lwip_netconn_do_writemore+0x270>)
 800da42:	f240 6276 	movw	r2, #1654	; 0x676
 800da46:	4989      	ldr	r1, [pc, #548]	; (800dc6c <lwip_netconn_do_writemore+0x284>)
 800da48:	4885      	ldr	r0, [pc, #532]	; (800dc60 <lwip_netconn_do_writemore+0x278>)
 800da4a:	f00d f9fb 	bl	801ae44 <printf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	699a      	ldr	r2, [r3, #24]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6a1b      	ldr	r3, [r3, #32]
 800da58:	695b      	ldr	r3, [r3, #20]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d306      	bcc.n	800da6c <lwip_netconn_do_writemore+0x84>
 800da5e:	4b7e      	ldr	r3, [pc, #504]	; (800dc58 <lwip_netconn_do_writemore+0x270>)
 800da60:	f240 6277 	movw	r2, #1655	; 0x677
 800da64:	4982      	ldr	r1, [pc, #520]	; (800dc70 <lwip_netconn_do_writemore+0x288>)
 800da66:	487e      	ldr	r0, [pc, #504]	; (800dc60 <lwip_netconn_do_writemore+0x278>)
 800da68:	f00d f9ec 	bl	801ae44 <printf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6a1b      	ldr	r3, [r3, #32]
 800da70:	899b      	ldrh	r3, [r3, #12]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d106      	bne.n	800da84 <lwip_netconn_do_writemore+0x9c>
 800da76:	4b78      	ldr	r3, [pc, #480]	; (800dc58 <lwip_netconn_do_writemore+0x270>)
 800da78:	f240 6279 	movw	r2, #1657	; 0x679
 800da7c:	497d      	ldr	r1, [pc, #500]	; (800dc74 <lwip_netconn_do_writemore+0x28c>)
 800da7e:	4878      	ldr	r0, [pc, #480]	; (800dc60 <lwip_netconn_do_writemore+0x278>)
 800da80:	f00d f9e0 	bl	801ae44 <printf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6a1b      	ldr	r3, [r3, #32]
 800da88:	7f1b      	ldrb	r3, [r3, #28]
 800da8a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	7f1b      	ldrb	r3, [r3, #28]
 800da90:	f003 0302 	and.w	r3, r3, #2
 800da94:	2b00      	cmp	r3, #0
 800da96:	d104      	bne.n	800daa2 <lwip_netconn_do_writemore+0xba>
 800da98:	7ebb      	ldrb	r3, [r7, #26]
 800da9a:	f003 0304 	and.w	r3, r3, #4
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d001      	beq.n	800daa6 <lwip_netconn_do_writemore+0xbe>
 800daa2:	2301      	movs	r3, #1
 800daa4:	e000      	b.n	800daa8 <lwip_netconn_do_writemore+0xc0>
 800daa6:	2300      	movs	r3, #0
 800daa8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a1b      	ldr	r3, [r3, #32]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	691b      	ldr	r3, [r3, #16]
 800dab8:	4413      	add	r3, r2
 800daba:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a1b      	ldr	r3, [r3, #32]
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	685a      	ldr	r2, [r3, #4]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a1b      	ldr	r3, [r3, #32]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dad4:	d307      	bcc.n	800dae6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800dad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dada:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800dadc:	7ebb      	ldrb	r3, [r7, #26]
 800dade:	f043 0302 	orr.w	r3, r3, #2
 800dae2:	76bb      	strb	r3, [r7, #26]
 800dae4:	e001      	b.n	800daea <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800daf2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800daf4:	89fa      	ldrh	r2, [r7, #14]
 800daf6:	8bbb      	ldrh	r3, [r7, #28]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d216      	bcs.n	800db2a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800dafc:	89fb      	ldrh	r3, [r7, #14]
 800dafe:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800db00:	7e3b      	ldrb	r3, [r7, #24]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00d      	beq.n	800db22 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800db06:	8bbb      	ldrh	r3, [r7, #28]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10e      	bne.n	800db2a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6a1b      	ldr	r3, [r3, #32]
 800db10:	699b      	ldr	r3, [r3, #24]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d102      	bne.n	800db1c <lwip_netconn_do_writemore+0x134>
 800db16:	f06f 0306 	mvn.w	r3, #6
 800db1a:	e000      	b.n	800db1e <lwip_netconn_do_writemore+0x136>
 800db1c:	2300      	movs	r3, #0
 800db1e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800db20:	e07d      	b.n	800dc1e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800db22:	7ebb      	ldrb	r3, [r7, #26]
 800db24:	f043 0302 	orr.w	r3, r3, #2
 800db28:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6a1b      	ldr	r3, [r3, #32]
 800db2e:	691a      	ldr	r2, [r3, #16]
 800db30:	8bbb      	ldrh	r3, [r7, #28]
 800db32:	441a      	add	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6a1b      	ldr	r3, [r3, #32]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d906      	bls.n	800db4e <lwip_netconn_do_writemore+0x166>
 800db40:	4b45      	ldr	r3, [pc, #276]	; (800dc58 <lwip_netconn_do_writemore+0x270>)
 800db42:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800db46:	494c      	ldr	r1, [pc, #304]	; (800dc78 <lwip_netconn_do_writemore+0x290>)
 800db48:	4845      	ldr	r0, [pc, #276]	; (800dc60 <lwip_netconn_do_writemore+0x278>)
 800db4a:	f00d f97b 	bl	801ae44 <printf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800db4e:	8bbb      	ldrh	r3, [r7, #28]
 800db50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db54:	4293      	cmp	r3, r2
 800db56:	d103      	bne.n	800db60 <lwip_netconn_do_writemore+0x178>
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db5e:	d209      	bcs.n	800db74 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800db64:	8bba      	ldrh	r2, [r7, #28]
 800db66:	429a      	cmp	r2, r3
 800db68:	d10b      	bne.n	800db82 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a1b      	ldr	r3, [r3, #32]
 800db6e:	899b      	ldrh	r3, [r3, #12]
 800db70:	2b01      	cmp	r3, #1
 800db72:	d906      	bls.n	800db82 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800db74:	2301      	movs	r3, #1
 800db76:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800db78:	7ebb      	ldrb	r3, [r7, #26]
 800db7a:	f043 0302 	orr.w	r3, r3, #2
 800db7e:	76bb      	strb	r3, [r7, #26]
 800db80:	e001      	b.n	800db86 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6858      	ldr	r0, [r3, #4]
 800db8a:	7ebb      	ldrb	r3, [r7, #26]
 800db8c:	8bba      	ldrh	r2, [r7, #28]
 800db8e:	6979      	ldr	r1, [r7, #20]
 800db90:	f007 fd18 	bl	80155c4 <tcp_write>
 800db94:	4603      	mov	r3, r0
 800db96:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800db98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d12c      	bne.n	800dbfa <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6a1b      	ldr	r3, [r3, #32]
 800dba4:	6999      	ldr	r1, [r3, #24]
 800dba6:	8bba      	ldrh	r2, [r7, #28]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6a1b      	ldr	r3, [r3, #32]
 800dbac:	440a      	add	r2, r1
 800dbae:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a1b      	ldr	r3, [r3, #32]
 800dbb4:	6919      	ldr	r1, [r3, #16]
 800dbb6:	8bba      	ldrh	r2, [r7, #28]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a1b      	ldr	r3, [r3, #32]
 800dbbc:	440a      	add	r2, r1
 800dbbe:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a1b      	ldr	r3, [r3, #32]
 800dbc4:	691a      	ldr	r2, [r3, #16]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6a1b      	ldr	r3, [r3, #32]
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d113      	bne.n	800dbfa <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a1b      	ldr	r3, [r3, #32]
 800dbd6:	899a      	ldrh	r2, [r3, #12]
 800dbd8:	3a01      	subs	r2, #1
 800dbda:	b292      	uxth	r2, r2
 800dbdc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6a1b      	ldr	r3, [r3, #32]
 800dbe2:	899b      	ldrh	r3, [r3, #12]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d008      	beq.n	800dbfa <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a1b      	ldr	r3, [r3, #32]
 800dbec:	689a      	ldr	r2, [r3, #8]
 800dbee:	3208      	adds	r2, #8
 800dbf0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6a1b      	ldr	r3, [r3, #32]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800dbfa:	7e7b      	ldrb	r3, [r7, #25]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d004      	beq.n	800dc0a <lwip_netconn_do_writemore+0x222>
 800dc00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f43f af50 	beq.w	800daaa <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800dc0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d004      	beq.n	800dc1c <lwip_netconn_do_writemore+0x234>
 800dc12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1a:	d146      	bne.n	800dcaa <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800dc1c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800dc1e:	7e3b      	ldrb	r3, [r7, #24]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d02b      	beq.n	800dc7c <lwip_netconn_do_writemore+0x294>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a1b      	ldr	r3, [r3, #32]
 800dc28:	699a      	ldr	r2, [r3, #24]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a1b      	ldr	r3, [r3, #32]
 800dc2e:	695b      	ldr	r3, [r3, #20]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d223      	bcs.n	800dc7c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d005      	beq.n	800dc48 <lwip_netconn_do_writemore+0x260>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc40:	2200      	movs	r2, #0
 800dc42:	2103      	movs	r1, #3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	7f1b      	ldrb	r3, [r3, #28]
 800dc4c:	f043 0310 	orr.w	r3, r3, #16
 800dc50:	b2da      	uxtb	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	771a      	strb	r2, [r3, #28]
 800dc56:	e028      	b.n	800dcaa <lwip_netconn_do_writemore+0x2c2>
 800dc58:	08024138 	.word	0x08024138
 800dc5c:	08024290 	.word	0x08024290
 800dc60:	0802417c 	.word	0x0802417c
 800dc64:	08024598 	.word	0x08024598
 800dc68:	080242a0 	.word	0x080242a0
 800dc6c:	080245b8 	.word	0x080245b8
 800dc70:	080245d0 	.word	0x080245d0
 800dc74:	08024610 	.word	0x08024610
 800dc78:	08024638 	.word	0x08024638
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dc84:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dc88:	d305      	bcc.n	800dc96 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dc92:	2b04      	cmp	r3, #4
 800dc94:	d909      	bls.n	800dcaa <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d005      	beq.n	800dcaa <lwip_netconn_do_writemore+0x2c2>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca2:	2200      	movs	r2, #0
 800dca4:	2103      	movs	r1, #3
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800dcaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d11d      	bne.n	800dcee <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a1b      	ldr	r3, [r3, #32]
 800dcb6:	699a      	ldr	r2, [r3, #24]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6a1b      	ldr	r3, [r3, #32]
 800dcbc:	695b      	ldr	r3, [r3, #20]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d002      	beq.n	800dcc8 <lwip_netconn_do_writemore+0x2e0>
 800dcc2:	7e3b      	ldrb	r3, [r7, #24]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d001      	beq.n	800dccc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f008 fa61 	bl	8016198 <tcp_output>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800dcda:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800dcde:	f113 0f04 	cmn.w	r3, #4
 800dce2:	d12c      	bne.n	800dd3e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800dce4:	7b3b      	ldrb	r3, [r7, #12]
 800dce6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800dce8:	2301      	movs	r3, #1
 800dcea:	76fb      	strb	r3, [r7, #27]
 800dcec:	e027      	b.n	800dd3e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800dcee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf6:	d120      	bne.n	800dd3a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f008 fa4b 	bl	8016198 <tcp_output>
 800dd02:	4603      	mov	r3, r0
 800dd04:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800dd06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800dd0a:	f113 0f04 	cmn.w	r3, #4
 800dd0e:	d104      	bne.n	800dd1a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800dd10:	7b7b      	ldrb	r3, [r7, #13]
 800dd12:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800dd14:	2301      	movs	r3, #1
 800dd16:	76fb      	strb	r3, [r7, #27]
 800dd18:	e011      	b.n	800dd3e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800dd1a:	7e3b      	ldrb	r3, [r7, #24]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00e      	beq.n	800dd3e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a1b      	ldr	r3, [r3, #32]
 800dd24:	699b      	ldr	r3, [r3, #24]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d102      	bne.n	800dd30 <lwip_netconn_do_writemore+0x348>
 800dd2a:	f06f 0306 	mvn.w	r3, #6
 800dd2e:	e000      	b.n	800dd32 <lwip_netconn_do_writemore+0x34a>
 800dd30:	2300      	movs	r3, #0
 800dd32:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800dd34:	2301      	movs	r3, #1
 800dd36:	76fb      	strb	r3, [r7, #27]
 800dd38:	e001      	b.n	800dd3e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800dd3e:	7efb      	ldrb	r3, [r7, #27]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d015      	beq.n	800dd70 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a1b      	ldr	r3, [r3, #32]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	330c      	adds	r3, #12
 800dd4c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a1b      	ldr	r3, [r3, #32]
 800dd52:	7ffa      	ldrb	r2, [r7, #31]
 800dd54:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800dd62:	78fb      	ldrb	r3, [r7, #3]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d006      	beq.n	800dd76 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800dd68:	68b8      	ldr	r0, [r7, #8]
 800dd6a:	f00c fbcf 	bl	801a50c <sys_sem_signal>
 800dd6e:	e002      	b.n	800dd76 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800dd70:	f04f 33ff 	mov.w	r3, #4294967295
 800dd74:	e000      	b.n	800dd78 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3720      	adds	r7, #32
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	785b      	ldrb	r3, [r3, #1]
 800dd92:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d069      	beq.n	800de72 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800dda8:	2b10      	cmp	r3, #16
 800ddaa:	d162      	bne.n	800de72 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ddb0:	2b03      	cmp	r3, #3
 800ddb2:	d002      	beq.n	800ddba <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ddb4:	7afb      	ldrb	r3, [r7, #11]
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	d05b      	beq.n	800de72 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ddba:	7afb      	ldrb	r3, [r7, #11]
 800ddbc:	2b03      	cmp	r3, #3
 800ddbe:	d103      	bne.n	800ddc8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	22f5      	movs	r2, #245	; 0xf5
 800ddc4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ddc6:	e059      	b.n	800de7c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800ddc8:	7afb      	ldrb	r3, [r7, #11]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d103      	bne.n	800ddd6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	22fb      	movs	r2, #251	; 0xfb
 800ddd2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ddd4:	e052      	b.n	800de7c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	7a1b      	ldrb	r3, [r3, #8]
 800ddda:	f003 0301 	and.w	r3, r3, #1
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d004      	beq.n	800ddec <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7ff fa7a 	bl	800d2e0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	6a1b      	ldr	r3, [r3, #32]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d006      	beq.n	800de04 <lwip_netconn_do_close+0x84>
 800ddf6:	4b23      	ldr	r3, [pc, #140]	; (800de84 <lwip_netconn_do_close+0x104>)
 800ddf8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ddfc:	4922      	ldr	r1, [pc, #136]	; (800de88 <lwip_netconn_do_close+0x108>)
 800ddfe:	4823      	ldr	r0, [pc, #140]	; (800de8c <lwip_netconn_do_close+0x10c>)
 800de00:	f00d f820 	bl	801ae44 <printf>
      msg->conn->state = NETCONN_CLOSE;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2204      	movs	r2, #4
 800de0a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68fa      	ldr	r2, [r7, #12]
 800de12:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2100      	movs	r1, #0
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7ff fade 	bl	800d3dc <lwip_netconn_do_close_internal>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d029      	beq.n	800de7a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	785b      	ldrb	r3, [r3, #1]
 800de2c:	2b04      	cmp	r3, #4
 800de2e:	d006      	beq.n	800de3e <lwip_netconn_do_close+0xbe>
 800de30:	4b14      	ldr	r3, [pc, #80]	; (800de84 <lwip_netconn_do_close+0x104>)
 800de32:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800de36:	4916      	ldr	r1, [pc, #88]	; (800de90 <lwip_netconn_do_close+0x110>)
 800de38:	4814      	ldr	r0, [pc, #80]	; (800de8c <lwip_netconn_do_close+0x10c>)
 800de3a:	f00d f803 	bl	801ae44 <printf>
        UNLOCK_TCPIP_CORE();
 800de3e:	4815      	ldr	r0, [pc, #84]	; (800de94 <lwip_netconn_do_close+0x114>)
 800de40:	f00c fbd5 	bl	801a5ee <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	330c      	adds	r3, #12
 800de4a:	2100      	movs	r1, #0
 800de4c:	4618      	mov	r0, r3
 800de4e:	f00c fb2c 	bl	801a4aa <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800de52:	4810      	ldr	r0, [pc, #64]	; (800de94 <lwip_netconn_do_close+0x114>)
 800de54:	f00c fbbc 	bl	801a5d0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	785b      	ldrb	r3, [r3, #1]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00b      	beq.n	800de7a <lwip_netconn_do_close+0xfa>
 800de62:	4b08      	ldr	r3, [pc, #32]	; (800de84 <lwip_netconn_do_close+0x104>)
 800de64:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800de68:	4909      	ldr	r1, [pc, #36]	; (800de90 <lwip_netconn_do_close+0x110>)
 800de6a:	4808      	ldr	r0, [pc, #32]	; (800de8c <lwip_netconn_do_close+0x10c>)
 800de6c:	f00c ffea 	bl	801ae44 <printf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800de70:	e003      	b.n	800de7a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	22f5      	movs	r2, #245	; 0xf5
 800de76:	711a      	strb	r2, [r3, #4]
 800de78:	e000      	b.n	800de7c <lwip_netconn_do_close+0xfc>
      return;
 800de7a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	08024138 	.word	0x08024138
 800de88:	080244dc 	.word	0x080244dc
 800de8c:	0802417c 	.word	0x0802417c
 800de90:	080244f8 	.word	0x080244f8
 800de94:	200086fc 	.word	0x200086fc

0800de98 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d013      	beq.n	800dece <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d00b      	beq.n	800dec6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4618      	mov	r0, r3
 800deb4:	f002 fd8a 	bl	80109cc <pbuf_free>
      buf->p = buf->ptr = NULL;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2200      	movs	r2, #0
 800debc:	605a      	str	r2, [r3, #4]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	685a      	ldr	r2, [r3, #4]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800dec6:	6879      	ldr	r1, [r7, #4]
 800dec8:	2006      	movs	r0, #6
 800deca:	f001 ff53 	bl	800fd74 <memp_free>
  }
}
 800dece:	bf00      	nop
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
	...

0800ded8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d108      	bne.n	800defc <netbuf_data+0x24>
 800deea:	4b1b      	ldr	r3, [pc, #108]	; (800df58 <netbuf_data+0x80>)
 800deec:	22c6      	movs	r2, #198	; 0xc6
 800deee:	491b      	ldr	r1, [pc, #108]	; (800df5c <netbuf_data+0x84>)
 800def0:	481b      	ldr	r0, [pc, #108]	; (800df60 <netbuf_data+0x88>)
 800def2:	f00c ffa7 	bl	801ae44 <printf>
 800def6:	f06f 030f 	mvn.w	r3, #15
 800defa:	e029      	b.n	800df50 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d108      	bne.n	800df14 <netbuf_data+0x3c>
 800df02:	4b15      	ldr	r3, [pc, #84]	; (800df58 <netbuf_data+0x80>)
 800df04:	22c7      	movs	r2, #199	; 0xc7
 800df06:	4917      	ldr	r1, [pc, #92]	; (800df64 <netbuf_data+0x8c>)
 800df08:	4815      	ldr	r0, [pc, #84]	; (800df60 <netbuf_data+0x88>)
 800df0a:	f00c ff9b 	bl	801ae44 <printf>
 800df0e:	f06f 030f 	mvn.w	r3, #15
 800df12:	e01d      	b.n	800df50 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d108      	bne.n	800df2c <netbuf_data+0x54>
 800df1a:	4b0f      	ldr	r3, [pc, #60]	; (800df58 <netbuf_data+0x80>)
 800df1c:	22c8      	movs	r2, #200	; 0xc8
 800df1e:	4912      	ldr	r1, [pc, #72]	; (800df68 <netbuf_data+0x90>)
 800df20:	480f      	ldr	r0, [pc, #60]	; (800df60 <netbuf_data+0x88>)
 800df22:	f00c ff8f 	bl	801ae44 <printf>
 800df26:	f06f 030f 	mvn.w	r3, #15
 800df2a:	e011      	b.n	800df50 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d102      	bne.n	800df3a <netbuf_data+0x62>
    return ERR_BUF;
 800df34:	f06f 0301 	mvn.w	r3, #1
 800df38:	e00a      	b.n	800df50 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	685a      	ldr	r2, [r3, #4]
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	895a      	ldrh	r2, [r3, #10]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800df4e:	2300      	movs	r3, #0
}
 800df50:	4618      	mov	r0, r3
 800df52:	3710      	adds	r7, #16
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	08024690 	.word	0x08024690
 800df5c:	08024798 	.word	0x08024798
 800df60:	080246e0 	.word	0x080246e0
 800df64:	080247b4 	.word	0x080247b4
 800df68:	080247d4 	.word	0x080247d4

0800df6c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d108      	bne.n	800df8c <netbuf_next+0x20>
 800df7a:	4b11      	ldr	r3, [pc, #68]	; (800dfc0 <netbuf_next+0x54>)
 800df7c:	22e0      	movs	r2, #224	; 0xe0
 800df7e:	4911      	ldr	r1, [pc, #68]	; (800dfc4 <netbuf_next+0x58>)
 800df80:	4811      	ldr	r0, [pc, #68]	; (800dfc8 <netbuf_next+0x5c>)
 800df82:	f00c ff5f 	bl	801ae44 <printf>
 800df86:	f04f 33ff 	mov.w	r3, #4294967295
 800df8a:	e014      	b.n	800dfb6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d102      	bne.n	800df9c <netbuf_next+0x30>
    return -1;
 800df96:	f04f 33ff 	mov.w	r3, #4294967295
 800df9a:	e00c      	b.n	800dfb6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d101      	bne.n	800dfb4 <netbuf_next+0x48>
    return 1;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	e000      	b.n	800dfb6 <netbuf_next+0x4a>
  }
  return 0;
 800dfb4:	2300      	movs	r3, #0
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	08024690 	.word	0x08024690
 800dfc4:	080247f0 	.word	0x080247f0
 800dfc8:	080246e0 	.word	0x080246e0

0800dfcc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800dfd6:	f009 f997 	bl	8017308 <sys_timeouts_sleeptime>
 800dfda:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe2:	d10b      	bne.n	800dffc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800dfe4:	4813      	ldr	r0, [pc, #76]	; (800e034 <tcpip_timeouts_mbox_fetch+0x68>)
 800dfe6:	f00c fb02 	bl	801a5ee <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800dfea:	2200      	movs	r2, #0
 800dfec:	6839      	ldr	r1, [r7, #0]
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f00c f9ba 	bl	801a368 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800dff4:	480f      	ldr	r0, [pc, #60]	; (800e034 <tcpip_timeouts_mbox_fetch+0x68>)
 800dff6:	f00c faeb 	bl	801a5d0 <sys_mutex_lock>
    return;
 800dffa:	e018      	b.n	800e02e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d102      	bne.n	800e008 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e002:	f009 f947 	bl	8017294 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e006:	e7e6      	b.n	800dfd6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e008:	480a      	ldr	r0, [pc, #40]	; (800e034 <tcpip_timeouts_mbox_fetch+0x68>)
 800e00a:	f00c faf0 	bl	801a5ee <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	6839      	ldr	r1, [r7, #0]
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f00c f9a8 	bl	801a368 <sys_arch_mbox_fetch>
 800e018:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e01a:	4806      	ldr	r0, [pc, #24]	; (800e034 <tcpip_timeouts_mbox_fetch+0x68>)
 800e01c:	f00c fad8 	bl	801a5d0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e026:	d102      	bne.n	800e02e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e028:	f009 f934 	bl	8017294 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e02c:	e7d3      	b.n	800dfd6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e02e:	3710      	adds	r7, #16
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	200086fc 	.word	0x200086fc

0800e038 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e040:	4810      	ldr	r0, [pc, #64]	; (800e084 <tcpip_thread+0x4c>)
 800e042:	f00c fac5 	bl	801a5d0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e046:	4b10      	ldr	r3, [pc, #64]	; (800e088 <tcpip_thread+0x50>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d005      	beq.n	800e05a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e04e:	4b0e      	ldr	r3, [pc, #56]	; (800e088 <tcpip_thread+0x50>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a0e      	ldr	r2, [pc, #56]	; (800e08c <tcpip_thread+0x54>)
 800e054:	6812      	ldr	r2, [r2, #0]
 800e056:	4610      	mov	r0, r2
 800e058:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e05a:	f107 030c 	add.w	r3, r7, #12
 800e05e:	4619      	mov	r1, r3
 800e060:	480b      	ldr	r0, [pc, #44]	; (800e090 <tcpip_thread+0x58>)
 800e062:	f7ff ffb3 	bl	800dfcc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d106      	bne.n	800e07a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e06c:	4b09      	ldr	r3, [pc, #36]	; (800e094 <tcpip_thread+0x5c>)
 800e06e:	2291      	movs	r2, #145	; 0x91
 800e070:	4909      	ldr	r1, [pc, #36]	; (800e098 <tcpip_thread+0x60>)
 800e072:	480a      	ldr	r0, [pc, #40]	; (800e09c <tcpip_thread+0x64>)
 800e074:	f00c fee6 	bl	801ae44 <printf>
      continue;
 800e078:	e003      	b.n	800e082 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	4618      	mov	r0, r3
 800e07e:	f000 f80f 	bl	800e0a0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e082:	e7ea      	b.n	800e05a <tcpip_thread+0x22>
 800e084:	200086fc 	.word	0x200086fc
 800e088:	20004a64 	.word	0x20004a64
 800e08c:	20004a68 	.word	0x20004a68
 800e090:	20004a6c 	.word	0x20004a6c
 800e094:	08024828 	.word	0x08024828
 800e098:	08024858 	.word	0x08024858
 800e09c:	08024878 	.word	0x08024878

0800e0a0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	2b02      	cmp	r3, #2
 800e0ae:	d026      	beq.n	800e0fe <tcpip_thread_handle_msg+0x5e>
 800e0b0:	2b02      	cmp	r3, #2
 800e0b2:	dc2b      	bgt.n	800e10c <tcpip_thread_handle_msg+0x6c>
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <tcpip_thread_handle_msg+0x1e>
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d015      	beq.n	800e0e8 <tcpip_thread_handle_msg+0x48>
 800e0bc:	e026      	b.n	800e10c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	6850      	ldr	r0, [r2, #4]
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	6892      	ldr	r2, [r2, #8]
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	4798      	blx	r3
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d004      	beq.n	800e0de <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f002 fc77 	bl	80109cc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e0de:	6879      	ldr	r1, [r7, #4]
 800e0e0:	2009      	movs	r0, #9
 800e0e2:	f001 fe47 	bl	800fd74 <memp_free>
      break;
 800e0e6:	e018      	b.n	800e11a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	6892      	ldr	r2, [r2, #8]
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e0f4:	6879      	ldr	r1, [r7, #4]
 800e0f6:	2008      	movs	r0, #8
 800e0f8:	f001 fe3c 	bl	800fd74 <memp_free>
      break;
 800e0fc:	e00d      	b.n	800e11a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	6892      	ldr	r2, [r2, #8]
 800e106:	4610      	mov	r0, r2
 800e108:	4798      	blx	r3
      break;
 800e10a:	e006      	b.n	800e11a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e10c:	4b05      	ldr	r3, [pc, #20]	; (800e124 <tcpip_thread_handle_msg+0x84>)
 800e10e:	22cf      	movs	r2, #207	; 0xcf
 800e110:	4905      	ldr	r1, [pc, #20]	; (800e128 <tcpip_thread_handle_msg+0x88>)
 800e112:	4806      	ldr	r0, [pc, #24]	; (800e12c <tcpip_thread_handle_msg+0x8c>)
 800e114:	f00c fe96 	bl	801ae44 <printf>
      break;
 800e118:	bf00      	nop
  }
}
 800e11a:	bf00      	nop
 800e11c:	3708      	adds	r7, #8
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	08024828 	.word	0x08024828
 800e128:	08024858 	.word	0x08024858
 800e12c:	08024878 	.word	0x08024878

0800e130 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e13c:	481a      	ldr	r0, [pc, #104]	; (800e1a8 <tcpip_inpkt+0x78>)
 800e13e:	f00c f96e 	bl	801a41e <sys_mbox_valid>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d105      	bne.n	800e154 <tcpip_inpkt+0x24>
 800e148:	4b18      	ldr	r3, [pc, #96]	; (800e1ac <tcpip_inpkt+0x7c>)
 800e14a:	22fc      	movs	r2, #252	; 0xfc
 800e14c:	4918      	ldr	r1, [pc, #96]	; (800e1b0 <tcpip_inpkt+0x80>)
 800e14e:	4819      	ldr	r0, [pc, #100]	; (800e1b4 <tcpip_inpkt+0x84>)
 800e150:	f00c fe78 	bl	801ae44 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e154:	2009      	movs	r0, #9
 800e156:	f001 fdbb 	bl	800fcd0 <memp_malloc>
 800e15a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d102      	bne.n	800e168 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e162:	f04f 33ff 	mov.w	r3, #4294967295
 800e166:	e01a      	b.n	800e19e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	2200      	movs	r2, #0
 800e16c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e180:	6979      	ldr	r1, [r7, #20]
 800e182:	4809      	ldr	r0, [pc, #36]	; (800e1a8 <tcpip_inpkt+0x78>)
 800e184:	f00c f8d6 	bl	801a334 <sys_mbox_trypost>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d006      	beq.n	800e19c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e18e:	6979      	ldr	r1, [r7, #20]
 800e190:	2009      	movs	r0, #9
 800e192:	f001 fdef 	bl	800fd74 <memp_free>
    return ERR_MEM;
 800e196:	f04f 33ff 	mov.w	r3, #4294967295
 800e19a:	e000      	b.n	800e19e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e19c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3718      	adds	r7, #24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	20004a6c 	.word	0x20004a6c
 800e1ac:	08024828 	.word	0x08024828
 800e1b0:	080248a0 	.word	0x080248a0
 800e1b4:	08024878 	.word	0x08024878

0800e1b8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e1c8:	f003 0318 	and.w	r3, r3, #24
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d006      	beq.n	800e1de <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e1d0:	4a08      	ldr	r2, [pc, #32]	; (800e1f4 <tcpip_input+0x3c>)
 800e1d2:	6839      	ldr	r1, [r7, #0]
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7ff ffab 	bl	800e130 <tcpip_inpkt>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	e005      	b.n	800e1ea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e1de:	4a06      	ldr	r2, [pc, #24]	; (800e1f8 <tcpip_input+0x40>)
 800e1e0:	6839      	ldr	r1, [r7, #0]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7ff ffa4 	bl	800e130 <tcpip_inpkt>
 800e1e8:	4603      	mov	r3, r0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3708      	adds	r7, #8
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	0801a121 	.word	0x0801a121
 800e1f8:	08019035 	.word	0x08019035

0800e1fc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b084      	sub	sp, #16
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e206:	4819      	ldr	r0, [pc, #100]	; (800e26c <tcpip_try_callback+0x70>)
 800e208:	f00c f909 	bl	801a41e <sys_mbox_valid>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d106      	bne.n	800e220 <tcpip_try_callback+0x24>
 800e212:	4b17      	ldr	r3, [pc, #92]	; (800e270 <tcpip_try_callback+0x74>)
 800e214:	f240 125d 	movw	r2, #349	; 0x15d
 800e218:	4916      	ldr	r1, [pc, #88]	; (800e274 <tcpip_try_callback+0x78>)
 800e21a:	4817      	ldr	r0, [pc, #92]	; (800e278 <tcpip_try_callback+0x7c>)
 800e21c:	f00c fe12 	bl	801ae44 <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e220:	2008      	movs	r0, #8
 800e222:	f001 fd55 	bl	800fcd0 <memp_malloc>
 800e226:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d102      	bne.n	800e234 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e22e:	f04f 33ff 	mov.w	r3, #4294967295
 800e232:	e017      	b.n	800e264 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2201      	movs	r2, #1
 800e238:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	687a      	ldr	r2, [r7, #4]
 800e23e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	683a      	ldr	r2, [r7, #0]
 800e244:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e246:	68f9      	ldr	r1, [r7, #12]
 800e248:	4808      	ldr	r0, [pc, #32]	; (800e26c <tcpip_try_callback+0x70>)
 800e24a:	f00c f873 	bl	801a334 <sys_mbox_trypost>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	d006      	beq.n	800e262 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e254:	68f9      	ldr	r1, [r7, #12]
 800e256:	2008      	movs	r0, #8
 800e258:	f001 fd8c 	bl	800fd74 <memp_free>
    return ERR_MEM;
 800e25c:	f04f 33ff 	mov.w	r3, #4294967295
 800e260:	e000      	b.n	800e264 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	20004a6c 	.word	0x20004a6c
 800e270:	08024828 	.word	0x08024828
 800e274:	080248a0 	.word	0x080248a0
 800e278:	08024878 	.word	0x08024878

0800e27c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800e288:	4806      	ldr	r0, [pc, #24]	; (800e2a4 <tcpip_send_msg_wait_sem+0x28>)
 800e28a:	f00c f9a1 	bl	801a5d0 <sys_mutex_lock>
  fn(apimsg);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	68b8      	ldr	r0, [r7, #8]
 800e292:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800e294:	4803      	ldr	r0, [pc, #12]	; (800e2a4 <tcpip_send_msg_wait_sem+0x28>)
 800e296:	f00c f9aa 	bl	801a5ee <sys_mutex_unlock>
  return ERR_OK;
 800e29a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3710      	adds	r7, #16
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	200086fc 	.word	0x200086fc

0800e2a8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	af02      	add	r7, sp, #8
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e2b2:	f001 f885 	bl	800f3c0 <lwip_init>

  tcpip_init_done = initfunc;
 800e2b6:	4a17      	ldr	r2, [pc, #92]	; (800e314 <tcpip_init+0x6c>)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e2bc:	4a16      	ldr	r2, [pc, #88]	; (800e318 <tcpip_init+0x70>)
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e2c2:	2106      	movs	r1, #6
 800e2c4:	4815      	ldr	r0, [pc, #84]	; (800e31c <tcpip_init+0x74>)
 800e2c6:	f00c f801 	bl	801a2cc <sys_mbox_new>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d006      	beq.n	800e2de <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e2d0:	4b13      	ldr	r3, [pc, #76]	; (800e320 <tcpip_init+0x78>)
 800e2d2:	f240 2261 	movw	r2, #609	; 0x261
 800e2d6:	4913      	ldr	r1, [pc, #76]	; (800e324 <tcpip_init+0x7c>)
 800e2d8:	4813      	ldr	r0, [pc, #76]	; (800e328 <tcpip_init+0x80>)
 800e2da:	f00c fdb3 	bl	801ae44 <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e2de:	4813      	ldr	r0, [pc, #76]	; (800e32c <tcpip_init+0x84>)
 800e2e0:	f00c f95a 	bl	801a598 <sys_mutex_new>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d006      	beq.n	800e2f8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e2ea:	4b0d      	ldr	r3, [pc, #52]	; (800e320 <tcpip_init+0x78>)
 800e2ec:	f240 2265 	movw	r2, #613	; 0x265
 800e2f0:	490f      	ldr	r1, [pc, #60]	; (800e330 <tcpip_init+0x88>)
 800e2f2:	480d      	ldr	r0, [pc, #52]	; (800e328 <tcpip_init+0x80>)
 800e2f4:	f00c fda6 	bl	801ae44 <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	9300      	str	r3, [sp, #0]
 800e2fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e300:	2200      	movs	r2, #0
 800e302:	490c      	ldr	r1, [pc, #48]	; (800e334 <tcpip_init+0x8c>)
 800e304:	480c      	ldr	r0, [pc, #48]	; (800e338 <tcpip_init+0x90>)
 800e306:	f00c f97f 	bl	801a608 <sys_thread_new>
}
 800e30a:	bf00      	nop
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	20004a64 	.word	0x20004a64
 800e318:	20004a68 	.word	0x20004a68
 800e31c:	20004a6c 	.word	0x20004a6c
 800e320:	08024828 	.word	0x08024828
 800e324:	080248b0 	.word	0x080248b0
 800e328:	08024878 	.word	0x08024878
 800e32c:	200086fc 	.word	0x200086fc
 800e330:	080248d4 	.word	0x080248d4
 800e334:	0800e039 	.word	0x0800e039
 800e338:	080248f8 	.word	0x080248f8

0800e33c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d002      	beq.n	800e352 <fs_open+0x16>
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d102      	bne.n	800e358 <fs_open+0x1c>
    return ERR_ARG;
 800e352:	f06f 030f 	mvn.w	r3, #15
 800e356:	e037      	b.n	800e3c8 <fs_open+0x8c>
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 800e358:	6839      	ldr	r1, [r7, #0]
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f7f4 faa4 	bl	80028a8 <fs_open_custom>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d004      	beq.n	800e370 <fs_open+0x34>
    file->is_custom_file = 1;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2201      	movs	r2, #1
 800e36a:	745a      	strb	r2, [r3, #17]
    return ERR_OK;
 800e36c:	2300      	movs	r3, #0
 800e36e:	e02b      	b.n	800e3c8 <fs_open+0x8c>
  }
  file->is_custom_file = 0;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	745a      	strb	r2, [r3, #17]
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800e376:	4b16      	ldr	r3, [pc, #88]	; (800e3d0 <fs_open+0x94>)
 800e378:	60fb      	str	r3, [r7, #12]
 800e37a:	e020      	b.n	800e3be <fs_open+0x82>
    if (!strcmp(name, (const char *)f->name)) {
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	4619      	mov	r1, r3
 800e382:	6838      	ldr	r0, [r7, #0]
 800e384:	f7f1 ff44 	bl	8000210 <strcmp>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d114      	bne.n	800e3b8 <fs_open+0x7c>
      file->data = (const char *)f->data;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	689a      	ldr	r2, [r3, #8]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	68da      	ldr	r2, [r3, #12]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	68da      	ldr	r2, [r3, #12]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	7c1a      	ldrb	r2, [r3, #16]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	e007      	b.n	800e3c8 <fs_open+0x8c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	60fb      	str	r3, [r7, #12]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1db      	bne.n	800e37c <fs_open+0x40>
    }
  }
  /* file not found */
  return ERR_VAL;
 800e3c4:	f06f 0305 	mvn.w	r3, #5
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	08028be0 	.word	0x08028be0

0800e3d4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	7c5b      	ldrb	r3, [r3, #17]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d002      	beq.n	800e3ea <fs_close+0x16>
    fs_close_custom(file);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7f4 fb99 	bl	8002b1c <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800e3ea:	bf00      	nop
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800e3f2:	b480      	push	{r7}
 800e3f4:	b083      	sub	sp, #12
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	685a      	ldr	r2, [r3, #4]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	689b      	ldr	r3, [r3, #8]
 800e402:	1ad3      	subs	r3, r2, r3
}
 800e404:	4618      	mov	r0, r3
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800e418:	2230      	movs	r2, #48	; 0x30
 800e41a:	2100      	movs	r1, #0
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f00c fa8b 	bl	801a938 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800e422:	bf00      	nop
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b082      	sub	sp, #8
 800e42e:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800e430:	2030      	movs	r0, #48	; 0x30
 800e432:	f001 facb 	bl	800f9cc <mem_malloc>
 800e436:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d002      	beq.n	800e444 <http_state_alloc+0x1a>
    http_state_init(ret);
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f7ff ffe6 	bl	800e410 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800e444:	687b      	ldr	r3, [r7, #4]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b082      	sub	sp, #8
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	695b      	ldr	r3, [r3, #20]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d007      	beq.n	800e46e <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	695b      	ldr	r3, [r3, #20]
 800e462:	4618      	mov	r0, r3
 800e464:	f7ff ffb6 	bl	800e3d4 <fs_close>
    hs->handle = NULL;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6a1b      	ldr	r3, [r3, #32]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d007      	beq.n	800e486 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6a1b      	ldr	r3, [r3, #32]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f002 faa6 	bl	80109cc <pbuf_free>
    hs->req = NULL;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800e486:	bf00      	nop
 800e488:	3708      	adds	r7, #8
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b082      	sub	sp, #8
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d005      	beq.n	800e4a8 <http_state_free+0x1a>
    http_state_eof(hs);
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f7ff ffd6 	bl	800e44e <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f001 f8f8 	bl	800f698 <mem_free>
  }
}
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b086      	sub	sp, #24
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	607a      	str	r2, [r7, #4]
 800e4bc:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d106      	bne.n	800e4d2 <http_write+0x22>
 800e4c4:	4b2c      	ldr	r3, [pc, #176]	; (800e578 <http_write+0xc8>)
 800e4c6:	f240 2219 	movw	r2, #537	; 0x219
 800e4ca:	492c      	ldr	r1, [pc, #176]	; (800e57c <http_write+0xcc>)
 800e4cc:	482c      	ldr	r0, [pc, #176]	; (800e580 <http_write+0xd0>)
 800e4ce:	f00c fcb9 	bl	801ae44 <printf>
  len = *length;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	881b      	ldrh	r3, [r3, #0]
 800e4d6:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800e4d8:	8afb      	ldrh	r3, [r7, #22]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <http_write+0x32>
    return ERR_OK;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	e045      	b.n	800e56e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e4e8:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800e4ea:	8aba      	ldrh	r2, [r7, #20]
 800e4ec:	8afb      	ldrh	r3, [r7, #22]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d201      	bcs.n	800e4f6 <http_write+0x46>
    len = max_len;
 800e4f2:	8abb      	ldrh	r3, [r7, #20]
 800e4f4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4fa:	005b      	lsls	r3, r3, #1
 800e4fc:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800e4fe:	8afa      	ldrh	r2, [r7, #22]
 800e500:	8abb      	ldrh	r3, [r7, #20]
 800e502:	429a      	cmp	r2, r3
 800e504:	d901      	bls.n	800e50a <http_write+0x5a>
    len = max_len;
 800e506:	8abb      	ldrh	r3, [r7, #20]
 800e508:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800e50a:	78fb      	ldrb	r3, [r7, #3]
 800e50c:	8afa      	ldrh	r2, [r7, #22]
 800e50e:	68b9      	ldr	r1, [r7, #8]
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f007 f857 	bl	80155c4 <tcp_write>
 800e516:	4603      	mov	r3, r0
 800e518:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800e51a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e522:	d10f      	bne.n	800e544 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d004      	beq.n	800e538 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800e534:	2b08      	cmp	r3, #8
 800e536:	d902      	bls.n	800e53e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800e538:	2301      	movs	r3, #1
 800e53a:	82fb      	strh	r3, [r7, #22]
 800e53c:	e002      	b.n	800e544 <http_write+0x94>
      } else {
        len /= 2;
 800e53e:	8afb      	ldrh	r3, [r7, #22]
 800e540:	085b      	lsrs	r3, r3, #1
 800e542:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800e544:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e54c:	d102      	bne.n	800e554 <http_write+0xa4>
 800e54e:	8afb      	ldrh	r3, [r7, #22]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d8da      	bhi.n	800e50a <http_write+0x5a>

  if (err == ERR_OK) {
 800e554:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d103      	bne.n	800e564 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	8afa      	ldrh	r2, [r7, #22]
 800e560:	801a      	strh	r2, [r3, #0]
 800e562:	e002      	b.n	800e56a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800e56a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3718      	adds	r7, #24
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	08024948 	.word	0x08024948
 800e57c:	08024980 	.word	0x08024980
 800e580:	08024990 	.word	0x08024990

0800e584 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	4613      	mov	r3, r2
 800e590:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00b      	beq.n	800e5b0 <http_close_or_abort_conn+0x2c>
    if ((hs->post_content_len_left != 0)
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d007      	beq.n	800e5b0 <http_close_or_abort_conn+0x2c>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800e5a0:	4b1f      	ldr	r3, [pc, #124]	; (800e620 <http_close_or_abort_conn+0x9c>)
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800e5a6:	223f      	movs	r2, #63	; 0x3f
 800e5a8:	491d      	ldr	r1, [pc, #116]	; (800e620 <http_close_or_abort_conn+0x9c>)
 800e5aa:	68b8      	ldr	r0, [r7, #8]
 800e5ac:	f7f5 f940 	bl	8003830 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800e5b0:	2100      	movs	r1, #0
 800e5b2:	68f8      	ldr	r0, [r7, #12]
 800e5b4:	f004 f8c8 	bl	8012748 <tcp_arg>
  altcp_recv(pcb, NULL);
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	68f8      	ldr	r0, [r7, #12]
 800e5bc:	f004 f8d6 	bl	801276c <tcp_recv>
  altcp_err(pcb, NULL);
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f004 f916 	bl	80127f4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f004 f94b 	bl	8012868 <tcp_poll>
  altcp_sent(pcb, NULL);
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f004 f8eb 	bl	80127b0 <tcp_sent>
  if (hs != NULL) {
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d002      	beq.n	800e5e6 <http_close_or_abort_conn+0x62>
    http_state_free(hs);
 800e5e0:	68b8      	ldr	r0, [r7, #8]
 800e5e2:	f7ff ff54 	bl	800e48e <http_state_free>
  }

  if (abort_conn) {
 800e5e6:	79fb      	ldrb	r3, [r7, #7]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d004      	beq.n	800e5f6 <http_close_or_abort_conn+0x72>
    altcp_abort(pcb);
 800e5ec:	68f8      	ldr	r0, [r7, #12]
 800e5ee:	f002 ffed 	bl	80115cc <tcp_abort>
    return ERR_OK;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	e00f      	b.n	800e616 <http_close_or_abort_conn+0x92>
  }
  err = altcp_close(pcb);
 800e5f6:	68f8      	ldr	r0, [r7, #12]
 800e5f8:	f002 fea2 	bl	8011340 <tcp_close>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800e600:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d004      	beq.n	800e612 <http_close_or_abort_conn+0x8e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800e608:	2204      	movs	r2, #4
 800e60a:	4906      	ldr	r1, [pc, #24]	; (800e624 <http_close_or_abort_conn+0xa0>)
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f004 f92b 	bl	8012868 <tcp_poll>
  }
  return err;
 800e612:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3718      	adds	r7, #24
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	20004e70 	.word	0x20004e70
 800e624:	0800eff7 	.word	0x0800eff7

0800e628 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800e632:	2200      	movs	r2, #0
 800e634:	6839      	ldr	r1, [r7, #0]
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7ff ffa4 	bl	800e584 <http_close_or_abort_conn>
 800e63c:	4603      	mov	r3, r0
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3708      	adds	r7, #8
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b082      	sub	sp, #8
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
 800e64e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800e650:	6839      	ldr	r1, [r7, #0]
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7ff ffe8 	bl	800e628 <http_close_conn>
  }
}
 800e658:	bf00      	nop
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	695b      	ldr	r3, [r3, #20]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d105      	bne.n	800e67e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800e672:	6839      	ldr	r1, [r7, #0]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7ff ffe6 	bl	800e646 <http_eof>
    return 0;
 800e67a:	2300      	movs	r3, #0
 800e67c:	e016      	b.n	800e6ac <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	695b      	ldr	r3, [r3, #20]
 800e682:	4618      	mov	r0, r3
 800e684:	f7ff feb5 	bl	800e3f2 <fs_bytes_left>
 800e688:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	dc05      	bgt.n	800e69c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800e690:	6839      	ldr	r1, [r7, #0]
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f7ff ffd7 	bl	800e646 <http_eof>
    return 0;
 800e698:	2300      	movs	r3, #0
 800e69a:	e007      	b.n	800e6ac <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800e69c:	4b05      	ldr	r3, [pc, #20]	; (800e6b4 <http_check_eof+0x54>)
 800e69e:	f240 429d 	movw	r2, #1181	; 0x49d
 800e6a2:	4905      	ldr	r1, [pc, #20]	; (800e6b8 <http_check_eof+0x58>)
 800e6a4:	4805      	ldr	r0, [pc, #20]	; (800e6bc <http_check_eof+0x5c>)
 800e6a6:	f00c fbcd 	bl	801ae44 <printf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800e6aa:	2301      	movs	r3, #1
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	08024948 	.word	0x08024948
 800e6b8:	080249b8 	.word	0x080249b8
 800e6bc:	08024990 	.word	0x08024990

0800e6c0 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d803      	bhi.n	800e6e2 <http_send_data_nonssi+0x22>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	e001      	b.n	800e6e6 <http_send_data_nonssi+0x26>
 800e6e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6e6:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	6999      	ldr	r1, [r3, #24]
 800e6ec:	f107 020c 	add.w	r2, r7, #12
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7ff fedc 	bl	800e4b0 <http_write>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800e6fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10d      	bne.n	800e720 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800e704:	2301      	movs	r3, #1
 800e706:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	89ba      	ldrh	r2, [r7, #12]
 800e70e:	441a      	add	r2, r3
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e718:	89ba      	ldrh	r2, [r7, #12]
 800e71a:	1a9a      	subs	r2, r3, r2
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800e720:	7bfb      	ldrb	r3, [r7, #15]
}
 800e722:	4618      	mov	r0, r3
 800e724:	3710      	adds	r7, #16
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b084      	sub	sp, #16
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
 800e732:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800e734:	2300      	movs	r3, #0
 800e736:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d101      	bne.n	800e742 <http_send+0x18>
    return 0;
 800e73e:	2300      	movs	r3, #0
 800e740:	e025      	b.n	800e78e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e746:	2b00      	cmp	r3, #0
 800e748:	d108      	bne.n	800e75c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800e74a:	6839      	ldr	r1, [r7, #0]
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7ff ff87 	bl	800e660 <http_check_eof>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d101      	bne.n	800e75c <http_send+0x32>
      return 0;
 800e758:	2300      	movs	r3, #0
 800e75a:	e018      	b.n	800e78e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7ff ffae 	bl	800e6c0 <http_send_data_nonssi>
 800e764:	4603      	mov	r3, r0
 800e766:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d10d      	bne.n	800e78c <http_send+0x62>
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	695b      	ldr	r3, [r3, #20]
 800e774:	4618      	mov	r0, r3
 800e776:	f7ff fe3c 	bl	800e3f2 <fs_bytes_left>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	dc05      	bgt.n	800e78c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800e780:	6839      	ldr	r1, [r7, #0]
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f7ff ff5f 	bl	800e646 <http_eof>
    return 0;
 800e788:	2300      	movs	r3, #0
 800e78a:	e000      	b.n	800e78e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800e78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
	...

0800e798 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	4a1c      	ldr	r2, [pc, #112]	; (800e818 <http_get_404_file+0x80>)
 800e7a6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	4610      	mov	r0, r2
 800e7b2:	f7ff fdc3 	bl	800e33c <fs_open>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d024      	beq.n	800e80c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	4a15      	ldr	r2, [pc, #84]	; (800e81c <http_get_404_file+0x84>)
 800e7c6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	f7ff fdb3 	bl	800e33c <fs_open>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e7da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d014      	beq.n	800e80c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	4a0e      	ldr	r2, [pc, #56]	; (800e820 <http_get_404_file+0x88>)
 800e7e6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	4610      	mov	r0, r2
 800e7f2:	f7ff fda3 	bl	800e33c <fs_open>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800e7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d004      	beq.n	800e80c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	2200      	movs	r2, #0
 800e806:	601a      	str	r2, [r3, #0]
        return NULL;
 800e808:	2300      	movs	r3, #0
 800e80a:	e000      	b.n	800e80e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800e80c:	687b      	ldr	r3, [r7, #4]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3710      	adds	r7, #16
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	080249f0 	.word	0x080249f0
 800e81c:	080249fc 	.word	0x080249fc
 800e820:	08024a08 	.word	0x08024a08

0800e824 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800e82c:	4b08      	ldr	r3, [pc, #32]	; (800e850 <http_handle_post_finished+0x2c>)
 800e82e:	2200      	movs	r2, #0
 800e830:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800e832:	223f      	movs	r2, #63	; 0x3f
 800e834:	4906      	ldr	r1, [pc, #24]	; (800e850 <http_handle_post_finished+0x2c>)
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7f4 fffa 	bl	8003830 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800e83c:	2200      	movs	r2, #0
 800e83e:	4904      	ldr	r1, [pc, #16]	; (800e850 <http_handle_post_finished+0x2c>)
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 fa51 	bl	800ece8 <http_find_file>
 800e846:	4603      	mov	r3, r0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	20004e70 	.word	0x20004e70

0800e854 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d010      	beq.n	800e886 <http_post_rxpbuf+0x32>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e868:	683a      	ldr	r2, [r7, #0]
 800e86a:	8912      	ldrh	r2, [r2, #8]
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d203      	bcs.n	800e878 <http_post_rxpbuf+0x24>
      hs->post_content_len_left = 0;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	62da      	str	r2, [r3, #44]	; 0x2c
 800e876:	e006      	b.n	800e886 <http_post_rxpbuf+0x32>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e87c:	683a      	ldr	r2, [r7, #0]
 800e87e:	8912      	ldrh	r2, [r2, #8]
 800e880:	1a9a      	subs	r2, r3, r2
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d006      	beq.n	800e89a <http_post_rxpbuf+0x46>
    err = httpd_post_receive_data(hs, p);
 800e88c:	6839      	ldr	r1, [r7, #0]
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7f4 fdec 	bl	800346c <httpd_post_receive_data>
 800e894:	4603      	mov	r3, r0
 800e896:	73fb      	strb	r3, [r7, #15]
 800e898:	e001      	b.n	800e89e <http_post_rxpbuf+0x4a>
  } else {
    err = ERR_OK;
 800e89a:	2300      	movs	r3, #0
 800e89c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800e89e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d002      	beq.n	800e8ac <http_post_rxpbuf+0x58>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  if (hs->post_content_len_left == 0) {
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d104      	bne.n	800e8be <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f7ff ffb5 	bl	800e824 <http_handle_post_finished>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	e000      	b.n	800e8c0 <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3710      	adds	r7, #16
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b092      	sub	sp, #72	; 0x48
 800e8cc:	af04      	add	r7, sp, #16
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	607a      	str	r2, [r7, #4]
 800e8d4:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800e8d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8d8:	1c58      	adds	r0, r3, #1
 800e8da:	887a      	ldrh	r2, [r7, #2]
 800e8dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8de:	1c59      	adds	r1, r3, #1
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	1acb      	subs	r3, r1, r3
 800e8e4:	1ad3      	subs	r3, r2, r3
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	4964      	ldr	r1, [pc, #400]	; (800ea7c <http_post_request+0x1b4>)
 800e8ea:	f000 fd33 	bl	800f354 <lwip_strnstr>
 800e8ee:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800e8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	f000 80bc 	beq.w	800ea70 <http_post_request+0x1a8>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800e8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8fa:	1c58      	adds	r0, r3, #1
 800e8fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8fe:	3301      	adds	r3, #1
 800e900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e902:	1ad3      	subs	r3, r2, r3
 800e904:	461a      	mov	r2, r3
 800e906:	495e      	ldr	r1, [pc, #376]	; (800ea80 <http_post_request+0x1b8>)
 800e908:	f000 fd24 	bl	800f354 <lwip_strnstr>
 800e90c:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800e90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e910:	2b00      	cmp	r3, #0
 800e912:	f000 80aa 	beq.w	800ea6a <http_post_request+0x1a2>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800e916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e918:	3310      	adds	r3, #16
 800e91a:	220a      	movs	r2, #10
 800e91c:	4959      	ldr	r1, [pc, #356]	; (800ea84 <http_post_request+0x1bc>)
 800e91e:	4618      	mov	r0, r3
 800e920:	f000 fd18 	bl	800f354 <lwip_strnstr>
 800e924:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800e926:	6a3b      	ldr	r3, [r7, #32]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f000 809e 	beq.w	800ea6a <http_post_request+0x1a2>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	3310      	adds	r3, #16
 800e932:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800e934:	69f8      	ldr	r0, [r7, #28]
 800e936:	f00b feab 	bl	801a690 <atoi>
 800e93a:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800e93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d10b      	bne.n	800e95a <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	2b30      	cmp	r3, #48	; 0x30
 800e948:	d104      	bne.n	800e954 <http_post_request+0x8c>
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	3301      	adds	r3, #1
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	2b0d      	cmp	r3, #13
 800e952:	d002      	beq.n	800e95a <http_post_request+0x92>
            content_len = -1;
 800e954:	f04f 33ff 	mov.w	r3, #4294967295
 800e958:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800e95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f2c0 8081 	blt.w	800ea64 <http_post_request+0x19c>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800e962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e964:	3301      	adds	r3, #1
 800e966:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800e968:	887a      	ldrh	r2, [r7, #2]
 800e96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96c:	1d19      	adds	r1, r3, #4
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	1acb      	subs	r3, r1, r3
 800e972:	429a      	cmp	r2, r3
 800e974:	db05      	blt.n	800e982 <http_post_request+0xba>
 800e976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e978:	1d1a      	adds	r2, r3, #4
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	1ad3      	subs	r3, r2, r3
 800e97e:	b29b      	uxth	r3, r3
 800e980:	e000      	b.n	800e984 <http_post_request+0xbc>
 800e982:	887b      	ldrh	r3, [r7, #2]
 800e984:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800e986:	887a      	ldrh	r2, [r7, #2]
 800e988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98a:	1d19      	adds	r1, r3, #4
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	1acb      	subs	r3, r1, r3
 800e990:	429a      	cmp	r2, r3
 800e992:	db05      	blt.n	800e9a0 <http_post_request+0xd8>
 800e994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e996:	1d1a      	adds	r2, r3, #4
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	e000      	b.n	800e9a2 <http_post_request+0xda>
 800e9a0:	887b      	ldrh	r3, [r7, #2]
 800e9a2:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800e9a8:	4b37      	ldr	r3, [pc, #220]	; (800ea88 <http_post_request+0x1c0>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800e9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800e9b4:	8aba      	ldrh	r2, [r7, #20]
 800e9b6:	f107 0312 	add.w	r3, r7, #18
 800e9ba:	9303      	str	r3, [sp, #12]
 800e9bc:	233f      	movs	r3, #63	; 0x3f
 800e9be:	9302      	str	r3, [sp, #8]
 800e9c0:	4b31      	ldr	r3, [pc, #196]	; (800ea88 <http_post_request+0x1c0>)
 800e9c2:	9301      	str	r3, [sp, #4]
 800e9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	69ba      	ldr	r2, [r7, #24]
 800e9cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9ce:	68b8      	ldr	r0, [r7, #8]
 800e9d0:	f7f4 fd12 	bl	80033f8 <httpd_post_begin>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800e9d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d13a      	bne.n	800ea56 <http_post_request+0x18e>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800e9e4:	8afb      	ldrh	r3, [r7, #22]
 800e9e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800e9e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	62da      	str	r2, [r3, #44]	; 0x2c

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800e9ee:	e007      	b.n	800ea00 <http_post_request+0x138>
              start_offset -= q->len;
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	895b      	ldrh	r3, [r3, #10]
 800e9f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e9f6:	1ad3      	subs	r3, r2, r3
 800e9f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800e9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800ea00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d004      	beq.n	800ea10 <http_post_request+0x148>
 800ea06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea08:	895b      	ldrh	r3, [r3, #10]
 800ea0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	d2ef      	bcs.n	800e9f0 <http_post_request+0x128>
            }
            if (q != NULL) {
 800ea10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00d      	beq.n	800ea32 <http_post_request+0x16a>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800ea16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea18:	4619      	mov	r1, r3
 800ea1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea1c:	f001 ff50 	bl	80108c0 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800ea20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea22:	f002 f879 	bl	8010b18 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800ea26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea28:	68b8      	ldr	r0, [r7, #8]
 800ea2a:	f7ff ff13 	bl	800e854 <http_post_rxpbuf>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	e020      	b.n	800ea74 <http_post_request+0x1ac>
            } else if (hs->post_content_len_left == 0) {
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10b      	bne.n	800ea52 <http_post_request+0x18a>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800ea3a:	2241      	movs	r2, #65	; 0x41
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	2000      	movs	r0, #0
 800ea40:	f001 fce0 	bl	8010404 <pbuf_alloc>
 800ea44:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800ea46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea48:	68b8      	ldr	r0, [r7, #8]
 800ea4a:	f7ff ff03 	bl	800e854 <http_post_rxpbuf>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	e010      	b.n	800ea74 <http_post_request+0x1ac>
            } else {
              return ERR_OK;
 800ea52:	2300      	movs	r3, #0
 800ea54:	e00e      	b.n	800ea74 <http_post_request+0x1ac>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800ea56:	2200      	movs	r2, #0
 800ea58:	490b      	ldr	r1, [pc, #44]	; (800ea88 <http_post_request+0x1c0>)
 800ea5a:	68b8      	ldr	r0, [r7, #8]
 800ea5c:	f000 f944 	bl	800ece8 <http_find_file>
 800ea60:	4603      	mov	r3, r0
 800ea62:	e007      	b.n	800ea74 <http_post_request+0x1ac>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800ea64:	f06f 030f 	mvn.w	r3, #15
 800ea68:	e004      	b.n	800ea74 <http_post_request+0x1ac>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800ea6a:	f06f 030f 	mvn.w	r3, #15
 800ea6e:	e001      	b.n	800ea74 <http_post_request+0x1ac>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800ea70:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3738      	adds	r7, #56	; 0x38
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	08024a14 	.word	0x08024a14
 800ea80:	08024a1c 	.word	0x08024a1c
 800ea84:	08024a30 	.word	0x08024a30
 800ea88:	20004e70 	.word	0x20004e70

0800ea8c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b092      	sub	sp, #72	; 0x48
 800ea90:	af02      	add	r7, sp, #8
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	60b9      	str	r1, [r7, #8]
 800ea96:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d106      	bne.n	800eab0 <http_parse_request+0x24>
 800eaa2:	4b87      	ldr	r3, [pc, #540]	; (800ecc0 <http_parse_request+0x234>)
 800eaa4:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800eaa8:	4986      	ldr	r1, [pc, #536]	; (800ecc4 <http_parse_request+0x238>)
 800eaaa:	4887      	ldr	r0, [pc, #540]	; (800ecc8 <http_parse_request+0x23c>)
 800eaac:	f00c f9ca 	bl	801ae44 <printf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d106      	bne.n	800eac4 <http_parse_request+0x38>
 800eab6:	4b82      	ldr	r3, [pc, #520]	; (800ecc0 <http_parse_request+0x234>)
 800eab8:	f240 72af 	movw	r2, #1967	; 0x7af
 800eabc:	4983      	ldr	r1, [pc, #524]	; (800eccc <http_parse_request+0x240>)
 800eabe:	4882      	ldr	r0, [pc, #520]	; (800ecc8 <http_parse_request+0x23c>)
 800eac0:	f00c f9c0 	bl	801ae44 <printf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	695b      	ldr	r3, [r3, #20]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d103      	bne.n	800ead4 <http_parse_request+0x48>
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	699b      	ldr	r3, [r3, #24]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d002      	beq.n	800eada <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800ead4:	f06f 0307 	mvn.w	r3, #7
 800ead8:	e0ed      	b.n	800ecb6 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	6a1b      	ldr	r3, [r3, #32]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d103      	bne.n	800eaea <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eae6:	621a      	str	r2, [r3, #32]
 800eae8:	e005      	b.n	800eaf6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	6a1b      	ldr	r3, [r3, #32]
 800eaee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f002 f839 	bl	8010b68 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800eaf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eaf8:	f002 f80e 	bl	8010b18 <pbuf_ref>

  if (hs->req->next != NULL) {
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	6a1b      	ldr	r3, [r3, #32]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d012      	beq.n	800eb2c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	6a1b      	ldr	r3, [r3, #32]
 800eb0a:	891b      	ldrh	r3, [r3, #8]
 800eb0c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800eb10:	4293      	cmp	r3, r2
 800eb12:	bf28      	it	cs
 800eb14:	4613      	movcs	r3, r2
 800eb16:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	6a18      	ldr	r0, [r3, #32]
 800eb1c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800eb1e:	2300      	movs	r3, #0
 800eb20:	496b      	ldr	r1, [pc, #428]	; (800ecd0 <http_parse_request+0x244>)
 800eb22:	f002 f959 	bl	8010dd8 <pbuf_copy_partial>
    data = httpd_req_buf;
 800eb26:	4b6a      	ldr	r3, [pc, #424]	; (800ecd0 <http_parse_request+0x244>)
 800eb28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb2a:	e005      	b.n	800eb38 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800eb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb34:	895b      	ldrh	r3, [r3, #10]
 800eb36:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800eb38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eb3a:	2b06      	cmp	r3, #6
 800eb3c:	f240 80a1 	bls.w	800ec82 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800eb40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eb42:	461a      	mov	r2, r3
 800eb44:	4963      	ldr	r1, [pc, #396]	; (800ecd4 <http_parse_request+0x248>)
 800eb46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eb48:	f000 fc04 	bl	800f354 <lwip_strnstr>
 800eb4c:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800eb4e:	6a3b      	ldr	r3, [r7, #32]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f000 8096 	beq.w	800ec82 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800eb5e:	2204      	movs	r2, #4
 800eb60:	495d      	ldr	r1, [pc, #372]	; (800ecd8 <http_parse_request+0x24c>)
 800eb62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eb64:	f00c f9ff 	bl	801af66 <strncmp>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d103      	bne.n	800eb76 <http_parse_request+0xea>
        sp1 = data + 3;
 800eb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb70:	3303      	adds	r3, #3
 800eb72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb74:	e014      	b.n	800eba0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800eb76:	2205      	movs	r2, #5
 800eb78:	4958      	ldr	r1, [pc, #352]	; (800ecdc <http_parse_request+0x250>)
 800eb7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800eb7c:	f00c f9f3 	bl	801af66 <strncmp>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d105      	bne.n	800eb92 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800eb86:	2301      	movs	r3, #1
 800eb88:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800eb8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb8c:	3304      	adds	r3, #4
 800eb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb90:	e006      	b.n	800eba0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800eb92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb94:	3304      	adds	r3, #4
 800eb96:	2200      	movs	r2, #0
 800eb98:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800eb9a:	f06f 030f 	mvn.w	r3, #15
 800eb9e:	e08a      	b.n	800ecb6 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800eba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba2:	1c5a      	adds	r2, r3, #1
 800eba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eba6:	1ad3      	subs	r3, r2, r3
 800eba8:	b29b      	uxth	r3, r3
 800ebaa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ebac:	1ad3      	subs	r3, r2, r3
 800ebae:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800ebb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	8bfa      	ldrh	r2, [r7, #30]
 800ebb6:	494a      	ldr	r1, [pc, #296]	; (800ece0 <http_parse_request+0x254>)
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f000 fbcb 	bl	800f354 <lwip_strnstr>
 800ebbe:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800ebc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10c      	bne.n	800ebe0 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800ebc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc8:	3301      	adds	r3, #1
 800ebca:	8bfa      	ldrh	r2, [r7, #30]
 800ebcc:	4941      	ldr	r1, [pc, #260]	; (800ecd4 <http_parse_request+0x248>)
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f000 fbc0 	bl	800f354 <lwip_strnstr>
 800ebd4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800ebda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d163      	bne.n	800eca8 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800ebe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebe6:	1ad3      	subs	r3, r2, r3
 800ebe8:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800ebea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d048      	beq.n	800ec82 <http_parse_request+0x1f6>
 800ebf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d944      	bls.n	800ec82 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800ebf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	4939      	ldr	r1, [pc, #228]	; (800ece4 <http_parse_request+0x258>)
 800ebfe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ec00:	f000 fba8 	bl	800f354 <lwip_strnstr>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d03b      	beq.n	800ec82 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800ec0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800ec10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec12:	2200      	movs	r2, #0
 800ec14:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800ec16:	8bbb      	ldrh	r3, [r7, #28]
 800ec18:	69ba      	ldr	r2, [r7, #24]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800ec20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d026      	beq.n	800ec74 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	6a1b      	ldr	r3, [r3, #32]
 800ec2a:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800ec2c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ec2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec30:	9301      	str	r3, [sp, #4]
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	9300      	str	r3, [sp, #0]
 800ec36:	4613      	mov	r3, r2
 800ec38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec3a:	68b9      	ldr	r1, [r7, #8]
 800ec3c:	6978      	ldr	r0, [r7, #20]
 800ec3e:	f7ff fe43 	bl	800e8c8 <http_post_request>
 800ec42:	4603      	mov	r3, r0
 800ec44:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800ec46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00a      	beq.n	800ec64 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800ec4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec50:	2220      	movs	r2, #32
 800ec52:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800ec54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec56:	2220      	movs	r2, #32
 800ec58:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800ec5a:	8bbb      	ldrh	r3, [r7, #28]
 800ec5c:	69ba      	ldr	r2, [r7, #24]
 800ec5e:	4413      	add	r3, r2
 800ec60:	2220      	movs	r2, #32
 800ec62:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800ec64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec68:	f113 0f10 	cmn.w	r3, #16
 800ec6c:	d01e      	beq.n	800ecac <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800ec6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec72:	e020      	b.n	800ecb6 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800ec74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec76:	69b9      	ldr	r1, [r7, #24]
 800ec78:	68b8      	ldr	r0, [r7, #8]
 800ec7a:	f000 f835 	bl	800ece8 <http_find_file>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	e019      	b.n	800ecb6 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	6a1b      	ldr	r3, [r3, #32]
 800ec86:	4618      	mov	r0, r3
 800ec88:	f001 ff2e 	bl	8010ae8 <pbuf_clen>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	6a1b      	ldr	r3, [r3, #32]
 800ec94:	891b      	ldrh	r3, [r3, #8]
 800ec96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec9a:	d209      	bcs.n	800ecb0 <http_parse_request+0x224>
 800ec9c:	8a3b      	ldrh	r3, [r7, #16]
 800ec9e:	2b05      	cmp	r3, #5
 800eca0:	d806      	bhi.n	800ecb0 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800eca2:	f06f 0304 	mvn.w	r3, #4
 800eca6:	e006      	b.n	800ecb6 <http_parse_request+0x22a>
          goto badrequest;
 800eca8:	bf00      	nop
 800ecaa:	e002      	b.n	800ecb2 <http_parse_request+0x226>
              goto badrequest;
 800ecac:	bf00      	nop
 800ecae:	e000      	b.n	800ecb2 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800ecb0:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800ecb2:	f06f 030f 	mvn.w	r3, #15
  }
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3740      	adds	r7, #64	; 0x40
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	08024948 	.word	0x08024948
 800ecc4:	08024a34 	.word	0x08024a34
 800ecc8:	08024990 	.word	0x08024990
 800eccc:	08024a40 	.word	0x08024a40
 800ecd0:	20004a70 	.word	0x20004a70
 800ecd4:	08024a30 	.word	0x08024a30
 800ecd8:	08024a4c 	.word	0x08024a4c
 800ecdc:	08024a54 	.word	0x08024a54
 800ece0:	08024a5c 	.word	0x08024a5c
 800ece4:	08024a14 	.word	0x08024a14

0800ece8 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b092      	sub	sp, #72	; 0x48
 800ecec:	af02      	add	r7, sp, #8
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	60b9      	str	r1, [r7, #8]
 800ecf2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7f1 fa8d 	bl	8000224 <strlen>
 800ed0a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800ed0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d06b      	beq.n	800edea <http_find_file+0x102>
 800ed12:	68ba      	ldr	r2, [r7, #8]
 800ed14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed16:	3b01      	subs	r3, #1
 800ed18:	4413      	add	r3, r2
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	2b2f      	cmp	r3, #47	; 0x2f
 800ed1e:	d164      	bne.n	800edea <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800ed20:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800ed22:	4a53      	ldr	r2, [pc, #332]	; (800ee70 <http_find_file+0x188>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d102      	bne.n	800ed2e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800ed28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d15d      	bne.n	800edea <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800ed2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed30:	3b01      	subs	r3, #1
 800ed32:	2b3f      	cmp	r3, #63	; 0x3f
 800ed34:	bf28      	it	cs
 800ed36:	233f      	movcs	r3, #63	; 0x3f
 800ed38:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800ed3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d00a      	beq.n	800ed56 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed44:	4619      	mov	r1, r3
 800ed46:	484a      	ldr	r0, [pc, #296]	; (800ee70 <http_find_file+0x188>)
 800ed48:	f00b fdce 	bl	801a8e8 <memcpy>
      http_uri_buf[copy_len] = 0;
 800ed4c:	4a48      	ldr	r2, [pc, #288]	; (800ee70 <http_find_file+0x188>)
 800ed4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed50:	4413      	add	r3, r2
 800ed52:	2200      	movs	r2, #0
 800ed54:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800ed56:	2300      	movs	r3, #0
 800ed58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed5a:	e043      	b.n	800ede4 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800ed5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d028      	beq.n	800edb4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800ed62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed64:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800ed68:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800ed6a:	6a3b      	ldr	r3, [r7, #32]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d01e      	beq.n	800edae <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800ed70:	4a40      	ldr	r2, [pc, #256]	; (800ee74 <http_find_file+0x18c>)
 800ed72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7f1 fa53 	bl	8000224 <strlen>
 800ed7e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800ed80:	69fa      	ldr	r2, [r7, #28]
 800ed82:	6a3b      	ldr	r3, [r7, #32]
 800ed84:	4293      	cmp	r3, r2
 800ed86:	bf28      	it	cs
 800ed88:	4613      	movcs	r3, r2
 800ed8a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800ed8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8e:	4a38      	ldr	r2, [pc, #224]	; (800ee70 <http_find_file+0x188>)
 800ed90:	1898      	adds	r0, r3, r2
 800ed92:	4a38      	ldr	r2, [pc, #224]	; (800ee74 <http_find_file+0x18c>)
 800ed94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed96:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed9a:	69ba      	ldr	r2, [r7, #24]
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	f00b fda3 	bl	801a8e8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800eda2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	4413      	add	r3, r2
 800eda8:	4a31      	ldr	r2, [pc, #196]	; (800ee70 <http_find_file+0x188>)
 800edaa:	2100      	movs	r1, #0
 800edac:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800edae:	4b30      	ldr	r3, [pc, #192]	; (800ee70 <http_find_file+0x188>)
 800edb0:	633b      	str	r3, [r7, #48]	; 0x30
 800edb2:	e004      	b.n	800edbe <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800edb4:	4a2f      	ldr	r2, [pc, #188]	; (800ee74 <http_find_file+0x18c>)
 800edb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800edbc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7ff faba 	bl	800e33c <fs_open>
 800edc8:	4603      	mov	r3, r0
 800edca:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800edcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d104      	bne.n	800edde <http_find_file+0xf6>
        uri = file_name;
 800edd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800eddc:	e005      	b.n	800edea <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800edde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ede0:	3301      	adds	r3, #1
 800ede2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ede4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ede6:	2b04      	cmp	r3, #4
 800ede8:	d9b8      	bls.n	800ed5c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800edea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edec:	2b00      	cmp	r3, #0
 800edee:	d124      	bne.n	800ee3a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	213f      	movs	r1, #63	; 0x3f
 800edf4:	4618      	mov	r0, r3
 800edf6:	f00c f8a9 	bl	801af4c <strchr>
 800edfa:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800edfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d005      	beq.n	800ee0e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800ee02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee04:	2200      	movs	r2, #0
 800ee06:	701a      	strb	r2, [r3, #0]
      params++;
 800ee08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	68ba      	ldr	r2, [r7, #8]
 800ee12:	4611      	mov	r1, r2
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7ff fa91 	bl	800e33c <fs_open>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800ee1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d102      	bne.n	800ee2c <http_find_file+0x144>
      file = &hs->file_handle;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee2a:	e006      	b.n	800ee3a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800ee2c:	f107 0308 	add.w	r3, r7, #8
 800ee30:	4619      	mov	r1, r3
 800ee32:	68f8      	ldr	r0, [r7, #12]
 800ee34:	f7ff fcb0 	bl	800e798 <http_get_404_file>
 800ee38:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800ee3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d106      	bne.n	800ee4e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800ee40:	f107 0308 	add.w	r3, r7, #8
 800ee44:	4619      	mov	r1, r3
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f7ff fca6 	bl	800e798 <http_get_404_file>
 800ee4c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee52:	9301      	str	r3, [sp, #4]
 800ee54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f000 f809 	bl	800ee78 <http_init_file>
 800ee66:	4603      	mov	r3, r0
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3740      	adds	r7, #64	; 0x40
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	20004e70 	.word	0x20004e70
 800ee74:	08028bf4 	.word	0x08028bf4

0800ee78 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b086      	sub	sp, #24
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
 800ee84:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d068      	beq.n	800ef5e <http_init_file+0xe6>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d106      	bne.n	800eea2 <http_init_file+0x2a>
 800ee94:	4b3b      	ldr	r3, [pc, #236]	; (800ef84 <http_init_file+0x10c>)
 800ee96:	f640 120b 	movw	r2, #2315	; 0x90b
 800ee9a:	493b      	ldr	r1, [pc, #236]	; (800ef88 <http_init_file+0x110>)
 800ee9c:	483b      	ldr	r0, [pc, #236]	; (800ef8c <http_init_file+0x114>)
 800ee9e:	f00b ffd1 	bl	801ae44 <printf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	da06      	bge.n	800eec6 <http_init_file+0x4e>
 800eeb8:	4b32      	ldr	r3, [pc, #200]	; (800ef84 <http_init_file+0x10c>)
 800eeba:	f640 1234 	movw	r2, #2356	; 0x934
 800eebe:	4934      	ldr	r1, [pc, #208]	; (800ef90 <http_init_file+0x118>)
 800eec0:	4832      	ldr	r0, [pc, #200]	; (800ef8c <http_init_file+0x114>)
 800eec2:	f00b ffbf 	bl	801ae44 <printf>
#if LWIP_HTTPD_CUSTOM_FILES
    if (file->is_custom_file && (file->data == NULL)) {
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	7c5b      	ldrb	r3, [r3, #17]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d007      	beq.n	800eede <http_init_file+0x66>
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d103      	bne.n	800eede <http_init_file+0x66>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2200      	movs	r2, #0
 800eeda:	625a      	str	r2, [r3, #36]	; 0x24
 800eedc:	e004      	b.n	800eee8 <http_init_file+0x70>
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	461a      	mov	r2, r3
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2200      	movs	r2, #0
 800eeec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	695b      	ldr	r3, [r3, #20]
 800eef4:	7c1b      	ldrb	r3, [r3, #16]
 800eef6:	f003 0301 	and.w	r3, r3, #1
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d106      	bne.n	800ef0c <http_init_file+0x94>
 800eefe:	4b21      	ldr	r3, [pc, #132]	; (800ef84 <http_init_file+0x10c>)
 800ef00:	f640 1243 	movw	r2, #2371	; 0x943
 800ef04:	4923      	ldr	r1, [pc, #140]	; (800ef94 <http_init_file+0x11c>)
 800ef06:	4821      	ldr	r0, [pc, #132]	; (800ef8c <http_init_file+0x114>)
 800ef08:	f00b ff9c 	bl	801ae44 <printf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d032      	beq.n	800ef78 <http_init_file+0x100>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	695b      	ldr	r3, [r3, #20]
 800ef16:	7c1b      	ldrb	r3, [r3, #16]
 800ef18:	f003 0301 	and.w	r3, r3, #1
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d02b      	beq.n	800ef78 <http_init_file+0x100>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6998      	ldr	r0, [r3, #24]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef28:	461a      	mov	r2, r3
 800ef2a:	491b      	ldr	r1, [pc, #108]	; (800ef98 <http_init_file+0x120>)
 800ef2c:	f000 fa12 	bl	800f354 <lwip_strnstr>
 800ef30:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d01f      	beq.n	800ef78 <http_init_file+0x100>
        int diff = file_start + 4 - hs->file;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	1d1a      	adds	r2, r3, #4
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	699b      	ldr	r3, [r3, #24]
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	699a      	ldr	r2, [r3, #24]
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	441a      	add	r2, r3
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	1ad2      	subs	r2, r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	625a      	str	r2, [r3, #36]	; 0x24
 800ef5c:	e00c      	b.n	800ef78 <http_init_file+0x100>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2200      	movs	r2, #0
 800ef62:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2200      	movs	r2, #0
 800ef68:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2200      	movs	r2, #0
 800ef74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800ef78:	2300      	movs	r3, #0
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3718      	adds	r7, #24
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	08024948 	.word	0x08024948
 800ef88:	08024a60 	.word	0x08024a60
 800ef8c:	08024990 	.word	0x08024990
 800ef90:	08024a74 	.word	0x08024a74
 800ef94:	08024a94 	.word	0x08024a94
 800ef98:	08024a14 	.word	0x08024a14

0800ef9c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	460b      	mov	r3, r1
 800efa6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d002      	beq.n	800efb8 <http_err+0x1c>
    http_state_free(hs);
 800efb2:	68f8      	ldr	r0, [r7, #12]
 800efb4:	f7ff fa6b 	bl	800e48e <http_state_free>
  }
}
 800efb8:	bf00      	nop
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b086      	sub	sp, #24
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	4613      	mov	r3, r2
 800efcc:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <http_sent+0x1c>
    return ERR_OK;
 800efd8:	2300      	movs	r3, #0
 800efda:	e008      	b.n	800efee <http_sent+0x2e>
  }

  hs->retries = 0;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	2200      	movs	r2, #0
 800efe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800efe4:	6979      	ldr	r1, [r7, #20]
 800efe6:	68b8      	ldr	r0, [r7, #8]
 800efe8:	f7ff fb9f 	bl	800e72a <http_send>

  return ERR_OK;
 800efec:	2300      	movs	r3, #0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3718      	adds	r7, #24
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b084      	sub	sp, #16
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
 800effe:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d107      	bne.n	800f01a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800f00a:	2100      	movs	r1, #0
 800f00c:	6838      	ldr	r0, [r7, #0]
 800f00e:	f7ff fb0b 	bl	800e628 <http_close_conn>
 800f012:	4603      	mov	r3, r0
 800f014:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800f016:	2300      	movs	r3, #0
 800f018:	e021      	b.n	800f05e <http_poll+0x68>
  } else {
    hs->retries++;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f020:	3301      	adds	r3, #1
 800f022:	b2da      	uxtb	r2, r3
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f030:	2b04      	cmp	r3, #4
 800f032:	d105      	bne.n	800f040 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800f034:	68f9      	ldr	r1, [r7, #12]
 800f036:	6838      	ldr	r0, [r7, #0]
 800f038:	f7ff faf6 	bl	800e628 <http_close_conn>
      return ERR_OK;
 800f03c:	2300      	movs	r3, #0
 800f03e:	e00e      	b.n	800f05e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	695b      	ldr	r3, [r3, #20]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d009      	beq.n	800f05c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800f048:	68f9      	ldr	r1, [r7, #12]
 800f04a:	6838      	ldr	r0, [r7, #0]
 800f04c:	f7ff fb6d 	bl	800e72a <http_send>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d002      	beq.n	800f05c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800f056:	6838      	ldr	r0, [r7, #0]
 800f058:	f007 f89e 	bl	8016198 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3710      	adds	r7, #16
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
	...

0800f068 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
 800f074:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800f07a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d105      	bne.n	800f08e <http_recv+0x26>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d002      	beq.n	800f08e <http_recv+0x26>
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d111      	bne.n	800f0b2 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d008      	beq.n	800f0a6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	891b      	ldrh	r3, [r3, #8]
 800f098:	4619      	mov	r1, r3
 800f09a:	68b8      	ldr	r0, [r7, #8]
 800f09c:	f002 fc70 	bl	8011980 <tcp_recved>
      pbuf_free(p);
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f001 fc93 	bl	80109cc <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800f0a6:	6979      	ldr	r1, [r7, #20]
 800f0a8:	68b8      	ldr	r0, [r7, #8]
 800f0aa:	f7ff fabd 	bl	800e628 <http_close_conn>
    return ERR_OK;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	e06f      	b.n	800f192 <http_recv+0x12a>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	891b      	ldrh	r3, [r3, #8]
 800f0b6:	4619      	mov	r1, r3
 800f0b8:	68b8      	ldr	r0, [r7, #8]
 800f0ba:	f002 fc61 	bl	8011980 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d011      	beq.n	800f0ea <http_recv+0x82>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800f0ce:	6879      	ldr	r1, [r7, #4]
 800f0d0:	6978      	ldr	r0, [r7, #20]
 800f0d2:	f7ff fbbf 	bl	800e854 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d103      	bne.n	800f0e6 <http_recv+0x7e>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800f0de:	6979      	ldr	r1, [r7, #20]
 800f0e0:	68b8      	ldr	r0, [r7, #8]
 800f0e2:	f7ff fb22 	bl	800e72a <http_send>
    }
    return ERR_OK;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	e053      	b.n	800f192 <http_recv+0x12a>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	695b      	ldr	r3, [r3, #20]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d14b      	bne.n	800f18a <http_recv+0x122>
      err_t parsed = http_parse_request(p, hs, pcb);
 800f0f2:	68ba      	ldr	r2, [r7, #8]
 800f0f4:	6979      	ldr	r1, [r7, #20]
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7ff fcc8 	bl	800ea8c <http_parse_request>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800f100:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d015      	beq.n	800f134 <http_recv+0xcc>
 800f108:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f10c:	f113 0f05 	cmn.w	r3, #5
 800f110:	d010      	beq.n	800f134 <http_recv+0xcc>
 800f112:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f116:	f113 0f10 	cmn.w	r3, #16
 800f11a:	d00b      	beq.n	800f134 <http_recv+0xcc>
 800f11c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f120:	f113 0f08 	cmn.w	r3, #8
 800f124:	d006      	beq.n	800f134 <http_recv+0xcc>
 800f126:	4b1d      	ldr	r3, [pc, #116]	; (800f19c <http_recv+0x134>)
 800f128:	f640 2204 	movw	r2, #2564	; 0xa04
 800f12c:	491c      	ldr	r1, [pc, #112]	; (800f1a0 <http_recv+0x138>)
 800f12e:	481d      	ldr	r0, [pc, #116]	; (800f1a4 <http_recv+0x13c>)
 800f130:	f00b fe88 	bl	801ae44 <printf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800f134:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f138:	f113 0f05 	cmn.w	r3, #5
 800f13c:	d00b      	beq.n	800f156 <http_recv+0xee>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	6a1b      	ldr	r3, [r3, #32]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d007      	beq.n	800f156 <http_recv+0xee>
          pbuf_free(hs->req);
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	6a1b      	ldr	r3, [r3, #32]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f001 fc3e 	bl	80109cc <pbuf_free>
          hs->req = NULL;
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	2200      	movs	r2, #0
 800f154:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f001 fc38 	bl	80109cc <pbuf_free>
      if (parsed == ERR_OK) {
 800f15c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d108      	bne.n	800f176 <http_recv+0x10e>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d111      	bne.n	800f190 <http_recv+0x128>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800f16c:	6979      	ldr	r1, [r7, #20]
 800f16e:	68b8      	ldr	r0, [r7, #8]
 800f170:	f7ff fadb 	bl	800e72a <http_send>
 800f174:	e00c      	b.n	800f190 <http_recv+0x128>
        }
      } else if (parsed == ERR_ARG) {
 800f176:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f17a:	f113 0f10 	cmn.w	r3, #16
 800f17e:	d107      	bne.n	800f190 <http_recv+0x128>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800f180:	6979      	ldr	r1, [r7, #20]
 800f182:	68b8      	ldr	r0, [r7, #8]
 800f184:	f7ff fa50 	bl	800e628 <http_close_conn>
 800f188:	e002      	b.n	800f190 <http_recv+0x128>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f001 fc1e 	bl	80109cc <pbuf_free>
    }
  }
  return ERR_OK;
 800f190:	2300      	movs	r3, #0
}
 800f192:	4618      	mov	r0, r3
 800f194:	3718      	adds	r7, #24
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	08024948 	.word	0x08024948
 800f1a0:	08024ac0 	.word	0x08024ac0
 800f1a4:	08024990 	.word	0x08024990

0800f1a8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b086      	sub	sp, #24
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	4613      	mov	r3, r2
 800f1b4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800f1b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d102      	bne.n	800f1c4 <http_accept+0x1c>
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d102      	bne.n	800f1ca <http_accept+0x22>
    return ERR_VAL;
 800f1c4:	f06f 0305 	mvn.w	r3, #5
 800f1c8:	e025      	b.n	800f216 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800f1ca:	2101      	movs	r1, #1
 800f1cc:	68b8      	ldr	r0, [r7, #8]
 800f1ce:	f003 f8bb 	bl	8012348 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800f1d2:	f7ff f92a 	bl	800e42a <http_state_alloc>
 800f1d6:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d102      	bne.n	800f1e4 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800f1de:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e2:	e018      	b.n	800f216 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	68ba      	ldr	r2, [r7, #8]
 800f1e8:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800f1ea:	6979      	ldr	r1, [r7, #20]
 800f1ec:	68b8      	ldr	r0, [r7, #8]
 800f1ee:	f003 faab 	bl	8012748 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800f1f2:	490b      	ldr	r1, [pc, #44]	; (800f220 <http_accept+0x78>)
 800f1f4:	68b8      	ldr	r0, [r7, #8]
 800f1f6:	f003 fab9 	bl	801276c <tcp_recv>
  altcp_err(pcb, http_err);
 800f1fa:	490a      	ldr	r1, [pc, #40]	; (800f224 <http_accept+0x7c>)
 800f1fc:	68b8      	ldr	r0, [r7, #8]
 800f1fe:	f003 faf9 	bl	80127f4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800f202:	2204      	movs	r2, #4
 800f204:	4908      	ldr	r1, [pc, #32]	; (800f228 <http_accept+0x80>)
 800f206:	68b8      	ldr	r0, [r7, #8]
 800f208:	f003 fb2e 	bl	8012868 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800f20c:	4907      	ldr	r1, [pc, #28]	; (800f22c <http_accept+0x84>)
 800f20e:	68b8      	ldr	r0, [r7, #8]
 800f210:	f003 face 	bl	80127b0 <tcp_sent>

  return ERR_OK;
 800f214:	2300      	movs	r3, #0
}
 800f216:	4618      	mov	r0, r3
 800f218:	3718      	adds	r7, #24
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	0800f069 	.word	0x0800f069
 800f224:	0800ef9d 	.word	0x0800ef9d
 800f228:	0800eff7 	.word	0x0800eff7
 800f22c:	0800efc1 	.word	0x0800efc1

0800f230 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	460b      	mov	r3, r1
 800f23a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d029      	beq.n	800f296 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800f242:	2101      	movs	r1, #1
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f003 f87f 	bl	8012348 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800f24a:	887b      	ldrh	r3, [r7, #2]
 800f24c:	461a      	mov	r2, r3
 800f24e:	4914      	ldr	r1, [pc, #80]	; (800f2a0 <httpd_init_pcb+0x70>)
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f002 f9c7 	bl	80115e4 <tcp_bind>
 800f256:	4603      	mov	r3, r0
 800f258:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800f25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d006      	beq.n	800f270 <httpd_init_pcb+0x40>
 800f262:	4b10      	ldr	r3, [pc, #64]	; (800f2a4 <httpd_init_pcb+0x74>)
 800f264:	f640 2257 	movw	r2, #2647	; 0xa57
 800f268:	490f      	ldr	r1, [pc, #60]	; (800f2a8 <httpd_init_pcb+0x78>)
 800f26a:	4810      	ldr	r0, [pc, #64]	; (800f2ac <httpd_init_pcb+0x7c>)
 800f26c:	f00b fdea 	bl	801ae44 <printf>
    pcb = altcp_listen(pcb);
 800f270:	21ff      	movs	r1, #255	; 0xff
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f002 fa6e 	bl	8011754 <tcp_listen_with_backlog>
 800f278:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d106      	bne.n	800f28e <httpd_init_pcb+0x5e>
 800f280:	4b08      	ldr	r3, [pc, #32]	; (800f2a4 <httpd_init_pcb+0x74>)
 800f282:	f640 2259 	movw	r2, #2649	; 0xa59
 800f286:	490a      	ldr	r1, [pc, #40]	; (800f2b0 <httpd_init_pcb+0x80>)
 800f288:	4808      	ldr	r0, [pc, #32]	; (800f2ac <httpd_init_pcb+0x7c>)
 800f28a:	f00b fddb 	bl	801ae44 <printf>
    altcp_accept(pcb, http_accept);
 800f28e:	4909      	ldr	r1, [pc, #36]	; (800f2b4 <httpd_init_pcb+0x84>)
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f003 fad1 	bl	8012838 <tcp_accept>
  }
}
 800f296:	bf00      	nop
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	08028d2c 	.word	0x08028d2c
 800f2a4:	08024948 	.word	0x08024948
 800f2a8:	08024aec 	.word	0x08024aec
 800f2ac:	08024990 	.word	0x08024990
 800f2b0:	08024b08 	.word	0x08024b08
 800f2b4:	0800f1a9 	.word	0x0800f1a9

0800f2b8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800f2be:	202e      	movs	r0, #46	; 0x2e
 800f2c0:	f003 fa34 	bl	801272c <tcp_new_ip_type>
 800f2c4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d106      	bne.n	800f2da <httpd_init+0x22>
 800f2cc:	4b07      	ldr	r3, [pc, #28]	; (800f2ec <httpd_init+0x34>)
 800f2ce:	f640 2272 	movw	r2, #2674	; 0xa72
 800f2d2:	4907      	ldr	r1, [pc, #28]	; (800f2f0 <httpd_init+0x38>)
 800f2d4:	4807      	ldr	r0, [pc, #28]	; (800f2f4 <httpd_init+0x3c>)
 800f2d6:	f00b fdb5 	bl	801ae44 <printf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800f2da:	2150      	movs	r1, #80	; 0x50
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7ff ffa7 	bl	800f230 <httpd_init_pcb>
}
 800f2e2:	bf00      	nop
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	08024948 	.word	0x08024948
 800f2f0:	08024b28 	.word	0x08024b28
 800f2f4:	08024990 	.word	0x08024990

0800f2f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	4603      	mov	r3, r0
 800f300:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f302:	88fb      	ldrh	r3, [r7, #6]
 800f304:	021b      	lsls	r3, r3, #8
 800f306:	b21a      	sxth	r2, r3
 800f308:	88fb      	ldrh	r3, [r7, #6]
 800f30a:	0a1b      	lsrs	r3, r3, #8
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	b21b      	sxth	r3, r3
 800f310:	4313      	orrs	r3, r2
 800f312:	b21b      	sxth	r3, r3
 800f314:	b29b      	uxth	r3, r3
}
 800f316:	4618      	mov	r0, r3
 800f318:	370c      	adds	r7, #12
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f322:	b480      	push	{r7}
 800f324:	b083      	sub	sp, #12
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	061a      	lsls	r2, r3, #24
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	021b      	lsls	r3, r3, #8
 800f332:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f336:	431a      	orrs	r2, r3
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	0a1b      	lsrs	r3, r3, #8
 800f33c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f340:	431a      	orrs	r2, r3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	0e1b      	lsrs	r3, r3, #24
 800f346:	4313      	orrs	r3, r2
}
 800f348:	4618      	mov	r0, r3
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800f360:	68b8      	ldr	r0, [r7, #8]
 800f362:	f7f0 ff5f 	bl	8000224 <strlen>
 800f366:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d101      	bne.n	800f372 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	e022      	b.n	800f3b8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	617b      	str	r3, [r7, #20]
 800f376:	e012      	b.n	800f39e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	781a      	ldrb	r2, [r3, #0]
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	429a      	cmp	r2, r3
 800f382:	d109      	bne.n	800f398 <lwip_strnstr+0x44>
 800f384:	693a      	ldr	r2, [r7, #16]
 800f386:	68b9      	ldr	r1, [r7, #8]
 800f388:	6978      	ldr	r0, [r7, #20]
 800f38a:	f00b fdec 	bl	801af66 <strncmp>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d101      	bne.n	800f398 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	e00f      	b.n	800f3b8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	3301      	adds	r3, #1
 800f39c:	617b      	str	r3, [r7, #20]
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d007      	beq.n	800f3b6 <lwip_strnstr+0x62>
 800f3a6:	697a      	ldr	r2, [r7, #20]
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	441a      	add	r2, r3
 800f3ac:	68f9      	ldr	r1, [r7, #12]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	440b      	add	r3, r1
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d9e0      	bls.n	800f378 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800f3b6:	2300      	movs	r3, #0
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3718      	adds	r7, #24
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f3ca:	f00b f8d7 	bl	801a57c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f3ce:	f000 f8d5 	bl	800f57c <mem_init>
  memp_init();
 800f3d2:	f000 fc31 	bl	800fc38 <memp_init>
  pbuf_init();
  netif_init();
 800f3d6:	f000 fcf7 	bl	800fdc8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f3da:	f007 ffcd 	bl	8017378 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f3de:	f001 fd9f 	bl	8010f20 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f3e2:	f007 ff0f 	bl	8017204 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f3e6:	bf00      	nop
 800f3e8:	3708      	adds	r7, #8
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
	...

0800f3f0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f3fa:	4b05      	ldr	r3, [pc, #20]	; (800f410 <ptr_to_mem+0x20>)
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	88fb      	ldrh	r3, [r7, #6]
 800f400:	4413      	add	r3, r2
}
 800f402:	4618      	mov	r0, r3
 800f404:	370c      	adds	r7, #12
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr
 800f40e:	bf00      	nop
 800f410:	20004eb0 	.word	0x20004eb0

0800f414 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f41c:	4b05      	ldr	r3, [pc, #20]	; (800f434 <mem_to_ptr+0x20>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	1ad3      	subs	r3, r2, r3
 800f424:	b29b      	uxth	r3, r3
}
 800f426:	4618      	mov	r0, r3
 800f428:	370c      	adds	r7, #12
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr
 800f432:	bf00      	nop
 800f434:	20004eb0 	.word	0x20004eb0

0800f438 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f438:	b590      	push	{r4, r7, lr}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f440:	4b45      	ldr	r3, [pc, #276]	; (800f558 <plug_holes+0x120>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	429a      	cmp	r2, r3
 800f448:	d206      	bcs.n	800f458 <plug_holes+0x20>
 800f44a:	4b44      	ldr	r3, [pc, #272]	; (800f55c <plug_holes+0x124>)
 800f44c:	f240 12df 	movw	r2, #479	; 0x1df
 800f450:	4943      	ldr	r1, [pc, #268]	; (800f560 <plug_holes+0x128>)
 800f452:	4844      	ldr	r0, [pc, #272]	; (800f564 <plug_holes+0x12c>)
 800f454:	f00b fcf6 	bl	801ae44 <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f458:	4b43      	ldr	r3, [pc, #268]	; (800f568 <plug_holes+0x130>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d306      	bcc.n	800f470 <plug_holes+0x38>
 800f462:	4b3e      	ldr	r3, [pc, #248]	; (800f55c <plug_holes+0x124>)
 800f464:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f468:	4940      	ldr	r1, [pc, #256]	; (800f56c <plug_holes+0x134>)
 800f46a:	483e      	ldr	r0, [pc, #248]	; (800f564 <plug_holes+0x12c>)
 800f46c:	f00b fcea 	bl	801ae44 <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	791b      	ldrb	r3, [r3, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d006      	beq.n	800f486 <plug_holes+0x4e>
 800f478:	4b38      	ldr	r3, [pc, #224]	; (800f55c <plug_holes+0x124>)
 800f47a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f47e:	493c      	ldr	r1, [pc, #240]	; (800f570 <plug_holes+0x138>)
 800f480:	4838      	ldr	r0, [pc, #224]	; (800f564 <plug_holes+0x12c>)
 800f482:	f00b fcdf 	bl	801ae44 <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	881b      	ldrh	r3, [r3, #0]
 800f48a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f48e:	d906      	bls.n	800f49e <plug_holes+0x66>
 800f490:	4b32      	ldr	r3, [pc, #200]	; (800f55c <plug_holes+0x124>)
 800f492:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f496:	4937      	ldr	r1, [pc, #220]	; (800f574 <plug_holes+0x13c>)
 800f498:	4832      	ldr	r0, [pc, #200]	; (800f564 <plug_holes+0x12c>)
 800f49a:	f00b fcd3 	bl	801ae44 <printf>

  nmem = ptr_to_mem(mem->next);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7ff ffa4 	bl	800f3f0 <ptr_to_mem>
 800f4a8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f4aa:	687a      	ldr	r2, [r7, #4]
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d024      	beq.n	800f4fc <plug_holes+0xc4>
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	791b      	ldrb	r3, [r3, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d120      	bne.n	800f4fc <plug_holes+0xc4>
 800f4ba:	4b2b      	ldr	r3, [pc, #172]	; (800f568 <plug_holes+0x130>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d01b      	beq.n	800f4fc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f4c4:	4b2c      	ldr	r3, [pc, #176]	; (800f578 <plug_holes+0x140>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	68fa      	ldr	r2, [r7, #12]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d102      	bne.n	800f4d4 <plug_holes+0x9c>
      lfree = mem;
 800f4ce:	4a2a      	ldr	r2, [pc, #168]	; (800f578 <plug_holes+0x140>)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	881a      	ldrh	r2, [r3, #0]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	881b      	ldrh	r3, [r3, #0]
 800f4e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f4e4:	d00a      	beq.n	800f4fc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	881b      	ldrh	r3, [r3, #0]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7ff ff80 	bl	800f3f0 <ptr_to_mem>
 800f4f0:	4604      	mov	r4, r0
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f7ff ff8e 	bl	800f414 <mem_to_ptr>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	885b      	ldrh	r3, [r3, #2]
 800f500:	4618      	mov	r0, r3
 800f502:	f7ff ff75 	bl	800f3f0 <ptr_to_mem>
 800f506:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f508:	68ba      	ldr	r2, [r7, #8]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d01f      	beq.n	800f550 <plug_holes+0x118>
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	791b      	ldrb	r3, [r3, #4]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d11b      	bne.n	800f550 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f518:	4b17      	ldr	r3, [pc, #92]	; (800f578 <plug_holes+0x140>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	429a      	cmp	r2, r3
 800f520:	d102      	bne.n	800f528 <plug_holes+0xf0>
      lfree = pmem;
 800f522:	4a15      	ldr	r2, [pc, #84]	; (800f578 <plug_holes+0x140>)
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	881a      	ldrh	r2, [r3, #0]
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	881b      	ldrh	r3, [r3, #0]
 800f534:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f538:	d00a      	beq.n	800f550 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	881b      	ldrh	r3, [r3, #0]
 800f53e:	4618      	mov	r0, r3
 800f540:	f7ff ff56 	bl	800f3f0 <ptr_to_mem>
 800f544:	4604      	mov	r4, r0
 800f546:	68b8      	ldr	r0, [r7, #8]
 800f548:	f7ff ff64 	bl	800f414 <mem_to_ptr>
 800f54c:	4603      	mov	r3, r0
 800f54e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f550:	bf00      	nop
 800f552:	3714      	adds	r7, #20
 800f554:	46bd      	mov	sp, r7
 800f556:	bd90      	pop	{r4, r7, pc}
 800f558:	20004eb0 	.word	0x20004eb0
 800f55c:	08024b44 	.word	0x08024b44
 800f560:	08024b74 	.word	0x08024b74
 800f564:	08024b8c 	.word	0x08024b8c
 800f568:	20004eb4 	.word	0x20004eb4
 800f56c:	08024bb4 	.word	0x08024bb4
 800f570:	08024bd0 	.word	0x08024bd0
 800f574:	08024bec 	.word	0x08024bec
 800f578:	20004ebc 	.word	0x20004ebc

0800f57c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f582:	4b1f      	ldr	r3, [pc, #124]	; (800f600 <mem_init+0x84>)
 800f584:	3303      	adds	r3, #3
 800f586:	f023 0303 	bic.w	r3, r3, #3
 800f58a:	461a      	mov	r2, r3
 800f58c:	4b1d      	ldr	r3, [pc, #116]	; (800f604 <mem_init+0x88>)
 800f58e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f590:	4b1c      	ldr	r3, [pc, #112]	; (800f604 <mem_init+0x88>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f59c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f5aa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800f5ae:	f7ff ff1f 	bl	800f3f0 <ptr_to_mem>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	4a14      	ldr	r2, [pc, #80]	; (800f608 <mem_init+0x8c>)
 800f5b6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f5b8:	4b13      	ldr	r3, [pc, #76]	; (800f608 <mem_init+0x8c>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2201      	movs	r2, #1
 800f5be:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f5c0:	4b11      	ldr	r3, [pc, #68]	; (800f608 <mem_init+0x8c>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f5c8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f5ca:	4b0f      	ldr	r3, [pc, #60]	; (800f608 <mem_init+0x8c>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f5d2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f5d4:	4b0b      	ldr	r3, [pc, #44]	; (800f604 <mem_init+0x88>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4a0c      	ldr	r2, [pc, #48]	; (800f60c <mem_init+0x90>)
 800f5da:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f5dc:	480c      	ldr	r0, [pc, #48]	; (800f610 <mem_init+0x94>)
 800f5de:	f00a ffdb 	bl	801a598 <sys_mutex_new>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d006      	beq.n	800f5f6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f5e8:	4b0a      	ldr	r3, [pc, #40]	; (800f614 <mem_init+0x98>)
 800f5ea:	f240 221f 	movw	r2, #543	; 0x21f
 800f5ee:	490a      	ldr	r1, [pc, #40]	; (800f618 <mem_init+0x9c>)
 800f5f0:	480a      	ldr	r0, [pc, #40]	; (800f61c <mem_init+0xa0>)
 800f5f2:	f00b fc27 	bl	801ae44 <printf>
  }
}
 800f5f6:	bf00      	nop
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	20008718 	.word	0x20008718
 800f604:	20004eb0 	.word	0x20004eb0
 800f608:	20004eb4 	.word	0x20004eb4
 800f60c:	20004ebc 	.word	0x20004ebc
 800f610:	20004eb8 	.word	0x20004eb8
 800f614:	08024b44 	.word	0x08024b44
 800f618:	08024c18 	.word	0x08024c18
 800f61c:	08024b8c 	.word	0x08024b8c

0800f620 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b086      	sub	sp, #24
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f7ff fef3 	bl	800f414 <mem_to_ptr>
 800f62e:	4603      	mov	r3, r0
 800f630:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	881b      	ldrh	r3, [r3, #0]
 800f636:	4618      	mov	r0, r3
 800f638:	f7ff feda 	bl	800f3f0 <ptr_to_mem>
 800f63c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	885b      	ldrh	r3, [r3, #2]
 800f642:	4618      	mov	r0, r3
 800f644:	f7ff fed4 	bl	800f3f0 <ptr_to_mem>
 800f648:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	881b      	ldrh	r3, [r3, #0]
 800f64e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f652:	d818      	bhi.n	800f686 <mem_link_valid+0x66>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	885b      	ldrh	r3, [r3, #2]
 800f658:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f65c:	d813      	bhi.n	800f686 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f662:	8afa      	ldrh	r2, [r7, #22]
 800f664:	429a      	cmp	r2, r3
 800f666:	d004      	beq.n	800f672 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	881b      	ldrh	r3, [r3, #0]
 800f66c:	8afa      	ldrh	r2, [r7, #22]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d109      	bne.n	800f686 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f672:	4b08      	ldr	r3, [pc, #32]	; (800f694 <mem_link_valid+0x74>)
 800f674:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f676:	693a      	ldr	r2, [r7, #16]
 800f678:	429a      	cmp	r2, r3
 800f67a:	d006      	beq.n	800f68a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	885b      	ldrh	r3, [r3, #2]
 800f680:	8afa      	ldrh	r2, [r7, #22]
 800f682:	429a      	cmp	r2, r3
 800f684:	d001      	beq.n	800f68a <mem_link_valid+0x6a>
    return 0;
 800f686:	2300      	movs	r3, #0
 800f688:	e000      	b.n	800f68c <mem_link_valid+0x6c>
  }
  return 1;
 800f68a:	2301      	movs	r3, #1
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3718      	adds	r7, #24
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	20004eb4 	.word	0x20004eb4

0800f698 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b088      	sub	sp, #32
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d070      	beq.n	800f788 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f003 0303 	and.w	r3, r3, #3
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d00d      	beq.n	800f6cc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f6b0:	4b37      	ldr	r3, [pc, #220]	; (800f790 <mem_free+0xf8>)
 800f6b2:	f240 2273 	movw	r2, #627	; 0x273
 800f6b6:	4937      	ldr	r1, [pc, #220]	; (800f794 <mem_free+0xfc>)
 800f6b8:	4837      	ldr	r0, [pc, #220]	; (800f798 <mem_free+0x100>)
 800f6ba:	f00b fbc3 	bl	801ae44 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f6be:	f00a ffc9 	bl	801a654 <sys_arch_protect>
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	f00a ffd3 	bl	801a670 <sys_arch_unprotect>
    return;
 800f6ca:	e05e      	b.n	800f78a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	3b08      	subs	r3, #8
 800f6d0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f6d2:	4b32      	ldr	r3, [pc, #200]	; (800f79c <mem_free+0x104>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	69fa      	ldr	r2, [r7, #28]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d306      	bcc.n	800f6ea <mem_free+0x52>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f103 020c 	add.w	r2, r3, #12
 800f6e2:	4b2f      	ldr	r3, [pc, #188]	; (800f7a0 <mem_free+0x108>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d90d      	bls.n	800f706 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f6ea:	4b29      	ldr	r3, [pc, #164]	; (800f790 <mem_free+0xf8>)
 800f6ec:	f240 227f 	movw	r2, #639	; 0x27f
 800f6f0:	492c      	ldr	r1, [pc, #176]	; (800f7a4 <mem_free+0x10c>)
 800f6f2:	4829      	ldr	r0, [pc, #164]	; (800f798 <mem_free+0x100>)
 800f6f4:	f00b fba6 	bl	801ae44 <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f6f8:	f00a ffac 	bl	801a654 <sys_arch_protect>
 800f6fc:	6138      	str	r0, [r7, #16]
 800f6fe:	6938      	ldr	r0, [r7, #16]
 800f700:	f00a ffb6 	bl	801a670 <sys_arch_unprotect>
    return;
 800f704:	e041      	b.n	800f78a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f706:	4828      	ldr	r0, [pc, #160]	; (800f7a8 <mem_free+0x110>)
 800f708:	f00a ff62 	bl	801a5d0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	791b      	ldrb	r3, [r3, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d110      	bne.n	800f736 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f714:	4b1e      	ldr	r3, [pc, #120]	; (800f790 <mem_free+0xf8>)
 800f716:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f71a:	4924      	ldr	r1, [pc, #144]	; (800f7ac <mem_free+0x114>)
 800f71c:	481e      	ldr	r0, [pc, #120]	; (800f798 <mem_free+0x100>)
 800f71e:	f00b fb91 	bl	801ae44 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800f722:	4821      	ldr	r0, [pc, #132]	; (800f7a8 <mem_free+0x110>)
 800f724:	f00a ff63 	bl	801a5ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f728:	f00a ff94 	bl	801a654 <sys_arch_protect>
 800f72c:	6178      	str	r0, [r7, #20]
 800f72e:	6978      	ldr	r0, [r7, #20]
 800f730:	f00a ff9e 	bl	801a670 <sys_arch_unprotect>
    return;
 800f734:	e029      	b.n	800f78a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f736:	69f8      	ldr	r0, [r7, #28]
 800f738:	f7ff ff72 	bl	800f620 <mem_link_valid>
 800f73c:	4603      	mov	r3, r0
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d110      	bne.n	800f764 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f742:	4b13      	ldr	r3, [pc, #76]	; (800f790 <mem_free+0xf8>)
 800f744:	f240 2295 	movw	r2, #661	; 0x295
 800f748:	4919      	ldr	r1, [pc, #100]	; (800f7b0 <mem_free+0x118>)
 800f74a:	4813      	ldr	r0, [pc, #76]	; (800f798 <mem_free+0x100>)
 800f74c:	f00b fb7a 	bl	801ae44 <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800f750:	4815      	ldr	r0, [pc, #84]	; (800f7a8 <mem_free+0x110>)
 800f752:	f00a ff4c 	bl	801a5ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f756:	f00a ff7d 	bl	801a654 <sys_arch_protect>
 800f75a:	61b8      	str	r0, [r7, #24]
 800f75c:	69b8      	ldr	r0, [r7, #24]
 800f75e:	f00a ff87 	bl	801a670 <sys_arch_unprotect>
    return;
 800f762:	e012      	b.n	800f78a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	2200      	movs	r2, #0
 800f768:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f76a:	4b12      	ldr	r3, [pc, #72]	; (800f7b4 <mem_free+0x11c>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	69fa      	ldr	r2, [r7, #28]
 800f770:	429a      	cmp	r2, r3
 800f772:	d202      	bcs.n	800f77a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f774:	4a0f      	ldr	r2, [pc, #60]	; (800f7b4 <mem_free+0x11c>)
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f77a:	69f8      	ldr	r0, [r7, #28]
 800f77c:	f7ff fe5c 	bl	800f438 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f780:	4809      	ldr	r0, [pc, #36]	; (800f7a8 <mem_free+0x110>)
 800f782:	f00a ff34 	bl	801a5ee <sys_mutex_unlock>
 800f786:	e000      	b.n	800f78a <mem_free+0xf2>
    return;
 800f788:	bf00      	nop
}
 800f78a:	3720      	adds	r7, #32
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	08024b44 	.word	0x08024b44
 800f794:	08024c34 	.word	0x08024c34
 800f798:	08024b8c 	.word	0x08024b8c
 800f79c:	20004eb0 	.word	0x20004eb0
 800f7a0:	20004eb4 	.word	0x20004eb4
 800f7a4:	08024c58 	.word	0x08024c58
 800f7a8:	20004eb8 	.word	0x20004eb8
 800f7ac:	08024c74 	.word	0x08024c74
 800f7b0:	08024c9c 	.word	0x08024c9c
 800f7b4:	20004ebc 	.word	0x20004ebc

0800f7b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b088      	sub	sp, #32
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f7c4:	887b      	ldrh	r3, [r7, #2]
 800f7c6:	3303      	adds	r3, #3
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	f023 0303 	bic.w	r3, r3, #3
 800f7ce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f7d0:	8bfb      	ldrh	r3, [r7, #30]
 800f7d2:	2b0b      	cmp	r3, #11
 800f7d4:	d801      	bhi.n	800f7da <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f7d6:	230c      	movs	r3, #12
 800f7d8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f7da:	8bfb      	ldrh	r3, [r7, #30]
 800f7dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f7e0:	d803      	bhi.n	800f7ea <mem_trim+0x32>
 800f7e2:	8bfa      	ldrh	r2, [r7, #30]
 800f7e4:	887b      	ldrh	r3, [r7, #2]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d201      	bcs.n	800f7ee <mem_trim+0x36>
    return NULL;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	e0d8      	b.n	800f9a0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f7ee:	4b6e      	ldr	r3, [pc, #440]	; (800f9a8 <mem_trim+0x1f0>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d304      	bcc.n	800f802 <mem_trim+0x4a>
 800f7f8:	4b6c      	ldr	r3, [pc, #432]	; (800f9ac <mem_trim+0x1f4>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	687a      	ldr	r2, [r7, #4]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d306      	bcc.n	800f810 <mem_trim+0x58>
 800f802:	4b6b      	ldr	r3, [pc, #428]	; (800f9b0 <mem_trim+0x1f8>)
 800f804:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f808:	496a      	ldr	r1, [pc, #424]	; (800f9b4 <mem_trim+0x1fc>)
 800f80a:	486b      	ldr	r0, [pc, #428]	; (800f9b8 <mem_trim+0x200>)
 800f80c:	f00b fb1a 	bl	801ae44 <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f810:	4b65      	ldr	r3, [pc, #404]	; (800f9a8 <mem_trim+0x1f0>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	429a      	cmp	r2, r3
 800f818:	d304      	bcc.n	800f824 <mem_trim+0x6c>
 800f81a:	4b64      	ldr	r3, [pc, #400]	; (800f9ac <mem_trim+0x1f4>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	429a      	cmp	r2, r3
 800f822:	d307      	bcc.n	800f834 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f824:	f00a ff16 	bl	801a654 <sys_arch_protect>
 800f828:	60b8      	str	r0, [r7, #8]
 800f82a:	68b8      	ldr	r0, [r7, #8]
 800f82c:	f00a ff20 	bl	801a670 <sys_arch_unprotect>
    return rmem;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	e0b5      	b.n	800f9a0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	3b08      	subs	r3, #8
 800f838:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f83a:	69b8      	ldr	r0, [r7, #24]
 800f83c:	f7ff fdea 	bl	800f414 <mem_to_ptr>
 800f840:	4603      	mov	r3, r0
 800f842:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f844:	69bb      	ldr	r3, [r7, #24]
 800f846:	881a      	ldrh	r2, [r3, #0]
 800f848:	8afb      	ldrh	r3, [r7, #22]
 800f84a:	1ad3      	subs	r3, r2, r3
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	3b08      	subs	r3, #8
 800f850:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f852:	8bfa      	ldrh	r2, [r7, #30]
 800f854:	8abb      	ldrh	r3, [r7, #20]
 800f856:	429a      	cmp	r2, r3
 800f858:	d906      	bls.n	800f868 <mem_trim+0xb0>
 800f85a:	4b55      	ldr	r3, [pc, #340]	; (800f9b0 <mem_trim+0x1f8>)
 800f85c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f860:	4956      	ldr	r1, [pc, #344]	; (800f9bc <mem_trim+0x204>)
 800f862:	4855      	ldr	r0, [pc, #340]	; (800f9b8 <mem_trim+0x200>)
 800f864:	f00b faee 	bl	801ae44 <printf>
  if (newsize > size) {
 800f868:	8bfa      	ldrh	r2, [r7, #30]
 800f86a:	8abb      	ldrh	r3, [r7, #20]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d901      	bls.n	800f874 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f870:	2300      	movs	r3, #0
 800f872:	e095      	b.n	800f9a0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f874:	8bfa      	ldrh	r2, [r7, #30]
 800f876:	8abb      	ldrh	r3, [r7, #20]
 800f878:	429a      	cmp	r2, r3
 800f87a:	d101      	bne.n	800f880 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	e08f      	b.n	800f9a0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f880:	484f      	ldr	r0, [pc, #316]	; (800f9c0 <mem_trim+0x208>)
 800f882:	f00a fea5 	bl	801a5d0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	881b      	ldrh	r3, [r3, #0]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7ff fdb0 	bl	800f3f0 <ptr_to_mem>
 800f890:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	791b      	ldrb	r3, [r3, #4]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d13f      	bne.n	800f91a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f89a:	69bb      	ldr	r3, [r7, #24]
 800f89c:	881b      	ldrh	r3, [r3, #0]
 800f89e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f8a2:	d106      	bne.n	800f8b2 <mem_trim+0xfa>
 800f8a4:	4b42      	ldr	r3, [pc, #264]	; (800f9b0 <mem_trim+0x1f8>)
 800f8a6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f8aa:	4946      	ldr	r1, [pc, #280]	; (800f9c4 <mem_trim+0x20c>)
 800f8ac:	4842      	ldr	r0, [pc, #264]	; (800f9b8 <mem_trim+0x200>)
 800f8ae:	f00b fac9 	bl	801ae44 <printf>
    /* remember the old next pointer */
    next = mem2->next;
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	881b      	ldrh	r3, [r3, #0]
 800f8b6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f8b8:	8afa      	ldrh	r2, [r7, #22]
 800f8ba:	8bfb      	ldrh	r3, [r7, #30]
 800f8bc:	4413      	add	r3, r2
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	3308      	adds	r3, #8
 800f8c2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f8c4:	4b40      	ldr	r3, [pc, #256]	; (800f9c8 <mem_trim+0x210>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	693a      	ldr	r2, [r7, #16]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d106      	bne.n	800f8dc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f8ce:	89fb      	ldrh	r3, [r7, #14]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7ff fd8d 	bl	800f3f0 <ptr_to_mem>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	4a3b      	ldr	r2, [pc, #236]	; (800f9c8 <mem_trim+0x210>)
 800f8da:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f8dc:	89fb      	ldrh	r3, [r7, #14]
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7ff fd86 	bl	800f3f0 <ptr_to_mem>
 800f8e4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	89ba      	ldrh	r2, [r7, #12]
 800f8f0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	8afa      	ldrh	r2, [r7, #22]
 800f8f6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	89fa      	ldrh	r2, [r7, #14]
 800f8fc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f906:	d047      	beq.n	800f998 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	881b      	ldrh	r3, [r3, #0]
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7ff fd6f 	bl	800f3f0 <ptr_to_mem>
 800f912:	4602      	mov	r2, r0
 800f914:	89fb      	ldrh	r3, [r7, #14]
 800f916:	8053      	strh	r3, [r2, #2]
 800f918:	e03e      	b.n	800f998 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f91a:	8bfb      	ldrh	r3, [r7, #30]
 800f91c:	f103 0214 	add.w	r2, r3, #20
 800f920:	8abb      	ldrh	r3, [r7, #20]
 800f922:	429a      	cmp	r2, r3
 800f924:	d838      	bhi.n	800f998 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f926:	8afa      	ldrh	r2, [r7, #22]
 800f928:	8bfb      	ldrh	r3, [r7, #30]
 800f92a:	4413      	add	r3, r2
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	3308      	adds	r3, #8
 800f930:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f932:	69bb      	ldr	r3, [r7, #24]
 800f934:	881b      	ldrh	r3, [r3, #0]
 800f936:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f93a:	d106      	bne.n	800f94a <mem_trim+0x192>
 800f93c:	4b1c      	ldr	r3, [pc, #112]	; (800f9b0 <mem_trim+0x1f8>)
 800f93e:	f240 3216 	movw	r2, #790	; 0x316
 800f942:	4920      	ldr	r1, [pc, #128]	; (800f9c4 <mem_trim+0x20c>)
 800f944:	481c      	ldr	r0, [pc, #112]	; (800f9b8 <mem_trim+0x200>)
 800f946:	f00b fa7d 	bl	801ae44 <printf>
    mem2 = ptr_to_mem(ptr2);
 800f94a:	89fb      	ldrh	r3, [r7, #14]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7ff fd4f 	bl	800f3f0 <ptr_to_mem>
 800f952:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f954:	4b1c      	ldr	r3, [pc, #112]	; (800f9c8 <mem_trim+0x210>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	693a      	ldr	r2, [r7, #16]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d202      	bcs.n	800f964 <mem_trim+0x1ac>
      lfree = mem2;
 800f95e:	4a1a      	ldr	r2, [pc, #104]	; (800f9c8 <mem_trim+0x210>)
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	2200      	movs	r2, #0
 800f968:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	881a      	ldrh	r2, [r3, #0]
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	8afa      	ldrh	r2, [r7, #22]
 800f976:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f978:	69bb      	ldr	r3, [r7, #24]
 800f97a:	89fa      	ldrh	r2, [r7, #14]
 800f97c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f986:	d007      	beq.n	800f998 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	881b      	ldrh	r3, [r3, #0]
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7ff fd2f 	bl	800f3f0 <ptr_to_mem>
 800f992:	4602      	mov	r2, r0
 800f994:	89fb      	ldrh	r3, [r7, #14]
 800f996:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f998:	4809      	ldr	r0, [pc, #36]	; (800f9c0 <mem_trim+0x208>)
 800f99a:	f00a fe28 	bl	801a5ee <sys_mutex_unlock>
  return rmem;
 800f99e:	687b      	ldr	r3, [r7, #4]
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3720      	adds	r7, #32
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}
 800f9a8:	20004eb0 	.word	0x20004eb0
 800f9ac:	20004eb4 	.word	0x20004eb4
 800f9b0:	08024b44 	.word	0x08024b44
 800f9b4:	08024cd0 	.word	0x08024cd0
 800f9b8:	08024b8c 	.word	0x08024b8c
 800f9bc:	08024ce8 	.word	0x08024ce8
 800f9c0:	20004eb8 	.word	0x20004eb8
 800f9c4:	08024d08 	.word	0x08024d08
 800f9c8:	20004ebc 	.word	0x20004ebc

0800f9cc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b088      	sub	sp, #32
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f9d6:	88fb      	ldrh	r3, [r7, #6]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d101      	bne.n	800f9e0 <mem_malloc+0x14>
    return NULL;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	e0e2      	b.n	800fba6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f9e0:	88fb      	ldrh	r3, [r7, #6]
 800f9e2:	3303      	adds	r3, #3
 800f9e4:	b29b      	uxth	r3, r3
 800f9e6:	f023 0303 	bic.w	r3, r3, #3
 800f9ea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f9ec:	8bbb      	ldrh	r3, [r7, #28]
 800f9ee:	2b0b      	cmp	r3, #11
 800f9f0:	d801      	bhi.n	800f9f6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f9f2:	230c      	movs	r3, #12
 800f9f4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f9f6:	8bbb      	ldrh	r3, [r7, #28]
 800f9f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f9fc:	d803      	bhi.n	800fa06 <mem_malloc+0x3a>
 800f9fe:	8bba      	ldrh	r2, [r7, #28]
 800fa00:	88fb      	ldrh	r3, [r7, #6]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d201      	bcs.n	800fa0a <mem_malloc+0x3e>
    return NULL;
 800fa06:	2300      	movs	r3, #0
 800fa08:	e0cd      	b.n	800fba6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800fa0a:	4869      	ldr	r0, [pc, #420]	; (800fbb0 <mem_malloc+0x1e4>)
 800fa0c:	f00a fde0 	bl	801a5d0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fa10:	4b68      	ldr	r3, [pc, #416]	; (800fbb4 <mem_malloc+0x1e8>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff fcfd 	bl	800f414 <mem_to_ptr>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	83fb      	strh	r3, [r7, #30]
 800fa1e:	e0b7      	b.n	800fb90 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fa20:	8bfb      	ldrh	r3, [r7, #30]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7ff fce4 	bl	800f3f0 <ptr_to_mem>
 800fa28:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	791b      	ldrb	r3, [r3, #4]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f040 80a7 	bne.w	800fb82 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	881b      	ldrh	r3, [r3, #0]
 800fa38:	461a      	mov	r2, r3
 800fa3a:	8bfb      	ldrh	r3, [r7, #30]
 800fa3c:	1ad3      	subs	r3, r2, r3
 800fa3e:	f1a3 0208 	sub.w	r2, r3, #8
 800fa42:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800fa44:	429a      	cmp	r2, r3
 800fa46:	f0c0 809c 	bcc.w	800fb82 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	881b      	ldrh	r3, [r3, #0]
 800fa4e:	461a      	mov	r2, r3
 800fa50:	8bfb      	ldrh	r3, [r7, #30]
 800fa52:	1ad3      	subs	r3, r2, r3
 800fa54:	f1a3 0208 	sub.w	r2, r3, #8
 800fa58:	8bbb      	ldrh	r3, [r7, #28]
 800fa5a:	3314      	adds	r3, #20
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d333      	bcc.n	800fac8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fa60:	8bfa      	ldrh	r2, [r7, #30]
 800fa62:	8bbb      	ldrh	r3, [r7, #28]
 800fa64:	4413      	add	r3, r2
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	3308      	adds	r3, #8
 800fa6a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fa6c:	8a7b      	ldrh	r3, [r7, #18]
 800fa6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fa72:	d106      	bne.n	800fa82 <mem_malloc+0xb6>
 800fa74:	4b50      	ldr	r3, [pc, #320]	; (800fbb8 <mem_malloc+0x1ec>)
 800fa76:	f240 3287 	movw	r2, #903	; 0x387
 800fa7a:	4950      	ldr	r1, [pc, #320]	; (800fbbc <mem_malloc+0x1f0>)
 800fa7c:	4850      	ldr	r0, [pc, #320]	; (800fbc0 <mem_malloc+0x1f4>)
 800fa7e:	f00b f9e1 	bl	801ae44 <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fa82:	8a7b      	ldrh	r3, [r7, #18]
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7ff fcb3 	bl	800f3f0 <ptr_to_mem>
 800fa8a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	881a      	ldrh	r2, [r3, #0]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	8bfa      	ldrh	r2, [r7, #30]
 800fa9e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	8a7a      	ldrh	r2, [r7, #18]
 800faa4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	2201      	movs	r2, #1
 800faaa:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	881b      	ldrh	r3, [r3, #0]
 800fab0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fab4:	d00b      	beq.n	800face <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	881b      	ldrh	r3, [r3, #0]
 800faba:	4618      	mov	r0, r3
 800fabc:	f7ff fc98 	bl	800f3f0 <ptr_to_mem>
 800fac0:	4602      	mov	r2, r0
 800fac2:	8a7b      	ldrh	r3, [r7, #18]
 800fac4:	8053      	strh	r3, [r2, #2]
 800fac6:	e002      	b.n	800face <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	2201      	movs	r2, #1
 800facc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800face:	4b39      	ldr	r3, [pc, #228]	; (800fbb4 <mem_malloc+0x1e8>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	697a      	ldr	r2, [r7, #20]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d127      	bne.n	800fb28 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800fad8:	4b36      	ldr	r3, [pc, #216]	; (800fbb4 <mem_malloc+0x1e8>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fade:	e005      	b.n	800faec <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800fae0:	69bb      	ldr	r3, [r7, #24]
 800fae2:	881b      	ldrh	r3, [r3, #0]
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7ff fc83 	bl	800f3f0 <ptr_to_mem>
 800faea:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800faec:	69bb      	ldr	r3, [r7, #24]
 800faee:	791b      	ldrb	r3, [r3, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d004      	beq.n	800fafe <mem_malloc+0x132>
 800faf4:	4b33      	ldr	r3, [pc, #204]	; (800fbc4 <mem_malloc+0x1f8>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	69ba      	ldr	r2, [r7, #24]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d1f0      	bne.n	800fae0 <mem_malloc+0x114>
          }
          lfree = cur;
 800fafe:	4a2d      	ldr	r2, [pc, #180]	; (800fbb4 <mem_malloc+0x1e8>)
 800fb00:	69bb      	ldr	r3, [r7, #24]
 800fb02:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fb04:	4b2b      	ldr	r3, [pc, #172]	; (800fbb4 <mem_malloc+0x1e8>)
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	4b2e      	ldr	r3, [pc, #184]	; (800fbc4 <mem_malloc+0x1f8>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d00b      	beq.n	800fb28 <mem_malloc+0x15c>
 800fb10:	4b28      	ldr	r3, [pc, #160]	; (800fbb4 <mem_malloc+0x1e8>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	791b      	ldrb	r3, [r3, #4]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d006      	beq.n	800fb28 <mem_malloc+0x15c>
 800fb1a:	4b27      	ldr	r3, [pc, #156]	; (800fbb8 <mem_malloc+0x1ec>)
 800fb1c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800fb20:	4929      	ldr	r1, [pc, #164]	; (800fbc8 <mem_malloc+0x1fc>)
 800fb22:	4827      	ldr	r0, [pc, #156]	; (800fbc0 <mem_malloc+0x1f4>)
 800fb24:	f00b f98e 	bl	801ae44 <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800fb28:	4821      	ldr	r0, [pc, #132]	; (800fbb0 <mem_malloc+0x1e4>)
 800fb2a:	f00a fd60 	bl	801a5ee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fb2e:	8bba      	ldrh	r2, [r7, #28]
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	4413      	add	r3, r2
 800fb34:	3308      	adds	r3, #8
 800fb36:	4a23      	ldr	r2, [pc, #140]	; (800fbc4 <mem_malloc+0x1f8>)
 800fb38:	6812      	ldr	r2, [r2, #0]
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d906      	bls.n	800fb4c <mem_malloc+0x180>
 800fb3e:	4b1e      	ldr	r3, [pc, #120]	; (800fbb8 <mem_malloc+0x1ec>)
 800fb40:	f240 32b9 	movw	r2, #953	; 0x3b9
 800fb44:	4921      	ldr	r1, [pc, #132]	; (800fbcc <mem_malloc+0x200>)
 800fb46:	481e      	ldr	r0, [pc, #120]	; (800fbc0 <mem_malloc+0x1f4>)
 800fb48:	f00b f97c 	bl	801ae44 <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	f003 0303 	and.w	r3, r3, #3
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d006      	beq.n	800fb64 <mem_malloc+0x198>
 800fb56:	4b18      	ldr	r3, [pc, #96]	; (800fbb8 <mem_malloc+0x1ec>)
 800fb58:	f240 32bb 	movw	r2, #955	; 0x3bb
 800fb5c:	491c      	ldr	r1, [pc, #112]	; (800fbd0 <mem_malloc+0x204>)
 800fb5e:	4818      	ldr	r0, [pc, #96]	; (800fbc0 <mem_malloc+0x1f4>)
 800fb60:	f00b f970 	bl	801ae44 <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	f003 0303 	and.w	r3, r3, #3
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d006      	beq.n	800fb7c <mem_malloc+0x1b0>
 800fb6e:	4b12      	ldr	r3, [pc, #72]	; (800fbb8 <mem_malloc+0x1ec>)
 800fb70:	f240 32bd 	movw	r2, #957	; 0x3bd
 800fb74:	4917      	ldr	r1, [pc, #92]	; (800fbd4 <mem_malloc+0x208>)
 800fb76:	4812      	ldr	r0, [pc, #72]	; (800fbc0 <mem_malloc+0x1f4>)
 800fb78:	f00b f964 	bl	801ae44 <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	3308      	adds	r3, #8
 800fb80:	e011      	b.n	800fba6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800fb82:	8bfb      	ldrh	r3, [r7, #30]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff fc33 	bl	800f3f0 <ptr_to_mem>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	881b      	ldrh	r3, [r3, #0]
 800fb8e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fb90:	8bfa      	ldrh	r2, [r7, #30]
 800fb92:	8bbb      	ldrh	r3, [r7, #28]
 800fb94:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	f4ff af41 	bcc.w	800fa20 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fb9e:	4804      	ldr	r0, [pc, #16]	; (800fbb0 <mem_malloc+0x1e4>)
 800fba0:	f00a fd25 	bl	801a5ee <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3720      	adds	r7, #32
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	20004eb8 	.word	0x20004eb8
 800fbb4:	20004ebc 	.word	0x20004ebc
 800fbb8:	08024b44 	.word	0x08024b44
 800fbbc:	08024d08 	.word	0x08024d08
 800fbc0:	08024b8c 	.word	0x08024b8c
 800fbc4:	20004eb4 	.word	0x20004eb4
 800fbc8:	08024d1c 	.word	0x08024d1c
 800fbcc:	08024d38 	.word	0x08024d38
 800fbd0:	08024d68 	.word	0x08024d68
 800fbd4:	08024d98 	.word	0x08024d98

0800fbd8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b085      	sub	sp, #20
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	689b      	ldr	r3, [r3, #8]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	3303      	adds	r3, #3
 800fbee:	f023 0303 	bic.w	r3, r3, #3
 800fbf2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	60fb      	str	r3, [r7, #12]
 800fbf8:	e011      	b.n	800fc1e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	681a      	ldr	r2, [r3, #0]
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	689b      	ldr	r3, [r3, #8]
 800fc08:	68ba      	ldr	r2, [r7, #8]
 800fc0a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	881b      	ldrh	r3, [r3, #0]
 800fc10:	461a      	mov	r2, r3
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	4413      	add	r3, r2
 800fc16:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	60fb      	str	r3, [r7, #12]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	885b      	ldrh	r3, [r3, #2]
 800fc22:	461a      	mov	r2, r3
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	4293      	cmp	r3, r2
 800fc28:	dbe7      	blt.n	800fbfa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fc2a:	bf00      	nop
 800fc2c:	bf00      	nop
 800fc2e:	3714      	adds	r7, #20
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fc3e:	2300      	movs	r3, #0
 800fc40:	80fb      	strh	r3, [r7, #6]
 800fc42:	e009      	b.n	800fc58 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fc44:	88fb      	ldrh	r3, [r7, #6]
 800fc46:	4a08      	ldr	r2, [pc, #32]	; (800fc68 <memp_init+0x30>)
 800fc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7ff ffc3 	bl	800fbd8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fc52:	88fb      	ldrh	r3, [r7, #6]
 800fc54:	3301      	adds	r3, #1
 800fc56:	80fb      	strh	r3, [r7, #6]
 800fc58:	88fb      	ldrh	r3, [r7, #6]
 800fc5a:	2b0c      	cmp	r3, #12
 800fc5c:	d9f2      	bls.n	800fc44 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fc5e:	bf00      	nop
 800fc60:	bf00      	nop
 800fc62:	3708      	adds	r7, #8
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	08028cb8 	.word	0x08028cb8

0800fc6c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fc74:	f00a fcee 	bl	801a654 <sys_arch_protect>
 800fc78:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d015      	beq.n	800fcb4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	689b      	ldr	r3, [r3, #8]
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	6812      	ldr	r2, [r2, #0]
 800fc90:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	f003 0303 	and.w	r3, r3, #3
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d006      	beq.n	800fcaa <do_memp_malloc_pool+0x3e>
 800fc9c:	4b09      	ldr	r3, [pc, #36]	; (800fcc4 <do_memp_malloc_pool+0x58>)
 800fc9e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800fca2:	4909      	ldr	r1, [pc, #36]	; (800fcc8 <do_memp_malloc_pool+0x5c>)
 800fca4:	4809      	ldr	r0, [pc, #36]	; (800fccc <do_memp_malloc_pool+0x60>)
 800fca6:	f00b f8cd 	bl	801ae44 <printf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f00a fce0 	bl	801a670 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	e003      	b.n	800fcbc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f00a fcdb 	bl	801a670 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800fcba:	2300      	movs	r3, #0
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3710      	adds	r7, #16
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	08024dbc 	.word	0x08024dbc
 800fcc8:	08024dec 	.word	0x08024dec
 800fccc:	08024e10 	.word	0x08024e10

0800fcd0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fcda:	79fb      	ldrb	r3, [r7, #7]
 800fcdc:	2b0c      	cmp	r3, #12
 800fcde:	d908      	bls.n	800fcf2 <memp_malloc+0x22>
 800fce0:	4b0a      	ldr	r3, [pc, #40]	; (800fd0c <memp_malloc+0x3c>)
 800fce2:	f240 1257 	movw	r2, #343	; 0x157
 800fce6:	490a      	ldr	r1, [pc, #40]	; (800fd10 <memp_malloc+0x40>)
 800fce8:	480a      	ldr	r0, [pc, #40]	; (800fd14 <memp_malloc+0x44>)
 800fcea:	f00b f8ab 	bl	801ae44 <printf>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e008      	b.n	800fd04 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fcf2:	79fb      	ldrb	r3, [r7, #7]
 800fcf4:	4a08      	ldr	r2, [pc, #32]	; (800fd18 <memp_malloc+0x48>)
 800fcf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7ff ffb6 	bl	800fc6c <do_memp_malloc_pool>
 800fd00:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fd02:	68fb      	ldr	r3, [r7, #12]
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3710      	adds	r7, #16
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	08024dbc 	.word	0x08024dbc
 800fd10:	08024e4c 	.word	0x08024e4c
 800fd14:	08024e10 	.word	0x08024e10
 800fd18:	08028cb8 	.word	0x08028cb8

0800fd1c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	f003 0303 	and.w	r3, r3, #3
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d006      	beq.n	800fd3e <do_memp_free_pool+0x22>
 800fd30:	4b0d      	ldr	r3, [pc, #52]	; (800fd68 <do_memp_free_pool+0x4c>)
 800fd32:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fd36:	490d      	ldr	r1, [pc, #52]	; (800fd6c <do_memp_free_pool+0x50>)
 800fd38:	480d      	ldr	r0, [pc, #52]	; (800fd70 <do_memp_free_pool+0x54>)
 800fd3a:	f00b f883 	bl	801ae44 <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fd42:	f00a fc87 	bl	801a654 <sys_arch_protect>
 800fd46:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	689b      	ldr	r3, [r3, #8]
 800fd56:	68fa      	ldr	r2, [r7, #12]
 800fd58:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fd5a:	68b8      	ldr	r0, [r7, #8]
 800fd5c:	f00a fc88 	bl	801a670 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fd60:	bf00      	nop
 800fd62:	3710      	adds	r7, #16
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	08024dbc 	.word	0x08024dbc
 800fd6c:	08024e6c 	.word	0x08024e6c
 800fd70:	08024e10 	.word	0x08024e10

0800fd74 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	6039      	str	r1, [r7, #0]
 800fd7e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fd80:	79fb      	ldrb	r3, [r7, #7]
 800fd82:	2b0c      	cmp	r3, #12
 800fd84:	d907      	bls.n	800fd96 <memp_free+0x22>
 800fd86:	4b0c      	ldr	r3, [pc, #48]	; (800fdb8 <memp_free+0x44>)
 800fd88:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800fd8c:	490b      	ldr	r1, [pc, #44]	; (800fdbc <memp_free+0x48>)
 800fd8e:	480c      	ldr	r0, [pc, #48]	; (800fdc0 <memp_free+0x4c>)
 800fd90:	f00b f858 	bl	801ae44 <printf>
 800fd94:	e00c      	b.n	800fdb0 <memp_free+0x3c>

  if (mem == NULL) {
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d008      	beq.n	800fdae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fd9c:	79fb      	ldrb	r3, [r7, #7]
 800fd9e:	4a09      	ldr	r2, [pc, #36]	; (800fdc4 <memp_free+0x50>)
 800fda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fda4:	6839      	ldr	r1, [r7, #0]
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7ff ffb8 	bl	800fd1c <do_memp_free_pool>
 800fdac:	e000      	b.n	800fdb0 <memp_free+0x3c>
    return;
 800fdae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fdb0:	3708      	adds	r7, #8
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	08024dbc 	.word	0x08024dbc
 800fdbc:	08024e8c 	.word	0x08024e8c
 800fdc0:	08024e10 	.word	0x08024e10
 800fdc4:	08028cb8 	.word	0x08028cb8

0800fdc8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fdcc:	bf00      	nop
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr
	...

0800fdd8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b086      	sub	sp, #24
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	607a      	str	r2, [r7, #4]
 800fde4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d108      	bne.n	800fdfe <netif_add+0x26>
 800fdec:	4b56      	ldr	r3, [pc, #344]	; (800ff48 <netif_add+0x170>)
 800fdee:	f240 1227 	movw	r2, #295	; 0x127
 800fdf2:	4956      	ldr	r1, [pc, #344]	; (800ff4c <netif_add+0x174>)
 800fdf4:	4856      	ldr	r0, [pc, #344]	; (800ff50 <netif_add+0x178>)
 800fdf6:	f00b f825 	bl	801ae44 <printf>
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	e09f      	b.n	800ff3e <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d108      	bne.n	800fe16 <netif_add+0x3e>
 800fe04:	4b50      	ldr	r3, [pc, #320]	; (800ff48 <netif_add+0x170>)
 800fe06:	f44f 7294 	mov.w	r2, #296	; 0x128
 800fe0a:	4952      	ldr	r1, [pc, #328]	; (800ff54 <netif_add+0x17c>)
 800fe0c:	4850      	ldr	r0, [pc, #320]	; (800ff50 <netif_add+0x178>)
 800fe0e:	f00b f819 	bl	801ae44 <printf>
 800fe12:	2300      	movs	r3, #0
 800fe14:	e093      	b.n	800ff3e <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d101      	bne.n	800fe20 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fe1c:	4b4e      	ldr	r3, [pc, #312]	; (800ff58 <netif_add+0x180>)
 800fe1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d101      	bne.n	800fe2a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fe26:	4b4c      	ldr	r3, [pc, #304]	; (800ff58 <netif_add+0x180>)
 800fe28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d101      	bne.n	800fe34 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fe30:	4b49      	ldr	r3, [pc, #292]	; (800ff58 <netif_add+0x180>)
 800fe32:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2200      	movs	r2, #0
 800fe38:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2200      	movs	r2, #0
 800fe44:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	4a44      	ldr	r2, [pc, #272]	; (800ff5c <netif_add+0x184>)
 800fe4a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	6a3a      	ldr	r2, [r7, #32]
 800fe5e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800fe60:	4b3f      	ldr	r3, [pc, #252]	; (800ff60 <netif_add+0x188>)
 800fe62:	781a      	ldrb	r2, [r3, #0]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe6e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	68b9      	ldr	r1, [r7, #8]
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f000 f914 	bl	80100a4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fe7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7e:	68f8      	ldr	r0, [r7, #12]
 800fe80:	4798      	blx	r3
 800fe82:	4603      	mov	r3, r0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d001      	beq.n	800fe8c <netif_add+0xb4>
    return NULL;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	e058      	b.n	800ff3e <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fe92:	2bff      	cmp	r3, #255	; 0xff
 800fe94:	d103      	bne.n	800fe9e <netif_add+0xc6>
        netif->num = 0;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fea2:	4b30      	ldr	r3, [pc, #192]	; (800ff64 <netif_add+0x18c>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	617b      	str	r3, [r7, #20]
 800fea8:	e02b      	b.n	800ff02 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800feaa:	697a      	ldr	r2, [r7, #20]
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d106      	bne.n	800fec0 <netif_add+0xe8>
 800feb2:	4b25      	ldr	r3, [pc, #148]	; (800ff48 <netif_add+0x170>)
 800feb4:	f240 128b 	movw	r2, #395	; 0x18b
 800feb8:	492b      	ldr	r1, [pc, #172]	; (800ff68 <netif_add+0x190>)
 800feba:	4825      	ldr	r0, [pc, #148]	; (800ff50 <netif_add+0x178>)
 800febc:	f00a ffc2 	bl	801ae44 <printf>
        num_netifs++;
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	3301      	adds	r3, #1
 800fec4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	2bff      	cmp	r3, #255	; 0xff
 800feca:	dd06      	ble.n	800feda <netif_add+0x102>
 800fecc:	4b1e      	ldr	r3, [pc, #120]	; (800ff48 <netif_add+0x170>)
 800fece:	f240 128d 	movw	r2, #397	; 0x18d
 800fed2:	4926      	ldr	r1, [pc, #152]	; (800ff6c <netif_add+0x194>)
 800fed4:	481e      	ldr	r0, [pc, #120]	; (800ff50 <netif_add+0x178>)
 800fed6:	f00a ffb5 	bl	801ae44 <printf>
        if (netif2->num == netif->num) {
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d108      	bne.n	800fefc <netif_add+0x124>
          netif->num++;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fef0:	3301      	adds	r3, #1
 800fef2:	b2da      	uxtb	r2, r3
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800fefa:	e005      	b.n	800ff08 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	617b      	str	r3, [r7, #20]
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d1d0      	bne.n	800feaa <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1be      	bne.n	800fe8c <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ff14:	2bfe      	cmp	r3, #254	; 0xfe
 800ff16:	d103      	bne.n	800ff20 <netif_add+0x148>
    netif_num = 0;
 800ff18:	4b11      	ldr	r3, [pc, #68]	; (800ff60 <netif_add+0x188>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	701a      	strb	r2, [r3, #0]
 800ff1e:	e006      	b.n	800ff2e <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ff26:	3301      	adds	r3, #1
 800ff28:	b2da      	uxtb	r2, r3
 800ff2a:	4b0d      	ldr	r3, [pc, #52]	; (800ff60 <netif_add+0x188>)
 800ff2c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ff2e:	4b0d      	ldr	r3, [pc, #52]	; (800ff64 <netif_add+0x18c>)
 800ff30:	681a      	ldr	r2, [r3, #0]
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ff36:	4a0b      	ldr	r2, [pc, #44]	; (800ff64 <netif_add+0x18c>)
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3718      	adds	r7, #24
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	08024ea8 	.word	0x08024ea8
 800ff4c:	08024f3c 	.word	0x08024f3c
 800ff50:	08024ef8 	.word	0x08024ef8
 800ff54:	08024f58 	.word	0x08024f58
 800ff58:	08028d2c 	.word	0x08028d2c
 800ff5c:	08010295 	.word	0x08010295
 800ff60:	20004ef4 	.word	0x20004ef4
 800ff64:	2000be04 	.word	0x2000be04
 800ff68:	08024f7c 	.word	0x08024f7c
 800ff6c:	08024f90 	.word	0x08024f90

0800ff70 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ff7a:	6839      	ldr	r1, [r7, #0]
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f002 fe19 	bl	8012bb4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ff82:	6839      	ldr	r1, [r7, #0]
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f007 feb1 	bl	8017cec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ff8a:	bf00      	nop
 800ff8c:	3708      	adds	r7, #8
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
	...

0800ff94 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d106      	bne.n	800ffb4 <netif_do_set_ipaddr+0x20>
 800ffa6:	4b1d      	ldr	r3, [pc, #116]	; (801001c <netif_do_set_ipaddr+0x88>)
 800ffa8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ffac:	491c      	ldr	r1, [pc, #112]	; (8010020 <netif_do_set_ipaddr+0x8c>)
 800ffae:	481d      	ldr	r0, [pc, #116]	; (8010024 <netif_do_set_ipaddr+0x90>)
 800ffb0:	f00a ff48 	bl	801ae44 <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d106      	bne.n	800ffc8 <netif_do_set_ipaddr+0x34>
 800ffba:	4b18      	ldr	r3, [pc, #96]	; (801001c <netif_do_set_ipaddr+0x88>)
 800ffbc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ffc0:	4917      	ldr	r1, [pc, #92]	; (8010020 <netif_do_set_ipaddr+0x8c>)
 800ffc2:	4818      	ldr	r0, [pc, #96]	; (8010024 <netif_do_set_ipaddr+0x90>)
 800ffc4:	f00a ff3e 	bl	801ae44 <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	3304      	adds	r3, #4
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d01c      	beq.n	8010010 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	3304      	adds	r3, #4
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ffe6:	f107 0314 	add.w	r3, r7, #20
 800ffea:	4619      	mov	r1, r3
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f7ff ffbf 	bl	800ff70 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d002      	beq.n	800fffe <netif_do_set_ipaddr+0x6a>
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	e000      	b.n	8010000 <netif_do_set_ipaddr+0x6c>
 800fffe:	2300      	movs	r3, #0
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010004:	2101      	movs	r1, #1
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f000 f8d2 	bl	80101b0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801000c:	2301      	movs	r3, #1
 801000e:	e000      	b.n	8010012 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010010:	2300      	movs	r3, #0
}
 8010012:	4618      	mov	r0, r3
 8010014:	3718      	adds	r7, #24
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	08024ea8 	.word	0x08024ea8
 8010020:	08024fc0 	.word	0x08024fc0
 8010024:	08024ef8 	.word	0x08024ef8

08010028 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010028:	b480      	push	{r7}
 801002a:	b085      	sub	sp, #20
 801002c:	af00      	add	r7, sp, #0
 801002e:	60f8      	str	r0, [r7, #12]
 8010030:	60b9      	str	r1, [r7, #8]
 8010032:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	3308      	adds	r3, #8
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	429a      	cmp	r2, r3
 8010040:	d00a      	beq.n	8010058 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d002      	beq.n	801004e <netif_do_set_netmask+0x26>
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	e000      	b.n	8010050 <netif_do_set_netmask+0x28>
 801004e:	2300      	movs	r3, #0
 8010050:	68fa      	ldr	r2, [r7, #12]
 8010052:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010054:	2301      	movs	r3, #1
 8010056:	e000      	b.n	801005a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010058:	2300      	movs	r3, #0
}
 801005a:	4618      	mov	r0, r3
 801005c:	3714      	adds	r7, #20
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr

08010066 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010066:	b480      	push	{r7}
 8010068:	b085      	sub	sp, #20
 801006a:	af00      	add	r7, sp, #0
 801006c:	60f8      	str	r0, [r7, #12]
 801006e:	60b9      	str	r1, [r7, #8]
 8010070:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	330c      	adds	r3, #12
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	429a      	cmp	r2, r3
 801007e:	d00a      	beq.n	8010096 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d002      	beq.n	801008c <netif_do_set_gw+0x26>
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	e000      	b.n	801008e <netif_do_set_gw+0x28>
 801008c:	2300      	movs	r3, #0
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010092:	2301      	movs	r3, #1
 8010094:	e000      	b.n	8010098 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010096:	2300      	movs	r3, #0
}
 8010098:	4618      	mov	r0, r3
 801009a:	3714      	adds	r7, #20
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b088      	sub	sp, #32
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	60f8      	str	r0, [r7, #12]
 80100ac:	60b9      	str	r1, [r7, #8]
 80100ae:	607a      	str	r2, [r7, #4]
 80100b0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80100b2:	2300      	movs	r3, #0
 80100b4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80100b6:	2300      	movs	r3, #0
 80100b8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80100c0:	4b1c      	ldr	r3, [pc, #112]	; (8010134 <netif_set_addr+0x90>)
 80100c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d101      	bne.n	80100ce <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80100ca:	4b1a      	ldr	r3, [pc, #104]	; (8010134 <netif_set_addr+0x90>)
 80100cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d101      	bne.n	80100d8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80100d4:	4b17      	ldr	r3, [pc, #92]	; (8010134 <netif_set_addr+0x90>)
 80100d6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d003      	beq.n	80100e6 <netif_set_addr+0x42>
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d101      	bne.n	80100ea <netif_set_addr+0x46>
 80100e6:	2301      	movs	r3, #1
 80100e8:	e000      	b.n	80100ec <netif_set_addr+0x48>
 80100ea:	2300      	movs	r3, #0
 80100ec:	617b      	str	r3, [r7, #20]
  if (remove) {
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d006      	beq.n	8010102 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80100f4:	f107 0310 	add.w	r3, r7, #16
 80100f8:	461a      	mov	r2, r3
 80100fa:	68b9      	ldr	r1, [r7, #8]
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f7ff ff49 	bl	800ff94 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010102:	69fa      	ldr	r2, [r7, #28]
 8010104:	6879      	ldr	r1, [r7, #4]
 8010106:	68f8      	ldr	r0, [r7, #12]
 8010108:	f7ff ff8e 	bl	8010028 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801010c:	69ba      	ldr	r2, [r7, #24]
 801010e:	6839      	ldr	r1, [r7, #0]
 8010110:	68f8      	ldr	r0, [r7, #12]
 8010112:	f7ff ffa8 	bl	8010066 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d106      	bne.n	801012a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801011c:	f107 0310 	add.w	r3, r7, #16
 8010120:	461a      	mov	r2, r3
 8010122:	68b9      	ldr	r1, [r7, #8]
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f7ff ff35 	bl	800ff94 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801012a:	bf00      	nop
 801012c:	3720      	adds	r7, #32
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	08028d2c 	.word	0x08028d2c

08010138 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010138:	b480      	push	{r7}
 801013a:	b083      	sub	sp, #12
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010140:	4a04      	ldr	r2, [pc, #16]	; (8010154 <netif_set_default+0x1c>)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010146:	bf00      	nop
 8010148:	370c      	adds	r7, #12
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop
 8010154:	2000be08 	.word	0x2000be08

08010158 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d107      	bne.n	8010176 <netif_set_up+0x1e>
 8010166:	4b0f      	ldr	r3, [pc, #60]	; (80101a4 <netif_set_up+0x4c>)
 8010168:	f44f 7254 	mov.w	r2, #848	; 0x350
 801016c:	490e      	ldr	r1, [pc, #56]	; (80101a8 <netif_set_up+0x50>)
 801016e:	480f      	ldr	r0, [pc, #60]	; (80101ac <netif_set_up+0x54>)
 8010170:	f00a fe68 	bl	801ae44 <printf>
 8010174:	e013      	b.n	801019e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801017c:	f003 0301 	and.w	r3, r3, #1
 8010180:	2b00      	cmp	r3, #0
 8010182:	d10c      	bne.n	801019e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801018a:	f043 0301 	orr.w	r3, r3, #1
 801018e:	b2da      	uxtb	r2, r3
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010196:	2103      	movs	r1, #3
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 f809 	bl	80101b0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801019e:	3708      	adds	r7, #8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	08024ea8 	.word	0x08024ea8
 80101a8:	08025030 	.word	0x08025030
 80101ac:	08024ef8 	.word	0x08024ef8

080101b0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	460b      	mov	r3, r1
 80101ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d106      	bne.n	80101d0 <netif_issue_reports+0x20>
 80101c2:	4b18      	ldr	r3, [pc, #96]	; (8010224 <netif_issue_reports+0x74>)
 80101c4:	f240 326d 	movw	r2, #877	; 0x36d
 80101c8:	4917      	ldr	r1, [pc, #92]	; (8010228 <netif_issue_reports+0x78>)
 80101ca:	4818      	ldr	r0, [pc, #96]	; (801022c <netif_issue_reports+0x7c>)
 80101cc:	f00a fe3a 	bl	801ae44 <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80101d6:	f003 0304 	and.w	r3, r3, #4
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d01e      	beq.n	801021c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80101e4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d017      	beq.n	801021c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80101ec:	78fb      	ldrb	r3, [r7, #3]
 80101ee:	f003 0301 	and.w	r3, r3, #1
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d013      	beq.n	801021e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	3304      	adds	r3, #4
 80101fa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00e      	beq.n	801021e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010206:	f003 0308 	and.w	r3, r3, #8
 801020a:	2b00      	cmp	r3, #0
 801020c:	d007      	beq.n	801021e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	3304      	adds	r3, #4
 8010212:	4619      	mov	r1, r3
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f008 fcd3 	bl	8018bc0 <etharp_request>
 801021a:	e000      	b.n	801021e <netif_issue_reports+0x6e>
    return;
 801021c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801021e:	3708      	adds	r7, #8
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	08024ea8 	.word	0x08024ea8
 8010228:	0802504c 	.word	0x0802504c
 801022c:	08024ef8 	.word	0x08024ef8

08010230 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d107      	bne.n	801024e <netif_set_down+0x1e>
 801023e:	4b12      	ldr	r3, [pc, #72]	; (8010288 <netif_set_down+0x58>)
 8010240:	f240 329b 	movw	r2, #923	; 0x39b
 8010244:	4911      	ldr	r1, [pc, #68]	; (801028c <netif_set_down+0x5c>)
 8010246:	4812      	ldr	r0, [pc, #72]	; (8010290 <netif_set_down+0x60>)
 8010248:	f00a fdfc 	bl	801ae44 <printf>
 801024c:	e019      	b.n	8010282 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010254:	f003 0301 	and.w	r3, r3, #1
 8010258:	2b00      	cmp	r3, #0
 801025a:	d012      	beq.n	8010282 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010262:	f023 0301 	bic.w	r3, r3, #1
 8010266:	b2da      	uxtb	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010274:	f003 0308 	and.w	r3, r3, #8
 8010278:	2b00      	cmp	r3, #0
 801027a:	d002      	beq.n	8010282 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f008 f85d 	bl	801833c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010282:	3708      	adds	r7, #8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	08024ea8 	.word	0x08024ea8
 801028c:	08025070 	.word	0x08025070
 8010290:	08024ef8 	.word	0x08024ef8

08010294 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80102a0:	f06f 030b 	mvn.w	r3, #11
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3714      	adds	r7, #20
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b085      	sub	sp, #20
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	4603      	mov	r3, r0
 80102b8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80102ba:	79fb      	ldrb	r3, [r7, #7]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d013      	beq.n	80102e8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80102c0:	4b0d      	ldr	r3, [pc, #52]	; (80102f8 <netif_get_by_index+0x48>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	60fb      	str	r3, [r7, #12]
 80102c6:	e00c      	b.n	80102e2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80102ce:	3301      	adds	r3, #1
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	79fa      	ldrb	r2, [r7, #7]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d101      	bne.n	80102dc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	e006      	b.n	80102ea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	60fb      	str	r3, [r7, #12]
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d1ef      	bne.n	80102c8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80102e8:	2300      	movs	r3, #0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop
 80102f8:	2000be04 	.word	0x2000be04

080102fc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010302:	f00a f9a7 	bl	801a654 <sys_arch_protect>
 8010306:	6038      	str	r0, [r7, #0]
 8010308:	4b0d      	ldr	r3, [pc, #52]	; (8010340 <pbuf_free_ooseq+0x44>)
 801030a:	2200      	movs	r2, #0
 801030c:	701a      	strb	r2, [r3, #0]
 801030e:	6838      	ldr	r0, [r7, #0]
 8010310:	f00a f9ae 	bl	801a670 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010314:	4b0b      	ldr	r3, [pc, #44]	; (8010344 <pbuf_free_ooseq+0x48>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	607b      	str	r3, [r7, #4]
 801031a:	e00a      	b.n	8010332 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010320:	2b00      	cmp	r3, #0
 8010322:	d003      	beq.n	801032c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f002 fc83 	bl	8012c30 <tcp_free_ooseq>
      return;
 801032a:	e005      	b.n	8010338 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	607b      	str	r3, [r7, #4]
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d1f1      	bne.n	801031c <pbuf_free_ooseq+0x20>
    }
  }
}
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	2000be0c 	.word	0x2000be0c
 8010344:	2000be14 	.word	0x2000be14

08010348 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010350:	f7ff ffd4 	bl	80102fc <pbuf_free_ooseq>
}
 8010354:	bf00      	nop
 8010356:	3708      	adds	r7, #8
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010362:	f00a f977 	bl	801a654 <sys_arch_protect>
 8010366:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010368:	4b0f      	ldr	r3, [pc, #60]	; (80103a8 <pbuf_pool_is_empty+0x4c>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801036e:	4b0e      	ldr	r3, [pc, #56]	; (80103a8 <pbuf_pool_is_empty+0x4c>)
 8010370:	2201      	movs	r2, #1
 8010372:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f00a f97b 	bl	801a670 <sys_arch_unprotect>

  if (!queued) {
 801037a:	78fb      	ldrb	r3, [r7, #3]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d10f      	bne.n	80103a0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010380:	2100      	movs	r1, #0
 8010382:	480a      	ldr	r0, [pc, #40]	; (80103ac <pbuf_pool_is_empty+0x50>)
 8010384:	f7fd ff3a 	bl	800e1fc <tcpip_try_callback>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d008      	beq.n	80103a0 <pbuf_pool_is_empty+0x44>
 801038e:	f00a f961 	bl	801a654 <sys_arch_protect>
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	4b04      	ldr	r3, [pc, #16]	; (80103a8 <pbuf_pool_is_empty+0x4c>)
 8010396:	2200      	movs	r2, #0
 8010398:	701a      	strb	r2, [r3, #0]
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f00a f968 	bl	801a670 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80103a0:	bf00      	nop
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	2000be0c 	.word	0x2000be0c
 80103ac:	08010349 	.word	0x08010349

080103b0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80103b0:	b480      	push	{r7}
 80103b2:	b085      	sub	sp, #20
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	60f8      	str	r0, [r7, #12]
 80103b8:	60b9      	str	r1, [r7, #8]
 80103ba:	4611      	mov	r1, r2
 80103bc:	461a      	mov	r2, r3
 80103be:	460b      	mov	r3, r1
 80103c0:	80fb      	strh	r3, [r7, #6]
 80103c2:	4613      	mov	r3, r2
 80103c4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2200      	movs	r2, #0
 80103ca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	68ba      	ldr	r2, [r7, #8]
 80103d0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	88fa      	ldrh	r2, [r7, #6]
 80103d6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	88ba      	ldrh	r2, [r7, #4]
 80103dc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80103de:	8b3b      	ldrh	r3, [r7, #24]
 80103e0:	b2da      	uxtb	r2, r3
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	7f3a      	ldrb	r2, [r7, #28]
 80103ea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	2201      	movs	r2, #1
 80103f0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	2200      	movs	r2, #0
 80103f6:	73da      	strb	r2, [r3, #15]
}
 80103f8:	bf00      	nop
 80103fa:	3714      	adds	r7, #20
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr

08010404 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b08c      	sub	sp, #48	; 0x30
 8010408:	af02      	add	r7, sp, #8
 801040a:	4603      	mov	r3, r0
 801040c:	71fb      	strb	r3, [r7, #7]
 801040e:	460b      	mov	r3, r1
 8010410:	80bb      	strh	r3, [r7, #4]
 8010412:	4613      	mov	r3, r2
 8010414:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010416:	79fb      	ldrb	r3, [r7, #7]
 8010418:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801041a:	887b      	ldrh	r3, [r7, #2]
 801041c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010420:	d07f      	beq.n	8010522 <pbuf_alloc+0x11e>
 8010422:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010426:	f300 80c8 	bgt.w	80105ba <pbuf_alloc+0x1b6>
 801042a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801042e:	d010      	beq.n	8010452 <pbuf_alloc+0x4e>
 8010430:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010434:	f300 80c1 	bgt.w	80105ba <pbuf_alloc+0x1b6>
 8010438:	2b01      	cmp	r3, #1
 801043a:	d002      	beq.n	8010442 <pbuf_alloc+0x3e>
 801043c:	2b41      	cmp	r3, #65	; 0x41
 801043e:	f040 80bc 	bne.w	80105ba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010442:	887a      	ldrh	r2, [r7, #2]
 8010444:	88bb      	ldrh	r3, [r7, #4]
 8010446:	4619      	mov	r1, r3
 8010448:	2000      	movs	r0, #0
 801044a:	f000 f8d1 	bl	80105f0 <pbuf_alloc_reference>
 801044e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010450:	e0bd      	b.n	80105ce <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010452:	2300      	movs	r3, #0
 8010454:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010456:	2300      	movs	r3, #0
 8010458:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801045a:	88bb      	ldrh	r3, [r7, #4]
 801045c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801045e:	200c      	movs	r0, #12
 8010460:	f7ff fc36 	bl	800fcd0 <memp_malloc>
 8010464:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d109      	bne.n	8010480 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801046c:	f7ff ff76 	bl	801035c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010472:	2b00      	cmp	r3, #0
 8010474:	d002      	beq.n	801047c <pbuf_alloc+0x78>
            pbuf_free(p);
 8010476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010478:	f000 faa8 	bl	80109cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801047c:	2300      	movs	r3, #0
 801047e:	e0a7      	b.n	80105d0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010482:	3303      	adds	r3, #3
 8010484:	b29b      	uxth	r3, r3
 8010486:	f023 0303 	bic.w	r3, r3, #3
 801048a:	b29b      	uxth	r3, r3
 801048c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010490:	b29b      	uxth	r3, r3
 8010492:	8b7a      	ldrh	r2, [r7, #26]
 8010494:	4293      	cmp	r3, r2
 8010496:	bf28      	it	cs
 8010498:	4613      	movcs	r3, r2
 801049a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801049c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801049e:	3310      	adds	r3, #16
 80104a0:	693a      	ldr	r2, [r7, #16]
 80104a2:	4413      	add	r3, r2
 80104a4:	3303      	adds	r3, #3
 80104a6:	f023 0303 	bic.w	r3, r3, #3
 80104aa:	4618      	mov	r0, r3
 80104ac:	89f9      	ldrh	r1, [r7, #14]
 80104ae:	8b7a      	ldrh	r2, [r7, #26]
 80104b0:	2300      	movs	r3, #0
 80104b2:	9301      	str	r3, [sp, #4]
 80104b4:	887b      	ldrh	r3, [r7, #2]
 80104b6:	9300      	str	r3, [sp, #0]
 80104b8:	460b      	mov	r3, r1
 80104ba:	4601      	mov	r1, r0
 80104bc:	6938      	ldr	r0, [r7, #16]
 80104be:	f7ff ff77 	bl	80103b0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	f003 0303 	and.w	r3, r3, #3
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d006      	beq.n	80104dc <pbuf_alloc+0xd8>
 80104ce:	4b42      	ldr	r3, [pc, #264]	; (80105d8 <pbuf_alloc+0x1d4>)
 80104d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80104d4:	4941      	ldr	r1, [pc, #260]	; (80105dc <pbuf_alloc+0x1d8>)
 80104d6:	4842      	ldr	r0, [pc, #264]	; (80105e0 <pbuf_alloc+0x1dc>)
 80104d8:	f00a fcb4 	bl	801ae44 <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80104dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80104de:	3303      	adds	r3, #3
 80104e0:	f023 0303 	bic.w	r3, r3, #3
 80104e4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80104e8:	d106      	bne.n	80104f8 <pbuf_alloc+0xf4>
 80104ea:	4b3b      	ldr	r3, [pc, #236]	; (80105d8 <pbuf_alloc+0x1d4>)
 80104ec:	f44f 7281 	mov.w	r2, #258	; 0x102
 80104f0:	493c      	ldr	r1, [pc, #240]	; (80105e4 <pbuf_alloc+0x1e0>)
 80104f2:	483b      	ldr	r0, [pc, #236]	; (80105e0 <pbuf_alloc+0x1dc>)
 80104f4:	f00a fca6 	bl	801ae44 <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80104f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d102      	bne.n	8010504 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	627b      	str	r3, [r7, #36]	; 0x24
 8010502:	e002      	b.n	801050a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	693a      	ldr	r2, [r7, #16]
 8010508:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801050e:	8b7a      	ldrh	r2, [r7, #26]
 8010510:	89fb      	ldrh	r3, [r7, #14]
 8010512:	1ad3      	subs	r3, r2, r3
 8010514:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010516:	2300      	movs	r3, #0
 8010518:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801051a:	8b7b      	ldrh	r3, [r7, #26]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d19e      	bne.n	801045e <pbuf_alloc+0x5a>
      break;
 8010520:	e055      	b.n	80105ce <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010522:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010524:	3303      	adds	r3, #3
 8010526:	b29b      	uxth	r3, r3
 8010528:	f023 0303 	bic.w	r3, r3, #3
 801052c:	b29a      	uxth	r2, r3
 801052e:	88bb      	ldrh	r3, [r7, #4]
 8010530:	3303      	adds	r3, #3
 8010532:	b29b      	uxth	r3, r3
 8010534:	f023 0303 	bic.w	r3, r3, #3
 8010538:	b29b      	uxth	r3, r3
 801053a:	4413      	add	r3, r2
 801053c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801053e:	8b3b      	ldrh	r3, [r7, #24]
 8010540:	3310      	adds	r3, #16
 8010542:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010544:	8b3a      	ldrh	r2, [r7, #24]
 8010546:	88bb      	ldrh	r3, [r7, #4]
 8010548:	3303      	adds	r3, #3
 801054a:	f023 0303 	bic.w	r3, r3, #3
 801054e:	429a      	cmp	r2, r3
 8010550:	d306      	bcc.n	8010560 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010552:	8afa      	ldrh	r2, [r7, #22]
 8010554:	88bb      	ldrh	r3, [r7, #4]
 8010556:	3303      	adds	r3, #3
 8010558:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801055c:	429a      	cmp	r2, r3
 801055e:	d201      	bcs.n	8010564 <pbuf_alloc+0x160>
        return NULL;
 8010560:	2300      	movs	r3, #0
 8010562:	e035      	b.n	80105d0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010564:	8afb      	ldrh	r3, [r7, #22]
 8010566:	4618      	mov	r0, r3
 8010568:	f7ff fa30 	bl	800f9cc <mem_malloc>
 801056c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010570:	2b00      	cmp	r3, #0
 8010572:	d101      	bne.n	8010578 <pbuf_alloc+0x174>
        return NULL;
 8010574:	2300      	movs	r3, #0
 8010576:	e02b      	b.n	80105d0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010578:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801057a:	3310      	adds	r3, #16
 801057c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801057e:	4413      	add	r3, r2
 8010580:	3303      	adds	r3, #3
 8010582:	f023 0303 	bic.w	r3, r3, #3
 8010586:	4618      	mov	r0, r3
 8010588:	88b9      	ldrh	r1, [r7, #4]
 801058a:	88ba      	ldrh	r2, [r7, #4]
 801058c:	2300      	movs	r3, #0
 801058e:	9301      	str	r3, [sp, #4]
 8010590:	887b      	ldrh	r3, [r7, #2]
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	460b      	mov	r3, r1
 8010596:	4601      	mov	r1, r0
 8010598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801059a:	f7ff ff09 	bl	80103b0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	f003 0303 	and.w	r3, r3, #3
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d010      	beq.n	80105cc <pbuf_alloc+0x1c8>
 80105aa:	4b0b      	ldr	r3, [pc, #44]	; (80105d8 <pbuf_alloc+0x1d4>)
 80105ac:	f44f 7291 	mov.w	r2, #290	; 0x122
 80105b0:	490d      	ldr	r1, [pc, #52]	; (80105e8 <pbuf_alloc+0x1e4>)
 80105b2:	480b      	ldr	r0, [pc, #44]	; (80105e0 <pbuf_alloc+0x1dc>)
 80105b4:	f00a fc46 	bl	801ae44 <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80105b8:	e008      	b.n	80105cc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80105ba:	4b07      	ldr	r3, [pc, #28]	; (80105d8 <pbuf_alloc+0x1d4>)
 80105bc:	f240 1227 	movw	r2, #295	; 0x127
 80105c0:	490a      	ldr	r1, [pc, #40]	; (80105ec <pbuf_alloc+0x1e8>)
 80105c2:	4807      	ldr	r0, [pc, #28]	; (80105e0 <pbuf_alloc+0x1dc>)
 80105c4:	f00a fc3e 	bl	801ae44 <printf>
      return NULL;
 80105c8:	2300      	movs	r3, #0
 80105ca:	e001      	b.n	80105d0 <pbuf_alloc+0x1cc>
      break;
 80105cc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80105ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3728      	adds	r7, #40	; 0x28
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	080250d8 	.word	0x080250d8
 80105dc:	08025108 	.word	0x08025108
 80105e0:	08025138 	.word	0x08025138
 80105e4:	08025160 	.word	0x08025160
 80105e8:	08025194 	.word	0x08025194
 80105ec:	080251c0 	.word	0x080251c0

080105f0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b086      	sub	sp, #24
 80105f4:	af02      	add	r7, sp, #8
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	460b      	mov	r3, r1
 80105fa:	807b      	strh	r3, [r7, #2]
 80105fc:	4613      	mov	r3, r2
 80105fe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010600:	883b      	ldrh	r3, [r7, #0]
 8010602:	2b41      	cmp	r3, #65	; 0x41
 8010604:	d009      	beq.n	801061a <pbuf_alloc_reference+0x2a>
 8010606:	883b      	ldrh	r3, [r7, #0]
 8010608:	2b01      	cmp	r3, #1
 801060a:	d006      	beq.n	801061a <pbuf_alloc_reference+0x2a>
 801060c:	4b0f      	ldr	r3, [pc, #60]	; (801064c <pbuf_alloc_reference+0x5c>)
 801060e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010612:	490f      	ldr	r1, [pc, #60]	; (8010650 <pbuf_alloc_reference+0x60>)
 8010614:	480f      	ldr	r0, [pc, #60]	; (8010654 <pbuf_alloc_reference+0x64>)
 8010616:	f00a fc15 	bl	801ae44 <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801061a:	200b      	movs	r0, #11
 801061c:	f7ff fb58 	bl	800fcd0 <memp_malloc>
 8010620:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d101      	bne.n	801062c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010628:	2300      	movs	r3, #0
 801062a:	e00b      	b.n	8010644 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801062c:	8879      	ldrh	r1, [r7, #2]
 801062e:	887a      	ldrh	r2, [r7, #2]
 8010630:	2300      	movs	r3, #0
 8010632:	9301      	str	r3, [sp, #4]
 8010634:	883b      	ldrh	r3, [r7, #0]
 8010636:	9300      	str	r3, [sp, #0]
 8010638:	460b      	mov	r3, r1
 801063a:	6879      	ldr	r1, [r7, #4]
 801063c:	68f8      	ldr	r0, [r7, #12]
 801063e:	f7ff feb7 	bl	80103b0 <pbuf_init_alloced_pbuf>
  return p;
 8010642:	68fb      	ldr	r3, [r7, #12]
}
 8010644:	4618      	mov	r0, r3
 8010646:	3710      	adds	r7, #16
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	080250d8 	.word	0x080250d8
 8010650:	080251dc 	.word	0x080251dc
 8010654:	08025138 	.word	0x08025138

08010658 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b088      	sub	sp, #32
 801065c:	af02      	add	r7, sp, #8
 801065e:	607b      	str	r3, [r7, #4]
 8010660:	4603      	mov	r3, r0
 8010662:	73fb      	strb	r3, [r7, #15]
 8010664:	460b      	mov	r3, r1
 8010666:	81bb      	strh	r3, [r7, #12]
 8010668:	4613      	mov	r3, r2
 801066a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801066c:	7bfb      	ldrb	r3, [r7, #15]
 801066e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010670:	8a7b      	ldrh	r3, [r7, #18]
 8010672:	3303      	adds	r3, #3
 8010674:	f023 0203 	bic.w	r2, r3, #3
 8010678:	89bb      	ldrh	r3, [r7, #12]
 801067a:	441a      	add	r2, r3
 801067c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801067e:	429a      	cmp	r2, r3
 8010680:	d901      	bls.n	8010686 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010682:	2300      	movs	r3, #0
 8010684:	e018      	b.n	80106b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010686:	6a3b      	ldr	r3, [r7, #32]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d007      	beq.n	801069c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801068c:	8a7b      	ldrh	r3, [r7, #18]
 801068e:	3303      	adds	r3, #3
 8010690:	f023 0303 	bic.w	r3, r3, #3
 8010694:	6a3a      	ldr	r2, [r7, #32]
 8010696:	4413      	add	r3, r2
 8010698:	617b      	str	r3, [r7, #20]
 801069a:	e001      	b.n	80106a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801069c:	2300      	movs	r3, #0
 801069e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	89b9      	ldrh	r1, [r7, #12]
 80106a4:	89ba      	ldrh	r2, [r7, #12]
 80106a6:	2302      	movs	r3, #2
 80106a8:	9301      	str	r3, [sp, #4]
 80106aa:	897b      	ldrh	r3, [r7, #10]
 80106ac:	9300      	str	r3, [sp, #0]
 80106ae:	460b      	mov	r3, r1
 80106b0:	6979      	ldr	r1, [r7, #20]
 80106b2:	f7ff fe7d 	bl	80103b0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80106b6:	687b      	ldr	r3, [r7, #4]
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3718      	adds	r7, #24
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	460b      	mov	r3, r1
 80106ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d106      	bne.n	80106e0 <pbuf_realloc+0x20>
 80106d2:	4b3a      	ldr	r3, [pc, #232]	; (80107bc <pbuf_realloc+0xfc>)
 80106d4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80106d8:	4939      	ldr	r1, [pc, #228]	; (80107c0 <pbuf_realloc+0x100>)
 80106da:	483a      	ldr	r0, [pc, #232]	; (80107c4 <pbuf_realloc+0x104>)
 80106dc:	f00a fbb2 	bl	801ae44 <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	891b      	ldrh	r3, [r3, #8]
 80106e4:	887a      	ldrh	r2, [r7, #2]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d263      	bcs.n	80107b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	891a      	ldrh	r2, [r3, #8]
 80106ee:	887b      	ldrh	r3, [r7, #2]
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80106f4:	887b      	ldrh	r3, [r7, #2]
 80106f6:	817b      	strh	r3, [r7, #10]
  q = p;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80106fc:	e018      	b.n	8010730 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	895b      	ldrh	r3, [r3, #10]
 8010702:	897a      	ldrh	r2, [r7, #10]
 8010704:	1ad3      	subs	r3, r2, r3
 8010706:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	891a      	ldrh	r2, [r3, #8]
 801070c:	893b      	ldrh	r3, [r7, #8]
 801070e:	1ad3      	subs	r3, r2, r3
 8010710:	b29a      	uxth	r2, r3
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d106      	bne.n	8010730 <pbuf_realloc+0x70>
 8010722:	4b26      	ldr	r3, [pc, #152]	; (80107bc <pbuf_realloc+0xfc>)
 8010724:	f240 12af 	movw	r2, #431	; 0x1af
 8010728:	4927      	ldr	r1, [pc, #156]	; (80107c8 <pbuf_realloc+0x108>)
 801072a:	4826      	ldr	r0, [pc, #152]	; (80107c4 <pbuf_realloc+0x104>)
 801072c:	f00a fb8a 	bl	801ae44 <printf>
  while (rem_len > q->len) {
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	895b      	ldrh	r3, [r3, #10]
 8010734:	897a      	ldrh	r2, [r7, #10]
 8010736:	429a      	cmp	r2, r3
 8010738:	d8e1      	bhi.n	80106fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	7b1b      	ldrb	r3, [r3, #12]
 801073e:	f003 030f 	and.w	r3, r3, #15
 8010742:	2b00      	cmp	r3, #0
 8010744:	d121      	bne.n	801078a <pbuf_realloc+0xca>
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	895b      	ldrh	r3, [r3, #10]
 801074a:	897a      	ldrh	r2, [r7, #10]
 801074c:	429a      	cmp	r2, r3
 801074e:	d01c      	beq.n	801078a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	7b5b      	ldrb	r3, [r3, #13]
 8010754:	f003 0302 	and.w	r3, r3, #2
 8010758:	2b00      	cmp	r3, #0
 801075a:	d116      	bne.n	801078a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	685a      	ldr	r2, [r3, #4]
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	1ad3      	subs	r3, r2, r3
 8010764:	b29a      	uxth	r2, r3
 8010766:	897b      	ldrh	r3, [r7, #10]
 8010768:	4413      	add	r3, r2
 801076a:	b29b      	uxth	r3, r3
 801076c:	4619      	mov	r1, r3
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f7ff f822 	bl	800f7b8 <mem_trim>
 8010774:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d106      	bne.n	801078a <pbuf_realloc+0xca>
 801077c:	4b0f      	ldr	r3, [pc, #60]	; (80107bc <pbuf_realloc+0xfc>)
 801077e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010782:	4912      	ldr	r1, [pc, #72]	; (80107cc <pbuf_realloc+0x10c>)
 8010784:	480f      	ldr	r0, [pc, #60]	; (80107c4 <pbuf_realloc+0x104>)
 8010786:	f00a fb5d 	bl	801ae44 <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	897a      	ldrh	r2, [r7, #10]
 801078e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	895a      	ldrh	r2, [r3, #10]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d004      	beq.n	80107aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	4618      	mov	r0, r3
 80107a6:	f000 f911 	bl	80109cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2200      	movs	r2, #0
 80107ae:	601a      	str	r2, [r3, #0]
 80107b0:	e000      	b.n	80107b4 <pbuf_realloc+0xf4>
    return;
 80107b2:	bf00      	nop

}
 80107b4:	3710      	adds	r7, #16
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop
 80107bc:	080250d8 	.word	0x080250d8
 80107c0:	080251f0 	.word	0x080251f0
 80107c4:	08025138 	.word	0x08025138
 80107c8:	08025208 	.word	0x08025208
 80107cc:	08025220 	.word	0x08025220

080107d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b086      	sub	sp, #24
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	4613      	mov	r3, r2
 80107dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d106      	bne.n	80107f2 <pbuf_add_header_impl+0x22>
 80107e4:	4b2b      	ldr	r3, [pc, #172]	; (8010894 <pbuf_add_header_impl+0xc4>)
 80107e6:	f240 12df 	movw	r2, #479	; 0x1df
 80107ea:	492b      	ldr	r1, [pc, #172]	; (8010898 <pbuf_add_header_impl+0xc8>)
 80107ec:	482b      	ldr	r0, [pc, #172]	; (801089c <pbuf_add_header_impl+0xcc>)
 80107ee:	f00a fb29 	bl	801ae44 <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d003      	beq.n	8010800 <pbuf_add_header_impl+0x30>
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107fe:	d301      	bcc.n	8010804 <pbuf_add_header_impl+0x34>
    return 1;
 8010800:	2301      	movs	r3, #1
 8010802:	e043      	b.n	801088c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d101      	bne.n	801080e <pbuf_add_header_impl+0x3e>
    return 0;
 801080a:	2300      	movs	r3, #0
 801080c:	e03e      	b.n	801088c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	891a      	ldrh	r2, [r3, #8]
 8010816:	8a7b      	ldrh	r3, [r7, #18]
 8010818:	4413      	add	r3, r2
 801081a:	b29b      	uxth	r3, r3
 801081c:	8a7a      	ldrh	r2, [r7, #18]
 801081e:	429a      	cmp	r2, r3
 8010820:	d901      	bls.n	8010826 <pbuf_add_header_impl+0x56>
    return 1;
 8010822:	2301      	movs	r3, #1
 8010824:	e032      	b.n	801088c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	7b1b      	ldrb	r3, [r3, #12]
 801082a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801082c:	8a3b      	ldrh	r3, [r7, #16]
 801082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010832:	2b00      	cmp	r3, #0
 8010834:	d00c      	beq.n	8010850 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	685a      	ldr	r2, [r3, #4]
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	425b      	negs	r3, r3
 801083e:	4413      	add	r3, r2
 8010840:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	3310      	adds	r3, #16
 8010846:	697a      	ldr	r2, [r7, #20]
 8010848:	429a      	cmp	r2, r3
 801084a:	d20d      	bcs.n	8010868 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801084c:	2301      	movs	r3, #1
 801084e:	e01d      	b.n	801088c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010850:	79fb      	ldrb	r3, [r7, #7]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d006      	beq.n	8010864 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	685a      	ldr	r2, [r3, #4]
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	425b      	negs	r3, r3
 801085e:	4413      	add	r3, r2
 8010860:	617b      	str	r3, [r7, #20]
 8010862:	e001      	b.n	8010868 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010864:	2301      	movs	r3, #1
 8010866:	e011      	b.n	801088c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	697a      	ldr	r2, [r7, #20]
 801086c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	895a      	ldrh	r2, [r3, #10]
 8010872:	8a7b      	ldrh	r3, [r7, #18]
 8010874:	4413      	add	r3, r2
 8010876:	b29a      	uxth	r2, r3
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	891a      	ldrh	r2, [r3, #8]
 8010880:	8a7b      	ldrh	r3, [r7, #18]
 8010882:	4413      	add	r3, r2
 8010884:	b29a      	uxth	r2, r3
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	811a      	strh	r2, [r3, #8]


  return 0;
 801088a:	2300      	movs	r3, #0
}
 801088c:	4618      	mov	r0, r3
 801088e:	3718      	adds	r7, #24
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}
 8010894:	080250d8 	.word	0x080250d8
 8010898:	0802523c 	.word	0x0802523c
 801089c:	08025138 	.word	0x08025138

080108a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80108aa:	2200      	movs	r2, #0
 80108ac:	6839      	ldr	r1, [r7, #0]
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f7ff ff8e 	bl	80107d0 <pbuf_add_header_impl>
 80108b4:	4603      	mov	r3, r0
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3708      	adds	r7, #8
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
	...

080108c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d106      	bne.n	80108de <pbuf_remove_header+0x1e>
 80108d0:	4b20      	ldr	r3, [pc, #128]	; (8010954 <pbuf_remove_header+0x94>)
 80108d2:	f240 224b 	movw	r2, #587	; 0x24b
 80108d6:	4920      	ldr	r1, [pc, #128]	; (8010958 <pbuf_remove_header+0x98>)
 80108d8:	4820      	ldr	r0, [pc, #128]	; (801095c <pbuf_remove_header+0x9c>)
 80108da:	f00a fab3 	bl	801ae44 <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d003      	beq.n	80108ec <pbuf_remove_header+0x2c>
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108ea:	d301      	bcc.n	80108f0 <pbuf_remove_header+0x30>
    return 1;
 80108ec:	2301      	movs	r3, #1
 80108ee:	e02c      	b.n	801094a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d101      	bne.n	80108fa <pbuf_remove_header+0x3a>
    return 0;
 80108f6:	2300      	movs	r3, #0
 80108f8:	e027      	b.n	801094a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	895b      	ldrh	r3, [r3, #10]
 8010902:	89fa      	ldrh	r2, [r7, #14]
 8010904:	429a      	cmp	r2, r3
 8010906:	d908      	bls.n	801091a <pbuf_remove_header+0x5a>
 8010908:	4b12      	ldr	r3, [pc, #72]	; (8010954 <pbuf_remove_header+0x94>)
 801090a:	f240 2255 	movw	r2, #597	; 0x255
 801090e:	4914      	ldr	r1, [pc, #80]	; (8010960 <pbuf_remove_header+0xa0>)
 8010910:	4812      	ldr	r0, [pc, #72]	; (801095c <pbuf_remove_header+0x9c>)
 8010912:	f00a fa97 	bl	801ae44 <printf>
 8010916:	2301      	movs	r3, #1
 8010918:	e017      	b.n	801094a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	685a      	ldr	r2, [r3, #4]
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	441a      	add	r2, r3
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	895a      	ldrh	r2, [r3, #10]
 8010930:	89fb      	ldrh	r3, [r7, #14]
 8010932:	1ad3      	subs	r3, r2, r3
 8010934:	b29a      	uxth	r2, r3
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	891a      	ldrh	r2, [r3, #8]
 801093e:	89fb      	ldrh	r3, [r7, #14]
 8010940:	1ad3      	subs	r3, r2, r3
 8010942:	b29a      	uxth	r2, r3
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	080250d8 	.word	0x080250d8
 8010958:	0802523c 	.word	0x0802523c
 801095c:	08025138 	.word	0x08025138
 8010960:	08025248 	.word	0x08025248

08010964 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	460b      	mov	r3, r1
 801096e:	807b      	strh	r3, [r7, #2]
 8010970:	4613      	mov	r3, r2
 8010972:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010974:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010978:	2b00      	cmp	r3, #0
 801097a:	da08      	bge.n	801098e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801097c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010980:	425b      	negs	r3, r3
 8010982:	4619      	mov	r1, r3
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7ff ff9b 	bl	80108c0 <pbuf_remove_header>
 801098a:	4603      	mov	r3, r0
 801098c:	e007      	b.n	801099e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801098e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010992:	787a      	ldrb	r2, [r7, #1]
 8010994:	4619      	mov	r1, r3
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7ff ff1a 	bl	80107d0 <pbuf_add_header_impl>
 801099c:	4603      	mov	r3, r0
  }
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3708      	adds	r7, #8
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}

080109a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b082      	sub	sp, #8
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
 80109ae:	460b      	mov	r3, r1
 80109b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80109b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109b6:	2201      	movs	r2, #1
 80109b8:	4619      	mov	r1, r3
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f7ff ffd2 	bl	8010964 <pbuf_header_impl>
 80109c0:	4603      	mov	r3, r0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3708      	adds	r7, #8
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
	...

080109cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b088      	sub	sp, #32
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d10b      	bne.n	80109f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d106      	bne.n	80109ee <pbuf_free+0x22>
 80109e0:	4b3b      	ldr	r3, [pc, #236]	; (8010ad0 <pbuf_free+0x104>)
 80109e2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80109e6:	493b      	ldr	r1, [pc, #236]	; (8010ad4 <pbuf_free+0x108>)
 80109e8:	483b      	ldr	r0, [pc, #236]	; (8010ad8 <pbuf_free+0x10c>)
 80109ea:	f00a fa2b 	bl	801ae44 <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80109ee:	2300      	movs	r3, #0
 80109f0:	e069      	b.n	8010ac6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80109f6:	e062      	b.n	8010abe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80109f8:	f009 fe2c 	bl	801a654 <sys_arch_protect>
 80109fc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	7b9b      	ldrb	r3, [r3, #14]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d106      	bne.n	8010a14 <pbuf_free+0x48>
 8010a06:	4b32      	ldr	r3, [pc, #200]	; (8010ad0 <pbuf_free+0x104>)
 8010a08:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010a0c:	4933      	ldr	r1, [pc, #204]	; (8010adc <pbuf_free+0x110>)
 8010a0e:	4832      	ldr	r0, [pc, #200]	; (8010ad8 <pbuf_free+0x10c>)
 8010a10:	f00a fa18 	bl	801ae44 <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	7b9b      	ldrb	r3, [r3, #14]
 8010a18:	3b01      	subs	r3, #1
 8010a1a:	b2da      	uxtb	r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	739a      	strb	r2, [r3, #14]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	7b9b      	ldrb	r3, [r3, #14]
 8010a24:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010a26:	69b8      	ldr	r0, [r7, #24]
 8010a28:	f009 fe22 	bl	801a670 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010a2c:	7dfb      	ldrb	r3, [r7, #23]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d143      	bne.n	8010aba <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	7b1b      	ldrb	r3, [r3, #12]
 8010a3c:	f003 030f 	and.w	r3, r3, #15
 8010a40:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	7b5b      	ldrb	r3, [r3, #13]
 8010a46:	f003 0302 	and.w	r3, r3, #2
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d011      	beq.n	8010a72 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	691b      	ldr	r3, [r3, #16]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d106      	bne.n	8010a68 <pbuf_free+0x9c>
 8010a5a:	4b1d      	ldr	r3, [pc, #116]	; (8010ad0 <pbuf_free+0x104>)
 8010a5c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010a60:	491f      	ldr	r1, [pc, #124]	; (8010ae0 <pbuf_free+0x114>)
 8010a62:	481d      	ldr	r0, [pc, #116]	; (8010ad8 <pbuf_free+0x10c>)
 8010a64:	f00a f9ee 	bl	801ae44 <printf>
        pc->custom_free_function(p);
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	691b      	ldr	r3, [r3, #16]
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	4798      	blx	r3
 8010a70:	e01d      	b.n	8010aae <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010a72:	7bfb      	ldrb	r3, [r7, #15]
 8010a74:	2b02      	cmp	r3, #2
 8010a76:	d104      	bne.n	8010a82 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010a78:	6879      	ldr	r1, [r7, #4]
 8010a7a:	200c      	movs	r0, #12
 8010a7c:	f7ff f97a 	bl	800fd74 <memp_free>
 8010a80:	e015      	b.n	8010aae <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010a82:	7bfb      	ldrb	r3, [r7, #15]
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	d104      	bne.n	8010a92 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010a88:	6879      	ldr	r1, [r7, #4]
 8010a8a:	200b      	movs	r0, #11
 8010a8c:	f7ff f972 	bl	800fd74 <memp_free>
 8010a90:	e00d      	b.n	8010aae <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010a92:	7bfb      	ldrb	r3, [r7, #15]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d103      	bne.n	8010aa0 <pbuf_free+0xd4>
          mem_free(p);
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7fe fdfd 	bl	800f698 <mem_free>
 8010a9e:	e006      	b.n	8010aae <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010aa0:	4b0b      	ldr	r3, [pc, #44]	; (8010ad0 <pbuf_free+0x104>)
 8010aa2:	f240 320f 	movw	r2, #783	; 0x30f
 8010aa6:	490f      	ldr	r1, [pc, #60]	; (8010ae4 <pbuf_free+0x118>)
 8010aa8:	480b      	ldr	r0, [pc, #44]	; (8010ad8 <pbuf_free+0x10c>)
 8010aaa:	f00a f9cb 	bl	801ae44 <printf>
        }
      }
      count++;
 8010aae:	7ffb      	ldrb	r3, [r7, #31]
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	607b      	str	r3, [r7, #4]
 8010ab8:	e001      	b.n	8010abe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010aba:	2300      	movs	r3, #0
 8010abc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d199      	bne.n	80109f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010ac4:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3720      	adds	r7, #32
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	080250d8 	.word	0x080250d8
 8010ad4:	0802523c 	.word	0x0802523c
 8010ad8:	08025138 	.word	0x08025138
 8010adc:	08025268 	.word	0x08025268
 8010ae0:	08025280 	.word	0x08025280
 8010ae4:	080252a4 	.word	0x080252a4

08010ae8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010af0:	2300      	movs	r3, #0
 8010af2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010af4:	e005      	b.n	8010b02 <pbuf_clen+0x1a>
    ++len;
 8010af6:	89fb      	ldrh	r3, [r7, #14]
 8010af8:	3301      	adds	r3, #1
 8010afa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d1f6      	bne.n	8010af6 <pbuf_clen+0xe>
  }
  return len;
 8010b08:	89fb      	ldrh	r3, [r7, #14]
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	3714      	adds	r7, #20
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr
	...

08010b18 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d016      	beq.n	8010b54 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010b26:	f009 fd95 	bl	801a654 <sys_arch_protect>
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	7b9b      	ldrb	r3, [r3, #14]
 8010b30:	3301      	adds	r3, #1
 8010b32:	b2da      	uxtb	r2, r3
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	739a      	strb	r2, [r3, #14]
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	f009 fd99 	bl	801a670 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	7b9b      	ldrb	r3, [r3, #14]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d106      	bne.n	8010b54 <pbuf_ref+0x3c>
 8010b46:	4b05      	ldr	r3, [pc, #20]	; (8010b5c <pbuf_ref+0x44>)
 8010b48:	f240 3242 	movw	r2, #834	; 0x342
 8010b4c:	4904      	ldr	r1, [pc, #16]	; (8010b60 <pbuf_ref+0x48>)
 8010b4e:	4805      	ldr	r0, [pc, #20]	; (8010b64 <pbuf_ref+0x4c>)
 8010b50:	f00a f978 	bl	801ae44 <printf>
  }
}
 8010b54:	bf00      	nop
 8010b56:	3710      	adds	r7, #16
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	080250d8 	.word	0x080250d8
 8010b60:	080252b8 	.word	0x080252b8
 8010b64:	08025138 	.word	0x08025138

08010b68 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d002      	beq.n	8010b7e <pbuf_cat+0x16>
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d107      	bne.n	8010b8e <pbuf_cat+0x26>
 8010b7e:	4b20      	ldr	r3, [pc, #128]	; (8010c00 <pbuf_cat+0x98>)
 8010b80:	f240 3259 	movw	r2, #857	; 0x359
 8010b84:	491f      	ldr	r1, [pc, #124]	; (8010c04 <pbuf_cat+0x9c>)
 8010b86:	4820      	ldr	r0, [pc, #128]	; (8010c08 <pbuf_cat+0xa0>)
 8010b88:	f00a f95c 	bl	801ae44 <printf>
 8010b8c:	e034      	b.n	8010bf8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	60fb      	str	r3, [r7, #12]
 8010b92:	e00a      	b.n	8010baa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	891a      	ldrh	r2, [r3, #8]
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	891b      	ldrh	r3, [r3, #8]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	b29a      	uxth	r2, r3
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	60fb      	str	r3, [r7, #12]
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d1f0      	bne.n	8010b94 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	891a      	ldrh	r2, [r3, #8]
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	895b      	ldrh	r3, [r3, #10]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d006      	beq.n	8010bcc <pbuf_cat+0x64>
 8010bbe:	4b10      	ldr	r3, [pc, #64]	; (8010c00 <pbuf_cat+0x98>)
 8010bc0:	f240 3262 	movw	r2, #866	; 0x362
 8010bc4:	4911      	ldr	r1, [pc, #68]	; (8010c0c <pbuf_cat+0xa4>)
 8010bc6:	4810      	ldr	r0, [pc, #64]	; (8010c08 <pbuf_cat+0xa0>)
 8010bc8:	f00a f93c 	bl	801ae44 <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d006      	beq.n	8010be2 <pbuf_cat+0x7a>
 8010bd4:	4b0a      	ldr	r3, [pc, #40]	; (8010c00 <pbuf_cat+0x98>)
 8010bd6:	f240 3263 	movw	r2, #867	; 0x363
 8010bda:	490d      	ldr	r1, [pc, #52]	; (8010c10 <pbuf_cat+0xa8>)
 8010bdc:	480a      	ldr	r0, [pc, #40]	; (8010c08 <pbuf_cat+0xa0>)
 8010bde:	f00a f931 	bl	801ae44 <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	891a      	ldrh	r2, [r3, #8]
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	891b      	ldrh	r3, [r3, #8]
 8010bea:	4413      	add	r3, r2
 8010bec:	b29a      	uxth	r2, r3
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	683a      	ldr	r2, [r7, #0]
 8010bf6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010bf8:	3710      	adds	r7, #16
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	080250d8 	.word	0x080250d8
 8010c04:	080252cc 	.word	0x080252cc
 8010c08:	08025138 	.word	0x08025138
 8010c0c:	08025304 	.word	0x08025304
 8010c10:	08025334 	.word	0x08025334

08010c14 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010c1e:	6839      	ldr	r1, [r7, #0]
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f7ff ffa1 	bl	8010b68 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010c26:	6838      	ldr	r0, [r7, #0]
 8010c28:	f7ff ff76 	bl	8010b18 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010c2c:	bf00      	nop
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b086      	sub	sp, #24
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	617b      	str	r3, [r7, #20]
 8010c42:	2300      	movs	r3, #0
 8010c44:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d008      	beq.n	8010c5e <pbuf_copy+0x2a>
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d005      	beq.n	8010c5e <pbuf_copy+0x2a>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	891a      	ldrh	r2, [r3, #8]
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	891b      	ldrh	r3, [r3, #8]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d209      	bcs.n	8010c72 <pbuf_copy+0x3e>
 8010c5e:	4b57      	ldr	r3, [pc, #348]	; (8010dbc <pbuf_copy+0x188>)
 8010c60:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010c64:	4956      	ldr	r1, [pc, #344]	; (8010dc0 <pbuf_copy+0x18c>)
 8010c66:	4857      	ldr	r0, [pc, #348]	; (8010dc4 <pbuf_copy+0x190>)
 8010c68:	f00a f8ec 	bl	801ae44 <printf>
 8010c6c:	f06f 030f 	mvn.w	r3, #15
 8010c70:	e09f      	b.n	8010db2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	895b      	ldrh	r3, [r3, #10]
 8010c76:	461a      	mov	r2, r3
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	1ad2      	subs	r2, r2, r3
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	895b      	ldrh	r3, [r3, #10]
 8010c80:	4619      	mov	r1, r3
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	1acb      	subs	r3, r1, r3
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d306      	bcc.n	8010c98 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	895b      	ldrh	r3, [r3, #10]
 8010c8e:	461a      	mov	r2, r3
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	60fb      	str	r3, [r7, #12]
 8010c96:	e005      	b.n	8010ca4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	895b      	ldrh	r3, [r3, #10]
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	1ad3      	subs	r3, r2, r3
 8010ca2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	685a      	ldr	r2, [r3, #4]
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	18d0      	adds	r0, r2, r3
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	685a      	ldr	r2, [r3, #4]
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	4413      	add	r3, r2
 8010cb4:	68fa      	ldr	r2, [r7, #12]
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	f009 fe16 	bl	801a8e8 <memcpy>
    offset_to += len;
 8010cbc:	697a      	ldr	r2, [r7, #20]
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	4413      	add	r3, r2
 8010cc2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010cc4:	693a      	ldr	r2, [r7, #16]
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	4413      	add	r3, r2
 8010cca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	895b      	ldrh	r3, [r3, #10]
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d906      	bls.n	8010ce6 <pbuf_copy+0xb2>
 8010cd8:	4b38      	ldr	r3, [pc, #224]	; (8010dbc <pbuf_copy+0x188>)
 8010cda:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010cde:	493a      	ldr	r1, [pc, #232]	; (8010dc8 <pbuf_copy+0x194>)
 8010ce0:	4838      	ldr	r0, [pc, #224]	; (8010dc4 <pbuf_copy+0x190>)
 8010ce2:	f00a f8af 	bl	801ae44 <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	895b      	ldrh	r3, [r3, #10]
 8010cea:	461a      	mov	r2, r3
 8010cec:	693b      	ldr	r3, [r7, #16]
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d906      	bls.n	8010d00 <pbuf_copy+0xcc>
 8010cf2:	4b32      	ldr	r3, [pc, #200]	; (8010dbc <pbuf_copy+0x188>)
 8010cf4:	f240 32da 	movw	r2, #986	; 0x3da
 8010cf8:	4934      	ldr	r1, [pc, #208]	; (8010dcc <pbuf_copy+0x198>)
 8010cfa:	4832      	ldr	r0, [pc, #200]	; (8010dc4 <pbuf_copy+0x190>)
 8010cfc:	f00a f8a2 	bl	801ae44 <printf>
    if (offset_from >= p_from->len) {
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	895b      	ldrh	r3, [r3, #10]
 8010d04:	461a      	mov	r2, r3
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	d304      	bcc.n	8010d16 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	895b      	ldrh	r3, [r3, #10]
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d114      	bne.n	8010d4c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010d22:	2300      	movs	r3, #0
 8010d24:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d10c      	bne.n	8010d4c <pbuf_copy+0x118>
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d009      	beq.n	8010d4c <pbuf_copy+0x118>
 8010d38:	4b20      	ldr	r3, [pc, #128]	; (8010dbc <pbuf_copy+0x188>)
 8010d3a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010d3e:	4924      	ldr	r1, [pc, #144]	; (8010dd0 <pbuf_copy+0x19c>)
 8010d40:	4820      	ldr	r0, [pc, #128]	; (8010dc4 <pbuf_copy+0x190>)
 8010d42:	f00a f87f 	bl	801ae44 <printf>
 8010d46:	f06f 030f 	mvn.w	r3, #15
 8010d4a:	e032      	b.n	8010db2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d013      	beq.n	8010d7a <pbuf_copy+0x146>
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	895a      	ldrh	r2, [r3, #10]
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	891b      	ldrh	r3, [r3, #8]
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d10d      	bne.n	8010d7a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d009      	beq.n	8010d7a <pbuf_copy+0x146>
 8010d66:	4b15      	ldr	r3, [pc, #84]	; (8010dbc <pbuf_copy+0x188>)
 8010d68:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010d6c:	4919      	ldr	r1, [pc, #100]	; (8010dd4 <pbuf_copy+0x1a0>)
 8010d6e:	4815      	ldr	r0, [pc, #84]	; (8010dc4 <pbuf_copy+0x190>)
 8010d70:	f00a f868 	bl	801ae44 <printf>
 8010d74:	f06f 0305 	mvn.w	r3, #5
 8010d78:	e01b      	b.n	8010db2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d013      	beq.n	8010da8 <pbuf_copy+0x174>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	895a      	ldrh	r2, [r3, #10]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	891b      	ldrh	r3, [r3, #8]
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d10d      	bne.n	8010da8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d009      	beq.n	8010da8 <pbuf_copy+0x174>
 8010d94:	4b09      	ldr	r3, [pc, #36]	; (8010dbc <pbuf_copy+0x188>)
 8010d96:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010d9a:	490e      	ldr	r1, [pc, #56]	; (8010dd4 <pbuf_copy+0x1a0>)
 8010d9c:	4809      	ldr	r0, [pc, #36]	; (8010dc4 <pbuf_copy+0x190>)
 8010d9e:	f00a f851 	bl	801ae44 <printf>
 8010da2:	f06f 0305 	mvn.w	r3, #5
 8010da6:	e004      	b.n	8010db2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f47f af61 	bne.w	8010c72 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010db0:	2300      	movs	r3, #0
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3718      	adds	r7, #24
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	080250d8 	.word	0x080250d8
 8010dc0:	08025380 	.word	0x08025380
 8010dc4:	08025138 	.word	0x08025138
 8010dc8:	080253b0 	.word	0x080253b0
 8010dcc:	080253c8 	.word	0x080253c8
 8010dd0:	080253e4 	.word	0x080253e4
 8010dd4:	080253f4 	.word	0x080253f4

08010dd8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b088      	sub	sp, #32
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	4611      	mov	r1, r2
 8010de4:	461a      	mov	r2, r3
 8010de6:	460b      	mov	r3, r1
 8010de8:	80fb      	strh	r3, [r7, #6]
 8010dea:	4613      	mov	r3, r2
 8010dec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010dee:	2300      	movs	r3, #0
 8010df0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010df2:	2300      	movs	r3, #0
 8010df4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d108      	bne.n	8010e0e <pbuf_copy_partial+0x36>
 8010dfc:	4b2b      	ldr	r3, [pc, #172]	; (8010eac <pbuf_copy_partial+0xd4>)
 8010dfe:	f240 420a 	movw	r2, #1034	; 0x40a
 8010e02:	492b      	ldr	r1, [pc, #172]	; (8010eb0 <pbuf_copy_partial+0xd8>)
 8010e04:	482b      	ldr	r0, [pc, #172]	; (8010eb4 <pbuf_copy_partial+0xdc>)
 8010e06:	f00a f81d 	bl	801ae44 <printf>
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	e04a      	b.n	8010ea4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d108      	bne.n	8010e26 <pbuf_copy_partial+0x4e>
 8010e14:	4b25      	ldr	r3, [pc, #148]	; (8010eac <pbuf_copy_partial+0xd4>)
 8010e16:	f240 420b 	movw	r2, #1035	; 0x40b
 8010e1a:	4927      	ldr	r1, [pc, #156]	; (8010eb8 <pbuf_copy_partial+0xe0>)
 8010e1c:	4825      	ldr	r0, [pc, #148]	; (8010eb4 <pbuf_copy_partial+0xdc>)
 8010e1e:	f00a f811 	bl	801ae44 <printf>
 8010e22:	2300      	movs	r3, #0
 8010e24:	e03e      	b.n	8010ea4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	61fb      	str	r3, [r7, #28]
 8010e2a:	e034      	b.n	8010e96 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010e2c:	88bb      	ldrh	r3, [r7, #4]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d00a      	beq.n	8010e48 <pbuf_copy_partial+0x70>
 8010e32:	69fb      	ldr	r3, [r7, #28]
 8010e34:	895b      	ldrh	r3, [r3, #10]
 8010e36:	88ba      	ldrh	r2, [r7, #4]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d305      	bcc.n	8010e48 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	895b      	ldrh	r3, [r3, #10]
 8010e40:	88ba      	ldrh	r2, [r7, #4]
 8010e42:	1ad3      	subs	r3, r2, r3
 8010e44:	80bb      	strh	r3, [r7, #4]
 8010e46:	e023      	b.n	8010e90 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010e48:	69fb      	ldr	r3, [r7, #28]
 8010e4a:	895a      	ldrh	r2, [r3, #10]
 8010e4c:	88bb      	ldrh	r3, [r7, #4]
 8010e4e:	1ad3      	subs	r3, r2, r3
 8010e50:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010e52:	8b3a      	ldrh	r2, [r7, #24]
 8010e54:	88fb      	ldrh	r3, [r7, #6]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d901      	bls.n	8010e5e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010e5a:	88fb      	ldrh	r3, [r7, #6]
 8010e5c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010e5e:	8b7b      	ldrh	r3, [r7, #26]
 8010e60:	68ba      	ldr	r2, [r7, #8]
 8010e62:	18d0      	adds	r0, r2, r3
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	685a      	ldr	r2, [r3, #4]
 8010e68:	88bb      	ldrh	r3, [r7, #4]
 8010e6a:	4413      	add	r3, r2
 8010e6c:	8b3a      	ldrh	r2, [r7, #24]
 8010e6e:	4619      	mov	r1, r3
 8010e70:	f009 fd3a 	bl	801a8e8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010e74:	8afa      	ldrh	r2, [r7, #22]
 8010e76:	8b3b      	ldrh	r3, [r7, #24]
 8010e78:	4413      	add	r3, r2
 8010e7a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010e7c:	8b7a      	ldrh	r2, [r7, #26]
 8010e7e:	8b3b      	ldrh	r3, [r7, #24]
 8010e80:	4413      	add	r3, r2
 8010e82:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010e84:	88fa      	ldrh	r2, [r7, #6]
 8010e86:	8b3b      	ldrh	r3, [r7, #24]
 8010e88:	1ad3      	subs	r3, r2, r3
 8010e8a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	61fb      	str	r3, [r7, #28]
 8010e96:	88fb      	ldrh	r3, [r7, #6]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d002      	beq.n	8010ea2 <pbuf_copy_partial+0xca>
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d1c4      	bne.n	8010e2c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010ea2:	8afb      	ldrh	r3, [r7, #22]
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3720      	adds	r7, #32
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	080250d8 	.word	0x080250d8
 8010eb0:	08025420 	.word	0x08025420
 8010eb4:	08025138 	.word	0x08025138
 8010eb8:	08025440 	.word	0x08025440

08010ebc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b084      	sub	sp, #16
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	603a      	str	r2, [r7, #0]
 8010ec6:	71fb      	strb	r3, [r7, #7]
 8010ec8:	460b      	mov	r3, r1
 8010eca:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	8919      	ldrh	r1, [r3, #8]
 8010ed0:	88ba      	ldrh	r2, [r7, #4]
 8010ed2:	79fb      	ldrb	r3, [r7, #7]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff fa95 	bl	8010404 <pbuf_alloc>
 8010eda:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d101      	bne.n	8010ee6 <pbuf_clone+0x2a>
    return NULL;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	e011      	b.n	8010f0a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010ee6:	6839      	ldr	r1, [r7, #0]
 8010ee8:	68f8      	ldr	r0, [r7, #12]
 8010eea:	f7ff fea3 	bl	8010c34 <pbuf_copy>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010ef2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d006      	beq.n	8010f08 <pbuf_clone+0x4c>
 8010efa:	4b06      	ldr	r3, [pc, #24]	; (8010f14 <pbuf_clone+0x58>)
 8010efc:	f240 5224 	movw	r2, #1316	; 0x524
 8010f00:	4905      	ldr	r1, [pc, #20]	; (8010f18 <pbuf_clone+0x5c>)
 8010f02:	4806      	ldr	r0, [pc, #24]	; (8010f1c <pbuf_clone+0x60>)
 8010f04:	f009 ff9e 	bl	801ae44 <printf>
  return q;
 8010f08:	68fb      	ldr	r3, [r7, #12]
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3710      	adds	r7, #16
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	080250d8 	.word	0x080250d8
 8010f18:	0802554c 	.word	0x0802554c
 8010f1c:	08025138 	.word	0x08025138

08010f20 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010f24:	f009 ffa0 	bl	801ae68 <rand>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	4b01      	ldr	r3, [pc, #4]	; (8010f40 <tcp_init+0x20>)
 8010f3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010f3c:	bf00      	nop
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	2000002c 	.word	0x2000002c

08010f44 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	7d1b      	ldrb	r3, [r3, #20]
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d105      	bne.n	8010f60 <tcp_free+0x1c>
 8010f54:	4b06      	ldr	r3, [pc, #24]	; (8010f70 <tcp_free+0x2c>)
 8010f56:	22d4      	movs	r2, #212	; 0xd4
 8010f58:	4906      	ldr	r1, [pc, #24]	; (8010f74 <tcp_free+0x30>)
 8010f5a:	4807      	ldr	r0, [pc, #28]	; (8010f78 <tcp_free+0x34>)
 8010f5c:	f009 ff72 	bl	801ae44 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010f60:	6879      	ldr	r1, [r7, #4]
 8010f62:	2001      	movs	r0, #1
 8010f64:	f7fe ff06 	bl	800fd74 <memp_free>
}
 8010f68:	bf00      	nop
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	080255d8 	.word	0x080255d8
 8010f74:	08025608 	.word	0x08025608
 8010f78:	0802561c 	.word	0x0802561c

08010f7c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	7d1b      	ldrb	r3, [r3, #20]
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	d105      	bne.n	8010f98 <tcp_free_listen+0x1c>
 8010f8c:	4b06      	ldr	r3, [pc, #24]	; (8010fa8 <tcp_free_listen+0x2c>)
 8010f8e:	22df      	movs	r2, #223	; 0xdf
 8010f90:	4906      	ldr	r1, [pc, #24]	; (8010fac <tcp_free_listen+0x30>)
 8010f92:	4807      	ldr	r0, [pc, #28]	; (8010fb0 <tcp_free_listen+0x34>)
 8010f94:	f009 ff56 	bl	801ae44 <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010f98:	6879      	ldr	r1, [r7, #4]
 8010f9a:	2002      	movs	r0, #2
 8010f9c:	f7fe feea 	bl	800fd74 <memp_free>
}
 8010fa0:	bf00      	nop
 8010fa2:	3708      	adds	r7, #8
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	080255d8 	.word	0x080255d8
 8010fac:	08025644 	.word	0x08025644
 8010fb0:	0802561c 	.word	0x0802561c

08010fb4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010fb8:	f001 f8b8 	bl	801212c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010fbc:	4b07      	ldr	r3, [pc, #28]	; (8010fdc <tcp_tmr+0x28>)
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	b2da      	uxtb	r2, r3
 8010fc4:	4b05      	ldr	r3, [pc, #20]	; (8010fdc <tcp_tmr+0x28>)
 8010fc6:	701a      	strb	r2, [r3, #0]
 8010fc8:	4b04      	ldr	r3, [pc, #16]	; (8010fdc <tcp_tmr+0x28>)
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	f003 0301 	and.w	r3, r3, #1
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d001      	beq.n	8010fd8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010fd4:	f000 fd6a 	bl	8011aac <tcp_slowtmr>
  }
}
 8010fd8:	bf00      	nop
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	20004ef5 	.word	0x20004ef5

08010fe0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d105      	bne.n	8010ffc <tcp_remove_listener+0x1c>
 8010ff0:	4b0d      	ldr	r3, [pc, #52]	; (8011028 <tcp_remove_listener+0x48>)
 8010ff2:	22ff      	movs	r2, #255	; 0xff
 8010ff4:	490d      	ldr	r1, [pc, #52]	; (801102c <tcp_remove_listener+0x4c>)
 8010ff6:	480e      	ldr	r0, [pc, #56]	; (8011030 <tcp_remove_listener+0x50>)
 8010ff8:	f009 ff24 	bl	801ae44 <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	60fb      	str	r3, [r7, #12]
 8011000:	e00a      	b.n	8011018 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011006:	683a      	ldr	r2, [r7, #0]
 8011008:	429a      	cmp	r2, r3
 801100a:	d102      	bne.n	8011012 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2200      	movs	r2, #0
 8011010:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	68db      	ldr	r3, [r3, #12]
 8011016:	60fb      	str	r3, [r7, #12]
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d1f1      	bne.n	8011002 <tcp_remove_listener+0x22>
    }
  }
}
 801101e:	bf00      	nop
 8011020:	bf00      	nop
 8011022:	3710      	adds	r7, #16
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}
 8011028:	080255d8 	.word	0x080255d8
 801102c:	08025660 	.word	0x08025660
 8011030:	0802561c 	.word	0x0802561c

08011034 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b084      	sub	sp, #16
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d106      	bne.n	8011050 <tcp_listen_closed+0x1c>
 8011042:	4b14      	ldr	r3, [pc, #80]	; (8011094 <tcp_listen_closed+0x60>)
 8011044:	f240 1211 	movw	r2, #273	; 0x111
 8011048:	4913      	ldr	r1, [pc, #76]	; (8011098 <tcp_listen_closed+0x64>)
 801104a:	4814      	ldr	r0, [pc, #80]	; (801109c <tcp_listen_closed+0x68>)
 801104c:	f009 fefa 	bl	801ae44 <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	7d1b      	ldrb	r3, [r3, #20]
 8011054:	2b01      	cmp	r3, #1
 8011056:	d006      	beq.n	8011066 <tcp_listen_closed+0x32>
 8011058:	4b0e      	ldr	r3, [pc, #56]	; (8011094 <tcp_listen_closed+0x60>)
 801105a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801105e:	4910      	ldr	r1, [pc, #64]	; (80110a0 <tcp_listen_closed+0x6c>)
 8011060:	480e      	ldr	r0, [pc, #56]	; (801109c <tcp_listen_closed+0x68>)
 8011062:	f009 feef 	bl	801ae44 <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011066:	2301      	movs	r3, #1
 8011068:	60fb      	str	r3, [r7, #12]
 801106a:	e00b      	b.n	8011084 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801106c:	4a0d      	ldr	r2, [pc, #52]	; (80110a4 <tcp_listen_closed+0x70>)
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	6879      	ldr	r1, [r7, #4]
 8011078:	4618      	mov	r0, r3
 801107a:	f7ff ffb1 	bl	8010fe0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	3301      	adds	r3, #1
 8011082:	60fb      	str	r3, [r7, #12]
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	2b03      	cmp	r3, #3
 8011088:	d9f0      	bls.n	801106c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801108a:	bf00      	nop
 801108c:	bf00      	nop
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	080255d8 	.word	0x080255d8
 8011098:	08025688 	.word	0x08025688
 801109c:	0802561c 	.word	0x0802561c
 80110a0:	08025694 	.word	0x08025694
 80110a4:	08028d04 	.word	0x08028d04

080110a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80110a8:	b5b0      	push	{r4, r5, r7, lr}
 80110aa:	b088      	sub	sp, #32
 80110ac:	af04      	add	r7, sp, #16
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	460b      	mov	r3, r1
 80110b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d106      	bne.n	80110c8 <tcp_close_shutdown+0x20>
 80110ba:	4b63      	ldr	r3, [pc, #396]	; (8011248 <tcp_close_shutdown+0x1a0>)
 80110bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80110c0:	4962      	ldr	r1, [pc, #392]	; (801124c <tcp_close_shutdown+0x1a4>)
 80110c2:	4863      	ldr	r0, [pc, #396]	; (8011250 <tcp_close_shutdown+0x1a8>)
 80110c4:	f009 febe 	bl	801ae44 <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80110c8:	78fb      	ldrb	r3, [r7, #3]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d066      	beq.n	801119c <tcp_close_shutdown+0xf4>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	7d1b      	ldrb	r3, [r3, #20]
 80110d2:	2b04      	cmp	r3, #4
 80110d4:	d003      	beq.n	80110de <tcp_close_shutdown+0x36>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	7d1b      	ldrb	r3, [r3, #20]
 80110da:	2b07      	cmp	r3, #7
 80110dc:	d15e      	bne.n	801119c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d104      	bne.n	80110f0 <tcp_close_shutdown+0x48>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80110ee:	d055      	beq.n	801119c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	8b5b      	ldrh	r3, [r3, #26]
 80110f4:	f003 0310 	and.w	r3, r3, #16
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d106      	bne.n	801110a <tcp_close_shutdown+0x62>
 80110fc:	4b52      	ldr	r3, [pc, #328]	; (8011248 <tcp_close_shutdown+0x1a0>)
 80110fe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011102:	4954      	ldr	r1, [pc, #336]	; (8011254 <tcp_close_shutdown+0x1ac>)
 8011104:	4852      	ldr	r0, [pc, #328]	; (8011250 <tcp_close_shutdown+0x1a8>)
 8011106:	f009 fe9d 	bl	801ae44 <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011112:	687d      	ldr	r5, [r7, #4]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	3304      	adds	r3, #4
 8011118:	687a      	ldr	r2, [r7, #4]
 801111a:	8ad2      	ldrh	r2, [r2, #22]
 801111c:	6879      	ldr	r1, [r7, #4]
 801111e:	8b09      	ldrh	r1, [r1, #24]
 8011120:	9102      	str	r1, [sp, #8]
 8011122:	9201      	str	r2, [sp, #4]
 8011124:	9300      	str	r3, [sp, #0]
 8011126:	462b      	mov	r3, r5
 8011128:	4622      	mov	r2, r4
 801112a:	4601      	mov	r1, r0
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f005 fde7 	bl	8016d00 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f001 fbc8 	bl	80128c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011138:	4b47      	ldr	r3, [pc, #284]	; (8011258 <tcp_close_shutdown+0x1b0>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	687a      	ldr	r2, [r7, #4]
 801113e:	429a      	cmp	r2, r3
 8011140:	d105      	bne.n	801114e <tcp_close_shutdown+0xa6>
 8011142:	4b45      	ldr	r3, [pc, #276]	; (8011258 <tcp_close_shutdown+0x1b0>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	68db      	ldr	r3, [r3, #12]
 8011148:	4a43      	ldr	r2, [pc, #268]	; (8011258 <tcp_close_shutdown+0x1b0>)
 801114a:	6013      	str	r3, [r2, #0]
 801114c:	e013      	b.n	8011176 <tcp_close_shutdown+0xce>
 801114e:	4b42      	ldr	r3, [pc, #264]	; (8011258 <tcp_close_shutdown+0x1b0>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	60fb      	str	r3, [r7, #12]
 8011154:	e00c      	b.n	8011170 <tcp_close_shutdown+0xc8>
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	68db      	ldr	r3, [r3, #12]
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	429a      	cmp	r2, r3
 801115e:	d104      	bne.n	801116a <tcp_close_shutdown+0xc2>
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	68da      	ldr	r2, [r3, #12]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	60da      	str	r2, [r3, #12]
 8011168:	e005      	b.n	8011176 <tcp_close_shutdown+0xce>
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	60fb      	str	r3, [r7, #12]
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1ef      	bne.n	8011156 <tcp_close_shutdown+0xae>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2200      	movs	r2, #0
 801117a:	60da      	str	r2, [r3, #12]
 801117c:	4b37      	ldr	r3, [pc, #220]	; (801125c <tcp_close_shutdown+0x1b4>)
 801117e:	2201      	movs	r2, #1
 8011180:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011182:	4b37      	ldr	r3, [pc, #220]	; (8011260 <tcp_close_shutdown+0x1b8>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	687a      	ldr	r2, [r7, #4]
 8011188:	429a      	cmp	r2, r3
 801118a:	d102      	bne.n	8011192 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801118c:	f004 f85c 	bl	8015248 <tcp_trigger_input_pcb_close>
 8011190:	e002      	b.n	8011198 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7ff fed6 	bl	8010f44 <tcp_free>
      }
      return ERR_OK;
 8011198:	2300      	movs	r3, #0
 801119a:	e050      	b.n	801123e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	7d1b      	ldrb	r3, [r3, #20]
 80111a0:	2b02      	cmp	r3, #2
 80111a2:	d03b      	beq.n	801121c <tcp_close_shutdown+0x174>
 80111a4:	2b02      	cmp	r3, #2
 80111a6:	dc44      	bgt.n	8011232 <tcp_close_shutdown+0x18a>
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d002      	beq.n	80111b2 <tcp_close_shutdown+0x10a>
 80111ac:	2b01      	cmp	r3, #1
 80111ae:	d02a      	beq.n	8011206 <tcp_close_shutdown+0x15e>
 80111b0:	e03f      	b.n	8011232 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	8adb      	ldrh	r3, [r3, #22]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d021      	beq.n	80111fe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80111ba:	4b2a      	ldr	r3, [pc, #168]	; (8011264 <tcp_close_shutdown+0x1bc>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d105      	bne.n	80111d0 <tcp_close_shutdown+0x128>
 80111c4:	4b27      	ldr	r3, [pc, #156]	; (8011264 <tcp_close_shutdown+0x1bc>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	4a26      	ldr	r2, [pc, #152]	; (8011264 <tcp_close_shutdown+0x1bc>)
 80111cc:	6013      	str	r3, [r2, #0]
 80111ce:	e013      	b.n	80111f8 <tcp_close_shutdown+0x150>
 80111d0:	4b24      	ldr	r3, [pc, #144]	; (8011264 <tcp_close_shutdown+0x1bc>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	60bb      	str	r3, [r7, #8]
 80111d6:	e00c      	b.n	80111f2 <tcp_close_shutdown+0x14a>
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	687a      	ldr	r2, [r7, #4]
 80111de:	429a      	cmp	r2, r3
 80111e0:	d104      	bne.n	80111ec <tcp_close_shutdown+0x144>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	68da      	ldr	r2, [r3, #12]
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	60da      	str	r2, [r3, #12]
 80111ea:	e005      	b.n	80111f8 <tcp_close_shutdown+0x150>
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	60bb      	str	r3, [r7, #8]
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d1ef      	bne.n	80111d8 <tcp_close_shutdown+0x130>
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f7ff fea0 	bl	8010f44 <tcp_free>
      break;
 8011204:	e01a      	b.n	801123c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f7ff ff14 	bl	8011034 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801120c:	6879      	ldr	r1, [r7, #4]
 801120e:	4816      	ldr	r0, [pc, #88]	; (8011268 <tcp_close_shutdown+0x1c0>)
 8011210:	f001 fbaa 	bl	8012968 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f7ff feb1 	bl	8010f7c <tcp_free_listen>
      break;
 801121a:	e00f      	b.n	801123c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801121c:	6879      	ldr	r1, [r7, #4]
 801121e:	480e      	ldr	r0, [pc, #56]	; (8011258 <tcp_close_shutdown+0x1b0>)
 8011220:	f001 fba2 	bl	8012968 <tcp_pcb_remove>
 8011224:	4b0d      	ldr	r3, [pc, #52]	; (801125c <tcp_close_shutdown+0x1b4>)
 8011226:	2201      	movs	r2, #1
 8011228:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f7ff fe8a 	bl	8010f44 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011230:	e004      	b.n	801123c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f000 f81a 	bl	801126c <tcp_close_shutdown_fin>
 8011238:	4603      	mov	r3, r0
 801123a:	e000      	b.n	801123e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801123c:	2300      	movs	r3, #0
}
 801123e:	4618      	mov	r0, r3
 8011240:	3710      	adds	r7, #16
 8011242:	46bd      	mov	sp, r7
 8011244:	bdb0      	pop	{r4, r5, r7, pc}
 8011246:	bf00      	nop
 8011248:	080255d8 	.word	0x080255d8
 801124c:	080256ac 	.word	0x080256ac
 8011250:	0802561c 	.word	0x0802561c
 8011254:	080256cc 	.word	0x080256cc
 8011258:	2000be14 	.word	0x2000be14
 801125c:	2000be10 	.word	0x2000be10
 8011260:	2000be28 	.word	0x2000be28
 8011264:	2000be20 	.word	0x2000be20
 8011268:	2000be1c 	.word	0x2000be1c

0801126c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d106      	bne.n	8011288 <tcp_close_shutdown_fin+0x1c>
 801127a:	4b2e      	ldr	r3, [pc, #184]	; (8011334 <tcp_close_shutdown_fin+0xc8>)
 801127c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011280:	492d      	ldr	r1, [pc, #180]	; (8011338 <tcp_close_shutdown_fin+0xcc>)
 8011282:	482e      	ldr	r0, [pc, #184]	; (801133c <tcp_close_shutdown_fin+0xd0>)
 8011284:	f009 fdde 	bl	801ae44 <printf>

  switch (pcb->state) {
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	7d1b      	ldrb	r3, [r3, #20]
 801128c:	2b07      	cmp	r3, #7
 801128e:	d020      	beq.n	80112d2 <tcp_close_shutdown_fin+0x66>
 8011290:	2b07      	cmp	r3, #7
 8011292:	dc2b      	bgt.n	80112ec <tcp_close_shutdown_fin+0x80>
 8011294:	2b03      	cmp	r3, #3
 8011296:	d002      	beq.n	801129e <tcp_close_shutdown_fin+0x32>
 8011298:	2b04      	cmp	r3, #4
 801129a:	d00d      	beq.n	80112b8 <tcp_close_shutdown_fin+0x4c>
 801129c:	e026      	b.n	80112ec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f004 fe3c 	bl	8015f1c <tcp_send_fin>
 80112a4:	4603      	mov	r3, r0
 80112a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80112a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d11f      	bne.n	80112f0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2205      	movs	r2, #5
 80112b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80112b6:	e01b      	b.n	80112f0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f004 fe2f 	bl	8015f1c <tcp_send_fin>
 80112be:	4603      	mov	r3, r0
 80112c0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80112c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d114      	bne.n	80112f4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2205      	movs	r2, #5
 80112ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80112d0:	e010      	b.n	80112f4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f004 fe22 	bl	8015f1c <tcp_send_fin>
 80112d8:	4603      	mov	r3, r0
 80112da:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80112dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d109      	bne.n	80112f8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2209      	movs	r2, #9
 80112e8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80112ea:	e005      	b.n	80112f8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80112ec:	2300      	movs	r3, #0
 80112ee:	e01c      	b.n	801132a <tcp_close_shutdown_fin+0xbe>
      break;
 80112f0:	bf00      	nop
 80112f2:	e002      	b.n	80112fa <tcp_close_shutdown_fin+0x8e>
      break;
 80112f4:	bf00      	nop
 80112f6:	e000      	b.n	80112fa <tcp_close_shutdown_fin+0x8e>
      break;
 80112f8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80112fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d103      	bne.n	801130a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f004 ff48 	bl	8016198 <tcp_output>
 8011308:	e00d      	b.n	8011326 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801130e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011312:	d108      	bne.n	8011326 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	8b5b      	ldrh	r3, [r3, #26]
 8011318:	f043 0308 	orr.w	r3, r3, #8
 801131c:	b29a      	uxth	r2, r3
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011322:	2300      	movs	r3, #0
 8011324:	e001      	b.n	801132a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011326:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801132a:	4618      	mov	r0, r3
 801132c:	3710      	adds	r7, #16
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	080255d8 	.word	0x080255d8
 8011338:	08025688 	.word	0x08025688
 801133c:	0802561c 	.word	0x0802561c

08011340 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d109      	bne.n	8011362 <tcp_close+0x22>
 801134e:	4b0f      	ldr	r3, [pc, #60]	; (801138c <tcp_close+0x4c>)
 8011350:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011354:	490e      	ldr	r1, [pc, #56]	; (8011390 <tcp_close+0x50>)
 8011356:	480f      	ldr	r0, [pc, #60]	; (8011394 <tcp_close+0x54>)
 8011358:	f009 fd74 	bl	801ae44 <printf>
 801135c:	f06f 030f 	mvn.w	r3, #15
 8011360:	e00f      	b.n	8011382 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	7d1b      	ldrb	r3, [r3, #20]
 8011366:	2b01      	cmp	r3, #1
 8011368:	d006      	beq.n	8011378 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	8b5b      	ldrh	r3, [r3, #26]
 801136e:	f043 0310 	orr.w	r3, r3, #16
 8011372:	b29a      	uxth	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011378:	2101      	movs	r1, #1
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f7ff fe94 	bl	80110a8 <tcp_close_shutdown>
 8011380:	4603      	mov	r3, r0
}
 8011382:	4618      	mov	r0, r3
 8011384:	3708      	adds	r7, #8
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	080255d8 	.word	0x080255d8
 8011390:	080256e8 	.word	0x080256e8
 8011394:	0802561c 	.word	0x0802561c

08011398 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b084      	sub	sp, #16
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	60b9      	str	r1, [r7, #8]
 80113a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d109      	bne.n	80113be <tcp_shutdown+0x26>
 80113aa:	4b26      	ldr	r3, [pc, #152]	; (8011444 <tcp_shutdown+0xac>)
 80113ac:	f240 2207 	movw	r2, #519	; 0x207
 80113b0:	4925      	ldr	r1, [pc, #148]	; (8011448 <tcp_shutdown+0xb0>)
 80113b2:	4826      	ldr	r0, [pc, #152]	; (801144c <tcp_shutdown+0xb4>)
 80113b4:	f009 fd46 	bl	801ae44 <printf>
 80113b8:	f06f 030f 	mvn.w	r3, #15
 80113bc:	e03d      	b.n	801143a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	7d1b      	ldrb	r3, [r3, #20]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d102      	bne.n	80113cc <tcp_shutdown+0x34>
    return ERR_CONN;
 80113c6:	f06f 030a 	mvn.w	r3, #10
 80113ca:	e036      	b.n	801143a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d01b      	beq.n	801140a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	8b5b      	ldrh	r3, [r3, #26]
 80113d6:	f043 0310 	orr.w	r3, r3, #16
 80113da:	b29a      	uxth	r2, r3
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d005      	beq.n	80113f2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80113e6:	2101      	movs	r1, #1
 80113e8:	68f8      	ldr	r0, [r7, #12]
 80113ea:	f7ff fe5d 	bl	80110a8 <tcp_close_shutdown>
 80113ee:	4603      	mov	r3, r0
 80113f0:	e023      	b.n	801143a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d007      	beq.n	801140a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ff fae4 	bl	80109cc <pbuf_free>
      pcb->refused_data = NULL;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2200      	movs	r2, #0
 8011408:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d013      	beq.n	8011438 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	7d1b      	ldrb	r3, [r3, #20]
 8011414:	2b04      	cmp	r3, #4
 8011416:	dc02      	bgt.n	801141e <tcp_shutdown+0x86>
 8011418:	2b03      	cmp	r3, #3
 801141a:	da02      	bge.n	8011422 <tcp_shutdown+0x8a>
 801141c:	e009      	b.n	8011432 <tcp_shutdown+0x9a>
 801141e:	2b07      	cmp	r3, #7
 8011420:	d107      	bne.n	8011432 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	b2db      	uxtb	r3, r3
 8011426:	4619      	mov	r1, r3
 8011428:	68f8      	ldr	r0, [r7, #12]
 801142a:	f7ff fe3d 	bl	80110a8 <tcp_close_shutdown>
 801142e:	4603      	mov	r3, r0
 8011430:	e003      	b.n	801143a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8011432:	f06f 030a 	mvn.w	r3, #10
 8011436:	e000      	b.n	801143a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011438:	2300      	movs	r3, #0
}
 801143a:	4618      	mov	r0, r3
 801143c:	3710      	adds	r7, #16
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	080255d8 	.word	0x080255d8
 8011448:	08025700 	.word	0x08025700
 801144c:	0802561c 	.word	0x0802561c

08011450 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b08e      	sub	sp, #56	; 0x38
 8011454:	af04      	add	r7, sp, #16
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d107      	bne.n	8011470 <tcp_abandon+0x20>
 8011460:	4b52      	ldr	r3, [pc, #328]	; (80115ac <tcp_abandon+0x15c>)
 8011462:	f240 223d 	movw	r2, #573	; 0x23d
 8011466:	4952      	ldr	r1, [pc, #328]	; (80115b0 <tcp_abandon+0x160>)
 8011468:	4852      	ldr	r0, [pc, #328]	; (80115b4 <tcp_abandon+0x164>)
 801146a:	f009 fceb 	bl	801ae44 <printf>
 801146e:	e099      	b.n	80115a4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	7d1b      	ldrb	r3, [r3, #20]
 8011474:	2b01      	cmp	r3, #1
 8011476:	d106      	bne.n	8011486 <tcp_abandon+0x36>
 8011478:	4b4c      	ldr	r3, [pc, #304]	; (80115ac <tcp_abandon+0x15c>)
 801147a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801147e:	494e      	ldr	r1, [pc, #312]	; (80115b8 <tcp_abandon+0x168>)
 8011480:	484c      	ldr	r0, [pc, #304]	; (80115b4 <tcp_abandon+0x164>)
 8011482:	f009 fcdf 	bl	801ae44 <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	7d1b      	ldrb	r3, [r3, #20]
 801148a:	2b0a      	cmp	r3, #10
 801148c:	d107      	bne.n	801149e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801148e:	6879      	ldr	r1, [r7, #4]
 8011490:	484a      	ldr	r0, [pc, #296]	; (80115bc <tcp_abandon+0x16c>)
 8011492:	f001 fa69 	bl	8012968 <tcp_pcb_remove>
    tcp_free(pcb);
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f7ff fd54 	bl	8010f44 <tcp_free>
 801149c:	e082      	b.n	80115a4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801149e:	2300      	movs	r3, #0
 80114a0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80114a2:	2300      	movs	r3, #0
 80114a4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114aa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114b0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114b8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	691b      	ldr	r3, [r3, #16]
 80114be:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	7d1b      	ldrb	r3, [r3, #20]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d126      	bne.n	8011516 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	8adb      	ldrh	r3, [r3, #22]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d02e      	beq.n	801152e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80114d0:	4b3b      	ldr	r3, [pc, #236]	; (80115c0 <tcp_abandon+0x170>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	687a      	ldr	r2, [r7, #4]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d105      	bne.n	80114e6 <tcp_abandon+0x96>
 80114da:	4b39      	ldr	r3, [pc, #228]	; (80115c0 <tcp_abandon+0x170>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	4a37      	ldr	r2, [pc, #220]	; (80115c0 <tcp_abandon+0x170>)
 80114e2:	6013      	str	r3, [r2, #0]
 80114e4:	e013      	b.n	801150e <tcp_abandon+0xbe>
 80114e6:	4b36      	ldr	r3, [pc, #216]	; (80115c0 <tcp_abandon+0x170>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	61fb      	str	r3, [r7, #28]
 80114ec:	e00c      	b.n	8011508 <tcp_abandon+0xb8>
 80114ee:	69fb      	ldr	r3, [r7, #28]
 80114f0:	68db      	ldr	r3, [r3, #12]
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d104      	bne.n	8011502 <tcp_abandon+0xb2>
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	68da      	ldr	r2, [r3, #12]
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	60da      	str	r2, [r3, #12]
 8011500:	e005      	b.n	801150e <tcp_abandon+0xbe>
 8011502:	69fb      	ldr	r3, [r7, #28]
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	61fb      	str	r3, [r7, #28]
 8011508:	69fb      	ldr	r3, [r7, #28]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d1ef      	bne.n	80114ee <tcp_abandon+0x9e>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2200      	movs	r2, #0
 8011512:	60da      	str	r2, [r3, #12]
 8011514:	e00b      	b.n	801152e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	8adb      	ldrh	r3, [r3, #22]
 801151e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011520:	6879      	ldr	r1, [r7, #4]
 8011522:	4828      	ldr	r0, [pc, #160]	; (80115c4 <tcp_abandon+0x174>)
 8011524:	f001 fa20 	bl	8012968 <tcp_pcb_remove>
 8011528:	4b27      	ldr	r3, [pc, #156]	; (80115c8 <tcp_abandon+0x178>)
 801152a:	2201      	movs	r2, #1
 801152c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011532:	2b00      	cmp	r3, #0
 8011534:	d004      	beq.n	8011540 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801153a:	4618      	mov	r0, r3
 801153c:	f000 fed6 	bl	80122ec <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011544:	2b00      	cmp	r3, #0
 8011546:	d004      	beq.n	8011552 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801154c:	4618      	mov	r0, r3
 801154e:	f000 fecd 	bl	80122ec <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011556:	2b00      	cmp	r3, #0
 8011558:	d004      	beq.n	8011564 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801155e:	4618      	mov	r0, r3
 8011560:	f000 fec4 	bl	80122ec <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011566:	2b00      	cmp	r3, #0
 8011568:	d00e      	beq.n	8011588 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801156a:	6879      	ldr	r1, [r7, #4]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	3304      	adds	r3, #4
 8011570:	687a      	ldr	r2, [r7, #4]
 8011572:	8b12      	ldrh	r2, [r2, #24]
 8011574:	9202      	str	r2, [sp, #8]
 8011576:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011578:	9201      	str	r2, [sp, #4]
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	460b      	mov	r3, r1
 801157e:	697a      	ldr	r2, [r7, #20]
 8011580:	69b9      	ldr	r1, [r7, #24]
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f005 fbbc 	bl	8016d00 <tcp_rst>
    }
    last_state = pcb->state;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	7d1b      	ldrb	r3, [r3, #20]
 801158c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f7ff fcd8 	bl	8010f44 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d004      	beq.n	80115a4 <tcp_abandon+0x154>
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	f06f 010c 	mvn.w	r1, #12
 80115a0:	68f8      	ldr	r0, [r7, #12]
 80115a2:	4798      	blx	r3
  }
}
 80115a4:	3728      	adds	r7, #40	; 0x28
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	080255d8 	.word	0x080255d8
 80115b0:	0802571c 	.word	0x0802571c
 80115b4:	0802561c 	.word	0x0802561c
 80115b8:	08025738 	.word	0x08025738
 80115bc:	2000be24 	.word	0x2000be24
 80115c0:	2000be20 	.word	0x2000be20
 80115c4:	2000be14 	.word	0x2000be14
 80115c8:	2000be10 	.word	0x2000be10

080115cc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b082      	sub	sp, #8
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80115d4:	2101      	movs	r1, #1
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7ff ff3a 	bl	8011450 <tcp_abandon>
}
 80115dc:	bf00      	nop
 80115de:	3708      	adds	r7, #8
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}

080115e4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b088      	sub	sp, #32
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	4613      	mov	r3, r2
 80115f0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80115f2:	2304      	movs	r3, #4
 80115f4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d101      	bne.n	8011600 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80115fc:	4b3e      	ldr	r3, [pc, #248]	; (80116f8 <tcp_bind+0x114>)
 80115fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d109      	bne.n	801161a <tcp_bind+0x36>
 8011606:	4b3d      	ldr	r3, [pc, #244]	; (80116fc <tcp_bind+0x118>)
 8011608:	f240 22a9 	movw	r2, #681	; 0x2a9
 801160c:	493c      	ldr	r1, [pc, #240]	; (8011700 <tcp_bind+0x11c>)
 801160e:	483d      	ldr	r0, [pc, #244]	; (8011704 <tcp_bind+0x120>)
 8011610:	f009 fc18 	bl	801ae44 <printf>
 8011614:	f06f 030f 	mvn.w	r3, #15
 8011618:	e06a      	b.n	80116f0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	7d1b      	ldrb	r3, [r3, #20]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d009      	beq.n	8011636 <tcp_bind+0x52>
 8011622:	4b36      	ldr	r3, [pc, #216]	; (80116fc <tcp_bind+0x118>)
 8011624:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011628:	4937      	ldr	r1, [pc, #220]	; (8011708 <tcp_bind+0x124>)
 801162a:	4836      	ldr	r0, [pc, #216]	; (8011704 <tcp_bind+0x120>)
 801162c:	f009 fc0a 	bl	801ae44 <printf>
 8011630:	f06f 0305 	mvn.w	r3, #5
 8011634:	e05c      	b.n	80116f0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8011636:	88fb      	ldrh	r3, [r7, #6]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d109      	bne.n	8011650 <tcp_bind+0x6c>
    port = tcp_new_port();
 801163c:	f000 f9f0 	bl	8011a20 <tcp_new_port>
 8011640:	4603      	mov	r3, r0
 8011642:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011644:	88fb      	ldrh	r3, [r7, #6]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d135      	bne.n	80116b6 <tcp_bind+0xd2>
      return ERR_BUF;
 801164a:	f06f 0301 	mvn.w	r3, #1
 801164e:	e04f      	b.n	80116f0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011650:	2300      	movs	r3, #0
 8011652:	61fb      	str	r3, [r7, #28]
 8011654:	e02b      	b.n	80116ae <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011656:	4a2d      	ldr	r2, [pc, #180]	; (801170c <tcp_bind+0x128>)
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	61bb      	str	r3, [r7, #24]
 8011662:	e01e      	b.n	80116a2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	8adb      	ldrh	r3, [r3, #22]
 8011668:	88fa      	ldrh	r2, [r7, #6]
 801166a:	429a      	cmp	r2, r3
 801166c:	d116      	bne.n	801169c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801166e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011670:	2b00      	cmp	r3, #0
 8011672:	d010      	beq.n	8011696 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8011674:	69bb      	ldr	r3, [r7, #24]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00c      	beq.n	8011696 <tcp_bind+0xb2>
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d009      	beq.n	8011696 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d005      	beq.n	8011696 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	681a      	ldr	r2, [r3, #0]
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011692:	429a      	cmp	r2, r3
 8011694:	d102      	bne.n	801169c <tcp_bind+0xb8>
              return ERR_USE;
 8011696:	f06f 0307 	mvn.w	r3, #7
 801169a:	e029      	b.n	80116f0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	61bb      	str	r3, [r7, #24]
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d1dd      	bne.n	8011664 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	3301      	adds	r3, #1
 80116ac:	61fb      	str	r3, [r7, #28]
 80116ae:	69fa      	ldr	r2, [r7, #28]
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	dbcf      	blt.n	8011656 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00c      	beq.n	80116d6 <tcp_bind+0xf2>
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d008      	beq.n	80116d6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d002      	beq.n	80116d0 <tcp_bind+0xec>
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	e000      	b.n	80116d2 <tcp_bind+0xee>
 80116d0:	2300      	movs	r3, #0
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	88fa      	ldrh	r2, [r7, #6]
 80116da:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80116dc:	4b0c      	ldr	r3, [pc, #48]	; (8011710 <tcp_bind+0x12c>)
 80116de:	681a      	ldr	r2, [r3, #0]
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	60da      	str	r2, [r3, #12]
 80116e4:	4a0a      	ldr	r2, [pc, #40]	; (8011710 <tcp_bind+0x12c>)
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	6013      	str	r3, [r2, #0]
 80116ea:	f005 fccb 	bl	8017084 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3720      	adds	r7, #32
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	08028d2c 	.word	0x08028d2c
 80116fc:	080255d8 	.word	0x080255d8
 8011700:	0802576c 	.word	0x0802576c
 8011704:	0802561c 	.word	0x0802561c
 8011708:	08025784 	.word	0x08025784
 801170c:	08028d04 	.word	0x08028d04
 8011710:	2000be20 	.word	0x2000be20

08011714 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	4613      	mov	r3, r2
 8011720:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d106      	bne.n	8011736 <tcp_accept_null+0x22>
 8011728:	4b07      	ldr	r3, [pc, #28]	; (8011748 <tcp_accept_null+0x34>)
 801172a:	f240 320f 	movw	r2, #783	; 0x30f
 801172e:	4907      	ldr	r1, [pc, #28]	; (801174c <tcp_accept_null+0x38>)
 8011730:	4807      	ldr	r0, [pc, #28]	; (8011750 <tcp_accept_null+0x3c>)
 8011732:	f009 fb87 	bl	801ae44 <printf>

  tcp_abort(pcb);
 8011736:	68b8      	ldr	r0, [r7, #8]
 8011738:	f7ff ff48 	bl	80115cc <tcp_abort>

  return ERR_ABRT;
 801173c:	f06f 030c 	mvn.w	r3, #12
}
 8011740:	4618      	mov	r0, r3
 8011742:	3710      	adds	r7, #16
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}
 8011748:	080255d8 	.word	0x080255d8
 801174c:	080257ac 	.word	0x080257ac
 8011750:	0802561c 	.word	0x0802561c

08011754 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	460b      	mov	r3, r1
 801175e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8011760:	78fb      	ldrb	r3, [r7, #3]
 8011762:	2200      	movs	r2, #0
 8011764:	4619      	mov	r1, r3
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f000 f806 	bl	8011778 <tcp_listen_with_backlog_and_err>
 801176c:	4603      	mov	r3, r0
}
 801176e:	4618      	mov	r0, r3
 8011770:	3708      	adds	r7, #8
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
	...

08011778 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b088      	sub	sp, #32
 801177c:	af00      	add	r7, sp, #0
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	460b      	mov	r3, r1
 8011782:	607a      	str	r2, [r7, #4]
 8011784:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8011786:	2300      	movs	r3, #0
 8011788:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d109      	bne.n	80117a4 <tcp_listen_with_backlog_and_err+0x2c>
 8011790:	4b47      	ldr	r3, [pc, #284]	; (80118b0 <tcp_listen_with_backlog_and_err+0x138>)
 8011792:	f240 3259 	movw	r2, #857	; 0x359
 8011796:	4947      	ldr	r1, [pc, #284]	; (80118b4 <tcp_listen_with_backlog_and_err+0x13c>)
 8011798:	4847      	ldr	r0, [pc, #284]	; (80118b8 <tcp_listen_with_backlog_and_err+0x140>)
 801179a:	f009 fb53 	bl	801ae44 <printf>
 801179e:	23f0      	movs	r3, #240	; 0xf0
 80117a0:	76fb      	strb	r3, [r7, #27]
 80117a2:	e079      	b.n	8011898 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	7d1b      	ldrb	r3, [r3, #20]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d009      	beq.n	80117c0 <tcp_listen_with_backlog_and_err+0x48>
 80117ac:	4b40      	ldr	r3, [pc, #256]	; (80118b0 <tcp_listen_with_backlog_and_err+0x138>)
 80117ae:	f240 325a 	movw	r2, #858	; 0x35a
 80117b2:	4942      	ldr	r1, [pc, #264]	; (80118bc <tcp_listen_with_backlog_and_err+0x144>)
 80117b4:	4840      	ldr	r0, [pc, #256]	; (80118b8 <tcp_listen_with_backlog_and_err+0x140>)
 80117b6:	f009 fb45 	bl	801ae44 <printf>
 80117ba:	23f1      	movs	r3, #241	; 0xf1
 80117bc:	76fb      	strb	r3, [r7, #27]
 80117be:	e06b      	b.n	8011898 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	7d1b      	ldrb	r3, [r3, #20]
 80117c4:	2b01      	cmp	r3, #1
 80117c6:	d104      	bne.n	80117d2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80117cc:	23f7      	movs	r3, #247	; 0xf7
 80117ce:	76fb      	strb	r3, [r7, #27]
    goto done;
 80117d0:	e062      	b.n	8011898 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80117d2:	2002      	movs	r0, #2
 80117d4:	f7fe fa7c 	bl	800fcd0 <memp_malloc>
 80117d8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d102      	bne.n	80117e6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80117e0:	23ff      	movs	r3, #255	; 0xff
 80117e2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80117e4:	e058      	b.n	8011898 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	691a      	ldr	r2, [r3, #16]
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	8ada      	ldrh	r2, [r3, #22]
 80117f2:	69fb      	ldr	r3, [r7, #28]
 80117f4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	2201      	movs	r2, #1
 80117fa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	7d5a      	ldrb	r2, [r3, #21]
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	7a5a      	ldrb	r2, [r3, #9]
 8011808:	69fb      	ldr	r3, [r7, #28]
 801180a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	2200      	movs	r2, #0
 8011810:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	7ada      	ldrb	r2, [r3, #11]
 8011816:	69fb      	ldr	r3, [r7, #28]
 8011818:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	7a9a      	ldrb	r2, [r3, #10]
 801181e:	69fb      	ldr	r3, [r7, #28]
 8011820:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	681a      	ldr	r2, [r3, #0]
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	8adb      	ldrh	r3, [r3, #22]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d021      	beq.n	8011876 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8011832:	4b23      	ldr	r3, [pc, #140]	; (80118c0 <tcp_listen_with_backlog_and_err+0x148>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	68fa      	ldr	r2, [r7, #12]
 8011838:	429a      	cmp	r2, r3
 801183a:	d105      	bne.n	8011848 <tcp_listen_with_backlog_and_err+0xd0>
 801183c:	4b20      	ldr	r3, [pc, #128]	; (80118c0 <tcp_listen_with_backlog_and_err+0x148>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	4a1f      	ldr	r2, [pc, #124]	; (80118c0 <tcp_listen_with_backlog_and_err+0x148>)
 8011844:	6013      	str	r3, [r2, #0]
 8011846:	e013      	b.n	8011870 <tcp_listen_with_backlog_and_err+0xf8>
 8011848:	4b1d      	ldr	r3, [pc, #116]	; (80118c0 <tcp_listen_with_backlog_and_err+0x148>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	617b      	str	r3, [r7, #20]
 801184e:	e00c      	b.n	801186a <tcp_listen_with_backlog_and_err+0xf2>
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	68db      	ldr	r3, [r3, #12]
 8011854:	68fa      	ldr	r2, [r7, #12]
 8011856:	429a      	cmp	r2, r3
 8011858:	d104      	bne.n	8011864 <tcp_listen_with_backlog_and_err+0xec>
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	68da      	ldr	r2, [r3, #12]
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	60da      	str	r2, [r3, #12]
 8011862:	e005      	b.n	8011870 <tcp_listen_with_backlog_and_err+0xf8>
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	617b      	str	r3, [r7, #20]
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d1ef      	bne.n	8011850 <tcp_listen_with_backlog_and_err+0xd8>
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2200      	movs	r2, #0
 8011874:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	f7ff fb64 	bl	8010f44 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	4a11      	ldr	r2, [pc, #68]	; (80118c4 <tcp_listen_with_backlog_and_err+0x14c>)
 8011880:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8011882:	4b11      	ldr	r3, [pc, #68]	; (80118c8 <tcp_listen_with_backlog_and_err+0x150>)
 8011884:	681a      	ldr	r2, [r3, #0]
 8011886:	69fb      	ldr	r3, [r7, #28]
 8011888:	60da      	str	r2, [r3, #12]
 801188a:	4a0f      	ldr	r2, [pc, #60]	; (80118c8 <tcp_listen_with_backlog_and_err+0x150>)
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	6013      	str	r3, [r2, #0]
 8011890:	f005 fbf8 	bl	8017084 <tcp_timer_needed>
  res = ERR_OK;
 8011894:	2300      	movs	r3, #0
 8011896:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d002      	beq.n	80118a4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	7efa      	ldrb	r2, [r7, #27]
 80118a2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80118a4:	69fb      	ldr	r3, [r7, #28]
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3720      	adds	r7, #32
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	080255d8 	.word	0x080255d8
 80118b4:	080257cc 	.word	0x080257cc
 80118b8:	0802561c 	.word	0x0802561c
 80118bc:	080257fc 	.word	0x080257fc
 80118c0:	2000be20 	.word	0x2000be20
 80118c4:	08011715 	.word	0x08011715
 80118c8:	2000be1c 	.word	0x2000be1c

080118cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b084      	sub	sp, #16
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d106      	bne.n	80118e8 <tcp_update_rcv_ann_wnd+0x1c>
 80118da:	4b25      	ldr	r3, [pc, #148]	; (8011970 <tcp_update_rcv_ann_wnd+0xa4>)
 80118dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80118e0:	4924      	ldr	r1, [pc, #144]	; (8011974 <tcp_update_rcv_ann_wnd+0xa8>)
 80118e2:	4825      	ldr	r0, [pc, #148]	; (8011978 <tcp_update_rcv_ann_wnd+0xac>)
 80118e4:	f009 faae 	bl	801ae44 <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ec:	687a      	ldr	r2, [r7, #4]
 80118ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80118f0:	4413      	add	r3, r2
 80118f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f8:	687a      	ldr	r2, [r7, #4]
 80118fa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80118fc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011900:	bf28      	it	cs
 8011902:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011906:	b292      	uxth	r2, r2
 8011908:	4413      	add	r3, r2
 801190a:	68fa      	ldr	r2, [r7, #12]
 801190c:	1ad3      	subs	r3, r2, r3
 801190e:	2b00      	cmp	r3, #0
 8011910:	db08      	blt.n	8011924 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801191e:	68fa      	ldr	r2, [r7, #12]
 8011920:	1ad3      	subs	r3, r2, r3
 8011922:	e020      	b.n	8011966 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801192c:	1ad3      	subs	r3, r2, r3
 801192e:	2b00      	cmp	r3, #0
 8011930:	dd03      	ble.n	801193a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2200      	movs	r2, #0
 8011936:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011938:	e014      	b.n	8011964 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011942:	1ad3      	subs	r3, r2, r3
 8011944:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801194c:	d306      	bcc.n	801195c <tcp_update_rcv_ann_wnd+0x90>
 801194e:	4b08      	ldr	r3, [pc, #32]	; (8011970 <tcp_update_rcv_ann_wnd+0xa4>)
 8011950:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011954:	4909      	ldr	r1, [pc, #36]	; (801197c <tcp_update_rcv_ann_wnd+0xb0>)
 8011956:	4808      	ldr	r0, [pc, #32]	; (8011978 <tcp_update_rcv_ann_wnd+0xac>)
 8011958:	f009 fa74 	bl	801ae44 <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	b29a      	uxth	r2, r3
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011964:	2300      	movs	r3, #0
  }
}
 8011966:	4618      	mov	r0, r3
 8011968:	3710      	adds	r7, #16
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}
 801196e:	bf00      	nop
 8011970:	080255d8 	.word	0x080255d8
 8011974:	08025834 	.word	0x08025834
 8011978:	0802561c 	.word	0x0802561c
 801197c:	08025858 	.word	0x08025858

08011980 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	460b      	mov	r3, r1
 801198a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d107      	bne.n	80119a2 <tcp_recved+0x22>
 8011992:	4b1f      	ldr	r3, [pc, #124]	; (8011a10 <tcp_recved+0x90>)
 8011994:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011998:	491e      	ldr	r1, [pc, #120]	; (8011a14 <tcp_recved+0x94>)
 801199a:	481f      	ldr	r0, [pc, #124]	; (8011a18 <tcp_recved+0x98>)
 801199c:	f009 fa52 	bl	801ae44 <printf>
 80119a0:	e032      	b.n	8011a08 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	7d1b      	ldrb	r3, [r3, #20]
 80119a6:	2b01      	cmp	r3, #1
 80119a8:	d106      	bne.n	80119b8 <tcp_recved+0x38>
 80119aa:	4b19      	ldr	r3, [pc, #100]	; (8011a10 <tcp_recved+0x90>)
 80119ac:	f240 32d2 	movw	r2, #978	; 0x3d2
 80119b0:	491a      	ldr	r1, [pc, #104]	; (8011a1c <tcp_recved+0x9c>)
 80119b2:	4819      	ldr	r0, [pc, #100]	; (8011a18 <tcp_recved+0x98>)
 80119b4:	f009 fa46 	bl	801ae44 <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80119bc:	887b      	ldrh	r3, [r7, #2]
 80119be:	4413      	add	r3, r2
 80119c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80119c2:	89fb      	ldrh	r3, [r7, #14]
 80119c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80119c8:	d804      	bhi.n	80119d4 <tcp_recved+0x54>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119ce:	89fa      	ldrh	r2, [r7, #14]
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d204      	bcs.n	80119de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80119da:	851a      	strh	r2, [r3, #40]	; 0x28
 80119dc:	e002      	b.n	80119e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	89fa      	ldrh	r2, [r7, #14]
 80119e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f7ff ff71 	bl	80118cc <tcp_update_rcv_ann_wnd>
 80119ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80119f2:	d309      	bcc.n	8011a08 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	8b5b      	ldrh	r3, [r3, #26]
 80119f8:	f043 0302 	orr.w	r3, r3, #2
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f004 fbc8 	bl	8016198 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011a08:	3710      	adds	r7, #16
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	080255d8 	.word	0x080255d8
 8011a14:	08025874 	.word	0x08025874
 8011a18:	0802561c 	.word	0x0802561c
 8011a1c:	0802588c 	.word	0x0802588c

08011a20 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b083      	sub	sp, #12
 8011a24:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011a26:	2300      	movs	r3, #0
 8011a28:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8011a2a:	4b1e      	ldr	r3, [pc, #120]	; (8011aa4 <tcp_new_port+0x84>)
 8011a2c:	881b      	ldrh	r3, [r3, #0]
 8011a2e:	3301      	adds	r3, #1
 8011a30:	b29a      	uxth	r2, r3
 8011a32:	4b1c      	ldr	r3, [pc, #112]	; (8011aa4 <tcp_new_port+0x84>)
 8011a34:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8011a36:	4b1b      	ldr	r3, [pc, #108]	; (8011aa4 <tcp_new_port+0x84>)
 8011a38:	881b      	ldrh	r3, [r3, #0]
 8011a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d103      	bne.n	8011a4a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8011a42:	4b18      	ldr	r3, [pc, #96]	; (8011aa4 <tcp_new_port+0x84>)
 8011a44:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011a48:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	71fb      	strb	r3, [r7, #7]
 8011a4e:	e01e      	b.n	8011a8e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011a50:	79fb      	ldrb	r3, [r7, #7]
 8011a52:	4a15      	ldr	r2, [pc, #84]	; (8011aa8 <tcp_new_port+0x88>)
 8011a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	603b      	str	r3, [r7, #0]
 8011a5c:	e011      	b.n	8011a82 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	8ada      	ldrh	r2, [r3, #22]
 8011a62:	4b10      	ldr	r3, [pc, #64]	; (8011aa4 <tcp_new_port+0x84>)
 8011a64:	881b      	ldrh	r3, [r3, #0]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d108      	bne.n	8011a7c <tcp_new_port+0x5c>
        n++;
 8011a6a:	88bb      	ldrh	r3, [r7, #4]
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011a70:	88bb      	ldrh	r3, [r7, #4]
 8011a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011a76:	d3d8      	bcc.n	8011a2a <tcp_new_port+0xa>
          return 0;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	e00d      	b.n	8011a98 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	603b      	str	r3, [r7, #0]
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d1ea      	bne.n	8011a5e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011a88:	79fb      	ldrb	r3, [r7, #7]
 8011a8a:	3301      	adds	r3, #1
 8011a8c:	71fb      	strb	r3, [r7, #7]
 8011a8e:	79fb      	ldrb	r3, [r7, #7]
 8011a90:	2b03      	cmp	r3, #3
 8011a92:	d9dd      	bls.n	8011a50 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011a94:	4b03      	ldr	r3, [pc, #12]	; (8011aa4 <tcp_new_port+0x84>)
 8011a96:	881b      	ldrh	r3, [r3, #0]
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	370c      	adds	r7, #12
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa2:	4770      	bx	lr
 8011aa4:	2000002c 	.word	0x2000002c
 8011aa8:	08028d04 	.word	0x08028d04

08011aac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011aac:	b5b0      	push	{r4, r5, r7, lr}
 8011aae:	b090      	sub	sp, #64	; 0x40
 8011ab0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011ab8:	4b94      	ldr	r3, [pc, #592]	; (8011d0c <tcp_slowtmr+0x260>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	3301      	adds	r3, #1
 8011abe:	4a93      	ldr	r2, [pc, #588]	; (8011d0c <tcp_slowtmr+0x260>)
 8011ac0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011ac2:	4b93      	ldr	r3, [pc, #588]	; (8011d10 <tcp_slowtmr+0x264>)
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	3301      	adds	r3, #1
 8011ac8:	b2da      	uxtb	r2, r3
 8011aca:	4b91      	ldr	r3, [pc, #580]	; (8011d10 <tcp_slowtmr+0x264>)
 8011acc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011ad2:	4b90      	ldr	r3, [pc, #576]	; (8011d14 <tcp_slowtmr+0x268>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011ad8:	e29d      	b.n	8012016 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011adc:	7d1b      	ldrb	r3, [r3, #20]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d106      	bne.n	8011af0 <tcp_slowtmr+0x44>
 8011ae2:	4b8d      	ldr	r3, [pc, #564]	; (8011d18 <tcp_slowtmr+0x26c>)
 8011ae4:	f240 42be 	movw	r2, #1214	; 0x4be
 8011ae8:	498c      	ldr	r1, [pc, #560]	; (8011d1c <tcp_slowtmr+0x270>)
 8011aea:	488d      	ldr	r0, [pc, #564]	; (8011d20 <tcp_slowtmr+0x274>)
 8011aec:	f009 f9aa 	bl	801ae44 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af2:	7d1b      	ldrb	r3, [r3, #20]
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	d106      	bne.n	8011b06 <tcp_slowtmr+0x5a>
 8011af8:	4b87      	ldr	r3, [pc, #540]	; (8011d18 <tcp_slowtmr+0x26c>)
 8011afa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011afe:	4989      	ldr	r1, [pc, #548]	; (8011d24 <tcp_slowtmr+0x278>)
 8011b00:	4887      	ldr	r0, [pc, #540]	; (8011d20 <tcp_slowtmr+0x274>)
 8011b02:	f009 f99f 	bl	801ae44 <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b08:	7d1b      	ldrb	r3, [r3, #20]
 8011b0a:	2b0a      	cmp	r3, #10
 8011b0c:	d106      	bne.n	8011b1c <tcp_slowtmr+0x70>
 8011b0e:	4b82      	ldr	r3, [pc, #520]	; (8011d18 <tcp_slowtmr+0x26c>)
 8011b10:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011b14:	4984      	ldr	r1, [pc, #528]	; (8011d28 <tcp_slowtmr+0x27c>)
 8011b16:	4882      	ldr	r0, [pc, #520]	; (8011d20 <tcp_slowtmr+0x274>)
 8011b18:	f009 f994 	bl	801ae44 <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b1e:	7f9a      	ldrb	r2, [r3, #30]
 8011b20:	4b7b      	ldr	r3, [pc, #492]	; (8011d10 <tcp_slowtmr+0x264>)
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d105      	bne.n	8011b34 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2e:	68db      	ldr	r3, [r3, #12]
 8011b30:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011b32:	e270      	b.n	8012016 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011b34:	4b76      	ldr	r3, [pc, #472]	; (8011d10 <tcp_slowtmr+0x264>)
 8011b36:	781a      	ldrb	r2, [r3, #0]
 8011b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011b42:	2300      	movs	r3, #0
 8011b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4a:	7d1b      	ldrb	r3, [r3, #20]
 8011b4c:	2b02      	cmp	r3, #2
 8011b4e:	d10a      	bne.n	8011b66 <tcp_slowtmr+0xba>
 8011b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011b56:	2b05      	cmp	r3, #5
 8011b58:	d905      	bls.n	8011b66 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b5e:	3301      	adds	r3, #1
 8011b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b64:	e11e      	b.n	8011da4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011b6c:	2b0b      	cmp	r3, #11
 8011b6e:	d905      	bls.n	8011b7c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b74:	3301      	adds	r3, #1
 8011b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b7a:	e113      	b.n	8011da4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d075      	beq.n	8011c72 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d006      	beq.n	8011b9c <tcp_slowtmr+0xf0>
 8011b8e:	4b62      	ldr	r3, [pc, #392]	; (8011d18 <tcp_slowtmr+0x26c>)
 8011b90:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011b94:	4965      	ldr	r1, [pc, #404]	; (8011d2c <tcp_slowtmr+0x280>)
 8011b96:	4862      	ldr	r0, [pc, #392]	; (8011d20 <tcp_slowtmr+0x274>)
 8011b98:	f009 f954 	bl	801ae44 <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d106      	bne.n	8011bb2 <tcp_slowtmr+0x106>
 8011ba4:	4b5c      	ldr	r3, [pc, #368]	; (8011d18 <tcp_slowtmr+0x26c>)
 8011ba6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011baa:	4961      	ldr	r1, [pc, #388]	; (8011d30 <tcp_slowtmr+0x284>)
 8011bac:	485c      	ldr	r0, [pc, #368]	; (8011d20 <tcp_slowtmr+0x274>)
 8011bae:	f009 f949 	bl	801ae44 <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011bb8:	2b0b      	cmp	r3, #11
 8011bba:	d905      	bls.n	8011bc8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011bc6:	e0ed      	b.n	8011da4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011bce:	3b01      	subs	r3, #1
 8011bd0:	4a58      	ldr	r2, [pc, #352]	; (8011d34 <tcp_slowtmr+0x288>)
 8011bd2:	5cd3      	ldrb	r3, [r2, r3]
 8011bd4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011bdc:	7c7a      	ldrb	r2, [r7, #17]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d907      	bls.n	8011bf2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011be8:	3301      	adds	r3, #1
 8011bea:	b2da      	uxtb	r2, r3
 8011bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011bf8:	7c7a      	ldrb	r2, [r7, #17]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	f200 80d2 	bhi.w	8011da4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011c00:	2301      	movs	r3, #1
 8011c02:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d108      	bne.n	8011c20 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c10:	f005 f96a 	bl	8016ee8 <tcp_zero_window_probe>
 8011c14:	4603      	mov	r3, r0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d014      	beq.n	8011c44 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	623b      	str	r3, [r7, #32]
 8011c1e:	e011      	b.n	8011c44 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c26:	4619      	mov	r1, r3
 8011c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c2a:	f004 f82f 	bl	8015c8c <tcp_split_unsent_seg>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d107      	bne.n	8011c44 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011c34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c36:	f004 faaf 	bl	8016198 <tcp_output>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d101      	bne.n	8011c44 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011c40:	2300      	movs	r3, #0
 8011c42:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011c44:	6a3b      	ldr	r3, [r7, #32]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	f000 80ac 	beq.w	8011da4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c4e:	2200      	movs	r2, #0
 8011c50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011c5a:	2b06      	cmp	r3, #6
 8011c5c:	f200 80a2 	bhi.w	8011da4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c62:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011c66:	3301      	adds	r3, #1
 8011c68:	b2da      	uxtb	r2, r3
 8011c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c6c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011c70:	e098      	b.n	8011da4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	db0f      	blt.n	8011c9c <tcp_slowtmr+0x1f0>
 8011c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011c82:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011c86:	4293      	cmp	r3, r2
 8011c88:	d008      	beq.n	8011c9c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	3301      	adds	r3, #1
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	b21a      	sxth	r2, r3
 8011c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	db7b      	blt.n	8011da4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011cac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cae:	f004 fd65 	bl	801677c <tcp_rexmit_rto_prepare>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d007      	beq.n	8011cc8 <tcp_slowtmr+0x21c>
 8011cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d171      	bne.n	8011da4 <tcp_slowtmr+0x2f8>
 8011cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d06d      	beq.n	8011da4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cca:	7d1b      	ldrb	r3, [r3, #20]
 8011ccc:	2b02      	cmp	r3, #2
 8011cce:	d03a      	beq.n	8011d46 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011cd6:	2b0c      	cmp	r3, #12
 8011cd8:	bf28      	it	cs
 8011cda:	230c      	movcs	r3, #12
 8011cdc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011ce4:	10db      	asrs	r3, r3, #3
 8011ce6:	b21b      	sxth	r3, r3
 8011ce8:	461a      	mov	r2, r3
 8011cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011cf0:	4413      	add	r3, r2
 8011cf2:	7efa      	ldrb	r2, [r7, #27]
 8011cf4:	4910      	ldr	r1, [pc, #64]	; (8011d38 <tcp_slowtmr+0x28c>)
 8011cf6:	5c8a      	ldrb	r2, [r1, r2]
 8011cf8:	4093      	lsls	r3, r2
 8011cfa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011d02:	4293      	cmp	r3, r2
 8011d04:	dc1a      	bgt.n	8011d3c <tcp_slowtmr+0x290>
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	b21a      	sxth	r2, r3
 8011d0a:	e019      	b.n	8011d40 <tcp_slowtmr+0x294>
 8011d0c:	2000be18 	.word	0x2000be18
 8011d10:	20004ef6 	.word	0x20004ef6
 8011d14:	2000be14 	.word	0x2000be14
 8011d18:	080255d8 	.word	0x080255d8
 8011d1c:	0802591c 	.word	0x0802591c
 8011d20:	0802561c 	.word	0x0802561c
 8011d24:	08025948 	.word	0x08025948
 8011d28:	08025974 	.word	0x08025974
 8011d2c:	080259a4 	.word	0x080259a4
 8011d30:	080259d8 	.word	0x080259d8
 8011d34:	08028cfc 	.word	0x08028cfc
 8011d38:	08028cec 	.word	0x08028cec
 8011d3c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d48:	2200      	movs	r2, #0
 8011d4a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011d58:	4293      	cmp	r3, r2
 8011d5a:	bf28      	it	cs
 8011d5c:	4613      	movcs	r3, r2
 8011d5e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011d60:	8a7b      	ldrh	r3, [r7, #18]
 8011d62:	085b      	lsrs	r3, r3, #1
 8011d64:	b29a      	uxth	r2, r3
 8011d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d68:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d76:	005b      	lsls	r3, r3, #1
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d206      	bcs.n	8011d8c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d82:	005b      	lsls	r3, r3, #1
 8011d84:	b29a      	uxth	r2, r3
 8011d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d98:	2200      	movs	r2, #0
 8011d9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011da0:	f004 fd5c 	bl	801685c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da6:	7d1b      	ldrb	r3, [r3, #20]
 8011da8:	2b06      	cmp	r3, #6
 8011daa:	d111      	bne.n	8011dd0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dae:	8b5b      	ldrh	r3, [r3, #26]
 8011db0:	f003 0310 	and.w	r3, r3, #16
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d00b      	beq.n	8011dd0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011db8:	4b9c      	ldr	r3, [pc, #624]	; (801202c <tcp_slowtmr+0x580>)
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dbe:	6a1b      	ldr	r3, [r3, #32]
 8011dc0:	1ad3      	subs	r3, r2, r3
 8011dc2:	2b28      	cmp	r3, #40	; 0x28
 8011dc4:	d904      	bls.n	8011dd0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dca:	3301      	adds	r3, #1
 8011dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd2:	7a5b      	ldrb	r3, [r3, #9]
 8011dd4:	f003 0308 	and.w	r3, r3, #8
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d04a      	beq.n	8011e72 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dde:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011de0:	2b04      	cmp	r3, #4
 8011de2:	d003      	beq.n	8011dec <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011de8:	2b07      	cmp	r3, #7
 8011dea:	d142      	bne.n	8011e72 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011dec:	4b8f      	ldr	r3, [pc, #572]	; (801202c <tcp_slowtmr+0x580>)
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df2:	6a1b      	ldr	r3, [r3, #32]
 8011df4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011dfc:	4b8c      	ldr	r3, [pc, #560]	; (8012030 <tcp_slowtmr+0x584>)
 8011dfe:	440b      	add	r3, r1
 8011e00:	498c      	ldr	r1, [pc, #560]	; (8012034 <tcp_slowtmr+0x588>)
 8011e02:	fba1 1303 	umull	r1, r3, r1, r3
 8011e06:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d90a      	bls.n	8011e22 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e10:	3301      	adds	r3, #1
 8011e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011e16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e1a:	3301      	adds	r3, #1
 8011e1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011e20:	e027      	b.n	8011e72 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011e22:	4b82      	ldr	r3, [pc, #520]	; (801202c <tcp_slowtmr+0x580>)
 8011e24:	681a      	ldr	r2, [r3, #0]
 8011e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e28:	6a1b      	ldr	r3, [r3, #32]
 8011e2a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e2e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e34:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011e38:	4618      	mov	r0, r3
 8011e3a:	4b7f      	ldr	r3, [pc, #508]	; (8012038 <tcp_slowtmr+0x58c>)
 8011e3c:	fb03 f300 	mul.w	r3, r3, r0
 8011e40:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011e42:	497c      	ldr	r1, [pc, #496]	; (8012034 <tcp_slowtmr+0x588>)
 8011e44:	fba1 1303 	umull	r1, r3, r1, r3
 8011e48:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	d911      	bls.n	8011e72 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011e4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e50:	f005 f80a 	bl	8016e68 <tcp_keepalive>
 8011e54:	4603      	mov	r3, r0
 8011e56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011e5a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d107      	bne.n	8011e72 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011e68:	3301      	adds	r3, #1
 8011e6a:	b2da      	uxtb	r2, r3
 8011e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d011      	beq.n	8011e9e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011e7a:	4b6c      	ldr	r3, [pc, #432]	; (801202c <tcp_slowtmr+0x580>)
 8011e7c:	681a      	ldr	r2, [r3, #0]
 8011e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e80:	6a1b      	ldr	r3, [r3, #32]
 8011e82:	1ad2      	subs	r2, r2, r3
 8011e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e86:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	460b      	mov	r3, r1
 8011e8e:	005b      	lsls	r3, r3, #1
 8011e90:	440b      	add	r3, r1
 8011e92:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d302      	bcc.n	8011e9e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011e98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e9a:	f000 fec9 	bl	8012c30 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea0:	7d1b      	ldrb	r3, [r3, #20]
 8011ea2:	2b03      	cmp	r3, #3
 8011ea4:	d10b      	bne.n	8011ebe <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ea6:	4b61      	ldr	r3, [pc, #388]	; (801202c <tcp_slowtmr+0x580>)
 8011ea8:	681a      	ldr	r2, [r3, #0]
 8011eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eac:	6a1b      	ldr	r3, [r3, #32]
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	2b28      	cmp	r3, #40	; 0x28
 8011eb2:	d904      	bls.n	8011ebe <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011eb8:	3301      	adds	r3, #1
 8011eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec0:	7d1b      	ldrb	r3, [r3, #20]
 8011ec2:	2b09      	cmp	r3, #9
 8011ec4:	d10b      	bne.n	8011ede <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011ec6:	4b59      	ldr	r3, [pc, #356]	; (801202c <tcp_slowtmr+0x580>)
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ecc:	6a1b      	ldr	r3, [r3, #32]
 8011ece:	1ad3      	subs	r3, r2, r3
 8011ed0:	2bf0      	cmp	r3, #240	; 0xf0
 8011ed2:	d904      	bls.n	8011ede <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ed8:	3301      	adds	r3, #1
 8011eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d060      	beq.n	8011fa8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011eec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ef0:	f000 fcea 	bl	80128c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d010      	beq.n	8011f1c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011efa:	4b50      	ldr	r3, [pc, #320]	; (801203c <tcp_slowtmr+0x590>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d106      	bne.n	8011f12 <tcp_slowtmr+0x466>
 8011f04:	4b4e      	ldr	r3, [pc, #312]	; (8012040 <tcp_slowtmr+0x594>)
 8011f06:	f240 526d 	movw	r2, #1389	; 0x56d
 8011f0a:	494e      	ldr	r1, [pc, #312]	; (8012044 <tcp_slowtmr+0x598>)
 8011f0c:	484e      	ldr	r0, [pc, #312]	; (8012048 <tcp_slowtmr+0x59c>)
 8011f0e:	f008 ff99 	bl	801ae44 <printf>
        prev->next = pcb->next;
 8011f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f14:	68da      	ldr	r2, [r3, #12]
 8011f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f18:	60da      	str	r2, [r3, #12]
 8011f1a:	e00f      	b.n	8011f3c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011f1c:	4b47      	ldr	r3, [pc, #284]	; (801203c <tcp_slowtmr+0x590>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d006      	beq.n	8011f34 <tcp_slowtmr+0x488>
 8011f26:	4b46      	ldr	r3, [pc, #280]	; (8012040 <tcp_slowtmr+0x594>)
 8011f28:	f240 5271 	movw	r2, #1393	; 0x571
 8011f2c:	4947      	ldr	r1, [pc, #284]	; (801204c <tcp_slowtmr+0x5a0>)
 8011f2e:	4846      	ldr	r0, [pc, #280]	; (8012048 <tcp_slowtmr+0x59c>)
 8011f30:	f008 ff88 	bl	801ae44 <printf>
        tcp_active_pcbs = pcb->next;
 8011f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	4a40      	ldr	r2, [pc, #256]	; (801203c <tcp_slowtmr+0x590>)
 8011f3a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011f3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d013      	beq.n	8011f6c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f46:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f4a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011f4c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f50:	3304      	adds	r3, #4
 8011f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f54:	8ad2      	ldrh	r2, [r2, #22]
 8011f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f58:	8b09      	ldrh	r1, [r1, #24]
 8011f5a:	9102      	str	r1, [sp, #8]
 8011f5c:	9201      	str	r2, [sp, #4]
 8011f5e:	9300      	str	r3, [sp, #0]
 8011f60:	462b      	mov	r3, r5
 8011f62:	4622      	mov	r2, r4
 8011f64:	4601      	mov	r1, r0
 8011f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f68:	f004 feca 	bl	8016d00 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6e:	691b      	ldr	r3, [r3, #16]
 8011f70:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f74:	7d1b      	ldrb	r3, [r3, #20]
 8011f76:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011f82:	6838      	ldr	r0, [r7, #0]
 8011f84:	f7fe ffde 	bl	8010f44 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011f88:	4b31      	ldr	r3, [pc, #196]	; (8012050 <tcp_slowtmr+0x5a4>)
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d004      	beq.n	8011f9e <tcp_slowtmr+0x4f2>
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	f06f 010c 	mvn.w	r1, #12
 8011f9a:	68b8      	ldr	r0, [r7, #8]
 8011f9c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011f9e:	4b2c      	ldr	r3, [pc, #176]	; (8012050 <tcp_slowtmr+0x5a4>)
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d037      	beq.n	8012016 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011fa6:	e592      	b.n	8011ace <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011faa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb4:	7f1b      	ldrb	r3, [r3, #28]
 8011fb6:	3301      	adds	r3, #1
 8011fb8:	b2da      	uxtb	r2, r3
 8011fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fbc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc0:	7f1a      	ldrb	r2, [r3, #28]
 8011fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc4:	7f5b      	ldrb	r3, [r3, #29]
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d325      	bcc.n	8012016 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fcc:	2200      	movs	r2, #0
 8011fce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011fd0:	4b1f      	ldr	r3, [pc, #124]	; (8012050 <tcp_slowtmr+0x5a4>)
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d00b      	beq.n	8011ff8 <tcp_slowtmr+0x54c>
 8011fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fe8:	6912      	ldr	r2, [r2, #16]
 8011fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011fec:	4610      	mov	r0, r2
 8011fee:	4798      	blx	r3
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011ff6:	e002      	b.n	8011ffe <tcp_slowtmr+0x552>
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011ffe:	4b14      	ldr	r3, [pc, #80]	; (8012050 <tcp_slowtmr+0x5a4>)
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d000      	beq.n	8012008 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8012006:	e562      	b.n	8011ace <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012008:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801200c:	2b00      	cmp	r3, #0
 801200e:	d102      	bne.n	8012016 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012012:	f004 f8c1 	bl	8016198 <tcp_output>
  while (pcb != NULL) {
 8012016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012018:	2b00      	cmp	r3, #0
 801201a:	f47f ad5e 	bne.w	8011ada <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801201e:	2300      	movs	r3, #0
 8012020:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012022:	4b0c      	ldr	r3, [pc, #48]	; (8012054 <tcp_slowtmr+0x5a8>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012028:	e069      	b.n	80120fe <tcp_slowtmr+0x652>
 801202a:	bf00      	nop
 801202c:	2000be18 	.word	0x2000be18
 8012030:	000a4cb8 	.word	0x000a4cb8
 8012034:	10624dd3 	.word	0x10624dd3
 8012038:	000124f8 	.word	0x000124f8
 801203c:	2000be14 	.word	0x2000be14
 8012040:	080255d8 	.word	0x080255d8
 8012044:	08025a10 	.word	0x08025a10
 8012048:	0802561c 	.word	0x0802561c
 801204c:	08025a3c 	.word	0x08025a3c
 8012050:	2000be10 	.word	0x2000be10
 8012054:	2000be24 	.word	0x2000be24
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205a:	7d1b      	ldrb	r3, [r3, #20]
 801205c:	2b0a      	cmp	r3, #10
 801205e:	d006      	beq.n	801206e <tcp_slowtmr+0x5c2>
 8012060:	4b2b      	ldr	r3, [pc, #172]	; (8012110 <tcp_slowtmr+0x664>)
 8012062:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012066:	492b      	ldr	r1, [pc, #172]	; (8012114 <tcp_slowtmr+0x668>)
 8012068:	482b      	ldr	r0, [pc, #172]	; (8012118 <tcp_slowtmr+0x66c>)
 801206a:	f008 feeb 	bl	801ae44 <printf>
    pcb_remove = 0;
 801206e:	2300      	movs	r3, #0
 8012070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012074:	4b29      	ldr	r3, [pc, #164]	; (801211c <tcp_slowtmr+0x670>)
 8012076:	681a      	ldr	r2, [r3, #0]
 8012078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207a:	6a1b      	ldr	r3, [r3, #32]
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	2bf0      	cmp	r3, #240	; 0xf0
 8012080:	d904      	bls.n	801208c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012086:	3301      	adds	r3, #1
 8012088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801208c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012090:	2b00      	cmp	r3, #0
 8012092:	d02f      	beq.n	80120f4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012094:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012096:	f000 fc17 	bl	80128c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209c:	2b00      	cmp	r3, #0
 801209e:	d010      	beq.n	80120c2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80120a0:	4b1f      	ldr	r3, [pc, #124]	; (8012120 <tcp_slowtmr+0x674>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d106      	bne.n	80120b8 <tcp_slowtmr+0x60c>
 80120aa:	4b19      	ldr	r3, [pc, #100]	; (8012110 <tcp_slowtmr+0x664>)
 80120ac:	f240 52af 	movw	r2, #1455	; 0x5af
 80120b0:	491c      	ldr	r1, [pc, #112]	; (8012124 <tcp_slowtmr+0x678>)
 80120b2:	4819      	ldr	r0, [pc, #100]	; (8012118 <tcp_slowtmr+0x66c>)
 80120b4:	f008 fec6 	bl	801ae44 <printf>
        prev->next = pcb->next;
 80120b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ba:	68da      	ldr	r2, [r3, #12]
 80120bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120be:	60da      	str	r2, [r3, #12]
 80120c0:	e00f      	b.n	80120e2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80120c2:	4b17      	ldr	r3, [pc, #92]	; (8012120 <tcp_slowtmr+0x674>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d006      	beq.n	80120da <tcp_slowtmr+0x62e>
 80120cc:	4b10      	ldr	r3, [pc, #64]	; (8012110 <tcp_slowtmr+0x664>)
 80120ce:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80120d2:	4915      	ldr	r1, [pc, #84]	; (8012128 <tcp_slowtmr+0x67c>)
 80120d4:	4810      	ldr	r0, [pc, #64]	; (8012118 <tcp_slowtmr+0x66c>)
 80120d6:	f008 feb5 	bl	801ae44 <printf>
        tcp_tw_pcbs = pcb->next;
 80120da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120dc:	68db      	ldr	r3, [r3, #12]
 80120de:	4a10      	ldr	r2, [pc, #64]	; (8012120 <tcp_slowtmr+0x674>)
 80120e0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80120e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80120e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e8:	68db      	ldr	r3, [r3, #12]
 80120ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80120ec:	69f8      	ldr	r0, [r7, #28]
 80120ee:	f7fe ff29 	bl	8010f44 <tcp_free>
 80120f2:	e004      	b.n	80120fe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80120f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80120f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fa:	68db      	ldr	r3, [r3, #12]
 80120fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80120fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012100:	2b00      	cmp	r3, #0
 8012102:	d1a9      	bne.n	8012058 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012104:	bf00      	nop
 8012106:	bf00      	nop
 8012108:	3730      	adds	r7, #48	; 0x30
 801210a:	46bd      	mov	sp, r7
 801210c:	bdb0      	pop	{r4, r5, r7, pc}
 801210e:	bf00      	nop
 8012110:	080255d8 	.word	0x080255d8
 8012114:	08025a68 	.word	0x08025a68
 8012118:	0802561c 	.word	0x0802561c
 801211c:	2000be18 	.word	0x2000be18
 8012120:	2000be24 	.word	0x2000be24
 8012124:	08025a98 	.word	0x08025a98
 8012128:	08025ac0 	.word	0x08025ac0

0801212c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012132:	4b2d      	ldr	r3, [pc, #180]	; (80121e8 <tcp_fasttmr+0xbc>)
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	3301      	adds	r3, #1
 8012138:	b2da      	uxtb	r2, r3
 801213a:	4b2b      	ldr	r3, [pc, #172]	; (80121e8 <tcp_fasttmr+0xbc>)
 801213c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801213e:	4b2b      	ldr	r3, [pc, #172]	; (80121ec <tcp_fasttmr+0xc0>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012144:	e048      	b.n	80121d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	7f9a      	ldrb	r2, [r3, #30]
 801214a:	4b27      	ldr	r3, [pc, #156]	; (80121e8 <tcp_fasttmr+0xbc>)
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	429a      	cmp	r2, r3
 8012150:	d03f      	beq.n	80121d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012152:	4b25      	ldr	r3, [pc, #148]	; (80121e8 <tcp_fasttmr+0xbc>)
 8012154:	781a      	ldrb	r2, [r3, #0]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	8b5b      	ldrh	r3, [r3, #26]
 801215e:	f003 0301 	and.w	r3, r3, #1
 8012162:	2b00      	cmp	r3, #0
 8012164:	d010      	beq.n	8012188 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	8b5b      	ldrh	r3, [r3, #26]
 801216a:	f043 0302 	orr.w	r3, r3, #2
 801216e:	b29a      	uxth	r2, r3
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f004 f80f 	bl	8016198 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	8b5b      	ldrh	r3, [r3, #26]
 801217e:	f023 0303 	bic.w	r3, r3, #3
 8012182:	b29a      	uxth	r2, r3
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	8b5b      	ldrh	r3, [r3, #26]
 801218c:	f003 0308 	and.w	r3, r3, #8
 8012190:	2b00      	cmp	r3, #0
 8012192:	d009      	beq.n	80121a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	8b5b      	ldrh	r3, [r3, #26]
 8012198:	f023 0308 	bic.w	r3, r3, #8
 801219c:	b29a      	uxth	r2, r3
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f7ff f862 	bl	801126c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d00a      	beq.n	80121cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80121b6:	4b0e      	ldr	r3, [pc, #56]	; (80121f0 <tcp_fasttmr+0xc4>)
 80121b8:	2200      	movs	r2, #0
 80121ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f000 f819 	bl	80121f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80121c2:	4b0b      	ldr	r3, [pc, #44]	; (80121f0 <tcp_fasttmr+0xc4>)
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d000      	beq.n	80121cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80121ca:	e7b8      	b.n	801213e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	607b      	str	r3, [r7, #4]
 80121d0:	e002      	b.n	80121d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	68db      	ldr	r3, [r3, #12]
 80121d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d1b3      	bne.n	8012146 <tcp_fasttmr+0x1a>
    }
  }
}
 80121de:	bf00      	nop
 80121e0:	bf00      	nop
 80121e2:	3708      	adds	r7, #8
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}
 80121e8:	20004ef6 	.word	0x20004ef6
 80121ec:	2000be14 	.word	0x2000be14
 80121f0:	2000be10 	.word	0x2000be10

080121f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80121f4:	b590      	push	{r4, r7, lr}
 80121f6:	b085      	sub	sp, #20
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d109      	bne.n	8012216 <tcp_process_refused_data+0x22>
 8012202:	4b37      	ldr	r3, [pc, #220]	; (80122e0 <tcp_process_refused_data+0xec>)
 8012204:	f240 6209 	movw	r2, #1545	; 0x609
 8012208:	4936      	ldr	r1, [pc, #216]	; (80122e4 <tcp_process_refused_data+0xf0>)
 801220a:	4837      	ldr	r0, [pc, #220]	; (80122e8 <tcp_process_refused_data+0xf4>)
 801220c:	f008 fe1a 	bl	801ae44 <printf>
 8012210:	f06f 030f 	mvn.w	r3, #15
 8012214:	e060      	b.n	80122d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801221a:	7b5b      	ldrb	r3, [r3, #13]
 801221c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012222:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2200      	movs	r2, #0
 8012228:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012230:	2b00      	cmp	r3, #0
 8012232:	d00b      	beq.n	801224c <tcp_process_refused_data+0x58>
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6918      	ldr	r0, [r3, #16]
 801223e:	2300      	movs	r3, #0
 8012240:	68ba      	ldr	r2, [r7, #8]
 8012242:	6879      	ldr	r1, [r7, #4]
 8012244:	47a0      	blx	r4
 8012246:	4603      	mov	r3, r0
 8012248:	73fb      	strb	r3, [r7, #15]
 801224a:	e007      	b.n	801225c <tcp_process_refused_data+0x68>
 801224c:	2300      	movs	r3, #0
 801224e:	68ba      	ldr	r2, [r7, #8]
 8012250:	6879      	ldr	r1, [r7, #4]
 8012252:	2000      	movs	r0, #0
 8012254:	f000 f8c2 	bl	80123dc <tcp_recv_null>
 8012258:	4603      	mov	r3, r0
 801225a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801225c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d12a      	bne.n	80122ba <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012264:	7bbb      	ldrb	r3, [r7, #14]
 8012266:	f003 0320 	and.w	r3, r3, #32
 801226a:	2b00      	cmp	r3, #0
 801226c:	d033      	beq.n	80122d6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012272:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012276:	d005      	beq.n	8012284 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801227c:	3301      	adds	r3, #1
 801227e:	b29a      	uxth	r2, r3
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801228a:	2b00      	cmp	r3, #0
 801228c:	d00b      	beq.n	80122a6 <tcp_process_refused_data+0xb2>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6918      	ldr	r0, [r3, #16]
 8012298:	2300      	movs	r3, #0
 801229a:	2200      	movs	r2, #0
 801229c:	6879      	ldr	r1, [r7, #4]
 801229e:	47a0      	blx	r4
 80122a0:	4603      	mov	r3, r0
 80122a2:	73fb      	strb	r3, [r7, #15]
 80122a4:	e001      	b.n	80122aa <tcp_process_refused_data+0xb6>
 80122a6:	2300      	movs	r3, #0
 80122a8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80122aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122ae:	f113 0f0d 	cmn.w	r3, #13
 80122b2:	d110      	bne.n	80122d6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80122b4:	f06f 030c 	mvn.w	r3, #12
 80122b8:	e00e      	b.n	80122d8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80122ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122be:	f113 0f0d 	cmn.w	r3, #13
 80122c2:	d102      	bne.n	80122ca <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80122c4:	f06f 030c 	mvn.w	r3, #12
 80122c8:	e006      	b.n	80122d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	68ba      	ldr	r2, [r7, #8]
 80122ce:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80122d0:	f06f 0304 	mvn.w	r3, #4
 80122d4:	e000      	b.n	80122d8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80122d6:	2300      	movs	r3, #0
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3714      	adds	r7, #20
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd90      	pop	{r4, r7, pc}
 80122e0:	080255d8 	.word	0x080255d8
 80122e4:	08025ae8 	.word	0x08025ae8
 80122e8:	0802561c 	.word	0x0802561c

080122ec <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80122f4:	e007      	b.n	8012306 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f000 f80a 	bl	8012316 <tcp_seg_free>
    seg = next;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d1f4      	bne.n	80122f6 <tcp_segs_free+0xa>
  }
}
 801230c:	bf00      	nop
 801230e:	bf00      	nop
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}

08012316 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012316:	b580      	push	{r7, lr}
 8012318:	b082      	sub	sp, #8
 801231a:	af00      	add	r7, sp, #0
 801231c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d00c      	beq.n	801233e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d004      	beq.n	8012336 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	685b      	ldr	r3, [r3, #4]
 8012330:	4618      	mov	r0, r3
 8012332:	f7fe fb4b 	bl	80109cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012336:	6879      	ldr	r1, [r7, #4]
 8012338:	2003      	movs	r0, #3
 801233a:	f7fd fd1b 	bl	800fd74 <memp_free>
  }
}
 801233e:	bf00      	nop
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
	...

08012348 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	460b      	mov	r3, r1
 8012352:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d107      	bne.n	801236a <tcp_setprio+0x22>
 801235a:	4b07      	ldr	r3, [pc, #28]	; (8012378 <tcp_setprio+0x30>)
 801235c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8012360:	4906      	ldr	r1, [pc, #24]	; (801237c <tcp_setprio+0x34>)
 8012362:	4807      	ldr	r0, [pc, #28]	; (8012380 <tcp_setprio+0x38>)
 8012364:	f008 fd6e 	bl	801ae44 <printf>
 8012368:	e002      	b.n	8012370 <tcp_setprio+0x28>

  pcb->prio = prio;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	78fa      	ldrb	r2, [r7, #3]
 801236e:	755a      	strb	r2, [r3, #21]
}
 8012370:	3708      	adds	r7, #8
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	080255d8 	.word	0x080255d8
 801237c:	08025b10 	.word	0x08025b10
 8012380:	0802561c 	.word	0x0802561c

08012384 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b084      	sub	sp, #16
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d106      	bne.n	80123a0 <tcp_seg_copy+0x1c>
 8012392:	4b0f      	ldr	r3, [pc, #60]	; (80123d0 <tcp_seg_copy+0x4c>)
 8012394:	f240 6282 	movw	r2, #1666	; 0x682
 8012398:	490e      	ldr	r1, [pc, #56]	; (80123d4 <tcp_seg_copy+0x50>)
 801239a:	480f      	ldr	r0, [pc, #60]	; (80123d8 <tcp_seg_copy+0x54>)
 801239c:	f008 fd52 	bl	801ae44 <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80123a0:	2003      	movs	r0, #3
 80123a2:	f7fd fc95 	bl	800fcd0 <memp_malloc>
 80123a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d101      	bne.n	80123b2 <tcp_seg_copy+0x2e>
    return NULL;
 80123ae:	2300      	movs	r3, #0
 80123b0:	e00a      	b.n	80123c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80123b2:	2210      	movs	r2, #16
 80123b4:	6879      	ldr	r1, [r7, #4]
 80123b6:	68f8      	ldr	r0, [r7, #12]
 80123b8:	f008 fa96 	bl	801a8e8 <memcpy>
  pbuf_ref(cseg->p);
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7fe fba9 	bl	8010b18 <pbuf_ref>
  return cseg;
 80123c6:	68fb      	ldr	r3, [r7, #12]
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3710      	adds	r7, #16
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	080255d8 	.word	0x080255d8
 80123d4:	08025b2c 	.word	0x08025b2c
 80123d8:	0802561c 	.word	0x0802561c

080123dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
 80123e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d109      	bne.n	8012404 <tcp_recv_null+0x28>
 80123f0:	4b12      	ldr	r3, [pc, #72]	; (801243c <tcp_recv_null+0x60>)
 80123f2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80123f6:	4912      	ldr	r1, [pc, #72]	; (8012440 <tcp_recv_null+0x64>)
 80123f8:	4812      	ldr	r0, [pc, #72]	; (8012444 <tcp_recv_null+0x68>)
 80123fa:	f008 fd23 	bl	801ae44 <printf>
 80123fe:	f06f 030f 	mvn.w	r3, #15
 8012402:	e016      	b.n	8012432 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d009      	beq.n	801241e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	891b      	ldrh	r3, [r3, #8]
 801240e:	4619      	mov	r1, r3
 8012410:	68b8      	ldr	r0, [r7, #8]
 8012412:	f7ff fab5 	bl	8011980 <tcp_recved>
    pbuf_free(p);
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f7fe fad8 	bl	80109cc <pbuf_free>
 801241c:	e008      	b.n	8012430 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801241e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d104      	bne.n	8012430 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012426:	68b8      	ldr	r0, [r7, #8]
 8012428:	f7fe ff8a 	bl	8011340 <tcp_close>
 801242c:	4603      	mov	r3, r0
 801242e:	e000      	b.n	8012432 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012430:	2300      	movs	r3, #0
}
 8012432:	4618      	mov	r0, r3
 8012434:	3710      	adds	r7, #16
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}
 801243a:	bf00      	nop
 801243c:	080255d8 	.word	0x080255d8
 8012440:	08025b48 	.word	0x08025b48
 8012444:	0802561c 	.word	0x0802561c

08012448 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b086      	sub	sp, #24
 801244c:	af00      	add	r7, sp, #0
 801244e:	4603      	mov	r3, r0
 8012450:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012456:	2b00      	cmp	r3, #0
 8012458:	db01      	blt.n	801245e <tcp_kill_prio+0x16>
 801245a:	79fb      	ldrb	r3, [r7, #7]
 801245c:	e000      	b.n	8012460 <tcp_kill_prio+0x18>
 801245e:	237f      	movs	r3, #127	; 0x7f
 8012460:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012462:	7afb      	ldrb	r3, [r7, #11]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d034      	beq.n	80124d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012468:	7afb      	ldrb	r3, [r7, #11]
 801246a:	3b01      	subs	r3, #1
 801246c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801246e:	2300      	movs	r3, #0
 8012470:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012472:	2300      	movs	r3, #0
 8012474:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012476:	4b19      	ldr	r3, [pc, #100]	; (80124dc <tcp_kill_prio+0x94>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	617b      	str	r3, [r7, #20]
 801247c:	e01f      	b.n	80124be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	7d5b      	ldrb	r3, [r3, #21]
 8012482:	7afa      	ldrb	r2, [r7, #11]
 8012484:	429a      	cmp	r2, r3
 8012486:	d80c      	bhi.n	80124a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801248c:	7afa      	ldrb	r2, [r7, #11]
 801248e:	429a      	cmp	r2, r3
 8012490:	d112      	bne.n	80124b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012492:	4b13      	ldr	r3, [pc, #76]	; (80124e0 <tcp_kill_prio+0x98>)
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	6a1b      	ldr	r3, [r3, #32]
 801249a:	1ad3      	subs	r3, r2, r3
 801249c:	68fa      	ldr	r2, [r7, #12]
 801249e:	429a      	cmp	r2, r3
 80124a0:	d80a      	bhi.n	80124b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80124a2:	4b0f      	ldr	r3, [pc, #60]	; (80124e0 <tcp_kill_prio+0x98>)
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	6a1b      	ldr	r3, [r3, #32]
 80124aa:	1ad3      	subs	r3, r2, r3
 80124ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	7d5b      	ldrb	r3, [r3, #21]
 80124b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	68db      	ldr	r3, [r3, #12]
 80124bc:	617b      	str	r3, [r7, #20]
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d1dc      	bne.n	801247e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d004      	beq.n	80124d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80124ca:	6938      	ldr	r0, [r7, #16]
 80124cc:	f7ff f87e 	bl	80115cc <tcp_abort>
 80124d0:	e000      	b.n	80124d4 <tcp_kill_prio+0x8c>
    return;
 80124d2:	bf00      	nop
  }
}
 80124d4:	3718      	adds	r7, #24
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	2000be14 	.word	0x2000be14
 80124e0:	2000be18 	.word	0x2000be18

080124e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b086      	sub	sp, #24
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	4603      	mov	r3, r0
 80124ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80124ee:	79fb      	ldrb	r3, [r7, #7]
 80124f0:	2b08      	cmp	r3, #8
 80124f2:	d009      	beq.n	8012508 <tcp_kill_state+0x24>
 80124f4:	79fb      	ldrb	r3, [r7, #7]
 80124f6:	2b09      	cmp	r3, #9
 80124f8:	d006      	beq.n	8012508 <tcp_kill_state+0x24>
 80124fa:	4b1a      	ldr	r3, [pc, #104]	; (8012564 <tcp_kill_state+0x80>)
 80124fc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012500:	4919      	ldr	r1, [pc, #100]	; (8012568 <tcp_kill_state+0x84>)
 8012502:	481a      	ldr	r0, [pc, #104]	; (801256c <tcp_kill_state+0x88>)
 8012504:	f008 fc9e 	bl	801ae44 <printf>

  inactivity = 0;
 8012508:	2300      	movs	r3, #0
 801250a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801250c:	2300      	movs	r3, #0
 801250e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012510:	4b17      	ldr	r3, [pc, #92]	; (8012570 <tcp_kill_state+0x8c>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	617b      	str	r3, [r7, #20]
 8012516:	e017      	b.n	8012548 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	7d1b      	ldrb	r3, [r3, #20]
 801251c:	79fa      	ldrb	r2, [r7, #7]
 801251e:	429a      	cmp	r2, r3
 8012520:	d10f      	bne.n	8012542 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012522:	4b14      	ldr	r3, [pc, #80]	; (8012574 <tcp_kill_state+0x90>)
 8012524:	681a      	ldr	r2, [r3, #0]
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	6a1b      	ldr	r3, [r3, #32]
 801252a:	1ad3      	subs	r3, r2, r3
 801252c:	68fa      	ldr	r2, [r7, #12]
 801252e:	429a      	cmp	r2, r3
 8012530:	d807      	bhi.n	8012542 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012532:	4b10      	ldr	r3, [pc, #64]	; (8012574 <tcp_kill_state+0x90>)
 8012534:	681a      	ldr	r2, [r3, #0]
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	6a1b      	ldr	r3, [r3, #32]
 801253a:	1ad3      	subs	r3, r2, r3
 801253c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	617b      	str	r3, [r7, #20]
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d1e4      	bne.n	8012518 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d003      	beq.n	801255c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012554:	2100      	movs	r1, #0
 8012556:	6938      	ldr	r0, [r7, #16]
 8012558:	f7fe ff7a 	bl	8011450 <tcp_abandon>
  }
}
 801255c:	bf00      	nop
 801255e:	3718      	adds	r7, #24
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}
 8012564:	080255d8 	.word	0x080255d8
 8012568:	08025b64 	.word	0x08025b64
 801256c:	0802561c 	.word	0x0802561c
 8012570:	2000be14 	.word	0x2000be14
 8012574:	2000be18 	.word	0x2000be18

08012578 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b084      	sub	sp, #16
 801257c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801257e:	2300      	movs	r3, #0
 8012580:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012582:	2300      	movs	r3, #0
 8012584:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012586:	4b12      	ldr	r3, [pc, #72]	; (80125d0 <tcp_kill_timewait+0x58>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	60fb      	str	r3, [r7, #12]
 801258c:	e012      	b.n	80125b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801258e:	4b11      	ldr	r3, [pc, #68]	; (80125d4 <tcp_kill_timewait+0x5c>)
 8012590:	681a      	ldr	r2, [r3, #0]
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	6a1b      	ldr	r3, [r3, #32]
 8012596:	1ad3      	subs	r3, r2, r3
 8012598:	687a      	ldr	r2, [r7, #4]
 801259a:	429a      	cmp	r2, r3
 801259c:	d807      	bhi.n	80125ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801259e:	4b0d      	ldr	r3, [pc, #52]	; (80125d4 <tcp_kill_timewait+0x5c>)
 80125a0:	681a      	ldr	r2, [r3, #0]
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	6a1b      	ldr	r3, [r3, #32]
 80125a6:	1ad3      	subs	r3, r2, r3
 80125a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	68db      	ldr	r3, [r3, #12]
 80125b2:	60fb      	str	r3, [r7, #12]
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d1e9      	bne.n	801258e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d002      	beq.n	80125c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80125c0:	68b8      	ldr	r0, [r7, #8]
 80125c2:	f7ff f803 	bl	80115cc <tcp_abort>
  }
}
 80125c6:	bf00      	nop
 80125c8:	3710      	adds	r7, #16
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
 80125ce:	bf00      	nop
 80125d0:	2000be24 	.word	0x2000be24
 80125d4:	2000be18 	.word	0x2000be18

080125d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b082      	sub	sp, #8
 80125dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80125de:	4b10      	ldr	r3, [pc, #64]	; (8012620 <tcp_handle_closepend+0x48>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80125e4:	e014      	b.n	8012610 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	8b5b      	ldrh	r3, [r3, #26]
 80125f0:	f003 0308 	and.w	r3, r3, #8
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d009      	beq.n	801260c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	8b5b      	ldrh	r3, [r3, #26]
 80125fc:	f023 0308 	bic.w	r3, r3, #8
 8012600:	b29a      	uxth	r2, r3
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f7fe fe30 	bl	801126c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d1e7      	bne.n	80125e6 <tcp_handle_closepend+0xe>
  }
}
 8012616:	bf00      	nop
 8012618:	bf00      	nop
 801261a:	3708      	adds	r7, #8
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}
 8012620:	2000be14 	.word	0x2000be14

08012624 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	4603      	mov	r3, r0
 801262c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801262e:	2001      	movs	r0, #1
 8012630:	f7fd fb4e 	bl	800fcd0 <memp_malloc>
 8012634:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d126      	bne.n	801268a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801263c:	f7ff ffcc 	bl	80125d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012640:	f7ff ff9a 	bl	8012578 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012644:	2001      	movs	r0, #1
 8012646:	f7fd fb43 	bl	800fcd0 <memp_malloc>
 801264a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d11b      	bne.n	801268a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012652:	2009      	movs	r0, #9
 8012654:	f7ff ff46 	bl	80124e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012658:	2001      	movs	r0, #1
 801265a:	f7fd fb39 	bl	800fcd0 <memp_malloc>
 801265e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d111      	bne.n	801268a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012666:	2008      	movs	r0, #8
 8012668:	f7ff ff3c 	bl	80124e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801266c:	2001      	movs	r0, #1
 801266e:	f7fd fb2f 	bl	800fcd0 <memp_malloc>
 8012672:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d107      	bne.n	801268a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801267a:	79fb      	ldrb	r3, [r7, #7]
 801267c:	4618      	mov	r0, r3
 801267e:	f7ff fee3 	bl	8012448 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012682:	2001      	movs	r0, #1
 8012684:	f7fd fb24 	bl	800fcd0 <memp_malloc>
 8012688:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d03f      	beq.n	8012710 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012690:	229c      	movs	r2, #156	; 0x9c
 8012692:	2100      	movs	r1, #0
 8012694:	68f8      	ldr	r0, [r7, #12]
 8012696:	f008 f94f 	bl	801a938 <memset>
    pcb->prio = prio;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	79fa      	ldrb	r2, [r7, #7]
 801269e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80126a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80126b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	22ff      	movs	r2, #255	; 0xff
 80126be:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80126c6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	2206      	movs	r2, #6
 80126cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	2206      	movs	r2, #6
 80126d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126dc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	2201      	movs	r2, #1
 80126e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80126e6:	4b0d      	ldr	r3, [pc, #52]	; (801271c <tcp_alloc+0xf8>)
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80126ee:	4b0c      	ldr	r3, [pc, #48]	; (8012720 <tcp_alloc+0xfc>)
 80126f0:	781a      	ldrb	r2, [r3, #0]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80126fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	4a08      	ldr	r2, [pc, #32]	; (8012724 <tcp_alloc+0x100>)
 8012704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	4a07      	ldr	r2, [pc, #28]	; (8012728 <tcp_alloc+0x104>)
 801270c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012710:	68fb      	ldr	r3, [r7, #12]
}
 8012712:	4618      	mov	r0, r3
 8012714:	3710      	adds	r7, #16
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
 801271a:	bf00      	nop
 801271c:	2000be18 	.word	0x2000be18
 8012720:	20004ef6 	.word	0x20004ef6
 8012724:	080123dd 	.word	0x080123dd
 8012728:	006ddd00 	.word	0x006ddd00

0801272c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	4603      	mov	r3, r0
 8012734:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012736:	2040      	movs	r0, #64	; 0x40
 8012738:	f7ff ff74 	bl	8012624 <tcp_alloc>
 801273c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801273e:	68fb      	ldr	r3, [r7, #12]
}
 8012740:	4618      	mov	r0, r3
 8012742:	3710      	adds	r7, #16
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012748:	b480      	push	{r7}
 801274a:	b083      	sub	sp, #12
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d002      	beq.n	801275e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	683a      	ldr	r2, [r7, #0]
 801275c:	611a      	str	r2, [r3, #16]
  }
}
 801275e:	bf00      	nop
 8012760:	370c      	adds	r7, #12
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr
	...

0801276c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b082      	sub	sp, #8
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d00e      	beq.n	801279a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	7d1b      	ldrb	r3, [r3, #20]
 8012780:	2b01      	cmp	r3, #1
 8012782:	d106      	bne.n	8012792 <tcp_recv+0x26>
 8012784:	4b07      	ldr	r3, [pc, #28]	; (80127a4 <tcp_recv+0x38>)
 8012786:	f240 72df 	movw	r2, #2015	; 0x7df
 801278a:	4907      	ldr	r1, [pc, #28]	; (80127a8 <tcp_recv+0x3c>)
 801278c:	4807      	ldr	r0, [pc, #28]	; (80127ac <tcp_recv+0x40>)
 801278e:	f008 fb59 	bl	801ae44 <printf>
    pcb->recv = recv;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	683a      	ldr	r2, [r7, #0]
 8012796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801279a:	bf00      	nop
 801279c:	3708      	adds	r7, #8
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	bf00      	nop
 80127a4:	080255d8 	.word	0x080255d8
 80127a8:	08025b74 	.word	0x08025b74
 80127ac:	0802561c 	.word	0x0802561c

080127b0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d00e      	beq.n	80127de <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	7d1b      	ldrb	r3, [r3, #20]
 80127c4:	2b01      	cmp	r3, #1
 80127c6:	d106      	bne.n	80127d6 <tcp_sent+0x26>
 80127c8:	4b07      	ldr	r3, [pc, #28]	; (80127e8 <tcp_sent+0x38>)
 80127ca:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80127ce:	4907      	ldr	r1, [pc, #28]	; (80127ec <tcp_sent+0x3c>)
 80127d0:	4807      	ldr	r0, [pc, #28]	; (80127f0 <tcp_sent+0x40>)
 80127d2:	f008 fb37 	bl	801ae44 <printf>
    pcb->sent = sent;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	683a      	ldr	r2, [r7, #0]
 80127da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80127de:	bf00      	nop
 80127e0:	3708      	adds	r7, #8
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}
 80127e6:	bf00      	nop
 80127e8:	080255d8 	.word	0x080255d8
 80127ec:	08025b9c 	.word	0x08025b9c
 80127f0:	0802561c 	.word	0x0802561c

080127f4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d00e      	beq.n	8012822 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	7d1b      	ldrb	r3, [r3, #20]
 8012808:	2b01      	cmp	r3, #1
 801280a:	d106      	bne.n	801281a <tcp_err+0x26>
 801280c:	4b07      	ldr	r3, [pc, #28]	; (801282c <tcp_err+0x38>)
 801280e:	f640 020d 	movw	r2, #2061	; 0x80d
 8012812:	4907      	ldr	r1, [pc, #28]	; (8012830 <tcp_err+0x3c>)
 8012814:	4807      	ldr	r0, [pc, #28]	; (8012834 <tcp_err+0x40>)
 8012816:	f008 fb15 	bl	801ae44 <printf>
    pcb->errf = err;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	683a      	ldr	r2, [r7, #0]
 801281e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8012822:	bf00      	nop
 8012824:	3708      	adds	r7, #8
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	080255d8 	.word	0x080255d8
 8012830:	08025bc4 	.word	0x08025bc4
 8012834:	0802561c 	.word	0x0802561c

08012838 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012838:	b480      	push	{r7}
 801283a:	b085      	sub	sp, #20
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d008      	beq.n	801285a <tcp_accept+0x22>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	7d1b      	ldrb	r3, [r3, #20]
 801284c:	2b01      	cmp	r3, #1
 801284e:	d104      	bne.n	801285a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	683a      	ldr	r2, [r7, #0]
 8012858:	619a      	str	r2, [r3, #24]
  }
}
 801285a:	bf00      	nop
 801285c:	3714      	adds	r7, #20
 801285e:	46bd      	mov	sp, r7
 8012860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012864:	4770      	bx	lr
	...

08012868 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b084      	sub	sp, #16
 801286c:	af00      	add	r7, sp, #0
 801286e:	60f8      	str	r0, [r7, #12]
 8012870:	60b9      	str	r1, [r7, #8]
 8012872:	4613      	mov	r3, r2
 8012874:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d107      	bne.n	801288c <tcp_poll+0x24>
 801287c:	4b0e      	ldr	r3, [pc, #56]	; (80128b8 <tcp_poll+0x50>)
 801287e:	f640 023d 	movw	r2, #2109	; 0x83d
 8012882:	490e      	ldr	r1, [pc, #56]	; (80128bc <tcp_poll+0x54>)
 8012884:	480e      	ldr	r0, [pc, #56]	; (80128c0 <tcp_poll+0x58>)
 8012886:	f008 fadd 	bl	801ae44 <printf>
 801288a:	e011      	b.n	80128b0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	7d1b      	ldrb	r3, [r3, #20]
 8012890:	2b01      	cmp	r3, #1
 8012892:	d106      	bne.n	80128a2 <tcp_poll+0x3a>
 8012894:	4b08      	ldr	r3, [pc, #32]	; (80128b8 <tcp_poll+0x50>)
 8012896:	f640 023e 	movw	r2, #2110	; 0x83e
 801289a:	490a      	ldr	r1, [pc, #40]	; (80128c4 <tcp_poll+0x5c>)
 801289c:	4808      	ldr	r0, [pc, #32]	; (80128c0 <tcp_poll+0x58>)
 801289e:	f008 fad1 	bl	801ae44 <printf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	68ba      	ldr	r2, [r7, #8]
 80128a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	79fa      	ldrb	r2, [r7, #7]
 80128ae:	775a      	strb	r2, [r3, #29]
}
 80128b0:	3710      	adds	r7, #16
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	080255d8 	.word	0x080255d8
 80128bc:	08025bec 	.word	0x08025bec
 80128c0:	0802561c 	.word	0x0802561c
 80128c4:	08025c04 	.word	0x08025c04

080128c8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d107      	bne.n	80128e6 <tcp_pcb_purge+0x1e>
 80128d6:	4b21      	ldr	r3, [pc, #132]	; (801295c <tcp_pcb_purge+0x94>)
 80128d8:	f640 0251 	movw	r2, #2129	; 0x851
 80128dc:	4920      	ldr	r1, [pc, #128]	; (8012960 <tcp_pcb_purge+0x98>)
 80128de:	4821      	ldr	r0, [pc, #132]	; (8012964 <tcp_pcb_purge+0x9c>)
 80128e0:	f008 fab0 	bl	801ae44 <printf>
 80128e4:	e037      	b.n	8012956 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	7d1b      	ldrb	r3, [r3, #20]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d033      	beq.n	8012956 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80128f2:	2b0a      	cmp	r3, #10
 80128f4:	d02f      	beq.n	8012956 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80128fa:	2b01      	cmp	r3, #1
 80128fc:	d02b      	beq.n	8012956 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012902:	2b00      	cmp	r3, #0
 8012904:	d007      	beq.n	8012916 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801290a:	4618      	mov	r0, r3
 801290c:	f7fe f85e 	bl	80109cc <pbuf_free>
      pcb->refused_data = NULL;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2200      	movs	r2, #0
 8012914:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801291a:	2b00      	cmp	r3, #0
 801291c:	d002      	beq.n	8012924 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f000 f986 	bl	8012c30 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801292a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012930:	4618      	mov	r0, r3
 8012932:	f7ff fcdb 	bl	80122ec <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801293a:	4618      	mov	r0, r3
 801293c:	f7ff fcd6 	bl	80122ec <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2200      	movs	r2, #0
 8012944:	66da      	str	r2, [r3, #108]	; 0x6c
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2200      	movs	r2, #0
 8012952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	080255d8 	.word	0x080255d8
 8012960:	08025c24 	.word	0x08025c24
 8012964:	0802561c 	.word	0x0802561c

08012968 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d106      	bne.n	8012986 <tcp_pcb_remove+0x1e>
 8012978:	4b3e      	ldr	r3, [pc, #248]	; (8012a74 <tcp_pcb_remove+0x10c>)
 801297a:	f640 0283 	movw	r2, #2179	; 0x883
 801297e:	493e      	ldr	r1, [pc, #248]	; (8012a78 <tcp_pcb_remove+0x110>)
 8012980:	483e      	ldr	r0, [pc, #248]	; (8012a7c <tcp_pcb_remove+0x114>)
 8012982:	f008 fa5f 	bl	801ae44 <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d106      	bne.n	801299a <tcp_pcb_remove+0x32>
 801298c:	4b39      	ldr	r3, [pc, #228]	; (8012a74 <tcp_pcb_remove+0x10c>)
 801298e:	f640 0284 	movw	r2, #2180	; 0x884
 8012992:	493b      	ldr	r1, [pc, #236]	; (8012a80 <tcp_pcb_remove+0x118>)
 8012994:	4839      	ldr	r0, [pc, #228]	; (8012a7c <tcp_pcb_remove+0x114>)
 8012996:	f008 fa55 	bl	801ae44 <printf>

  TCP_RMV(pcblist, pcb);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	683a      	ldr	r2, [r7, #0]
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d105      	bne.n	80129b0 <tcp_pcb_remove+0x48>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	68da      	ldr	r2, [r3, #12]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	601a      	str	r2, [r3, #0]
 80129ae:	e013      	b.n	80129d8 <tcp_pcb_remove+0x70>
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	60fb      	str	r3, [r7, #12]
 80129b6:	e00c      	b.n	80129d2 <tcp_pcb_remove+0x6a>
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	68db      	ldr	r3, [r3, #12]
 80129bc:	683a      	ldr	r2, [r7, #0]
 80129be:	429a      	cmp	r2, r3
 80129c0:	d104      	bne.n	80129cc <tcp_pcb_remove+0x64>
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	68da      	ldr	r2, [r3, #12]
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	60da      	str	r2, [r3, #12]
 80129ca:	e005      	b.n	80129d8 <tcp_pcb_remove+0x70>
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	60fb      	str	r3, [r7, #12]
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d1ef      	bne.n	80129b8 <tcp_pcb_remove+0x50>
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	2200      	movs	r2, #0
 80129dc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80129de:	6838      	ldr	r0, [r7, #0]
 80129e0:	f7ff ff72 	bl	80128c8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	7d1b      	ldrb	r3, [r3, #20]
 80129e8:	2b0a      	cmp	r3, #10
 80129ea:	d013      	beq.n	8012a14 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	d00f      	beq.n	8012a14 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	8b5b      	ldrh	r3, [r3, #26]
 80129f8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d009      	beq.n	8012a14 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	8b5b      	ldrh	r3, [r3, #26]
 8012a04:	f043 0302 	orr.w	r3, r3, #2
 8012a08:	b29a      	uxth	r2, r3
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012a0e:	6838      	ldr	r0, [r7, #0]
 8012a10:	f003 fbc2 	bl	8016198 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	7d1b      	ldrb	r3, [r3, #20]
 8012a18:	2b01      	cmp	r3, #1
 8012a1a:	d020      	beq.n	8012a5e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d006      	beq.n	8012a32 <tcp_pcb_remove+0xca>
 8012a24:	4b13      	ldr	r3, [pc, #76]	; (8012a74 <tcp_pcb_remove+0x10c>)
 8012a26:	f640 0293 	movw	r2, #2195	; 0x893
 8012a2a:	4916      	ldr	r1, [pc, #88]	; (8012a84 <tcp_pcb_remove+0x11c>)
 8012a2c:	4813      	ldr	r0, [pc, #76]	; (8012a7c <tcp_pcb_remove+0x114>)
 8012a2e:	f008 fa09 	bl	801ae44 <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d006      	beq.n	8012a48 <tcp_pcb_remove+0xe0>
 8012a3a:	4b0e      	ldr	r3, [pc, #56]	; (8012a74 <tcp_pcb_remove+0x10c>)
 8012a3c:	f640 0294 	movw	r2, #2196	; 0x894
 8012a40:	4911      	ldr	r1, [pc, #68]	; (8012a88 <tcp_pcb_remove+0x120>)
 8012a42:	480e      	ldr	r0, [pc, #56]	; (8012a7c <tcp_pcb_remove+0x114>)
 8012a44:	f008 f9fe 	bl	801ae44 <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012a48:	683b      	ldr	r3, [r7, #0]
 8012a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d006      	beq.n	8012a5e <tcp_pcb_remove+0xf6>
 8012a50:	4b08      	ldr	r3, [pc, #32]	; (8012a74 <tcp_pcb_remove+0x10c>)
 8012a52:	f640 0296 	movw	r2, #2198	; 0x896
 8012a56:	490d      	ldr	r1, [pc, #52]	; (8012a8c <tcp_pcb_remove+0x124>)
 8012a58:	4808      	ldr	r0, [pc, #32]	; (8012a7c <tcp_pcb_remove+0x114>)
 8012a5a:	f008 f9f3 	bl	801ae44 <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	2200      	movs	r2, #0
 8012a62:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	2200      	movs	r2, #0
 8012a68:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012a6a:	bf00      	nop
 8012a6c:	3710      	adds	r7, #16
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}
 8012a72:	bf00      	nop
 8012a74:	080255d8 	.word	0x080255d8
 8012a78:	08025c40 	.word	0x08025c40
 8012a7c:	0802561c 	.word	0x0802561c
 8012a80:	08025c5c 	.word	0x08025c5c
 8012a84:	08025c7c 	.word	0x08025c7c
 8012a88:	08025c94 	.word	0x08025c94
 8012a8c:	08025cb0 	.word	0x08025cb0

08012a90 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d106      	bne.n	8012aac <tcp_next_iss+0x1c>
 8012a9e:	4b0a      	ldr	r3, [pc, #40]	; (8012ac8 <tcp_next_iss+0x38>)
 8012aa0:	f640 02af 	movw	r2, #2223	; 0x8af
 8012aa4:	4909      	ldr	r1, [pc, #36]	; (8012acc <tcp_next_iss+0x3c>)
 8012aa6:	480a      	ldr	r0, [pc, #40]	; (8012ad0 <tcp_next_iss+0x40>)
 8012aa8:	f008 f9cc 	bl	801ae44 <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012aac:	4b09      	ldr	r3, [pc, #36]	; (8012ad4 <tcp_next_iss+0x44>)
 8012aae:	681a      	ldr	r2, [r3, #0]
 8012ab0:	4b09      	ldr	r3, [pc, #36]	; (8012ad8 <tcp_next_iss+0x48>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	4a07      	ldr	r2, [pc, #28]	; (8012ad4 <tcp_next_iss+0x44>)
 8012ab8:	6013      	str	r3, [r2, #0]
  return iss;
 8012aba:	4b06      	ldr	r3, [pc, #24]	; (8012ad4 <tcp_next_iss+0x44>)
 8012abc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3708      	adds	r7, #8
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	080255d8 	.word	0x080255d8
 8012acc:	08025cc8 	.word	0x08025cc8
 8012ad0:	0802561c 	.word	0x0802561c
 8012ad4:	20000030 	.word	0x20000030
 8012ad8:	2000be18 	.word	0x2000be18

08012adc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b086      	sub	sp, #24
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	60b9      	str	r1, [r7, #8]
 8012ae6:	607a      	str	r2, [r7, #4]
 8012ae8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d106      	bne.n	8012afe <tcp_eff_send_mss_netif+0x22>
 8012af0:	4b14      	ldr	r3, [pc, #80]	; (8012b44 <tcp_eff_send_mss_netif+0x68>)
 8012af2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012af6:	4914      	ldr	r1, [pc, #80]	; (8012b48 <tcp_eff_send_mss_netif+0x6c>)
 8012af8:	4814      	ldr	r0, [pc, #80]	; (8012b4c <tcp_eff_send_mss_netif+0x70>)
 8012afa:	f008 f9a3 	bl	801ae44 <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d101      	bne.n	8012b08 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012b04:	89fb      	ldrh	r3, [r7, #14]
 8012b06:	e019      	b.n	8012b3c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	8c1b      	ldrh	r3, [r3, #32]
 8012b0c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012b0e:	8afb      	ldrh	r3, [r7, #22]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d012      	beq.n	8012b3a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012b14:	2328      	movs	r3, #40	; 0x28
 8012b16:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012b18:	8afa      	ldrh	r2, [r7, #22]
 8012b1a:	8abb      	ldrh	r3, [r7, #20]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d904      	bls.n	8012b2a <tcp_eff_send_mss_netif+0x4e>
 8012b20:	8afa      	ldrh	r2, [r7, #22]
 8012b22:	8abb      	ldrh	r3, [r7, #20]
 8012b24:	1ad3      	subs	r3, r2, r3
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	e000      	b.n	8012b2c <tcp_eff_send_mss_netif+0x50>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012b2e:	8a7a      	ldrh	r2, [r7, #18]
 8012b30:	89fb      	ldrh	r3, [r7, #14]
 8012b32:	4293      	cmp	r3, r2
 8012b34:	bf28      	it	cs
 8012b36:	4613      	movcs	r3, r2
 8012b38:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012b3a:	89fb      	ldrh	r3, [r7, #14]
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3718      	adds	r7, #24
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	080255d8 	.word	0x080255d8
 8012b48:	08025ce4 	.word	0x08025ce4
 8012b4c:	0802561c 	.word	0x0802561c

08012b50 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d119      	bne.n	8012b98 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012b64:	4b10      	ldr	r3, [pc, #64]	; (8012ba8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012b66:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012b6a:	4910      	ldr	r1, [pc, #64]	; (8012bac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012b6c:	4810      	ldr	r0, [pc, #64]	; (8012bb0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012b6e:	f008 f969 	bl	801ae44 <printf>

  while (pcb != NULL) {
 8012b72:	e011      	b.n	8012b98 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d108      	bne.n	8012b92 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012b86:	68f8      	ldr	r0, [r7, #12]
 8012b88:	f7fe fd20 	bl	80115cc <tcp_abort>
      pcb = next;
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	60fb      	str	r3, [r7, #12]
 8012b90:	e002      	b.n	8012b98 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	68db      	ldr	r3, [r3, #12]
 8012b96:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d1ea      	bne.n	8012b74 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012b9e:	bf00      	nop
 8012ba0:	bf00      	nop
 8012ba2:	3710      	adds	r7, #16
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}
 8012ba8:	080255d8 	.word	0x080255d8
 8012bac:	08025d0c 	.word	0x08025d0c
 8012bb0:	0802561c 	.word	0x0802561c

08012bb4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d02a      	beq.n	8012c1a <tcp_netif_ip_addr_changed+0x66>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d026      	beq.n	8012c1a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012bcc:	4b15      	ldr	r3, [pc, #84]	; (8012c24 <tcp_netif_ip_addr_changed+0x70>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f7ff ffbc 	bl	8012b50 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012bd8:	4b13      	ldr	r3, [pc, #76]	; (8012c28 <tcp_netif_ip_addr_changed+0x74>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	4619      	mov	r1, r3
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f7ff ffb6 	bl	8012b50 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d017      	beq.n	8012c1a <tcp_netif_ip_addr_changed+0x66>
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d013      	beq.n	8012c1a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012bf2:	4b0e      	ldr	r3, [pc, #56]	; (8012c2c <tcp_netif_ip_addr_changed+0x78>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	60fb      	str	r3, [r7, #12]
 8012bf8:	e00c      	b.n	8012c14 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d103      	bne.n	8012c0e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	681a      	ldr	r2, [r3, #0]
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	60fb      	str	r3, [r7, #12]
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d1ef      	bne.n	8012bfa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012c1a:	bf00      	nop
 8012c1c:	3710      	adds	r7, #16
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	2000be14 	.word	0x2000be14
 8012c28:	2000be20 	.word	0x2000be20
 8012c2c:	2000be1c 	.word	0x2000be1c

08012c30 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b082      	sub	sp, #8
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d007      	beq.n	8012c50 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7ff fb51 	bl	80122ec <tcp_segs_free>
    pcb->ooseq = NULL;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012c50:	bf00      	nop
 8012c52:	3708      	adds	r7, #8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}

08012c58 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012c58:	b590      	push	{r4, r7, lr}
 8012c5a:	b08d      	sub	sp, #52	; 0x34
 8012c5c:	af04      	add	r7, sp, #16
 8012c5e:	6078      	str	r0, [r7, #4]
 8012c60:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d105      	bne.n	8012c74 <tcp_input+0x1c>
 8012c68:	4b9b      	ldr	r3, [pc, #620]	; (8012ed8 <tcp_input+0x280>)
 8012c6a:	2283      	movs	r2, #131	; 0x83
 8012c6c:	499b      	ldr	r1, [pc, #620]	; (8012edc <tcp_input+0x284>)
 8012c6e:	489c      	ldr	r0, [pc, #624]	; (8012ee0 <tcp_input+0x288>)
 8012c70:	f008 f8e8 	bl	801ae44 <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	4a9a      	ldr	r2, [pc, #616]	; (8012ee4 <tcp_input+0x28c>)
 8012c7a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	895b      	ldrh	r3, [r3, #10]
 8012c80:	2b13      	cmp	r3, #19
 8012c82:	f240 83c4 	bls.w	801340e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012c86:	4b98      	ldr	r3, [pc, #608]	; (8012ee8 <tcp_input+0x290>)
 8012c88:	695b      	ldr	r3, [r3, #20]
 8012c8a:	4a97      	ldr	r2, [pc, #604]	; (8012ee8 <tcp_input+0x290>)
 8012c8c:	6812      	ldr	r2, [r2, #0]
 8012c8e:	4611      	mov	r1, r2
 8012c90:	4618      	mov	r0, r3
 8012c92:	f006 fbcb 	bl	801942c <ip4_addr_isbroadcast_u32>
 8012c96:	4603      	mov	r3, r0
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	f040 83ba 	bne.w	8013412 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012c9e:	4b92      	ldr	r3, [pc, #584]	; (8012ee8 <tcp_input+0x290>)
 8012ca0:	695b      	ldr	r3, [r3, #20]
 8012ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012ca6:	2be0      	cmp	r3, #224	; 0xe0
 8012ca8:	f000 83b3 	beq.w	8013412 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012cac:	4b8d      	ldr	r3, [pc, #564]	; (8012ee4 <tcp_input+0x28c>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	899b      	ldrh	r3, [r3, #12]
 8012cb2:	b29b      	uxth	r3, r3
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7fc fb1f 	bl	800f2f8 <lwip_htons>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	0b1b      	lsrs	r3, r3, #12
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	009b      	lsls	r3, r3, #2
 8012cc4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012cc6:	7cbb      	ldrb	r3, [r7, #18]
 8012cc8:	2b13      	cmp	r3, #19
 8012cca:	f240 83a4 	bls.w	8013416 <tcp_input+0x7be>
 8012cce:	7cbb      	ldrb	r3, [r7, #18]
 8012cd0:	b29a      	uxth	r2, r3
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	891b      	ldrh	r3, [r3, #8]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	f200 839d 	bhi.w	8013416 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012cdc:	7cbb      	ldrb	r3, [r7, #18]
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	3b14      	subs	r3, #20
 8012ce2:	b29a      	uxth	r2, r3
 8012ce4:	4b81      	ldr	r3, [pc, #516]	; (8012eec <tcp_input+0x294>)
 8012ce6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012ce8:	4b81      	ldr	r3, [pc, #516]	; (8012ef0 <tcp_input+0x298>)
 8012cea:	2200      	movs	r2, #0
 8012cec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	895a      	ldrh	r2, [r3, #10]
 8012cf2:	7cbb      	ldrb	r3, [r7, #18]
 8012cf4:	b29b      	uxth	r3, r3
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d309      	bcc.n	8012d0e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012cfa:	4b7c      	ldr	r3, [pc, #496]	; (8012eec <tcp_input+0x294>)
 8012cfc:	881a      	ldrh	r2, [r3, #0]
 8012cfe:	4b7d      	ldr	r3, [pc, #500]	; (8012ef4 <tcp_input+0x29c>)
 8012d00:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012d02:	7cbb      	ldrb	r3, [r7, #18]
 8012d04:	4619      	mov	r1, r3
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f7fd fdda 	bl	80108c0 <pbuf_remove_header>
 8012d0c:	e04e      	b.n	8012dac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d105      	bne.n	8012d22 <tcp_input+0xca>
 8012d16:	4b70      	ldr	r3, [pc, #448]	; (8012ed8 <tcp_input+0x280>)
 8012d18:	22c2      	movs	r2, #194	; 0xc2
 8012d1a:	4977      	ldr	r1, [pc, #476]	; (8012ef8 <tcp_input+0x2a0>)
 8012d1c:	4870      	ldr	r0, [pc, #448]	; (8012ee0 <tcp_input+0x288>)
 8012d1e:	f008 f891 	bl	801ae44 <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012d22:	2114      	movs	r1, #20
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f7fd fdcb 	bl	80108c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	895a      	ldrh	r2, [r3, #10]
 8012d2e:	4b71      	ldr	r3, [pc, #452]	; (8012ef4 <tcp_input+0x29c>)
 8012d30:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012d32:	4b6e      	ldr	r3, [pc, #440]	; (8012eec <tcp_input+0x294>)
 8012d34:	881a      	ldrh	r2, [r3, #0]
 8012d36:	4b6f      	ldr	r3, [pc, #444]	; (8012ef4 <tcp_input+0x29c>)
 8012d38:	881b      	ldrh	r3, [r3, #0]
 8012d3a:	1ad3      	subs	r3, r2, r3
 8012d3c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012d3e:	4b6d      	ldr	r3, [pc, #436]	; (8012ef4 <tcp_input+0x29c>)
 8012d40:	881b      	ldrh	r3, [r3, #0]
 8012d42:	4619      	mov	r1, r3
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f7fd fdbb 	bl	80108c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	895b      	ldrh	r3, [r3, #10]
 8012d50:	8a3a      	ldrh	r2, [r7, #16]
 8012d52:	429a      	cmp	r2, r3
 8012d54:	f200 8361 	bhi.w	801341a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	4a64      	ldr	r2, [pc, #400]	; (8012ef0 <tcp_input+0x298>)
 8012d60:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	8a3a      	ldrh	r2, [r7, #16]
 8012d68:	4611      	mov	r1, r2
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fd fda8 	bl	80108c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	891a      	ldrh	r2, [r3, #8]
 8012d74:	8a3b      	ldrh	r3, [r7, #16]
 8012d76:	1ad3      	subs	r3, r2, r3
 8012d78:	b29a      	uxth	r2, r3
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	895b      	ldrh	r3, [r3, #10]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d005      	beq.n	8012d92 <tcp_input+0x13a>
 8012d86:	4b54      	ldr	r3, [pc, #336]	; (8012ed8 <tcp_input+0x280>)
 8012d88:	22df      	movs	r2, #223	; 0xdf
 8012d8a:	495c      	ldr	r1, [pc, #368]	; (8012efc <tcp_input+0x2a4>)
 8012d8c:	4854      	ldr	r0, [pc, #336]	; (8012ee0 <tcp_input+0x288>)
 8012d8e:	f008 f859 	bl	801ae44 <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	891a      	ldrh	r2, [r3, #8]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	891b      	ldrh	r3, [r3, #8]
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d005      	beq.n	8012dac <tcp_input+0x154>
 8012da0:	4b4d      	ldr	r3, [pc, #308]	; (8012ed8 <tcp_input+0x280>)
 8012da2:	22e0      	movs	r2, #224	; 0xe0
 8012da4:	4956      	ldr	r1, [pc, #344]	; (8012f00 <tcp_input+0x2a8>)
 8012da6:	484e      	ldr	r0, [pc, #312]	; (8012ee0 <tcp_input+0x288>)
 8012da8:	f008 f84c 	bl	801ae44 <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012dac:	4b4d      	ldr	r3, [pc, #308]	; (8012ee4 <tcp_input+0x28c>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	881b      	ldrh	r3, [r3, #0]
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	4a4b      	ldr	r2, [pc, #300]	; (8012ee4 <tcp_input+0x28c>)
 8012db6:	6814      	ldr	r4, [r2, #0]
 8012db8:	4618      	mov	r0, r3
 8012dba:	f7fc fa9d 	bl	800f2f8 <lwip_htons>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012dc2:	4b48      	ldr	r3, [pc, #288]	; (8012ee4 <tcp_input+0x28c>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	885b      	ldrh	r3, [r3, #2]
 8012dc8:	b29b      	uxth	r3, r3
 8012dca:	4a46      	ldr	r2, [pc, #280]	; (8012ee4 <tcp_input+0x28c>)
 8012dcc:	6814      	ldr	r4, [r2, #0]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7fc fa92 	bl	800f2f8 <lwip_htons>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012dd8:	4b42      	ldr	r3, [pc, #264]	; (8012ee4 <tcp_input+0x28c>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	4a41      	ldr	r2, [pc, #260]	; (8012ee4 <tcp_input+0x28c>)
 8012de0:	6814      	ldr	r4, [r2, #0]
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7fc fa9d 	bl	800f322 <lwip_htonl>
 8012de8:	4603      	mov	r3, r0
 8012dea:	6063      	str	r3, [r4, #4]
 8012dec:	6863      	ldr	r3, [r4, #4]
 8012dee:	4a45      	ldr	r2, [pc, #276]	; (8012f04 <tcp_input+0x2ac>)
 8012df0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012df2:	4b3c      	ldr	r3, [pc, #240]	; (8012ee4 <tcp_input+0x28c>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	689b      	ldr	r3, [r3, #8]
 8012df8:	4a3a      	ldr	r2, [pc, #232]	; (8012ee4 <tcp_input+0x28c>)
 8012dfa:	6814      	ldr	r4, [r2, #0]
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7fc fa90 	bl	800f322 <lwip_htonl>
 8012e02:	4603      	mov	r3, r0
 8012e04:	60a3      	str	r3, [r4, #8]
 8012e06:	68a3      	ldr	r3, [r4, #8]
 8012e08:	4a3f      	ldr	r2, [pc, #252]	; (8012f08 <tcp_input+0x2b0>)
 8012e0a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012e0c:	4b35      	ldr	r3, [pc, #212]	; (8012ee4 <tcp_input+0x28c>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	89db      	ldrh	r3, [r3, #14]
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	4a33      	ldr	r2, [pc, #204]	; (8012ee4 <tcp_input+0x28c>)
 8012e16:	6814      	ldr	r4, [r2, #0]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7fc fa6d 	bl	800f2f8 <lwip_htons>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012e22:	4b30      	ldr	r3, [pc, #192]	; (8012ee4 <tcp_input+0x28c>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	899b      	ldrh	r3, [r3, #12]
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7fc fa64 	bl	800f2f8 <lwip_htons>
 8012e30:	4603      	mov	r3, r0
 8012e32:	b2db      	uxtb	r3, r3
 8012e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e38:	b2da      	uxtb	r2, r3
 8012e3a:	4b34      	ldr	r3, [pc, #208]	; (8012f0c <tcp_input+0x2b4>)
 8012e3c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	891a      	ldrh	r2, [r3, #8]
 8012e42:	4b33      	ldr	r3, [pc, #204]	; (8012f10 <tcp_input+0x2b8>)
 8012e44:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012e46:	4b31      	ldr	r3, [pc, #196]	; (8012f0c <tcp_input+0x2b4>)
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	f003 0303 	and.w	r3, r3, #3
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d00c      	beq.n	8012e6c <tcp_input+0x214>
    tcplen++;
 8012e52:	4b2f      	ldr	r3, [pc, #188]	; (8012f10 <tcp_input+0x2b8>)
 8012e54:	881b      	ldrh	r3, [r3, #0]
 8012e56:	3301      	adds	r3, #1
 8012e58:	b29a      	uxth	r2, r3
 8012e5a:	4b2d      	ldr	r3, [pc, #180]	; (8012f10 <tcp_input+0x2b8>)
 8012e5c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	891a      	ldrh	r2, [r3, #8]
 8012e62:	4b2b      	ldr	r3, [pc, #172]	; (8012f10 <tcp_input+0x2b8>)
 8012e64:	881b      	ldrh	r3, [r3, #0]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	f200 82d9 	bhi.w	801341e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e70:	4b28      	ldr	r3, [pc, #160]	; (8012f14 <tcp_input+0x2bc>)
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	61fb      	str	r3, [r7, #28]
 8012e76:	e09d      	b.n	8012fb4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	7d1b      	ldrb	r3, [r3, #20]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d105      	bne.n	8012e8c <tcp_input+0x234>
 8012e80:	4b15      	ldr	r3, [pc, #84]	; (8012ed8 <tcp_input+0x280>)
 8012e82:	22fb      	movs	r2, #251	; 0xfb
 8012e84:	4924      	ldr	r1, [pc, #144]	; (8012f18 <tcp_input+0x2c0>)
 8012e86:	4816      	ldr	r0, [pc, #88]	; (8012ee0 <tcp_input+0x288>)
 8012e88:	f007 ffdc 	bl	801ae44 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012e8c:	69fb      	ldr	r3, [r7, #28]
 8012e8e:	7d1b      	ldrb	r3, [r3, #20]
 8012e90:	2b0a      	cmp	r3, #10
 8012e92:	d105      	bne.n	8012ea0 <tcp_input+0x248>
 8012e94:	4b10      	ldr	r3, [pc, #64]	; (8012ed8 <tcp_input+0x280>)
 8012e96:	22fc      	movs	r2, #252	; 0xfc
 8012e98:	4920      	ldr	r1, [pc, #128]	; (8012f1c <tcp_input+0x2c4>)
 8012e9a:	4811      	ldr	r0, [pc, #68]	; (8012ee0 <tcp_input+0x288>)
 8012e9c:	f007 ffd2 	bl	801ae44 <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012ea0:	69fb      	ldr	r3, [r7, #28]
 8012ea2:	7d1b      	ldrb	r3, [r3, #20]
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	d105      	bne.n	8012eb4 <tcp_input+0x25c>
 8012ea8:	4b0b      	ldr	r3, [pc, #44]	; (8012ed8 <tcp_input+0x280>)
 8012eaa:	22fd      	movs	r2, #253	; 0xfd
 8012eac:	491c      	ldr	r1, [pc, #112]	; (8012f20 <tcp_input+0x2c8>)
 8012eae:	480c      	ldr	r0, [pc, #48]	; (8012ee0 <tcp_input+0x288>)
 8012eb0:	f007 ffc8 	bl	801ae44 <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012eb4:	69fb      	ldr	r3, [r7, #28]
 8012eb6:	7a1b      	ldrb	r3, [r3, #8]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d033      	beq.n	8012f24 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ebc:	69fb      	ldr	r3, [r7, #28]
 8012ebe:	7a1a      	ldrb	r2, [r3, #8]
 8012ec0:	4b09      	ldr	r3, [pc, #36]	; (8012ee8 <tcp_input+0x290>)
 8012ec2:	685b      	ldr	r3, [r3, #4]
 8012ec4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012ec8:	3301      	adds	r3, #1
 8012eca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d029      	beq.n	8012f24 <tcp_input+0x2cc>
      prev = pcb;
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	61bb      	str	r3, [r7, #24]
      continue;
 8012ed4:	e06b      	b.n	8012fae <tcp_input+0x356>
 8012ed6:	bf00      	nop
 8012ed8:	08025d40 	.word	0x08025d40
 8012edc:	08025d74 	.word	0x08025d74
 8012ee0:	08025d8c 	.word	0x08025d8c
 8012ee4:	20004f08 	.word	0x20004f08
 8012ee8:	20008700 	.word	0x20008700
 8012eec:	20004f0c 	.word	0x20004f0c
 8012ef0:	20004f10 	.word	0x20004f10
 8012ef4:	20004f0e 	.word	0x20004f0e
 8012ef8:	08025db4 	.word	0x08025db4
 8012efc:	08025dc4 	.word	0x08025dc4
 8012f00:	08025dd0 	.word	0x08025dd0
 8012f04:	20004f18 	.word	0x20004f18
 8012f08:	20004f1c 	.word	0x20004f1c
 8012f0c:	20004f24 	.word	0x20004f24
 8012f10:	20004f22 	.word	0x20004f22
 8012f14:	2000be14 	.word	0x2000be14
 8012f18:	08025df0 	.word	0x08025df0
 8012f1c:	08025e18 	.word	0x08025e18
 8012f20:	08025e44 	.word	0x08025e44
    }

    if (pcb->remote_port == tcphdr->src &&
 8012f24:	69fb      	ldr	r3, [r7, #28]
 8012f26:	8b1a      	ldrh	r2, [r3, #24]
 8012f28:	4b94      	ldr	r3, [pc, #592]	; (801317c <tcp_input+0x524>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	881b      	ldrh	r3, [r3, #0]
 8012f2e:	b29b      	uxth	r3, r3
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d13a      	bne.n	8012faa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012f34:	69fb      	ldr	r3, [r7, #28]
 8012f36:	8ada      	ldrh	r2, [r3, #22]
 8012f38:	4b90      	ldr	r3, [pc, #576]	; (801317c <tcp_input+0x524>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	885b      	ldrh	r3, [r3, #2]
 8012f3e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d132      	bne.n	8012faa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	685a      	ldr	r2, [r3, #4]
 8012f48:	4b8d      	ldr	r3, [pc, #564]	; (8013180 <tcp_input+0x528>)
 8012f4a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	d12c      	bne.n	8012faa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012f50:	69fb      	ldr	r3, [r7, #28]
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	4b8a      	ldr	r3, [pc, #552]	; (8013180 <tcp_input+0x528>)
 8012f56:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	d126      	bne.n	8012faa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012f5c:	69fb      	ldr	r3, [r7, #28]
 8012f5e:	68db      	ldr	r3, [r3, #12]
 8012f60:	69fa      	ldr	r2, [r7, #28]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d106      	bne.n	8012f74 <tcp_input+0x31c>
 8012f66:	4b87      	ldr	r3, [pc, #540]	; (8013184 <tcp_input+0x52c>)
 8012f68:	f240 120d 	movw	r2, #269	; 0x10d
 8012f6c:	4986      	ldr	r1, [pc, #536]	; (8013188 <tcp_input+0x530>)
 8012f6e:	4887      	ldr	r0, [pc, #540]	; (801318c <tcp_input+0x534>)
 8012f70:	f007 ff68 	bl	801ae44 <printf>
      if (prev != NULL) {
 8012f74:	69bb      	ldr	r3, [r7, #24]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d00a      	beq.n	8012f90 <tcp_input+0x338>
        prev->next = pcb->next;
 8012f7a:	69fb      	ldr	r3, [r7, #28]
 8012f7c:	68da      	ldr	r2, [r3, #12]
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012f82:	4b83      	ldr	r3, [pc, #524]	; (8013190 <tcp_input+0x538>)
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	69fb      	ldr	r3, [r7, #28]
 8012f88:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012f8a:	4a81      	ldr	r2, [pc, #516]	; (8013190 <tcp_input+0x538>)
 8012f8c:	69fb      	ldr	r3, [r7, #28]
 8012f8e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012f90:	69fb      	ldr	r3, [r7, #28]
 8012f92:	68db      	ldr	r3, [r3, #12]
 8012f94:	69fa      	ldr	r2, [r7, #28]
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d111      	bne.n	8012fbe <tcp_input+0x366>
 8012f9a:	4b7a      	ldr	r3, [pc, #488]	; (8013184 <tcp_input+0x52c>)
 8012f9c:	f240 1215 	movw	r2, #277	; 0x115
 8012fa0:	497c      	ldr	r1, [pc, #496]	; (8013194 <tcp_input+0x53c>)
 8012fa2:	487a      	ldr	r0, [pc, #488]	; (801318c <tcp_input+0x534>)
 8012fa4:	f007 ff4e 	bl	801ae44 <printf>
      break;
 8012fa8:	e009      	b.n	8012fbe <tcp_input+0x366>
    }
    prev = pcb;
 8012faa:	69fb      	ldr	r3, [r7, #28]
 8012fac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	68db      	ldr	r3, [r3, #12]
 8012fb2:	61fb      	str	r3, [r7, #28]
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	f47f af5e 	bne.w	8012e78 <tcp_input+0x220>
 8012fbc:	e000      	b.n	8012fc0 <tcp_input+0x368>
      break;
 8012fbe:	bf00      	nop
  }

  if (pcb == NULL) {
 8012fc0:	69fb      	ldr	r3, [r7, #28]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	f040 8095 	bne.w	80130f2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fc8:	4b73      	ldr	r3, [pc, #460]	; (8013198 <tcp_input+0x540>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	61fb      	str	r3, [r7, #28]
 8012fce:	e03f      	b.n	8013050 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	7d1b      	ldrb	r3, [r3, #20]
 8012fd4:	2b0a      	cmp	r3, #10
 8012fd6:	d006      	beq.n	8012fe6 <tcp_input+0x38e>
 8012fd8:	4b6a      	ldr	r3, [pc, #424]	; (8013184 <tcp_input+0x52c>)
 8012fda:	f240 121f 	movw	r2, #287	; 0x11f
 8012fde:	496f      	ldr	r1, [pc, #444]	; (801319c <tcp_input+0x544>)
 8012fe0:	486a      	ldr	r0, [pc, #424]	; (801318c <tcp_input+0x534>)
 8012fe2:	f007 ff2f 	bl	801ae44 <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012fe6:	69fb      	ldr	r3, [r7, #28]
 8012fe8:	7a1b      	ldrb	r3, [r3, #8]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d009      	beq.n	8013002 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012fee:	69fb      	ldr	r3, [r7, #28]
 8012ff0:	7a1a      	ldrb	r2, [r3, #8]
 8012ff2:	4b63      	ldr	r3, [pc, #396]	; (8013180 <tcp_input+0x528>)
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d122      	bne.n	8013048 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013002:	69fb      	ldr	r3, [r7, #28]
 8013004:	8b1a      	ldrh	r2, [r3, #24]
 8013006:	4b5d      	ldr	r3, [pc, #372]	; (801317c <tcp_input+0x524>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	881b      	ldrh	r3, [r3, #0]
 801300c:	b29b      	uxth	r3, r3
 801300e:	429a      	cmp	r2, r3
 8013010:	d11b      	bne.n	801304a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013012:	69fb      	ldr	r3, [r7, #28]
 8013014:	8ada      	ldrh	r2, [r3, #22]
 8013016:	4b59      	ldr	r3, [pc, #356]	; (801317c <tcp_input+0x524>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	885b      	ldrh	r3, [r3, #2]
 801301c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801301e:	429a      	cmp	r2, r3
 8013020:	d113      	bne.n	801304a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013022:	69fb      	ldr	r3, [r7, #28]
 8013024:	685a      	ldr	r2, [r3, #4]
 8013026:	4b56      	ldr	r3, [pc, #344]	; (8013180 <tcp_input+0x528>)
 8013028:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801302a:	429a      	cmp	r2, r3
 801302c:	d10d      	bne.n	801304a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	4b53      	ldr	r3, [pc, #332]	; (8013180 <tcp_input+0x528>)
 8013034:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013036:	429a      	cmp	r2, r3
 8013038:	d107      	bne.n	801304a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801303a:	69f8      	ldr	r0, [r7, #28]
 801303c:	f000 fb54 	bl	80136e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7fd fcc3 	bl	80109cc <pbuf_free>
        return;
 8013046:	e1f0      	b.n	801342a <tcp_input+0x7d2>
        continue;
 8013048:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801304a:	69fb      	ldr	r3, [r7, #28]
 801304c:	68db      	ldr	r3, [r3, #12]
 801304e:	61fb      	str	r3, [r7, #28]
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d1bc      	bne.n	8012fd0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013056:	2300      	movs	r3, #0
 8013058:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801305a:	4b51      	ldr	r3, [pc, #324]	; (80131a0 <tcp_input+0x548>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	617b      	str	r3, [r7, #20]
 8013060:	e02a      	b.n	80130b8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	7a1b      	ldrb	r3, [r3, #8]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d00c      	beq.n	8013084 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	7a1a      	ldrb	r2, [r3, #8]
 801306e:	4b44      	ldr	r3, [pc, #272]	; (8013180 <tcp_input+0x528>)
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013076:	3301      	adds	r3, #1
 8013078:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801307a:	429a      	cmp	r2, r3
 801307c:	d002      	beq.n	8013084 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	61bb      	str	r3, [r7, #24]
        continue;
 8013082:	e016      	b.n	80130b2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	8ada      	ldrh	r2, [r3, #22]
 8013088:	4b3c      	ldr	r3, [pc, #240]	; (801317c <tcp_input+0x524>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	885b      	ldrh	r3, [r3, #2]
 801308e:	b29b      	uxth	r3, r3
 8013090:	429a      	cmp	r2, r3
 8013092:	d10c      	bne.n	80130ae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	681a      	ldr	r2, [r3, #0]
 8013098:	4b39      	ldr	r3, [pc, #228]	; (8013180 <tcp_input+0x528>)
 801309a:	695b      	ldr	r3, [r3, #20]
 801309c:	429a      	cmp	r2, r3
 801309e:	d00f      	beq.n	80130c0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d00d      	beq.n	80130c2 <tcp_input+0x46a>
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d009      	beq.n	80130c2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	68db      	ldr	r3, [r3, #12]
 80130b6:	617b      	str	r3, [r7, #20]
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d1d1      	bne.n	8013062 <tcp_input+0x40a>
 80130be:	e000      	b.n	80130c2 <tcp_input+0x46a>
            break;
 80130c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d014      	beq.n	80130f2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80130c8:	69bb      	ldr	r3, [r7, #24]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d00a      	beq.n	80130e4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	68da      	ldr	r2, [r3, #12]
 80130d2:	69bb      	ldr	r3, [r7, #24]
 80130d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80130d6:	4b32      	ldr	r3, [pc, #200]	; (80131a0 <tcp_input+0x548>)
 80130d8:	681a      	ldr	r2, [r3, #0]
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80130de:	4a30      	ldr	r2, [pc, #192]	; (80131a0 <tcp_input+0x548>)
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80130e4:	6978      	ldr	r0, [r7, #20]
 80130e6:	f000 fa01 	bl	80134ec <tcp_listen_input>
      }
      pbuf_free(p);
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f7fd fc6e 	bl	80109cc <pbuf_free>
      return;
 80130f0:	e19b      	b.n	801342a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	f000 8160 	beq.w	80133ba <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80130fa:	4b2a      	ldr	r3, [pc, #168]	; (80131a4 <tcp_input+0x54c>)
 80130fc:	2200      	movs	r2, #0
 80130fe:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	891a      	ldrh	r2, [r3, #8]
 8013104:	4b27      	ldr	r3, [pc, #156]	; (80131a4 <tcp_input+0x54c>)
 8013106:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013108:	4a26      	ldr	r2, [pc, #152]	; (80131a4 <tcp_input+0x54c>)
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801310e:	4b1b      	ldr	r3, [pc, #108]	; (801317c <tcp_input+0x524>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	4a24      	ldr	r2, [pc, #144]	; (80131a4 <tcp_input+0x54c>)
 8013114:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013116:	4b24      	ldr	r3, [pc, #144]	; (80131a8 <tcp_input+0x550>)
 8013118:	2200      	movs	r2, #0
 801311a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801311c:	4b23      	ldr	r3, [pc, #140]	; (80131ac <tcp_input+0x554>)
 801311e:	2200      	movs	r2, #0
 8013120:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013122:	4b23      	ldr	r3, [pc, #140]	; (80131b0 <tcp_input+0x558>)
 8013124:	2200      	movs	r2, #0
 8013126:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013128:	4b22      	ldr	r3, [pc, #136]	; (80131b4 <tcp_input+0x55c>)
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	f003 0308 	and.w	r3, r3, #8
 8013130:	2b00      	cmp	r3, #0
 8013132:	d006      	beq.n	8013142 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	7b5b      	ldrb	r3, [r3, #13]
 8013138:	f043 0301 	orr.w	r3, r3, #1
 801313c:	b2da      	uxtb	r2, r3
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013142:	69fb      	ldr	r3, [r7, #28]
 8013144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013146:	2b00      	cmp	r3, #0
 8013148:	d038      	beq.n	80131bc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801314a:	69f8      	ldr	r0, [r7, #28]
 801314c:	f7ff f852 	bl	80121f4 <tcp_process_refused_data>
 8013150:	4603      	mov	r3, r0
 8013152:	f113 0f0d 	cmn.w	r3, #13
 8013156:	d007      	beq.n	8013168 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013158:	69fb      	ldr	r3, [r7, #28]
 801315a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801315c:	2b00      	cmp	r3, #0
 801315e:	d02d      	beq.n	80131bc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013160:	4b15      	ldr	r3, [pc, #84]	; (80131b8 <tcp_input+0x560>)
 8013162:	881b      	ldrh	r3, [r3, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d029      	beq.n	80131bc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013168:	69fb      	ldr	r3, [r7, #28]
 801316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801316c:	2b00      	cmp	r3, #0
 801316e:	f040 8104 	bne.w	801337a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013172:	69f8      	ldr	r0, [r7, #28]
 8013174:	f003 fe16 	bl	8016da4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013178:	e0ff      	b.n	801337a <tcp_input+0x722>
 801317a:	bf00      	nop
 801317c:	20004f08 	.word	0x20004f08
 8013180:	20008700 	.word	0x20008700
 8013184:	08025d40 	.word	0x08025d40
 8013188:	08025e6c 	.word	0x08025e6c
 801318c:	08025d8c 	.word	0x08025d8c
 8013190:	2000be14 	.word	0x2000be14
 8013194:	08025e98 	.word	0x08025e98
 8013198:	2000be24 	.word	0x2000be24
 801319c:	08025ec4 	.word	0x08025ec4
 80131a0:	2000be1c 	.word	0x2000be1c
 80131a4:	20004ef8 	.word	0x20004ef8
 80131a8:	20004f28 	.word	0x20004f28
 80131ac:	20004f25 	.word	0x20004f25
 80131b0:	20004f20 	.word	0x20004f20
 80131b4:	20004f24 	.word	0x20004f24
 80131b8:	20004f22 	.word	0x20004f22
      }
    }
    tcp_input_pcb = pcb;
 80131bc:	4a9c      	ldr	r2, [pc, #624]	; (8013430 <tcp_input+0x7d8>)
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80131c2:	69f8      	ldr	r0, [r7, #28]
 80131c4:	f000 fb0a 	bl	80137dc <tcp_process>
 80131c8:	4603      	mov	r3, r0
 80131ca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80131cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131d0:	f113 0f0d 	cmn.w	r3, #13
 80131d4:	f000 80d3 	beq.w	801337e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80131d8:	4b96      	ldr	r3, [pc, #600]	; (8013434 <tcp_input+0x7dc>)
 80131da:	781b      	ldrb	r3, [r3, #0]
 80131dc:	f003 0308 	and.w	r3, r3, #8
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d015      	beq.n	8013210 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d008      	beq.n	8013200 <tcp_input+0x5a8>
 80131ee:	69fb      	ldr	r3, [r7, #28]
 80131f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131f4:	69fa      	ldr	r2, [r7, #28]
 80131f6:	6912      	ldr	r2, [r2, #16]
 80131f8:	f06f 010d 	mvn.w	r1, #13
 80131fc:	4610      	mov	r0, r2
 80131fe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013200:	69f9      	ldr	r1, [r7, #28]
 8013202:	488d      	ldr	r0, [pc, #564]	; (8013438 <tcp_input+0x7e0>)
 8013204:	f7ff fbb0 	bl	8012968 <tcp_pcb_remove>
        tcp_free(pcb);
 8013208:	69f8      	ldr	r0, [r7, #28]
 801320a:	f7fd fe9b 	bl	8010f44 <tcp_free>
 801320e:	e0c1      	b.n	8013394 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8013210:	2300      	movs	r3, #0
 8013212:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013214:	4b89      	ldr	r3, [pc, #548]	; (801343c <tcp_input+0x7e4>)
 8013216:	881b      	ldrh	r3, [r3, #0]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d01d      	beq.n	8013258 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801321c:	4b87      	ldr	r3, [pc, #540]	; (801343c <tcp_input+0x7e4>)
 801321e:	881b      	ldrh	r3, [r3, #0]
 8013220:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013228:	2b00      	cmp	r3, #0
 801322a:	d00a      	beq.n	8013242 <tcp_input+0x5ea>
 801322c:	69fb      	ldr	r3, [r7, #28]
 801322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013232:	69fa      	ldr	r2, [r7, #28]
 8013234:	6910      	ldr	r0, [r2, #16]
 8013236:	89fa      	ldrh	r2, [r7, #14]
 8013238:	69f9      	ldr	r1, [r7, #28]
 801323a:	4798      	blx	r3
 801323c:	4603      	mov	r3, r0
 801323e:	74fb      	strb	r3, [r7, #19]
 8013240:	e001      	b.n	8013246 <tcp_input+0x5ee>
 8013242:	2300      	movs	r3, #0
 8013244:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013246:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801324a:	f113 0f0d 	cmn.w	r3, #13
 801324e:	f000 8098 	beq.w	8013382 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013252:	4b7a      	ldr	r3, [pc, #488]	; (801343c <tcp_input+0x7e4>)
 8013254:	2200      	movs	r2, #0
 8013256:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013258:	69f8      	ldr	r0, [r7, #28]
 801325a:	f000 f907 	bl	801346c <tcp_input_delayed_close>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	f040 8090 	bne.w	8013386 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013266:	4b76      	ldr	r3, [pc, #472]	; (8013440 <tcp_input+0x7e8>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d041      	beq.n	80132f2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801326e:	69fb      	ldr	r3, [r7, #28]
 8013270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013272:	2b00      	cmp	r3, #0
 8013274:	d006      	beq.n	8013284 <tcp_input+0x62c>
 8013276:	4b73      	ldr	r3, [pc, #460]	; (8013444 <tcp_input+0x7ec>)
 8013278:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801327c:	4972      	ldr	r1, [pc, #456]	; (8013448 <tcp_input+0x7f0>)
 801327e:	4873      	ldr	r0, [pc, #460]	; (801344c <tcp_input+0x7f4>)
 8013280:	f007 fde0 	bl	801ae44 <printf>
          if (pcb->flags & TF_RXCLOSED) {
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	8b5b      	ldrh	r3, [r3, #26]
 8013288:	f003 0310 	and.w	r3, r3, #16
 801328c:	2b00      	cmp	r3, #0
 801328e:	d008      	beq.n	80132a2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013290:	4b6b      	ldr	r3, [pc, #428]	; (8013440 <tcp_input+0x7e8>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	4618      	mov	r0, r3
 8013296:	f7fd fb99 	bl	80109cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801329a:	69f8      	ldr	r0, [r7, #28]
 801329c:	f7fe f996 	bl	80115cc <tcp_abort>
            goto aborted;
 80132a0:	e078      	b.n	8013394 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80132a2:	69fb      	ldr	r3, [r7, #28]
 80132a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d00c      	beq.n	80132c6 <tcp_input+0x66e>
 80132ac:	69fb      	ldr	r3, [r7, #28]
 80132ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80132b2:	69fb      	ldr	r3, [r7, #28]
 80132b4:	6918      	ldr	r0, [r3, #16]
 80132b6:	4b62      	ldr	r3, [pc, #392]	; (8013440 <tcp_input+0x7e8>)
 80132b8:	681a      	ldr	r2, [r3, #0]
 80132ba:	2300      	movs	r3, #0
 80132bc:	69f9      	ldr	r1, [r7, #28]
 80132be:	47a0      	blx	r4
 80132c0:	4603      	mov	r3, r0
 80132c2:	74fb      	strb	r3, [r7, #19]
 80132c4:	e008      	b.n	80132d8 <tcp_input+0x680>
 80132c6:	4b5e      	ldr	r3, [pc, #376]	; (8013440 <tcp_input+0x7e8>)
 80132c8:	681a      	ldr	r2, [r3, #0]
 80132ca:	2300      	movs	r3, #0
 80132cc:	69f9      	ldr	r1, [r7, #28]
 80132ce:	2000      	movs	r0, #0
 80132d0:	f7ff f884 	bl	80123dc <tcp_recv_null>
 80132d4:	4603      	mov	r3, r0
 80132d6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80132d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132dc:	f113 0f0d 	cmn.w	r3, #13
 80132e0:	d053      	beq.n	801338a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80132e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d003      	beq.n	80132f2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80132ea:	4b55      	ldr	r3, [pc, #340]	; (8013440 <tcp_input+0x7e8>)
 80132ec:	681a      	ldr	r2, [r3, #0]
 80132ee:	69fb      	ldr	r3, [r7, #28]
 80132f0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80132f2:	4b50      	ldr	r3, [pc, #320]	; (8013434 <tcp_input+0x7dc>)
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	f003 0320 	and.w	r3, r3, #32
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d030      	beq.n	8013360 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80132fe:	69fb      	ldr	r3, [r7, #28]
 8013300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013302:	2b00      	cmp	r3, #0
 8013304:	d009      	beq.n	801331a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013306:	69fb      	ldr	r3, [r7, #28]
 8013308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801330a:	7b5a      	ldrb	r2, [r3, #13]
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013310:	f042 0220 	orr.w	r2, r2, #32
 8013314:	b2d2      	uxtb	r2, r2
 8013316:	735a      	strb	r2, [r3, #13]
 8013318:	e022      	b.n	8013360 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801331e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013322:	d005      	beq.n	8013330 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013328:	3301      	adds	r3, #1
 801332a:	b29a      	uxth	r2, r3
 801332c:	69fb      	ldr	r3, [r7, #28]
 801332e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013330:	69fb      	ldr	r3, [r7, #28]
 8013332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013336:	2b00      	cmp	r3, #0
 8013338:	d00b      	beq.n	8013352 <tcp_input+0x6fa>
 801333a:	69fb      	ldr	r3, [r7, #28]
 801333c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013340:	69fb      	ldr	r3, [r7, #28]
 8013342:	6918      	ldr	r0, [r3, #16]
 8013344:	2300      	movs	r3, #0
 8013346:	2200      	movs	r2, #0
 8013348:	69f9      	ldr	r1, [r7, #28]
 801334a:	47a0      	blx	r4
 801334c:	4603      	mov	r3, r0
 801334e:	74fb      	strb	r3, [r7, #19]
 8013350:	e001      	b.n	8013356 <tcp_input+0x6fe>
 8013352:	2300      	movs	r3, #0
 8013354:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013356:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801335a:	f113 0f0d 	cmn.w	r3, #13
 801335e:	d016      	beq.n	801338e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013360:	4b33      	ldr	r3, [pc, #204]	; (8013430 <tcp_input+0x7d8>)
 8013362:	2200      	movs	r2, #0
 8013364:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013366:	69f8      	ldr	r0, [r7, #28]
 8013368:	f000 f880 	bl	801346c <tcp_input_delayed_close>
 801336c:	4603      	mov	r3, r0
 801336e:	2b00      	cmp	r3, #0
 8013370:	d10f      	bne.n	8013392 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013372:	69f8      	ldr	r0, [r7, #28]
 8013374:	f002 ff10 	bl	8016198 <tcp_output>
 8013378:	e00c      	b.n	8013394 <tcp_input+0x73c>
        goto aborted;
 801337a:	bf00      	nop
 801337c:	e00a      	b.n	8013394 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801337e:	bf00      	nop
 8013380:	e008      	b.n	8013394 <tcp_input+0x73c>
              goto aborted;
 8013382:	bf00      	nop
 8013384:	e006      	b.n	8013394 <tcp_input+0x73c>
          goto aborted;
 8013386:	bf00      	nop
 8013388:	e004      	b.n	8013394 <tcp_input+0x73c>
            goto aborted;
 801338a:	bf00      	nop
 801338c:	e002      	b.n	8013394 <tcp_input+0x73c>
              goto aborted;
 801338e:	bf00      	nop
 8013390:	e000      	b.n	8013394 <tcp_input+0x73c>
          goto aborted;
 8013392:	bf00      	nop
    tcp_input_pcb = NULL;
 8013394:	4b26      	ldr	r3, [pc, #152]	; (8013430 <tcp_input+0x7d8>)
 8013396:	2200      	movs	r2, #0
 8013398:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801339a:	4b29      	ldr	r3, [pc, #164]	; (8013440 <tcp_input+0x7e8>)
 801339c:	2200      	movs	r2, #0
 801339e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80133a0:	4b2b      	ldr	r3, [pc, #172]	; (8013450 <tcp_input+0x7f8>)
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d03f      	beq.n	8013428 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80133a8:	4b29      	ldr	r3, [pc, #164]	; (8013450 <tcp_input+0x7f8>)
 80133aa:	685b      	ldr	r3, [r3, #4]
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7fd fb0d 	bl	80109cc <pbuf_free>
      inseg.p = NULL;
 80133b2:	4b27      	ldr	r3, [pc, #156]	; (8013450 <tcp_input+0x7f8>)
 80133b4:	2200      	movs	r2, #0
 80133b6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80133b8:	e036      	b.n	8013428 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80133ba:	4b26      	ldr	r3, [pc, #152]	; (8013454 <tcp_input+0x7fc>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	899b      	ldrh	r3, [r3, #12]
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7fb ff98 	bl	800f2f8 <lwip_htons>
 80133c8:	4603      	mov	r3, r0
 80133ca:	b2db      	uxtb	r3, r3
 80133cc:	f003 0304 	and.w	r3, r3, #4
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d118      	bne.n	8013406 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133d4:	4b20      	ldr	r3, [pc, #128]	; (8013458 <tcp_input+0x800>)
 80133d6:	6819      	ldr	r1, [r3, #0]
 80133d8:	4b20      	ldr	r3, [pc, #128]	; (801345c <tcp_input+0x804>)
 80133da:	881b      	ldrh	r3, [r3, #0]
 80133dc:	461a      	mov	r2, r3
 80133de:	4b20      	ldr	r3, [pc, #128]	; (8013460 <tcp_input+0x808>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80133e4:	4b1b      	ldr	r3, [pc, #108]	; (8013454 <tcp_input+0x7fc>)
 80133e6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133e8:	885b      	ldrh	r3, [r3, #2]
 80133ea:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80133ec:	4a19      	ldr	r2, [pc, #100]	; (8013454 <tcp_input+0x7fc>)
 80133ee:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133f0:	8812      	ldrh	r2, [r2, #0]
 80133f2:	b292      	uxth	r2, r2
 80133f4:	9202      	str	r2, [sp, #8]
 80133f6:	9301      	str	r3, [sp, #4]
 80133f8:	4b1a      	ldr	r3, [pc, #104]	; (8013464 <tcp_input+0x80c>)
 80133fa:	9300      	str	r3, [sp, #0]
 80133fc:	4b1a      	ldr	r3, [pc, #104]	; (8013468 <tcp_input+0x810>)
 80133fe:	4602      	mov	r2, r0
 8013400:	2000      	movs	r0, #0
 8013402:	f003 fc7d 	bl	8016d00 <tcp_rst>
    pbuf_free(p);
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f7fd fae0 	bl	80109cc <pbuf_free>
  return;
 801340c:	e00c      	b.n	8013428 <tcp_input+0x7d0>
    goto dropped;
 801340e:	bf00      	nop
 8013410:	e006      	b.n	8013420 <tcp_input+0x7c8>
    goto dropped;
 8013412:	bf00      	nop
 8013414:	e004      	b.n	8013420 <tcp_input+0x7c8>
    goto dropped;
 8013416:	bf00      	nop
 8013418:	e002      	b.n	8013420 <tcp_input+0x7c8>
      goto dropped;
 801341a:	bf00      	nop
 801341c:	e000      	b.n	8013420 <tcp_input+0x7c8>
      goto dropped;
 801341e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f7fd fad3 	bl	80109cc <pbuf_free>
 8013426:	e000      	b.n	801342a <tcp_input+0x7d2>
  return;
 8013428:	bf00      	nop
}
 801342a:	3724      	adds	r7, #36	; 0x24
 801342c:	46bd      	mov	sp, r7
 801342e:	bd90      	pop	{r4, r7, pc}
 8013430:	2000be28 	.word	0x2000be28
 8013434:	20004f25 	.word	0x20004f25
 8013438:	2000be14 	.word	0x2000be14
 801343c:	20004f20 	.word	0x20004f20
 8013440:	20004f28 	.word	0x20004f28
 8013444:	08025d40 	.word	0x08025d40
 8013448:	08025ef4 	.word	0x08025ef4
 801344c:	08025d8c 	.word	0x08025d8c
 8013450:	20004ef8 	.word	0x20004ef8
 8013454:	20004f08 	.word	0x20004f08
 8013458:	20004f1c 	.word	0x20004f1c
 801345c:	20004f22 	.word	0x20004f22
 8013460:	20004f18 	.word	0x20004f18
 8013464:	20008710 	.word	0x20008710
 8013468:	20008714 	.word	0x20008714

0801346c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b082      	sub	sp, #8
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d106      	bne.n	8013488 <tcp_input_delayed_close+0x1c>
 801347a:	4b17      	ldr	r3, [pc, #92]	; (80134d8 <tcp_input_delayed_close+0x6c>)
 801347c:	f240 225a 	movw	r2, #602	; 0x25a
 8013480:	4916      	ldr	r1, [pc, #88]	; (80134dc <tcp_input_delayed_close+0x70>)
 8013482:	4817      	ldr	r0, [pc, #92]	; (80134e0 <tcp_input_delayed_close+0x74>)
 8013484:	f007 fcde 	bl	801ae44 <printf>

  if (recv_flags & TF_CLOSED) {
 8013488:	4b16      	ldr	r3, [pc, #88]	; (80134e4 <tcp_input_delayed_close+0x78>)
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	f003 0310 	and.w	r3, r3, #16
 8013490:	2b00      	cmp	r3, #0
 8013492:	d01c      	beq.n	80134ce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	8b5b      	ldrh	r3, [r3, #26]
 8013498:	f003 0310 	and.w	r3, r3, #16
 801349c:	2b00      	cmp	r3, #0
 801349e:	d10d      	bne.n	80134bc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d008      	beq.n	80134bc <tcp_input_delayed_close+0x50>
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	6912      	ldr	r2, [r2, #16]
 80134b4:	f06f 010e 	mvn.w	r1, #14
 80134b8:	4610      	mov	r0, r2
 80134ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80134bc:	6879      	ldr	r1, [r7, #4]
 80134be:	480a      	ldr	r0, [pc, #40]	; (80134e8 <tcp_input_delayed_close+0x7c>)
 80134c0:	f7ff fa52 	bl	8012968 <tcp_pcb_remove>
    tcp_free(pcb);
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	f7fd fd3d 	bl	8010f44 <tcp_free>
    return 1;
 80134ca:	2301      	movs	r3, #1
 80134cc:	e000      	b.n	80134d0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80134ce:	2300      	movs	r3, #0
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	3708      	adds	r7, #8
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	08025d40 	.word	0x08025d40
 80134dc:	08025f10 	.word	0x08025f10
 80134e0:	08025d8c 	.word	0x08025d8c
 80134e4:	20004f25 	.word	0x20004f25
 80134e8:	2000be14 	.word	0x2000be14

080134ec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80134ec:	b590      	push	{r4, r7, lr}
 80134ee:	b08b      	sub	sp, #44	; 0x2c
 80134f0:	af04      	add	r7, sp, #16
 80134f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80134f4:	4b6f      	ldr	r3, [pc, #444]	; (80136b4 <tcp_listen_input+0x1c8>)
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	f003 0304 	and.w	r3, r3, #4
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	f040 80d2 	bne.w	80136a6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d106      	bne.n	8013516 <tcp_listen_input+0x2a>
 8013508:	4b6b      	ldr	r3, [pc, #428]	; (80136b8 <tcp_listen_input+0x1cc>)
 801350a:	f240 2281 	movw	r2, #641	; 0x281
 801350e:	496b      	ldr	r1, [pc, #428]	; (80136bc <tcp_listen_input+0x1d0>)
 8013510:	486b      	ldr	r0, [pc, #428]	; (80136c0 <tcp_listen_input+0x1d4>)
 8013512:	f007 fc97 	bl	801ae44 <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013516:	4b67      	ldr	r3, [pc, #412]	; (80136b4 <tcp_listen_input+0x1c8>)
 8013518:	781b      	ldrb	r3, [r3, #0]
 801351a:	f003 0310 	and.w	r3, r3, #16
 801351e:	2b00      	cmp	r3, #0
 8013520:	d019      	beq.n	8013556 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013522:	4b68      	ldr	r3, [pc, #416]	; (80136c4 <tcp_listen_input+0x1d8>)
 8013524:	6819      	ldr	r1, [r3, #0]
 8013526:	4b68      	ldr	r3, [pc, #416]	; (80136c8 <tcp_listen_input+0x1dc>)
 8013528:	881b      	ldrh	r3, [r3, #0]
 801352a:	461a      	mov	r2, r3
 801352c:	4b67      	ldr	r3, [pc, #412]	; (80136cc <tcp_listen_input+0x1e0>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013532:	4b67      	ldr	r3, [pc, #412]	; (80136d0 <tcp_listen_input+0x1e4>)
 8013534:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013536:	885b      	ldrh	r3, [r3, #2]
 8013538:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801353a:	4a65      	ldr	r2, [pc, #404]	; (80136d0 <tcp_listen_input+0x1e4>)
 801353c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801353e:	8812      	ldrh	r2, [r2, #0]
 8013540:	b292      	uxth	r2, r2
 8013542:	9202      	str	r2, [sp, #8]
 8013544:	9301      	str	r3, [sp, #4]
 8013546:	4b63      	ldr	r3, [pc, #396]	; (80136d4 <tcp_listen_input+0x1e8>)
 8013548:	9300      	str	r3, [sp, #0]
 801354a:	4b63      	ldr	r3, [pc, #396]	; (80136d8 <tcp_listen_input+0x1ec>)
 801354c:	4602      	mov	r2, r0
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f003 fbd6 	bl	8016d00 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013554:	e0a9      	b.n	80136aa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013556:	4b57      	ldr	r3, [pc, #348]	; (80136b4 <tcp_listen_input+0x1c8>)
 8013558:	781b      	ldrb	r3, [r3, #0]
 801355a:	f003 0302 	and.w	r3, r3, #2
 801355e:	2b00      	cmp	r3, #0
 8013560:	f000 80a3 	beq.w	80136aa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	7d5b      	ldrb	r3, [r3, #21]
 8013568:	4618      	mov	r0, r3
 801356a:	f7ff f85b 	bl	8012624 <tcp_alloc>
 801356e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d111      	bne.n	801359a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	699b      	ldr	r3, [r3, #24]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d00a      	beq.n	8013594 <tcp_listen_input+0xa8>
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	699b      	ldr	r3, [r3, #24]
 8013582:	687a      	ldr	r2, [r7, #4]
 8013584:	6910      	ldr	r0, [r2, #16]
 8013586:	f04f 32ff 	mov.w	r2, #4294967295
 801358a:	2100      	movs	r1, #0
 801358c:	4798      	blx	r3
 801358e:	4603      	mov	r3, r0
 8013590:	73bb      	strb	r3, [r7, #14]
      return;
 8013592:	e08b      	b.n	80136ac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013594:	23f0      	movs	r3, #240	; 0xf0
 8013596:	73bb      	strb	r3, [r7, #14]
      return;
 8013598:	e088      	b.n	80136ac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801359a:	4b50      	ldr	r3, [pc, #320]	; (80136dc <tcp_listen_input+0x1f0>)
 801359c:	695a      	ldr	r2, [r3, #20]
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80135a2:	4b4e      	ldr	r3, [pc, #312]	; (80136dc <tcp_listen_input+0x1f0>)
 80135a4:	691a      	ldr	r2, [r3, #16]
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	8ada      	ldrh	r2, [r3, #22]
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80135b2:	4b47      	ldr	r3, [pc, #284]	; (80136d0 <tcp_listen_input+0x1e4>)
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	881b      	ldrh	r3, [r3, #0]
 80135b8:	b29a      	uxth	r2, r3
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	2203      	movs	r2, #3
 80135c2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80135c4:	4b41      	ldr	r3, [pc, #260]	; (80136cc <tcp_listen_input+0x1e0>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	1c5a      	adds	r2, r3, #1
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80135d6:	6978      	ldr	r0, [r7, #20]
 80135d8:	f7ff fa5a 	bl	8012a90 <tcp_next_iss>
 80135dc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	693a      	ldr	r2, [r7, #16]
 80135e2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	693a      	ldr	r2, [r7, #16]
 80135e8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	693a      	ldr	r2, [r7, #16]
 80135ee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	693a      	ldr	r2, [r7, #16]
 80135f4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80135f6:	4b35      	ldr	r3, [pc, #212]	; (80136cc <tcp_listen_input+0x1e0>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	1e5a      	subs	r2, r3, #1
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	691a      	ldr	r2, [r3, #16]
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	7a5b      	ldrb	r3, [r3, #9]
 8013612:	f003 030c 	and.w	r3, r3, #12
 8013616:	b2da      	uxtb	r2, r3
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	7a1a      	ldrb	r2, [r3, #8]
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013624:	4b2e      	ldr	r3, [pc, #184]	; (80136e0 <tcp_listen_input+0x1f4>)
 8013626:	681a      	ldr	r2, [r3, #0]
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	60da      	str	r2, [r3, #12]
 801362c:	4a2c      	ldr	r2, [pc, #176]	; (80136e0 <tcp_listen_input+0x1f4>)
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	6013      	str	r3, [r2, #0]
 8013632:	f003 fd27 	bl	8017084 <tcp_timer_needed>
 8013636:	4b2b      	ldr	r3, [pc, #172]	; (80136e4 <tcp_listen_input+0x1f8>)
 8013638:	2201      	movs	r2, #1
 801363a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801363c:	6978      	ldr	r0, [r7, #20]
 801363e:	f001 fd8d 	bl	801515c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013642:	4b23      	ldr	r3, [pc, #140]	; (80136d0 <tcp_listen_input+0x1e4>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	89db      	ldrh	r3, [r3, #14]
 8013648:	b29a      	uxth	r2, r3
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013660:	697b      	ldr	r3, [r7, #20]
 8013662:	3304      	adds	r3, #4
 8013664:	4618      	mov	r0, r3
 8013666:	f005 fc4b 	bl	8018f00 <ip4_route>
 801366a:	4601      	mov	r1, r0
 801366c:	697b      	ldr	r3, [r7, #20]
 801366e:	3304      	adds	r3, #4
 8013670:	461a      	mov	r2, r3
 8013672:	4620      	mov	r0, r4
 8013674:	f7ff fa32 	bl	8012adc <tcp_eff_send_mss_netif>
 8013678:	4603      	mov	r3, r0
 801367a:	461a      	mov	r2, r3
 801367c:	697b      	ldr	r3, [r7, #20]
 801367e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013680:	2112      	movs	r1, #18
 8013682:	6978      	ldr	r0, [r7, #20]
 8013684:	f002 fc9a 	bl	8015fbc <tcp_enqueue_flags>
 8013688:	4603      	mov	r3, r0
 801368a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801368c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d004      	beq.n	801369e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013694:	2100      	movs	r1, #0
 8013696:	6978      	ldr	r0, [r7, #20]
 8013698:	f7fd feda 	bl	8011450 <tcp_abandon>
      return;
 801369c:	e006      	b.n	80136ac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801369e:	6978      	ldr	r0, [r7, #20]
 80136a0:	f002 fd7a 	bl	8016198 <tcp_output>
  return;
 80136a4:	e001      	b.n	80136aa <tcp_listen_input+0x1be>
    return;
 80136a6:	bf00      	nop
 80136a8:	e000      	b.n	80136ac <tcp_listen_input+0x1c0>
  return;
 80136aa:	bf00      	nop
}
 80136ac:	371c      	adds	r7, #28
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd90      	pop	{r4, r7, pc}
 80136b2:	bf00      	nop
 80136b4:	20004f24 	.word	0x20004f24
 80136b8:	08025d40 	.word	0x08025d40
 80136bc:	08025f38 	.word	0x08025f38
 80136c0:	08025d8c 	.word	0x08025d8c
 80136c4:	20004f1c 	.word	0x20004f1c
 80136c8:	20004f22 	.word	0x20004f22
 80136cc:	20004f18 	.word	0x20004f18
 80136d0:	20004f08 	.word	0x20004f08
 80136d4:	20008710 	.word	0x20008710
 80136d8:	20008714 	.word	0x20008714
 80136dc:	20008700 	.word	0x20008700
 80136e0:	2000be14 	.word	0x2000be14
 80136e4:	2000be10 	.word	0x2000be10

080136e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b086      	sub	sp, #24
 80136ec:	af04      	add	r7, sp, #16
 80136ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80136f0:	4b2f      	ldr	r3, [pc, #188]	; (80137b0 <tcp_timewait_input+0xc8>)
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	f003 0304 	and.w	r3, r3, #4
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d153      	bne.n	80137a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d106      	bne.n	8013710 <tcp_timewait_input+0x28>
 8013702:	4b2c      	ldr	r3, [pc, #176]	; (80137b4 <tcp_timewait_input+0xcc>)
 8013704:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013708:	492b      	ldr	r1, [pc, #172]	; (80137b8 <tcp_timewait_input+0xd0>)
 801370a:	482c      	ldr	r0, [pc, #176]	; (80137bc <tcp_timewait_input+0xd4>)
 801370c:	f007 fb9a 	bl	801ae44 <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013710:	4b27      	ldr	r3, [pc, #156]	; (80137b0 <tcp_timewait_input+0xc8>)
 8013712:	781b      	ldrb	r3, [r3, #0]
 8013714:	f003 0302 	and.w	r3, r3, #2
 8013718:	2b00      	cmp	r3, #0
 801371a:	d02a      	beq.n	8013772 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801371c:	4b28      	ldr	r3, [pc, #160]	; (80137c0 <tcp_timewait_input+0xd8>)
 801371e:	681a      	ldr	r2, [r3, #0]
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013724:	1ad3      	subs	r3, r2, r3
 8013726:	2b00      	cmp	r3, #0
 8013728:	db2d      	blt.n	8013786 <tcp_timewait_input+0x9e>
 801372a:	4b25      	ldr	r3, [pc, #148]	; (80137c0 <tcp_timewait_input+0xd8>)
 801372c:	681a      	ldr	r2, [r3, #0]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013732:	6879      	ldr	r1, [r7, #4]
 8013734:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013736:	440b      	add	r3, r1
 8013738:	1ad3      	subs	r3, r2, r3
 801373a:	2b00      	cmp	r3, #0
 801373c:	dc23      	bgt.n	8013786 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801373e:	4b21      	ldr	r3, [pc, #132]	; (80137c4 <tcp_timewait_input+0xdc>)
 8013740:	6819      	ldr	r1, [r3, #0]
 8013742:	4b21      	ldr	r3, [pc, #132]	; (80137c8 <tcp_timewait_input+0xe0>)
 8013744:	881b      	ldrh	r3, [r3, #0]
 8013746:	461a      	mov	r2, r3
 8013748:	4b1d      	ldr	r3, [pc, #116]	; (80137c0 <tcp_timewait_input+0xd8>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801374e:	4b1f      	ldr	r3, [pc, #124]	; (80137cc <tcp_timewait_input+0xe4>)
 8013750:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013752:	885b      	ldrh	r3, [r3, #2]
 8013754:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013756:	4a1d      	ldr	r2, [pc, #116]	; (80137cc <tcp_timewait_input+0xe4>)
 8013758:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801375a:	8812      	ldrh	r2, [r2, #0]
 801375c:	b292      	uxth	r2, r2
 801375e:	9202      	str	r2, [sp, #8]
 8013760:	9301      	str	r3, [sp, #4]
 8013762:	4b1b      	ldr	r3, [pc, #108]	; (80137d0 <tcp_timewait_input+0xe8>)
 8013764:	9300      	str	r3, [sp, #0]
 8013766:	4b1b      	ldr	r3, [pc, #108]	; (80137d4 <tcp_timewait_input+0xec>)
 8013768:	4602      	mov	r2, r0
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f003 fac8 	bl	8016d00 <tcp_rst>
      return;
 8013770:	e01b      	b.n	80137aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013772:	4b0f      	ldr	r3, [pc, #60]	; (80137b0 <tcp_timewait_input+0xc8>)
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	f003 0301 	and.w	r3, r3, #1
 801377a:	2b00      	cmp	r3, #0
 801377c:	d003      	beq.n	8013786 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801377e:	4b16      	ldr	r3, [pc, #88]	; (80137d8 <tcp_timewait_input+0xf0>)
 8013780:	681a      	ldr	r2, [r3, #0]
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013786:	4b10      	ldr	r3, [pc, #64]	; (80137c8 <tcp_timewait_input+0xe0>)
 8013788:	881b      	ldrh	r3, [r3, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d00c      	beq.n	80137a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	8b5b      	ldrh	r3, [r3, #26]
 8013792:	f043 0302 	orr.w	r3, r3, #2
 8013796:	b29a      	uxth	r2, r3
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f002 fcfb 	bl	8016198 <tcp_output>
  }
  return;
 80137a2:	e001      	b.n	80137a8 <tcp_timewait_input+0xc0>
    return;
 80137a4:	bf00      	nop
 80137a6:	e000      	b.n	80137aa <tcp_timewait_input+0xc2>
  return;
 80137a8:	bf00      	nop
}
 80137aa:	3708      	adds	r7, #8
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}
 80137b0:	20004f24 	.word	0x20004f24
 80137b4:	08025d40 	.word	0x08025d40
 80137b8:	08025f58 	.word	0x08025f58
 80137bc:	08025d8c 	.word	0x08025d8c
 80137c0:	20004f18 	.word	0x20004f18
 80137c4:	20004f1c 	.word	0x20004f1c
 80137c8:	20004f22 	.word	0x20004f22
 80137cc:	20004f08 	.word	0x20004f08
 80137d0:	20008710 	.word	0x20008710
 80137d4:	20008714 	.word	0x20008714
 80137d8:	2000be18 	.word	0x2000be18

080137dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80137dc:	b590      	push	{r4, r7, lr}
 80137de:	b08d      	sub	sp, #52	; 0x34
 80137e0:	af04      	add	r7, sp, #16
 80137e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80137e4:	2300      	movs	r3, #0
 80137e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80137e8:	2300      	movs	r3, #0
 80137ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d106      	bne.n	8013800 <tcp_process+0x24>
 80137f2:	4ba5      	ldr	r3, [pc, #660]	; (8013a88 <tcp_process+0x2ac>)
 80137f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80137f8:	49a4      	ldr	r1, [pc, #656]	; (8013a8c <tcp_process+0x2b0>)
 80137fa:	48a5      	ldr	r0, [pc, #660]	; (8013a90 <tcp_process+0x2b4>)
 80137fc:	f007 fb22 	bl	801ae44 <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013800:	4ba4      	ldr	r3, [pc, #656]	; (8013a94 <tcp_process+0x2b8>)
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	f003 0304 	and.w	r3, r3, #4
 8013808:	2b00      	cmp	r3, #0
 801380a:	d04e      	beq.n	80138aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	7d1b      	ldrb	r3, [r3, #20]
 8013810:	2b02      	cmp	r3, #2
 8013812:	d108      	bne.n	8013826 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013818:	4b9f      	ldr	r3, [pc, #636]	; (8013a98 <tcp_process+0x2bc>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	429a      	cmp	r2, r3
 801381e:	d123      	bne.n	8013868 <tcp_process+0x8c>
        acceptable = 1;
 8013820:	2301      	movs	r3, #1
 8013822:	76fb      	strb	r3, [r7, #27]
 8013824:	e020      	b.n	8013868 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801382a:	4b9c      	ldr	r3, [pc, #624]	; (8013a9c <tcp_process+0x2c0>)
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	429a      	cmp	r2, r3
 8013830:	d102      	bne.n	8013838 <tcp_process+0x5c>
        acceptable = 1;
 8013832:	2301      	movs	r3, #1
 8013834:	76fb      	strb	r3, [r7, #27]
 8013836:	e017      	b.n	8013868 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013838:	4b98      	ldr	r3, [pc, #608]	; (8013a9c <tcp_process+0x2c0>)
 801383a:	681a      	ldr	r2, [r3, #0]
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013840:	1ad3      	subs	r3, r2, r3
 8013842:	2b00      	cmp	r3, #0
 8013844:	db10      	blt.n	8013868 <tcp_process+0x8c>
 8013846:	4b95      	ldr	r3, [pc, #596]	; (8013a9c <tcp_process+0x2c0>)
 8013848:	681a      	ldr	r2, [r3, #0]
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801384e:	6879      	ldr	r1, [r7, #4]
 8013850:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013852:	440b      	add	r3, r1
 8013854:	1ad3      	subs	r3, r2, r3
 8013856:	2b00      	cmp	r3, #0
 8013858:	dc06      	bgt.n	8013868 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	8b5b      	ldrh	r3, [r3, #26]
 801385e:	f043 0302 	orr.w	r3, r3, #2
 8013862:	b29a      	uxth	r2, r3
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013868:	7efb      	ldrb	r3, [r7, #27]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d01b      	beq.n	80138a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	7d1b      	ldrb	r3, [r3, #20]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d106      	bne.n	8013884 <tcp_process+0xa8>
 8013876:	4b84      	ldr	r3, [pc, #528]	; (8013a88 <tcp_process+0x2ac>)
 8013878:	f44f 724e 	mov.w	r2, #824	; 0x338
 801387c:	4988      	ldr	r1, [pc, #544]	; (8013aa0 <tcp_process+0x2c4>)
 801387e:	4884      	ldr	r0, [pc, #528]	; (8013a90 <tcp_process+0x2b4>)
 8013880:	f007 fae0 	bl	801ae44 <printf>
      recv_flags |= TF_RESET;
 8013884:	4b87      	ldr	r3, [pc, #540]	; (8013aa4 <tcp_process+0x2c8>)
 8013886:	781b      	ldrb	r3, [r3, #0]
 8013888:	f043 0308 	orr.w	r3, r3, #8
 801388c:	b2da      	uxtb	r2, r3
 801388e:	4b85      	ldr	r3, [pc, #532]	; (8013aa4 <tcp_process+0x2c8>)
 8013890:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	8b5b      	ldrh	r3, [r3, #26]
 8013896:	f023 0301 	bic.w	r3, r3, #1
 801389a:	b29a      	uxth	r2, r3
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80138a0:	f06f 030d 	mvn.w	r3, #13
 80138a4:	e37a      	b.n	8013f9c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80138a6:	2300      	movs	r3, #0
 80138a8:	e378      	b.n	8013f9c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80138aa:	4b7a      	ldr	r3, [pc, #488]	; (8013a94 <tcp_process+0x2b8>)
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	f003 0302 	and.w	r3, r3, #2
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d010      	beq.n	80138d8 <tcp_process+0xfc>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	7d1b      	ldrb	r3, [r3, #20]
 80138ba:	2b02      	cmp	r3, #2
 80138bc:	d00c      	beq.n	80138d8 <tcp_process+0xfc>
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	7d1b      	ldrb	r3, [r3, #20]
 80138c2:	2b03      	cmp	r3, #3
 80138c4:	d008      	beq.n	80138d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	8b5b      	ldrh	r3, [r3, #26]
 80138ca:	f043 0302 	orr.w	r3, r3, #2
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80138d4:	2300      	movs	r3, #0
 80138d6:	e361      	b.n	8013f9c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	8b5b      	ldrh	r3, [r3, #26]
 80138dc:	f003 0310 	and.w	r3, r3, #16
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d103      	bne.n	80138ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80138e4:	4b70      	ldr	r3, [pc, #448]	; (8013aa8 <tcp_process+0x2cc>)
 80138e6:	681a      	ldr	r2, [r3, #0]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2200      	movs	r2, #0
 80138f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2200      	movs	r2, #0
 80138f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f001 fc2d 	bl	801515c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	7d1b      	ldrb	r3, [r3, #20]
 8013906:	3b02      	subs	r3, #2
 8013908:	2b07      	cmp	r3, #7
 801390a:	f200 8337 	bhi.w	8013f7c <tcp_process+0x7a0>
 801390e:	a201      	add	r2, pc, #4	; (adr r2, 8013914 <tcp_process+0x138>)
 8013910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013914:	08013935 	.word	0x08013935
 8013918:	08013b65 	.word	0x08013b65
 801391c:	08013cdd 	.word	0x08013cdd
 8013920:	08013d07 	.word	0x08013d07
 8013924:	08013e2b 	.word	0x08013e2b
 8013928:	08013cdd 	.word	0x08013cdd
 801392c:	08013eb7 	.word	0x08013eb7
 8013930:	08013f47 	.word	0x08013f47
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013934:	4b57      	ldr	r3, [pc, #348]	; (8013a94 <tcp_process+0x2b8>)
 8013936:	781b      	ldrb	r3, [r3, #0]
 8013938:	f003 0310 	and.w	r3, r3, #16
 801393c:	2b00      	cmp	r3, #0
 801393e:	f000 80e4 	beq.w	8013b0a <tcp_process+0x32e>
 8013942:	4b54      	ldr	r3, [pc, #336]	; (8013a94 <tcp_process+0x2b8>)
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	f003 0302 	and.w	r3, r3, #2
 801394a:	2b00      	cmp	r3, #0
 801394c:	f000 80dd 	beq.w	8013b0a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013954:	1c5a      	adds	r2, r3, #1
 8013956:	4b50      	ldr	r3, [pc, #320]	; (8013a98 <tcp_process+0x2bc>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	429a      	cmp	r2, r3
 801395c:	f040 80d5 	bne.w	8013b0a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013960:	4b4e      	ldr	r3, [pc, #312]	; (8013a9c <tcp_process+0x2c0>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	1c5a      	adds	r2, r3, #1
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013972:	4b49      	ldr	r3, [pc, #292]	; (8013a98 <tcp_process+0x2bc>)
 8013974:	681a      	ldr	r2, [r3, #0]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801397a:	4b4c      	ldr	r3, [pc, #304]	; (8013aac <tcp_process+0x2d0>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	89db      	ldrh	r3, [r3, #14]
 8013980:	b29a      	uxth	r2, r3
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013994:	4b41      	ldr	r3, [pc, #260]	; (8013a9c <tcp_process+0x2c0>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	1e5a      	subs	r2, r3, #1
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2204      	movs	r2, #4
 80139a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	3304      	adds	r3, #4
 80139ac:	4618      	mov	r0, r3
 80139ae:	f005 faa7 	bl	8018f00 <ip4_route>
 80139b2:	4601      	mov	r1, r0
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	3304      	adds	r3, #4
 80139b8:	461a      	mov	r2, r3
 80139ba:	4620      	mov	r0, r4
 80139bc:	f7ff f88e 	bl	8012adc <tcp_eff_send_mss_netif>
 80139c0:	4603      	mov	r3, r0
 80139c2:	461a      	mov	r2, r3
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139cc:	009a      	lsls	r2, r3, #2
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139d2:	005b      	lsls	r3, r3, #1
 80139d4:	f241 111c 	movw	r1, #4380	; 0x111c
 80139d8:	428b      	cmp	r3, r1
 80139da:	bf38      	it	cc
 80139dc:	460b      	movcc	r3, r1
 80139de:	429a      	cmp	r2, r3
 80139e0:	d204      	bcs.n	80139ec <tcp_process+0x210>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139e6:	009b      	lsls	r3, r3, #2
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	e00d      	b.n	8013a08 <tcp_process+0x22c>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139f0:	005b      	lsls	r3, r3, #1
 80139f2:	f241 121c 	movw	r2, #4380	; 0x111c
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d904      	bls.n	8013a04 <tcp_process+0x228>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139fe:	005b      	lsls	r3, r3, #1
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	e001      	b.n	8013a08 <tcp_process+0x22c>
 8013a04:	f241 131c 	movw	r3, #4380	; 0x111c
 8013a08:	687a      	ldr	r2, [r7, #4]
 8013a0a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d106      	bne.n	8013a26 <tcp_process+0x24a>
 8013a18:	4b1b      	ldr	r3, [pc, #108]	; (8013a88 <tcp_process+0x2ac>)
 8013a1a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013a1e:	4924      	ldr	r1, [pc, #144]	; (8013ab0 <tcp_process+0x2d4>)
 8013a20:	481b      	ldr	r0, [pc, #108]	; (8013a90 <tcp_process+0x2b4>)
 8013a22:	f007 fa0f 	bl	801ae44 <printf>
        --pcb->snd_queuelen;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a2c:	3b01      	subs	r3, #1
 8013a2e:	b29a      	uxth	r2, r3
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a3a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d111      	bne.n	8013a66 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a46:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d106      	bne.n	8013a5c <tcp_process+0x280>
 8013a4e:	4b0e      	ldr	r3, [pc, #56]	; (8013a88 <tcp_process+0x2ac>)
 8013a50:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013a54:	4917      	ldr	r1, [pc, #92]	; (8013ab4 <tcp_process+0x2d8>)
 8013a56:	480e      	ldr	r0, [pc, #56]	; (8013a90 <tcp_process+0x2b4>)
 8013a58:	f007 f9f4 	bl	801ae44 <printf>
          pcb->unsent = rseg->next;
 8013a5c:	69fb      	ldr	r3, [r7, #28]
 8013a5e:	681a      	ldr	r2, [r3, #0]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	66da      	str	r2, [r3, #108]	; 0x6c
 8013a64:	e003      	b.n	8013a6e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8013a66:	69fb      	ldr	r3, [r7, #28]
 8013a68:	681a      	ldr	r2, [r3, #0]
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013a6e:	69f8      	ldr	r0, [r7, #28]
 8013a70:	f7fe fc51 	bl	8012316 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d11d      	bne.n	8013ab8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a82:	861a      	strh	r2, [r3, #48]	; 0x30
 8013a84:	e01f      	b.n	8013ac6 <tcp_process+0x2ea>
 8013a86:	bf00      	nop
 8013a88:	08025d40 	.word	0x08025d40
 8013a8c:	08025f78 	.word	0x08025f78
 8013a90:	08025d8c 	.word	0x08025d8c
 8013a94:	20004f24 	.word	0x20004f24
 8013a98:	20004f1c 	.word	0x20004f1c
 8013a9c:	20004f18 	.word	0x20004f18
 8013aa0:	08025f94 	.word	0x08025f94
 8013aa4:	20004f25 	.word	0x20004f25
 8013aa8:	2000be18 	.word	0x2000be18
 8013aac:	20004f08 	.word	0x20004f08
 8013ab0:	08025fb4 	.word	0x08025fb4
 8013ab4:	08025fcc 	.word	0x08025fcc
        } else {
          pcb->rtime = 0;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2200      	movs	r2, #0
 8013abc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d00a      	beq.n	8013ae6 <tcp_process+0x30a>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	6910      	ldr	r0, [r2, #16]
 8013ada:	2200      	movs	r2, #0
 8013adc:	6879      	ldr	r1, [r7, #4]
 8013ade:	4798      	blx	r3
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	76bb      	strb	r3, [r7, #26]
 8013ae4:	e001      	b.n	8013aea <tcp_process+0x30e>
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013aea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013aee:	f113 0f0d 	cmn.w	r3, #13
 8013af2:	d102      	bne.n	8013afa <tcp_process+0x31e>
          return ERR_ABRT;
 8013af4:	f06f 030c 	mvn.w	r3, #12
 8013af8:	e250      	b.n	8013f9c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	8b5b      	ldrh	r3, [r3, #26]
 8013afe:	f043 0302 	orr.w	r3, r3, #2
 8013b02:	b29a      	uxth	r2, r3
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013b08:	e23a      	b.n	8013f80 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013b0a:	4b9d      	ldr	r3, [pc, #628]	; (8013d80 <tcp_process+0x5a4>)
 8013b0c:	781b      	ldrb	r3, [r3, #0]
 8013b0e:	f003 0310 	and.w	r3, r3, #16
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f000 8234 	beq.w	8013f80 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b18:	4b9a      	ldr	r3, [pc, #616]	; (8013d84 <tcp_process+0x5a8>)
 8013b1a:	6819      	ldr	r1, [r3, #0]
 8013b1c:	4b9a      	ldr	r3, [pc, #616]	; (8013d88 <tcp_process+0x5ac>)
 8013b1e:	881b      	ldrh	r3, [r3, #0]
 8013b20:	461a      	mov	r2, r3
 8013b22:	4b9a      	ldr	r3, [pc, #616]	; (8013d8c <tcp_process+0x5b0>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013b28:	4b99      	ldr	r3, [pc, #612]	; (8013d90 <tcp_process+0x5b4>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b2c:	885b      	ldrh	r3, [r3, #2]
 8013b2e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013b30:	4a97      	ldr	r2, [pc, #604]	; (8013d90 <tcp_process+0x5b4>)
 8013b32:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b34:	8812      	ldrh	r2, [r2, #0]
 8013b36:	b292      	uxth	r2, r2
 8013b38:	9202      	str	r2, [sp, #8]
 8013b3a:	9301      	str	r3, [sp, #4]
 8013b3c:	4b95      	ldr	r3, [pc, #596]	; (8013d94 <tcp_process+0x5b8>)
 8013b3e:	9300      	str	r3, [sp, #0]
 8013b40:	4b95      	ldr	r3, [pc, #596]	; (8013d98 <tcp_process+0x5bc>)
 8013b42:	4602      	mov	r2, r0
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f003 f8db 	bl	8016d00 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013b50:	2b05      	cmp	r3, #5
 8013b52:	f200 8215 	bhi.w	8013f80 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f002 fea5 	bl	80168ac <tcp_rexmit_rto>
      break;
 8013b62:	e20d      	b.n	8013f80 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013b64:	4b86      	ldr	r3, [pc, #536]	; (8013d80 <tcp_process+0x5a4>)
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	f003 0310 	and.w	r3, r3, #16
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	f000 80a1 	beq.w	8013cb4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013b72:	4b84      	ldr	r3, [pc, #528]	; (8013d84 <tcp_process+0x5a8>)
 8013b74:	681a      	ldr	r2, [r3, #0]
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	3b01      	subs	r3, #1
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	db7e      	blt.n	8013c80 <tcp_process+0x4a4>
 8013b82:	4b80      	ldr	r3, [pc, #512]	; (8013d84 <tcp_process+0x5a8>)
 8013b84:	681a      	ldr	r2, [r3, #0]
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b8a:	1ad3      	subs	r3, r2, r3
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	dc77      	bgt.n	8013c80 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2204      	movs	r2, #4
 8013b94:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d102      	bne.n	8013ba4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013b9e:	23fa      	movs	r3, #250	; 0xfa
 8013ba0:	76bb      	strb	r3, [r7, #26]
 8013ba2:	e01d      	b.n	8013be0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ba8:	699b      	ldr	r3, [r3, #24]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d106      	bne.n	8013bbc <tcp_process+0x3e0>
 8013bae:	4b7b      	ldr	r3, [pc, #492]	; (8013d9c <tcp_process+0x5c0>)
 8013bb0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013bb4:	497a      	ldr	r1, [pc, #488]	; (8013da0 <tcp_process+0x5c4>)
 8013bb6:	487b      	ldr	r0, [pc, #492]	; (8013da4 <tcp_process+0x5c8>)
 8013bb8:	f007 f944 	bl	801ae44 <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013bc0:	699b      	ldr	r3, [r3, #24]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d00a      	beq.n	8013bdc <tcp_process+0x400>
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013bca:	699b      	ldr	r3, [r3, #24]
 8013bcc:	687a      	ldr	r2, [r7, #4]
 8013bce:	6910      	ldr	r0, [r2, #16]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	6879      	ldr	r1, [r7, #4]
 8013bd4:	4798      	blx	r3
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	76bb      	strb	r3, [r7, #26]
 8013bda:	e001      	b.n	8013be0 <tcp_process+0x404>
 8013bdc:	23f0      	movs	r3, #240	; 0xf0
 8013bde:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013be0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d00a      	beq.n	8013bfe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013be8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013bec:	f113 0f0d 	cmn.w	r3, #13
 8013bf0:	d002      	beq.n	8013bf8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f7fd fcea 	bl	80115cc <tcp_abort>
            }
            return ERR_ABRT;
 8013bf8:	f06f 030c 	mvn.w	r3, #12
 8013bfc:	e1ce      	b.n	8013f9c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f000 fae0 	bl	80141c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013c04:	4b68      	ldr	r3, [pc, #416]	; (8013da8 <tcp_process+0x5cc>)
 8013c06:	881b      	ldrh	r3, [r3, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d005      	beq.n	8013c18 <tcp_process+0x43c>
            recv_acked--;
 8013c0c:	4b66      	ldr	r3, [pc, #408]	; (8013da8 <tcp_process+0x5cc>)
 8013c0e:	881b      	ldrh	r3, [r3, #0]
 8013c10:	3b01      	subs	r3, #1
 8013c12:	b29a      	uxth	r2, r3
 8013c14:	4b64      	ldr	r3, [pc, #400]	; (8013da8 <tcp_process+0x5cc>)
 8013c16:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c1c:	009a      	lsls	r2, r3, #2
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c22:	005b      	lsls	r3, r3, #1
 8013c24:	f241 111c 	movw	r1, #4380	; 0x111c
 8013c28:	428b      	cmp	r3, r1
 8013c2a:	bf38      	it	cc
 8013c2c:	460b      	movcc	r3, r1
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d204      	bcs.n	8013c3c <tcp_process+0x460>
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c36:	009b      	lsls	r3, r3, #2
 8013c38:	b29b      	uxth	r3, r3
 8013c3a:	e00d      	b.n	8013c58 <tcp_process+0x47c>
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c40:	005b      	lsls	r3, r3, #1
 8013c42:	f241 121c 	movw	r2, #4380	; 0x111c
 8013c46:	4293      	cmp	r3, r2
 8013c48:	d904      	bls.n	8013c54 <tcp_process+0x478>
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c4e:	005b      	lsls	r3, r3, #1
 8013c50:	b29b      	uxth	r3, r3
 8013c52:	e001      	b.n	8013c58 <tcp_process+0x47c>
 8013c54:	f241 131c 	movw	r3, #4380	; 0x111c
 8013c58:	687a      	ldr	r2, [r7, #4]
 8013c5a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013c5e:	4b53      	ldr	r3, [pc, #332]	; (8013dac <tcp_process+0x5d0>)
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	f003 0320 	and.w	r3, r3, #32
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d037      	beq.n	8013cda <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	8b5b      	ldrh	r3, [r3, #26]
 8013c6e:	f043 0302 	orr.w	r3, r3, #2
 8013c72:	b29a      	uxth	r2, r3
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2207      	movs	r2, #7
 8013c7c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013c7e:	e02c      	b.n	8013cda <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c80:	4b40      	ldr	r3, [pc, #256]	; (8013d84 <tcp_process+0x5a8>)
 8013c82:	6819      	ldr	r1, [r3, #0]
 8013c84:	4b40      	ldr	r3, [pc, #256]	; (8013d88 <tcp_process+0x5ac>)
 8013c86:	881b      	ldrh	r3, [r3, #0]
 8013c88:	461a      	mov	r2, r3
 8013c8a:	4b40      	ldr	r3, [pc, #256]	; (8013d8c <tcp_process+0x5b0>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c90:	4b3f      	ldr	r3, [pc, #252]	; (8013d90 <tcp_process+0x5b4>)
 8013c92:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c94:	885b      	ldrh	r3, [r3, #2]
 8013c96:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c98:	4a3d      	ldr	r2, [pc, #244]	; (8013d90 <tcp_process+0x5b4>)
 8013c9a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c9c:	8812      	ldrh	r2, [r2, #0]
 8013c9e:	b292      	uxth	r2, r2
 8013ca0:	9202      	str	r2, [sp, #8]
 8013ca2:	9301      	str	r3, [sp, #4]
 8013ca4:	4b3b      	ldr	r3, [pc, #236]	; (8013d94 <tcp_process+0x5b8>)
 8013ca6:	9300      	str	r3, [sp, #0]
 8013ca8:	4b3b      	ldr	r3, [pc, #236]	; (8013d98 <tcp_process+0x5bc>)
 8013caa:	4602      	mov	r2, r0
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f003 f827 	bl	8016d00 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013cb2:	e167      	b.n	8013f84 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013cb4:	4b32      	ldr	r3, [pc, #200]	; (8013d80 <tcp_process+0x5a4>)
 8013cb6:	781b      	ldrb	r3, [r3, #0]
 8013cb8:	f003 0302 	and.w	r3, r3, #2
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	f000 8161 	beq.w	8013f84 <tcp_process+0x7a8>
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cc6:	1e5a      	subs	r2, r3, #1
 8013cc8:	4b30      	ldr	r3, [pc, #192]	; (8013d8c <tcp_process+0x5b0>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	f040 8159 	bne.w	8013f84 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f002 fe0c 	bl	80168f0 <tcp_rexmit>
      break;
 8013cd8:	e154      	b.n	8013f84 <tcp_process+0x7a8>
 8013cda:	e153      	b.n	8013f84 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f000 fa71 	bl	80141c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013ce2:	4b32      	ldr	r3, [pc, #200]	; (8013dac <tcp_process+0x5d0>)
 8013ce4:	781b      	ldrb	r3, [r3, #0]
 8013ce6:	f003 0320 	and.w	r3, r3, #32
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	f000 814c 	beq.w	8013f88 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	8b5b      	ldrh	r3, [r3, #26]
 8013cf4:	f043 0302 	orr.w	r3, r3, #2
 8013cf8:	b29a      	uxth	r2, r3
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2207      	movs	r2, #7
 8013d02:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013d04:	e140      	b.n	8013f88 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f000 fa5c 	bl	80141c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013d0c:	4b27      	ldr	r3, [pc, #156]	; (8013dac <tcp_process+0x5d0>)
 8013d0e:	781b      	ldrb	r3, [r3, #0]
 8013d10:	f003 0320 	and.w	r3, r3, #32
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d071      	beq.n	8013dfc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013d18:	4b19      	ldr	r3, [pc, #100]	; (8013d80 <tcp_process+0x5a4>)
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	f003 0310 	and.w	r3, r3, #16
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d060      	beq.n	8013de6 <tcp_process+0x60a>
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d28:	4b16      	ldr	r3, [pc, #88]	; (8013d84 <tcp_process+0x5a8>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d15a      	bne.n	8013de6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d156      	bne.n	8013de6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	8b5b      	ldrh	r3, [r3, #26]
 8013d3c:	f043 0302 	orr.w	r3, r3, #2
 8013d40:	b29a      	uxth	r2, r3
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	f7fe fdbe 	bl	80128c8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013d4c:	4b18      	ldr	r3, [pc, #96]	; (8013db0 <tcp_process+0x5d4>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	687a      	ldr	r2, [r7, #4]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d105      	bne.n	8013d62 <tcp_process+0x586>
 8013d56:	4b16      	ldr	r3, [pc, #88]	; (8013db0 <tcp_process+0x5d4>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	4a14      	ldr	r2, [pc, #80]	; (8013db0 <tcp_process+0x5d4>)
 8013d5e:	6013      	str	r3, [r2, #0]
 8013d60:	e02e      	b.n	8013dc0 <tcp_process+0x5e4>
 8013d62:	4b13      	ldr	r3, [pc, #76]	; (8013db0 <tcp_process+0x5d4>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	617b      	str	r3, [r7, #20]
 8013d68:	e027      	b.n	8013dba <tcp_process+0x5de>
 8013d6a:	697b      	ldr	r3, [r7, #20]
 8013d6c:	68db      	ldr	r3, [r3, #12]
 8013d6e:	687a      	ldr	r2, [r7, #4]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d11f      	bne.n	8013db4 <tcp_process+0x5d8>
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	68da      	ldr	r2, [r3, #12]
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	60da      	str	r2, [r3, #12]
 8013d7c:	e020      	b.n	8013dc0 <tcp_process+0x5e4>
 8013d7e:	bf00      	nop
 8013d80:	20004f24 	.word	0x20004f24
 8013d84:	20004f1c 	.word	0x20004f1c
 8013d88:	20004f22 	.word	0x20004f22
 8013d8c:	20004f18 	.word	0x20004f18
 8013d90:	20004f08 	.word	0x20004f08
 8013d94:	20008710 	.word	0x20008710
 8013d98:	20008714 	.word	0x20008714
 8013d9c:	08025d40 	.word	0x08025d40
 8013da0:	08025fe0 	.word	0x08025fe0
 8013da4:	08025d8c 	.word	0x08025d8c
 8013da8:	20004f20 	.word	0x20004f20
 8013dac:	20004f25 	.word	0x20004f25
 8013db0:	2000be14 	.word	0x2000be14
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	68db      	ldr	r3, [r3, #12]
 8013db8:	617b      	str	r3, [r7, #20]
 8013dba:	697b      	ldr	r3, [r7, #20]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d1d4      	bne.n	8013d6a <tcp_process+0x58e>
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	60da      	str	r2, [r3, #12]
 8013dc6:	4b77      	ldr	r3, [pc, #476]	; (8013fa4 <tcp_process+0x7c8>)
 8013dc8:	2201      	movs	r2, #1
 8013dca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	220a      	movs	r2, #10
 8013dd0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013dd2:	4b75      	ldr	r3, [pc, #468]	; (8013fa8 <tcp_process+0x7cc>)
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	60da      	str	r2, [r3, #12]
 8013dda:	4a73      	ldr	r2, [pc, #460]	; (8013fa8 <tcp_process+0x7cc>)
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6013      	str	r3, [r2, #0]
 8013de0:	f003 f950 	bl	8017084 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013de4:	e0d2      	b.n	8013f8c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	8b5b      	ldrh	r3, [r3, #26]
 8013dea:	f043 0302 	orr.w	r3, r3, #2
 8013dee:	b29a      	uxth	r2, r3
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	2208      	movs	r2, #8
 8013df8:	751a      	strb	r2, [r3, #20]
      break;
 8013dfa:	e0c7      	b.n	8013f8c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013dfc:	4b6b      	ldr	r3, [pc, #428]	; (8013fac <tcp_process+0x7d0>)
 8013dfe:	781b      	ldrb	r3, [r3, #0]
 8013e00:	f003 0310 	and.w	r3, r3, #16
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	f000 80c1 	beq.w	8013f8c <tcp_process+0x7b0>
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013e0e:	4b68      	ldr	r3, [pc, #416]	; (8013fb0 <tcp_process+0x7d4>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	429a      	cmp	r2, r3
 8013e14:	f040 80ba 	bne.w	8013f8c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	f040 80b5 	bne.w	8013f8c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2206      	movs	r2, #6
 8013e26:	751a      	strb	r2, [r3, #20]
      break;
 8013e28:	e0b0      	b.n	8013f8c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013e2a:	6878      	ldr	r0, [r7, #4]
 8013e2c:	f000 f9ca 	bl	80141c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013e30:	4b60      	ldr	r3, [pc, #384]	; (8013fb4 <tcp_process+0x7d8>)
 8013e32:	781b      	ldrb	r3, [r3, #0]
 8013e34:	f003 0320 	and.w	r3, r3, #32
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	f000 80a9 	beq.w	8013f90 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	8b5b      	ldrh	r3, [r3, #26]
 8013e42:	f043 0302 	orr.w	r3, r3, #2
 8013e46:	b29a      	uxth	r2, r3
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f7fe fd3b 	bl	80128c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013e52:	4b59      	ldr	r3, [pc, #356]	; (8013fb8 <tcp_process+0x7dc>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	687a      	ldr	r2, [r7, #4]
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d105      	bne.n	8013e68 <tcp_process+0x68c>
 8013e5c:	4b56      	ldr	r3, [pc, #344]	; (8013fb8 <tcp_process+0x7dc>)
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	68db      	ldr	r3, [r3, #12]
 8013e62:	4a55      	ldr	r2, [pc, #340]	; (8013fb8 <tcp_process+0x7dc>)
 8013e64:	6013      	str	r3, [r2, #0]
 8013e66:	e013      	b.n	8013e90 <tcp_process+0x6b4>
 8013e68:	4b53      	ldr	r3, [pc, #332]	; (8013fb8 <tcp_process+0x7dc>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	613b      	str	r3, [r7, #16]
 8013e6e:	e00c      	b.n	8013e8a <tcp_process+0x6ae>
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	68db      	ldr	r3, [r3, #12]
 8013e74:	687a      	ldr	r2, [r7, #4]
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d104      	bne.n	8013e84 <tcp_process+0x6a8>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	68da      	ldr	r2, [r3, #12]
 8013e7e:	693b      	ldr	r3, [r7, #16]
 8013e80:	60da      	str	r2, [r3, #12]
 8013e82:	e005      	b.n	8013e90 <tcp_process+0x6b4>
 8013e84:	693b      	ldr	r3, [r7, #16]
 8013e86:	68db      	ldr	r3, [r3, #12]
 8013e88:	613b      	str	r3, [r7, #16]
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d1ef      	bne.n	8013e70 <tcp_process+0x694>
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2200      	movs	r2, #0
 8013e94:	60da      	str	r2, [r3, #12]
 8013e96:	4b43      	ldr	r3, [pc, #268]	; (8013fa4 <tcp_process+0x7c8>)
 8013e98:	2201      	movs	r2, #1
 8013e9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	220a      	movs	r2, #10
 8013ea0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013ea2:	4b41      	ldr	r3, [pc, #260]	; (8013fa8 <tcp_process+0x7cc>)
 8013ea4:	681a      	ldr	r2, [r3, #0]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	60da      	str	r2, [r3, #12]
 8013eaa:	4a3f      	ldr	r2, [pc, #252]	; (8013fa8 <tcp_process+0x7cc>)
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	6013      	str	r3, [r2, #0]
 8013eb0:	f003 f8e8 	bl	8017084 <tcp_timer_needed>
      }
      break;
 8013eb4:	e06c      	b.n	8013f90 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013eb6:	6878      	ldr	r0, [r7, #4]
 8013eb8:	f000 f984 	bl	80141c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013ebc:	4b3b      	ldr	r3, [pc, #236]	; (8013fac <tcp_process+0x7d0>)
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	f003 0310 	and.w	r3, r3, #16
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d065      	beq.n	8013f94 <tcp_process+0x7b8>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ecc:	4b38      	ldr	r3, [pc, #224]	; (8013fb0 <tcp_process+0x7d4>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d15f      	bne.n	8013f94 <tcp_process+0x7b8>
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d15b      	bne.n	8013f94 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f7fe fcf3 	bl	80128c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013ee2:	4b35      	ldr	r3, [pc, #212]	; (8013fb8 <tcp_process+0x7dc>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	687a      	ldr	r2, [r7, #4]
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	d105      	bne.n	8013ef8 <tcp_process+0x71c>
 8013eec:	4b32      	ldr	r3, [pc, #200]	; (8013fb8 <tcp_process+0x7dc>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	68db      	ldr	r3, [r3, #12]
 8013ef2:	4a31      	ldr	r2, [pc, #196]	; (8013fb8 <tcp_process+0x7dc>)
 8013ef4:	6013      	str	r3, [r2, #0]
 8013ef6:	e013      	b.n	8013f20 <tcp_process+0x744>
 8013ef8:	4b2f      	ldr	r3, [pc, #188]	; (8013fb8 <tcp_process+0x7dc>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	60fb      	str	r3, [r7, #12]
 8013efe:	e00c      	b.n	8013f1a <tcp_process+0x73e>
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	687a      	ldr	r2, [r7, #4]
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d104      	bne.n	8013f14 <tcp_process+0x738>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	68da      	ldr	r2, [r3, #12]
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	60da      	str	r2, [r3, #12]
 8013f12:	e005      	b.n	8013f20 <tcp_process+0x744>
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	60fb      	str	r3, [r7, #12]
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d1ef      	bne.n	8013f00 <tcp_process+0x724>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2200      	movs	r2, #0
 8013f24:	60da      	str	r2, [r3, #12]
 8013f26:	4b1f      	ldr	r3, [pc, #124]	; (8013fa4 <tcp_process+0x7c8>)
 8013f28:	2201      	movs	r2, #1
 8013f2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	220a      	movs	r2, #10
 8013f30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013f32:	4b1d      	ldr	r3, [pc, #116]	; (8013fa8 <tcp_process+0x7cc>)
 8013f34:	681a      	ldr	r2, [r3, #0]
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	60da      	str	r2, [r3, #12]
 8013f3a:	4a1b      	ldr	r2, [pc, #108]	; (8013fa8 <tcp_process+0x7cc>)
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	6013      	str	r3, [r2, #0]
 8013f40:	f003 f8a0 	bl	8017084 <tcp_timer_needed>
      }
      break;
 8013f44:	e026      	b.n	8013f94 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f000 f93c 	bl	80141c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013f4c:	4b17      	ldr	r3, [pc, #92]	; (8013fac <tcp_process+0x7d0>)
 8013f4e:	781b      	ldrb	r3, [r3, #0]
 8013f50:	f003 0310 	and.w	r3, r3, #16
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d01f      	beq.n	8013f98 <tcp_process+0x7bc>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013f5c:	4b14      	ldr	r3, [pc, #80]	; (8013fb0 <tcp_process+0x7d4>)
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d119      	bne.n	8013f98 <tcp_process+0x7bc>
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d115      	bne.n	8013f98 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013f6c:	4b11      	ldr	r3, [pc, #68]	; (8013fb4 <tcp_process+0x7d8>)
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	f043 0310 	orr.w	r3, r3, #16
 8013f74:	b2da      	uxtb	r2, r3
 8013f76:	4b0f      	ldr	r3, [pc, #60]	; (8013fb4 <tcp_process+0x7d8>)
 8013f78:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013f7a:	e00d      	b.n	8013f98 <tcp_process+0x7bc>
    default:
      break;
 8013f7c:	bf00      	nop
 8013f7e:	e00c      	b.n	8013f9a <tcp_process+0x7be>
      break;
 8013f80:	bf00      	nop
 8013f82:	e00a      	b.n	8013f9a <tcp_process+0x7be>
      break;
 8013f84:	bf00      	nop
 8013f86:	e008      	b.n	8013f9a <tcp_process+0x7be>
      break;
 8013f88:	bf00      	nop
 8013f8a:	e006      	b.n	8013f9a <tcp_process+0x7be>
      break;
 8013f8c:	bf00      	nop
 8013f8e:	e004      	b.n	8013f9a <tcp_process+0x7be>
      break;
 8013f90:	bf00      	nop
 8013f92:	e002      	b.n	8013f9a <tcp_process+0x7be>
      break;
 8013f94:	bf00      	nop
 8013f96:	e000      	b.n	8013f9a <tcp_process+0x7be>
      break;
 8013f98:	bf00      	nop
  }
  return ERR_OK;
 8013f9a:	2300      	movs	r3, #0
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	3724      	adds	r7, #36	; 0x24
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd90      	pop	{r4, r7, pc}
 8013fa4:	2000be10 	.word	0x2000be10
 8013fa8:	2000be24 	.word	0x2000be24
 8013fac:	20004f24 	.word	0x20004f24
 8013fb0:	20004f1c 	.word	0x20004f1c
 8013fb4:	20004f25 	.word	0x20004f25
 8013fb8:	2000be14 	.word	0x2000be14

08013fbc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013fbc:	b590      	push	{r4, r7, lr}
 8013fbe:	b085      	sub	sp, #20
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d106      	bne.n	8013fda <tcp_oos_insert_segment+0x1e>
 8013fcc:	4b3b      	ldr	r3, [pc, #236]	; (80140bc <tcp_oos_insert_segment+0x100>)
 8013fce:	f240 421f 	movw	r2, #1055	; 0x41f
 8013fd2:	493b      	ldr	r1, [pc, #236]	; (80140c0 <tcp_oos_insert_segment+0x104>)
 8013fd4:	483b      	ldr	r0, [pc, #236]	; (80140c4 <tcp_oos_insert_segment+0x108>)
 8013fd6:	f006 ff35 	bl	801ae44 <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	68db      	ldr	r3, [r3, #12]
 8013fde:	899b      	ldrh	r3, [r3, #12]
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7fb f988 	bl	800f2f8 <lwip_htons>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	b2db      	uxtb	r3, r3
 8013fec:	f003 0301 	and.w	r3, r3, #1
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d028      	beq.n	8014046 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013ff4:	6838      	ldr	r0, [r7, #0]
 8013ff6:	f7fe f979 	bl	80122ec <tcp_segs_free>
    next = NULL;
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	603b      	str	r3, [r7, #0]
 8013ffe:	e056      	b.n	80140ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	68db      	ldr	r3, [r3, #12]
 8014004:	899b      	ldrh	r3, [r3, #12]
 8014006:	b29b      	uxth	r3, r3
 8014008:	4618      	mov	r0, r3
 801400a:	f7fb f975 	bl	800f2f8 <lwip_htons>
 801400e:	4603      	mov	r3, r0
 8014010:	b2db      	uxtb	r3, r3
 8014012:	f003 0301 	and.w	r3, r3, #1
 8014016:	2b00      	cmp	r3, #0
 8014018:	d00d      	beq.n	8014036 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	68db      	ldr	r3, [r3, #12]
 801401e:	899b      	ldrh	r3, [r3, #12]
 8014020:	b29c      	uxth	r4, r3
 8014022:	2001      	movs	r0, #1
 8014024:	f7fb f968 	bl	800f2f8 <lwip_htons>
 8014028:	4603      	mov	r3, r0
 801402a:	461a      	mov	r2, r3
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	68db      	ldr	r3, [r3, #12]
 8014030:	4322      	orrs	r2, r4
 8014032:	b292      	uxth	r2, r2
 8014034:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014040:	68f8      	ldr	r0, [r7, #12]
 8014042:	f7fe f968 	bl	8012316 <tcp_seg_free>
    while (next &&
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d00e      	beq.n	801406a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	891b      	ldrh	r3, [r3, #8]
 8014050:	461a      	mov	r2, r3
 8014052:	4b1d      	ldr	r3, [pc, #116]	; (80140c8 <tcp_oos_insert_segment+0x10c>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	441a      	add	r2, r3
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	6839      	ldr	r1, [r7, #0]
 8014060:	8909      	ldrh	r1, [r1, #8]
 8014062:	440b      	add	r3, r1
 8014064:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014066:	2b00      	cmp	r3, #0
 8014068:	daca      	bge.n	8014000 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d01e      	beq.n	80140ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	891b      	ldrh	r3, [r3, #8]
 8014074:	461a      	mov	r2, r3
 8014076:	4b14      	ldr	r3, [pc, #80]	; (80140c8 <tcp_oos_insert_segment+0x10c>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	441a      	add	r2, r3
 801407c:	683b      	ldr	r3, [r7, #0]
 801407e:	68db      	ldr	r3, [r3, #12]
 8014080:	685b      	ldr	r3, [r3, #4]
 8014082:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014084:	2b00      	cmp	r3, #0
 8014086:	dd12      	ble.n	80140ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	68db      	ldr	r3, [r3, #12]
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	b29a      	uxth	r2, r3
 8014090:	4b0d      	ldr	r3, [pc, #52]	; (80140c8 <tcp_oos_insert_segment+0x10c>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	b29b      	uxth	r3, r3
 8014096:	1ad3      	subs	r3, r2, r3
 8014098:	b29a      	uxth	r2, r3
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	685a      	ldr	r2, [r3, #4]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	891b      	ldrh	r3, [r3, #8]
 80140a6:	4619      	mov	r1, r3
 80140a8:	4610      	mov	r0, r2
 80140aa:	f7fc fb09 	bl	80106c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	683a      	ldr	r2, [r7, #0]
 80140b2:	601a      	str	r2, [r3, #0]
}
 80140b4:	bf00      	nop
 80140b6:	3714      	adds	r7, #20
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd90      	pop	{r4, r7, pc}
 80140bc:	08025d40 	.word	0x08025d40
 80140c0:	08026000 	.word	0x08026000
 80140c4:	08025d8c 	.word	0x08025d8c
 80140c8:	20004f18 	.word	0x20004f18

080140cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80140cc:	b5b0      	push	{r4, r5, r7, lr}
 80140ce:	b086      	sub	sp, #24
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	60f8      	str	r0, [r7, #12]
 80140d4:	60b9      	str	r1, [r7, #8]
 80140d6:	607a      	str	r2, [r7, #4]
 80140d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80140da:	e03e      	b.n	801415a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7fc fcfc 	bl	8010ae8 <pbuf_clen>
 80140f0:	4603      	mov	r3, r0
 80140f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140fa:	8a7a      	ldrh	r2, [r7, #18]
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d906      	bls.n	801410e <tcp_free_acked_segments+0x42>
 8014100:	4b2a      	ldr	r3, [pc, #168]	; (80141ac <tcp_free_acked_segments+0xe0>)
 8014102:	f240 4257 	movw	r2, #1111	; 0x457
 8014106:	492a      	ldr	r1, [pc, #168]	; (80141b0 <tcp_free_acked_segments+0xe4>)
 8014108:	482a      	ldr	r0, [pc, #168]	; (80141b4 <tcp_free_acked_segments+0xe8>)
 801410a:	f006 fe9b 	bl	801ae44 <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014114:	8a7b      	ldrh	r3, [r7, #18]
 8014116:	1ad3      	subs	r3, r2, r3
 8014118:	b29a      	uxth	r2, r3
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	891a      	ldrh	r2, [r3, #8]
 8014124:	4b24      	ldr	r3, [pc, #144]	; (80141b8 <tcp_free_acked_segments+0xec>)
 8014126:	881b      	ldrh	r3, [r3, #0]
 8014128:	4413      	add	r3, r2
 801412a:	b29a      	uxth	r2, r3
 801412c:	4b22      	ldr	r3, [pc, #136]	; (80141b8 <tcp_free_acked_segments+0xec>)
 801412e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014130:	6978      	ldr	r0, [r7, #20]
 8014132:	f7fe f8f0 	bl	8012316 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801413c:	2b00      	cmp	r3, #0
 801413e:	d00c      	beq.n	801415a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d109      	bne.n	801415a <tcp_free_acked_segments+0x8e>
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d106      	bne.n	801415a <tcp_free_acked_segments+0x8e>
 801414c:	4b17      	ldr	r3, [pc, #92]	; (80141ac <tcp_free_acked_segments+0xe0>)
 801414e:	f240 4261 	movw	r2, #1121	; 0x461
 8014152:	491a      	ldr	r1, [pc, #104]	; (80141bc <tcp_free_acked_segments+0xf0>)
 8014154:	4817      	ldr	r0, [pc, #92]	; (80141b4 <tcp_free_acked_segments+0xe8>)
 8014156:	f006 fe75 	bl	801ae44 <printf>
  while (seg_list != NULL &&
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d020      	beq.n	80141a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	68db      	ldr	r3, [r3, #12]
 8014164:	685b      	ldr	r3, [r3, #4]
 8014166:	4618      	mov	r0, r3
 8014168:	f7fb f8db 	bl	800f322 <lwip_htonl>
 801416c:	4604      	mov	r4, r0
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	891b      	ldrh	r3, [r3, #8]
 8014172:	461d      	mov	r5, r3
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	68db      	ldr	r3, [r3, #12]
 8014178:	899b      	ldrh	r3, [r3, #12]
 801417a:	b29b      	uxth	r3, r3
 801417c:	4618      	mov	r0, r3
 801417e:	f7fb f8bb 	bl	800f2f8 <lwip_htons>
 8014182:	4603      	mov	r3, r0
 8014184:	b2db      	uxtb	r3, r3
 8014186:	f003 0303 	and.w	r3, r3, #3
 801418a:	2b00      	cmp	r3, #0
 801418c:	d001      	beq.n	8014192 <tcp_free_acked_segments+0xc6>
 801418e:	2301      	movs	r3, #1
 8014190:	e000      	b.n	8014194 <tcp_free_acked_segments+0xc8>
 8014192:	2300      	movs	r3, #0
 8014194:	442b      	add	r3, r5
 8014196:	18e2      	adds	r2, r4, r3
 8014198:	4b09      	ldr	r3, [pc, #36]	; (80141c0 <tcp_free_acked_segments+0xf4>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801419e:	2b00      	cmp	r3, #0
 80141a0:	dd9c      	ble.n	80140dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80141a2:	68bb      	ldr	r3, [r7, #8]
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3718      	adds	r7, #24
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bdb0      	pop	{r4, r5, r7, pc}
 80141ac:	08025d40 	.word	0x08025d40
 80141b0:	08026028 	.word	0x08026028
 80141b4:	08025d8c 	.word	0x08025d8c
 80141b8:	20004f20 	.word	0x20004f20
 80141bc:	08026050 	.word	0x08026050
 80141c0:	20004f1c 	.word	0x20004f1c

080141c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80141c4:	b5b0      	push	{r4, r5, r7, lr}
 80141c6:	b094      	sub	sp, #80	; 0x50
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80141cc:	2300      	movs	r3, #0
 80141ce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d106      	bne.n	80141e4 <tcp_receive+0x20>
 80141d6:	4ba6      	ldr	r3, [pc, #664]	; (8014470 <tcp_receive+0x2ac>)
 80141d8:	f240 427b 	movw	r2, #1147	; 0x47b
 80141dc:	49a5      	ldr	r1, [pc, #660]	; (8014474 <tcp_receive+0x2b0>)
 80141de:	48a6      	ldr	r0, [pc, #664]	; (8014478 <tcp_receive+0x2b4>)
 80141e0:	f006 fe30 	bl	801ae44 <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	7d1b      	ldrb	r3, [r3, #20]
 80141e8:	2b03      	cmp	r3, #3
 80141ea:	d806      	bhi.n	80141fa <tcp_receive+0x36>
 80141ec:	4ba0      	ldr	r3, [pc, #640]	; (8014470 <tcp_receive+0x2ac>)
 80141ee:	f240 427c 	movw	r2, #1148	; 0x47c
 80141f2:	49a2      	ldr	r1, [pc, #648]	; (801447c <tcp_receive+0x2b8>)
 80141f4:	48a0      	ldr	r0, [pc, #640]	; (8014478 <tcp_receive+0x2b4>)
 80141f6:	f006 fe25 	bl	801ae44 <printf>

  if (flags & TCP_ACK) {
 80141fa:	4ba1      	ldr	r3, [pc, #644]	; (8014480 <tcp_receive+0x2bc>)
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	f003 0310 	and.w	r3, r3, #16
 8014202:	2b00      	cmp	r3, #0
 8014204:	f000 8263 	beq.w	80146ce <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801420e:	461a      	mov	r2, r3
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014214:	4413      	add	r3, r2
 8014216:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801421c:	4b99      	ldr	r3, [pc, #612]	; (8014484 <tcp_receive+0x2c0>)
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	1ad3      	subs	r3, r2, r3
 8014222:	2b00      	cmp	r3, #0
 8014224:	db1b      	blt.n	801425e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801422a:	4b96      	ldr	r3, [pc, #600]	; (8014484 <tcp_receive+0x2c0>)
 801422c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801422e:	429a      	cmp	r2, r3
 8014230:	d106      	bne.n	8014240 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014236:	4b94      	ldr	r3, [pc, #592]	; (8014488 <tcp_receive+0x2c4>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	1ad3      	subs	r3, r2, r3
 801423c:	2b00      	cmp	r3, #0
 801423e:	db0e      	blt.n	801425e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014244:	4b90      	ldr	r3, [pc, #576]	; (8014488 <tcp_receive+0x2c4>)
 8014246:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014248:	429a      	cmp	r2, r3
 801424a:	d125      	bne.n	8014298 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801424c:	4b8f      	ldr	r3, [pc, #572]	; (801448c <tcp_receive+0x2c8>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	89db      	ldrh	r3, [r3, #14]
 8014252:	b29a      	uxth	r2, r3
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801425a:	429a      	cmp	r2, r3
 801425c:	d91c      	bls.n	8014298 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801425e:	4b8b      	ldr	r3, [pc, #556]	; (801448c <tcp_receive+0x2c8>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	89db      	ldrh	r3, [r3, #14]
 8014264:	b29a      	uxth	r2, r3
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014278:	429a      	cmp	r2, r3
 801427a:	d205      	bcs.n	8014288 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014288:	4b7e      	ldr	r3, [pc, #504]	; (8014484 <tcp_receive+0x2c0>)
 801428a:	681a      	ldr	r2, [r3, #0]
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014290:	4b7d      	ldr	r3, [pc, #500]	; (8014488 <tcp_receive+0x2c4>)
 8014292:	681a      	ldr	r2, [r3, #0]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014298:	4b7b      	ldr	r3, [pc, #492]	; (8014488 <tcp_receive+0x2c4>)
 801429a:	681a      	ldr	r2, [r3, #0]
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142a0:	1ad3      	subs	r3, r2, r3
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	dc58      	bgt.n	8014358 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80142a6:	4b7a      	ldr	r3, [pc, #488]	; (8014490 <tcp_receive+0x2cc>)
 80142a8:	881b      	ldrh	r3, [r3, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d14b      	bne.n	8014346 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80142b8:	4413      	add	r3, r2
 80142ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142bc:	429a      	cmp	r2, r3
 80142be:	d142      	bne.n	8014346 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	db3d      	blt.n	8014346 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80142ce:	4b6e      	ldr	r3, [pc, #440]	; (8014488 <tcp_receive+0x2c4>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	429a      	cmp	r2, r3
 80142d4:	d137      	bne.n	8014346 <tcp_receive+0x182>
              found_dupack = 1;
 80142d6:	2301      	movs	r3, #1
 80142d8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80142e0:	2bff      	cmp	r3, #255	; 0xff
 80142e2:	d007      	beq.n	80142f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80142ea:	3301      	adds	r3, #1
 80142ec:	b2da      	uxtb	r2, r3
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80142fa:	2b03      	cmp	r3, #3
 80142fc:	d91b      	bls.n	8014336 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014308:	4413      	add	r3, r2
 801430a:	b29a      	uxth	r2, r3
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014312:	429a      	cmp	r2, r3
 8014314:	d30a      	bcc.n	801432c <tcp_receive+0x168>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014320:	4413      	add	r3, r2
 8014322:	b29a      	uxth	r2, r3
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801432a:	e004      	b.n	8014336 <tcp_receive+0x172>
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014332:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801433c:	2b02      	cmp	r3, #2
 801433e:	d902      	bls.n	8014346 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f002 fb41 	bl	80169c8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014348:	2b00      	cmp	r3, #0
 801434a:	f040 8160 	bne.w	801460e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2200      	movs	r2, #0
 8014352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014356:	e15a      	b.n	801460e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014358:	4b4b      	ldr	r3, [pc, #300]	; (8014488 <tcp_receive+0x2c4>)
 801435a:	681a      	ldr	r2, [r3, #0]
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014360:	1ad3      	subs	r3, r2, r3
 8014362:	3b01      	subs	r3, #1
 8014364:	2b00      	cmp	r3, #0
 8014366:	f2c0 814d 	blt.w	8014604 <tcp_receive+0x440>
 801436a:	4b47      	ldr	r3, [pc, #284]	; (8014488 <tcp_receive+0x2c4>)
 801436c:	681a      	ldr	r2, [r3, #0]
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014372:	1ad3      	subs	r3, r2, r3
 8014374:	2b00      	cmp	r3, #0
 8014376:	f300 8145 	bgt.w	8014604 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	8b5b      	ldrh	r3, [r3, #26]
 801437e:	f003 0304 	and.w	r3, r3, #4
 8014382:	2b00      	cmp	r3, #0
 8014384:	d010      	beq.n	80143a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	8b5b      	ldrh	r3, [r3, #26]
 801438a:	f023 0304 	bic.w	r3, r3, #4
 801438e:	b29a      	uxth	r2, r3
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2200      	movs	r2, #0
 80143a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2200      	movs	r2, #0
 80143ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80143b6:	10db      	asrs	r3, r3, #3
 80143b8:	b21b      	sxth	r3, r3
 80143ba:	b29a      	uxth	r2, r3
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	4413      	add	r3, r2
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	b21a      	sxth	r2, r3
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80143d0:	4b2d      	ldr	r3, [pc, #180]	; (8014488 <tcp_receive+0x2c4>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	b29a      	uxth	r2, r3
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143da:	b29b      	uxth	r3, r3
 80143dc:	1ad3      	subs	r3, r2, r3
 80143de:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2200      	movs	r2, #0
 80143e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80143e8:	4b27      	ldr	r3, [pc, #156]	; (8014488 <tcp_receive+0x2c4>)
 80143ea:	681a      	ldr	r2, [r3, #0]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	7d1b      	ldrb	r3, [r3, #20]
 80143f4:	2b03      	cmp	r3, #3
 80143f6:	f240 8096 	bls.w	8014526 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014406:	429a      	cmp	r2, r3
 8014408:	d244      	bcs.n	8014494 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	8b5b      	ldrh	r3, [r3, #26]
 801440e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014412:	2b00      	cmp	r3, #0
 8014414:	d001      	beq.n	801441a <tcp_receive+0x256>
 8014416:	2301      	movs	r3, #1
 8014418:	e000      	b.n	801441c <tcp_receive+0x258>
 801441a:	2302      	movs	r3, #2
 801441c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014420:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014424:	b29a      	uxth	r2, r3
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801442a:	fb12 f303 	smulbb	r3, r2, r3
 801442e:	b29b      	uxth	r3, r3
 8014430:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014432:	4293      	cmp	r3, r2
 8014434:	bf28      	it	cs
 8014436:	4613      	movcs	r3, r2
 8014438:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014440:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014442:	4413      	add	r3, r2
 8014444:	b29a      	uxth	r2, r3
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801444c:	429a      	cmp	r2, r3
 801444e:	d309      	bcc.n	8014464 <tcp_receive+0x2a0>
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014456:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014458:	4413      	add	r3, r2
 801445a:	b29a      	uxth	r2, r3
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014462:	e060      	b.n	8014526 <tcp_receive+0x362>
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801446a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801446e:	e05a      	b.n	8014526 <tcp_receive+0x362>
 8014470:	08025d40 	.word	0x08025d40
 8014474:	08026070 	.word	0x08026070
 8014478:	08025d8c 	.word	0x08025d8c
 801447c:	0802608c 	.word	0x0802608c
 8014480:	20004f24 	.word	0x20004f24
 8014484:	20004f18 	.word	0x20004f18
 8014488:	20004f1c 	.word	0x20004f1c
 801448c:	20004f08 	.word	0x20004f08
 8014490:	20004f22 	.word	0x20004f22
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801449a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801449c:	4413      	add	r3, r2
 801449e:	b29a      	uxth	r2, r3
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d309      	bcc.n	80144be <tcp_receive+0x2fa>
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80144b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80144b2:	4413      	add	r3, r2
 80144b4:	b29a      	uxth	r2, r3
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80144bc:	e004      	b.n	80144c8 <tcp_receive+0x304>
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80144c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80144d4:	429a      	cmp	r2, r3
 80144d6:	d326      	bcc.n	8014526 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80144e4:	1ad3      	subs	r3, r2, r3
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144f8:	4413      	add	r3, r2
 80144fa:	b29a      	uxth	r2, r3
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014502:	429a      	cmp	r2, r3
 8014504:	d30a      	bcc.n	801451c <tcp_receive+0x358>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014510:	4413      	add	r3, r2
 8014512:	b29a      	uxth	r2, r3
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801451a:	e004      	b.n	8014526 <tcp_receive+0x362>
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014522:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801452e:	4a98      	ldr	r2, [pc, #608]	; (8014790 <tcp_receive+0x5cc>)
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f7ff fdcb 	bl	80140cc <tcp_free_acked_segments>
 8014536:	4602      	mov	r2, r0
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014544:	4a93      	ldr	r2, [pc, #588]	; (8014794 <tcp_receive+0x5d0>)
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f7ff fdc0 	bl	80140cc <tcp_free_acked_segments>
 801454c:	4602      	mov	r2, r0
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014556:	2b00      	cmp	r3, #0
 8014558:	d104      	bne.n	8014564 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014560:	861a      	strh	r2, [r3, #48]	; 0x30
 8014562:	e002      	b.n	801456a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2200      	movs	r2, #0
 8014568:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	2200      	movs	r2, #0
 801456e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014574:	2b00      	cmp	r3, #0
 8014576:	d103      	bne.n	8014580 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2200      	movs	r2, #0
 801457c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014586:	4b84      	ldr	r3, [pc, #528]	; (8014798 <tcp_receive+0x5d4>)
 8014588:	881b      	ldrh	r3, [r3, #0]
 801458a:	4413      	add	r3, r2
 801458c:	b29a      	uxth	r2, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	8b5b      	ldrh	r3, [r3, #26]
 8014598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801459c:	2b00      	cmp	r3, #0
 801459e:	d035      	beq.n	801460c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d118      	bne.n	80145da <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d00c      	beq.n	80145ca <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145b8:	68db      	ldr	r3, [r3, #12]
 80145ba:	685b      	ldr	r3, [r3, #4]
 80145bc:	4618      	mov	r0, r3
 80145be:	f7fa feb0 	bl	800f322 <lwip_htonl>
 80145c2:	4603      	mov	r3, r0
 80145c4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	dc20      	bgt.n	801460c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	8b5b      	ldrh	r3, [r3, #26]
 80145ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80145d2:	b29a      	uxth	r2, r3
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80145d8:	e018      	b.n	801460c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7fa fe9b 	bl	800f322 <lwip_htonl>
 80145ec:	4603      	mov	r3, r0
 80145ee:	1ae3      	subs	r3, r4, r3
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	dc0b      	bgt.n	801460c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	8b5b      	ldrh	r3, [r3, #26]
 80145f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80145fc:	b29a      	uxth	r2, r3
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014602:	e003      	b.n	801460c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f002 fbcd 	bl	8016da4 <tcp_send_empty_ack>
 801460a:	e000      	b.n	801460e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801460c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014612:	2b00      	cmp	r3, #0
 8014614:	d05b      	beq.n	80146ce <tcp_receive+0x50a>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801461a:	4b60      	ldr	r3, [pc, #384]	; (801479c <tcp_receive+0x5d8>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	1ad3      	subs	r3, r2, r3
 8014620:	2b00      	cmp	r3, #0
 8014622:	da54      	bge.n	80146ce <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014624:	4b5e      	ldr	r3, [pc, #376]	; (80147a0 <tcp_receive+0x5dc>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	b29a      	uxth	r2, r3
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801462e:	b29b      	uxth	r3, r3
 8014630:	1ad3      	subs	r3, r2, r3
 8014632:	b29b      	uxth	r3, r3
 8014634:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014638:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014642:	10db      	asrs	r3, r3, #3
 8014644:	b21b      	sxth	r3, r3
 8014646:	b29b      	uxth	r3, r3
 8014648:	1ad3      	subs	r3, r2, r3
 801464a:	b29b      	uxth	r3, r3
 801464c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014656:	b29a      	uxth	r2, r3
 8014658:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801465c:	4413      	add	r3, r2
 801465e:	b29b      	uxth	r3, r3
 8014660:	b21a      	sxth	r2, r3
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014666:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801466a:	2b00      	cmp	r3, #0
 801466c:	da05      	bge.n	801467a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801466e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014672:	425b      	negs	r3, r3
 8014674:	b29b      	uxth	r3, r3
 8014676:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801467a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014684:	109b      	asrs	r3, r3, #2
 8014686:	b21b      	sxth	r3, r3
 8014688:	b29b      	uxth	r3, r3
 801468a:	1ad3      	subs	r3, r2, r3
 801468c:	b29b      	uxth	r3, r3
 801468e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014698:	b29a      	uxth	r2, r3
 801469a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801469e:	4413      	add	r3, r2
 80146a0:	b29b      	uxth	r3, r3
 80146a2:	b21a      	sxth	r2, r3
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80146ae:	10db      	asrs	r3, r3, #3
 80146b0:	b21b      	sxth	r3, r3
 80146b2:	b29a      	uxth	r2, r3
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80146ba:	b29b      	uxth	r3, r3
 80146bc:	4413      	add	r3, r2
 80146be:	b29b      	uxth	r3, r3
 80146c0:	b21a      	sxth	r2, r3
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2200      	movs	r2, #0
 80146cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80146ce:	4b35      	ldr	r3, [pc, #212]	; (80147a4 <tcp_receive+0x5e0>)
 80146d0:	881b      	ldrh	r3, [r3, #0]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	f000 84e1 	beq.w	801509a <tcp_receive+0xed6>
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	7d1b      	ldrb	r3, [r3, #20]
 80146dc:	2b06      	cmp	r3, #6
 80146de:	f200 84dc 	bhi.w	801509a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80146e6:	4b30      	ldr	r3, [pc, #192]	; (80147a8 <tcp_receive+0x5e4>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	1ad3      	subs	r3, r2, r3
 80146ec:	3b01      	subs	r3, #1
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	f2c0 808e 	blt.w	8014810 <tcp_receive+0x64c>
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80146f8:	4b2a      	ldr	r3, [pc, #168]	; (80147a4 <tcp_receive+0x5e0>)
 80146fa:	881b      	ldrh	r3, [r3, #0]
 80146fc:	4619      	mov	r1, r3
 80146fe:	4b2a      	ldr	r3, [pc, #168]	; (80147a8 <tcp_receive+0x5e4>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	440b      	add	r3, r1
 8014704:	1ad3      	subs	r3, r2, r3
 8014706:	3301      	adds	r3, #1
 8014708:	2b00      	cmp	r3, #0
 801470a:	f300 8081 	bgt.w	8014810 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801470e:	4b27      	ldr	r3, [pc, #156]	; (80147ac <tcp_receive+0x5e8>)
 8014710:	685b      	ldr	r3, [r3, #4]
 8014712:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014718:	4b23      	ldr	r3, [pc, #140]	; (80147a8 <tcp_receive+0x5e4>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	1ad3      	subs	r3, r2, r3
 801471e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014720:	4b22      	ldr	r3, [pc, #136]	; (80147ac <tcp_receive+0x5e8>)
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d106      	bne.n	8014736 <tcp_receive+0x572>
 8014728:	4b21      	ldr	r3, [pc, #132]	; (80147b0 <tcp_receive+0x5ec>)
 801472a:	f240 5294 	movw	r2, #1428	; 0x594
 801472e:	4921      	ldr	r1, [pc, #132]	; (80147b4 <tcp_receive+0x5f0>)
 8014730:	4821      	ldr	r0, [pc, #132]	; (80147b8 <tcp_receive+0x5f4>)
 8014732:	f006 fb87 	bl	801ae44 <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014738:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801473c:	4293      	cmp	r3, r2
 801473e:	d906      	bls.n	801474e <tcp_receive+0x58a>
 8014740:	4b1b      	ldr	r3, [pc, #108]	; (80147b0 <tcp_receive+0x5ec>)
 8014742:	f240 5295 	movw	r2, #1429	; 0x595
 8014746:	491d      	ldr	r1, [pc, #116]	; (80147bc <tcp_receive+0x5f8>)
 8014748:	481b      	ldr	r0, [pc, #108]	; (80147b8 <tcp_receive+0x5f4>)
 801474a:	f006 fb7b 	bl	801ae44 <printf>
      off = (u16_t)off32;
 801474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014750:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014754:	4b15      	ldr	r3, [pc, #84]	; (80147ac <tcp_receive+0x5e8>)
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	891b      	ldrh	r3, [r3, #8]
 801475a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801475e:	429a      	cmp	r2, r3
 8014760:	d906      	bls.n	8014770 <tcp_receive+0x5ac>
 8014762:	4b13      	ldr	r3, [pc, #76]	; (80147b0 <tcp_receive+0x5ec>)
 8014764:	f240 5297 	movw	r2, #1431	; 0x597
 8014768:	4915      	ldr	r1, [pc, #84]	; (80147c0 <tcp_receive+0x5fc>)
 801476a:	4813      	ldr	r0, [pc, #76]	; (80147b8 <tcp_receive+0x5f4>)
 801476c:	f006 fb6a 	bl	801ae44 <printf>
      inseg.len -= off;
 8014770:	4b0e      	ldr	r3, [pc, #56]	; (80147ac <tcp_receive+0x5e8>)
 8014772:	891a      	ldrh	r2, [r3, #8]
 8014774:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014778:	1ad3      	subs	r3, r2, r3
 801477a:	b29a      	uxth	r2, r3
 801477c:	4b0b      	ldr	r3, [pc, #44]	; (80147ac <tcp_receive+0x5e8>)
 801477e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014780:	4b0a      	ldr	r3, [pc, #40]	; (80147ac <tcp_receive+0x5e8>)
 8014782:	685b      	ldr	r3, [r3, #4]
 8014784:	891a      	ldrh	r2, [r3, #8]
 8014786:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801478a:	1ad3      	subs	r3, r2, r3
 801478c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801478e:	e029      	b.n	80147e4 <tcp_receive+0x620>
 8014790:	080260a8 	.word	0x080260a8
 8014794:	080260b0 	.word	0x080260b0
 8014798:	20004f20 	.word	0x20004f20
 801479c:	20004f1c 	.word	0x20004f1c
 80147a0:	2000be18 	.word	0x2000be18
 80147a4:	20004f22 	.word	0x20004f22
 80147a8:	20004f18 	.word	0x20004f18
 80147ac:	20004ef8 	.word	0x20004ef8
 80147b0:	08025d40 	.word	0x08025d40
 80147b4:	080260b8 	.word	0x080260b8
 80147b8:	08025d8c 	.word	0x08025d8c
 80147bc:	080260c8 	.word	0x080260c8
 80147c0:	080260d8 	.word	0x080260d8
        off -= p->len;
 80147c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147c6:	895b      	ldrh	r3, [r3, #10]
 80147c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80147cc:	1ad3      	subs	r3, r2, r3
 80147ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80147d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80147d6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80147d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147da:	2200      	movs	r2, #0
 80147dc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80147de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80147e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147e6:	895b      	ldrh	r3, [r3, #10]
 80147e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d8e9      	bhi.n	80147c4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80147f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80147f4:	4619      	mov	r1, r3
 80147f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80147f8:	f7fc f862 	bl	80108c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014800:	4a91      	ldr	r2, [pc, #580]	; (8014a48 <tcp_receive+0x884>)
 8014802:	6013      	str	r3, [r2, #0]
 8014804:	4b91      	ldr	r3, [pc, #580]	; (8014a4c <tcp_receive+0x888>)
 8014806:	68db      	ldr	r3, [r3, #12]
 8014808:	4a8f      	ldr	r2, [pc, #572]	; (8014a48 <tcp_receive+0x884>)
 801480a:	6812      	ldr	r2, [r2, #0]
 801480c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801480e:	e00d      	b.n	801482c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014810:	4b8d      	ldr	r3, [pc, #564]	; (8014a48 <tcp_receive+0x884>)
 8014812:	681a      	ldr	r2, [r3, #0]
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014818:	1ad3      	subs	r3, r2, r3
 801481a:	2b00      	cmp	r3, #0
 801481c:	da06      	bge.n	801482c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	8b5b      	ldrh	r3, [r3, #26]
 8014822:	f043 0302 	orr.w	r3, r3, #2
 8014826:	b29a      	uxth	r2, r3
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801482c:	4b86      	ldr	r3, [pc, #536]	; (8014a48 <tcp_receive+0x884>)
 801482e:	681a      	ldr	r2, [r3, #0]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014834:	1ad3      	subs	r3, r2, r3
 8014836:	2b00      	cmp	r3, #0
 8014838:	f2c0 842a 	blt.w	8015090 <tcp_receive+0xecc>
 801483c:	4b82      	ldr	r3, [pc, #520]	; (8014a48 <tcp_receive+0x884>)
 801483e:	681a      	ldr	r2, [r3, #0]
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014844:	6879      	ldr	r1, [r7, #4]
 8014846:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014848:	440b      	add	r3, r1
 801484a:	1ad3      	subs	r3, r2, r3
 801484c:	3301      	adds	r3, #1
 801484e:	2b00      	cmp	r3, #0
 8014850:	f300 841e 	bgt.w	8015090 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014858:	4b7b      	ldr	r3, [pc, #492]	; (8014a48 <tcp_receive+0x884>)
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	429a      	cmp	r2, r3
 801485e:	f040 829a 	bne.w	8014d96 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014862:	4b7a      	ldr	r3, [pc, #488]	; (8014a4c <tcp_receive+0x888>)
 8014864:	891c      	ldrh	r4, [r3, #8]
 8014866:	4b79      	ldr	r3, [pc, #484]	; (8014a4c <tcp_receive+0x888>)
 8014868:	68db      	ldr	r3, [r3, #12]
 801486a:	899b      	ldrh	r3, [r3, #12]
 801486c:	b29b      	uxth	r3, r3
 801486e:	4618      	mov	r0, r3
 8014870:	f7fa fd42 	bl	800f2f8 <lwip_htons>
 8014874:	4603      	mov	r3, r0
 8014876:	b2db      	uxtb	r3, r3
 8014878:	f003 0303 	and.w	r3, r3, #3
 801487c:	2b00      	cmp	r3, #0
 801487e:	d001      	beq.n	8014884 <tcp_receive+0x6c0>
 8014880:	2301      	movs	r3, #1
 8014882:	e000      	b.n	8014886 <tcp_receive+0x6c2>
 8014884:	2300      	movs	r3, #0
 8014886:	4423      	add	r3, r4
 8014888:	b29a      	uxth	r2, r3
 801488a:	4b71      	ldr	r3, [pc, #452]	; (8014a50 <tcp_receive+0x88c>)
 801488c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014892:	4b6f      	ldr	r3, [pc, #444]	; (8014a50 <tcp_receive+0x88c>)
 8014894:	881b      	ldrh	r3, [r3, #0]
 8014896:	429a      	cmp	r2, r3
 8014898:	d275      	bcs.n	8014986 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801489a:	4b6c      	ldr	r3, [pc, #432]	; (8014a4c <tcp_receive+0x888>)
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	899b      	ldrh	r3, [r3, #12]
 80148a0:	b29b      	uxth	r3, r3
 80148a2:	4618      	mov	r0, r3
 80148a4:	f7fa fd28 	bl	800f2f8 <lwip_htons>
 80148a8:	4603      	mov	r3, r0
 80148aa:	b2db      	uxtb	r3, r3
 80148ac:	f003 0301 	and.w	r3, r3, #1
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d01f      	beq.n	80148f4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80148b4:	4b65      	ldr	r3, [pc, #404]	; (8014a4c <tcp_receive+0x888>)
 80148b6:	68db      	ldr	r3, [r3, #12]
 80148b8:	899b      	ldrh	r3, [r3, #12]
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	b21b      	sxth	r3, r3
 80148be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80148c2:	b21c      	sxth	r4, r3
 80148c4:	4b61      	ldr	r3, [pc, #388]	; (8014a4c <tcp_receive+0x888>)
 80148c6:	68db      	ldr	r3, [r3, #12]
 80148c8:	899b      	ldrh	r3, [r3, #12]
 80148ca:	b29b      	uxth	r3, r3
 80148cc:	4618      	mov	r0, r3
 80148ce:	f7fa fd13 	bl	800f2f8 <lwip_htons>
 80148d2:	4603      	mov	r3, r0
 80148d4:	b2db      	uxtb	r3, r3
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80148dc:	b29b      	uxth	r3, r3
 80148de:	4618      	mov	r0, r3
 80148e0:	f7fa fd0a 	bl	800f2f8 <lwip_htons>
 80148e4:	4603      	mov	r3, r0
 80148e6:	b21b      	sxth	r3, r3
 80148e8:	4323      	orrs	r3, r4
 80148ea:	b21a      	sxth	r2, r3
 80148ec:	4b57      	ldr	r3, [pc, #348]	; (8014a4c <tcp_receive+0x888>)
 80148ee:	68db      	ldr	r3, [r3, #12]
 80148f0:	b292      	uxth	r2, r2
 80148f2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80148f8:	4b54      	ldr	r3, [pc, #336]	; (8014a4c <tcp_receive+0x888>)
 80148fa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80148fc:	4b53      	ldr	r3, [pc, #332]	; (8014a4c <tcp_receive+0x888>)
 80148fe:	68db      	ldr	r3, [r3, #12]
 8014900:	899b      	ldrh	r3, [r3, #12]
 8014902:	b29b      	uxth	r3, r3
 8014904:	4618      	mov	r0, r3
 8014906:	f7fa fcf7 	bl	800f2f8 <lwip_htons>
 801490a:	4603      	mov	r3, r0
 801490c:	b2db      	uxtb	r3, r3
 801490e:	f003 0302 	and.w	r3, r3, #2
 8014912:	2b00      	cmp	r3, #0
 8014914:	d005      	beq.n	8014922 <tcp_receive+0x75e>
            inseg.len -= 1;
 8014916:	4b4d      	ldr	r3, [pc, #308]	; (8014a4c <tcp_receive+0x888>)
 8014918:	891b      	ldrh	r3, [r3, #8]
 801491a:	3b01      	subs	r3, #1
 801491c:	b29a      	uxth	r2, r3
 801491e:	4b4b      	ldr	r3, [pc, #300]	; (8014a4c <tcp_receive+0x888>)
 8014920:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014922:	4b4a      	ldr	r3, [pc, #296]	; (8014a4c <tcp_receive+0x888>)
 8014924:	685b      	ldr	r3, [r3, #4]
 8014926:	4a49      	ldr	r2, [pc, #292]	; (8014a4c <tcp_receive+0x888>)
 8014928:	8912      	ldrh	r2, [r2, #8]
 801492a:	4611      	mov	r1, r2
 801492c:	4618      	mov	r0, r3
 801492e:	f7fb fec7 	bl	80106c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014932:	4b46      	ldr	r3, [pc, #280]	; (8014a4c <tcp_receive+0x888>)
 8014934:	891c      	ldrh	r4, [r3, #8]
 8014936:	4b45      	ldr	r3, [pc, #276]	; (8014a4c <tcp_receive+0x888>)
 8014938:	68db      	ldr	r3, [r3, #12]
 801493a:	899b      	ldrh	r3, [r3, #12]
 801493c:	b29b      	uxth	r3, r3
 801493e:	4618      	mov	r0, r3
 8014940:	f7fa fcda 	bl	800f2f8 <lwip_htons>
 8014944:	4603      	mov	r3, r0
 8014946:	b2db      	uxtb	r3, r3
 8014948:	f003 0303 	and.w	r3, r3, #3
 801494c:	2b00      	cmp	r3, #0
 801494e:	d001      	beq.n	8014954 <tcp_receive+0x790>
 8014950:	2301      	movs	r3, #1
 8014952:	e000      	b.n	8014956 <tcp_receive+0x792>
 8014954:	2300      	movs	r3, #0
 8014956:	4423      	add	r3, r4
 8014958:	b29a      	uxth	r2, r3
 801495a:	4b3d      	ldr	r3, [pc, #244]	; (8014a50 <tcp_receive+0x88c>)
 801495c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801495e:	4b3c      	ldr	r3, [pc, #240]	; (8014a50 <tcp_receive+0x88c>)
 8014960:	881b      	ldrh	r3, [r3, #0]
 8014962:	461a      	mov	r2, r3
 8014964:	4b38      	ldr	r3, [pc, #224]	; (8014a48 <tcp_receive+0x884>)
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	441a      	add	r2, r3
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801496e:	6879      	ldr	r1, [r7, #4]
 8014970:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014972:	440b      	add	r3, r1
 8014974:	429a      	cmp	r2, r3
 8014976:	d006      	beq.n	8014986 <tcp_receive+0x7c2>
 8014978:	4b36      	ldr	r3, [pc, #216]	; (8014a54 <tcp_receive+0x890>)
 801497a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801497e:	4936      	ldr	r1, [pc, #216]	; (8014a58 <tcp_receive+0x894>)
 8014980:	4836      	ldr	r0, [pc, #216]	; (8014a5c <tcp_receive+0x898>)
 8014982:	f006 fa5f 	bl	801ae44 <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801498a:	2b00      	cmp	r3, #0
 801498c:	f000 80e7 	beq.w	8014b5e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014990:	4b2e      	ldr	r3, [pc, #184]	; (8014a4c <tcp_receive+0x888>)
 8014992:	68db      	ldr	r3, [r3, #12]
 8014994:	899b      	ldrh	r3, [r3, #12]
 8014996:	b29b      	uxth	r3, r3
 8014998:	4618      	mov	r0, r3
 801499a:	f7fa fcad 	bl	800f2f8 <lwip_htons>
 801499e:	4603      	mov	r3, r0
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	f003 0301 	and.w	r3, r3, #1
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d010      	beq.n	80149cc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80149aa:	e00a      	b.n	80149c2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149b0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149b6:	681a      	ldr	r2, [r3, #0]
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80149bc:	68f8      	ldr	r0, [r7, #12]
 80149be:	f7fd fcaa 	bl	8012316 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d1f0      	bne.n	80149ac <tcp_receive+0x7e8>
 80149ca:	e0c8      	b.n	8014b5e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149d0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80149d2:	e052      	b.n	8014a7a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80149d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149d6:	68db      	ldr	r3, [r3, #12]
 80149d8:	899b      	ldrh	r3, [r3, #12]
 80149da:	b29b      	uxth	r3, r3
 80149dc:	4618      	mov	r0, r3
 80149de:	f7fa fc8b 	bl	800f2f8 <lwip_htons>
 80149e2:	4603      	mov	r3, r0
 80149e4:	b2db      	uxtb	r3, r3
 80149e6:	f003 0301 	and.w	r3, r3, #1
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d03d      	beq.n	8014a6a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80149ee:	4b17      	ldr	r3, [pc, #92]	; (8014a4c <tcp_receive+0x888>)
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	899b      	ldrh	r3, [r3, #12]
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7fa fc7e 	bl	800f2f8 <lwip_htons>
 80149fc:	4603      	mov	r3, r0
 80149fe:	b2db      	uxtb	r3, r3
 8014a00:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d130      	bne.n	8014a6a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014a08:	4b10      	ldr	r3, [pc, #64]	; (8014a4c <tcp_receive+0x888>)
 8014a0a:	68db      	ldr	r3, [r3, #12]
 8014a0c:	899b      	ldrh	r3, [r3, #12]
 8014a0e:	b29c      	uxth	r4, r3
 8014a10:	2001      	movs	r0, #1
 8014a12:	f7fa fc71 	bl	800f2f8 <lwip_htons>
 8014a16:	4603      	mov	r3, r0
 8014a18:	461a      	mov	r2, r3
 8014a1a:	4b0c      	ldr	r3, [pc, #48]	; (8014a4c <tcp_receive+0x888>)
 8014a1c:	68db      	ldr	r3, [r3, #12]
 8014a1e:	4322      	orrs	r2, r4
 8014a20:	b292      	uxth	r2, r2
 8014a22:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014a24:	4b09      	ldr	r3, [pc, #36]	; (8014a4c <tcp_receive+0x888>)
 8014a26:	891c      	ldrh	r4, [r3, #8]
 8014a28:	4b08      	ldr	r3, [pc, #32]	; (8014a4c <tcp_receive+0x888>)
 8014a2a:	68db      	ldr	r3, [r3, #12]
 8014a2c:	899b      	ldrh	r3, [r3, #12]
 8014a2e:	b29b      	uxth	r3, r3
 8014a30:	4618      	mov	r0, r3
 8014a32:	f7fa fc61 	bl	800f2f8 <lwip_htons>
 8014a36:	4603      	mov	r3, r0
 8014a38:	b2db      	uxtb	r3, r3
 8014a3a:	f003 0303 	and.w	r3, r3, #3
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d00e      	beq.n	8014a60 <tcp_receive+0x89c>
 8014a42:	2301      	movs	r3, #1
 8014a44:	e00d      	b.n	8014a62 <tcp_receive+0x89e>
 8014a46:	bf00      	nop
 8014a48:	20004f18 	.word	0x20004f18
 8014a4c:	20004ef8 	.word	0x20004ef8
 8014a50:	20004f22 	.word	0x20004f22
 8014a54:	08025d40 	.word	0x08025d40
 8014a58:	080260e8 	.word	0x080260e8
 8014a5c:	08025d8c 	.word	0x08025d8c
 8014a60:	2300      	movs	r3, #0
 8014a62:	4423      	add	r3, r4
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	4b98      	ldr	r3, [pc, #608]	; (8014cc8 <tcp_receive+0xb04>)
 8014a68:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a6c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014a74:	6938      	ldr	r0, [r7, #16]
 8014a76:	f7fd fc4e 	bl	8012316 <tcp_seg_free>
            while (next &&
 8014a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d00e      	beq.n	8014a9e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014a80:	4b91      	ldr	r3, [pc, #580]	; (8014cc8 <tcp_receive+0xb04>)
 8014a82:	881b      	ldrh	r3, [r3, #0]
 8014a84:	461a      	mov	r2, r3
 8014a86:	4b91      	ldr	r3, [pc, #580]	; (8014ccc <tcp_receive+0xb08>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	441a      	add	r2, r3
 8014a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a8e:	68db      	ldr	r3, [r3, #12]
 8014a90:	685b      	ldr	r3, [r3, #4]
 8014a92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014a94:	8909      	ldrh	r1, [r1, #8]
 8014a96:	440b      	add	r3, r1
 8014a98:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	da9a      	bge.n	80149d4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d059      	beq.n	8014b58 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8014aa4:	4b88      	ldr	r3, [pc, #544]	; (8014cc8 <tcp_receive+0xb04>)
 8014aa6:	881b      	ldrh	r3, [r3, #0]
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	4b88      	ldr	r3, [pc, #544]	; (8014ccc <tcp_receive+0xb08>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	441a      	add	r2, r3
 8014ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ab2:	68db      	ldr	r3, [r3, #12]
 8014ab4:	685b      	ldr	r3, [r3, #4]
 8014ab6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	dd4d      	ble.n	8014b58 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014abe:	68db      	ldr	r3, [r3, #12]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	b29a      	uxth	r2, r3
 8014ac4:	4b81      	ldr	r3, [pc, #516]	; (8014ccc <tcp_receive+0xb08>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	b29b      	uxth	r3, r3
 8014aca:	1ad3      	subs	r3, r2, r3
 8014acc:	b29a      	uxth	r2, r3
 8014ace:	4b80      	ldr	r3, [pc, #512]	; (8014cd0 <tcp_receive+0xb0c>)
 8014ad0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014ad2:	4b7f      	ldr	r3, [pc, #508]	; (8014cd0 <tcp_receive+0xb0c>)
 8014ad4:	68db      	ldr	r3, [r3, #12]
 8014ad6:	899b      	ldrh	r3, [r3, #12]
 8014ad8:	b29b      	uxth	r3, r3
 8014ada:	4618      	mov	r0, r3
 8014adc:	f7fa fc0c 	bl	800f2f8 <lwip_htons>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	b2db      	uxtb	r3, r3
 8014ae4:	f003 0302 	and.w	r3, r3, #2
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d005      	beq.n	8014af8 <tcp_receive+0x934>
                inseg.len -= 1;
 8014aec:	4b78      	ldr	r3, [pc, #480]	; (8014cd0 <tcp_receive+0xb0c>)
 8014aee:	891b      	ldrh	r3, [r3, #8]
 8014af0:	3b01      	subs	r3, #1
 8014af2:	b29a      	uxth	r2, r3
 8014af4:	4b76      	ldr	r3, [pc, #472]	; (8014cd0 <tcp_receive+0xb0c>)
 8014af6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014af8:	4b75      	ldr	r3, [pc, #468]	; (8014cd0 <tcp_receive+0xb0c>)
 8014afa:	685b      	ldr	r3, [r3, #4]
 8014afc:	4a74      	ldr	r2, [pc, #464]	; (8014cd0 <tcp_receive+0xb0c>)
 8014afe:	8912      	ldrh	r2, [r2, #8]
 8014b00:	4611      	mov	r1, r2
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fb fddc 	bl	80106c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014b08:	4b71      	ldr	r3, [pc, #452]	; (8014cd0 <tcp_receive+0xb0c>)
 8014b0a:	891c      	ldrh	r4, [r3, #8]
 8014b0c:	4b70      	ldr	r3, [pc, #448]	; (8014cd0 <tcp_receive+0xb0c>)
 8014b0e:	68db      	ldr	r3, [r3, #12]
 8014b10:	899b      	ldrh	r3, [r3, #12]
 8014b12:	b29b      	uxth	r3, r3
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7fa fbef 	bl	800f2f8 <lwip_htons>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	b2db      	uxtb	r3, r3
 8014b1e:	f003 0303 	and.w	r3, r3, #3
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d001      	beq.n	8014b2a <tcp_receive+0x966>
 8014b26:	2301      	movs	r3, #1
 8014b28:	e000      	b.n	8014b2c <tcp_receive+0x968>
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	4423      	add	r3, r4
 8014b2e:	b29a      	uxth	r2, r3
 8014b30:	4b65      	ldr	r3, [pc, #404]	; (8014cc8 <tcp_receive+0xb04>)
 8014b32:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014b34:	4b64      	ldr	r3, [pc, #400]	; (8014cc8 <tcp_receive+0xb04>)
 8014b36:	881b      	ldrh	r3, [r3, #0]
 8014b38:	461a      	mov	r2, r3
 8014b3a:	4b64      	ldr	r3, [pc, #400]	; (8014ccc <tcp_receive+0xb08>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	441a      	add	r2, r3
 8014b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b42:	68db      	ldr	r3, [r3, #12]
 8014b44:	685b      	ldr	r3, [r3, #4]
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d006      	beq.n	8014b58 <tcp_receive+0x994>
 8014b4a:	4b62      	ldr	r3, [pc, #392]	; (8014cd4 <tcp_receive+0xb10>)
 8014b4c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014b50:	4961      	ldr	r1, [pc, #388]	; (8014cd8 <tcp_receive+0xb14>)
 8014b52:	4862      	ldr	r0, [pc, #392]	; (8014cdc <tcp_receive+0xb18>)
 8014b54:	f006 f976 	bl	801ae44 <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b5c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014b5e:	4b5a      	ldr	r3, [pc, #360]	; (8014cc8 <tcp_receive+0xb04>)
 8014b60:	881b      	ldrh	r3, [r3, #0]
 8014b62:	461a      	mov	r2, r3
 8014b64:	4b59      	ldr	r3, [pc, #356]	; (8014ccc <tcp_receive+0xb08>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	441a      	add	r2, r3
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014b72:	4b55      	ldr	r3, [pc, #340]	; (8014cc8 <tcp_receive+0xb04>)
 8014b74:	881b      	ldrh	r3, [r3, #0]
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d206      	bcs.n	8014b88 <tcp_receive+0x9c4>
 8014b7a:	4b56      	ldr	r3, [pc, #344]	; (8014cd4 <tcp_receive+0xb10>)
 8014b7c:	f240 6207 	movw	r2, #1543	; 0x607
 8014b80:	4957      	ldr	r1, [pc, #348]	; (8014ce0 <tcp_receive+0xb1c>)
 8014b82:	4856      	ldr	r0, [pc, #344]	; (8014cdc <tcp_receive+0xb18>)
 8014b84:	f006 f95e 	bl	801ae44 <printf>
        pcb->rcv_wnd -= tcplen;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014b8c:	4b4e      	ldr	r3, [pc, #312]	; (8014cc8 <tcp_receive+0xb04>)
 8014b8e:	881b      	ldrh	r3, [r3, #0]
 8014b90:	1ad3      	subs	r3, r2, r3
 8014b92:	b29a      	uxth	r2, r3
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014b98:	6878      	ldr	r0, [r7, #4]
 8014b9a:	f7fc fe97 	bl	80118cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014b9e:	4b4c      	ldr	r3, [pc, #304]	; (8014cd0 <tcp_receive+0xb0c>)
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	891b      	ldrh	r3, [r3, #8]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d006      	beq.n	8014bb6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8014ba8:	4b49      	ldr	r3, [pc, #292]	; (8014cd0 <tcp_receive+0xb0c>)
 8014baa:	685b      	ldr	r3, [r3, #4]
 8014bac:	4a4d      	ldr	r2, [pc, #308]	; (8014ce4 <tcp_receive+0xb20>)
 8014bae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014bb0:	4b47      	ldr	r3, [pc, #284]	; (8014cd0 <tcp_receive+0xb0c>)
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014bb6:	4b46      	ldr	r3, [pc, #280]	; (8014cd0 <tcp_receive+0xb0c>)
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	899b      	ldrh	r3, [r3, #12]
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7fa fb9a 	bl	800f2f8 <lwip_htons>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	f003 0301 	and.w	r3, r3, #1
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	f000 80b8 	beq.w	8014d42 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014bd2:	4b45      	ldr	r3, [pc, #276]	; (8014ce8 <tcp_receive+0xb24>)
 8014bd4:	781b      	ldrb	r3, [r3, #0]
 8014bd6:	f043 0320 	orr.w	r3, r3, #32
 8014bda:	b2da      	uxtb	r2, r3
 8014bdc:	4b42      	ldr	r3, [pc, #264]	; (8014ce8 <tcp_receive+0xb24>)
 8014bde:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014be0:	e0af      	b.n	8014d42 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014be6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014bec:	68db      	ldr	r3, [r3, #12]
 8014bee:	685b      	ldr	r3, [r3, #4]
 8014bf0:	4a36      	ldr	r2, [pc, #216]	; (8014ccc <tcp_receive+0xb08>)
 8014bf2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	891b      	ldrh	r3, [r3, #8]
 8014bf8:	461c      	mov	r4, r3
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	68db      	ldr	r3, [r3, #12]
 8014bfe:	899b      	ldrh	r3, [r3, #12]
 8014c00:	b29b      	uxth	r3, r3
 8014c02:	4618      	mov	r0, r3
 8014c04:	f7fa fb78 	bl	800f2f8 <lwip_htons>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	b2db      	uxtb	r3, r3
 8014c0c:	f003 0303 	and.w	r3, r3, #3
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d001      	beq.n	8014c18 <tcp_receive+0xa54>
 8014c14:	2301      	movs	r3, #1
 8014c16:	e000      	b.n	8014c1a <tcp_receive+0xa56>
 8014c18:	2300      	movs	r3, #0
 8014c1a:	191a      	adds	r2, r3, r4
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c20:	441a      	add	r2, r3
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c2a:	461c      	mov	r4, r3
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	891b      	ldrh	r3, [r3, #8]
 8014c30:	461d      	mov	r5, r3
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	68db      	ldr	r3, [r3, #12]
 8014c36:	899b      	ldrh	r3, [r3, #12]
 8014c38:	b29b      	uxth	r3, r3
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7fa fb5c 	bl	800f2f8 <lwip_htons>
 8014c40:	4603      	mov	r3, r0
 8014c42:	b2db      	uxtb	r3, r3
 8014c44:	f003 0303 	and.w	r3, r3, #3
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d001      	beq.n	8014c50 <tcp_receive+0xa8c>
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	e000      	b.n	8014c52 <tcp_receive+0xa8e>
 8014c50:	2300      	movs	r3, #0
 8014c52:	442b      	add	r3, r5
 8014c54:	429c      	cmp	r4, r3
 8014c56:	d206      	bcs.n	8014c66 <tcp_receive+0xaa2>
 8014c58:	4b1e      	ldr	r3, [pc, #120]	; (8014cd4 <tcp_receive+0xb10>)
 8014c5a:	f240 622b 	movw	r2, #1579	; 0x62b
 8014c5e:	4923      	ldr	r1, [pc, #140]	; (8014cec <tcp_receive+0xb28>)
 8014c60:	481e      	ldr	r0, [pc, #120]	; (8014cdc <tcp_receive+0xb18>)
 8014c62:	f006 f8ef 	bl	801ae44 <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	891b      	ldrh	r3, [r3, #8]
 8014c6a:	461c      	mov	r4, r3
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	68db      	ldr	r3, [r3, #12]
 8014c70:	899b      	ldrh	r3, [r3, #12]
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7fa fb3f 	bl	800f2f8 <lwip_htons>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	b2db      	uxtb	r3, r3
 8014c7e:	f003 0303 	and.w	r3, r3, #3
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d001      	beq.n	8014c8a <tcp_receive+0xac6>
 8014c86:	2301      	movs	r3, #1
 8014c88:	e000      	b.n	8014c8c <tcp_receive+0xac8>
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	1919      	adds	r1, r3, r4
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014c92:	b28b      	uxth	r3, r1
 8014c94:	1ad3      	subs	r3, r2, r3
 8014c96:	b29a      	uxth	r2, r3
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	f7fc fe15 	bl	80118cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014ca2:	68bb      	ldr	r3, [r7, #8]
 8014ca4:	685b      	ldr	r3, [r3, #4]
 8014ca6:	891b      	ldrh	r3, [r3, #8]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d028      	beq.n	8014cfe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014cac:	4b0d      	ldr	r3, [pc, #52]	; (8014ce4 <tcp_receive+0xb20>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d01d      	beq.n	8014cf0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8014cb4:	4b0b      	ldr	r3, [pc, #44]	; (8014ce4 <tcp_receive+0xb20>)
 8014cb6:	681a      	ldr	r2, [r3, #0]
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	685b      	ldr	r3, [r3, #4]
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	4610      	mov	r0, r2
 8014cc0:	f7fb ff52 	bl	8010b68 <pbuf_cat>
 8014cc4:	e018      	b.n	8014cf8 <tcp_receive+0xb34>
 8014cc6:	bf00      	nop
 8014cc8:	20004f22 	.word	0x20004f22
 8014ccc:	20004f18 	.word	0x20004f18
 8014cd0:	20004ef8 	.word	0x20004ef8
 8014cd4:	08025d40 	.word	0x08025d40
 8014cd8:	08026120 	.word	0x08026120
 8014cdc:	08025d8c 	.word	0x08025d8c
 8014ce0:	0802615c 	.word	0x0802615c
 8014ce4:	20004f28 	.word	0x20004f28
 8014ce8:	20004f25 	.word	0x20004f25
 8014cec:	0802617c 	.word	0x0802617c
            } else {
              recv_data = cseg->p;
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	685b      	ldr	r3, [r3, #4]
 8014cf4:	4a70      	ldr	r2, [pc, #448]	; (8014eb8 <tcp_receive+0xcf4>)
 8014cf6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014cf8:	68bb      	ldr	r3, [r7, #8]
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	68db      	ldr	r3, [r3, #12]
 8014d02:	899b      	ldrh	r3, [r3, #12]
 8014d04:	b29b      	uxth	r3, r3
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7fa faf6 	bl	800f2f8 <lwip_htons>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	f003 0301 	and.w	r3, r3, #1
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d00d      	beq.n	8014d34 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014d18:	4b68      	ldr	r3, [pc, #416]	; (8014ebc <tcp_receive+0xcf8>)
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	f043 0320 	orr.w	r3, r3, #32
 8014d20:	b2da      	uxtb	r2, r3
 8014d22:	4b66      	ldr	r3, [pc, #408]	; (8014ebc <tcp_receive+0xcf8>)
 8014d24:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	7d1b      	ldrb	r3, [r3, #20]
 8014d2a:	2b04      	cmp	r3, #4
 8014d2c:	d102      	bne.n	8014d34 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2207      	movs	r2, #7
 8014d32:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014d34:	68bb      	ldr	r3, [r7, #8]
 8014d36:	681a      	ldr	r2, [r3, #0]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014d3c:	68b8      	ldr	r0, [r7, #8]
 8014d3e:	f7fd faea 	bl	8012316 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d008      	beq.n	8014d5c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d4e:	68db      	ldr	r3, [r3, #12]
 8014d50:	685a      	ldr	r2, [r3, #4]
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014d56:	429a      	cmp	r2, r3
 8014d58:	f43f af43 	beq.w	8014be2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	8b5b      	ldrh	r3, [r3, #26]
 8014d60:	f003 0301 	and.w	r3, r3, #1
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d00e      	beq.n	8014d86 <tcp_receive+0xbc2>
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	8b5b      	ldrh	r3, [r3, #26]
 8014d6c:	f023 0301 	bic.w	r3, r3, #1
 8014d70:	b29a      	uxth	r2, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	835a      	strh	r2, [r3, #26]
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	8b5b      	ldrh	r3, [r3, #26]
 8014d7a:	f043 0302 	orr.w	r3, r3, #2
 8014d7e:	b29a      	uxth	r2, r3
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014d84:	e188      	b.n	8015098 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	8b5b      	ldrh	r3, [r3, #26]
 8014d8a:	f043 0301 	orr.w	r3, r3, #1
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014d94:	e180      	b.n	8015098 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d106      	bne.n	8014dac <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014d9e:	4848      	ldr	r0, [pc, #288]	; (8014ec0 <tcp_receive+0xcfc>)
 8014da0:	f7fd faf0 	bl	8012384 <tcp_seg_copy>
 8014da4:	4602      	mov	r2, r0
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	675a      	str	r2, [r3, #116]	; 0x74
 8014daa:	e16d      	b.n	8015088 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014dac:	2300      	movs	r3, #0
 8014dae:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014db4:	63bb      	str	r3, [r7, #56]	; 0x38
 8014db6:	e157      	b.n	8015068 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8014db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dba:	68db      	ldr	r3, [r3, #12]
 8014dbc:	685a      	ldr	r2, [r3, #4]
 8014dbe:	4b41      	ldr	r3, [pc, #260]	; (8014ec4 <tcp_receive+0xd00>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d11d      	bne.n	8014e02 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014dc6:	4b3e      	ldr	r3, [pc, #248]	; (8014ec0 <tcp_receive+0xcfc>)
 8014dc8:	891a      	ldrh	r2, [r3, #8]
 8014dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dcc:	891b      	ldrh	r3, [r3, #8]
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	f240 814f 	bls.w	8015072 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014dd4:	483a      	ldr	r0, [pc, #232]	; (8014ec0 <tcp_receive+0xcfc>)
 8014dd6:	f7fd fad5 	bl	8012384 <tcp_seg_copy>
 8014dda:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	f000 8149 	beq.w	8015076 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8014de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d003      	beq.n	8014df2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8014dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dec:	697a      	ldr	r2, [r7, #20]
 8014dee:	601a      	str	r2, [r3, #0]
 8014df0:	e002      	b.n	8014df8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	697a      	ldr	r2, [r7, #20]
 8014df6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014df8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014dfa:	6978      	ldr	r0, [r7, #20]
 8014dfc:	f7ff f8de 	bl	8013fbc <tcp_oos_insert_segment>
                }
                break;
 8014e00:	e139      	b.n	8015076 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d117      	bne.n	8014e38 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014e08:	4b2e      	ldr	r3, [pc, #184]	; (8014ec4 <tcp_receive+0xd00>)
 8014e0a:	681a      	ldr	r2, [r3, #0]
 8014e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e0e:	68db      	ldr	r3, [r3, #12]
 8014e10:	685b      	ldr	r3, [r3, #4]
 8014e12:	1ad3      	subs	r3, r2, r3
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	da57      	bge.n	8014ec8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014e18:	4829      	ldr	r0, [pc, #164]	; (8014ec0 <tcp_receive+0xcfc>)
 8014e1a:	f7fd fab3 	bl	8012384 <tcp_seg_copy>
 8014e1e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014e20:	69bb      	ldr	r3, [r7, #24]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	f000 8129 	beq.w	801507a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	69ba      	ldr	r2, [r7, #24]
 8014e2c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014e2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014e30:	69b8      	ldr	r0, [r7, #24]
 8014e32:	f7ff f8c3 	bl	8013fbc <tcp_oos_insert_segment>
                  }
                  break;
 8014e36:	e120      	b.n	801507a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014e38:	4b22      	ldr	r3, [pc, #136]	; (8014ec4 <tcp_receive+0xd00>)
 8014e3a:	681a      	ldr	r2, [r3, #0]
 8014e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e3e:	68db      	ldr	r3, [r3, #12]
 8014e40:	685b      	ldr	r3, [r3, #4]
 8014e42:	1ad3      	subs	r3, r2, r3
 8014e44:	3b01      	subs	r3, #1
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	db3e      	blt.n	8014ec8 <tcp_receive+0xd04>
 8014e4a:	4b1e      	ldr	r3, [pc, #120]	; (8014ec4 <tcp_receive+0xd00>)
 8014e4c:	681a      	ldr	r2, [r3, #0]
 8014e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e50:	68db      	ldr	r3, [r3, #12]
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	1ad3      	subs	r3, r2, r3
 8014e56:	3301      	adds	r3, #1
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	dc35      	bgt.n	8014ec8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014e5c:	4818      	ldr	r0, [pc, #96]	; (8014ec0 <tcp_receive+0xcfc>)
 8014e5e:	f7fd fa91 	bl	8012384 <tcp_seg_copy>
 8014e62:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014e64:	69fb      	ldr	r3, [r7, #28]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	f000 8109 	beq.w	801507e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e6e:	68db      	ldr	r3, [r3, #12]
 8014e70:	685b      	ldr	r3, [r3, #4]
 8014e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e74:	8912      	ldrh	r2, [r2, #8]
 8014e76:	441a      	add	r2, r3
 8014e78:	4b12      	ldr	r3, [pc, #72]	; (8014ec4 <tcp_receive+0xd00>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	1ad3      	subs	r3, r2, r3
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	dd12      	ble.n	8014ea8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014e82:	4b10      	ldr	r3, [pc, #64]	; (8014ec4 <tcp_receive+0xd00>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	b29a      	uxth	r2, r3
 8014e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e8a:	68db      	ldr	r3, [r3, #12]
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	b29b      	uxth	r3, r3
 8014e90:	1ad3      	subs	r3, r2, r3
 8014e92:	b29a      	uxth	r2, r3
 8014e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e96:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e9a:	685a      	ldr	r2, [r3, #4]
 8014e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e9e:	891b      	ldrh	r3, [r3, #8]
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	4610      	mov	r0, r2
 8014ea4:	f7fb fc0c 	bl	80106c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014eaa:	69fa      	ldr	r2, [r7, #28]
 8014eac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014eae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014eb0:	69f8      	ldr	r0, [r7, #28]
 8014eb2:	f7ff f883 	bl	8013fbc <tcp_oos_insert_segment>
                  }
                  break;
 8014eb6:	e0e2      	b.n	801507e <tcp_receive+0xeba>
 8014eb8:	20004f28 	.word	0x20004f28
 8014ebc:	20004f25 	.word	0x20004f25
 8014ec0:	20004ef8 	.word	0x20004ef8
 8014ec4:	20004f18 	.word	0x20004f18
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eca:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	f040 80c6 	bne.w	8015062 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014ed6:	4b80      	ldr	r3, [pc, #512]	; (80150d8 <tcp_receive+0xf14>)
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014edc:	68db      	ldr	r3, [r3, #12]
 8014ede:	685b      	ldr	r3, [r3, #4]
 8014ee0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	f340 80bd 	ble.w	8015062 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eea:	68db      	ldr	r3, [r3, #12]
 8014eec:	899b      	ldrh	r3, [r3, #12]
 8014eee:	b29b      	uxth	r3, r3
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7fa fa01 	bl	800f2f8 <lwip_htons>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	b2db      	uxtb	r3, r3
 8014efa:	f003 0301 	and.w	r3, r3, #1
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	f040 80bf 	bne.w	8015082 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014f04:	4875      	ldr	r0, [pc, #468]	; (80150dc <tcp_receive+0xf18>)
 8014f06:	f7fd fa3d 	bl	8012384 <tcp_seg_copy>
 8014f0a:	4602      	mov	r2, r0
 8014f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f0e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	f000 80b6 	beq.w	8015086 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f1c:	68db      	ldr	r3, [r3, #12]
 8014f1e:	685b      	ldr	r3, [r3, #4]
 8014f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f22:	8912      	ldrh	r2, [r2, #8]
 8014f24:	441a      	add	r2, r3
 8014f26:	4b6c      	ldr	r3, [pc, #432]	; (80150d8 <tcp_receive+0xf14>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	1ad3      	subs	r3, r2, r3
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	dd12      	ble.n	8014f56 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014f30:	4b69      	ldr	r3, [pc, #420]	; (80150d8 <tcp_receive+0xf14>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	b29a      	uxth	r2, r3
 8014f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f38:	68db      	ldr	r3, [r3, #12]
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	b29b      	uxth	r3, r3
 8014f3e:	1ad3      	subs	r3, r2, r3
 8014f40:	b29a      	uxth	r2, r3
 8014f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f44:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f48:	685a      	ldr	r2, [r3, #4]
 8014f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f4c:	891b      	ldrh	r3, [r3, #8]
 8014f4e:	4619      	mov	r1, r3
 8014f50:	4610      	mov	r0, r2
 8014f52:	f7fb fbb5 	bl	80106c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014f56:	4b62      	ldr	r3, [pc, #392]	; (80150e0 <tcp_receive+0xf1c>)
 8014f58:	881b      	ldrh	r3, [r3, #0]
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	4b5e      	ldr	r3, [pc, #376]	; (80150d8 <tcp_receive+0xf14>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	441a      	add	r2, r3
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f66:	6879      	ldr	r1, [r7, #4]
 8014f68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014f6a:	440b      	add	r3, r1
 8014f6c:	1ad3      	subs	r3, r2, r3
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	f340 8089 	ble.w	8015086 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	68db      	ldr	r3, [r3, #12]
 8014f7a:	899b      	ldrh	r3, [r3, #12]
 8014f7c:	b29b      	uxth	r3, r3
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7fa f9ba 	bl	800f2f8 <lwip_htons>
 8014f84:	4603      	mov	r3, r0
 8014f86:	b2db      	uxtb	r3, r3
 8014f88:	f003 0301 	and.w	r3, r3, #1
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d022      	beq.n	8014fd6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	68db      	ldr	r3, [r3, #12]
 8014f96:	899b      	ldrh	r3, [r3, #12]
 8014f98:	b29b      	uxth	r3, r3
 8014f9a:	b21b      	sxth	r3, r3
 8014f9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014fa0:	b21c      	sxth	r4, r3
 8014fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	68db      	ldr	r3, [r3, #12]
 8014fa8:	899b      	ldrh	r3, [r3, #12]
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	4618      	mov	r0, r3
 8014fae:	f7fa f9a3 	bl	800f2f8 <lwip_htons>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	b2db      	uxtb	r3, r3
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014fbc:	b29b      	uxth	r3, r3
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7fa f99a 	bl	800f2f8 <lwip_htons>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	b21b      	sxth	r3, r3
 8014fc8:	4323      	orrs	r3, r4
 8014fca:	b21a      	sxth	r2, r3
 8014fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	68db      	ldr	r3, [r3, #12]
 8014fd2:	b292      	uxth	r2, r2
 8014fd4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fda:	b29a      	uxth	r2, r3
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014fe0:	4413      	add	r3, r2
 8014fe2:	b299      	uxth	r1, r3
 8014fe4:	4b3c      	ldr	r3, [pc, #240]	; (80150d8 <tcp_receive+0xf14>)
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	b29a      	uxth	r2, r3
 8014fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	1a8a      	subs	r2, r1, r2
 8014ff0:	b292      	uxth	r2, r2
 8014ff2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	685a      	ldr	r2, [r3, #4]
 8014ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	891b      	ldrh	r3, [r3, #8]
 8015000:	4619      	mov	r1, r3
 8015002:	4610      	mov	r0, r2
 8015004:	f7fb fb5c 	bl	80106c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	891c      	ldrh	r4, [r3, #8]
 801500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	68db      	ldr	r3, [r3, #12]
 8015014:	899b      	ldrh	r3, [r3, #12]
 8015016:	b29b      	uxth	r3, r3
 8015018:	4618      	mov	r0, r3
 801501a:	f7fa f96d 	bl	800f2f8 <lwip_htons>
 801501e:	4603      	mov	r3, r0
 8015020:	b2db      	uxtb	r3, r3
 8015022:	f003 0303 	and.w	r3, r3, #3
 8015026:	2b00      	cmp	r3, #0
 8015028:	d001      	beq.n	801502e <tcp_receive+0xe6a>
 801502a:	2301      	movs	r3, #1
 801502c:	e000      	b.n	8015030 <tcp_receive+0xe6c>
 801502e:	2300      	movs	r3, #0
 8015030:	4423      	add	r3, r4
 8015032:	b29a      	uxth	r2, r3
 8015034:	4b2a      	ldr	r3, [pc, #168]	; (80150e0 <tcp_receive+0xf1c>)
 8015036:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015038:	4b29      	ldr	r3, [pc, #164]	; (80150e0 <tcp_receive+0xf1c>)
 801503a:	881b      	ldrh	r3, [r3, #0]
 801503c:	461a      	mov	r2, r3
 801503e:	4b26      	ldr	r3, [pc, #152]	; (80150d8 <tcp_receive+0xf14>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	441a      	add	r2, r3
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015048:	6879      	ldr	r1, [r7, #4]
 801504a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801504c:	440b      	add	r3, r1
 801504e:	429a      	cmp	r2, r3
 8015050:	d019      	beq.n	8015086 <tcp_receive+0xec2>
 8015052:	4b24      	ldr	r3, [pc, #144]	; (80150e4 <tcp_receive+0xf20>)
 8015054:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015058:	4923      	ldr	r1, [pc, #140]	; (80150e8 <tcp_receive+0xf24>)
 801505a:	4824      	ldr	r0, [pc, #144]	; (80150ec <tcp_receive+0xf28>)
 801505c:	f005 fef2 	bl	801ae44 <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015060:	e011      	b.n	8015086 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	63bb      	str	r3, [r7, #56]	; 0x38
 8015068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801506a:	2b00      	cmp	r3, #0
 801506c:	f47f aea4 	bne.w	8014db8 <tcp_receive+0xbf4>
 8015070:	e00a      	b.n	8015088 <tcp_receive+0xec4>
                break;
 8015072:	bf00      	nop
 8015074:	e008      	b.n	8015088 <tcp_receive+0xec4>
                break;
 8015076:	bf00      	nop
 8015078:	e006      	b.n	8015088 <tcp_receive+0xec4>
                  break;
 801507a:	bf00      	nop
 801507c:	e004      	b.n	8015088 <tcp_receive+0xec4>
                  break;
 801507e:	bf00      	nop
 8015080:	e002      	b.n	8015088 <tcp_receive+0xec4>
                  break;
 8015082:	bf00      	nop
 8015084:	e000      	b.n	8015088 <tcp_receive+0xec4>
                break;
 8015086:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015088:	6878      	ldr	r0, [r7, #4]
 801508a:	f001 fe8b 	bl	8016da4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801508e:	e003      	b.n	8015098 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f001 fe87 	bl	8016da4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015096:	e01a      	b.n	80150ce <tcp_receive+0xf0a>
 8015098:	e019      	b.n	80150ce <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801509a:	4b0f      	ldr	r3, [pc, #60]	; (80150d8 <tcp_receive+0xf14>)
 801509c:	681a      	ldr	r2, [r3, #0]
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150a2:	1ad3      	subs	r3, r2, r3
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	db0a      	blt.n	80150be <tcp_receive+0xefa>
 80150a8:	4b0b      	ldr	r3, [pc, #44]	; (80150d8 <tcp_receive+0xf14>)
 80150aa:	681a      	ldr	r2, [r3, #0]
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b0:	6879      	ldr	r1, [r7, #4]
 80150b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80150b4:	440b      	add	r3, r1
 80150b6:	1ad3      	subs	r3, r2, r3
 80150b8:	3301      	adds	r3, #1
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	dd07      	ble.n	80150ce <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	8b5b      	ldrh	r3, [r3, #26]
 80150c2:	f043 0302 	orr.w	r3, r3, #2
 80150c6:	b29a      	uxth	r2, r3
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80150cc:	e7ff      	b.n	80150ce <tcp_receive+0xf0a>
 80150ce:	bf00      	nop
 80150d0:	3750      	adds	r7, #80	; 0x50
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bdb0      	pop	{r4, r5, r7, pc}
 80150d6:	bf00      	nop
 80150d8:	20004f18 	.word	0x20004f18
 80150dc:	20004ef8 	.word	0x20004ef8
 80150e0:	20004f22 	.word	0x20004f22
 80150e4:	08025d40 	.word	0x08025d40
 80150e8:	080260e8 	.word	0x080260e8
 80150ec:	08025d8c 	.word	0x08025d8c

080150f0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80150f0:	b480      	push	{r7}
 80150f2:	b083      	sub	sp, #12
 80150f4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80150f6:	4b15      	ldr	r3, [pc, #84]	; (801514c <tcp_get_next_optbyte+0x5c>)
 80150f8:	881b      	ldrh	r3, [r3, #0]
 80150fa:	1c5a      	adds	r2, r3, #1
 80150fc:	b291      	uxth	r1, r2
 80150fe:	4a13      	ldr	r2, [pc, #76]	; (801514c <tcp_get_next_optbyte+0x5c>)
 8015100:	8011      	strh	r1, [r2, #0]
 8015102:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015104:	4b12      	ldr	r3, [pc, #72]	; (8015150 <tcp_get_next_optbyte+0x60>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d004      	beq.n	8015116 <tcp_get_next_optbyte+0x26>
 801510c:	4b11      	ldr	r3, [pc, #68]	; (8015154 <tcp_get_next_optbyte+0x64>)
 801510e:	881b      	ldrh	r3, [r3, #0]
 8015110:	88fa      	ldrh	r2, [r7, #6]
 8015112:	429a      	cmp	r2, r3
 8015114:	d208      	bcs.n	8015128 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015116:	4b10      	ldr	r3, [pc, #64]	; (8015158 <tcp_get_next_optbyte+0x68>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	3314      	adds	r3, #20
 801511c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801511e:	88fb      	ldrh	r3, [r7, #6]
 8015120:	683a      	ldr	r2, [r7, #0]
 8015122:	4413      	add	r3, r2
 8015124:	781b      	ldrb	r3, [r3, #0]
 8015126:	e00b      	b.n	8015140 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015128:	88fb      	ldrh	r3, [r7, #6]
 801512a:	b2da      	uxtb	r2, r3
 801512c:	4b09      	ldr	r3, [pc, #36]	; (8015154 <tcp_get_next_optbyte+0x64>)
 801512e:	881b      	ldrh	r3, [r3, #0]
 8015130:	b2db      	uxtb	r3, r3
 8015132:	1ad3      	subs	r3, r2, r3
 8015134:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015136:	4b06      	ldr	r3, [pc, #24]	; (8015150 <tcp_get_next_optbyte+0x60>)
 8015138:	681a      	ldr	r2, [r3, #0]
 801513a:	797b      	ldrb	r3, [r7, #5]
 801513c:	4413      	add	r3, r2
 801513e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015140:	4618      	mov	r0, r3
 8015142:	370c      	adds	r7, #12
 8015144:	46bd      	mov	sp, r7
 8015146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514a:	4770      	bx	lr
 801514c:	20004f14 	.word	0x20004f14
 8015150:	20004f10 	.word	0x20004f10
 8015154:	20004f0e 	.word	0x20004f0e
 8015158:	20004f08 	.word	0x20004f08

0801515c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b084      	sub	sp, #16
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d106      	bne.n	8015178 <tcp_parseopt+0x1c>
 801516a:	4b32      	ldr	r3, [pc, #200]	; (8015234 <tcp_parseopt+0xd8>)
 801516c:	f240 727d 	movw	r2, #1917	; 0x77d
 8015170:	4931      	ldr	r1, [pc, #196]	; (8015238 <tcp_parseopt+0xdc>)
 8015172:	4832      	ldr	r0, [pc, #200]	; (801523c <tcp_parseopt+0xe0>)
 8015174:	f005 fe66 	bl	801ae44 <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015178:	4b31      	ldr	r3, [pc, #196]	; (8015240 <tcp_parseopt+0xe4>)
 801517a:	881b      	ldrh	r3, [r3, #0]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d055      	beq.n	801522c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015180:	4b30      	ldr	r3, [pc, #192]	; (8015244 <tcp_parseopt+0xe8>)
 8015182:	2200      	movs	r2, #0
 8015184:	801a      	strh	r2, [r3, #0]
 8015186:	e045      	b.n	8015214 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015188:	f7ff ffb2 	bl	80150f0 <tcp_get_next_optbyte>
 801518c:	4603      	mov	r3, r0
 801518e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015190:	7bfb      	ldrb	r3, [r7, #15]
 8015192:	2b02      	cmp	r3, #2
 8015194:	d006      	beq.n	80151a4 <tcp_parseopt+0x48>
 8015196:	2b02      	cmp	r3, #2
 8015198:	dc2b      	bgt.n	80151f2 <tcp_parseopt+0x96>
 801519a:	2b00      	cmp	r3, #0
 801519c:	d041      	beq.n	8015222 <tcp_parseopt+0xc6>
 801519e:	2b01      	cmp	r3, #1
 80151a0:	d127      	bne.n	80151f2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80151a2:	e037      	b.n	8015214 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80151a4:	f7ff ffa4 	bl	80150f0 <tcp_get_next_optbyte>
 80151a8:	4603      	mov	r3, r0
 80151aa:	2b04      	cmp	r3, #4
 80151ac:	d13b      	bne.n	8015226 <tcp_parseopt+0xca>
 80151ae:	4b25      	ldr	r3, [pc, #148]	; (8015244 <tcp_parseopt+0xe8>)
 80151b0:	881b      	ldrh	r3, [r3, #0]
 80151b2:	3301      	adds	r3, #1
 80151b4:	4a22      	ldr	r2, [pc, #136]	; (8015240 <tcp_parseopt+0xe4>)
 80151b6:	8812      	ldrh	r2, [r2, #0]
 80151b8:	4293      	cmp	r3, r2
 80151ba:	da34      	bge.n	8015226 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80151bc:	f7ff ff98 	bl	80150f0 <tcp_get_next_optbyte>
 80151c0:	4603      	mov	r3, r0
 80151c2:	b29b      	uxth	r3, r3
 80151c4:	021b      	lsls	r3, r3, #8
 80151c6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80151c8:	f7ff ff92 	bl	80150f0 <tcp_get_next_optbyte>
 80151cc:	4603      	mov	r3, r0
 80151ce:	b29a      	uxth	r2, r3
 80151d0:	89bb      	ldrh	r3, [r7, #12]
 80151d2:	4313      	orrs	r3, r2
 80151d4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80151d6:	89bb      	ldrh	r3, [r7, #12]
 80151d8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80151dc:	d804      	bhi.n	80151e8 <tcp_parseopt+0x8c>
 80151de:	89bb      	ldrh	r3, [r7, #12]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d001      	beq.n	80151e8 <tcp_parseopt+0x8c>
 80151e4:	89ba      	ldrh	r2, [r7, #12]
 80151e6:	e001      	b.n	80151ec <tcp_parseopt+0x90>
 80151e8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80151f0:	e010      	b.n	8015214 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80151f2:	f7ff ff7d 	bl	80150f0 <tcp_get_next_optbyte>
 80151f6:	4603      	mov	r3, r0
 80151f8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80151fa:	7afb      	ldrb	r3, [r7, #11]
 80151fc:	2b01      	cmp	r3, #1
 80151fe:	d914      	bls.n	801522a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015200:	7afb      	ldrb	r3, [r7, #11]
 8015202:	b29a      	uxth	r2, r3
 8015204:	4b0f      	ldr	r3, [pc, #60]	; (8015244 <tcp_parseopt+0xe8>)
 8015206:	881b      	ldrh	r3, [r3, #0]
 8015208:	4413      	add	r3, r2
 801520a:	b29b      	uxth	r3, r3
 801520c:	3b02      	subs	r3, #2
 801520e:	b29a      	uxth	r2, r3
 8015210:	4b0c      	ldr	r3, [pc, #48]	; (8015244 <tcp_parseopt+0xe8>)
 8015212:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015214:	4b0b      	ldr	r3, [pc, #44]	; (8015244 <tcp_parseopt+0xe8>)
 8015216:	881a      	ldrh	r2, [r3, #0]
 8015218:	4b09      	ldr	r3, [pc, #36]	; (8015240 <tcp_parseopt+0xe4>)
 801521a:	881b      	ldrh	r3, [r3, #0]
 801521c:	429a      	cmp	r2, r3
 801521e:	d3b3      	bcc.n	8015188 <tcp_parseopt+0x2c>
 8015220:	e004      	b.n	801522c <tcp_parseopt+0xd0>
          return;
 8015222:	bf00      	nop
 8015224:	e002      	b.n	801522c <tcp_parseopt+0xd0>
            return;
 8015226:	bf00      	nop
 8015228:	e000      	b.n	801522c <tcp_parseopt+0xd0>
            return;
 801522a:	bf00      	nop
      }
    }
  }
}
 801522c:	3710      	adds	r7, #16
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
 8015232:	bf00      	nop
 8015234:	08025d40 	.word	0x08025d40
 8015238:	080261a4 	.word	0x080261a4
 801523c:	08025d8c 	.word	0x08025d8c
 8015240:	20004f0c 	.word	0x20004f0c
 8015244:	20004f14 	.word	0x20004f14

08015248 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015248:	b480      	push	{r7}
 801524a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801524c:	4b05      	ldr	r3, [pc, #20]	; (8015264 <tcp_trigger_input_pcb_close+0x1c>)
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	f043 0310 	orr.w	r3, r3, #16
 8015254:	b2da      	uxtb	r2, r3
 8015256:	4b03      	ldr	r3, [pc, #12]	; (8015264 <tcp_trigger_input_pcb_close+0x1c>)
 8015258:	701a      	strb	r2, [r3, #0]
}
 801525a:	bf00      	nop
 801525c:	46bd      	mov	sp, r7
 801525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015262:	4770      	bx	lr
 8015264:	20004f25 	.word	0x20004f25

08015268 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b084      	sub	sp, #16
 801526c:	af00      	add	r7, sp, #0
 801526e:	60f8      	str	r0, [r7, #12]
 8015270:	60b9      	str	r1, [r7, #8]
 8015272:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d00a      	beq.n	8015290 <tcp_route+0x28>
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	7a1b      	ldrb	r3, [r3, #8]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d006      	beq.n	8015290 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	7a1b      	ldrb	r3, [r3, #8]
 8015286:	4618      	mov	r0, r3
 8015288:	f7fb f812 	bl	80102b0 <netif_get_by_index>
 801528c:	4603      	mov	r3, r0
 801528e:	e003      	b.n	8015298 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f003 fe35 	bl	8018f00 <ip4_route>
 8015296:	4603      	mov	r3, r0
  }
}
 8015298:	4618      	mov	r0, r3
 801529a:	3710      	adds	r7, #16
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}

080152a0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80152a0:	b590      	push	{r4, r7, lr}
 80152a2:	b087      	sub	sp, #28
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	60f8      	str	r0, [r7, #12]
 80152a8:	60b9      	str	r1, [r7, #8]
 80152aa:	603b      	str	r3, [r7, #0]
 80152ac:	4613      	mov	r3, r2
 80152ae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d105      	bne.n	80152c2 <tcp_create_segment+0x22>
 80152b6:	4b44      	ldr	r3, [pc, #272]	; (80153c8 <tcp_create_segment+0x128>)
 80152b8:	22a3      	movs	r2, #163	; 0xa3
 80152ba:	4944      	ldr	r1, [pc, #272]	; (80153cc <tcp_create_segment+0x12c>)
 80152bc:	4844      	ldr	r0, [pc, #272]	; (80153d0 <tcp_create_segment+0x130>)
 80152be:	f005 fdc1 	bl	801ae44 <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d105      	bne.n	80152d4 <tcp_create_segment+0x34>
 80152c8:	4b3f      	ldr	r3, [pc, #252]	; (80153c8 <tcp_create_segment+0x128>)
 80152ca:	22a4      	movs	r2, #164	; 0xa4
 80152cc:	4941      	ldr	r1, [pc, #260]	; (80153d4 <tcp_create_segment+0x134>)
 80152ce:	4840      	ldr	r0, [pc, #256]	; (80153d0 <tcp_create_segment+0x130>)
 80152d0:	f005 fdb8 	bl	801ae44 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80152d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80152d8:	009b      	lsls	r3, r3, #2
 80152da:	b2db      	uxtb	r3, r3
 80152dc:	f003 0304 	and.w	r3, r3, #4
 80152e0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80152e2:	2003      	movs	r0, #3
 80152e4:	f7fa fcf4 	bl	800fcd0 <memp_malloc>
 80152e8:	6138      	str	r0, [r7, #16]
 80152ea:	693b      	ldr	r3, [r7, #16]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d104      	bne.n	80152fa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80152f0:	68b8      	ldr	r0, [r7, #8]
 80152f2:	f7fb fb6b 	bl	80109cc <pbuf_free>
    return NULL;
 80152f6:	2300      	movs	r3, #0
 80152f8:	e061      	b.n	80153be <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80152fa:	693b      	ldr	r3, [r7, #16]
 80152fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015300:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	2200      	movs	r2, #0
 8015306:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	68ba      	ldr	r2, [r7, #8]
 801530c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801530e:	68bb      	ldr	r3, [r7, #8]
 8015310:	891a      	ldrh	r2, [r3, #8]
 8015312:	7dfb      	ldrb	r3, [r7, #23]
 8015314:	b29b      	uxth	r3, r3
 8015316:	429a      	cmp	r2, r3
 8015318:	d205      	bcs.n	8015326 <tcp_create_segment+0x86>
 801531a:	4b2b      	ldr	r3, [pc, #172]	; (80153c8 <tcp_create_segment+0x128>)
 801531c:	22b0      	movs	r2, #176	; 0xb0
 801531e:	492e      	ldr	r1, [pc, #184]	; (80153d8 <tcp_create_segment+0x138>)
 8015320:	482b      	ldr	r0, [pc, #172]	; (80153d0 <tcp_create_segment+0x130>)
 8015322:	f005 fd8f 	bl	801ae44 <printf>
  seg->len = p->tot_len - optlen;
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	891a      	ldrh	r2, [r3, #8]
 801532a:	7dfb      	ldrb	r3, [r7, #23]
 801532c:	b29b      	uxth	r3, r3
 801532e:	1ad3      	subs	r3, r2, r3
 8015330:	b29a      	uxth	r2, r3
 8015332:	693b      	ldr	r3, [r7, #16]
 8015334:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015336:	2114      	movs	r1, #20
 8015338:	68b8      	ldr	r0, [r7, #8]
 801533a:	f7fb fab1 	bl	80108a0 <pbuf_add_header>
 801533e:	4603      	mov	r3, r0
 8015340:	2b00      	cmp	r3, #0
 8015342:	d004      	beq.n	801534e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015344:	6938      	ldr	r0, [r7, #16]
 8015346:	f7fc ffe6 	bl	8012316 <tcp_seg_free>
    return NULL;
 801534a:	2300      	movs	r3, #0
 801534c:	e037      	b.n	80153be <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	685a      	ldr	r2, [r3, #4]
 8015354:	693b      	ldr	r3, [r7, #16]
 8015356:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	8ada      	ldrh	r2, [r3, #22]
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	68dc      	ldr	r4, [r3, #12]
 8015360:	4610      	mov	r0, r2
 8015362:	f7f9 ffc9 	bl	800f2f8 <lwip_htons>
 8015366:	4603      	mov	r3, r0
 8015368:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	8b1a      	ldrh	r2, [r3, #24]
 801536e:	693b      	ldr	r3, [r7, #16]
 8015370:	68dc      	ldr	r4, [r3, #12]
 8015372:	4610      	mov	r0, r2
 8015374:	f7f9 ffc0 	bl	800f2f8 <lwip_htons>
 8015378:	4603      	mov	r3, r0
 801537a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	68dc      	ldr	r4, [r3, #12]
 8015380:	6838      	ldr	r0, [r7, #0]
 8015382:	f7f9 ffce 	bl	800f322 <lwip_htonl>
 8015386:	4603      	mov	r3, r0
 8015388:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801538a:	7dfb      	ldrb	r3, [r7, #23]
 801538c:	089b      	lsrs	r3, r3, #2
 801538e:	b2db      	uxtb	r3, r3
 8015390:	b29b      	uxth	r3, r3
 8015392:	3305      	adds	r3, #5
 8015394:	b29b      	uxth	r3, r3
 8015396:	031b      	lsls	r3, r3, #12
 8015398:	b29a      	uxth	r2, r3
 801539a:	79fb      	ldrb	r3, [r7, #7]
 801539c:	b29b      	uxth	r3, r3
 801539e:	4313      	orrs	r3, r2
 80153a0:	b29a      	uxth	r2, r3
 80153a2:	693b      	ldr	r3, [r7, #16]
 80153a4:	68dc      	ldr	r4, [r3, #12]
 80153a6:	4610      	mov	r0, r2
 80153a8:	f7f9 ffa6 	bl	800f2f8 <lwip_htons>
 80153ac:	4603      	mov	r3, r0
 80153ae:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80153b0:	693b      	ldr	r3, [r7, #16]
 80153b2:	68db      	ldr	r3, [r3, #12]
 80153b4:	2200      	movs	r2, #0
 80153b6:	749a      	strb	r2, [r3, #18]
 80153b8:	2200      	movs	r2, #0
 80153ba:	74da      	strb	r2, [r3, #19]
  return seg;
 80153bc:	693b      	ldr	r3, [r7, #16]
}
 80153be:	4618      	mov	r0, r3
 80153c0:	371c      	adds	r7, #28
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd90      	pop	{r4, r7, pc}
 80153c6:	bf00      	nop
 80153c8:	080261c0 	.word	0x080261c0
 80153cc:	080261f4 	.word	0x080261f4
 80153d0:	08026214 	.word	0x08026214
 80153d4:	0802623c 	.word	0x0802623c
 80153d8:	08026260 	.word	0x08026260

080153dc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b086      	sub	sp, #24
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	607b      	str	r3, [r7, #4]
 80153e4:	4603      	mov	r3, r0
 80153e6:	73fb      	strb	r3, [r7, #15]
 80153e8:	460b      	mov	r3, r1
 80153ea:	81bb      	strh	r3, [r7, #12]
 80153ec:	4613      	mov	r3, r2
 80153ee:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80153f0:	89bb      	ldrh	r3, [r7, #12]
 80153f2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d105      	bne.n	8015406 <tcp_pbuf_prealloc+0x2a>
 80153fa:	4b30      	ldr	r3, [pc, #192]	; (80154bc <tcp_pbuf_prealloc+0xe0>)
 80153fc:	22e8      	movs	r2, #232	; 0xe8
 80153fe:	4930      	ldr	r1, [pc, #192]	; (80154c0 <tcp_pbuf_prealloc+0xe4>)
 8015400:	4830      	ldr	r0, [pc, #192]	; (80154c4 <tcp_pbuf_prealloc+0xe8>)
 8015402:	f005 fd1f 	bl	801ae44 <printf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015406:	6a3b      	ldr	r3, [r7, #32]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d105      	bne.n	8015418 <tcp_pbuf_prealloc+0x3c>
 801540c:	4b2b      	ldr	r3, [pc, #172]	; (80154bc <tcp_pbuf_prealloc+0xe0>)
 801540e:	22e9      	movs	r2, #233	; 0xe9
 8015410:	492d      	ldr	r1, [pc, #180]	; (80154c8 <tcp_pbuf_prealloc+0xec>)
 8015412:	482c      	ldr	r0, [pc, #176]	; (80154c4 <tcp_pbuf_prealloc+0xe8>)
 8015414:	f005 fd16 	bl	801ae44 <printf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015418:	89ba      	ldrh	r2, [r7, #12]
 801541a:	897b      	ldrh	r3, [r7, #10]
 801541c:	429a      	cmp	r2, r3
 801541e:	d221      	bcs.n	8015464 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015420:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015424:	f003 0302 	and.w	r3, r3, #2
 8015428:	2b00      	cmp	r3, #0
 801542a:	d111      	bne.n	8015450 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801542c:	6a3b      	ldr	r3, [r7, #32]
 801542e:	8b5b      	ldrh	r3, [r3, #26]
 8015430:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015434:	2b00      	cmp	r3, #0
 8015436:	d115      	bne.n	8015464 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015438:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801543c:	2b00      	cmp	r3, #0
 801543e:	d007      	beq.n	8015450 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015440:	6a3b      	ldr	r3, [r7, #32]
 8015442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015444:	2b00      	cmp	r3, #0
 8015446:	d103      	bne.n	8015450 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015448:	6a3b      	ldr	r3, [r7, #32]
 801544a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801544c:	2b00      	cmp	r3, #0
 801544e:	d009      	beq.n	8015464 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015450:	89bb      	ldrh	r3, [r7, #12]
 8015452:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015456:	f023 0203 	bic.w	r2, r3, #3
 801545a:	897b      	ldrh	r3, [r7, #10]
 801545c:	4293      	cmp	r3, r2
 801545e:	bf28      	it	cs
 8015460:	4613      	movcs	r3, r2
 8015462:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015464:	8af9      	ldrh	r1, [r7, #22]
 8015466:	7bfb      	ldrb	r3, [r7, #15]
 8015468:	f44f 7220 	mov.w	r2, #640	; 0x280
 801546c:	4618      	mov	r0, r3
 801546e:	f7fa ffc9 	bl	8010404 <pbuf_alloc>
 8015472:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015474:	693b      	ldr	r3, [r7, #16]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d101      	bne.n	801547e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801547a:	2300      	movs	r3, #0
 801547c:	e019      	b.n	80154b2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801547e:	693b      	ldr	r3, [r7, #16]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d006      	beq.n	8015494 <tcp_pbuf_prealloc+0xb8>
 8015486:	4b0d      	ldr	r3, [pc, #52]	; (80154bc <tcp_pbuf_prealloc+0xe0>)
 8015488:	f240 120b 	movw	r2, #267	; 0x10b
 801548c:	490f      	ldr	r1, [pc, #60]	; (80154cc <tcp_pbuf_prealloc+0xf0>)
 801548e:	480d      	ldr	r0, [pc, #52]	; (80154c4 <tcp_pbuf_prealloc+0xe8>)
 8015490:	f005 fcd8 	bl	801ae44 <printf>
  *oversize = p->len - length;
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	895a      	ldrh	r2, [r3, #10]
 8015498:	89bb      	ldrh	r3, [r7, #12]
 801549a:	1ad3      	subs	r3, r2, r3
 801549c:	b29a      	uxth	r2, r3
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80154a2:	693b      	ldr	r3, [r7, #16]
 80154a4:	89ba      	ldrh	r2, [r7, #12]
 80154a6:	811a      	strh	r2, [r3, #8]
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	891a      	ldrh	r2, [r3, #8]
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	815a      	strh	r2, [r3, #10]
  return p;
 80154b0:	693b      	ldr	r3, [r7, #16]
}
 80154b2:	4618      	mov	r0, r3
 80154b4:	3718      	adds	r7, #24
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd80      	pop	{r7, pc}
 80154ba:	bf00      	nop
 80154bc:	080261c0 	.word	0x080261c0
 80154c0:	08026278 	.word	0x08026278
 80154c4:	08026214 	.word	0x08026214
 80154c8:	0802629c 	.word	0x0802629c
 80154cc:	080262bc 	.word	0x080262bc

080154d0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b082      	sub	sp, #8
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	460b      	mov	r3, r1
 80154da:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d106      	bne.n	80154f0 <tcp_write_checks+0x20>
 80154e2:	4b33      	ldr	r3, [pc, #204]	; (80155b0 <tcp_write_checks+0xe0>)
 80154e4:	f240 1233 	movw	r2, #307	; 0x133
 80154e8:	4932      	ldr	r1, [pc, #200]	; (80155b4 <tcp_write_checks+0xe4>)
 80154ea:	4833      	ldr	r0, [pc, #204]	; (80155b8 <tcp_write_checks+0xe8>)
 80154ec:	f005 fcaa 	bl	801ae44 <printf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	7d1b      	ldrb	r3, [r3, #20]
 80154f4:	2b04      	cmp	r3, #4
 80154f6:	d00e      	beq.n	8015516 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80154fc:	2b07      	cmp	r3, #7
 80154fe:	d00a      	beq.n	8015516 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015504:	2b02      	cmp	r3, #2
 8015506:	d006      	beq.n	8015516 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801550c:	2b03      	cmp	r3, #3
 801550e:	d002      	beq.n	8015516 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015510:	f06f 030a 	mvn.w	r3, #10
 8015514:	e048      	b.n	80155a8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015516:	887b      	ldrh	r3, [r7, #2]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d101      	bne.n	8015520 <tcp_write_checks+0x50>
    return ERR_OK;
 801551c:	2300      	movs	r3, #0
 801551e:	e043      	b.n	80155a8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015526:	887a      	ldrh	r2, [r7, #2]
 8015528:	429a      	cmp	r2, r3
 801552a:	d909      	bls.n	8015540 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	8b5b      	ldrh	r3, [r3, #26]
 8015530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015534:	b29a      	uxth	r2, r3
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801553a:	f04f 33ff 	mov.w	r3, #4294967295
 801553e:	e033      	b.n	80155a8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015546:	2b08      	cmp	r3, #8
 8015548:	d909      	bls.n	801555e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	8b5b      	ldrh	r3, [r3, #26]
 801554e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015552:	b29a      	uxth	r2, r3
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015558:	f04f 33ff 	mov.w	r3, #4294967295
 801555c:	e024      	b.n	80155a8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015564:	2b00      	cmp	r3, #0
 8015566:	d00f      	beq.n	8015588 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801556c:	2b00      	cmp	r3, #0
 801556e:	d11a      	bne.n	80155a6 <tcp_write_checks+0xd6>
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015574:	2b00      	cmp	r3, #0
 8015576:	d116      	bne.n	80155a6 <tcp_write_checks+0xd6>
 8015578:	4b0d      	ldr	r3, [pc, #52]	; (80155b0 <tcp_write_checks+0xe0>)
 801557a:	f240 1255 	movw	r2, #341	; 0x155
 801557e:	490f      	ldr	r1, [pc, #60]	; (80155bc <tcp_write_checks+0xec>)
 8015580:	480d      	ldr	r0, [pc, #52]	; (80155b8 <tcp_write_checks+0xe8>)
 8015582:	f005 fc5f 	bl	801ae44 <printf>
 8015586:	e00e      	b.n	80155a6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801558c:	2b00      	cmp	r3, #0
 801558e:	d103      	bne.n	8015598 <tcp_write_checks+0xc8>
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015594:	2b00      	cmp	r3, #0
 8015596:	d006      	beq.n	80155a6 <tcp_write_checks+0xd6>
 8015598:	4b05      	ldr	r3, [pc, #20]	; (80155b0 <tcp_write_checks+0xe0>)
 801559a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801559e:	4908      	ldr	r1, [pc, #32]	; (80155c0 <tcp_write_checks+0xf0>)
 80155a0:	4805      	ldr	r0, [pc, #20]	; (80155b8 <tcp_write_checks+0xe8>)
 80155a2:	f005 fc4f 	bl	801ae44 <printf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80155a6:	2300      	movs	r3, #0
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3708      	adds	r7, #8
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	080261c0 	.word	0x080261c0
 80155b4:	080262d0 	.word	0x080262d0
 80155b8:	08026214 	.word	0x08026214
 80155bc:	080262f0 	.word	0x080262f0
 80155c0:	0802632c 	.word	0x0802632c

080155c4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80155c4:	b590      	push	{r4, r7, lr}
 80155c6:	b09b      	sub	sp, #108	; 0x6c
 80155c8:	af04      	add	r7, sp, #16
 80155ca:	60f8      	str	r0, [r7, #12]
 80155cc:	60b9      	str	r1, [r7, #8]
 80155ce:	4611      	mov	r1, r2
 80155d0:	461a      	mov	r2, r3
 80155d2:	460b      	mov	r3, r1
 80155d4:	80fb      	strh	r3, [r7, #6]
 80155d6:	4613      	mov	r3, r2
 80155d8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80155da:	2300      	movs	r3, #0
 80155dc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80155de:	2300      	movs	r3, #0
 80155e0:	653b      	str	r3, [r7, #80]	; 0x50
 80155e2:	2300      	movs	r3, #0
 80155e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80155e6:	2300      	movs	r3, #0
 80155e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80155ea:	2300      	movs	r3, #0
 80155ec:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80155ee:	2300      	movs	r3, #0
 80155f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80155f4:	2300      	movs	r3, #0
 80155f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80155fa:	2300      	movs	r3, #0
 80155fc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80155fe:	2300      	movs	r3, #0
 8015600:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015602:	2300      	movs	r3, #0
 8015604:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d109      	bne.n	8015620 <tcp_write+0x5c>
 801560c:	4ba4      	ldr	r3, [pc, #656]	; (80158a0 <tcp_write+0x2dc>)
 801560e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8015612:	49a4      	ldr	r1, [pc, #656]	; (80158a4 <tcp_write+0x2e0>)
 8015614:	48a4      	ldr	r0, [pc, #656]	; (80158a8 <tcp_write+0x2e4>)
 8015616:	f005 fc15 	bl	801ae44 <printf>
 801561a:	f06f 030f 	mvn.w	r3, #15
 801561e:	e32a      	b.n	8015c76 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015626:	085b      	lsrs	r3, r3, #1
 8015628:	b29a      	uxth	r2, r3
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801562e:	4293      	cmp	r3, r2
 8015630:	bf28      	it	cs
 8015632:	4613      	movcs	r3, r2
 8015634:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015638:	2b00      	cmp	r3, #0
 801563a:	d102      	bne.n	8015642 <tcp_write+0x7e>
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015640:	e000      	b.n	8015644 <tcp_write+0x80>
 8015642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015644:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d109      	bne.n	8015660 <tcp_write+0x9c>
 801564c:	4b94      	ldr	r3, [pc, #592]	; (80158a0 <tcp_write+0x2dc>)
 801564e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8015652:	4996      	ldr	r1, [pc, #600]	; (80158ac <tcp_write+0x2e8>)
 8015654:	4894      	ldr	r0, [pc, #592]	; (80158a8 <tcp_write+0x2e4>)
 8015656:	f005 fbf5 	bl	801ae44 <printf>
 801565a:	f06f 030f 	mvn.w	r3, #15
 801565e:	e30a      	b.n	8015c76 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015660:	88fb      	ldrh	r3, [r7, #6]
 8015662:	4619      	mov	r1, r3
 8015664:	68f8      	ldr	r0, [r7, #12]
 8015666:	f7ff ff33 	bl	80154d0 <tcp_write_checks>
 801566a:	4603      	mov	r3, r0
 801566c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015670:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015674:	2b00      	cmp	r3, #0
 8015676:	d002      	beq.n	801567e <tcp_write+0xba>
    return err;
 8015678:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801567c:	e2fb      	b.n	8015c76 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015684:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015688:	2300      	movs	r3, #0
 801568a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015692:	2b00      	cmp	r3, #0
 8015694:	f000 80f6 	beq.w	8015884 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801569c:	653b      	str	r3, [r7, #80]	; 0x50
 801569e:	e002      	b.n	80156a6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80156a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80156a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d1f8      	bne.n	80156a0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80156ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156b0:	7a9b      	ldrb	r3, [r3, #10]
 80156b2:	009b      	lsls	r3, r3, #2
 80156b4:	b29b      	uxth	r3, r3
 80156b6:	f003 0304 	and.w	r3, r3, #4
 80156ba:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80156bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80156be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156c0:	891b      	ldrh	r3, [r3, #8]
 80156c2:	4619      	mov	r1, r3
 80156c4:	8c3b      	ldrh	r3, [r7, #32]
 80156c6:	440b      	add	r3, r1
 80156c8:	429a      	cmp	r2, r3
 80156ca:	da06      	bge.n	80156da <tcp_write+0x116>
 80156cc:	4b74      	ldr	r3, [pc, #464]	; (80158a0 <tcp_write+0x2dc>)
 80156ce:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80156d2:	4977      	ldr	r1, [pc, #476]	; (80158b0 <tcp_write+0x2ec>)
 80156d4:	4874      	ldr	r0, [pc, #464]	; (80158a8 <tcp_write+0x2e4>)
 80156d6:	f005 fbb5 	bl	801ae44 <printf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80156da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156dc:	891a      	ldrh	r2, [r3, #8]
 80156de:	8c3b      	ldrh	r3, [r7, #32]
 80156e0:	4413      	add	r3, r2
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80156e6:	1ad3      	subs	r3, r2, r3
 80156e8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80156f0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80156f2:	8a7b      	ldrh	r3, [r7, #18]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d026      	beq.n	8015746 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80156f8:	8a7b      	ldrh	r3, [r7, #18]
 80156fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80156fc:	429a      	cmp	r2, r3
 80156fe:	d206      	bcs.n	801570e <tcp_write+0x14a>
 8015700:	4b67      	ldr	r3, [pc, #412]	; (80158a0 <tcp_write+0x2dc>)
 8015702:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8015706:	496b      	ldr	r1, [pc, #428]	; (80158b4 <tcp_write+0x2f0>)
 8015708:	4867      	ldr	r0, [pc, #412]	; (80158a8 <tcp_write+0x2e4>)
 801570a:	f005 fb9b 	bl	801ae44 <printf>
      seg = last_unsent;
 801570e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015710:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015712:	8a7b      	ldrh	r3, [r7, #18]
 8015714:	88fa      	ldrh	r2, [r7, #6]
 8015716:	4293      	cmp	r3, r2
 8015718:	bf28      	it	cs
 801571a:	4613      	movcs	r3, r2
 801571c:	b29b      	uxth	r3, r3
 801571e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015720:	4293      	cmp	r3, r2
 8015722:	bf28      	it	cs
 8015724:	4613      	movcs	r3, r2
 8015726:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015728:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801572c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801572e:	4413      	add	r3, r2
 8015730:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015734:	8a7a      	ldrh	r2, [r7, #18]
 8015736:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015738:	1ad3      	subs	r3, r2, r3
 801573a:	b29b      	uxth	r3, r3
 801573c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801573e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015740:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015742:	1ad3      	subs	r3, r2, r3
 8015744:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8015746:	8a7b      	ldrh	r3, [r7, #18]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d00b      	beq.n	8015764 <tcp_write+0x1a0>
 801574c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015750:	88fb      	ldrh	r3, [r7, #6]
 8015752:	429a      	cmp	r2, r3
 8015754:	d006      	beq.n	8015764 <tcp_write+0x1a0>
 8015756:	4b52      	ldr	r3, [pc, #328]	; (80158a0 <tcp_write+0x2dc>)
 8015758:	f44f 7200 	mov.w	r2, #512	; 0x200
 801575c:	4956      	ldr	r1, [pc, #344]	; (80158b8 <tcp_write+0x2f4>)
 801575e:	4852      	ldr	r0, [pc, #328]	; (80158a8 <tcp_write+0x2e4>)
 8015760:	f005 fb70 	bl	801ae44 <printf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015764:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015768:	88fb      	ldrh	r3, [r7, #6]
 801576a:	429a      	cmp	r2, r3
 801576c:	f080 8167 	bcs.w	8015a3e <tcp_write+0x47a>
 8015770:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015772:	2b00      	cmp	r3, #0
 8015774:	f000 8163 	beq.w	8015a3e <tcp_write+0x47a>
 8015778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801577a:	891b      	ldrh	r3, [r3, #8]
 801577c:	2b00      	cmp	r3, #0
 801577e:	f000 815e 	beq.w	8015a3e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015782:	88fa      	ldrh	r2, [r7, #6]
 8015784:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015788:	1ad2      	subs	r2, r2, r3
 801578a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801578c:	4293      	cmp	r3, r2
 801578e:	bfa8      	it	ge
 8015790:	4613      	movge	r3, r2
 8015792:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8015794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015796:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015798:	797b      	ldrb	r3, [r7, #5]
 801579a:	f003 0301 	and.w	r3, r3, #1
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d027      	beq.n	80157f2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80157a2:	f107 0012 	add.w	r0, r7, #18
 80157a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80157a8:	8bf9      	ldrh	r1, [r7, #30]
 80157aa:	2301      	movs	r3, #1
 80157ac:	9302      	str	r3, [sp, #8]
 80157ae:	797b      	ldrb	r3, [r7, #5]
 80157b0:	9301      	str	r3, [sp, #4]
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	9300      	str	r3, [sp, #0]
 80157b6:	4603      	mov	r3, r0
 80157b8:	2000      	movs	r0, #0
 80157ba:	f7ff fe0f 	bl	80153dc <tcp_pbuf_prealloc>
 80157be:	6578      	str	r0, [r7, #84]	; 0x54
 80157c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	f000 8225 	beq.w	8015c12 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80157c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157ca:	6858      	ldr	r0, [r3, #4]
 80157cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80157d0:	68ba      	ldr	r2, [r7, #8]
 80157d2:	4413      	add	r3, r2
 80157d4:	8bfa      	ldrh	r2, [r7, #30]
 80157d6:	4619      	mov	r1, r3
 80157d8:	f005 f886 	bl	801a8e8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80157dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80157de:	f7fb f983 	bl	8010ae8 <pbuf_clen>
 80157e2:	4603      	mov	r3, r0
 80157e4:	461a      	mov	r2, r3
 80157e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80157ea:	4413      	add	r3, r2
 80157ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80157f0:	e041      	b.n	8015876 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80157f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157f4:	685b      	ldr	r3, [r3, #4]
 80157f6:	637b      	str	r3, [r7, #52]	; 0x34
 80157f8:	e002      	b.n	8015800 <tcp_write+0x23c>
 80157fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	637b      	str	r3, [r7, #52]	; 0x34
 8015800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d1f8      	bne.n	80157fa <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801580a:	7b1b      	ldrb	r3, [r3, #12]
 801580c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015810:	2b00      	cmp	r3, #0
 8015812:	d115      	bne.n	8015840 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015816:	685b      	ldr	r3, [r3, #4]
 8015818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801581a:	8952      	ldrh	r2, [r2, #10]
 801581c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801581e:	68ba      	ldr	r2, [r7, #8]
 8015820:	429a      	cmp	r2, r3
 8015822:	d10d      	bne.n	8015840 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015824:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015828:	2b00      	cmp	r3, #0
 801582a:	d006      	beq.n	801583a <tcp_write+0x276>
 801582c:	4b1c      	ldr	r3, [pc, #112]	; (80158a0 <tcp_write+0x2dc>)
 801582e:	f240 2231 	movw	r2, #561	; 0x231
 8015832:	4922      	ldr	r1, [pc, #136]	; (80158bc <tcp_write+0x2f8>)
 8015834:	481c      	ldr	r0, [pc, #112]	; (80158a8 <tcp_write+0x2e4>)
 8015836:	f005 fb05 	bl	801ae44 <printf>
          extendlen = seglen;
 801583a:	8bfb      	ldrh	r3, [r7, #30]
 801583c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801583e:	e01a      	b.n	8015876 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015840:	8bfb      	ldrh	r3, [r7, #30]
 8015842:	2201      	movs	r2, #1
 8015844:	4619      	mov	r1, r3
 8015846:	2000      	movs	r0, #0
 8015848:	f7fa fddc 	bl	8010404 <pbuf_alloc>
 801584c:	6578      	str	r0, [r7, #84]	; 0x54
 801584e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015850:	2b00      	cmp	r3, #0
 8015852:	f000 81e0 	beq.w	8015c16 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8015856:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801585a:	68ba      	ldr	r2, [r7, #8]
 801585c:	441a      	add	r2, r3
 801585e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015860:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015862:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015864:	f7fb f940 	bl	8010ae8 <pbuf_clen>
 8015868:	4603      	mov	r3, r0
 801586a:	461a      	mov	r2, r3
 801586c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015870:	4413      	add	r3, r2
 8015872:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8015876:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801587a:	8bfb      	ldrh	r3, [r7, #30]
 801587c:	4413      	add	r3, r2
 801587e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8015882:	e0dc      	b.n	8015a3e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801588a:	2b00      	cmp	r3, #0
 801588c:	f000 80d7 	beq.w	8015a3e <tcp_write+0x47a>
 8015890:	4b03      	ldr	r3, [pc, #12]	; (80158a0 <tcp_write+0x2dc>)
 8015892:	f240 224a 	movw	r2, #586	; 0x24a
 8015896:	490a      	ldr	r1, [pc, #40]	; (80158c0 <tcp_write+0x2fc>)
 8015898:	4803      	ldr	r0, [pc, #12]	; (80158a8 <tcp_write+0x2e4>)
 801589a:	f005 fad3 	bl	801ae44 <printf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801589e:	e0ce      	b.n	8015a3e <tcp_write+0x47a>
 80158a0:	080261c0 	.word	0x080261c0
 80158a4:	08026360 	.word	0x08026360
 80158a8:	08026214 	.word	0x08026214
 80158ac:	08026378 	.word	0x08026378
 80158b0:	080263ac 	.word	0x080263ac
 80158b4:	080263c4 	.word	0x080263c4
 80158b8:	080263e4 	.word	0x080263e4
 80158bc:	08026404 	.word	0x08026404
 80158c0:	08026430 	.word	0x08026430
    struct pbuf *p;
    u16_t left = len - pos;
 80158c4:	88fa      	ldrh	r2, [r7, #6]
 80158c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80158ca:	1ad3      	subs	r3, r2, r3
 80158cc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80158ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80158d2:	b29b      	uxth	r3, r3
 80158d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80158d6:	1ad3      	subs	r3, r2, r3
 80158d8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80158da:	8b7a      	ldrh	r2, [r7, #26]
 80158dc:	8bbb      	ldrh	r3, [r7, #28]
 80158de:	4293      	cmp	r3, r2
 80158e0:	bf28      	it	cs
 80158e2:	4613      	movcs	r3, r2
 80158e4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80158e6:	797b      	ldrb	r3, [r7, #5]
 80158e8:	f003 0301 	and.w	r3, r3, #1
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d036      	beq.n	801595e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80158f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80158f4:	b29a      	uxth	r2, r3
 80158f6:	8b3b      	ldrh	r3, [r7, #24]
 80158f8:	4413      	add	r3, r2
 80158fa:	b299      	uxth	r1, r3
 80158fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158fe:	2b00      	cmp	r3, #0
 8015900:	bf0c      	ite	eq
 8015902:	2301      	moveq	r3, #1
 8015904:	2300      	movne	r3, #0
 8015906:	b2db      	uxtb	r3, r3
 8015908:	f107 0012 	add.w	r0, r7, #18
 801590c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801590e:	9302      	str	r3, [sp, #8]
 8015910:	797b      	ldrb	r3, [r7, #5]
 8015912:	9301      	str	r3, [sp, #4]
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	9300      	str	r3, [sp, #0]
 8015918:	4603      	mov	r3, r0
 801591a:	2036      	movs	r0, #54	; 0x36
 801591c:	f7ff fd5e 	bl	80153dc <tcp_pbuf_prealloc>
 8015920:	6338      	str	r0, [r7, #48]	; 0x30
 8015922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015924:	2b00      	cmp	r3, #0
 8015926:	f000 8178 	beq.w	8015c1a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801592c:	895b      	ldrh	r3, [r3, #10]
 801592e:	8b3a      	ldrh	r2, [r7, #24]
 8015930:	429a      	cmp	r2, r3
 8015932:	d906      	bls.n	8015942 <tcp_write+0x37e>
 8015934:	4b8c      	ldr	r3, [pc, #560]	; (8015b68 <tcp_write+0x5a4>)
 8015936:	f240 2266 	movw	r2, #614	; 0x266
 801593a:	498c      	ldr	r1, [pc, #560]	; (8015b6c <tcp_write+0x5a8>)
 801593c:	488c      	ldr	r0, [pc, #560]	; (8015b70 <tcp_write+0x5ac>)
 801593e:	f005 fa81 	bl	801ae44 <printf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8015942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015944:	685a      	ldr	r2, [r3, #4]
 8015946:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801594a:	18d0      	adds	r0, r2, r3
 801594c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015950:	68ba      	ldr	r2, [r7, #8]
 8015952:	4413      	add	r3, r2
 8015954:	8b3a      	ldrh	r2, [r7, #24]
 8015956:	4619      	mov	r1, r3
 8015958:	f004 ffc6 	bl	801a8e8 <memcpy>
 801595c:	e02f      	b.n	80159be <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801595e:	8a7b      	ldrh	r3, [r7, #18]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d006      	beq.n	8015972 <tcp_write+0x3ae>
 8015964:	4b80      	ldr	r3, [pc, #512]	; (8015b68 <tcp_write+0x5a4>)
 8015966:	f240 2271 	movw	r2, #625	; 0x271
 801596a:	4982      	ldr	r1, [pc, #520]	; (8015b74 <tcp_write+0x5b0>)
 801596c:	4880      	ldr	r0, [pc, #512]	; (8015b70 <tcp_write+0x5ac>)
 801596e:	f005 fa69 	bl	801ae44 <printf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015972:	8b3b      	ldrh	r3, [r7, #24]
 8015974:	2201      	movs	r2, #1
 8015976:	4619      	mov	r1, r3
 8015978:	2036      	movs	r0, #54	; 0x36
 801597a:	f7fa fd43 	bl	8010404 <pbuf_alloc>
 801597e:	6178      	str	r0, [r7, #20]
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	2b00      	cmp	r3, #0
 8015984:	f000 814b 	beq.w	8015c1e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8015988:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801598c:	68ba      	ldr	r2, [r7, #8]
 801598e:	441a      	add	r2, r3
 8015990:	697b      	ldr	r3, [r7, #20]
 8015992:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015998:	b29b      	uxth	r3, r3
 801599a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801599e:	4619      	mov	r1, r3
 80159a0:	2036      	movs	r0, #54	; 0x36
 80159a2:	f7fa fd2f 	bl	8010404 <pbuf_alloc>
 80159a6:	6338      	str	r0, [r7, #48]	; 0x30
 80159a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d103      	bne.n	80159b6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80159ae:	6978      	ldr	r0, [r7, #20]
 80159b0:	f7fb f80c 	bl	80109cc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80159b4:	e136      	b.n	8015c24 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80159b6:	6979      	ldr	r1, [r7, #20]
 80159b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159ba:	f7fb f8d5 	bl	8010b68 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80159be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159c0:	f7fb f892 	bl	8010ae8 <pbuf_clen>
 80159c4:	4603      	mov	r3, r0
 80159c6:	461a      	mov	r2, r3
 80159c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80159cc:	4413      	add	r3, r2
 80159ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80159d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80159d6:	2b09      	cmp	r3, #9
 80159d8:	d903      	bls.n	80159e2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80159da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159dc:	f7fa fff6 	bl	80109cc <pbuf_free>
      goto memerr;
 80159e0:	e120      	b.n	8015c24 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80159e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80159ea:	441a      	add	r2, r3
 80159ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159f0:	9300      	str	r3, [sp, #0]
 80159f2:	4613      	mov	r3, r2
 80159f4:	2200      	movs	r2, #0
 80159f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80159f8:	68f8      	ldr	r0, [r7, #12]
 80159fa:	f7ff fc51 	bl	80152a0 <tcp_create_segment>
 80159fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	f000 810d 	beq.w	8015c22 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d102      	bne.n	8015a14 <tcp_write+0x450>
      queue = seg;
 8015a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a10:	647b      	str	r3, [r7, #68]	; 0x44
 8015a12:	e00c      	b.n	8015a2e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8015a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d106      	bne.n	8015a28 <tcp_write+0x464>
 8015a1a:	4b53      	ldr	r3, [pc, #332]	; (8015b68 <tcp_write+0x5a4>)
 8015a1c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015a20:	4955      	ldr	r1, [pc, #340]	; (8015b78 <tcp_write+0x5b4>)
 8015a22:	4853      	ldr	r0, [pc, #332]	; (8015b70 <tcp_write+0x5ac>)
 8015a24:	f005 fa0e 	bl	801ae44 <printf>
      prev_seg->next = seg;
 8015a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015a2c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a30:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8015a32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015a36:	8b3b      	ldrh	r3, [r7, #24]
 8015a38:	4413      	add	r3, r2
 8015a3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015a3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015a42:	88fb      	ldrh	r3, [r7, #6]
 8015a44:	429a      	cmp	r2, r3
 8015a46:	f4ff af3d 	bcc.w	80158c4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8015a4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d02c      	beq.n	8015aaa <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a56:	e01e      	b.n	8015a96 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8015a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a5a:	891a      	ldrh	r2, [r3, #8]
 8015a5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015a5e:	4413      	add	r3, r2
 8015a60:	b29a      	uxth	r2, r3
 8015a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a64:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8015a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d110      	bne.n	8015a90 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a70:	685b      	ldr	r3, [r3, #4]
 8015a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a74:	8952      	ldrh	r2, [r2, #10]
 8015a76:	4413      	add	r3, r2
 8015a78:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015a7a:	68b9      	ldr	r1, [r7, #8]
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f004 ff33 	bl	801a8e8 <memcpy>
        p->len += oversize_used;
 8015a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a84:	895a      	ldrh	r2, [r3, #10]
 8015a86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015a88:	4413      	add	r3, r2
 8015a8a:	b29a      	uxth	r2, r3
 8015a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a8e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d1dd      	bne.n	8015a58 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8015a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a9e:	891a      	ldrh	r2, [r3, #8]
 8015aa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015aa2:	4413      	add	r3, r2
 8015aa4:	b29a      	uxth	r2, r3
 8015aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015aa8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015aaa:	8a7a      	ldrh	r2, [r7, #18]
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8015ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d018      	beq.n	8015aea <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d106      	bne.n	8015acc <tcp_write+0x508>
 8015abe:	4b2a      	ldr	r3, [pc, #168]	; (8015b68 <tcp_write+0x5a4>)
 8015ac0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8015ac4:	492d      	ldr	r1, [pc, #180]	; (8015b7c <tcp_write+0x5b8>)
 8015ac6:	482a      	ldr	r0, [pc, #168]	; (8015b70 <tcp_write+0x5ac>)
 8015ac8:	f005 f9bc 	bl	801ae44 <printf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8015acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7fb f848 	bl	8010b68 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ada:	891a      	ldrh	r2, [r3, #8]
 8015adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ade:	891b      	ldrh	r3, [r3, #8]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	b29a      	uxth	r2, r3
 8015ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ae6:	811a      	strh	r2, [r3, #8]
 8015ae8:	e037      	b.n	8015b5a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8015aea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d034      	beq.n	8015b5a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8015af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d003      	beq.n	8015afe <tcp_write+0x53a>
 8015af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015af8:	685b      	ldr	r3, [r3, #4]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d106      	bne.n	8015b0c <tcp_write+0x548>
 8015afe:	4b1a      	ldr	r3, [pc, #104]	; (8015b68 <tcp_write+0x5a4>)
 8015b00:	f240 22e6 	movw	r2, #742	; 0x2e6
 8015b04:	491e      	ldr	r1, [pc, #120]	; (8015b80 <tcp_write+0x5bc>)
 8015b06:	481a      	ldr	r0, [pc, #104]	; (8015b70 <tcp_write+0x5ac>)
 8015b08:	f005 f99c 	bl	801ae44 <printf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b0e:	685b      	ldr	r3, [r3, #4]
 8015b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b12:	e009      	b.n	8015b28 <tcp_write+0x564>
      p->tot_len += extendlen;
 8015b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b16:	891a      	ldrh	r2, [r3, #8]
 8015b18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015b1a:	4413      	add	r3, r2
 8015b1c:	b29a      	uxth	r2, r3
 8015b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b20:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d1f1      	bne.n	8015b14 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8015b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b32:	891a      	ldrh	r2, [r3, #8]
 8015b34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015b36:	4413      	add	r3, r2
 8015b38:	b29a      	uxth	r2, r3
 8015b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b3c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b40:	895a      	ldrh	r2, [r3, #10]
 8015b42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015b44:	4413      	add	r3, r2
 8015b46:	b29a      	uxth	r2, r3
 8015b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b4e:	891a      	ldrh	r2, [r3, #8]
 8015b50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015b52:	4413      	add	r3, r2
 8015b54:	b29a      	uxth	r2, r3
 8015b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b58:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d111      	bne.n	8015b84 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b64:	66da      	str	r2, [r3, #108]	; 0x6c
 8015b66:	e010      	b.n	8015b8a <tcp_write+0x5c6>
 8015b68:	080261c0 	.word	0x080261c0
 8015b6c:	08026460 	.word	0x08026460
 8015b70:	08026214 	.word	0x08026214
 8015b74:	080264a0 	.word	0x080264a0
 8015b78:	080264b0 	.word	0x080264b0
 8015b7c:	080264c4 	.word	0x080264c4
 8015b80:	080264fc 	.word	0x080264fc
  } else {
    last_unsent->next = queue;
 8015b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b88:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015b8e:	88fb      	ldrh	r3, [r7, #6]
 8015b90:	441a      	add	r2, r3
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015b9c:	88fb      	ldrh	r3, [r7, #6]
 8015b9e:	1ad3      	subs	r3, r2, r3
 8015ba0:	b29a      	uxth	r2, r3
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015bae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d00e      	beq.n	8015bda <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d10a      	bne.n	8015bda <tcp_write+0x616>
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d106      	bne.n	8015bda <tcp_write+0x616>
 8015bcc:	4b2c      	ldr	r3, [pc, #176]	; (8015c80 <tcp_write+0x6bc>)
 8015bce:	f240 3212 	movw	r2, #786	; 0x312
 8015bd2:	492c      	ldr	r1, [pc, #176]	; (8015c84 <tcp_write+0x6c0>)
 8015bd4:	482c      	ldr	r0, [pc, #176]	; (8015c88 <tcp_write+0x6c4>)
 8015bd6:	f005 f935 	bl	801ae44 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8015bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d016      	beq.n	8015c0e <tcp_write+0x64a>
 8015be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015be2:	68db      	ldr	r3, [r3, #12]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d012      	beq.n	8015c0e <tcp_write+0x64a>
 8015be8:	797b      	ldrb	r3, [r7, #5]
 8015bea:	f003 0302 	and.w	r3, r3, #2
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d10d      	bne.n	8015c0e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8015bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bf4:	68db      	ldr	r3, [r3, #12]
 8015bf6:	899b      	ldrh	r3, [r3, #12]
 8015bf8:	b29c      	uxth	r4, r3
 8015bfa:	2008      	movs	r0, #8
 8015bfc:	f7f9 fb7c 	bl	800f2f8 <lwip_htons>
 8015c00:	4603      	mov	r3, r0
 8015c02:	461a      	mov	r2, r3
 8015c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c06:	68db      	ldr	r3, [r3, #12]
 8015c08:	4322      	orrs	r2, r4
 8015c0a:	b292      	uxth	r2, r2
 8015c0c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	e031      	b.n	8015c76 <tcp_write+0x6b2>
          goto memerr;
 8015c12:	bf00      	nop
 8015c14:	e006      	b.n	8015c24 <tcp_write+0x660>
            goto memerr;
 8015c16:	bf00      	nop
 8015c18:	e004      	b.n	8015c24 <tcp_write+0x660>
        goto memerr;
 8015c1a:	bf00      	nop
 8015c1c:	e002      	b.n	8015c24 <tcp_write+0x660>
        goto memerr;
 8015c1e:	bf00      	nop
 8015c20:	e000      	b.n	8015c24 <tcp_write+0x660>
      goto memerr;
 8015c22:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	8b5b      	ldrh	r3, [r3, #26]
 8015c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c2c:	b29a      	uxth	r2, r3
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d002      	beq.n	8015c3e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8015c38:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015c3a:	f7fa fec7 	bl	80109cc <pbuf_free>
  }
  if (queue != NULL) {
 8015c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d002      	beq.n	8015c4a <tcp_write+0x686>
    tcp_segs_free(queue);
 8015c44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015c46:	f7fc fb51 	bl	80122ec <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d00e      	beq.n	8015c72 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d10a      	bne.n	8015c72 <tcp_write+0x6ae>
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d106      	bne.n	8015c72 <tcp_write+0x6ae>
 8015c64:	4b06      	ldr	r3, [pc, #24]	; (8015c80 <tcp_write+0x6bc>)
 8015c66:	f240 3227 	movw	r2, #807	; 0x327
 8015c6a:	4906      	ldr	r1, [pc, #24]	; (8015c84 <tcp_write+0x6c0>)
 8015c6c:	4806      	ldr	r0, [pc, #24]	; (8015c88 <tcp_write+0x6c4>)
 8015c6e:	f005 f8e9 	bl	801ae44 <printf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	375c      	adds	r7, #92	; 0x5c
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd90      	pop	{r4, r7, pc}
 8015c7e:	bf00      	nop
 8015c80:	080261c0 	.word	0x080261c0
 8015c84:	08026534 	.word	0x08026534
 8015c88:	08026214 	.word	0x08026214

08015c8c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015c8c:	b590      	push	{r4, r7, lr}
 8015c8e:	b08b      	sub	sp, #44	; 0x2c
 8015c90:	af02      	add	r7, sp, #8
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	460b      	mov	r3, r1
 8015c96:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	61fb      	str	r3, [r7, #28]
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d106      	bne.n	8015cb8 <tcp_split_unsent_seg+0x2c>
 8015caa:	4b95      	ldr	r3, [pc, #596]	; (8015f00 <tcp_split_unsent_seg+0x274>)
 8015cac:	f240 324b 	movw	r2, #843	; 0x34b
 8015cb0:	4994      	ldr	r1, [pc, #592]	; (8015f04 <tcp_split_unsent_seg+0x278>)
 8015cb2:	4895      	ldr	r0, [pc, #596]	; (8015f08 <tcp_split_unsent_seg+0x27c>)
 8015cb4:	f005 f8c6 	bl	801ae44 <printf>

  useg = pcb->unsent;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015cbc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015cbe:	697b      	ldr	r3, [r7, #20]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d102      	bne.n	8015cca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8015cc8:	e116      	b.n	8015ef8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015cca:	887b      	ldrh	r3, [r7, #2]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d109      	bne.n	8015ce4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015cd0:	4b8b      	ldr	r3, [pc, #556]	; (8015f00 <tcp_split_unsent_seg+0x274>)
 8015cd2:	f240 3253 	movw	r2, #851	; 0x353
 8015cd6:	498d      	ldr	r1, [pc, #564]	; (8015f0c <tcp_split_unsent_seg+0x280>)
 8015cd8:	488b      	ldr	r0, [pc, #556]	; (8015f08 <tcp_split_unsent_seg+0x27c>)
 8015cda:	f005 f8b3 	bl	801ae44 <printf>
    return ERR_VAL;
 8015cde:	f06f 0305 	mvn.w	r3, #5
 8015ce2:	e109      	b.n	8015ef8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015ce4:	697b      	ldr	r3, [r7, #20]
 8015ce6:	891b      	ldrh	r3, [r3, #8]
 8015ce8:	887a      	ldrh	r2, [r7, #2]
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d301      	bcc.n	8015cf2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	e102      	b.n	8015ef8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015cf6:	887a      	ldrh	r2, [r7, #2]
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d906      	bls.n	8015d0a <tcp_split_unsent_seg+0x7e>
 8015cfc:	4b80      	ldr	r3, [pc, #512]	; (8015f00 <tcp_split_unsent_seg+0x274>)
 8015cfe:	f240 325b 	movw	r2, #859	; 0x35b
 8015d02:	4983      	ldr	r1, [pc, #524]	; (8015f10 <tcp_split_unsent_seg+0x284>)
 8015d04:	4880      	ldr	r0, [pc, #512]	; (8015f08 <tcp_split_unsent_seg+0x27c>)
 8015d06:	f005 f89d 	bl	801ae44 <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015d0a:	697b      	ldr	r3, [r7, #20]
 8015d0c:	891b      	ldrh	r3, [r3, #8]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d106      	bne.n	8015d20 <tcp_split_unsent_seg+0x94>
 8015d12:	4b7b      	ldr	r3, [pc, #492]	; (8015f00 <tcp_split_unsent_seg+0x274>)
 8015d14:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015d18:	497e      	ldr	r1, [pc, #504]	; (8015f14 <tcp_split_unsent_seg+0x288>)
 8015d1a:	487b      	ldr	r0, [pc, #492]	; (8015f08 <tcp_split_unsent_seg+0x27c>)
 8015d1c:	f005 f892 	bl	801ae44 <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015d20:	697b      	ldr	r3, [r7, #20]
 8015d22:	7a9b      	ldrb	r3, [r3, #10]
 8015d24:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015d26:	7bfb      	ldrb	r3, [r7, #15]
 8015d28:	009b      	lsls	r3, r3, #2
 8015d2a:	b2db      	uxtb	r3, r3
 8015d2c:	f003 0304 	and.w	r3, r3, #4
 8015d30:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015d32:	697b      	ldr	r3, [r7, #20]
 8015d34:	891a      	ldrh	r2, [r3, #8]
 8015d36:	887b      	ldrh	r3, [r7, #2]
 8015d38:	1ad3      	subs	r3, r2, r3
 8015d3a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015d3c:	7bbb      	ldrb	r3, [r7, #14]
 8015d3e:	b29a      	uxth	r2, r3
 8015d40:	89bb      	ldrh	r3, [r7, #12]
 8015d42:	4413      	add	r3, r2
 8015d44:	b29b      	uxth	r3, r3
 8015d46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015d4a:	4619      	mov	r1, r3
 8015d4c:	2036      	movs	r0, #54	; 0x36
 8015d4e:	f7fa fb59 	bl	8010404 <pbuf_alloc>
 8015d52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015d54:	693b      	ldr	r3, [r7, #16]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	f000 80b7 	beq.w	8015eca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015d5c:	697b      	ldr	r3, [r7, #20]
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	891a      	ldrh	r2, [r3, #8]
 8015d62:	697b      	ldr	r3, [r7, #20]
 8015d64:	891b      	ldrh	r3, [r3, #8]
 8015d66:	1ad3      	subs	r3, r2, r3
 8015d68:	b29a      	uxth	r2, r3
 8015d6a:	887b      	ldrh	r3, [r7, #2]
 8015d6c:	4413      	add	r3, r2
 8015d6e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015d70:	697b      	ldr	r3, [r7, #20]
 8015d72:	6858      	ldr	r0, [r3, #4]
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	685a      	ldr	r2, [r3, #4]
 8015d78:	7bbb      	ldrb	r3, [r7, #14]
 8015d7a:	18d1      	adds	r1, r2, r3
 8015d7c:	897b      	ldrh	r3, [r7, #10]
 8015d7e:	89ba      	ldrh	r2, [r7, #12]
 8015d80:	f7fb f82a 	bl	8010dd8 <pbuf_copy_partial>
 8015d84:	4603      	mov	r3, r0
 8015d86:	461a      	mov	r2, r3
 8015d88:	89bb      	ldrh	r3, [r7, #12]
 8015d8a:	4293      	cmp	r3, r2
 8015d8c:	f040 809f 	bne.w	8015ece <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	68db      	ldr	r3, [r3, #12]
 8015d94:	899b      	ldrh	r3, [r3, #12]
 8015d96:	b29b      	uxth	r3, r3
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7f9 faad 	bl	800f2f8 <lwip_htons>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	b2db      	uxtb	r3, r3
 8015da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015da6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015da8:	2300      	movs	r3, #0
 8015daa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015dac:	7efb      	ldrb	r3, [r7, #27]
 8015dae:	f003 0308 	and.w	r3, r3, #8
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d007      	beq.n	8015dc6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015db6:	7efb      	ldrb	r3, [r7, #27]
 8015db8:	f023 0308 	bic.w	r3, r3, #8
 8015dbc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015dbe:	7ebb      	ldrb	r3, [r7, #26]
 8015dc0:	f043 0308 	orr.w	r3, r3, #8
 8015dc4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015dc6:	7efb      	ldrb	r3, [r7, #27]
 8015dc8:	f003 0301 	and.w	r3, r3, #1
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d007      	beq.n	8015de0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015dd0:	7efb      	ldrb	r3, [r7, #27]
 8015dd2:	f023 0301 	bic.w	r3, r3, #1
 8015dd6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015dd8:	7ebb      	ldrb	r3, [r7, #26]
 8015dda:	f043 0301 	orr.w	r3, r3, #1
 8015dde:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	68db      	ldr	r3, [r3, #12]
 8015de4:	685b      	ldr	r3, [r3, #4]
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7f9 fa9b 	bl	800f322 <lwip_htonl>
 8015dec:	4602      	mov	r2, r0
 8015dee:	887b      	ldrh	r3, [r7, #2]
 8015df0:	18d1      	adds	r1, r2, r3
 8015df2:	7eba      	ldrb	r2, [r7, #26]
 8015df4:	7bfb      	ldrb	r3, [r7, #15]
 8015df6:	9300      	str	r3, [sp, #0]
 8015df8:	460b      	mov	r3, r1
 8015dfa:	6939      	ldr	r1, [r7, #16]
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f7ff fa4f 	bl	80152a0 <tcp_create_segment>
 8015e02:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015e04:	69fb      	ldr	r3, [r7, #28]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d063      	beq.n	8015ed2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f7fa fe6a 	bl	8010ae8 <pbuf_clen>
 8015e14:	4603      	mov	r3, r0
 8015e16:	461a      	mov	r2, r3
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e1e:	1a9b      	subs	r3, r3, r2
 8015e20:	b29a      	uxth	r2, r3
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015e28:	697b      	ldr	r3, [r7, #20]
 8015e2a:	6858      	ldr	r0, [r3, #4]
 8015e2c:	697b      	ldr	r3, [r7, #20]
 8015e2e:	685b      	ldr	r3, [r3, #4]
 8015e30:	891a      	ldrh	r2, [r3, #8]
 8015e32:	89bb      	ldrh	r3, [r7, #12]
 8015e34:	1ad3      	subs	r3, r2, r3
 8015e36:	b29b      	uxth	r3, r3
 8015e38:	4619      	mov	r1, r3
 8015e3a:	f7fa fc41 	bl	80106c0 <pbuf_realloc>
  useg->len -= remainder;
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	891a      	ldrh	r2, [r3, #8]
 8015e42:	89bb      	ldrh	r3, [r7, #12]
 8015e44:	1ad3      	subs	r3, r2, r3
 8015e46:	b29a      	uxth	r2, r3
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015e4c:	697b      	ldr	r3, [r7, #20]
 8015e4e:	68db      	ldr	r3, [r3, #12]
 8015e50:	899b      	ldrh	r3, [r3, #12]
 8015e52:	b29c      	uxth	r4, r3
 8015e54:	7efb      	ldrb	r3, [r7, #27]
 8015e56:	b29b      	uxth	r3, r3
 8015e58:	4618      	mov	r0, r3
 8015e5a:	f7f9 fa4d 	bl	800f2f8 <lwip_htons>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	461a      	mov	r2, r3
 8015e62:	697b      	ldr	r3, [r7, #20]
 8015e64:	68db      	ldr	r3, [r3, #12]
 8015e66:	4322      	orrs	r2, r4
 8015e68:	b292      	uxth	r2, r2
 8015e6a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015e6c:	697b      	ldr	r3, [r7, #20]
 8015e6e:	685b      	ldr	r3, [r3, #4]
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7fa fe39 	bl	8010ae8 <pbuf_clen>
 8015e76:	4603      	mov	r3, r0
 8015e78:	461a      	mov	r2, r3
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e80:	4413      	add	r3, r2
 8015e82:	b29a      	uxth	r2, r3
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015e8a:	69fb      	ldr	r3, [r7, #28]
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f7fa fe2a 	bl	8010ae8 <pbuf_clen>
 8015e94:	4603      	mov	r3, r0
 8015e96:	461a      	mov	r2, r3
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e9e:	4413      	add	r3, r2
 8015ea0:	b29a      	uxth	r2, r3
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015ea8:	697b      	ldr	r3, [r7, #20]
 8015eaa:	681a      	ldr	r2, [r3, #0]
 8015eac:	69fb      	ldr	r3, [r7, #28]
 8015eae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015eb0:	697b      	ldr	r3, [r7, #20]
 8015eb2:	69fa      	ldr	r2, [r7, #28]
 8015eb4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015eb6:	69fb      	ldr	r3, [r7, #28]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d103      	bne.n	8015ec6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	e016      	b.n	8015ef8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015eca:	bf00      	nop
 8015ecc:	e002      	b.n	8015ed4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015ece:	bf00      	nop
 8015ed0:	e000      	b.n	8015ed4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015ed2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015ed4:	69fb      	ldr	r3, [r7, #28]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d006      	beq.n	8015ee8 <tcp_split_unsent_seg+0x25c>
 8015eda:	4b09      	ldr	r3, [pc, #36]	; (8015f00 <tcp_split_unsent_seg+0x274>)
 8015edc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015ee0:	490d      	ldr	r1, [pc, #52]	; (8015f18 <tcp_split_unsent_seg+0x28c>)
 8015ee2:	4809      	ldr	r0, [pc, #36]	; (8015f08 <tcp_split_unsent_seg+0x27c>)
 8015ee4:	f004 ffae 	bl	801ae44 <printf>
  if (p != NULL) {
 8015ee8:	693b      	ldr	r3, [r7, #16]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d002      	beq.n	8015ef4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015eee:	6938      	ldr	r0, [r7, #16]
 8015ef0:	f7fa fd6c 	bl	80109cc <pbuf_free>
  }

  return ERR_MEM;
 8015ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	3724      	adds	r7, #36	; 0x24
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd90      	pop	{r4, r7, pc}
 8015f00:	080261c0 	.word	0x080261c0
 8015f04:	08026554 	.word	0x08026554
 8015f08:	08026214 	.word	0x08026214
 8015f0c:	08026578 	.word	0x08026578
 8015f10:	0802659c 	.word	0x0802659c
 8015f14:	080265ac 	.word	0x080265ac
 8015f18:	080265bc 	.word	0x080265bc

08015f1c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015f1c:	b590      	push	{r4, r7, lr}
 8015f1e:	b085      	sub	sp, #20
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d106      	bne.n	8015f38 <tcp_send_fin+0x1c>
 8015f2a:	4b21      	ldr	r3, [pc, #132]	; (8015fb0 <tcp_send_fin+0x94>)
 8015f2c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015f30:	4920      	ldr	r1, [pc, #128]	; (8015fb4 <tcp_send_fin+0x98>)
 8015f32:	4821      	ldr	r0, [pc, #132]	; (8015fb8 <tcp_send_fin+0x9c>)
 8015f34:	f004 ff86 	bl	801ae44 <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d02e      	beq.n	8015f9e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f44:	60fb      	str	r3, [r7, #12]
 8015f46:	e002      	b.n	8015f4e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d1f8      	bne.n	8015f48 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	68db      	ldr	r3, [r3, #12]
 8015f5a:	899b      	ldrh	r3, [r3, #12]
 8015f5c:	b29b      	uxth	r3, r3
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7f9 f9ca 	bl	800f2f8 <lwip_htons>
 8015f64:	4603      	mov	r3, r0
 8015f66:	b2db      	uxtb	r3, r3
 8015f68:	f003 0307 	and.w	r3, r3, #7
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d116      	bne.n	8015f9e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	68db      	ldr	r3, [r3, #12]
 8015f74:	899b      	ldrh	r3, [r3, #12]
 8015f76:	b29c      	uxth	r4, r3
 8015f78:	2001      	movs	r0, #1
 8015f7a:	f7f9 f9bd 	bl	800f2f8 <lwip_htons>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	461a      	mov	r2, r3
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	68db      	ldr	r3, [r3, #12]
 8015f86:	4322      	orrs	r2, r4
 8015f88:	b292      	uxth	r2, r2
 8015f8a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	8b5b      	ldrh	r3, [r3, #26]
 8015f90:	f043 0320 	orr.w	r3, r3, #32
 8015f94:	b29a      	uxth	r2, r3
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	e004      	b.n	8015fa8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015f9e:	2101      	movs	r1, #1
 8015fa0:	6878      	ldr	r0, [r7, #4]
 8015fa2:	f000 f80b 	bl	8015fbc <tcp_enqueue_flags>
 8015fa6:	4603      	mov	r3, r0
}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	3714      	adds	r7, #20
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bd90      	pop	{r4, r7, pc}
 8015fb0:	080261c0 	.word	0x080261c0
 8015fb4:	080265c8 	.word	0x080265c8
 8015fb8:	08026214 	.word	0x08026214

08015fbc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b08a      	sub	sp, #40	; 0x28
 8015fc0:	af02      	add	r7, sp, #8
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	460b      	mov	r3, r1
 8015fc6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015fcc:	2300      	movs	r3, #0
 8015fce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015fd0:	78fb      	ldrb	r3, [r7, #3]
 8015fd2:	f003 0303 	and.w	r3, r3, #3
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d106      	bne.n	8015fe8 <tcp_enqueue_flags+0x2c>
 8015fda:	4b67      	ldr	r3, [pc, #412]	; (8016178 <tcp_enqueue_flags+0x1bc>)
 8015fdc:	f240 4211 	movw	r2, #1041	; 0x411
 8015fe0:	4966      	ldr	r1, [pc, #408]	; (801617c <tcp_enqueue_flags+0x1c0>)
 8015fe2:	4867      	ldr	r0, [pc, #412]	; (8016180 <tcp_enqueue_flags+0x1c4>)
 8015fe4:	f004 ff2e 	bl	801ae44 <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d106      	bne.n	8015ffc <tcp_enqueue_flags+0x40>
 8015fee:	4b62      	ldr	r3, [pc, #392]	; (8016178 <tcp_enqueue_flags+0x1bc>)
 8015ff0:	f240 4213 	movw	r2, #1043	; 0x413
 8015ff4:	4963      	ldr	r1, [pc, #396]	; (8016184 <tcp_enqueue_flags+0x1c8>)
 8015ff6:	4862      	ldr	r0, [pc, #392]	; (8016180 <tcp_enqueue_flags+0x1c4>)
 8015ff8:	f004 ff24 	bl	801ae44 <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015ffc:	78fb      	ldrb	r3, [r7, #3]
 8015ffe:	f003 0302 	and.w	r3, r3, #2
 8016002:	2b00      	cmp	r3, #0
 8016004:	d001      	beq.n	801600a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016006:	2301      	movs	r3, #1
 8016008:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801600a:	7ffb      	ldrb	r3, [r7, #31]
 801600c:	009b      	lsls	r3, r3, #2
 801600e:	b2db      	uxtb	r3, r3
 8016010:	f003 0304 	and.w	r3, r3, #4
 8016014:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016016:	7dfb      	ldrb	r3, [r7, #23]
 8016018:	b29b      	uxth	r3, r3
 801601a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801601e:	4619      	mov	r1, r3
 8016020:	2036      	movs	r0, #54	; 0x36
 8016022:	f7fa f9ef 	bl	8010404 <pbuf_alloc>
 8016026:	6138      	str	r0, [r7, #16]
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d109      	bne.n	8016042 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	8b5b      	ldrh	r3, [r3, #26]
 8016032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016036:	b29a      	uxth	r2, r3
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801603c:	f04f 33ff 	mov.w	r3, #4294967295
 8016040:	e095      	b.n	801616e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	895a      	ldrh	r2, [r3, #10]
 8016046:	7dfb      	ldrb	r3, [r7, #23]
 8016048:	b29b      	uxth	r3, r3
 801604a:	429a      	cmp	r2, r3
 801604c:	d206      	bcs.n	801605c <tcp_enqueue_flags+0xa0>
 801604e:	4b4a      	ldr	r3, [pc, #296]	; (8016178 <tcp_enqueue_flags+0x1bc>)
 8016050:	f240 4239 	movw	r2, #1081	; 0x439
 8016054:	494c      	ldr	r1, [pc, #304]	; (8016188 <tcp_enqueue_flags+0x1cc>)
 8016056:	484a      	ldr	r0, [pc, #296]	; (8016180 <tcp_enqueue_flags+0x1c4>)
 8016058:	f004 fef4 	bl	801ae44 <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016060:	78fa      	ldrb	r2, [r7, #3]
 8016062:	7ffb      	ldrb	r3, [r7, #31]
 8016064:	9300      	str	r3, [sp, #0]
 8016066:	460b      	mov	r3, r1
 8016068:	6939      	ldr	r1, [r7, #16]
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f7ff f918 	bl	80152a0 <tcp_create_segment>
 8016070:	60f8      	str	r0, [r7, #12]
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d109      	bne.n	801608c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	8b5b      	ldrh	r3, [r3, #26]
 801607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016080:	b29a      	uxth	r2, r3
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016086:	f04f 33ff 	mov.w	r3, #4294967295
 801608a:	e070      	b.n	801616e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	68db      	ldr	r3, [r3, #12]
 8016090:	f003 0303 	and.w	r3, r3, #3
 8016094:	2b00      	cmp	r3, #0
 8016096:	d006      	beq.n	80160a6 <tcp_enqueue_flags+0xea>
 8016098:	4b37      	ldr	r3, [pc, #220]	; (8016178 <tcp_enqueue_flags+0x1bc>)
 801609a:	f240 4242 	movw	r2, #1090	; 0x442
 801609e:	493b      	ldr	r1, [pc, #236]	; (801618c <tcp_enqueue_flags+0x1d0>)
 80160a0:	4837      	ldr	r0, [pc, #220]	; (8016180 <tcp_enqueue_flags+0x1c4>)
 80160a2:	f004 fecf 	bl	801ae44 <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	891b      	ldrh	r3, [r3, #8]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d006      	beq.n	80160bc <tcp_enqueue_flags+0x100>
 80160ae:	4b32      	ldr	r3, [pc, #200]	; (8016178 <tcp_enqueue_flags+0x1bc>)
 80160b0:	f240 4243 	movw	r2, #1091	; 0x443
 80160b4:	4936      	ldr	r1, [pc, #216]	; (8016190 <tcp_enqueue_flags+0x1d4>)
 80160b6:	4832      	ldr	r0, [pc, #200]	; (8016180 <tcp_enqueue_flags+0x1c4>)
 80160b8:	f004 fec4 	bl	801ae44 <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d103      	bne.n	80160cc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	68fa      	ldr	r2, [r7, #12]
 80160c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80160ca:	e00d      	b.n	80160e8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160d0:	61bb      	str	r3, [r7, #24]
 80160d2:	e002      	b.n	80160da <tcp_enqueue_flags+0x11e>
 80160d4:	69bb      	ldr	r3, [r7, #24]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	61bb      	str	r3, [r7, #24]
 80160da:	69bb      	ldr	r3, [r7, #24]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d1f8      	bne.n	80160d4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80160e2:	69bb      	ldr	r3, [r7, #24]
 80160e4:	68fa      	ldr	r2, [r7, #12]
 80160e6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	2200      	movs	r2, #0
 80160ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80160f0:	78fb      	ldrb	r3, [r7, #3]
 80160f2:	f003 0302 	and.w	r3, r3, #2
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d104      	bne.n	8016104 <tcp_enqueue_flags+0x148>
 80160fa:	78fb      	ldrb	r3, [r7, #3]
 80160fc:	f003 0301 	and.w	r3, r3, #1
 8016100:	2b00      	cmp	r3, #0
 8016102:	d004      	beq.n	801610e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016108:	1c5a      	adds	r2, r3, #1
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801610e:	78fb      	ldrb	r3, [r7, #3]
 8016110:	f003 0301 	and.w	r3, r3, #1
 8016114:	2b00      	cmp	r3, #0
 8016116:	d006      	beq.n	8016126 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	8b5b      	ldrh	r3, [r3, #26]
 801611c:	f043 0320 	orr.w	r3, r3, #32
 8016120:	b29a      	uxth	r2, r3
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	4618      	mov	r0, r3
 801612c:	f7fa fcdc 	bl	8010ae8 <pbuf_clen>
 8016130:	4603      	mov	r3, r0
 8016132:	461a      	mov	r2, r3
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801613a:	4413      	add	r3, r2
 801613c:	b29a      	uxth	r2, r3
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801614a:	2b00      	cmp	r3, #0
 801614c:	d00e      	beq.n	801616c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016152:	2b00      	cmp	r3, #0
 8016154:	d10a      	bne.n	801616c <tcp_enqueue_flags+0x1b0>
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801615a:	2b00      	cmp	r3, #0
 801615c:	d106      	bne.n	801616c <tcp_enqueue_flags+0x1b0>
 801615e:	4b06      	ldr	r3, [pc, #24]	; (8016178 <tcp_enqueue_flags+0x1bc>)
 8016160:	f240 4265 	movw	r2, #1125	; 0x465
 8016164:	490b      	ldr	r1, [pc, #44]	; (8016194 <tcp_enqueue_flags+0x1d8>)
 8016166:	4806      	ldr	r0, [pc, #24]	; (8016180 <tcp_enqueue_flags+0x1c4>)
 8016168:	f004 fe6c 	bl	801ae44 <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801616c:	2300      	movs	r3, #0
}
 801616e:	4618      	mov	r0, r3
 8016170:	3720      	adds	r7, #32
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}
 8016176:	bf00      	nop
 8016178:	080261c0 	.word	0x080261c0
 801617c:	080265e4 	.word	0x080265e4
 8016180:	08026214 	.word	0x08026214
 8016184:	0802663c 	.word	0x0802663c
 8016188:	0802665c 	.word	0x0802665c
 801618c:	08026698 	.word	0x08026698
 8016190:	080266b0 	.word	0x080266b0
 8016194:	080266dc 	.word	0x080266dc

08016198 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016198:	b5b0      	push	{r4, r5, r7, lr}
 801619a:	b08a      	sub	sp, #40	; 0x28
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d106      	bne.n	80161b4 <tcp_output+0x1c>
 80161a6:	4b9e      	ldr	r3, [pc, #632]	; (8016420 <tcp_output+0x288>)
 80161a8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80161ac:	499d      	ldr	r1, [pc, #628]	; (8016424 <tcp_output+0x28c>)
 80161ae:	489e      	ldr	r0, [pc, #632]	; (8016428 <tcp_output+0x290>)
 80161b0:	f004 fe48 	bl	801ae44 <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	7d1b      	ldrb	r3, [r3, #20]
 80161b8:	2b01      	cmp	r3, #1
 80161ba:	d106      	bne.n	80161ca <tcp_output+0x32>
 80161bc:	4b98      	ldr	r3, [pc, #608]	; (8016420 <tcp_output+0x288>)
 80161be:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80161c2:	499a      	ldr	r1, [pc, #616]	; (801642c <tcp_output+0x294>)
 80161c4:	4898      	ldr	r0, [pc, #608]	; (8016428 <tcp_output+0x290>)
 80161c6:	f004 fe3d 	bl	801ae44 <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80161ca:	4b99      	ldr	r3, [pc, #612]	; (8016430 <tcp_output+0x298>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	687a      	ldr	r2, [r7, #4]
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d101      	bne.n	80161d8 <tcp_output+0x40>
    return ERR_OK;
 80161d4:	2300      	movs	r3, #0
 80161d6:	e1ce      	b.n	8016576 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80161e4:	4293      	cmp	r3, r2
 80161e6:	bf28      	it	cs
 80161e8:	4613      	movcs	r3, r2
 80161ea:	b29b      	uxth	r3, r3
 80161ec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80161f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d10b      	bne.n	8016212 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	8b5b      	ldrh	r3, [r3, #26]
 80161fe:	f003 0302 	and.w	r3, r3, #2
 8016202:	2b00      	cmp	r3, #0
 8016204:	f000 81aa 	beq.w	801655c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f000 fdcb 	bl	8016da4 <tcp_send_empty_ack>
 801620e:	4603      	mov	r3, r0
 8016210:	e1b1      	b.n	8016576 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016212:	6879      	ldr	r1, [r7, #4]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	3304      	adds	r3, #4
 8016218:	461a      	mov	r2, r3
 801621a:	6878      	ldr	r0, [r7, #4]
 801621c:	f7ff f824 	bl	8015268 <tcp_route>
 8016220:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016222:	697b      	ldr	r3, [r7, #20]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d102      	bne.n	801622e <tcp_output+0x96>
    return ERR_RTE;
 8016228:	f06f 0303 	mvn.w	r3, #3
 801622c:	e1a3      	b.n	8016576 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d003      	beq.n	801623c <tcp_output+0xa4>
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d111      	bne.n	8016260 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d002      	beq.n	8016248 <tcp_output+0xb0>
 8016242:	697b      	ldr	r3, [r7, #20]
 8016244:	3304      	adds	r3, #4
 8016246:	e000      	b.n	801624a <tcp_output+0xb2>
 8016248:	2300      	movs	r3, #0
 801624a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801624c:	693b      	ldr	r3, [r7, #16]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d102      	bne.n	8016258 <tcp_output+0xc0>
      return ERR_RTE;
 8016252:	f06f 0303 	mvn.w	r3, #3
 8016256:	e18e      	b.n	8016576 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016258:	693b      	ldr	r3, [r7, #16]
 801625a:	681a      	ldr	r2, [r3, #0]
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016262:	68db      	ldr	r3, [r3, #12]
 8016264:	685b      	ldr	r3, [r3, #4]
 8016266:	4618      	mov	r0, r3
 8016268:	f7f9 f85b 	bl	800f322 <lwip_htonl>
 801626c:	4602      	mov	r2, r0
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016272:	1ad3      	subs	r3, r2, r3
 8016274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016276:	8912      	ldrh	r2, [r2, #8]
 8016278:	4413      	add	r3, r2
 801627a:	69ba      	ldr	r2, [r7, #24]
 801627c:	429a      	cmp	r2, r3
 801627e:	d227      	bcs.n	80162d0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016286:	461a      	mov	r2, r3
 8016288:	69bb      	ldr	r3, [r7, #24]
 801628a:	4293      	cmp	r3, r2
 801628c:	d114      	bne.n	80162b8 <tcp_output+0x120>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016292:	2b00      	cmp	r3, #0
 8016294:	d110      	bne.n	80162b8 <tcp_output+0x120>
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801629c:	2b00      	cmp	r3, #0
 801629e:	d10b      	bne.n	80162b8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2200      	movs	r2, #0
 80162a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2201      	movs	r2, #1
 80162ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	2200      	movs	r2, #0
 80162b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	8b5b      	ldrh	r3, [r3, #26]
 80162bc:	f003 0302 	and.w	r3, r3, #2
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	f000 814d 	beq.w	8016560 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f000 fd6c 	bl	8016da4 <tcp_send_empty_ack>
 80162cc:	4603      	mov	r3, r0
 80162ce:	e152      	b.n	8016576 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	2200      	movs	r2, #0
 80162d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162dc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80162de:	6a3b      	ldr	r3, [r7, #32]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	f000 811c 	beq.w	801651e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80162e6:	e002      	b.n	80162ee <tcp_output+0x156>
 80162e8:	6a3b      	ldr	r3, [r7, #32]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	623b      	str	r3, [r7, #32]
 80162ee:	6a3b      	ldr	r3, [r7, #32]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d1f8      	bne.n	80162e8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80162f6:	e112      	b.n	801651e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80162f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fa:	68db      	ldr	r3, [r3, #12]
 80162fc:	899b      	ldrh	r3, [r3, #12]
 80162fe:	b29b      	uxth	r3, r3
 8016300:	4618      	mov	r0, r3
 8016302:	f7f8 fff9 	bl	800f2f8 <lwip_htons>
 8016306:	4603      	mov	r3, r0
 8016308:	b2db      	uxtb	r3, r3
 801630a:	f003 0304 	and.w	r3, r3, #4
 801630e:	2b00      	cmp	r3, #0
 8016310:	d006      	beq.n	8016320 <tcp_output+0x188>
 8016312:	4b43      	ldr	r3, [pc, #268]	; (8016420 <tcp_output+0x288>)
 8016314:	f240 5236 	movw	r2, #1334	; 0x536
 8016318:	4946      	ldr	r1, [pc, #280]	; (8016434 <tcp_output+0x29c>)
 801631a:	4843      	ldr	r0, [pc, #268]	; (8016428 <tcp_output+0x290>)
 801631c:	f004 fd92 	bl	801ae44 <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016324:	2b00      	cmp	r3, #0
 8016326:	d01f      	beq.n	8016368 <tcp_output+0x1d0>
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	8b5b      	ldrh	r3, [r3, #26]
 801632c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016330:	2b00      	cmp	r3, #0
 8016332:	d119      	bne.n	8016368 <tcp_output+0x1d0>
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016338:	2b00      	cmp	r3, #0
 801633a:	d00b      	beq.n	8016354 <tcp_output+0x1bc>
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d110      	bne.n	8016368 <tcp_output+0x1d0>
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801634a:	891a      	ldrh	r2, [r3, #8]
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016350:	429a      	cmp	r2, r3
 8016352:	d209      	bcs.n	8016368 <tcp_output+0x1d0>
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801635a:	2b00      	cmp	r3, #0
 801635c:	d004      	beq.n	8016368 <tcp_output+0x1d0>
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016364:	2b08      	cmp	r3, #8
 8016366:	d901      	bls.n	801636c <tcp_output+0x1d4>
 8016368:	2301      	movs	r3, #1
 801636a:	e000      	b.n	801636e <tcp_output+0x1d6>
 801636c:	2300      	movs	r3, #0
 801636e:	2b00      	cmp	r3, #0
 8016370:	d106      	bne.n	8016380 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	8b5b      	ldrh	r3, [r3, #26]
 8016376:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801637a:	2b00      	cmp	r3, #0
 801637c:	f000 80e4 	beq.w	8016548 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	7d1b      	ldrb	r3, [r3, #20]
 8016384:	2b02      	cmp	r3, #2
 8016386:	d00d      	beq.n	80163a4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638a:	68db      	ldr	r3, [r3, #12]
 801638c:	899b      	ldrh	r3, [r3, #12]
 801638e:	b29c      	uxth	r4, r3
 8016390:	2010      	movs	r0, #16
 8016392:	f7f8 ffb1 	bl	800f2f8 <lwip_htons>
 8016396:	4603      	mov	r3, r0
 8016398:	461a      	mov	r2, r3
 801639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801639c:	68db      	ldr	r3, [r3, #12]
 801639e:	4322      	orrs	r2, r4
 80163a0:	b292      	uxth	r2, r2
 80163a2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80163a4:	697a      	ldr	r2, [r7, #20]
 80163a6:	6879      	ldr	r1, [r7, #4]
 80163a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163aa:	f000 f909 	bl	80165c0 <tcp_output_segment>
 80163ae:	4603      	mov	r3, r0
 80163b0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80163b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d009      	beq.n	80163ce <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	8b5b      	ldrh	r3, [r3, #26]
 80163be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163c2:	b29a      	uxth	r2, r3
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	835a      	strh	r2, [r3, #26]
      return err;
 80163c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163cc:	e0d3      	b.n	8016576 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80163ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d0:	681a      	ldr	r2, [r3, #0]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	7d1b      	ldrb	r3, [r3, #20]
 80163da:	2b02      	cmp	r3, #2
 80163dc:	d006      	beq.n	80163ec <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	8b5b      	ldrh	r3, [r3, #26]
 80163e2:	f023 0303 	bic.w	r3, r3, #3
 80163e6:	b29a      	uxth	r2, r3
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80163ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ee:	68db      	ldr	r3, [r3, #12]
 80163f0:	685b      	ldr	r3, [r3, #4]
 80163f2:	4618      	mov	r0, r3
 80163f4:	f7f8 ff95 	bl	800f322 <lwip_htonl>
 80163f8:	4604      	mov	r4, r0
 80163fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fc:	891b      	ldrh	r3, [r3, #8]
 80163fe:	461d      	mov	r5, r3
 8016400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016402:	68db      	ldr	r3, [r3, #12]
 8016404:	899b      	ldrh	r3, [r3, #12]
 8016406:	b29b      	uxth	r3, r3
 8016408:	4618      	mov	r0, r3
 801640a:	f7f8 ff75 	bl	800f2f8 <lwip_htons>
 801640e:	4603      	mov	r3, r0
 8016410:	b2db      	uxtb	r3, r3
 8016412:	f003 0303 	and.w	r3, r3, #3
 8016416:	2b00      	cmp	r3, #0
 8016418:	d00e      	beq.n	8016438 <tcp_output+0x2a0>
 801641a:	2301      	movs	r3, #1
 801641c:	e00d      	b.n	801643a <tcp_output+0x2a2>
 801641e:	bf00      	nop
 8016420:	080261c0 	.word	0x080261c0
 8016424:	08026704 	.word	0x08026704
 8016428:	08026214 	.word	0x08026214
 801642c:	0802671c 	.word	0x0802671c
 8016430:	2000be28 	.word	0x2000be28
 8016434:	08026744 	.word	0x08026744
 8016438:	2300      	movs	r3, #0
 801643a:	442b      	add	r3, r5
 801643c:	4423      	add	r3, r4
 801643e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016444:	68bb      	ldr	r3, [r7, #8]
 8016446:	1ad3      	subs	r3, r2, r3
 8016448:	2b00      	cmp	r3, #0
 801644a:	da02      	bge.n	8016452 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	68ba      	ldr	r2, [r7, #8]
 8016450:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016454:	891b      	ldrh	r3, [r3, #8]
 8016456:	461c      	mov	r4, r3
 8016458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801645a:	68db      	ldr	r3, [r3, #12]
 801645c:	899b      	ldrh	r3, [r3, #12]
 801645e:	b29b      	uxth	r3, r3
 8016460:	4618      	mov	r0, r3
 8016462:	f7f8 ff49 	bl	800f2f8 <lwip_htons>
 8016466:	4603      	mov	r3, r0
 8016468:	b2db      	uxtb	r3, r3
 801646a:	f003 0303 	and.w	r3, r3, #3
 801646e:	2b00      	cmp	r3, #0
 8016470:	d001      	beq.n	8016476 <tcp_output+0x2de>
 8016472:	2301      	movs	r3, #1
 8016474:	e000      	b.n	8016478 <tcp_output+0x2e0>
 8016476:	2300      	movs	r3, #0
 8016478:	4423      	add	r3, r4
 801647a:	2b00      	cmp	r3, #0
 801647c:	d049      	beq.n	8016512 <tcp_output+0x37a>
      seg->next = NULL;
 801647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016480:	2200      	movs	r2, #0
 8016482:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016488:	2b00      	cmp	r3, #0
 801648a:	d105      	bne.n	8016498 <tcp_output+0x300>
        pcb->unacked = seg;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016490:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016494:	623b      	str	r3, [r7, #32]
 8016496:	e03f      	b.n	8016518 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801649a:	68db      	ldr	r3, [r3, #12]
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	4618      	mov	r0, r3
 80164a0:	f7f8 ff3f 	bl	800f322 <lwip_htonl>
 80164a4:	4604      	mov	r4, r0
 80164a6:	6a3b      	ldr	r3, [r7, #32]
 80164a8:	68db      	ldr	r3, [r3, #12]
 80164aa:	685b      	ldr	r3, [r3, #4]
 80164ac:	4618      	mov	r0, r3
 80164ae:	f7f8 ff38 	bl	800f322 <lwip_htonl>
 80164b2:	4603      	mov	r3, r0
 80164b4:	1ae3      	subs	r3, r4, r3
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	da24      	bge.n	8016504 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	3370      	adds	r3, #112	; 0x70
 80164be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80164c0:	e002      	b.n	80164c8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80164c2:	69fb      	ldr	r3, [r7, #28]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80164c8:	69fb      	ldr	r3, [r7, #28]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d011      	beq.n	80164f4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80164d0:	69fb      	ldr	r3, [r7, #28]
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	68db      	ldr	r3, [r3, #12]
 80164d6:	685b      	ldr	r3, [r3, #4]
 80164d8:	4618      	mov	r0, r3
 80164da:	f7f8 ff22 	bl	800f322 <lwip_htonl>
 80164de:	4604      	mov	r4, r0
 80164e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e2:	68db      	ldr	r3, [r3, #12]
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	4618      	mov	r0, r3
 80164e8:	f7f8 ff1b 	bl	800f322 <lwip_htonl>
 80164ec:	4603      	mov	r3, r0
 80164ee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	dbe6      	blt.n	80164c2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80164f4:	69fb      	ldr	r3, [r7, #28]
 80164f6:	681a      	ldr	r2, [r3, #0]
 80164f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80164fc:	69fb      	ldr	r3, [r7, #28]
 80164fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016500:	601a      	str	r2, [r3, #0]
 8016502:	e009      	b.n	8016518 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016504:	6a3b      	ldr	r3, [r7, #32]
 8016506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016508:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801650a:	6a3b      	ldr	r3, [r7, #32]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	623b      	str	r3, [r7, #32]
 8016510:	e002      	b.n	8016518 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016514:	f7fb feff 	bl	8012316 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801651c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016520:	2b00      	cmp	r3, #0
 8016522:	d012      	beq.n	801654a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016526:	68db      	ldr	r3, [r3, #12]
 8016528:	685b      	ldr	r3, [r3, #4]
 801652a:	4618      	mov	r0, r3
 801652c:	f7f8 fef9 	bl	800f322 <lwip_htonl>
 8016530:	4602      	mov	r2, r0
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016536:	1ad3      	subs	r3, r2, r3
 8016538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801653a:	8912      	ldrh	r2, [r2, #8]
 801653c:	4413      	add	r3, r2
  while (seg != NULL &&
 801653e:	69ba      	ldr	r2, [r7, #24]
 8016540:	429a      	cmp	r2, r3
 8016542:	f4bf aed9 	bcs.w	80162f8 <tcp_output+0x160>
 8016546:	e000      	b.n	801654a <tcp_output+0x3b2>
      break;
 8016548:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801654e:	2b00      	cmp	r3, #0
 8016550:	d108      	bne.n	8016564 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2200      	movs	r2, #0
 8016556:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801655a:	e004      	b.n	8016566 <tcp_output+0x3ce>
    goto output_done;
 801655c:	bf00      	nop
 801655e:	e002      	b.n	8016566 <tcp_output+0x3ce>
    goto output_done;
 8016560:	bf00      	nop
 8016562:	e000      	b.n	8016566 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016564:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	8b5b      	ldrh	r3, [r3, #26]
 801656a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801656e:	b29a      	uxth	r2, r3
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016574:	2300      	movs	r3, #0
}
 8016576:	4618      	mov	r0, r3
 8016578:	3728      	adds	r7, #40	; 0x28
 801657a:	46bd      	mov	sp, r7
 801657c:	bdb0      	pop	{r4, r5, r7, pc}
 801657e:	bf00      	nop

08016580 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b082      	sub	sp, #8
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d106      	bne.n	801659c <tcp_output_segment_busy+0x1c>
 801658e:	4b09      	ldr	r3, [pc, #36]	; (80165b4 <tcp_output_segment_busy+0x34>)
 8016590:	f240 529a 	movw	r2, #1434	; 0x59a
 8016594:	4908      	ldr	r1, [pc, #32]	; (80165b8 <tcp_output_segment_busy+0x38>)
 8016596:	4809      	ldr	r0, [pc, #36]	; (80165bc <tcp_output_segment_busy+0x3c>)
 8016598:	f004 fc54 	bl	801ae44 <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	685b      	ldr	r3, [r3, #4]
 80165a0:	7b9b      	ldrb	r3, [r3, #14]
 80165a2:	2b01      	cmp	r3, #1
 80165a4:	d001      	beq.n	80165aa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80165a6:	2301      	movs	r3, #1
 80165a8:	e000      	b.n	80165ac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80165aa:	2300      	movs	r3, #0
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	3708      	adds	r7, #8
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd80      	pop	{r7, pc}
 80165b4:	080261c0 	.word	0x080261c0
 80165b8:	0802675c 	.word	0x0802675c
 80165bc:	08026214 	.word	0x08026214

080165c0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80165c0:	b5b0      	push	{r4, r5, r7, lr}
 80165c2:	b08c      	sub	sp, #48	; 0x30
 80165c4:	af04      	add	r7, sp, #16
 80165c6:	60f8      	str	r0, [r7, #12]
 80165c8:	60b9      	str	r1, [r7, #8]
 80165ca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d106      	bne.n	80165e0 <tcp_output_segment+0x20>
 80165d2:	4b63      	ldr	r3, [pc, #396]	; (8016760 <tcp_output_segment+0x1a0>)
 80165d4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80165d8:	4962      	ldr	r1, [pc, #392]	; (8016764 <tcp_output_segment+0x1a4>)
 80165da:	4863      	ldr	r0, [pc, #396]	; (8016768 <tcp_output_segment+0x1a8>)
 80165dc:	f004 fc32 	bl	801ae44 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80165e0:	68bb      	ldr	r3, [r7, #8]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d106      	bne.n	80165f4 <tcp_output_segment+0x34>
 80165e6:	4b5e      	ldr	r3, [pc, #376]	; (8016760 <tcp_output_segment+0x1a0>)
 80165e8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80165ec:	495f      	ldr	r1, [pc, #380]	; (801676c <tcp_output_segment+0x1ac>)
 80165ee:	485e      	ldr	r0, [pc, #376]	; (8016768 <tcp_output_segment+0x1a8>)
 80165f0:	f004 fc28 	bl	801ae44 <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d106      	bne.n	8016608 <tcp_output_segment+0x48>
 80165fa:	4b59      	ldr	r3, [pc, #356]	; (8016760 <tcp_output_segment+0x1a0>)
 80165fc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016600:	495b      	ldr	r1, [pc, #364]	; (8016770 <tcp_output_segment+0x1b0>)
 8016602:	4859      	ldr	r0, [pc, #356]	; (8016768 <tcp_output_segment+0x1a8>)
 8016604:	f004 fc1e 	bl	801ae44 <printf>

  if (tcp_output_segment_busy(seg)) {
 8016608:	68f8      	ldr	r0, [r7, #12]
 801660a:	f7ff ffb9 	bl	8016580 <tcp_output_segment_busy>
 801660e:	4603      	mov	r3, r0
 8016610:	2b00      	cmp	r3, #0
 8016612:	d001      	beq.n	8016618 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016614:	2300      	movs	r3, #0
 8016616:	e09f      	b.n	8016758 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	68dc      	ldr	r4, [r3, #12]
 8016620:	4610      	mov	r0, r2
 8016622:	f7f8 fe7e 	bl	800f322 <lwip_htonl>
 8016626:	4603      	mov	r3, r0
 8016628:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801662a:	68bb      	ldr	r3, [r7, #8]
 801662c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	68dc      	ldr	r4, [r3, #12]
 8016632:	4610      	mov	r0, r2
 8016634:	f7f8 fe60 	bl	800f2f8 <lwip_htons>
 8016638:	4603      	mov	r3, r0
 801663a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801663c:	68bb      	ldr	r3, [r7, #8]
 801663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016640:	68ba      	ldr	r2, [r7, #8]
 8016642:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016644:	441a      	add	r2, r3
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	68db      	ldr	r3, [r3, #12]
 801664e:	3314      	adds	r3, #20
 8016650:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	7a9b      	ldrb	r3, [r3, #10]
 8016656:	f003 0301 	and.w	r3, r3, #1
 801665a:	2b00      	cmp	r3, #0
 801665c:	d015      	beq.n	801668a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	3304      	adds	r3, #4
 8016662:	461a      	mov	r2, r3
 8016664:	6879      	ldr	r1, [r7, #4]
 8016666:	f44f 7006 	mov.w	r0, #536	; 0x218
 801666a:	f7fc fa37 	bl	8012adc <tcp_eff_send_mss_netif>
 801666e:	4603      	mov	r3, r0
 8016670:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016672:	8b7b      	ldrh	r3, [r7, #26]
 8016674:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016678:	4618      	mov	r0, r3
 801667a:	f7f8 fe52 	bl	800f322 <lwip_htonl>
 801667e:	4602      	mov	r2, r0
 8016680:	69fb      	ldr	r3, [r7, #28]
 8016682:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016684:	69fb      	ldr	r3, [r7, #28]
 8016686:	3304      	adds	r3, #4
 8016688:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801668a:	68bb      	ldr	r3, [r7, #8]
 801668c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016690:	2b00      	cmp	r3, #0
 8016692:	da02      	bge.n	801669a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	2200      	movs	r2, #0
 8016698:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801669a:	68bb      	ldr	r3, [r7, #8]
 801669c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d10c      	bne.n	80166bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80166a2:	4b34      	ldr	r3, [pc, #208]	; (8016774 <tcp_output_segment+0x1b4>)
 80166a4:	681a      	ldr	r2, [r3, #0]
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	68db      	ldr	r3, [r3, #12]
 80166ae:	685b      	ldr	r3, [r3, #4]
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7f8 fe36 	bl	800f322 <lwip_htonl>
 80166b6:	4602      	mov	r2, r0
 80166b8:	68bb      	ldr	r3, [r7, #8]
 80166ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	68da      	ldr	r2, [r3, #12]
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	685b      	ldr	r3, [r3, #4]
 80166c6:	1ad3      	subs	r3, r2, r3
 80166c8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	685b      	ldr	r3, [r3, #4]
 80166ce:	8959      	ldrh	r1, [r3, #10]
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	685b      	ldr	r3, [r3, #4]
 80166d4:	8b3a      	ldrh	r2, [r7, #24]
 80166d6:	1a8a      	subs	r2, r1, r2
 80166d8:	b292      	uxth	r2, r2
 80166da:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	8919      	ldrh	r1, [r3, #8]
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	8b3a      	ldrh	r2, [r7, #24]
 80166e8:	1a8a      	subs	r2, r1, r2
 80166ea:	b292      	uxth	r2, r2
 80166ec:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	685b      	ldr	r3, [r3, #4]
 80166f2:	68fa      	ldr	r2, [r7, #12]
 80166f4:	68d2      	ldr	r2, [r2, #12]
 80166f6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	68db      	ldr	r3, [r3, #12]
 80166fc:	2200      	movs	r2, #0
 80166fe:	741a      	strb	r2, [r3, #16]
 8016700:	2200      	movs	r2, #0
 8016702:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	68db      	ldr	r3, [r3, #12]
 8016708:	f103 0214 	add.w	r2, r3, #20
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	7a9b      	ldrb	r3, [r3, #10]
 8016710:	009b      	lsls	r3, r3, #2
 8016712:	f003 0304 	and.w	r3, r3, #4
 8016716:	4413      	add	r3, r2
 8016718:	69fa      	ldr	r2, [r7, #28]
 801671a:	429a      	cmp	r2, r3
 801671c:	d006      	beq.n	801672c <tcp_output_segment+0x16c>
 801671e:	4b10      	ldr	r3, [pc, #64]	; (8016760 <tcp_output_segment+0x1a0>)
 8016720:	f240 621c 	movw	r2, #1564	; 0x61c
 8016724:	4914      	ldr	r1, [pc, #80]	; (8016778 <tcp_output_segment+0x1b8>)
 8016726:	4810      	ldr	r0, [pc, #64]	; (8016768 <tcp_output_segment+0x1a8>)
 8016728:	f004 fb8c 	bl	801ae44 <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	6858      	ldr	r0, [r3, #4]
 8016730:	68b9      	ldr	r1, [r7, #8]
 8016732:	68bb      	ldr	r3, [r7, #8]
 8016734:	1d1c      	adds	r4, r3, #4
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	7add      	ldrb	r5, [r3, #11]
 801673a:	68bb      	ldr	r3, [r7, #8]
 801673c:	7a9b      	ldrb	r3, [r3, #10]
 801673e:	687a      	ldr	r2, [r7, #4]
 8016740:	9202      	str	r2, [sp, #8]
 8016742:	2206      	movs	r2, #6
 8016744:	9201      	str	r2, [sp, #4]
 8016746:	9300      	str	r3, [sp, #0]
 8016748:	462b      	mov	r3, r5
 801674a:	4622      	mov	r2, r4
 801674c:	f002 fd96 	bl	801927c <ip4_output_if>
 8016750:	4603      	mov	r3, r0
 8016752:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016754:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016758:	4618      	mov	r0, r3
 801675a:	3720      	adds	r7, #32
 801675c:	46bd      	mov	sp, r7
 801675e:	bdb0      	pop	{r4, r5, r7, pc}
 8016760:	080261c0 	.word	0x080261c0
 8016764:	08026784 	.word	0x08026784
 8016768:	08026214 	.word	0x08026214
 801676c:	080267a4 	.word	0x080267a4
 8016770:	080267c4 	.word	0x080267c4
 8016774:	2000be18 	.word	0x2000be18
 8016778:	080267e8 	.word	0x080267e8

0801677c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801677c:	b5b0      	push	{r4, r5, r7, lr}
 801677e:	b084      	sub	sp, #16
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d106      	bne.n	8016798 <tcp_rexmit_rto_prepare+0x1c>
 801678a:	4b31      	ldr	r3, [pc, #196]	; (8016850 <tcp_rexmit_rto_prepare+0xd4>)
 801678c:	f240 6263 	movw	r2, #1635	; 0x663
 8016790:	4930      	ldr	r1, [pc, #192]	; (8016854 <tcp_rexmit_rto_prepare+0xd8>)
 8016792:	4831      	ldr	r0, [pc, #196]	; (8016858 <tcp_rexmit_rto_prepare+0xdc>)
 8016794:	f004 fb56 	bl	801ae44 <printf>

  if (pcb->unacked == NULL) {
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801679c:	2b00      	cmp	r3, #0
 801679e:	d102      	bne.n	80167a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80167a0:	f06f 0305 	mvn.w	r3, #5
 80167a4:	e050      	b.n	8016848 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167aa:	60fb      	str	r3, [r7, #12]
 80167ac:	e00b      	b.n	80167c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80167ae:	68f8      	ldr	r0, [r7, #12]
 80167b0:	f7ff fee6 	bl	8016580 <tcp_output_segment_busy>
 80167b4:	4603      	mov	r3, r0
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d002      	beq.n	80167c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80167ba:	f06f 0305 	mvn.w	r3, #5
 80167be:	e043      	b.n	8016848 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	60fb      	str	r3, [r7, #12]
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d1ef      	bne.n	80167ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80167ce:	68f8      	ldr	r0, [r7, #12]
 80167d0:	f7ff fed6 	bl	8016580 <tcp_output_segment_busy>
 80167d4:	4603      	mov	r3, r0
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d002      	beq.n	80167e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80167da:	f06f 0305 	mvn.w	r3, #5
 80167de:	e033      	b.n	8016848 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2200      	movs	r2, #0
 80167f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	8b5b      	ldrh	r3, [r3, #26]
 80167fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80167fe:	b29a      	uxth	r2, r3
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	68db      	ldr	r3, [r3, #12]
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	4618      	mov	r0, r3
 801680c:	f7f8 fd89 	bl	800f322 <lwip_htonl>
 8016810:	4604      	mov	r4, r0
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	891b      	ldrh	r3, [r3, #8]
 8016816:	461d      	mov	r5, r3
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	68db      	ldr	r3, [r3, #12]
 801681c:	899b      	ldrh	r3, [r3, #12]
 801681e:	b29b      	uxth	r3, r3
 8016820:	4618      	mov	r0, r3
 8016822:	f7f8 fd69 	bl	800f2f8 <lwip_htons>
 8016826:	4603      	mov	r3, r0
 8016828:	b2db      	uxtb	r3, r3
 801682a:	f003 0303 	and.w	r3, r3, #3
 801682e:	2b00      	cmp	r3, #0
 8016830:	d001      	beq.n	8016836 <tcp_rexmit_rto_prepare+0xba>
 8016832:	2301      	movs	r3, #1
 8016834:	e000      	b.n	8016838 <tcp_rexmit_rto_prepare+0xbc>
 8016836:	2300      	movs	r3, #0
 8016838:	442b      	add	r3, r5
 801683a:	18e2      	adds	r2, r4, r3
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	2200      	movs	r2, #0
 8016844:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8016846:	2300      	movs	r3, #0
}
 8016848:	4618      	mov	r0, r3
 801684a:	3710      	adds	r7, #16
 801684c:	46bd      	mov	sp, r7
 801684e:	bdb0      	pop	{r4, r5, r7, pc}
 8016850:	080261c0 	.word	0x080261c0
 8016854:	080267fc 	.word	0x080267fc
 8016858:	08026214 	.word	0x08026214

0801685c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801685c:	b580      	push	{r7, lr}
 801685e:	b082      	sub	sp, #8
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d106      	bne.n	8016878 <tcp_rexmit_rto_commit+0x1c>
 801686a:	4b0d      	ldr	r3, [pc, #52]	; (80168a0 <tcp_rexmit_rto_commit+0x44>)
 801686c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016870:	490c      	ldr	r1, [pc, #48]	; (80168a4 <tcp_rexmit_rto_commit+0x48>)
 8016872:	480d      	ldr	r0, [pc, #52]	; (80168a8 <tcp_rexmit_rto_commit+0x4c>)
 8016874:	f004 fae6 	bl	801ae44 <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801687e:	2bff      	cmp	r3, #255	; 0xff
 8016880:	d007      	beq.n	8016892 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016888:	3301      	adds	r3, #1
 801688a:	b2da      	uxtb	r2, r3
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	f7ff fc80 	bl	8016198 <tcp_output>
}
 8016898:	bf00      	nop
 801689a:	3708      	adds	r7, #8
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}
 80168a0:	080261c0 	.word	0x080261c0
 80168a4:	08026820 	.word	0x08026820
 80168a8:	08026214 	.word	0x08026214

080168ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d106      	bne.n	80168c8 <tcp_rexmit_rto+0x1c>
 80168ba:	4b0a      	ldr	r3, [pc, #40]	; (80168e4 <tcp_rexmit_rto+0x38>)
 80168bc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80168c0:	4909      	ldr	r1, [pc, #36]	; (80168e8 <tcp_rexmit_rto+0x3c>)
 80168c2:	480a      	ldr	r0, [pc, #40]	; (80168ec <tcp_rexmit_rto+0x40>)
 80168c4:	f004 fabe 	bl	801ae44 <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f7ff ff57 	bl	801677c <tcp_rexmit_rto_prepare>
 80168ce:	4603      	mov	r3, r0
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d102      	bne.n	80168da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80168d4:	6878      	ldr	r0, [r7, #4]
 80168d6:	f7ff ffc1 	bl	801685c <tcp_rexmit_rto_commit>
  }
}
 80168da:	bf00      	nop
 80168dc:	3708      	adds	r7, #8
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}
 80168e2:	bf00      	nop
 80168e4:	080261c0 	.word	0x080261c0
 80168e8:	08026844 	.word	0x08026844
 80168ec:	08026214 	.word	0x08026214

080168f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80168f0:	b590      	push	{r4, r7, lr}
 80168f2:	b085      	sub	sp, #20
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d106      	bne.n	801690c <tcp_rexmit+0x1c>
 80168fe:	4b2f      	ldr	r3, [pc, #188]	; (80169bc <tcp_rexmit+0xcc>)
 8016900:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016904:	492e      	ldr	r1, [pc, #184]	; (80169c0 <tcp_rexmit+0xd0>)
 8016906:	482f      	ldr	r0, [pc, #188]	; (80169c4 <tcp_rexmit+0xd4>)
 8016908:	f004 fa9c 	bl	801ae44 <printf>

  if (pcb->unacked == NULL) {
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016910:	2b00      	cmp	r3, #0
 8016912:	d102      	bne.n	801691a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016914:	f06f 0305 	mvn.w	r3, #5
 8016918:	e04c      	b.n	80169b4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801691e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016920:	68b8      	ldr	r0, [r7, #8]
 8016922:	f7ff fe2d 	bl	8016580 <tcp_output_segment_busy>
 8016926:	4603      	mov	r3, r0
 8016928:	2b00      	cmp	r3, #0
 801692a:	d002      	beq.n	8016932 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801692c:	f06f 0305 	mvn.w	r3, #5
 8016930:	e040      	b.n	80169b4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016932:	68bb      	ldr	r3, [r7, #8]
 8016934:	681a      	ldr	r2, [r3, #0]
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	336c      	adds	r3, #108	; 0x6c
 801693e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016940:	e002      	b.n	8016948 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d011      	beq.n	8016974 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	68db      	ldr	r3, [r3, #12]
 8016956:	685b      	ldr	r3, [r3, #4]
 8016958:	4618      	mov	r0, r3
 801695a:	f7f8 fce2 	bl	800f322 <lwip_htonl>
 801695e:	4604      	mov	r4, r0
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	68db      	ldr	r3, [r3, #12]
 8016964:	685b      	ldr	r3, [r3, #4]
 8016966:	4618      	mov	r0, r3
 8016968:	f7f8 fcdb 	bl	800f322 <lwip_htonl>
 801696c:	4603      	mov	r3, r0
 801696e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016970:	2b00      	cmp	r3, #0
 8016972:	dbe6      	blt.n	8016942 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	681a      	ldr	r2, [r3, #0]
 8016978:	68bb      	ldr	r3, [r7, #8]
 801697a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	68ba      	ldr	r2, [r7, #8]
 8016980:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016982:	68bb      	ldr	r3, [r7, #8]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d103      	bne.n	8016992 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	2200      	movs	r2, #0
 801698e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016998:	2bff      	cmp	r3, #255	; 0xff
 801699a:	d007      	beq.n	80169ac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80169a2:	3301      	adds	r3, #1
 80169a4:	b2da      	uxtb	r2, r3
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	2200      	movs	r2, #0
 80169b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80169b2:	2300      	movs	r3, #0
}
 80169b4:	4618      	mov	r0, r3
 80169b6:	3714      	adds	r7, #20
 80169b8:	46bd      	mov	sp, r7
 80169ba:	bd90      	pop	{r4, r7, pc}
 80169bc:	080261c0 	.word	0x080261c0
 80169c0:	08026860 	.word	0x08026860
 80169c4:	08026214 	.word	0x08026214

080169c8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b082      	sub	sp, #8
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d106      	bne.n	80169e4 <tcp_rexmit_fast+0x1c>
 80169d6:	4b2a      	ldr	r3, [pc, #168]	; (8016a80 <tcp_rexmit_fast+0xb8>)
 80169d8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80169dc:	4929      	ldr	r1, [pc, #164]	; (8016a84 <tcp_rexmit_fast+0xbc>)
 80169de:	482a      	ldr	r0, [pc, #168]	; (8016a88 <tcp_rexmit_fast+0xc0>)
 80169e0:	f004 fa30 	bl	801ae44 <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d045      	beq.n	8016a78 <tcp_rexmit_fast+0xb0>
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	8b5b      	ldrh	r3, [r3, #26]
 80169f0:	f003 0304 	and.w	r3, r3, #4
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d13f      	bne.n	8016a78 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80169f8:	6878      	ldr	r0, [r7, #4]
 80169fa:	f7ff ff79 	bl	80168f0 <tcp_rexmit>
 80169fe:	4603      	mov	r3, r0
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d139      	bne.n	8016a78 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a10:	4293      	cmp	r3, r2
 8016a12:	bf28      	it	cs
 8016a14:	4613      	movcs	r3, r2
 8016a16:	b29b      	uxth	r3, r3
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	da00      	bge.n	8016a1e <tcp_rexmit_fast+0x56>
 8016a1c:	3301      	adds	r3, #1
 8016a1e:	105b      	asrs	r3, r3, #1
 8016a20:	b29a      	uxth	r2, r3
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016a2e:	461a      	mov	r2, r3
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a34:	005b      	lsls	r3, r3, #1
 8016a36:	429a      	cmp	r2, r3
 8016a38:	d206      	bcs.n	8016a48 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a3e:	005b      	lsls	r3, r3, #1
 8016a40:	b29a      	uxth	r2, r3
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a52:	4619      	mov	r1, r3
 8016a54:	0049      	lsls	r1, r1, #1
 8016a56:	440b      	add	r3, r1
 8016a58:	b29b      	uxth	r3, r3
 8016a5a:	4413      	add	r3, r2
 8016a5c:	b29a      	uxth	r2, r3
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	8b5b      	ldrh	r3, [r3, #26]
 8016a68:	f043 0304 	orr.w	r3, r3, #4
 8016a6c:	b29a      	uxth	r2, r3
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	2200      	movs	r2, #0
 8016a76:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016a78:	bf00      	nop
 8016a7a:	3708      	adds	r7, #8
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}
 8016a80:	080261c0 	.word	0x080261c0
 8016a84:	08026878 	.word	0x08026878
 8016a88:	08026214 	.word	0x08026214

08016a8c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b086      	sub	sp, #24
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	60f8      	str	r0, [r7, #12]
 8016a94:	607b      	str	r3, [r7, #4]
 8016a96:	460b      	mov	r3, r1
 8016a98:	817b      	strh	r3, [r7, #10]
 8016a9a:	4613      	mov	r3, r2
 8016a9c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016a9e:	897a      	ldrh	r2, [r7, #10]
 8016aa0:	893b      	ldrh	r3, [r7, #8]
 8016aa2:	4413      	add	r3, r2
 8016aa4:	b29b      	uxth	r3, r3
 8016aa6:	3314      	adds	r3, #20
 8016aa8:	b29b      	uxth	r3, r3
 8016aaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016aae:	4619      	mov	r1, r3
 8016ab0:	2022      	movs	r0, #34	; 0x22
 8016ab2:	f7f9 fca7 	bl	8010404 <pbuf_alloc>
 8016ab6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d04d      	beq.n	8016b5a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016abe:	897b      	ldrh	r3, [r7, #10]
 8016ac0:	3313      	adds	r3, #19
 8016ac2:	697a      	ldr	r2, [r7, #20]
 8016ac4:	8952      	ldrh	r2, [r2, #10]
 8016ac6:	4293      	cmp	r3, r2
 8016ac8:	db06      	blt.n	8016ad8 <tcp_output_alloc_header_common+0x4c>
 8016aca:	4b26      	ldr	r3, [pc, #152]	; (8016b64 <tcp_output_alloc_header_common+0xd8>)
 8016acc:	f240 7223 	movw	r2, #1827	; 0x723
 8016ad0:	4925      	ldr	r1, [pc, #148]	; (8016b68 <tcp_output_alloc_header_common+0xdc>)
 8016ad2:	4826      	ldr	r0, [pc, #152]	; (8016b6c <tcp_output_alloc_header_common+0xe0>)
 8016ad4:	f004 f9b6 	bl	801ae44 <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016ad8:	697b      	ldr	r3, [r7, #20]
 8016ada:	685b      	ldr	r3, [r3, #4]
 8016adc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016ade:	8c3b      	ldrh	r3, [r7, #32]
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f7f8 fc09 	bl	800f2f8 <lwip_htons>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	461a      	mov	r2, r3
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016af0:	4618      	mov	r0, r3
 8016af2:	f7f8 fc01 	bl	800f2f8 <lwip_htons>
 8016af6:	4603      	mov	r3, r0
 8016af8:	461a      	mov	r2, r3
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	687a      	ldr	r2, [r7, #4]
 8016b02:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016b04:	68f8      	ldr	r0, [r7, #12]
 8016b06:	f7f8 fc0c 	bl	800f322 <lwip_htonl>
 8016b0a:	4602      	mov	r2, r0
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016b10:	897b      	ldrh	r3, [r7, #10]
 8016b12:	089b      	lsrs	r3, r3, #2
 8016b14:	b29b      	uxth	r3, r3
 8016b16:	3305      	adds	r3, #5
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	031b      	lsls	r3, r3, #12
 8016b1c:	b29a      	uxth	r2, r3
 8016b1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016b22:	b29b      	uxth	r3, r3
 8016b24:	4313      	orrs	r3, r2
 8016b26:	b29b      	uxth	r3, r3
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7f8 fbe5 	bl	800f2f8 <lwip_htons>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	461a      	mov	r2, r3
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016b36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f7f8 fbdd 	bl	800f2f8 <lwip_htons>
 8016b3e:	4603      	mov	r3, r0
 8016b40:	461a      	mov	r2, r3
 8016b42:	693b      	ldr	r3, [r7, #16]
 8016b44:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016b46:	693b      	ldr	r3, [r7, #16]
 8016b48:	2200      	movs	r2, #0
 8016b4a:	741a      	strb	r2, [r3, #16]
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	2200      	movs	r2, #0
 8016b54:	749a      	strb	r2, [r3, #18]
 8016b56:	2200      	movs	r2, #0
 8016b58:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016b5a:	697b      	ldr	r3, [r7, #20]
}
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	3718      	adds	r7, #24
 8016b60:	46bd      	mov	sp, r7
 8016b62:	bd80      	pop	{r7, pc}
 8016b64:	080261c0 	.word	0x080261c0
 8016b68:	08026898 	.word	0x08026898
 8016b6c:	08026214 	.word	0x08026214

08016b70 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016b70:	b5b0      	push	{r4, r5, r7, lr}
 8016b72:	b08a      	sub	sp, #40	; 0x28
 8016b74:	af04      	add	r7, sp, #16
 8016b76:	60f8      	str	r0, [r7, #12]
 8016b78:	607b      	str	r3, [r7, #4]
 8016b7a:	460b      	mov	r3, r1
 8016b7c:	817b      	strh	r3, [r7, #10]
 8016b7e:	4613      	mov	r3, r2
 8016b80:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d106      	bne.n	8016b96 <tcp_output_alloc_header+0x26>
 8016b88:	4b15      	ldr	r3, [pc, #84]	; (8016be0 <tcp_output_alloc_header+0x70>)
 8016b8a:	f240 7242 	movw	r2, #1858	; 0x742
 8016b8e:	4915      	ldr	r1, [pc, #84]	; (8016be4 <tcp_output_alloc_header+0x74>)
 8016b90:	4815      	ldr	r0, [pc, #84]	; (8016be8 <tcp_output_alloc_header+0x78>)
 8016b92:	f004 f957 	bl	801ae44 <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	8adb      	ldrh	r3, [r3, #22]
 8016b9e:	68fa      	ldr	r2, [r7, #12]
 8016ba0:	8b12      	ldrh	r2, [r2, #24]
 8016ba2:	68f9      	ldr	r1, [r7, #12]
 8016ba4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8016ba6:	893d      	ldrh	r5, [r7, #8]
 8016ba8:	897c      	ldrh	r4, [r7, #10]
 8016baa:	9103      	str	r1, [sp, #12]
 8016bac:	2110      	movs	r1, #16
 8016bae:	9102      	str	r1, [sp, #8]
 8016bb0:	9201      	str	r2, [sp, #4]
 8016bb2:	9300      	str	r3, [sp, #0]
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	462a      	mov	r2, r5
 8016bb8:	4621      	mov	r1, r4
 8016bba:	f7ff ff67 	bl	8016a8c <tcp_output_alloc_header_common>
 8016bbe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016bc0:	697b      	ldr	r3, [r7, #20]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d006      	beq.n	8016bd4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bca:	68fa      	ldr	r2, [r7, #12]
 8016bcc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016bce:	441a      	add	r2, r3
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8016bd4:	697b      	ldr	r3, [r7, #20]
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	3718      	adds	r7, #24
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8016bde:	bf00      	nop
 8016be0:	080261c0 	.word	0x080261c0
 8016be4:	080268c8 	.word	0x080268c8
 8016be8:	08026214 	.word	0x08026214

08016bec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b088      	sub	sp, #32
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	60f8      	str	r0, [r7, #12]
 8016bf4:	60b9      	str	r1, [r7, #8]
 8016bf6:	4611      	mov	r1, r2
 8016bf8:	461a      	mov	r2, r3
 8016bfa:	460b      	mov	r3, r1
 8016bfc:	71fb      	strb	r3, [r7, #7]
 8016bfe:	4613      	mov	r3, r2
 8016c00:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016c02:	2300      	movs	r3, #0
 8016c04:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d106      	bne.n	8016c1a <tcp_output_fill_options+0x2e>
 8016c0c:	4b13      	ldr	r3, [pc, #76]	; (8016c5c <tcp_output_fill_options+0x70>)
 8016c0e:	f240 7256 	movw	r2, #1878	; 0x756
 8016c12:	4913      	ldr	r1, [pc, #76]	; (8016c60 <tcp_output_fill_options+0x74>)
 8016c14:	4813      	ldr	r0, [pc, #76]	; (8016c64 <tcp_output_fill_options+0x78>)
 8016c16:	f004 f915 	bl	801ae44 <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016c1a:	68bb      	ldr	r3, [r7, #8]
 8016c1c:	685b      	ldr	r3, [r3, #4]
 8016c1e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016c20:	69bb      	ldr	r3, [r7, #24]
 8016c22:	3314      	adds	r3, #20
 8016c24:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016c26:	69bb      	ldr	r3, [r7, #24]
 8016c28:	f103 0214 	add.w	r2, r3, #20
 8016c2c:	8bfb      	ldrh	r3, [r7, #30]
 8016c2e:	009b      	lsls	r3, r3, #2
 8016c30:	4619      	mov	r1, r3
 8016c32:	79fb      	ldrb	r3, [r7, #7]
 8016c34:	009b      	lsls	r3, r3, #2
 8016c36:	f003 0304 	and.w	r3, r3, #4
 8016c3a:	440b      	add	r3, r1
 8016c3c:	4413      	add	r3, r2
 8016c3e:	697a      	ldr	r2, [r7, #20]
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d006      	beq.n	8016c52 <tcp_output_fill_options+0x66>
 8016c44:	4b05      	ldr	r3, [pc, #20]	; (8016c5c <tcp_output_fill_options+0x70>)
 8016c46:	f240 7275 	movw	r2, #1909	; 0x775
 8016c4a:	4907      	ldr	r1, [pc, #28]	; (8016c68 <tcp_output_fill_options+0x7c>)
 8016c4c:	4805      	ldr	r0, [pc, #20]	; (8016c64 <tcp_output_fill_options+0x78>)
 8016c4e:	f004 f8f9 	bl	801ae44 <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016c52:	bf00      	nop
 8016c54:	3720      	adds	r7, #32
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	080261c0 	.word	0x080261c0
 8016c60:	080268f0 	.word	0x080268f0
 8016c64:	08026214 	.word	0x08026214
 8016c68:	080267e8 	.word	0x080267e8

08016c6c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b08a      	sub	sp, #40	; 0x28
 8016c70:	af04      	add	r7, sp, #16
 8016c72:	60f8      	str	r0, [r7, #12]
 8016c74:	60b9      	str	r1, [r7, #8]
 8016c76:	607a      	str	r2, [r7, #4]
 8016c78:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016c7a:	68bb      	ldr	r3, [r7, #8]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d106      	bne.n	8016c8e <tcp_output_control_segment+0x22>
 8016c80:	4b1c      	ldr	r3, [pc, #112]	; (8016cf4 <tcp_output_control_segment+0x88>)
 8016c82:	f240 7287 	movw	r2, #1927	; 0x787
 8016c86:	491c      	ldr	r1, [pc, #112]	; (8016cf8 <tcp_output_control_segment+0x8c>)
 8016c88:	481c      	ldr	r0, [pc, #112]	; (8016cfc <tcp_output_control_segment+0x90>)
 8016c8a:	f004 f8db 	bl	801ae44 <printf>

  netif = tcp_route(pcb, src, dst);
 8016c8e:	683a      	ldr	r2, [r7, #0]
 8016c90:	6879      	ldr	r1, [r7, #4]
 8016c92:	68f8      	ldr	r0, [r7, #12]
 8016c94:	f7fe fae8 	bl	8015268 <tcp_route>
 8016c98:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d102      	bne.n	8016ca6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016ca0:	23fc      	movs	r3, #252	; 0xfc
 8016ca2:	75fb      	strb	r3, [r7, #23]
 8016ca4:	e01c      	b.n	8016ce0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d006      	beq.n	8016cba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	7adb      	ldrb	r3, [r3, #11]
 8016cb0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	7a9b      	ldrb	r3, [r3, #10]
 8016cb6:	757b      	strb	r3, [r7, #21]
 8016cb8:	e003      	b.n	8016cc2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016cba:	23ff      	movs	r3, #255	; 0xff
 8016cbc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016cc2:	7dba      	ldrb	r2, [r7, #22]
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	9302      	str	r3, [sp, #8]
 8016cc8:	2306      	movs	r3, #6
 8016cca:	9301      	str	r3, [sp, #4]
 8016ccc:	7d7b      	ldrb	r3, [r7, #21]
 8016cce:	9300      	str	r3, [sp, #0]
 8016cd0:	4613      	mov	r3, r2
 8016cd2:	683a      	ldr	r2, [r7, #0]
 8016cd4:	6879      	ldr	r1, [r7, #4]
 8016cd6:	68b8      	ldr	r0, [r7, #8]
 8016cd8:	f002 fad0 	bl	801927c <ip4_output_if>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016ce0:	68b8      	ldr	r0, [r7, #8]
 8016ce2:	f7f9 fe73 	bl	80109cc <pbuf_free>
  return err;
 8016ce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016cea:	4618      	mov	r0, r3
 8016cec:	3718      	adds	r7, #24
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	bd80      	pop	{r7, pc}
 8016cf2:	bf00      	nop
 8016cf4:	080261c0 	.word	0x080261c0
 8016cf8:	08026918 	.word	0x08026918
 8016cfc:	08026214 	.word	0x08026214

08016d00 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016d00:	b590      	push	{r4, r7, lr}
 8016d02:	b08b      	sub	sp, #44	; 0x2c
 8016d04:	af04      	add	r7, sp, #16
 8016d06:	60f8      	str	r0, [r7, #12]
 8016d08:	60b9      	str	r1, [r7, #8]
 8016d0a:	607a      	str	r2, [r7, #4]
 8016d0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016d0e:	683b      	ldr	r3, [r7, #0]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d106      	bne.n	8016d22 <tcp_rst+0x22>
 8016d14:	4b1f      	ldr	r3, [pc, #124]	; (8016d94 <tcp_rst+0x94>)
 8016d16:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016d1a:	491f      	ldr	r1, [pc, #124]	; (8016d98 <tcp_rst+0x98>)
 8016d1c:	481f      	ldr	r0, [pc, #124]	; (8016d9c <tcp_rst+0x9c>)
 8016d1e:	f004 f891 	bl	801ae44 <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d106      	bne.n	8016d36 <tcp_rst+0x36>
 8016d28:	4b1a      	ldr	r3, [pc, #104]	; (8016d94 <tcp_rst+0x94>)
 8016d2a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016d2e:	491c      	ldr	r1, [pc, #112]	; (8016da0 <tcp_rst+0xa0>)
 8016d30:	481a      	ldr	r0, [pc, #104]	; (8016d9c <tcp_rst+0x9c>)
 8016d32:	f004 f887 	bl	801ae44 <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016d36:	2300      	movs	r3, #0
 8016d38:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016d3a:	f246 0308 	movw	r3, #24584	; 0x6008
 8016d3e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016d40:	7dfb      	ldrb	r3, [r7, #23]
 8016d42:	b29c      	uxth	r4, r3
 8016d44:	68b8      	ldr	r0, [r7, #8]
 8016d46:	f7f8 faec 	bl	800f322 <lwip_htonl>
 8016d4a:	4602      	mov	r2, r0
 8016d4c:	8abb      	ldrh	r3, [r7, #20]
 8016d4e:	9303      	str	r3, [sp, #12]
 8016d50:	2314      	movs	r3, #20
 8016d52:	9302      	str	r3, [sp, #8]
 8016d54:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016d56:	9301      	str	r3, [sp, #4]
 8016d58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016d5a:	9300      	str	r3, [sp, #0]
 8016d5c:	4613      	mov	r3, r2
 8016d5e:	2200      	movs	r2, #0
 8016d60:	4621      	mov	r1, r4
 8016d62:	6878      	ldr	r0, [r7, #4]
 8016d64:	f7ff fe92 	bl	8016a8c <tcp_output_alloc_header_common>
 8016d68:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016d6a:	693b      	ldr	r3, [r7, #16]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d00c      	beq.n	8016d8a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016d70:	7dfb      	ldrb	r3, [r7, #23]
 8016d72:	2200      	movs	r2, #0
 8016d74:	6939      	ldr	r1, [r7, #16]
 8016d76:	68f8      	ldr	r0, [r7, #12]
 8016d78:	f7ff ff38 	bl	8016bec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d7e:	683a      	ldr	r2, [r7, #0]
 8016d80:	6939      	ldr	r1, [r7, #16]
 8016d82:	68f8      	ldr	r0, [r7, #12]
 8016d84:	f7ff ff72 	bl	8016c6c <tcp_output_control_segment>
 8016d88:	e000      	b.n	8016d8c <tcp_rst+0x8c>
    return;
 8016d8a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016d8c:	371c      	adds	r7, #28
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd90      	pop	{r4, r7, pc}
 8016d92:	bf00      	nop
 8016d94:	080261c0 	.word	0x080261c0
 8016d98:	08026944 	.word	0x08026944
 8016d9c:	08026214 	.word	0x08026214
 8016da0:	08026960 	.word	0x08026960

08016da4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016da4:	b590      	push	{r4, r7, lr}
 8016da6:	b087      	sub	sp, #28
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016dac:	2300      	movs	r3, #0
 8016dae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016db0:	2300      	movs	r3, #0
 8016db2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d106      	bne.n	8016dc8 <tcp_send_empty_ack+0x24>
 8016dba:	4b28      	ldr	r3, [pc, #160]	; (8016e5c <tcp_send_empty_ack+0xb8>)
 8016dbc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016dc0:	4927      	ldr	r1, [pc, #156]	; (8016e60 <tcp_send_empty_ack+0xbc>)
 8016dc2:	4828      	ldr	r0, [pc, #160]	; (8016e64 <tcp_send_empty_ack+0xc0>)
 8016dc4:	f004 f83e 	bl	801ae44 <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016dc8:	7dfb      	ldrb	r3, [r7, #23]
 8016dca:	009b      	lsls	r3, r3, #2
 8016dcc:	b2db      	uxtb	r3, r3
 8016dce:	f003 0304 	and.w	r3, r3, #4
 8016dd2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016dd4:	7d7b      	ldrb	r3, [r7, #21]
 8016dd6:	b29c      	uxth	r4, r3
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7f8 faa0 	bl	800f322 <lwip_htonl>
 8016de2:	4603      	mov	r3, r0
 8016de4:	2200      	movs	r2, #0
 8016de6:	4621      	mov	r1, r4
 8016de8:	6878      	ldr	r0, [r7, #4]
 8016dea:	f7ff fec1 	bl	8016b70 <tcp_output_alloc_header>
 8016dee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d109      	bne.n	8016e0a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	8b5b      	ldrh	r3, [r3, #26]
 8016dfa:	f043 0303 	orr.w	r3, r3, #3
 8016dfe:	b29a      	uxth	r2, r3
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016e04:	f06f 0301 	mvn.w	r3, #1
 8016e08:	e023      	b.n	8016e52 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016e0a:	7dbb      	ldrb	r3, [r7, #22]
 8016e0c:	7dfa      	ldrb	r2, [r7, #23]
 8016e0e:	6939      	ldr	r1, [r7, #16]
 8016e10:	6878      	ldr	r0, [r7, #4]
 8016e12:	f7ff feeb 	bl	8016bec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016e16:	687a      	ldr	r2, [r7, #4]
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	3304      	adds	r3, #4
 8016e1c:	6939      	ldr	r1, [r7, #16]
 8016e1e:	6878      	ldr	r0, [r7, #4]
 8016e20:	f7ff ff24 	bl	8016c6c <tcp_output_control_segment>
 8016e24:	4603      	mov	r3, r0
 8016e26:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d007      	beq.n	8016e40 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	8b5b      	ldrh	r3, [r3, #26]
 8016e34:	f043 0303 	orr.w	r3, r3, #3
 8016e38:	b29a      	uxth	r2, r3
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	835a      	strh	r2, [r3, #26]
 8016e3e:	e006      	b.n	8016e4e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	8b5b      	ldrh	r3, [r3, #26]
 8016e44:	f023 0303 	bic.w	r3, r3, #3
 8016e48:	b29a      	uxth	r2, r3
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016e52:	4618      	mov	r0, r3
 8016e54:	371c      	adds	r7, #28
 8016e56:	46bd      	mov	sp, r7
 8016e58:	bd90      	pop	{r4, r7, pc}
 8016e5a:	bf00      	nop
 8016e5c:	080261c0 	.word	0x080261c0
 8016e60:	0802697c 	.word	0x0802697c
 8016e64:	08026214 	.word	0x08026214

08016e68 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016e68:	b590      	push	{r4, r7, lr}
 8016e6a:	b087      	sub	sp, #28
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016e70:	2300      	movs	r3, #0
 8016e72:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d106      	bne.n	8016e88 <tcp_keepalive+0x20>
 8016e7a:	4b18      	ldr	r3, [pc, #96]	; (8016edc <tcp_keepalive+0x74>)
 8016e7c:	f640 0224 	movw	r2, #2084	; 0x824
 8016e80:	4917      	ldr	r1, [pc, #92]	; (8016ee0 <tcp_keepalive+0x78>)
 8016e82:	4818      	ldr	r0, [pc, #96]	; (8016ee4 <tcp_keepalive+0x7c>)
 8016e84:	f003 ffde 	bl	801ae44 <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016e88:	7dfb      	ldrb	r3, [r7, #23]
 8016e8a:	b29c      	uxth	r4, r3
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016e90:	3b01      	subs	r3, #1
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7f8 fa45 	bl	800f322 <lwip_htonl>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	4621      	mov	r1, r4
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	f7ff fe66 	bl	8016b70 <tcp_output_alloc_header>
 8016ea4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016ea6:	693b      	ldr	r3, [r7, #16]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d102      	bne.n	8016eb2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016eac:	f04f 33ff 	mov.w	r3, #4294967295
 8016eb0:	e010      	b.n	8016ed4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016eb2:	7dfb      	ldrb	r3, [r7, #23]
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	6939      	ldr	r1, [r7, #16]
 8016eb8:	6878      	ldr	r0, [r7, #4]
 8016eba:	f7ff fe97 	bl	8016bec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016ebe:	687a      	ldr	r2, [r7, #4]
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	3304      	adds	r3, #4
 8016ec4:	6939      	ldr	r1, [r7, #16]
 8016ec6:	6878      	ldr	r0, [r7, #4]
 8016ec8:	f7ff fed0 	bl	8016c6c <tcp_output_control_segment>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	371c      	adds	r7, #28
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd90      	pop	{r4, r7, pc}
 8016edc:	080261c0 	.word	0x080261c0
 8016ee0:	0802699c 	.word	0x0802699c
 8016ee4:	08026214 	.word	0x08026214

08016ee8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016ee8:	b590      	push	{r4, r7, lr}
 8016eea:	b08b      	sub	sp, #44	; 0x2c
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d106      	bne.n	8016f0a <tcp_zero_window_probe+0x22>
 8016efc:	4b4c      	ldr	r3, [pc, #304]	; (8017030 <tcp_zero_window_probe+0x148>)
 8016efe:	f640 024f 	movw	r2, #2127	; 0x84f
 8016f02:	494c      	ldr	r1, [pc, #304]	; (8017034 <tcp_zero_window_probe+0x14c>)
 8016f04:	484c      	ldr	r0, [pc, #304]	; (8017038 <tcp_zero_window_probe+0x150>)
 8016f06:	f003 ff9d 	bl	801ae44 <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f0e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016f10:	6a3b      	ldr	r3, [r7, #32]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d101      	bne.n	8016f1a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016f16:	2300      	movs	r3, #0
 8016f18:	e086      	b.n	8017028 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016f20:	2bff      	cmp	r3, #255	; 0xff
 8016f22:	d007      	beq.n	8016f34 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016f2a:	3301      	adds	r3, #1
 8016f2c:	b2da      	uxtb	r2, r3
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016f34:	6a3b      	ldr	r3, [r7, #32]
 8016f36:	68db      	ldr	r3, [r3, #12]
 8016f38:	899b      	ldrh	r3, [r3, #12]
 8016f3a:	b29b      	uxth	r3, r3
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	f7f8 f9db 	bl	800f2f8 <lwip_htons>
 8016f42:	4603      	mov	r3, r0
 8016f44:	b2db      	uxtb	r3, r3
 8016f46:	f003 0301 	and.w	r3, r3, #1
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d005      	beq.n	8016f5a <tcp_zero_window_probe+0x72>
 8016f4e:	6a3b      	ldr	r3, [r7, #32]
 8016f50:	891b      	ldrh	r3, [r3, #8]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d101      	bne.n	8016f5a <tcp_zero_window_probe+0x72>
 8016f56:	2301      	movs	r3, #1
 8016f58:	e000      	b.n	8016f5c <tcp_zero_window_probe+0x74>
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016f5e:	7ffb      	ldrb	r3, [r7, #31]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	bf0c      	ite	eq
 8016f64:	2301      	moveq	r3, #1
 8016f66:	2300      	movne	r3, #0
 8016f68:	b2db      	uxtb	r3, r3
 8016f6a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f70:	b299      	uxth	r1, r3
 8016f72:	6a3b      	ldr	r3, [r7, #32]
 8016f74:	68db      	ldr	r3, [r3, #12]
 8016f76:	685b      	ldr	r3, [r3, #4]
 8016f78:	8bba      	ldrh	r2, [r7, #28]
 8016f7a:	6878      	ldr	r0, [r7, #4]
 8016f7c:	f7ff fdf8 	bl	8016b70 <tcp_output_alloc_header>
 8016f80:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016f82:	69bb      	ldr	r3, [r7, #24]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d102      	bne.n	8016f8e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016f88:	f04f 33ff 	mov.w	r3, #4294967295
 8016f8c:	e04c      	b.n	8017028 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016f8e:	69bb      	ldr	r3, [r7, #24]
 8016f90:	685b      	ldr	r3, [r3, #4]
 8016f92:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016f94:	7ffb      	ldrb	r3, [r7, #31]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d011      	beq.n	8016fbe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016f9a:	697b      	ldr	r3, [r7, #20]
 8016f9c:	899b      	ldrh	r3, [r3, #12]
 8016f9e:	b29b      	uxth	r3, r3
 8016fa0:	b21b      	sxth	r3, r3
 8016fa2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016fa6:	b21c      	sxth	r4, r3
 8016fa8:	2011      	movs	r0, #17
 8016faa:	f7f8 f9a5 	bl	800f2f8 <lwip_htons>
 8016fae:	4603      	mov	r3, r0
 8016fb0:	b21b      	sxth	r3, r3
 8016fb2:	4323      	orrs	r3, r4
 8016fb4:	b21b      	sxth	r3, r3
 8016fb6:	b29a      	uxth	r2, r3
 8016fb8:	697b      	ldr	r3, [r7, #20]
 8016fba:	819a      	strh	r2, [r3, #12]
 8016fbc:	e010      	b.n	8016fe0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016fbe:	69bb      	ldr	r3, [r7, #24]
 8016fc0:	685b      	ldr	r3, [r3, #4]
 8016fc2:	3314      	adds	r3, #20
 8016fc4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016fc6:	6a3b      	ldr	r3, [r7, #32]
 8016fc8:	6858      	ldr	r0, [r3, #4]
 8016fca:	6a3b      	ldr	r3, [r7, #32]
 8016fcc:	685b      	ldr	r3, [r3, #4]
 8016fce:	891a      	ldrh	r2, [r3, #8]
 8016fd0:	6a3b      	ldr	r3, [r7, #32]
 8016fd2:	891b      	ldrh	r3, [r3, #8]
 8016fd4:	1ad3      	subs	r3, r2, r3
 8016fd6:	b29b      	uxth	r3, r3
 8016fd8:	2201      	movs	r2, #1
 8016fda:	6939      	ldr	r1, [r7, #16]
 8016fdc:	f7f9 fefc 	bl	8010dd8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016fe0:	6a3b      	ldr	r3, [r7, #32]
 8016fe2:	68db      	ldr	r3, [r3, #12]
 8016fe4:	685b      	ldr	r3, [r3, #4]
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f7f8 f99b 	bl	800f322 <lwip_htonl>
 8016fec:	4603      	mov	r3, r0
 8016fee:	3301      	adds	r3, #1
 8016ff0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	1ad3      	subs	r3, r2, r3
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	da02      	bge.n	8017004 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	68fa      	ldr	r2, [r7, #12]
 8017002:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017008:	2200      	movs	r2, #0
 801700a:	69b9      	ldr	r1, [r7, #24]
 801700c:	6878      	ldr	r0, [r7, #4]
 801700e:	f7ff fded 	bl	8016bec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017012:	687a      	ldr	r2, [r7, #4]
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	3304      	adds	r3, #4
 8017018:	69b9      	ldr	r1, [r7, #24]
 801701a:	6878      	ldr	r0, [r7, #4]
 801701c:	f7ff fe26 	bl	8016c6c <tcp_output_control_segment>
 8017020:	4603      	mov	r3, r0
 8017022:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017024:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017028:	4618      	mov	r0, r3
 801702a:	372c      	adds	r7, #44	; 0x2c
 801702c:	46bd      	mov	sp, r7
 801702e:	bd90      	pop	{r4, r7, pc}
 8017030:	080261c0 	.word	0x080261c0
 8017034:	080269b8 	.word	0x080269b8
 8017038:	08026214 	.word	0x08026214

0801703c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b082      	sub	sp, #8
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017044:	f7f9 ffb6 	bl	8010fb4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017048:	4b0a      	ldr	r3, [pc, #40]	; (8017074 <tcpip_tcp_timer+0x38>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d103      	bne.n	8017058 <tcpip_tcp_timer+0x1c>
 8017050:	4b09      	ldr	r3, [pc, #36]	; (8017078 <tcpip_tcp_timer+0x3c>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d005      	beq.n	8017064 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017058:	2200      	movs	r2, #0
 801705a:	4908      	ldr	r1, [pc, #32]	; (801707c <tcpip_tcp_timer+0x40>)
 801705c:	20fa      	movs	r0, #250	; 0xfa
 801705e:	f000 f8f3 	bl	8017248 <sys_timeout>
 8017062:	e003      	b.n	801706c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017064:	4b06      	ldr	r3, [pc, #24]	; (8017080 <tcpip_tcp_timer+0x44>)
 8017066:	2200      	movs	r2, #0
 8017068:	601a      	str	r2, [r3, #0]
  }
}
 801706a:	bf00      	nop
 801706c:	bf00      	nop
 801706e:	3708      	adds	r7, #8
 8017070:	46bd      	mov	sp, r7
 8017072:	bd80      	pop	{r7, pc}
 8017074:	2000be14 	.word	0x2000be14
 8017078:	2000be24 	.word	0x2000be24
 801707c:	0801703d 	.word	0x0801703d
 8017080:	20004f34 	.word	0x20004f34

08017084 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017088:	4b0a      	ldr	r3, [pc, #40]	; (80170b4 <tcp_timer_needed+0x30>)
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d10f      	bne.n	80170b0 <tcp_timer_needed+0x2c>
 8017090:	4b09      	ldr	r3, [pc, #36]	; (80170b8 <tcp_timer_needed+0x34>)
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d103      	bne.n	80170a0 <tcp_timer_needed+0x1c>
 8017098:	4b08      	ldr	r3, [pc, #32]	; (80170bc <tcp_timer_needed+0x38>)
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d007      	beq.n	80170b0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80170a0:	4b04      	ldr	r3, [pc, #16]	; (80170b4 <tcp_timer_needed+0x30>)
 80170a2:	2201      	movs	r2, #1
 80170a4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80170a6:	2200      	movs	r2, #0
 80170a8:	4905      	ldr	r1, [pc, #20]	; (80170c0 <tcp_timer_needed+0x3c>)
 80170aa:	20fa      	movs	r0, #250	; 0xfa
 80170ac:	f000 f8cc 	bl	8017248 <sys_timeout>
  }
}
 80170b0:	bf00      	nop
 80170b2:	bd80      	pop	{r7, pc}
 80170b4:	20004f34 	.word	0x20004f34
 80170b8:	2000be14 	.word	0x2000be14
 80170bc:	2000be24 	.word	0x2000be24
 80170c0:	0801703d 	.word	0x0801703d

080170c4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b086      	sub	sp, #24
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	60f8      	str	r0, [r7, #12]
 80170cc:	60b9      	str	r1, [r7, #8]
 80170ce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80170d0:	200a      	movs	r0, #10
 80170d2:	f7f8 fdfd 	bl	800fcd0 <memp_malloc>
 80170d6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80170d8:	693b      	ldr	r3, [r7, #16]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d109      	bne.n	80170f2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80170de:	693b      	ldr	r3, [r7, #16]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d151      	bne.n	8017188 <sys_timeout_abs+0xc4>
 80170e4:	4b2a      	ldr	r3, [pc, #168]	; (8017190 <sys_timeout_abs+0xcc>)
 80170e6:	22be      	movs	r2, #190	; 0xbe
 80170e8:	492a      	ldr	r1, [pc, #168]	; (8017194 <sys_timeout_abs+0xd0>)
 80170ea:	482b      	ldr	r0, [pc, #172]	; (8017198 <sys_timeout_abs+0xd4>)
 80170ec:	f003 feaa 	bl	801ae44 <printf>
    return;
 80170f0:	e04a      	b.n	8017188 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80170f2:	693b      	ldr	r3, [r7, #16]
 80170f4:	2200      	movs	r2, #0
 80170f6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80170f8:	693b      	ldr	r3, [r7, #16]
 80170fa:	68ba      	ldr	r2, [r7, #8]
 80170fc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80170fe:	693b      	ldr	r3, [r7, #16]
 8017100:	687a      	ldr	r2, [r7, #4]
 8017102:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017104:	693b      	ldr	r3, [r7, #16]
 8017106:	68fa      	ldr	r2, [r7, #12]
 8017108:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801710a:	4b24      	ldr	r3, [pc, #144]	; (801719c <sys_timeout_abs+0xd8>)
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d103      	bne.n	801711a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017112:	4a22      	ldr	r2, [pc, #136]	; (801719c <sys_timeout_abs+0xd8>)
 8017114:	693b      	ldr	r3, [r7, #16]
 8017116:	6013      	str	r3, [r2, #0]
    return;
 8017118:	e037      	b.n	801718a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801711a:	693b      	ldr	r3, [r7, #16]
 801711c:	685a      	ldr	r2, [r3, #4]
 801711e:	4b1f      	ldr	r3, [pc, #124]	; (801719c <sys_timeout_abs+0xd8>)
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	685b      	ldr	r3, [r3, #4]
 8017124:	1ad3      	subs	r3, r2, r3
 8017126:	0fdb      	lsrs	r3, r3, #31
 8017128:	f003 0301 	and.w	r3, r3, #1
 801712c:	b2db      	uxtb	r3, r3
 801712e:	2b00      	cmp	r3, #0
 8017130:	d007      	beq.n	8017142 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017132:	4b1a      	ldr	r3, [pc, #104]	; (801719c <sys_timeout_abs+0xd8>)
 8017134:	681a      	ldr	r2, [r3, #0]
 8017136:	693b      	ldr	r3, [r7, #16]
 8017138:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801713a:	4a18      	ldr	r2, [pc, #96]	; (801719c <sys_timeout_abs+0xd8>)
 801713c:	693b      	ldr	r3, [r7, #16]
 801713e:	6013      	str	r3, [r2, #0]
 8017140:	e023      	b.n	801718a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017142:	4b16      	ldr	r3, [pc, #88]	; (801719c <sys_timeout_abs+0xd8>)
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	617b      	str	r3, [r7, #20]
 8017148:	e01a      	b.n	8017180 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d00b      	beq.n	801716a <sys_timeout_abs+0xa6>
 8017152:	693b      	ldr	r3, [r7, #16]
 8017154:	685a      	ldr	r2, [r3, #4]
 8017156:	697b      	ldr	r3, [r7, #20]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	685b      	ldr	r3, [r3, #4]
 801715c:	1ad3      	subs	r3, r2, r3
 801715e:	0fdb      	lsrs	r3, r3, #31
 8017160:	f003 0301 	and.w	r3, r3, #1
 8017164:	b2db      	uxtb	r3, r3
 8017166:	2b00      	cmp	r3, #0
 8017168:	d007      	beq.n	801717a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801716a:	697b      	ldr	r3, [r7, #20]
 801716c:	681a      	ldr	r2, [r3, #0]
 801716e:	693b      	ldr	r3, [r7, #16]
 8017170:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017172:	697b      	ldr	r3, [r7, #20]
 8017174:	693a      	ldr	r2, [r7, #16]
 8017176:	601a      	str	r2, [r3, #0]
        break;
 8017178:	e007      	b.n	801718a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801717a:	697b      	ldr	r3, [r7, #20]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	617b      	str	r3, [r7, #20]
 8017180:	697b      	ldr	r3, [r7, #20]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d1e1      	bne.n	801714a <sys_timeout_abs+0x86>
 8017186:	e000      	b.n	801718a <sys_timeout_abs+0xc6>
    return;
 8017188:	bf00      	nop
      }
    }
  }
}
 801718a:	3718      	adds	r7, #24
 801718c:	46bd      	mov	sp, r7
 801718e:	bd80      	pop	{r7, pc}
 8017190:	080269dc 	.word	0x080269dc
 8017194:	08026a10 	.word	0x08026a10
 8017198:	08026a50 	.word	0x08026a50
 801719c:	20004f2c 	.word	0x20004f2c

080171a0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b086      	sub	sp, #24
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80171ac:	697b      	ldr	r3, [r7, #20]
 80171ae:	685b      	ldr	r3, [r3, #4]
 80171b0:	4798      	blx	r3

  now = sys_now();
 80171b2:	f7f2 f8c1 	bl	8009338 <sys_now>
 80171b6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	681a      	ldr	r2, [r3, #0]
 80171bc:	4b0f      	ldr	r3, [pc, #60]	; (80171fc <lwip_cyclic_timer+0x5c>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	4413      	add	r3, r2
 80171c2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80171c4:	68fa      	ldr	r2, [r7, #12]
 80171c6:	693b      	ldr	r3, [r7, #16]
 80171c8:	1ad3      	subs	r3, r2, r3
 80171ca:	0fdb      	lsrs	r3, r3, #31
 80171cc:	f003 0301 	and.w	r3, r3, #1
 80171d0:	b2db      	uxtb	r3, r3
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d009      	beq.n	80171ea <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80171d6:	697b      	ldr	r3, [r7, #20]
 80171d8:	681a      	ldr	r2, [r3, #0]
 80171da:	693b      	ldr	r3, [r7, #16]
 80171dc:	4413      	add	r3, r2
 80171de:	687a      	ldr	r2, [r7, #4]
 80171e0:	4907      	ldr	r1, [pc, #28]	; (8017200 <lwip_cyclic_timer+0x60>)
 80171e2:	4618      	mov	r0, r3
 80171e4:	f7ff ff6e 	bl	80170c4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80171e8:	e004      	b.n	80171f4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80171ea:	687a      	ldr	r2, [r7, #4]
 80171ec:	4904      	ldr	r1, [pc, #16]	; (8017200 <lwip_cyclic_timer+0x60>)
 80171ee:	68f8      	ldr	r0, [r7, #12]
 80171f0:	f7ff ff68 	bl	80170c4 <sys_timeout_abs>
}
 80171f4:	bf00      	nop
 80171f6:	3718      	adds	r7, #24
 80171f8:	46bd      	mov	sp, r7
 80171fa:	bd80      	pop	{r7, pc}
 80171fc:	20004f30 	.word	0x20004f30
 8017200:	080171a1 	.word	0x080171a1

08017204 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b082      	sub	sp, #8
 8017208:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801720a:	2301      	movs	r3, #1
 801720c:	607b      	str	r3, [r7, #4]
 801720e:	e00e      	b.n	801722e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017210:	4a0b      	ldr	r2, [pc, #44]	; (8017240 <sys_timeouts_init+0x3c>)
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	00db      	lsls	r3, r3, #3
 801721c:	4a08      	ldr	r2, [pc, #32]	; (8017240 <sys_timeouts_init+0x3c>)
 801721e:	4413      	add	r3, r2
 8017220:	461a      	mov	r2, r3
 8017222:	4908      	ldr	r1, [pc, #32]	; (8017244 <sys_timeouts_init+0x40>)
 8017224:	f000 f810 	bl	8017248 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	3301      	adds	r3, #1
 801722c:	607b      	str	r3, [r7, #4]
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	2b02      	cmp	r3, #2
 8017232:	d9ed      	bls.n	8017210 <sys_timeouts_init+0xc>
  }
}
 8017234:	bf00      	nop
 8017236:	bf00      	nop
 8017238:	3708      	adds	r7, #8
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
 801723e:	bf00      	nop
 8017240:	08028d14 	.word	0x08028d14
 8017244:	080171a1 	.word	0x080171a1

08017248 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017248:	b580      	push	{r7, lr}
 801724a:	b086      	sub	sp, #24
 801724c:	af00      	add	r7, sp, #0
 801724e:	60f8      	str	r0, [r7, #12]
 8017250:	60b9      	str	r1, [r7, #8]
 8017252:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801725a:	d306      	bcc.n	801726a <sys_timeout+0x22>
 801725c:	4b0a      	ldr	r3, [pc, #40]	; (8017288 <sys_timeout+0x40>)
 801725e:	f240 1229 	movw	r2, #297	; 0x129
 8017262:	490a      	ldr	r1, [pc, #40]	; (801728c <sys_timeout+0x44>)
 8017264:	480a      	ldr	r0, [pc, #40]	; (8017290 <sys_timeout+0x48>)
 8017266:	f003 fded 	bl	801ae44 <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801726a:	f7f2 f865 	bl	8009338 <sys_now>
 801726e:	4602      	mov	r2, r0
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	4413      	add	r3, r2
 8017274:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017276:	687a      	ldr	r2, [r7, #4]
 8017278:	68b9      	ldr	r1, [r7, #8]
 801727a:	6978      	ldr	r0, [r7, #20]
 801727c:	f7ff ff22 	bl	80170c4 <sys_timeout_abs>
#endif
}
 8017280:	bf00      	nop
 8017282:	3718      	adds	r7, #24
 8017284:	46bd      	mov	sp, r7
 8017286:	bd80      	pop	{r7, pc}
 8017288:	080269dc 	.word	0x080269dc
 801728c:	08026a78 	.word	0x08026a78
 8017290:	08026a50 	.word	0x08026a50

08017294 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b084      	sub	sp, #16
 8017298:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801729a:	f7f2 f84d 	bl	8009338 <sys_now>
 801729e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80172a0:	4b17      	ldr	r3, [pc, #92]	; (8017300 <sys_check_timeouts+0x6c>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80172a6:	68bb      	ldr	r3, [r7, #8]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d022      	beq.n	80172f2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80172ac:	68bb      	ldr	r3, [r7, #8]
 80172ae:	685b      	ldr	r3, [r3, #4]
 80172b0:	68fa      	ldr	r2, [r7, #12]
 80172b2:	1ad3      	subs	r3, r2, r3
 80172b4:	0fdb      	lsrs	r3, r3, #31
 80172b6:	f003 0301 	and.w	r3, r3, #1
 80172ba:	b2db      	uxtb	r3, r3
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d11a      	bne.n	80172f6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80172c0:	68bb      	ldr	r3, [r7, #8]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	4a0e      	ldr	r2, [pc, #56]	; (8017300 <sys_check_timeouts+0x6c>)
 80172c6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80172c8:	68bb      	ldr	r3, [r7, #8]
 80172ca:	689b      	ldr	r3, [r3, #8]
 80172cc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80172ce:	68bb      	ldr	r3, [r7, #8]
 80172d0:	68db      	ldr	r3, [r3, #12]
 80172d2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80172d4:	68bb      	ldr	r3, [r7, #8]
 80172d6:	685b      	ldr	r3, [r3, #4]
 80172d8:	4a0a      	ldr	r2, [pc, #40]	; (8017304 <sys_check_timeouts+0x70>)
 80172da:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80172dc:	68b9      	ldr	r1, [r7, #8]
 80172de:	200a      	movs	r0, #10
 80172e0:	f7f8 fd48 	bl	800fd74 <memp_free>
    if (handler != NULL) {
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d0da      	beq.n	80172a0 <sys_check_timeouts+0xc>
      handler(arg);
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	6838      	ldr	r0, [r7, #0]
 80172ee:	4798      	blx	r3
  do {
 80172f0:	e7d6      	b.n	80172a0 <sys_check_timeouts+0xc>
      return;
 80172f2:	bf00      	nop
 80172f4:	e000      	b.n	80172f8 <sys_check_timeouts+0x64>
      return;
 80172f6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80172f8:	3710      	adds	r7, #16
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}
 80172fe:	bf00      	nop
 8017300:	20004f2c 	.word	0x20004f2c
 8017304:	20004f30 	.word	0x20004f30

08017308 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b082      	sub	sp, #8
 801730c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801730e:	4b16      	ldr	r3, [pc, #88]	; (8017368 <sys_timeouts_sleeptime+0x60>)
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d102      	bne.n	801731c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017316:	f04f 33ff 	mov.w	r3, #4294967295
 801731a:	e020      	b.n	801735e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801731c:	f7f2 f80c 	bl	8009338 <sys_now>
 8017320:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017322:	4b11      	ldr	r3, [pc, #68]	; (8017368 <sys_timeouts_sleeptime+0x60>)
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	685a      	ldr	r2, [r3, #4]
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	1ad3      	subs	r3, r2, r3
 801732c:	0fdb      	lsrs	r3, r3, #31
 801732e:	f003 0301 	and.w	r3, r3, #1
 8017332:	b2db      	uxtb	r3, r3
 8017334:	2b00      	cmp	r3, #0
 8017336:	d001      	beq.n	801733c <sys_timeouts_sleeptime+0x34>
    return 0;
 8017338:	2300      	movs	r3, #0
 801733a:	e010      	b.n	801735e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801733c:	4b0a      	ldr	r3, [pc, #40]	; (8017368 <sys_timeouts_sleeptime+0x60>)
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	685a      	ldr	r2, [r3, #4]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	1ad3      	subs	r3, r2, r3
 8017346:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017348:	683b      	ldr	r3, [r7, #0]
 801734a:	2b00      	cmp	r3, #0
 801734c:	da06      	bge.n	801735c <sys_timeouts_sleeptime+0x54>
 801734e:	4b07      	ldr	r3, [pc, #28]	; (801736c <sys_timeouts_sleeptime+0x64>)
 8017350:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017354:	4906      	ldr	r1, [pc, #24]	; (8017370 <sys_timeouts_sleeptime+0x68>)
 8017356:	4807      	ldr	r0, [pc, #28]	; (8017374 <sys_timeouts_sleeptime+0x6c>)
 8017358:	f003 fd74 	bl	801ae44 <printf>
    return ret;
 801735c:	683b      	ldr	r3, [r7, #0]
  }
}
 801735e:	4618      	mov	r0, r3
 8017360:	3708      	adds	r7, #8
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}
 8017366:	bf00      	nop
 8017368:	20004f2c 	.word	0x20004f2c
 801736c:	080269dc 	.word	0x080269dc
 8017370:	08026ab0 	.word	0x08026ab0
 8017374:	08026a50 	.word	0x08026a50

08017378 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801737c:	f003 fd74 	bl	801ae68 <rand>
 8017380:	4603      	mov	r3, r0
 8017382:	b29b      	uxth	r3, r3
 8017384:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017388:	b29b      	uxth	r3, r3
 801738a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801738e:	b29a      	uxth	r2, r3
 8017390:	4b01      	ldr	r3, [pc, #4]	; (8017398 <udp_init+0x20>)
 8017392:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017394:	bf00      	nop
 8017396:	bd80      	pop	{r7, pc}
 8017398:	20000034 	.word	0x20000034

0801739c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801739c:	b480      	push	{r7}
 801739e:	b083      	sub	sp, #12
 80173a0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80173a2:	2300      	movs	r3, #0
 80173a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80173a6:	4b17      	ldr	r3, [pc, #92]	; (8017404 <udp_new_port+0x68>)
 80173a8:	881b      	ldrh	r3, [r3, #0]
 80173aa:	1c5a      	adds	r2, r3, #1
 80173ac:	b291      	uxth	r1, r2
 80173ae:	4a15      	ldr	r2, [pc, #84]	; (8017404 <udp_new_port+0x68>)
 80173b0:	8011      	strh	r1, [r2, #0]
 80173b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80173b6:	4293      	cmp	r3, r2
 80173b8:	d103      	bne.n	80173c2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80173ba:	4b12      	ldr	r3, [pc, #72]	; (8017404 <udp_new_port+0x68>)
 80173bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80173c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80173c2:	4b11      	ldr	r3, [pc, #68]	; (8017408 <udp_new_port+0x6c>)
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	603b      	str	r3, [r7, #0]
 80173c8:	e011      	b.n	80173ee <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80173ca:	683b      	ldr	r3, [r7, #0]
 80173cc:	8a5a      	ldrh	r2, [r3, #18]
 80173ce:	4b0d      	ldr	r3, [pc, #52]	; (8017404 <udp_new_port+0x68>)
 80173d0:	881b      	ldrh	r3, [r3, #0]
 80173d2:	429a      	cmp	r2, r3
 80173d4:	d108      	bne.n	80173e8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80173d6:	88fb      	ldrh	r3, [r7, #6]
 80173d8:	3301      	adds	r3, #1
 80173da:	80fb      	strh	r3, [r7, #6]
 80173dc:	88fb      	ldrh	r3, [r7, #6]
 80173de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80173e2:	d3e0      	bcc.n	80173a6 <udp_new_port+0xa>
        return 0;
 80173e4:	2300      	movs	r3, #0
 80173e6:	e007      	b.n	80173f8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	68db      	ldr	r3, [r3, #12]
 80173ec:	603b      	str	r3, [r7, #0]
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d1ea      	bne.n	80173ca <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80173f4:	4b03      	ldr	r3, [pc, #12]	; (8017404 <udp_new_port+0x68>)
 80173f6:	881b      	ldrh	r3, [r3, #0]
}
 80173f8:	4618      	mov	r0, r3
 80173fa:	370c      	adds	r7, #12
 80173fc:	46bd      	mov	sp, r7
 80173fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017402:	4770      	bx	lr
 8017404:	20000034 	.word	0x20000034
 8017408:	2000be2c 	.word	0x2000be2c

0801740c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b084      	sub	sp, #16
 8017410:	af00      	add	r7, sp, #0
 8017412:	60f8      	str	r0, [r7, #12]
 8017414:	60b9      	str	r1, [r7, #8]
 8017416:	4613      	mov	r3, r2
 8017418:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d105      	bne.n	801742c <udp_input_local_match+0x20>
 8017420:	4b27      	ldr	r3, [pc, #156]	; (80174c0 <udp_input_local_match+0xb4>)
 8017422:	2287      	movs	r2, #135	; 0x87
 8017424:	4927      	ldr	r1, [pc, #156]	; (80174c4 <udp_input_local_match+0xb8>)
 8017426:	4828      	ldr	r0, [pc, #160]	; (80174c8 <udp_input_local_match+0xbc>)
 8017428:	f003 fd0c 	bl	801ae44 <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801742c:	68bb      	ldr	r3, [r7, #8]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d105      	bne.n	801743e <udp_input_local_match+0x32>
 8017432:	4b23      	ldr	r3, [pc, #140]	; (80174c0 <udp_input_local_match+0xb4>)
 8017434:	2288      	movs	r2, #136	; 0x88
 8017436:	4925      	ldr	r1, [pc, #148]	; (80174cc <udp_input_local_match+0xc0>)
 8017438:	4823      	ldr	r0, [pc, #140]	; (80174c8 <udp_input_local_match+0xbc>)
 801743a:	f003 fd03 	bl	801ae44 <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	7a1b      	ldrb	r3, [r3, #8]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d00b      	beq.n	801745e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	7a1a      	ldrb	r2, [r3, #8]
 801744a:	4b21      	ldr	r3, [pc, #132]	; (80174d0 <udp_input_local_match+0xc4>)
 801744c:	685b      	ldr	r3, [r3, #4]
 801744e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017452:	3301      	adds	r3, #1
 8017454:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017456:	429a      	cmp	r2, r3
 8017458:	d001      	beq.n	801745e <udp_input_local_match+0x52>
    return 0;
 801745a:	2300      	movs	r3, #0
 801745c:	e02b      	b.n	80174b6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801745e:	79fb      	ldrb	r3, [r7, #7]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d018      	beq.n	8017496 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d013      	beq.n	8017492 <udp_input_local_match+0x86>
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d00f      	beq.n	8017492 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017472:	4b17      	ldr	r3, [pc, #92]	; (80174d0 <udp_input_local_match+0xc4>)
 8017474:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017476:	f1b3 3fff 	cmp.w	r3, #4294967295
 801747a:	d00a      	beq.n	8017492 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	681a      	ldr	r2, [r3, #0]
 8017480:	4b13      	ldr	r3, [pc, #76]	; (80174d0 <udp_input_local_match+0xc4>)
 8017482:	695b      	ldr	r3, [r3, #20]
 8017484:	405a      	eors	r2, r3
 8017486:	68bb      	ldr	r3, [r7, #8]
 8017488:	3308      	adds	r3, #8
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801748e:	2b00      	cmp	r3, #0
 8017490:	d110      	bne.n	80174b4 <udp_input_local_match+0xa8>
          return 1;
 8017492:	2301      	movs	r3, #1
 8017494:	e00f      	b.n	80174b6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d009      	beq.n	80174b0 <udp_input_local_match+0xa4>
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d005      	beq.n	80174b0 <udp_input_local_match+0xa4>
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	681a      	ldr	r2, [r3, #0]
 80174a8:	4b09      	ldr	r3, [pc, #36]	; (80174d0 <udp_input_local_match+0xc4>)
 80174aa:	695b      	ldr	r3, [r3, #20]
 80174ac:	429a      	cmp	r2, r3
 80174ae:	d101      	bne.n	80174b4 <udp_input_local_match+0xa8>
        return 1;
 80174b0:	2301      	movs	r3, #1
 80174b2:	e000      	b.n	80174b6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80174b4:	2300      	movs	r3, #0
}
 80174b6:	4618      	mov	r0, r3
 80174b8:	3710      	adds	r7, #16
 80174ba:	46bd      	mov	sp, r7
 80174bc:	bd80      	pop	{r7, pc}
 80174be:	bf00      	nop
 80174c0:	08026ac4 	.word	0x08026ac4
 80174c4:	08026af4 	.word	0x08026af4
 80174c8:	08026b18 	.word	0x08026b18
 80174cc:	08026b40 	.word	0x08026b40
 80174d0:	20008700 	.word	0x20008700

080174d4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80174d4:	b590      	push	{r4, r7, lr}
 80174d6:	b08d      	sub	sp, #52	; 0x34
 80174d8:	af02      	add	r7, sp, #8
 80174da:	6078      	str	r0, [r7, #4]
 80174dc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80174de:	2300      	movs	r3, #0
 80174e0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d105      	bne.n	80174f4 <udp_input+0x20>
 80174e8:	4b7c      	ldr	r3, [pc, #496]	; (80176dc <udp_input+0x208>)
 80174ea:	22cf      	movs	r2, #207	; 0xcf
 80174ec:	497c      	ldr	r1, [pc, #496]	; (80176e0 <udp_input+0x20c>)
 80174ee:	487d      	ldr	r0, [pc, #500]	; (80176e4 <udp_input+0x210>)
 80174f0:	f003 fca8 	bl	801ae44 <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d105      	bne.n	8017506 <udp_input+0x32>
 80174fa:	4b78      	ldr	r3, [pc, #480]	; (80176dc <udp_input+0x208>)
 80174fc:	22d0      	movs	r2, #208	; 0xd0
 80174fe:	497a      	ldr	r1, [pc, #488]	; (80176e8 <udp_input+0x214>)
 8017500:	4878      	ldr	r0, [pc, #480]	; (80176e4 <udp_input+0x210>)
 8017502:	f003 fc9f 	bl	801ae44 <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	895b      	ldrh	r3, [r3, #10]
 801750a:	2b07      	cmp	r3, #7
 801750c:	d803      	bhi.n	8017516 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801750e:	6878      	ldr	r0, [r7, #4]
 8017510:	f7f9 fa5c 	bl	80109cc <pbuf_free>
    goto end;
 8017514:	e0de      	b.n	80176d4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	685b      	ldr	r3, [r3, #4]
 801751a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801751c:	4b73      	ldr	r3, [pc, #460]	; (80176ec <udp_input+0x218>)
 801751e:	695b      	ldr	r3, [r3, #20]
 8017520:	4a72      	ldr	r2, [pc, #456]	; (80176ec <udp_input+0x218>)
 8017522:	6812      	ldr	r2, [r2, #0]
 8017524:	4611      	mov	r1, r2
 8017526:	4618      	mov	r0, r3
 8017528:	f001 ff80 	bl	801942c <ip4_addr_isbroadcast_u32>
 801752c:	4603      	mov	r3, r0
 801752e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017530:	697b      	ldr	r3, [r7, #20]
 8017532:	881b      	ldrh	r3, [r3, #0]
 8017534:	b29b      	uxth	r3, r3
 8017536:	4618      	mov	r0, r3
 8017538:	f7f7 fede 	bl	800f2f8 <lwip_htons>
 801753c:	4603      	mov	r3, r0
 801753e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017540:	697b      	ldr	r3, [r7, #20]
 8017542:	885b      	ldrh	r3, [r3, #2]
 8017544:	b29b      	uxth	r3, r3
 8017546:	4618      	mov	r0, r3
 8017548:	f7f7 fed6 	bl	800f2f8 <lwip_htons>
 801754c:	4603      	mov	r3, r0
 801754e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017550:	2300      	movs	r3, #0
 8017552:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017554:	2300      	movs	r3, #0
 8017556:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017558:	2300      	movs	r3, #0
 801755a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801755c:	4b64      	ldr	r3, [pc, #400]	; (80176f0 <udp_input+0x21c>)
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	627b      	str	r3, [r7, #36]	; 0x24
 8017562:	e054      	b.n	801760e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017566:	8a5b      	ldrh	r3, [r3, #18]
 8017568:	89fa      	ldrh	r2, [r7, #14]
 801756a:	429a      	cmp	r2, r3
 801756c:	d14a      	bne.n	8017604 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801756e:	7cfb      	ldrb	r3, [r7, #19]
 8017570:	461a      	mov	r2, r3
 8017572:	6839      	ldr	r1, [r7, #0]
 8017574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017576:	f7ff ff49 	bl	801740c <udp_input_local_match>
 801757a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801757c:	2b00      	cmp	r3, #0
 801757e:	d041      	beq.n	8017604 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017582:	7c1b      	ldrb	r3, [r3, #16]
 8017584:	f003 0304 	and.w	r3, r3, #4
 8017588:	2b00      	cmp	r3, #0
 801758a:	d11d      	bne.n	80175c8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801758c:	69fb      	ldr	r3, [r7, #28]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d102      	bne.n	8017598 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017594:	61fb      	str	r3, [r7, #28]
 8017596:	e017      	b.n	80175c8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017598:	7cfb      	ldrb	r3, [r7, #19]
 801759a:	2b00      	cmp	r3, #0
 801759c:	d014      	beq.n	80175c8 <udp_input+0xf4>
 801759e:	4b53      	ldr	r3, [pc, #332]	; (80176ec <udp_input+0x218>)
 80175a0:	695b      	ldr	r3, [r3, #20]
 80175a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175a6:	d10f      	bne.n	80175c8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80175a8:	69fb      	ldr	r3, [r7, #28]
 80175aa:	681a      	ldr	r2, [r3, #0]
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	3304      	adds	r3, #4
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	429a      	cmp	r2, r3
 80175b4:	d008      	beq.n	80175c8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80175b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b8:	681a      	ldr	r2, [r3, #0]
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	3304      	adds	r3, #4
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d101      	bne.n	80175c8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80175c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80175c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ca:	8a9b      	ldrh	r3, [r3, #20]
 80175cc:	8a3a      	ldrh	r2, [r7, #16]
 80175ce:	429a      	cmp	r2, r3
 80175d0:	d118      	bne.n	8017604 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80175d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d005      	beq.n	80175e6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80175da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175dc:	685a      	ldr	r2, [r3, #4]
 80175de:	4b43      	ldr	r3, [pc, #268]	; (80176ec <udp_input+0x218>)
 80175e0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d10e      	bne.n	8017604 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80175e6:	6a3b      	ldr	r3, [r7, #32]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d014      	beq.n	8017616 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80175ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ee:	68da      	ldr	r2, [r3, #12]
 80175f0:	6a3b      	ldr	r3, [r7, #32]
 80175f2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80175f4:	4b3e      	ldr	r3, [pc, #248]	; (80176f0 <udp_input+0x21c>)
 80175f6:	681a      	ldr	r2, [r3, #0]
 80175f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175fa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80175fc:	4a3c      	ldr	r2, [pc, #240]	; (80176f0 <udp_input+0x21c>)
 80175fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017600:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017602:	e008      	b.n	8017616 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017606:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801760a:	68db      	ldr	r3, [r3, #12]
 801760c:	627b      	str	r3, [r7, #36]	; 0x24
 801760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017610:	2b00      	cmp	r3, #0
 8017612:	d1a7      	bne.n	8017564 <udp_input+0x90>
 8017614:	e000      	b.n	8017618 <udp_input+0x144>
        break;
 8017616:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761a:	2b00      	cmp	r3, #0
 801761c:	d101      	bne.n	8017622 <udp_input+0x14e>
    pcb = uncon_pcb;
 801761e:	69fb      	ldr	r3, [r7, #28]
 8017620:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017624:	2b00      	cmp	r3, #0
 8017626:	d002      	beq.n	801762e <udp_input+0x15a>
    for_us = 1;
 8017628:	2301      	movs	r3, #1
 801762a:	76fb      	strb	r3, [r7, #27]
 801762c:	e00a      	b.n	8017644 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801762e:	683b      	ldr	r3, [r7, #0]
 8017630:	3304      	adds	r3, #4
 8017632:	681a      	ldr	r2, [r3, #0]
 8017634:	4b2d      	ldr	r3, [pc, #180]	; (80176ec <udp_input+0x218>)
 8017636:	695b      	ldr	r3, [r3, #20]
 8017638:	429a      	cmp	r2, r3
 801763a:	bf0c      	ite	eq
 801763c:	2301      	moveq	r3, #1
 801763e:	2300      	movne	r3, #0
 8017640:	b2db      	uxtb	r3, r3
 8017642:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017644:	7efb      	ldrb	r3, [r7, #27]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d041      	beq.n	80176ce <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801764a:	2108      	movs	r1, #8
 801764c:	6878      	ldr	r0, [r7, #4]
 801764e:	f7f9 f937 	bl	80108c0 <pbuf_remove_header>
 8017652:	4603      	mov	r3, r0
 8017654:	2b00      	cmp	r3, #0
 8017656:	d00a      	beq.n	801766e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017658:	4b20      	ldr	r3, [pc, #128]	; (80176dc <udp_input+0x208>)
 801765a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801765e:	4925      	ldr	r1, [pc, #148]	; (80176f4 <udp_input+0x220>)
 8017660:	4820      	ldr	r0, [pc, #128]	; (80176e4 <udp_input+0x210>)
 8017662:	f003 fbef 	bl	801ae44 <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f7f9 f9b0 	bl	80109cc <pbuf_free>
      goto end;
 801766c:	e032      	b.n	80176d4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017670:	2b00      	cmp	r3, #0
 8017672:	d012      	beq.n	801769a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017676:	699b      	ldr	r3, [r3, #24]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d00a      	beq.n	8017692 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801767e:	699c      	ldr	r4, [r3, #24]
 8017680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017682:	69d8      	ldr	r0, [r3, #28]
 8017684:	8a3b      	ldrh	r3, [r7, #16]
 8017686:	9300      	str	r3, [sp, #0]
 8017688:	4b1b      	ldr	r3, [pc, #108]	; (80176f8 <udp_input+0x224>)
 801768a:	687a      	ldr	r2, [r7, #4]
 801768c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801768e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017690:	e021      	b.n	80176d6 <udp_input+0x202>
        pbuf_free(p);
 8017692:	6878      	ldr	r0, [r7, #4]
 8017694:	f7f9 f99a 	bl	80109cc <pbuf_free>
        goto end;
 8017698:	e01c      	b.n	80176d4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801769a:	7cfb      	ldrb	r3, [r7, #19]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d112      	bne.n	80176c6 <udp_input+0x1f2>
 80176a0:	4b12      	ldr	r3, [pc, #72]	; (80176ec <udp_input+0x218>)
 80176a2:	695b      	ldr	r3, [r3, #20]
 80176a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80176a8:	2be0      	cmp	r3, #224	; 0xe0
 80176aa:	d00c      	beq.n	80176c6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80176ac:	4b0f      	ldr	r3, [pc, #60]	; (80176ec <udp_input+0x218>)
 80176ae:	899b      	ldrh	r3, [r3, #12]
 80176b0:	3308      	adds	r3, #8
 80176b2:	b29b      	uxth	r3, r3
 80176b4:	b21b      	sxth	r3, r3
 80176b6:	4619      	mov	r1, r3
 80176b8:	6878      	ldr	r0, [r7, #4]
 80176ba:	f7f9 f974 	bl	80109a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80176be:	2103      	movs	r1, #3
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	f001 fb93 	bl	8018dec <icmp_dest_unreach>
      pbuf_free(p);
 80176c6:	6878      	ldr	r0, [r7, #4]
 80176c8:	f7f9 f980 	bl	80109cc <pbuf_free>
  return;
 80176cc:	e003      	b.n	80176d6 <udp_input+0x202>
    pbuf_free(p);
 80176ce:	6878      	ldr	r0, [r7, #4]
 80176d0:	f7f9 f97c 	bl	80109cc <pbuf_free>
  return;
 80176d4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80176d6:	372c      	adds	r7, #44	; 0x2c
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd90      	pop	{r4, r7, pc}
 80176dc:	08026ac4 	.word	0x08026ac4
 80176e0:	08026b68 	.word	0x08026b68
 80176e4:	08026b18 	.word	0x08026b18
 80176e8:	08026b80 	.word	0x08026b80
 80176ec:	20008700 	.word	0x20008700
 80176f0:	2000be2c 	.word	0x2000be2c
 80176f4:	08026b9c 	.word	0x08026b9c
 80176f8:	20008710 	.word	0x20008710

080176fc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b082      	sub	sp, #8
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]
 8017704:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d109      	bne.n	8017720 <udp_send+0x24>
 801770c:	4b11      	ldr	r3, [pc, #68]	; (8017754 <udp_send+0x58>)
 801770e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8017712:	4911      	ldr	r1, [pc, #68]	; (8017758 <udp_send+0x5c>)
 8017714:	4811      	ldr	r0, [pc, #68]	; (801775c <udp_send+0x60>)
 8017716:	f003 fb95 	bl	801ae44 <printf>
 801771a:	f06f 030f 	mvn.w	r3, #15
 801771e:	e015      	b.n	801774c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d109      	bne.n	801773a <udp_send+0x3e>
 8017726:	4b0b      	ldr	r3, [pc, #44]	; (8017754 <udp_send+0x58>)
 8017728:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801772c:	490c      	ldr	r1, [pc, #48]	; (8017760 <udp_send+0x64>)
 801772e:	480b      	ldr	r0, [pc, #44]	; (801775c <udp_send+0x60>)
 8017730:	f003 fb88 	bl	801ae44 <printf>
 8017734:	f06f 030f 	mvn.w	r3, #15
 8017738:	e008      	b.n	801774c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	1d1a      	adds	r2, r3, #4
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	8a9b      	ldrh	r3, [r3, #20]
 8017742:	6839      	ldr	r1, [r7, #0]
 8017744:	6878      	ldr	r0, [r7, #4]
 8017746:	f000 f80d 	bl	8017764 <udp_sendto>
 801774a:	4603      	mov	r3, r0
}
 801774c:	4618      	mov	r0, r3
 801774e:	3708      	adds	r7, #8
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}
 8017754:	08026ac4 	.word	0x08026ac4
 8017758:	08026bb8 	.word	0x08026bb8
 801775c:	08026b18 	.word	0x08026b18
 8017760:	08026bd0 	.word	0x08026bd0

08017764 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b088      	sub	sp, #32
 8017768:	af02      	add	r7, sp, #8
 801776a:	60f8      	str	r0, [r7, #12]
 801776c:	60b9      	str	r1, [r7, #8]
 801776e:	607a      	str	r2, [r7, #4]
 8017770:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d109      	bne.n	801778c <udp_sendto+0x28>
 8017778:	4b23      	ldr	r3, [pc, #140]	; (8017808 <udp_sendto+0xa4>)
 801777a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801777e:	4923      	ldr	r1, [pc, #140]	; (801780c <udp_sendto+0xa8>)
 8017780:	4823      	ldr	r0, [pc, #140]	; (8017810 <udp_sendto+0xac>)
 8017782:	f003 fb5f 	bl	801ae44 <printf>
 8017786:	f06f 030f 	mvn.w	r3, #15
 801778a:	e038      	b.n	80177fe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801778c:	68bb      	ldr	r3, [r7, #8]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d109      	bne.n	80177a6 <udp_sendto+0x42>
 8017792:	4b1d      	ldr	r3, [pc, #116]	; (8017808 <udp_sendto+0xa4>)
 8017794:	f240 2219 	movw	r2, #537	; 0x219
 8017798:	491e      	ldr	r1, [pc, #120]	; (8017814 <udp_sendto+0xb0>)
 801779a:	481d      	ldr	r0, [pc, #116]	; (8017810 <udp_sendto+0xac>)
 801779c:	f003 fb52 	bl	801ae44 <printf>
 80177a0:	f06f 030f 	mvn.w	r3, #15
 80177a4:	e02b      	b.n	80177fe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d109      	bne.n	80177c0 <udp_sendto+0x5c>
 80177ac:	4b16      	ldr	r3, [pc, #88]	; (8017808 <udp_sendto+0xa4>)
 80177ae:	f240 221a 	movw	r2, #538	; 0x21a
 80177b2:	4919      	ldr	r1, [pc, #100]	; (8017818 <udp_sendto+0xb4>)
 80177b4:	4816      	ldr	r0, [pc, #88]	; (8017810 <udp_sendto+0xac>)
 80177b6:	f003 fb45 	bl	801ae44 <printf>
 80177ba:	f06f 030f 	mvn.w	r3, #15
 80177be:	e01e      	b.n	80177fe <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	7a1b      	ldrb	r3, [r3, #8]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d006      	beq.n	80177d6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	7a1b      	ldrb	r3, [r3, #8]
 80177cc:	4618      	mov	r0, r3
 80177ce:	f7f8 fd6f 	bl	80102b0 <netif_get_by_index>
 80177d2:	6178      	str	r0, [r7, #20]
 80177d4:	e003      	b.n	80177de <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80177d6:	6878      	ldr	r0, [r7, #4]
 80177d8:	f001 fb92 	bl	8018f00 <ip4_route>
 80177dc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80177de:	697b      	ldr	r3, [r7, #20]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d102      	bne.n	80177ea <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80177e4:	f06f 0303 	mvn.w	r3, #3
 80177e8:	e009      	b.n	80177fe <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80177ea:	887a      	ldrh	r2, [r7, #2]
 80177ec:	697b      	ldr	r3, [r7, #20]
 80177ee:	9300      	str	r3, [sp, #0]
 80177f0:	4613      	mov	r3, r2
 80177f2:	687a      	ldr	r2, [r7, #4]
 80177f4:	68b9      	ldr	r1, [r7, #8]
 80177f6:	68f8      	ldr	r0, [r7, #12]
 80177f8:	f000 f810 	bl	801781c <udp_sendto_if>
 80177fc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80177fe:	4618      	mov	r0, r3
 8017800:	3718      	adds	r7, #24
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}
 8017806:	bf00      	nop
 8017808:	08026ac4 	.word	0x08026ac4
 801780c:	08026be8 	.word	0x08026be8
 8017810:	08026b18 	.word	0x08026b18
 8017814:	08026c00 	.word	0x08026c00
 8017818:	08026c1c 	.word	0x08026c1c

0801781c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b088      	sub	sp, #32
 8017820:	af02      	add	r7, sp, #8
 8017822:	60f8      	str	r0, [r7, #12]
 8017824:	60b9      	str	r1, [r7, #8]
 8017826:	607a      	str	r2, [r7, #4]
 8017828:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d109      	bne.n	8017844 <udp_sendto_if+0x28>
 8017830:	4b2e      	ldr	r3, [pc, #184]	; (80178ec <udp_sendto_if+0xd0>)
 8017832:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017836:	492e      	ldr	r1, [pc, #184]	; (80178f0 <udp_sendto_if+0xd4>)
 8017838:	482e      	ldr	r0, [pc, #184]	; (80178f4 <udp_sendto_if+0xd8>)
 801783a:	f003 fb03 	bl	801ae44 <printf>
 801783e:	f06f 030f 	mvn.w	r3, #15
 8017842:	e04f      	b.n	80178e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8017844:	68bb      	ldr	r3, [r7, #8]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d109      	bne.n	801785e <udp_sendto_if+0x42>
 801784a:	4b28      	ldr	r3, [pc, #160]	; (80178ec <udp_sendto_if+0xd0>)
 801784c:	f240 2281 	movw	r2, #641	; 0x281
 8017850:	4929      	ldr	r1, [pc, #164]	; (80178f8 <udp_sendto_if+0xdc>)
 8017852:	4828      	ldr	r0, [pc, #160]	; (80178f4 <udp_sendto_if+0xd8>)
 8017854:	f003 faf6 	bl	801ae44 <printf>
 8017858:	f06f 030f 	mvn.w	r3, #15
 801785c:	e042      	b.n	80178e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d109      	bne.n	8017878 <udp_sendto_if+0x5c>
 8017864:	4b21      	ldr	r3, [pc, #132]	; (80178ec <udp_sendto_if+0xd0>)
 8017866:	f240 2282 	movw	r2, #642	; 0x282
 801786a:	4924      	ldr	r1, [pc, #144]	; (80178fc <udp_sendto_if+0xe0>)
 801786c:	4821      	ldr	r0, [pc, #132]	; (80178f4 <udp_sendto_if+0xd8>)
 801786e:	f003 fae9 	bl	801ae44 <printf>
 8017872:	f06f 030f 	mvn.w	r3, #15
 8017876:	e035      	b.n	80178e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017878:	6a3b      	ldr	r3, [r7, #32]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d109      	bne.n	8017892 <udp_sendto_if+0x76>
 801787e:	4b1b      	ldr	r3, [pc, #108]	; (80178ec <udp_sendto_if+0xd0>)
 8017880:	f240 2283 	movw	r2, #643	; 0x283
 8017884:	491e      	ldr	r1, [pc, #120]	; (8017900 <udp_sendto_if+0xe4>)
 8017886:	481b      	ldr	r0, [pc, #108]	; (80178f4 <udp_sendto_if+0xd8>)
 8017888:	f003 fadc 	bl	801ae44 <printf>
 801788c:	f06f 030f 	mvn.w	r3, #15
 8017890:	e028      	b.n	80178e4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d009      	beq.n	80178ac <udp_sendto_if+0x90>
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d005      	beq.n	80178ac <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80178a8:	2be0      	cmp	r3, #224	; 0xe0
 80178aa:	d103      	bne.n	80178b4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80178ac:	6a3b      	ldr	r3, [r7, #32]
 80178ae:	3304      	adds	r3, #4
 80178b0:	617b      	str	r3, [r7, #20]
 80178b2:	e00b      	b.n	80178cc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	681a      	ldr	r2, [r3, #0]
 80178b8:	6a3b      	ldr	r3, [r7, #32]
 80178ba:	3304      	adds	r3, #4
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	429a      	cmp	r2, r3
 80178c0:	d002      	beq.n	80178c8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80178c2:	f06f 0303 	mvn.w	r3, #3
 80178c6:	e00d      	b.n	80178e4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80178cc:	887a      	ldrh	r2, [r7, #2]
 80178ce:	697b      	ldr	r3, [r7, #20]
 80178d0:	9301      	str	r3, [sp, #4]
 80178d2:	6a3b      	ldr	r3, [r7, #32]
 80178d4:	9300      	str	r3, [sp, #0]
 80178d6:	4613      	mov	r3, r2
 80178d8:	687a      	ldr	r2, [r7, #4]
 80178da:	68b9      	ldr	r1, [r7, #8]
 80178dc:	68f8      	ldr	r0, [r7, #12]
 80178de:	f000 f811 	bl	8017904 <udp_sendto_if_src>
 80178e2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80178e4:	4618      	mov	r0, r3
 80178e6:	3718      	adds	r7, #24
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}
 80178ec:	08026ac4 	.word	0x08026ac4
 80178f0:	08026c38 	.word	0x08026c38
 80178f4:	08026b18 	.word	0x08026b18
 80178f8:	08026c54 	.word	0x08026c54
 80178fc:	08026c70 	.word	0x08026c70
 8017900:	08026c90 	.word	0x08026c90

08017904 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b08c      	sub	sp, #48	; 0x30
 8017908:	af04      	add	r7, sp, #16
 801790a:	60f8      	str	r0, [r7, #12]
 801790c:	60b9      	str	r1, [r7, #8]
 801790e:	607a      	str	r2, [r7, #4]
 8017910:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d109      	bne.n	801792c <udp_sendto_if_src+0x28>
 8017918:	4b65      	ldr	r3, [pc, #404]	; (8017ab0 <udp_sendto_if_src+0x1ac>)
 801791a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801791e:	4965      	ldr	r1, [pc, #404]	; (8017ab4 <udp_sendto_if_src+0x1b0>)
 8017920:	4865      	ldr	r0, [pc, #404]	; (8017ab8 <udp_sendto_if_src+0x1b4>)
 8017922:	f003 fa8f 	bl	801ae44 <printf>
 8017926:	f06f 030f 	mvn.w	r3, #15
 801792a:	e0bc      	b.n	8017aa6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801792c:	68bb      	ldr	r3, [r7, #8]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d109      	bne.n	8017946 <udp_sendto_if_src+0x42>
 8017932:	4b5f      	ldr	r3, [pc, #380]	; (8017ab0 <udp_sendto_if_src+0x1ac>)
 8017934:	f240 22d2 	movw	r2, #722	; 0x2d2
 8017938:	4960      	ldr	r1, [pc, #384]	; (8017abc <udp_sendto_if_src+0x1b8>)
 801793a:	485f      	ldr	r0, [pc, #380]	; (8017ab8 <udp_sendto_if_src+0x1b4>)
 801793c:	f003 fa82 	bl	801ae44 <printf>
 8017940:	f06f 030f 	mvn.w	r3, #15
 8017944:	e0af      	b.n	8017aa6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d109      	bne.n	8017960 <udp_sendto_if_src+0x5c>
 801794c:	4b58      	ldr	r3, [pc, #352]	; (8017ab0 <udp_sendto_if_src+0x1ac>)
 801794e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8017952:	495b      	ldr	r1, [pc, #364]	; (8017ac0 <udp_sendto_if_src+0x1bc>)
 8017954:	4858      	ldr	r0, [pc, #352]	; (8017ab8 <udp_sendto_if_src+0x1b4>)
 8017956:	f003 fa75 	bl	801ae44 <printf>
 801795a:	f06f 030f 	mvn.w	r3, #15
 801795e:	e0a2      	b.n	8017aa6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017962:	2b00      	cmp	r3, #0
 8017964:	d109      	bne.n	801797a <udp_sendto_if_src+0x76>
 8017966:	4b52      	ldr	r3, [pc, #328]	; (8017ab0 <udp_sendto_if_src+0x1ac>)
 8017968:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801796c:	4955      	ldr	r1, [pc, #340]	; (8017ac4 <udp_sendto_if_src+0x1c0>)
 801796e:	4852      	ldr	r0, [pc, #328]	; (8017ab8 <udp_sendto_if_src+0x1b4>)
 8017970:	f003 fa68 	bl	801ae44 <printf>
 8017974:	f06f 030f 	mvn.w	r3, #15
 8017978:	e095      	b.n	8017aa6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801797c:	2b00      	cmp	r3, #0
 801797e:	d109      	bne.n	8017994 <udp_sendto_if_src+0x90>
 8017980:	4b4b      	ldr	r3, [pc, #300]	; (8017ab0 <udp_sendto_if_src+0x1ac>)
 8017982:	f240 22d5 	movw	r2, #725	; 0x2d5
 8017986:	4950      	ldr	r1, [pc, #320]	; (8017ac8 <udp_sendto_if_src+0x1c4>)
 8017988:	484b      	ldr	r0, [pc, #300]	; (8017ab8 <udp_sendto_if_src+0x1b4>)
 801798a:	f003 fa5b 	bl	801ae44 <printf>
 801798e:	f06f 030f 	mvn.w	r3, #15
 8017992:	e088      	b.n	8017aa6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	8a5b      	ldrh	r3, [r3, #18]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d10f      	bne.n	80179bc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801799c:	68f9      	ldr	r1, [r7, #12]
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	8a5b      	ldrh	r3, [r3, #18]
 80179a2:	461a      	mov	r2, r3
 80179a4:	68f8      	ldr	r0, [r7, #12]
 80179a6:	f000 f893 	bl	8017ad0 <udp_bind>
 80179aa:	4603      	mov	r3, r0
 80179ac:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80179ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d002      	beq.n	80179bc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80179b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80179ba:	e074      	b.n	8017aa6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80179bc:	68bb      	ldr	r3, [r7, #8]
 80179be:	891b      	ldrh	r3, [r3, #8]
 80179c0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80179c4:	4293      	cmp	r3, r2
 80179c6:	d902      	bls.n	80179ce <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80179c8:	f04f 33ff 	mov.w	r3, #4294967295
 80179cc:	e06b      	b.n	8017aa6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80179ce:	2108      	movs	r1, #8
 80179d0:	68b8      	ldr	r0, [r7, #8]
 80179d2:	f7f8 ff65 	bl	80108a0 <pbuf_add_header>
 80179d6:	4603      	mov	r3, r0
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d015      	beq.n	8017a08 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80179dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80179e0:	2108      	movs	r1, #8
 80179e2:	2022      	movs	r0, #34	; 0x22
 80179e4:	f7f8 fd0e 	bl	8010404 <pbuf_alloc>
 80179e8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80179ea:	69fb      	ldr	r3, [r7, #28]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d102      	bne.n	80179f6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80179f0:	f04f 33ff 	mov.w	r3, #4294967295
 80179f4:	e057      	b.n	8017aa6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80179f6:	68bb      	ldr	r3, [r7, #8]
 80179f8:	891b      	ldrh	r3, [r3, #8]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d006      	beq.n	8017a0c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80179fe:	68b9      	ldr	r1, [r7, #8]
 8017a00:	69f8      	ldr	r0, [r7, #28]
 8017a02:	f7f9 f907 	bl	8010c14 <pbuf_chain>
 8017a06:	e001      	b.n	8017a0c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017a0c:	69fb      	ldr	r3, [r7, #28]
 8017a0e:	895b      	ldrh	r3, [r3, #10]
 8017a10:	2b07      	cmp	r3, #7
 8017a12:	d806      	bhi.n	8017a22 <udp_sendto_if_src+0x11e>
 8017a14:	4b26      	ldr	r3, [pc, #152]	; (8017ab0 <udp_sendto_if_src+0x1ac>)
 8017a16:	f240 320d 	movw	r2, #781	; 0x30d
 8017a1a:	492c      	ldr	r1, [pc, #176]	; (8017acc <udp_sendto_if_src+0x1c8>)
 8017a1c:	4826      	ldr	r0, [pc, #152]	; (8017ab8 <udp_sendto_if_src+0x1b4>)
 8017a1e:	f003 fa11 	bl	801ae44 <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017a22:	69fb      	ldr	r3, [r7, #28]
 8017a24:	685b      	ldr	r3, [r3, #4]
 8017a26:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	8a5b      	ldrh	r3, [r3, #18]
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	f7f7 fc63 	bl	800f2f8 <lwip_htons>
 8017a32:	4603      	mov	r3, r0
 8017a34:	461a      	mov	r2, r3
 8017a36:	697b      	ldr	r3, [r7, #20]
 8017a38:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8017a3a:	887b      	ldrh	r3, [r7, #2]
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7f7 fc5b 	bl	800f2f8 <lwip_htons>
 8017a42:	4603      	mov	r3, r0
 8017a44:	461a      	mov	r2, r3
 8017a46:	697b      	ldr	r3, [r7, #20]
 8017a48:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8017a4a:	697b      	ldr	r3, [r7, #20]
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	719a      	strb	r2, [r3, #6]
 8017a50:	2200      	movs	r2, #0
 8017a52:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8017a54:	69fb      	ldr	r3, [r7, #28]
 8017a56:	891b      	ldrh	r3, [r3, #8]
 8017a58:	4618      	mov	r0, r3
 8017a5a:	f7f7 fc4d 	bl	800f2f8 <lwip_htons>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	461a      	mov	r2, r3
 8017a62:	697b      	ldr	r3, [r7, #20]
 8017a64:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8017a66:	2311      	movs	r3, #17
 8017a68:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	7adb      	ldrb	r3, [r3, #11]
 8017a6e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	7a9b      	ldrb	r3, [r3, #10]
 8017a74:	7cb9      	ldrb	r1, [r7, #18]
 8017a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017a78:	9202      	str	r2, [sp, #8]
 8017a7a:	7cfa      	ldrb	r2, [r7, #19]
 8017a7c:	9201      	str	r2, [sp, #4]
 8017a7e:	9300      	str	r3, [sp, #0]
 8017a80:	460b      	mov	r3, r1
 8017a82:	687a      	ldr	r2, [r7, #4]
 8017a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017a86:	69f8      	ldr	r0, [r7, #28]
 8017a88:	f001 fc22 	bl	80192d0 <ip4_output_if_src>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8017a90:	69fa      	ldr	r2, [r7, #28]
 8017a92:	68bb      	ldr	r3, [r7, #8]
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d004      	beq.n	8017aa2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8017a98:	69f8      	ldr	r0, [r7, #28]
 8017a9a:	f7f8 ff97 	bl	80109cc <pbuf_free>
    q = NULL;
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8017aa2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	3720      	adds	r7, #32
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bd80      	pop	{r7, pc}
 8017aae:	bf00      	nop
 8017ab0:	08026ac4 	.word	0x08026ac4
 8017ab4:	08026cb0 	.word	0x08026cb0
 8017ab8:	08026b18 	.word	0x08026b18
 8017abc:	08026cd0 	.word	0x08026cd0
 8017ac0:	08026cf0 	.word	0x08026cf0
 8017ac4:	08026d14 	.word	0x08026d14
 8017ac8:	08026d38 	.word	0x08026d38
 8017acc:	08026d5c 	.word	0x08026d5c

08017ad0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b086      	sub	sp, #24
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	60f8      	str	r0, [r7, #12]
 8017ad8:	60b9      	str	r1, [r7, #8]
 8017ada:	4613      	mov	r3, r2
 8017adc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017ade:	68bb      	ldr	r3, [r7, #8]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d101      	bne.n	8017ae8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017ae4:	4b39      	ldr	r3, [pc, #228]	; (8017bcc <udp_bind+0xfc>)
 8017ae6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d109      	bne.n	8017b02 <udp_bind+0x32>
 8017aee:	4b38      	ldr	r3, [pc, #224]	; (8017bd0 <udp_bind+0x100>)
 8017af0:	f240 32b7 	movw	r2, #951	; 0x3b7
 8017af4:	4937      	ldr	r1, [pc, #220]	; (8017bd4 <udp_bind+0x104>)
 8017af6:	4838      	ldr	r0, [pc, #224]	; (8017bd8 <udp_bind+0x108>)
 8017af8:	f003 f9a4 	bl	801ae44 <printf>
 8017afc:	f06f 030f 	mvn.w	r3, #15
 8017b00:	e060      	b.n	8017bc4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017b02:	2300      	movs	r3, #0
 8017b04:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017b06:	4b35      	ldr	r3, [pc, #212]	; (8017bdc <udp_bind+0x10c>)
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	617b      	str	r3, [r7, #20]
 8017b0c:	e009      	b.n	8017b22 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017b0e:	68fa      	ldr	r2, [r7, #12]
 8017b10:	697b      	ldr	r3, [r7, #20]
 8017b12:	429a      	cmp	r2, r3
 8017b14:	d102      	bne.n	8017b1c <udp_bind+0x4c>
      rebind = 1;
 8017b16:	2301      	movs	r3, #1
 8017b18:	74fb      	strb	r3, [r7, #19]
      break;
 8017b1a:	e005      	b.n	8017b28 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017b1c:	697b      	ldr	r3, [r7, #20]
 8017b1e:	68db      	ldr	r3, [r3, #12]
 8017b20:	617b      	str	r3, [r7, #20]
 8017b22:	697b      	ldr	r3, [r7, #20]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d1f2      	bne.n	8017b0e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8017b28:	88fb      	ldrh	r3, [r7, #6]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d109      	bne.n	8017b42 <udp_bind+0x72>
    port = udp_new_port();
 8017b2e:	f7ff fc35 	bl	801739c <udp_new_port>
 8017b32:	4603      	mov	r3, r0
 8017b34:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8017b36:	88fb      	ldrh	r3, [r7, #6]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d12c      	bne.n	8017b96 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017b3c:	f06f 0307 	mvn.w	r3, #7
 8017b40:	e040      	b.n	8017bc4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017b42:	4b26      	ldr	r3, [pc, #152]	; (8017bdc <udp_bind+0x10c>)
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	617b      	str	r3, [r7, #20]
 8017b48:	e022      	b.n	8017b90 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8017b4a:	68fa      	ldr	r2, [r7, #12]
 8017b4c:	697b      	ldr	r3, [r7, #20]
 8017b4e:	429a      	cmp	r2, r3
 8017b50:	d01b      	beq.n	8017b8a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017b52:	697b      	ldr	r3, [r7, #20]
 8017b54:	8a5b      	ldrh	r3, [r3, #18]
 8017b56:	88fa      	ldrh	r2, [r7, #6]
 8017b58:	429a      	cmp	r2, r3
 8017b5a:	d116      	bne.n	8017b8a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017b5c:	697b      	ldr	r3, [r7, #20]
 8017b5e:	681a      	ldr	r2, [r3, #0]
 8017b60:	68bb      	ldr	r3, [r7, #8]
 8017b62:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d00d      	beq.n	8017b84 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017b68:	68bb      	ldr	r3, [r7, #8]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d00a      	beq.n	8017b84 <udp_bind+0xb4>
 8017b6e:	68bb      	ldr	r3, [r7, #8]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d006      	beq.n	8017b84 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017b76:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d003      	beq.n	8017b84 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d102      	bne.n	8017b8a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017b84:	f06f 0307 	mvn.w	r3, #7
 8017b88:	e01c      	b.n	8017bc4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017b8a:	697b      	ldr	r3, [r7, #20]
 8017b8c:	68db      	ldr	r3, [r3, #12]
 8017b8e:	617b      	str	r3, [r7, #20]
 8017b90:	697b      	ldr	r3, [r7, #20]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d1d9      	bne.n	8017b4a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d002      	beq.n	8017ba2 <udp_bind+0xd2>
 8017b9c:	68bb      	ldr	r3, [r7, #8]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	e000      	b.n	8017ba4 <udp_bind+0xd4>
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	68fa      	ldr	r2, [r7, #12]
 8017ba6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	88fa      	ldrh	r2, [r7, #6]
 8017bac:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017bae:	7cfb      	ldrb	r3, [r7, #19]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d106      	bne.n	8017bc2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017bb4:	4b09      	ldr	r3, [pc, #36]	; (8017bdc <udp_bind+0x10c>)
 8017bb6:	681a      	ldr	r2, [r3, #0]
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017bbc:	4a07      	ldr	r2, [pc, #28]	; (8017bdc <udp_bind+0x10c>)
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017bc2:	2300      	movs	r3, #0
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	3718      	adds	r7, #24
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}
 8017bcc:	08028d2c 	.word	0x08028d2c
 8017bd0:	08026ac4 	.word	0x08026ac4
 8017bd4:	08026d8c 	.word	0x08026d8c
 8017bd8:	08026b18 	.word	0x08026b18
 8017bdc:	2000be2c 	.word	0x2000be2c

08017be0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b084      	sub	sp, #16
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d107      	bne.n	8017c02 <udp_recv+0x22>
 8017bf2:	4b08      	ldr	r3, [pc, #32]	; (8017c14 <udp_recv+0x34>)
 8017bf4:	f240 428a 	movw	r2, #1162	; 0x48a
 8017bf8:	4907      	ldr	r1, [pc, #28]	; (8017c18 <udp_recv+0x38>)
 8017bfa:	4808      	ldr	r0, [pc, #32]	; (8017c1c <udp_recv+0x3c>)
 8017bfc:	f003 f922 	bl	801ae44 <printf>
 8017c00:	e005      	b.n	8017c0e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	68ba      	ldr	r2, [r7, #8]
 8017c06:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	687a      	ldr	r2, [r7, #4]
 8017c0c:	61da      	str	r2, [r3, #28]
}
 8017c0e:	3710      	adds	r7, #16
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}
 8017c14:	08026ac4 	.word	0x08026ac4
 8017c18:	08026df8 	.word	0x08026df8
 8017c1c:	08026b18 	.word	0x08026b18

08017c20 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b084      	sub	sp, #16
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d107      	bne.n	8017c3e <udp_remove+0x1e>
 8017c2e:	4b19      	ldr	r3, [pc, #100]	; (8017c94 <udp_remove+0x74>)
 8017c30:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8017c34:	4918      	ldr	r1, [pc, #96]	; (8017c98 <udp_remove+0x78>)
 8017c36:	4819      	ldr	r0, [pc, #100]	; (8017c9c <udp_remove+0x7c>)
 8017c38:	f003 f904 	bl	801ae44 <printf>
 8017c3c:	e026      	b.n	8017c8c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017c3e:	4b18      	ldr	r3, [pc, #96]	; (8017ca0 <udp_remove+0x80>)
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	687a      	ldr	r2, [r7, #4]
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d105      	bne.n	8017c54 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017c48:	4b15      	ldr	r3, [pc, #84]	; (8017ca0 <udp_remove+0x80>)
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	68db      	ldr	r3, [r3, #12]
 8017c4e:	4a14      	ldr	r2, [pc, #80]	; (8017ca0 <udp_remove+0x80>)
 8017c50:	6013      	str	r3, [r2, #0]
 8017c52:	e017      	b.n	8017c84 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017c54:	4b12      	ldr	r3, [pc, #72]	; (8017ca0 <udp_remove+0x80>)
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	60fb      	str	r3, [r7, #12]
 8017c5a:	e010      	b.n	8017c7e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	68db      	ldr	r3, [r3, #12]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d009      	beq.n	8017c78 <udp_remove+0x58>
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	68db      	ldr	r3, [r3, #12]
 8017c68:	687a      	ldr	r2, [r7, #4]
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	d104      	bne.n	8017c78 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	68da      	ldr	r2, [r3, #12]
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	60da      	str	r2, [r3, #12]
        break;
 8017c76:	e005      	b.n	8017c84 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	68db      	ldr	r3, [r3, #12]
 8017c7c:	60fb      	str	r3, [r7, #12]
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d1eb      	bne.n	8017c5c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017c84:	6879      	ldr	r1, [r7, #4]
 8017c86:	2000      	movs	r0, #0
 8017c88:	f7f8 f874 	bl	800fd74 <memp_free>
}
 8017c8c:	3710      	adds	r7, #16
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}
 8017c92:	bf00      	nop
 8017c94:	08026ac4 	.word	0x08026ac4
 8017c98:	08026e10 	.word	0x08026e10
 8017c9c:	08026b18 	.word	0x08026b18
 8017ca0:	2000be2c 	.word	0x2000be2c

08017ca4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b082      	sub	sp, #8
 8017ca8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8017caa:	2000      	movs	r0, #0
 8017cac:	f7f8 f810 	bl	800fcd0 <memp_malloc>
 8017cb0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d007      	beq.n	8017cc8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017cb8:	2220      	movs	r2, #32
 8017cba:	2100      	movs	r1, #0
 8017cbc:	6878      	ldr	r0, [r7, #4]
 8017cbe:	f002 fe3b 	bl	801a938 <memset>
    pcb->ttl = UDP_TTL;
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	22ff      	movs	r2, #255	; 0xff
 8017cc6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017cc8:	687b      	ldr	r3, [r7, #4]
}
 8017cca:	4618      	mov	r0, r3
 8017ccc:	3708      	adds	r7, #8
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	bd80      	pop	{r7, pc}

08017cd2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8017cd2:	b580      	push	{r7, lr}
 8017cd4:	b084      	sub	sp, #16
 8017cd6:	af00      	add	r7, sp, #0
 8017cd8:	4603      	mov	r3, r0
 8017cda:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8017cdc:	f7ff ffe2 	bl	8017ca4 <udp_new>
 8017ce0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017ce2:	68fb      	ldr	r3, [r7, #12]
}
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	3710      	adds	r7, #16
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	bd80      	pop	{r7, pc}

08017cec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017cec:	b480      	push	{r7}
 8017cee:	b085      	sub	sp, #20
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
 8017cf4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d01e      	beq.n	8017d3a <udp_netif_ip_addr_changed+0x4e>
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d01a      	beq.n	8017d3a <udp_netif_ip_addr_changed+0x4e>
 8017d04:	683b      	ldr	r3, [r7, #0]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d017      	beq.n	8017d3a <udp_netif_ip_addr_changed+0x4e>
 8017d0a:	683b      	ldr	r3, [r7, #0]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d013      	beq.n	8017d3a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017d12:	4b0d      	ldr	r3, [pc, #52]	; (8017d48 <udp_netif_ip_addr_changed+0x5c>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	60fb      	str	r3, [r7, #12]
 8017d18:	e00c      	b.n	8017d34 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	681a      	ldr	r2, [r3, #0]
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d103      	bne.n	8017d2e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017d26:	683b      	ldr	r3, [r7, #0]
 8017d28:	681a      	ldr	r2, [r3, #0]
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	68db      	ldr	r3, [r3, #12]
 8017d32:	60fb      	str	r3, [r7, #12]
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d1ef      	bne.n	8017d1a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017d3a:	bf00      	nop
 8017d3c:	3714      	adds	r7, #20
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d44:	4770      	bx	lr
 8017d46:	bf00      	nop
 8017d48:	2000be2c 	.word	0x2000be2c

08017d4c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b082      	sub	sp, #8
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017d54:	4915      	ldr	r1, [pc, #84]	; (8017dac <etharp_free_entry+0x60>)
 8017d56:	687a      	ldr	r2, [r7, #4]
 8017d58:	4613      	mov	r3, r2
 8017d5a:	005b      	lsls	r3, r3, #1
 8017d5c:	4413      	add	r3, r2
 8017d5e:	00db      	lsls	r3, r3, #3
 8017d60:	440b      	add	r3, r1
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d013      	beq.n	8017d90 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017d68:	4910      	ldr	r1, [pc, #64]	; (8017dac <etharp_free_entry+0x60>)
 8017d6a:	687a      	ldr	r2, [r7, #4]
 8017d6c:	4613      	mov	r3, r2
 8017d6e:	005b      	lsls	r3, r3, #1
 8017d70:	4413      	add	r3, r2
 8017d72:	00db      	lsls	r3, r3, #3
 8017d74:	440b      	add	r3, r1
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	4618      	mov	r0, r3
 8017d7a:	f7f8 fe27 	bl	80109cc <pbuf_free>
    arp_table[i].q = NULL;
 8017d7e:	490b      	ldr	r1, [pc, #44]	; (8017dac <etharp_free_entry+0x60>)
 8017d80:	687a      	ldr	r2, [r7, #4]
 8017d82:	4613      	mov	r3, r2
 8017d84:	005b      	lsls	r3, r3, #1
 8017d86:	4413      	add	r3, r2
 8017d88:	00db      	lsls	r3, r3, #3
 8017d8a:	440b      	add	r3, r1
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017d90:	4906      	ldr	r1, [pc, #24]	; (8017dac <etharp_free_entry+0x60>)
 8017d92:	687a      	ldr	r2, [r7, #4]
 8017d94:	4613      	mov	r3, r2
 8017d96:	005b      	lsls	r3, r3, #1
 8017d98:	4413      	add	r3, r2
 8017d9a:	00db      	lsls	r3, r3, #3
 8017d9c:	440b      	add	r3, r1
 8017d9e:	3314      	adds	r3, #20
 8017da0:	2200      	movs	r2, #0
 8017da2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017da4:	bf00      	nop
 8017da6:	3708      	adds	r7, #8
 8017da8:	46bd      	mov	sp, r7
 8017daa:	bd80      	pop	{r7, pc}
 8017dac:	20004f38 	.word	0x20004f38

08017db0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b082      	sub	sp, #8
 8017db4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017db6:	2300      	movs	r3, #0
 8017db8:	607b      	str	r3, [r7, #4]
 8017dba:	e096      	b.n	8017eea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017dbc:	494f      	ldr	r1, [pc, #316]	; (8017efc <etharp_tmr+0x14c>)
 8017dbe:	687a      	ldr	r2, [r7, #4]
 8017dc0:	4613      	mov	r3, r2
 8017dc2:	005b      	lsls	r3, r3, #1
 8017dc4:	4413      	add	r3, r2
 8017dc6:	00db      	lsls	r3, r3, #3
 8017dc8:	440b      	add	r3, r1
 8017dca:	3314      	adds	r3, #20
 8017dcc:	781b      	ldrb	r3, [r3, #0]
 8017dce:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017dd0:	78fb      	ldrb	r3, [r7, #3]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	f000 8086 	beq.w	8017ee4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017dd8:	4948      	ldr	r1, [pc, #288]	; (8017efc <etharp_tmr+0x14c>)
 8017dda:	687a      	ldr	r2, [r7, #4]
 8017ddc:	4613      	mov	r3, r2
 8017dde:	005b      	lsls	r3, r3, #1
 8017de0:	4413      	add	r3, r2
 8017de2:	00db      	lsls	r3, r3, #3
 8017de4:	440b      	add	r3, r1
 8017de6:	3312      	adds	r3, #18
 8017de8:	881b      	ldrh	r3, [r3, #0]
 8017dea:	3301      	adds	r3, #1
 8017dec:	b298      	uxth	r0, r3
 8017dee:	4943      	ldr	r1, [pc, #268]	; (8017efc <etharp_tmr+0x14c>)
 8017df0:	687a      	ldr	r2, [r7, #4]
 8017df2:	4613      	mov	r3, r2
 8017df4:	005b      	lsls	r3, r3, #1
 8017df6:	4413      	add	r3, r2
 8017df8:	00db      	lsls	r3, r3, #3
 8017dfa:	440b      	add	r3, r1
 8017dfc:	3312      	adds	r3, #18
 8017dfe:	4602      	mov	r2, r0
 8017e00:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017e02:	493e      	ldr	r1, [pc, #248]	; (8017efc <etharp_tmr+0x14c>)
 8017e04:	687a      	ldr	r2, [r7, #4]
 8017e06:	4613      	mov	r3, r2
 8017e08:	005b      	lsls	r3, r3, #1
 8017e0a:	4413      	add	r3, r2
 8017e0c:	00db      	lsls	r3, r3, #3
 8017e0e:	440b      	add	r3, r1
 8017e10:	3312      	adds	r3, #18
 8017e12:	881b      	ldrh	r3, [r3, #0]
 8017e14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017e18:	d215      	bcs.n	8017e46 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017e1a:	4938      	ldr	r1, [pc, #224]	; (8017efc <etharp_tmr+0x14c>)
 8017e1c:	687a      	ldr	r2, [r7, #4]
 8017e1e:	4613      	mov	r3, r2
 8017e20:	005b      	lsls	r3, r3, #1
 8017e22:	4413      	add	r3, r2
 8017e24:	00db      	lsls	r3, r3, #3
 8017e26:	440b      	add	r3, r1
 8017e28:	3314      	adds	r3, #20
 8017e2a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017e2c:	2b01      	cmp	r3, #1
 8017e2e:	d10e      	bne.n	8017e4e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017e30:	4932      	ldr	r1, [pc, #200]	; (8017efc <etharp_tmr+0x14c>)
 8017e32:	687a      	ldr	r2, [r7, #4]
 8017e34:	4613      	mov	r3, r2
 8017e36:	005b      	lsls	r3, r3, #1
 8017e38:	4413      	add	r3, r2
 8017e3a:	00db      	lsls	r3, r3, #3
 8017e3c:	440b      	add	r3, r1
 8017e3e:	3312      	adds	r3, #18
 8017e40:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017e42:	2b04      	cmp	r3, #4
 8017e44:	d903      	bls.n	8017e4e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f7ff ff80 	bl	8017d4c <etharp_free_entry>
 8017e4c:	e04a      	b.n	8017ee4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017e4e:	492b      	ldr	r1, [pc, #172]	; (8017efc <etharp_tmr+0x14c>)
 8017e50:	687a      	ldr	r2, [r7, #4]
 8017e52:	4613      	mov	r3, r2
 8017e54:	005b      	lsls	r3, r3, #1
 8017e56:	4413      	add	r3, r2
 8017e58:	00db      	lsls	r3, r3, #3
 8017e5a:	440b      	add	r3, r1
 8017e5c:	3314      	adds	r3, #20
 8017e5e:	781b      	ldrb	r3, [r3, #0]
 8017e60:	2b03      	cmp	r3, #3
 8017e62:	d10a      	bne.n	8017e7a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017e64:	4925      	ldr	r1, [pc, #148]	; (8017efc <etharp_tmr+0x14c>)
 8017e66:	687a      	ldr	r2, [r7, #4]
 8017e68:	4613      	mov	r3, r2
 8017e6a:	005b      	lsls	r3, r3, #1
 8017e6c:	4413      	add	r3, r2
 8017e6e:	00db      	lsls	r3, r3, #3
 8017e70:	440b      	add	r3, r1
 8017e72:	3314      	adds	r3, #20
 8017e74:	2204      	movs	r2, #4
 8017e76:	701a      	strb	r2, [r3, #0]
 8017e78:	e034      	b.n	8017ee4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017e7a:	4920      	ldr	r1, [pc, #128]	; (8017efc <etharp_tmr+0x14c>)
 8017e7c:	687a      	ldr	r2, [r7, #4]
 8017e7e:	4613      	mov	r3, r2
 8017e80:	005b      	lsls	r3, r3, #1
 8017e82:	4413      	add	r3, r2
 8017e84:	00db      	lsls	r3, r3, #3
 8017e86:	440b      	add	r3, r1
 8017e88:	3314      	adds	r3, #20
 8017e8a:	781b      	ldrb	r3, [r3, #0]
 8017e8c:	2b04      	cmp	r3, #4
 8017e8e:	d10a      	bne.n	8017ea6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017e90:	491a      	ldr	r1, [pc, #104]	; (8017efc <etharp_tmr+0x14c>)
 8017e92:	687a      	ldr	r2, [r7, #4]
 8017e94:	4613      	mov	r3, r2
 8017e96:	005b      	lsls	r3, r3, #1
 8017e98:	4413      	add	r3, r2
 8017e9a:	00db      	lsls	r3, r3, #3
 8017e9c:	440b      	add	r3, r1
 8017e9e:	3314      	adds	r3, #20
 8017ea0:	2202      	movs	r2, #2
 8017ea2:	701a      	strb	r2, [r3, #0]
 8017ea4:	e01e      	b.n	8017ee4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017ea6:	4915      	ldr	r1, [pc, #84]	; (8017efc <etharp_tmr+0x14c>)
 8017ea8:	687a      	ldr	r2, [r7, #4]
 8017eaa:	4613      	mov	r3, r2
 8017eac:	005b      	lsls	r3, r3, #1
 8017eae:	4413      	add	r3, r2
 8017eb0:	00db      	lsls	r3, r3, #3
 8017eb2:	440b      	add	r3, r1
 8017eb4:	3314      	adds	r3, #20
 8017eb6:	781b      	ldrb	r3, [r3, #0]
 8017eb8:	2b01      	cmp	r3, #1
 8017eba:	d113      	bne.n	8017ee4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017ebc:	490f      	ldr	r1, [pc, #60]	; (8017efc <etharp_tmr+0x14c>)
 8017ebe:	687a      	ldr	r2, [r7, #4]
 8017ec0:	4613      	mov	r3, r2
 8017ec2:	005b      	lsls	r3, r3, #1
 8017ec4:	4413      	add	r3, r2
 8017ec6:	00db      	lsls	r3, r3, #3
 8017ec8:	440b      	add	r3, r1
 8017eca:	3308      	adds	r3, #8
 8017ecc:	6818      	ldr	r0, [r3, #0]
 8017ece:	687a      	ldr	r2, [r7, #4]
 8017ed0:	4613      	mov	r3, r2
 8017ed2:	005b      	lsls	r3, r3, #1
 8017ed4:	4413      	add	r3, r2
 8017ed6:	00db      	lsls	r3, r3, #3
 8017ed8:	4a08      	ldr	r2, [pc, #32]	; (8017efc <etharp_tmr+0x14c>)
 8017eda:	4413      	add	r3, r2
 8017edc:	3304      	adds	r3, #4
 8017ede:	4619      	mov	r1, r3
 8017ee0:	f000 fe6e 	bl	8018bc0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	3301      	adds	r3, #1
 8017ee8:	607b      	str	r3, [r7, #4]
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	2b09      	cmp	r3, #9
 8017eee:	f77f af65 	ble.w	8017dbc <etharp_tmr+0xc>
      }
    }
  }
}
 8017ef2:	bf00      	nop
 8017ef4:	bf00      	nop
 8017ef6:	3708      	adds	r7, #8
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bd80      	pop	{r7, pc}
 8017efc:	20004f38 	.word	0x20004f38

08017f00 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	b08a      	sub	sp, #40	; 0x28
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	60f8      	str	r0, [r7, #12]
 8017f08:	460b      	mov	r3, r1
 8017f0a:	607a      	str	r2, [r7, #4]
 8017f0c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017f0e:	230a      	movs	r3, #10
 8017f10:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017f12:	230a      	movs	r3, #10
 8017f14:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017f16:	230a      	movs	r3, #10
 8017f18:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017f1e:	230a      	movs	r3, #10
 8017f20:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017f22:	2300      	movs	r3, #0
 8017f24:	83bb      	strh	r3, [r7, #28]
 8017f26:	2300      	movs	r3, #0
 8017f28:	837b      	strh	r3, [r7, #26]
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017f2e:	2300      	movs	r3, #0
 8017f30:	843b      	strh	r3, [r7, #32]
 8017f32:	e0ae      	b.n	8018092 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017f34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f38:	49a6      	ldr	r1, [pc, #664]	; (80181d4 <etharp_find_entry+0x2d4>)
 8017f3a:	4613      	mov	r3, r2
 8017f3c:	005b      	lsls	r3, r3, #1
 8017f3e:	4413      	add	r3, r2
 8017f40:	00db      	lsls	r3, r3, #3
 8017f42:	440b      	add	r3, r1
 8017f44:	3314      	adds	r3, #20
 8017f46:	781b      	ldrb	r3, [r3, #0]
 8017f48:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017f4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017f4e:	2b0a      	cmp	r3, #10
 8017f50:	d105      	bne.n	8017f5e <etharp_find_entry+0x5e>
 8017f52:	7dfb      	ldrb	r3, [r7, #23]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d102      	bne.n	8017f5e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017f58:	8c3b      	ldrh	r3, [r7, #32]
 8017f5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8017f5c:	e095      	b.n	801808a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017f5e:	7dfb      	ldrb	r3, [r7, #23]
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	f000 8092 	beq.w	801808a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017f66:	7dfb      	ldrb	r3, [r7, #23]
 8017f68:	2b01      	cmp	r3, #1
 8017f6a:	d009      	beq.n	8017f80 <etharp_find_entry+0x80>
 8017f6c:	7dfb      	ldrb	r3, [r7, #23]
 8017f6e:	2b01      	cmp	r3, #1
 8017f70:	d806      	bhi.n	8017f80 <etharp_find_entry+0x80>
 8017f72:	4b99      	ldr	r3, [pc, #612]	; (80181d8 <etharp_find_entry+0x2d8>)
 8017f74:	f240 1223 	movw	r2, #291	; 0x123
 8017f78:	4998      	ldr	r1, [pc, #608]	; (80181dc <etharp_find_entry+0x2dc>)
 8017f7a:	4899      	ldr	r0, [pc, #612]	; (80181e0 <etharp_find_entry+0x2e0>)
 8017f7c:	f002 ff62 	bl	801ae44 <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d020      	beq.n	8017fc8 <etharp_find_entry+0xc8>
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	6819      	ldr	r1, [r3, #0]
 8017f8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f8e:	4891      	ldr	r0, [pc, #580]	; (80181d4 <etharp_find_entry+0x2d4>)
 8017f90:	4613      	mov	r3, r2
 8017f92:	005b      	lsls	r3, r3, #1
 8017f94:	4413      	add	r3, r2
 8017f96:	00db      	lsls	r3, r3, #3
 8017f98:	4403      	add	r3, r0
 8017f9a:	3304      	adds	r3, #4
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	4299      	cmp	r1, r3
 8017fa0:	d112      	bne.n	8017fc8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d00c      	beq.n	8017fc2 <etharp_find_entry+0xc2>
 8017fa8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017fac:	4989      	ldr	r1, [pc, #548]	; (80181d4 <etharp_find_entry+0x2d4>)
 8017fae:	4613      	mov	r3, r2
 8017fb0:	005b      	lsls	r3, r3, #1
 8017fb2:	4413      	add	r3, r2
 8017fb4:	00db      	lsls	r3, r3, #3
 8017fb6:	440b      	add	r3, r1
 8017fb8:	3308      	adds	r3, #8
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	687a      	ldr	r2, [r7, #4]
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d102      	bne.n	8017fc8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017fc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017fc6:	e100      	b.n	80181ca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017fc8:	7dfb      	ldrb	r3, [r7, #23]
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	d140      	bne.n	8018050 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017fce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017fd2:	4980      	ldr	r1, [pc, #512]	; (80181d4 <etharp_find_entry+0x2d4>)
 8017fd4:	4613      	mov	r3, r2
 8017fd6:	005b      	lsls	r3, r3, #1
 8017fd8:	4413      	add	r3, r2
 8017fda:	00db      	lsls	r3, r3, #3
 8017fdc:	440b      	add	r3, r1
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d01a      	beq.n	801801a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017fe4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017fe8:	497a      	ldr	r1, [pc, #488]	; (80181d4 <etharp_find_entry+0x2d4>)
 8017fea:	4613      	mov	r3, r2
 8017fec:	005b      	lsls	r3, r3, #1
 8017fee:	4413      	add	r3, r2
 8017ff0:	00db      	lsls	r3, r3, #3
 8017ff2:	440b      	add	r3, r1
 8017ff4:	3312      	adds	r3, #18
 8017ff6:	881b      	ldrh	r3, [r3, #0]
 8017ff8:	8bba      	ldrh	r2, [r7, #28]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d845      	bhi.n	801808a <etharp_find_entry+0x18a>
            old_queue = i;
 8017ffe:	8c3b      	ldrh	r3, [r7, #32]
 8018000:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018002:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018006:	4973      	ldr	r1, [pc, #460]	; (80181d4 <etharp_find_entry+0x2d4>)
 8018008:	4613      	mov	r3, r2
 801800a:	005b      	lsls	r3, r3, #1
 801800c:	4413      	add	r3, r2
 801800e:	00db      	lsls	r3, r3, #3
 8018010:	440b      	add	r3, r1
 8018012:	3312      	adds	r3, #18
 8018014:	881b      	ldrh	r3, [r3, #0]
 8018016:	83bb      	strh	r3, [r7, #28]
 8018018:	e037      	b.n	801808a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801801a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801801e:	496d      	ldr	r1, [pc, #436]	; (80181d4 <etharp_find_entry+0x2d4>)
 8018020:	4613      	mov	r3, r2
 8018022:	005b      	lsls	r3, r3, #1
 8018024:	4413      	add	r3, r2
 8018026:	00db      	lsls	r3, r3, #3
 8018028:	440b      	add	r3, r1
 801802a:	3312      	adds	r3, #18
 801802c:	881b      	ldrh	r3, [r3, #0]
 801802e:	8b7a      	ldrh	r2, [r7, #26]
 8018030:	429a      	cmp	r2, r3
 8018032:	d82a      	bhi.n	801808a <etharp_find_entry+0x18a>
            old_pending = i;
 8018034:	8c3b      	ldrh	r3, [r7, #32]
 8018036:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018038:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801803c:	4965      	ldr	r1, [pc, #404]	; (80181d4 <etharp_find_entry+0x2d4>)
 801803e:	4613      	mov	r3, r2
 8018040:	005b      	lsls	r3, r3, #1
 8018042:	4413      	add	r3, r2
 8018044:	00db      	lsls	r3, r3, #3
 8018046:	440b      	add	r3, r1
 8018048:	3312      	adds	r3, #18
 801804a:	881b      	ldrh	r3, [r3, #0]
 801804c:	837b      	strh	r3, [r7, #26]
 801804e:	e01c      	b.n	801808a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018050:	7dfb      	ldrb	r3, [r7, #23]
 8018052:	2b01      	cmp	r3, #1
 8018054:	d919      	bls.n	801808a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018056:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801805a:	495e      	ldr	r1, [pc, #376]	; (80181d4 <etharp_find_entry+0x2d4>)
 801805c:	4613      	mov	r3, r2
 801805e:	005b      	lsls	r3, r3, #1
 8018060:	4413      	add	r3, r2
 8018062:	00db      	lsls	r3, r3, #3
 8018064:	440b      	add	r3, r1
 8018066:	3312      	adds	r3, #18
 8018068:	881b      	ldrh	r3, [r3, #0]
 801806a:	8b3a      	ldrh	r2, [r7, #24]
 801806c:	429a      	cmp	r2, r3
 801806e:	d80c      	bhi.n	801808a <etharp_find_entry+0x18a>
            old_stable = i;
 8018070:	8c3b      	ldrh	r3, [r7, #32]
 8018072:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018074:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018078:	4956      	ldr	r1, [pc, #344]	; (80181d4 <etharp_find_entry+0x2d4>)
 801807a:	4613      	mov	r3, r2
 801807c:	005b      	lsls	r3, r3, #1
 801807e:	4413      	add	r3, r2
 8018080:	00db      	lsls	r3, r3, #3
 8018082:	440b      	add	r3, r1
 8018084:	3312      	adds	r3, #18
 8018086:	881b      	ldrh	r3, [r3, #0]
 8018088:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801808a:	8c3b      	ldrh	r3, [r7, #32]
 801808c:	3301      	adds	r3, #1
 801808e:	b29b      	uxth	r3, r3
 8018090:	843b      	strh	r3, [r7, #32]
 8018092:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018096:	2b09      	cmp	r3, #9
 8018098:	f77f af4c 	ble.w	8017f34 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801809c:	7afb      	ldrb	r3, [r7, #11]
 801809e:	f003 0302 	and.w	r3, r3, #2
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d108      	bne.n	80180b8 <etharp_find_entry+0x1b8>
 80180a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80180aa:	2b0a      	cmp	r3, #10
 80180ac:	d107      	bne.n	80180be <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80180ae:	7afb      	ldrb	r3, [r7, #11]
 80180b0:	f003 0301 	and.w	r3, r3, #1
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d102      	bne.n	80180be <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80180b8:	f04f 33ff 	mov.w	r3, #4294967295
 80180bc:	e085      	b.n	80181ca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80180be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80180c2:	2b09      	cmp	r3, #9
 80180c4:	dc02      	bgt.n	80180cc <etharp_find_entry+0x1cc>
    i = empty;
 80180c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180c8:	843b      	strh	r3, [r7, #32]
 80180ca:	e039      	b.n	8018140 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80180cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80180d0:	2b09      	cmp	r3, #9
 80180d2:	dc14      	bgt.n	80180fe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80180d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80180d6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80180d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80180dc:	493d      	ldr	r1, [pc, #244]	; (80181d4 <etharp_find_entry+0x2d4>)
 80180de:	4613      	mov	r3, r2
 80180e0:	005b      	lsls	r3, r3, #1
 80180e2:	4413      	add	r3, r2
 80180e4:	00db      	lsls	r3, r3, #3
 80180e6:	440b      	add	r3, r1
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d018      	beq.n	8018120 <etharp_find_entry+0x220>
 80180ee:	4b3a      	ldr	r3, [pc, #232]	; (80181d8 <etharp_find_entry+0x2d8>)
 80180f0:	f240 126d 	movw	r2, #365	; 0x16d
 80180f4:	493b      	ldr	r1, [pc, #236]	; (80181e4 <etharp_find_entry+0x2e4>)
 80180f6:	483a      	ldr	r0, [pc, #232]	; (80181e0 <etharp_find_entry+0x2e0>)
 80180f8:	f002 fea4 	bl	801ae44 <printf>
 80180fc:	e010      	b.n	8018120 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80180fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018102:	2b09      	cmp	r3, #9
 8018104:	dc02      	bgt.n	801810c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018106:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018108:	843b      	strh	r3, [r7, #32]
 801810a:	e009      	b.n	8018120 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801810c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018110:	2b09      	cmp	r3, #9
 8018112:	dc02      	bgt.n	801811a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018114:	8bfb      	ldrh	r3, [r7, #30]
 8018116:	843b      	strh	r3, [r7, #32]
 8018118:	e002      	b.n	8018120 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801811a:	f04f 33ff 	mov.w	r3, #4294967295
 801811e:	e054      	b.n	80181ca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018120:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018124:	2b09      	cmp	r3, #9
 8018126:	dd06      	ble.n	8018136 <etharp_find_entry+0x236>
 8018128:	4b2b      	ldr	r3, [pc, #172]	; (80181d8 <etharp_find_entry+0x2d8>)
 801812a:	f240 127f 	movw	r2, #383	; 0x17f
 801812e:	492e      	ldr	r1, [pc, #184]	; (80181e8 <etharp_find_entry+0x2e8>)
 8018130:	482b      	ldr	r0, [pc, #172]	; (80181e0 <etharp_find_entry+0x2e0>)
 8018132:	f002 fe87 	bl	801ae44 <printf>
    etharp_free_entry(i);
 8018136:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801813a:	4618      	mov	r0, r3
 801813c:	f7ff fe06 	bl	8017d4c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018140:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018144:	2b09      	cmp	r3, #9
 8018146:	dd06      	ble.n	8018156 <etharp_find_entry+0x256>
 8018148:	4b23      	ldr	r3, [pc, #140]	; (80181d8 <etharp_find_entry+0x2d8>)
 801814a:	f240 1283 	movw	r2, #387	; 0x183
 801814e:	4926      	ldr	r1, [pc, #152]	; (80181e8 <etharp_find_entry+0x2e8>)
 8018150:	4823      	ldr	r0, [pc, #140]	; (80181e0 <etharp_find_entry+0x2e0>)
 8018152:	f002 fe77 	bl	801ae44 <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018156:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801815a:	491e      	ldr	r1, [pc, #120]	; (80181d4 <etharp_find_entry+0x2d4>)
 801815c:	4613      	mov	r3, r2
 801815e:	005b      	lsls	r3, r3, #1
 8018160:	4413      	add	r3, r2
 8018162:	00db      	lsls	r3, r3, #3
 8018164:	440b      	add	r3, r1
 8018166:	3314      	adds	r3, #20
 8018168:	781b      	ldrb	r3, [r3, #0]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d006      	beq.n	801817c <etharp_find_entry+0x27c>
 801816e:	4b1a      	ldr	r3, [pc, #104]	; (80181d8 <etharp_find_entry+0x2d8>)
 8018170:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018174:	491d      	ldr	r1, [pc, #116]	; (80181ec <etharp_find_entry+0x2ec>)
 8018176:	481a      	ldr	r0, [pc, #104]	; (80181e0 <etharp_find_entry+0x2e0>)
 8018178:	f002 fe64 	bl	801ae44 <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d00b      	beq.n	801819a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018182:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	6819      	ldr	r1, [r3, #0]
 801818a:	4812      	ldr	r0, [pc, #72]	; (80181d4 <etharp_find_entry+0x2d4>)
 801818c:	4613      	mov	r3, r2
 801818e:	005b      	lsls	r3, r3, #1
 8018190:	4413      	add	r3, r2
 8018192:	00db      	lsls	r3, r3, #3
 8018194:	4403      	add	r3, r0
 8018196:	3304      	adds	r3, #4
 8018198:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801819a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801819e:	490d      	ldr	r1, [pc, #52]	; (80181d4 <etharp_find_entry+0x2d4>)
 80181a0:	4613      	mov	r3, r2
 80181a2:	005b      	lsls	r3, r3, #1
 80181a4:	4413      	add	r3, r2
 80181a6:	00db      	lsls	r3, r3, #3
 80181a8:	440b      	add	r3, r1
 80181aa:	3312      	adds	r3, #18
 80181ac:	2200      	movs	r2, #0
 80181ae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80181b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80181b4:	4907      	ldr	r1, [pc, #28]	; (80181d4 <etharp_find_entry+0x2d4>)
 80181b6:	4613      	mov	r3, r2
 80181b8:	005b      	lsls	r3, r3, #1
 80181ba:	4413      	add	r3, r2
 80181bc:	00db      	lsls	r3, r3, #3
 80181be:	440b      	add	r3, r1
 80181c0:	3308      	adds	r3, #8
 80181c2:	687a      	ldr	r2, [r7, #4]
 80181c4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80181c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80181ca:	4618      	mov	r0, r3
 80181cc:	3728      	adds	r7, #40	; 0x28
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}
 80181d2:	bf00      	nop
 80181d4:	20004f38 	.word	0x20004f38
 80181d8:	08026e28 	.word	0x08026e28
 80181dc:	08026e60 	.word	0x08026e60
 80181e0:	08026ea0 	.word	0x08026ea0
 80181e4:	08026ec8 	.word	0x08026ec8
 80181e8:	08026ee0 	.word	0x08026ee0
 80181ec:	08026ef4 	.word	0x08026ef4

080181f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b088      	sub	sp, #32
 80181f4:	af02      	add	r7, sp, #8
 80181f6:	60f8      	str	r0, [r7, #12]
 80181f8:	60b9      	str	r1, [r7, #8]
 80181fa:	607a      	str	r2, [r7, #4]
 80181fc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018204:	2b06      	cmp	r3, #6
 8018206:	d006      	beq.n	8018216 <etharp_update_arp_entry+0x26>
 8018208:	4b48      	ldr	r3, [pc, #288]	; (801832c <etharp_update_arp_entry+0x13c>)
 801820a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801820e:	4948      	ldr	r1, [pc, #288]	; (8018330 <etharp_update_arp_entry+0x140>)
 8018210:	4848      	ldr	r0, [pc, #288]	; (8018334 <etharp_update_arp_entry+0x144>)
 8018212:	f002 fe17 	bl	801ae44 <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018216:	68bb      	ldr	r3, [r7, #8]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d012      	beq.n	8018242 <etharp_update_arp_entry+0x52>
 801821c:	68bb      	ldr	r3, [r7, #8]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d00e      	beq.n	8018242 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018224:	68bb      	ldr	r3, [r7, #8]
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	68f9      	ldr	r1, [r7, #12]
 801822a:	4618      	mov	r0, r3
 801822c:	f001 f8fe 	bl	801942c <ip4_addr_isbroadcast_u32>
 8018230:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018232:	2b00      	cmp	r3, #0
 8018234:	d105      	bne.n	8018242 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018236:	68bb      	ldr	r3, [r7, #8]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801823e:	2be0      	cmp	r3, #224	; 0xe0
 8018240:	d102      	bne.n	8018248 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018242:	f06f 030f 	mvn.w	r3, #15
 8018246:	e06c      	b.n	8018322 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018248:	78fb      	ldrb	r3, [r7, #3]
 801824a:	68fa      	ldr	r2, [r7, #12]
 801824c:	4619      	mov	r1, r3
 801824e:	68b8      	ldr	r0, [r7, #8]
 8018250:	f7ff fe56 	bl	8017f00 <etharp_find_entry>
 8018254:	4603      	mov	r3, r0
 8018256:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018258:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801825c:	2b00      	cmp	r3, #0
 801825e:	da02      	bge.n	8018266 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018260:	8afb      	ldrh	r3, [r7, #22]
 8018262:	b25b      	sxtb	r3, r3
 8018264:	e05d      	b.n	8018322 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018266:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801826a:	4933      	ldr	r1, [pc, #204]	; (8018338 <etharp_update_arp_entry+0x148>)
 801826c:	4613      	mov	r3, r2
 801826e:	005b      	lsls	r3, r3, #1
 8018270:	4413      	add	r3, r2
 8018272:	00db      	lsls	r3, r3, #3
 8018274:	440b      	add	r3, r1
 8018276:	3314      	adds	r3, #20
 8018278:	2202      	movs	r2, #2
 801827a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801827c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018280:	492d      	ldr	r1, [pc, #180]	; (8018338 <etharp_update_arp_entry+0x148>)
 8018282:	4613      	mov	r3, r2
 8018284:	005b      	lsls	r3, r3, #1
 8018286:	4413      	add	r3, r2
 8018288:	00db      	lsls	r3, r3, #3
 801828a:	440b      	add	r3, r1
 801828c:	3308      	adds	r3, #8
 801828e:	68fa      	ldr	r2, [r7, #12]
 8018290:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018292:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018296:	4613      	mov	r3, r2
 8018298:	005b      	lsls	r3, r3, #1
 801829a:	4413      	add	r3, r2
 801829c:	00db      	lsls	r3, r3, #3
 801829e:	3308      	adds	r3, #8
 80182a0:	4a25      	ldr	r2, [pc, #148]	; (8018338 <etharp_update_arp_entry+0x148>)
 80182a2:	4413      	add	r3, r2
 80182a4:	3304      	adds	r3, #4
 80182a6:	2206      	movs	r2, #6
 80182a8:	6879      	ldr	r1, [r7, #4]
 80182aa:	4618      	mov	r0, r3
 80182ac:	f002 fb1c 	bl	801a8e8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80182b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80182b4:	4920      	ldr	r1, [pc, #128]	; (8018338 <etharp_update_arp_entry+0x148>)
 80182b6:	4613      	mov	r3, r2
 80182b8:	005b      	lsls	r3, r3, #1
 80182ba:	4413      	add	r3, r2
 80182bc:	00db      	lsls	r3, r3, #3
 80182be:	440b      	add	r3, r1
 80182c0:	3312      	adds	r3, #18
 80182c2:	2200      	movs	r2, #0
 80182c4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80182c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80182ca:	491b      	ldr	r1, [pc, #108]	; (8018338 <etharp_update_arp_entry+0x148>)
 80182cc:	4613      	mov	r3, r2
 80182ce:	005b      	lsls	r3, r3, #1
 80182d0:	4413      	add	r3, r2
 80182d2:	00db      	lsls	r3, r3, #3
 80182d4:	440b      	add	r3, r1
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d021      	beq.n	8018320 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80182dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80182e0:	4915      	ldr	r1, [pc, #84]	; (8018338 <etharp_update_arp_entry+0x148>)
 80182e2:	4613      	mov	r3, r2
 80182e4:	005b      	lsls	r3, r3, #1
 80182e6:	4413      	add	r3, r2
 80182e8:	00db      	lsls	r3, r3, #3
 80182ea:	440b      	add	r3, r1
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80182f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80182f4:	4910      	ldr	r1, [pc, #64]	; (8018338 <etharp_update_arp_entry+0x148>)
 80182f6:	4613      	mov	r3, r2
 80182f8:	005b      	lsls	r3, r3, #1
 80182fa:	4413      	add	r3, r2
 80182fc:	00db      	lsls	r3, r3, #3
 80182fe:	440b      	add	r3, r1
 8018300:	2200      	movs	r2, #0
 8018302:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	f103 0222 	add.w	r2, r3, #34	; 0x22
 801830a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801830e:	9300      	str	r3, [sp, #0]
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	6939      	ldr	r1, [r7, #16]
 8018314:	68f8      	ldr	r0, [r7, #12]
 8018316:	f001 ff91 	bl	801a23c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801831a:	6938      	ldr	r0, [r7, #16]
 801831c:	f7f8 fb56 	bl	80109cc <pbuf_free>
  }
  return ERR_OK;
 8018320:	2300      	movs	r3, #0
}
 8018322:	4618      	mov	r0, r3
 8018324:	3718      	adds	r7, #24
 8018326:	46bd      	mov	sp, r7
 8018328:	bd80      	pop	{r7, pc}
 801832a:	bf00      	nop
 801832c:	08026e28 	.word	0x08026e28
 8018330:	08026f20 	.word	0x08026f20
 8018334:	08026ea0 	.word	0x08026ea0
 8018338:	20004f38 	.word	0x20004f38

0801833c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b084      	sub	sp, #16
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018344:	2300      	movs	r3, #0
 8018346:	60fb      	str	r3, [r7, #12]
 8018348:	e01e      	b.n	8018388 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801834a:	4913      	ldr	r1, [pc, #76]	; (8018398 <etharp_cleanup_netif+0x5c>)
 801834c:	68fa      	ldr	r2, [r7, #12]
 801834e:	4613      	mov	r3, r2
 8018350:	005b      	lsls	r3, r3, #1
 8018352:	4413      	add	r3, r2
 8018354:	00db      	lsls	r3, r3, #3
 8018356:	440b      	add	r3, r1
 8018358:	3314      	adds	r3, #20
 801835a:	781b      	ldrb	r3, [r3, #0]
 801835c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801835e:	7afb      	ldrb	r3, [r7, #11]
 8018360:	2b00      	cmp	r3, #0
 8018362:	d00e      	beq.n	8018382 <etharp_cleanup_netif+0x46>
 8018364:	490c      	ldr	r1, [pc, #48]	; (8018398 <etharp_cleanup_netif+0x5c>)
 8018366:	68fa      	ldr	r2, [r7, #12]
 8018368:	4613      	mov	r3, r2
 801836a:	005b      	lsls	r3, r3, #1
 801836c:	4413      	add	r3, r2
 801836e:	00db      	lsls	r3, r3, #3
 8018370:	440b      	add	r3, r1
 8018372:	3308      	adds	r3, #8
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	687a      	ldr	r2, [r7, #4]
 8018378:	429a      	cmp	r2, r3
 801837a:	d102      	bne.n	8018382 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801837c:	68f8      	ldr	r0, [r7, #12]
 801837e:	f7ff fce5 	bl	8017d4c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	3301      	adds	r3, #1
 8018386:	60fb      	str	r3, [r7, #12]
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	2b09      	cmp	r3, #9
 801838c:	dddd      	ble.n	801834a <etharp_cleanup_netif+0xe>
    }
  }
}
 801838e:	bf00      	nop
 8018390:	bf00      	nop
 8018392:	3710      	adds	r7, #16
 8018394:	46bd      	mov	sp, r7
 8018396:	bd80      	pop	{r7, pc}
 8018398:	20004f38 	.word	0x20004f38

0801839c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801839c:	b5b0      	push	{r4, r5, r7, lr}
 801839e:	b08a      	sub	sp, #40	; 0x28
 80183a0:	af04      	add	r7, sp, #16
 80183a2:	6078      	str	r0, [r7, #4]
 80183a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80183a6:	683b      	ldr	r3, [r7, #0]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d107      	bne.n	80183bc <etharp_input+0x20>
 80183ac:	4b3d      	ldr	r3, [pc, #244]	; (80184a4 <etharp_input+0x108>)
 80183ae:	f240 228a 	movw	r2, #650	; 0x28a
 80183b2:	493d      	ldr	r1, [pc, #244]	; (80184a8 <etharp_input+0x10c>)
 80183b4:	483d      	ldr	r0, [pc, #244]	; (80184ac <etharp_input+0x110>)
 80183b6:	f002 fd45 	bl	801ae44 <printf>
 80183ba:	e06f      	b.n	801849c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	685b      	ldr	r3, [r3, #4]
 80183c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80183c2:	693b      	ldr	r3, [r7, #16]
 80183c4:	881b      	ldrh	r3, [r3, #0]
 80183c6:	b29b      	uxth	r3, r3
 80183c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80183cc:	d10c      	bne.n	80183e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80183ce:	693b      	ldr	r3, [r7, #16]
 80183d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80183d2:	2b06      	cmp	r3, #6
 80183d4:	d108      	bne.n	80183e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80183d6:	693b      	ldr	r3, [r7, #16]
 80183d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80183da:	2b04      	cmp	r3, #4
 80183dc:	d104      	bne.n	80183e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80183de:	693b      	ldr	r3, [r7, #16]
 80183e0:	885b      	ldrh	r3, [r3, #2]
 80183e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80183e4:	2b08      	cmp	r3, #8
 80183e6:	d003      	beq.n	80183f0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80183e8:	6878      	ldr	r0, [r7, #4]
 80183ea:	f7f8 faef 	bl	80109cc <pbuf_free>
    return;
 80183ee:	e055      	b.n	801849c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80183f0:	693b      	ldr	r3, [r7, #16]
 80183f2:	330e      	adds	r3, #14
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80183f8:	693b      	ldr	r3, [r7, #16]
 80183fa:	3318      	adds	r3, #24
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018400:	683b      	ldr	r3, [r7, #0]
 8018402:	3304      	adds	r3, #4
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d102      	bne.n	8018410 <etharp_input+0x74>
    for_us = 0;
 801840a:	2300      	movs	r3, #0
 801840c:	75fb      	strb	r3, [r7, #23]
 801840e:	e009      	b.n	8018424 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018410:	68ba      	ldr	r2, [r7, #8]
 8018412:	683b      	ldr	r3, [r7, #0]
 8018414:	3304      	adds	r3, #4
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	429a      	cmp	r2, r3
 801841a:	bf0c      	ite	eq
 801841c:	2301      	moveq	r3, #1
 801841e:	2300      	movne	r3, #0
 8018420:	b2db      	uxtb	r3, r3
 8018422:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018424:	693b      	ldr	r3, [r7, #16]
 8018426:	f103 0208 	add.w	r2, r3, #8
 801842a:	7dfb      	ldrb	r3, [r7, #23]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d001      	beq.n	8018434 <etharp_input+0x98>
 8018430:	2301      	movs	r3, #1
 8018432:	e000      	b.n	8018436 <etharp_input+0x9a>
 8018434:	2302      	movs	r3, #2
 8018436:	f107 010c 	add.w	r1, r7, #12
 801843a:	6838      	ldr	r0, [r7, #0]
 801843c:	f7ff fed8 	bl	80181f0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018440:	693b      	ldr	r3, [r7, #16]
 8018442:	88db      	ldrh	r3, [r3, #6]
 8018444:	b29b      	uxth	r3, r3
 8018446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801844a:	d003      	beq.n	8018454 <etharp_input+0xb8>
 801844c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018450:	d01e      	beq.n	8018490 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018452:	e020      	b.n	8018496 <etharp_input+0xfa>
      if (for_us) {
 8018454:	7dfb      	ldrb	r3, [r7, #23]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d01c      	beq.n	8018494 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801845a:	683b      	ldr	r3, [r7, #0]
 801845c:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8018460:	693b      	ldr	r3, [r7, #16]
 8018462:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018466:	683b      	ldr	r3, [r7, #0]
 8018468:	f103 0522 	add.w	r5, r3, #34	; 0x22
 801846c:	683b      	ldr	r3, [r7, #0]
 801846e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018470:	693a      	ldr	r2, [r7, #16]
 8018472:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018474:	2102      	movs	r1, #2
 8018476:	9103      	str	r1, [sp, #12]
 8018478:	f107 010c 	add.w	r1, r7, #12
 801847c:	9102      	str	r1, [sp, #8]
 801847e:	9201      	str	r2, [sp, #4]
 8018480:	9300      	str	r3, [sp, #0]
 8018482:	462b      	mov	r3, r5
 8018484:	4622      	mov	r2, r4
 8018486:	4601      	mov	r1, r0
 8018488:	6838      	ldr	r0, [r7, #0]
 801848a:	f000 faeb 	bl	8018a64 <etharp_raw>
      break;
 801848e:	e001      	b.n	8018494 <etharp_input+0xf8>
      break;
 8018490:	bf00      	nop
 8018492:	e000      	b.n	8018496 <etharp_input+0xfa>
      break;
 8018494:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018496:	6878      	ldr	r0, [r7, #4]
 8018498:	f7f8 fa98 	bl	80109cc <pbuf_free>
}
 801849c:	3718      	adds	r7, #24
 801849e:	46bd      	mov	sp, r7
 80184a0:	bdb0      	pop	{r4, r5, r7, pc}
 80184a2:	bf00      	nop
 80184a4:	08026e28 	.word	0x08026e28
 80184a8:	08026f78 	.word	0x08026f78
 80184ac:	08026ea0 	.word	0x08026ea0

080184b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b086      	sub	sp, #24
 80184b4:	af02      	add	r7, sp, #8
 80184b6:	60f8      	str	r0, [r7, #12]
 80184b8:	60b9      	str	r1, [r7, #8]
 80184ba:	4613      	mov	r3, r2
 80184bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80184be:	79fa      	ldrb	r2, [r7, #7]
 80184c0:	4944      	ldr	r1, [pc, #272]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 80184c2:	4613      	mov	r3, r2
 80184c4:	005b      	lsls	r3, r3, #1
 80184c6:	4413      	add	r3, r2
 80184c8:	00db      	lsls	r3, r3, #3
 80184ca:	440b      	add	r3, r1
 80184cc:	3314      	adds	r3, #20
 80184ce:	781b      	ldrb	r3, [r3, #0]
 80184d0:	2b01      	cmp	r3, #1
 80184d2:	d806      	bhi.n	80184e2 <etharp_output_to_arp_index+0x32>
 80184d4:	4b40      	ldr	r3, [pc, #256]	; (80185d8 <etharp_output_to_arp_index+0x128>)
 80184d6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80184da:	4940      	ldr	r1, [pc, #256]	; (80185dc <etharp_output_to_arp_index+0x12c>)
 80184dc:	4840      	ldr	r0, [pc, #256]	; (80185e0 <etharp_output_to_arp_index+0x130>)
 80184de:	f002 fcb1 	bl	801ae44 <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80184e2:	79fa      	ldrb	r2, [r7, #7]
 80184e4:	493b      	ldr	r1, [pc, #236]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 80184e6:	4613      	mov	r3, r2
 80184e8:	005b      	lsls	r3, r3, #1
 80184ea:	4413      	add	r3, r2
 80184ec:	00db      	lsls	r3, r3, #3
 80184ee:	440b      	add	r3, r1
 80184f0:	3314      	adds	r3, #20
 80184f2:	781b      	ldrb	r3, [r3, #0]
 80184f4:	2b02      	cmp	r3, #2
 80184f6:	d153      	bne.n	80185a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80184f8:	79fa      	ldrb	r2, [r7, #7]
 80184fa:	4936      	ldr	r1, [pc, #216]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 80184fc:	4613      	mov	r3, r2
 80184fe:	005b      	lsls	r3, r3, #1
 8018500:	4413      	add	r3, r2
 8018502:	00db      	lsls	r3, r3, #3
 8018504:	440b      	add	r3, r1
 8018506:	3312      	adds	r3, #18
 8018508:	881b      	ldrh	r3, [r3, #0]
 801850a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801850e:	d919      	bls.n	8018544 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018510:	79fa      	ldrb	r2, [r7, #7]
 8018512:	4613      	mov	r3, r2
 8018514:	005b      	lsls	r3, r3, #1
 8018516:	4413      	add	r3, r2
 8018518:	00db      	lsls	r3, r3, #3
 801851a:	4a2e      	ldr	r2, [pc, #184]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 801851c:	4413      	add	r3, r2
 801851e:	3304      	adds	r3, #4
 8018520:	4619      	mov	r1, r3
 8018522:	68f8      	ldr	r0, [r7, #12]
 8018524:	f000 fb4c 	bl	8018bc0 <etharp_request>
 8018528:	4603      	mov	r3, r0
 801852a:	2b00      	cmp	r3, #0
 801852c:	d138      	bne.n	80185a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801852e:	79fa      	ldrb	r2, [r7, #7]
 8018530:	4928      	ldr	r1, [pc, #160]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 8018532:	4613      	mov	r3, r2
 8018534:	005b      	lsls	r3, r3, #1
 8018536:	4413      	add	r3, r2
 8018538:	00db      	lsls	r3, r3, #3
 801853a:	440b      	add	r3, r1
 801853c:	3314      	adds	r3, #20
 801853e:	2203      	movs	r2, #3
 8018540:	701a      	strb	r2, [r3, #0]
 8018542:	e02d      	b.n	80185a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018544:	79fa      	ldrb	r2, [r7, #7]
 8018546:	4923      	ldr	r1, [pc, #140]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 8018548:	4613      	mov	r3, r2
 801854a:	005b      	lsls	r3, r3, #1
 801854c:	4413      	add	r3, r2
 801854e:	00db      	lsls	r3, r3, #3
 8018550:	440b      	add	r3, r1
 8018552:	3312      	adds	r3, #18
 8018554:	881b      	ldrh	r3, [r3, #0]
 8018556:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801855a:	d321      	bcc.n	80185a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801855c:	79fa      	ldrb	r2, [r7, #7]
 801855e:	4613      	mov	r3, r2
 8018560:	005b      	lsls	r3, r3, #1
 8018562:	4413      	add	r3, r2
 8018564:	00db      	lsls	r3, r3, #3
 8018566:	4a1b      	ldr	r2, [pc, #108]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 8018568:	4413      	add	r3, r2
 801856a:	1d19      	adds	r1, r3, #4
 801856c:	79fa      	ldrb	r2, [r7, #7]
 801856e:	4613      	mov	r3, r2
 8018570:	005b      	lsls	r3, r3, #1
 8018572:	4413      	add	r3, r2
 8018574:	00db      	lsls	r3, r3, #3
 8018576:	3308      	adds	r3, #8
 8018578:	4a16      	ldr	r2, [pc, #88]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 801857a:	4413      	add	r3, r2
 801857c:	3304      	adds	r3, #4
 801857e:	461a      	mov	r2, r3
 8018580:	68f8      	ldr	r0, [r7, #12]
 8018582:	f000 fafb 	bl	8018b7c <etharp_request_dst>
 8018586:	4603      	mov	r3, r0
 8018588:	2b00      	cmp	r3, #0
 801858a:	d109      	bne.n	80185a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801858c:	79fa      	ldrb	r2, [r7, #7]
 801858e:	4911      	ldr	r1, [pc, #68]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 8018590:	4613      	mov	r3, r2
 8018592:	005b      	lsls	r3, r3, #1
 8018594:	4413      	add	r3, r2
 8018596:	00db      	lsls	r3, r3, #3
 8018598:	440b      	add	r3, r1
 801859a:	3314      	adds	r3, #20
 801859c:	2203      	movs	r2, #3
 801859e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	f103 0122 	add.w	r1, r3, #34	; 0x22
 80185a6:	79fa      	ldrb	r2, [r7, #7]
 80185a8:	4613      	mov	r3, r2
 80185aa:	005b      	lsls	r3, r3, #1
 80185ac:	4413      	add	r3, r2
 80185ae:	00db      	lsls	r3, r3, #3
 80185b0:	3308      	adds	r3, #8
 80185b2:	4a08      	ldr	r2, [pc, #32]	; (80185d4 <etharp_output_to_arp_index+0x124>)
 80185b4:	4413      	add	r3, r2
 80185b6:	3304      	adds	r3, #4
 80185b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80185bc:	9200      	str	r2, [sp, #0]
 80185be:	460a      	mov	r2, r1
 80185c0:	68b9      	ldr	r1, [r7, #8]
 80185c2:	68f8      	ldr	r0, [r7, #12]
 80185c4:	f001 fe3a 	bl	801a23c <ethernet_output>
 80185c8:	4603      	mov	r3, r0
}
 80185ca:	4618      	mov	r0, r3
 80185cc:	3710      	adds	r7, #16
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bd80      	pop	{r7, pc}
 80185d2:	bf00      	nop
 80185d4:	20004f38 	.word	0x20004f38
 80185d8:	08026e28 	.word	0x08026e28
 80185dc:	08026f98 	.word	0x08026f98
 80185e0:	08026ea0 	.word	0x08026ea0

080185e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80185e4:	b580      	push	{r7, lr}
 80185e6:	b08a      	sub	sp, #40	; 0x28
 80185e8:	af02      	add	r7, sp, #8
 80185ea:	60f8      	str	r0, [r7, #12]
 80185ec:	60b9      	str	r1, [r7, #8]
 80185ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d106      	bne.n	8018608 <etharp_output+0x24>
 80185fa:	4b73      	ldr	r3, [pc, #460]	; (80187c8 <etharp_output+0x1e4>)
 80185fc:	f240 321e 	movw	r2, #798	; 0x31e
 8018600:	4972      	ldr	r1, [pc, #456]	; (80187cc <etharp_output+0x1e8>)
 8018602:	4873      	ldr	r0, [pc, #460]	; (80187d0 <etharp_output+0x1ec>)
 8018604:	f002 fc1e 	bl	801ae44 <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018608:	68bb      	ldr	r3, [r7, #8]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d106      	bne.n	801861c <etharp_output+0x38>
 801860e:	4b6e      	ldr	r3, [pc, #440]	; (80187c8 <etharp_output+0x1e4>)
 8018610:	f240 321f 	movw	r2, #799	; 0x31f
 8018614:	496f      	ldr	r1, [pc, #444]	; (80187d4 <etharp_output+0x1f0>)
 8018616:	486e      	ldr	r0, [pc, #440]	; (80187d0 <etharp_output+0x1ec>)
 8018618:	f002 fc14 	bl	801ae44 <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d106      	bne.n	8018630 <etharp_output+0x4c>
 8018622:	4b69      	ldr	r3, [pc, #420]	; (80187c8 <etharp_output+0x1e4>)
 8018624:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018628:	496b      	ldr	r1, [pc, #428]	; (80187d8 <etharp_output+0x1f4>)
 801862a:	4869      	ldr	r0, [pc, #420]	; (80187d0 <etharp_output+0x1ec>)
 801862c:	f002 fc0a 	bl	801ae44 <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	68f9      	ldr	r1, [r7, #12]
 8018636:	4618      	mov	r0, r3
 8018638:	f000 fef8 	bl	801942c <ip4_addr_isbroadcast_u32>
 801863c:	4603      	mov	r3, r0
 801863e:	2b00      	cmp	r3, #0
 8018640:	d002      	beq.n	8018648 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018642:	4b66      	ldr	r3, [pc, #408]	; (80187dc <etharp_output+0x1f8>)
 8018644:	61fb      	str	r3, [r7, #28]
 8018646:	e0af      	b.n	80187a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018650:	2be0      	cmp	r3, #224	; 0xe0
 8018652:	d118      	bne.n	8018686 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018654:	2301      	movs	r3, #1
 8018656:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018658:	2300      	movs	r3, #0
 801865a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801865c:	235e      	movs	r3, #94	; 0x5e
 801865e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	3301      	adds	r3, #1
 8018664:	781b      	ldrb	r3, [r3, #0]
 8018666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801866a:	b2db      	uxtb	r3, r3
 801866c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	3302      	adds	r3, #2
 8018672:	781b      	ldrb	r3, [r3, #0]
 8018674:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	3303      	adds	r3, #3
 801867a:	781b      	ldrb	r3, [r3, #0]
 801867c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801867e:	f107 0310 	add.w	r3, r7, #16
 8018682:	61fb      	str	r3, [r7, #28]
 8018684:	e090      	b.n	80187a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	681a      	ldr	r2, [r3, #0]
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	3304      	adds	r3, #4
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	405a      	eors	r2, r3
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	3308      	adds	r3, #8
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	4013      	ands	r3, r2
 801869a:	2b00      	cmp	r3, #0
 801869c:	d012      	beq.n	80186c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80186a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80186a8:	4293      	cmp	r3, r2
 80186aa:	d00b      	beq.n	80186c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	330c      	adds	r3, #12
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d003      	beq.n	80186be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	330c      	adds	r3, #12
 80186ba:	61bb      	str	r3, [r7, #24]
 80186bc:	e002      	b.n	80186c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80186be:	f06f 0303 	mvn.w	r3, #3
 80186c2:	e07d      	b.n	80187c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80186c4:	4b46      	ldr	r3, [pc, #280]	; (80187e0 <etharp_output+0x1fc>)
 80186c6:	781b      	ldrb	r3, [r3, #0]
 80186c8:	4619      	mov	r1, r3
 80186ca:	4a46      	ldr	r2, [pc, #280]	; (80187e4 <etharp_output+0x200>)
 80186cc:	460b      	mov	r3, r1
 80186ce:	005b      	lsls	r3, r3, #1
 80186d0:	440b      	add	r3, r1
 80186d2:	00db      	lsls	r3, r3, #3
 80186d4:	4413      	add	r3, r2
 80186d6:	3314      	adds	r3, #20
 80186d8:	781b      	ldrb	r3, [r3, #0]
 80186da:	2b01      	cmp	r3, #1
 80186dc:	d925      	bls.n	801872a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80186de:	4b40      	ldr	r3, [pc, #256]	; (80187e0 <etharp_output+0x1fc>)
 80186e0:	781b      	ldrb	r3, [r3, #0]
 80186e2:	4619      	mov	r1, r3
 80186e4:	4a3f      	ldr	r2, [pc, #252]	; (80187e4 <etharp_output+0x200>)
 80186e6:	460b      	mov	r3, r1
 80186e8:	005b      	lsls	r3, r3, #1
 80186ea:	440b      	add	r3, r1
 80186ec:	00db      	lsls	r3, r3, #3
 80186ee:	4413      	add	r3, r2
 80186f0:	3308      	adds	r3, #8
 80186f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80186f4:	68fa      	ldr	r2, [r7, #12]
 80186f6:	429a      	cmp	r2, r3
 80186f8:	d117      	bne.n	801872a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80186fa:	69bb      	ldr	r3, [r7, #24]
 80186fc:	681a      	ldr	r2, [r3, #0]
 80186fe:	4b38      	ldr	r3, [pc, #224]	; (80187e0 <etharp_output+0x1fc>)
 8018700:	781b      	ldrb	r3, [r3, #0]
 8018702:	4618      	mov	r0, r3
 8018704:	4937      	ldr	r1, [pc, #220]	; (80187e4 <etharp_output+0x200>)
 8018706:	4603      	mov	r3, r0
 8018708:	005b      	lsls	r3, r3, #1
 801870a:	4403      	add	r3, r0
 801870c:	00db      	lsls	r3, r3, #3
 801870e:	440b      	add	r3, r1
 8018710:	3304      	adds	r3, #4
 8018712:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018714:	429a      	cmp	r2, r3
 8018716:	d108      	bne.n	801872a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018718:	4b31      	ldr	r3, [pc, #196]	; (80187e0 <etharp_output+0x1fc>)
 801871a:	781b      	ldrb	r3, [r3, #0]
 801871c:	461a      	mov	r2, r3
 801871e:	68b9      	ldr	r1, [r7, #8]
 8018720:	68f8      	ldr	r0, [r7, #12]
 8018722:	f7ff fec5 	bl	80184b0 <etharp_output_to_arp_index>
 8018726:	4603      	mov	r3, r0
 8018728:	e04a      	b.n	80187c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801872a:	2300      	movs	r3, #0
 801872c:	75fb      	strb	r3, [r7, #23]
 801872e:	e031      	b.n	8018794 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018730:	7dfa      	ldrb	r2, [r7, #23]
 8018732:	492c      	ldr	r1, [pc, #176]	; (80187e4 <etharp_output+0x200>)
 8018734:	4613      	mov	r3, r2
 8018736:	005b      	lsls	r3, r3, #1
 8018738:	4413      	add	r3, r2
 801873a:	00db      	lsls	r3, r3, #3
 801873c:	440b      	add	r3, r1
 801873e:	3314      	adds	r3, #20
 8018740:	781b      	ldrb	r3, [r3, #0]
 8018742:	2b01      	cmp	r3, #1
 8018744:	d923      	bls.n	801878e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018746:	7dfa      	ldrb	r2, [r7, #23]
 8018748:	4926      	ldr	r1, [pc, #152]	; (80187e4 <etharp_output+0x200>)
 801874a:	4613      	mov	r3, r2
 801874c:	005b      	lsls	r3, r3, #1
 801874e:	4413      	add	r3, r2
 8018750:	00db      	lsls	r3, r3, #3
 8018752:	440b      	add	r3, r1
 8018754:	3308      	adds	r3, #8
 8018756:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018758:	68fa      	ldr	r2, [r7, #12]
 801875a:	429a      	cmp	r2, r3
 801875c:	d117      	bne.n	801878e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801875e:	69bb      	ldr	r3, [r7, #24]
 8018760:	6819      	ldr	r1, [r3, #0]
 8018762:	7dfa      	ldrb	r2, [r7, #23]
 8018764:	481f      	ldr	r0, [pc, #124]	; (80187e4 <etharp_output+0x200>)
 8018766:	4613      	mov	r3, r2
 8018768:	005b      	lsls	r3, r3, #1
 801876a:	4413      	add	r3, r2
 801876c:	00db      	lsls	r3, r3, #3
 801876e:	4403      	add	r3, r0
 8018770:	3304      	adds	r3, #4
 8018772:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018774:	4299      	cmp	r1, r3
 8018776:	d10a      	bne.n	801878e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018778:	4a19      	ldr	r2, [pc, #100]	; (80187e0 <etharp_output+0x1fc>)
 801877a:	7dfb      	ldrb	r3, [r7, #23]
 801877c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801877e:	7dfb      	ldrb	r3, [r7, #23]
 8018780:	461a      	mov	r2, r3
 8018782:	68b9      	ldr	r1, [r7, #8]
 8018784:	68f8      	ldr	r0, [r7, #12]
 8018786:	f7ff fe93 	bl	80184b0 <etharp_output_to_arp_index>
 801878a:	4603      	mov	r3, r0
 801878c:	e018      	b.n	80187c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801878e:	7dfb      	ldrb	r3, [r7, #23]
 8018790:	3301      	adds	r3, #1
 8018792:	75fb      	strb	r3, [r7, #23]
 8018794:	7dfb      	ldrb	r3, [r7, #23]
 8018796:	2b09      	cmp	r3, #9
 8018798:	d9ca      	bls.n	8018730 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801879a:	68ba      	ldr	r2, [r7, #8]
 801879c:	69b9      	ldr	r1, [r7, #24]
 801879e:	68f8      	ldr	r0, [r7, #12]
 80187a0:	f000 f822 	bl	80187e8 <etharp_query>
 80187a4:	4603      	mov	r3, r0
 80187a6:	e00b      	b.n	80187c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80187ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80187b2:	9300      	str	r3, [sp, #0]
 80187b4:	69fb      	ldr	r3, [r7, #28]
 80187b6:	68b9      	ldr	r1, [r7, #8]
 80187b8:	68f8      	ldr	r0, [r7, #12]
 80187ba:	f001 fd3f 	bl	801a23c <ethernet_output>
 80187be:	4603      	mov	r3, r0
}
 80187c0:	4618      	mov	r0, r3
 80187c2:	3720      	adds	r7, #32
 80187c4:	46bd      	mov	sp, r7
 80187c6:	bd80      	pop	{r7, pc}
 80187c8:	08026e28 	.word	0x08026e28
 80187cc:	08026f78 	.word	0x08026f78
 80187d0:	08026ea0 	.word	0x08026ea0
 80187d4:	08026fc8 	.word	0x08026fc8
 80187d8:	08026f68 	.word	0x08026f68
 80187dc:	08028d30 	.word	0x08028d30
 80187e0:	20005028 	.word	0x20005028
 80187e4:	20004f38 	.word	0x20004f38

080187e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b08c      	sub	sp, #48	; 0x30
 80187ec:	af02      	add	r7, sp, #8
 80187ee:	60f8      	str	r0, [r7, #12]
 80187f0:	60b9      	str	r1, [r7, #8]
 80187f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	3322      	adds	r3, #34	; 0x22
 80187f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80187fa:	23ff      	movs	r3, #255	; 0xff
 80187fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018800:	2300      	movs	r3, #0
 8018802:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018804:	68bb      	ldr	r3, [r7, #8]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	68f9      	ldr	r1, [r7, #12]
 801880a:	4618      	mov	r0, r3
 801880c:	f000 fe0e 	bl	801942c <ip4_addr_isbroadcast_u32>
 8018810:	4603      	mov	r3, r0
 8018812:	2b00      	cmp	r3, #0
 8018814:	d10c      	bne.n	8018830 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018816:	68bb      	ldr	r3, [r7, #8]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801881e:	2be0      	cmp	r3, #224	; 0xe0
 8018820:	d006      	beq.n	8018830 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018822:	68bb      	ldr	r3, [r7, #8]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d003      	beq.n	8018830 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018828:	68bb      	ldr	r3, [r7, #8]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d102      	bne.n	8018836 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018830:	f06f 030f 	mvn.w	r3, #15
 8018834:	e101      	b.n	8018a3a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018836:	68fa      	ldr	r2, [r7, #12]
 8018838:	2101      	movs	r1, #1
 801883a:	68b8      	ldr	r0, [r7, #8]
 801883c:	f7ff fb60 	bl	8017f00 <etharp_find_entry>
 8018840:	4603      	mov	r3, r0
 8018842:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018844:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018848:	2b00      	cmp	r3, #0
 801884a:	da02      	bge.n	8018852 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801884c:	8a7b      	ldrh	r3, [r7, #18]
 801884e:	b25b      	sxtb	r3, r3
 8018850:	e0f3      	b.n	8018a3a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018852:	8a7b      	ldrh	r3, [r7, #18]
 8018854:	2b7e      	cmp	r3, #126	; 0x7e
 8018856:	d906      	bls.n	8018866 <etharp_query+0x7e>
 8018858:	4b7a      	ldr	r3, [pc, #488]	; (8018a44 <etharp_query+0x25c>)
 801885a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801885e:	497a      	ldr	r1, [pc, #488]	; (8018a48 <etharp_query+0x260>)
 8018860:	487a      	ldr	r0, [pc, #488]	; (8018a4c <etharp_query+0x264>)
 8018862:	f002 faef 	bl	801ae44 <printf>
  i = (netif_addr_idx_t)i_err;
 8018866:	8a7b      	ldrh	r3, [r7, #18]
 8018868:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801886a:	7c7a      	ldrb	r2, [r7, #17]
 801886c:	4978      	ldr	r1, [pc, #480]	; (8018a50 <etharp_query+0x268>)
 801886e:	4613      	mov	r3, r2
 8018870:	005b      	lsls	r3, r3, #1
 8018872:	4413      	add	r3, r2
 8018874:	00db      	lsls	r3, r3, #3
 8018876:	440b      	add	r3, r1
 8018878:	3314      	adds	r3, #20
 801887a:	781b      	ldrb	r3, [r3, #0]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d115      	bne.n	80188ac <etharp_query+0xc4>
    is_new_entry = 1;
 8018880:	2301      	movs	r3, #1
 8018882:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018884:	7c7a      	ldrb	r2, [r7, #17]
 8018886:	4972      	ldr	r1, [pc, #456]	; (8018a50 <etharp_query+0x268>)
 8018888:	4613      	mov	r3, r2
 801888a:	005b      	lsls	r3, r3, #1
 801888c:	4413      	add	r3, r2
 801888e:	00db      	lsls	r3, r3, #3
 8018890:	440b      	add	r3, r1
 8018892:	3314      	adds	r3, #20
 8018894:	2201      	movs	r2, #1
 8018896:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018898:	7c7a      	ldrb	r2, [r7, #17]
 801889a:	496d      	ldr	r1, [pc, #436]	; (8018a50 <etharp_query+0x268>)
 801889c:	4613      	mov	r3, r2
 801889e:	005b      	lsls	r3, r3, #1
 80188a0:	4413      	add	r3, r2
 80188a2:	00db      	lsls	r3, r3, #3
 80188a4:	440b      	add	r3, r1
 80188a6:	3308      	adds	r3, #8
 80188a8:	68fa      	ldr	r2, [r7, #12]
 80188aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80188ac:	7c7a      	ldrb	r2, [r7, #17]
 80188ae:	4968      	ldr	r1, [pc, #416]	; (8018a50 <etharp_query+0x268>)
 80188b0:	4613      	mov	r3, r2
 80188b2:	005b      	lsls	r3, r3, #1
 80188b4:	4413      	add	r3, r2
 80188b6:	00db      	lsls	r3, r3, #3
 80188b8:	440b      	add	r3, r1
 80188ba:	3314      	adds	r3, #20
 80188bc:	781b      	ldrb	r3, [r3, #0]
 80188be:	2b01      	cmp	r3, #1
 80188c0:	d011      	beq.n	80188e6 <etharp_query+0xfe>
 80188c2:	7c7a      	ldrb	r2, [r7, #17]
 80188c4:	4962      	ldr	r1, [pc, #392]	; (8018a50 <etharp_query+0x268>)
 80188c6:	4613      	mov	r3, r2
 80188c8:	005b      	lsls	r3, r3, #1
 80188ca:	4413      	add	r3, r2
 80188cc:	00db      	lsls	r3, r3, #3
 80188ce:	440b      	add	r3, r1
 80188d0:	3314      	adds	r3, #20
 80188d2:	781b      	ldrb	r3, [r3, #0]
 80188d4:	2b01      	cmp	r3, #1
 80188d6:	d806      	bhi.n	80188e6 <etharp_query+0xfe>
 80188d8:	4b5a      	ldr	r3, [pc, #360]	; (8018a44 <etharp_query+0x25c>)
 80188da:	f240 32cd 	movw	r2, #973	; 0x3cd
 80188de:	495d      	ldr	r1, [pc, #372]	; (8018a54 <etharp_query+0x26c>)
 80188e0:	485a      	ldr	r0, [pc, #360]	; (8018a4c <etharp_query+0x264>)
 80188e2:	f002 faaf 	bl	801ae44 <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80188e6:	6a3b      	ldr	r3, [r7, #32]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d102      	bne.n	80188f2 <etharp_query+0x10a>
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d10c      	bne.n	801890c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80188f2:	68b9      	ldr	r1, [r7, #8]
 80188f4:	68f8      	ldr	r0, [r7, #12]
 80188f6:	f000 f963 	bl	8018bc0 <etharp_request>
 80188fa:	4603      	mov	r3, r0
 80188fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d102      	bne.n	801890c <etharp_query+0x124>
      return result;
 8018906:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801890a:	e096      	b.n	8018a3a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d106      	bne.n	8018920 <etharp_query+0x138>
 8018912:	4b4c      	ldr	r3, [pc, #304]	; (8018a44 <etharp_query+0x25c>)
 8018914:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018918:	494f      	ldr	r1, [pc, #316]	; (8018a58 <etharp_query+0x270>)
 801891a:	484c      	ldr	r0, [pc, #304]	; (8018a4c <etharp_query+0x264>)
 801891c:	f002 fa92 	bl	801ae44 <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018920:	7c7a      	ldrb	r2, [r7, #17]
 8018922:	494b      	ldr	r1, [pc, #300]	; (8018a50 <etharp_query+0x268>)
 8018924:	4613      	mov	r3, r2
 8018926:	005b      	lsls	r3, r3, #1
 8018928:	4413      	add	r3, r2
 801892a:	00db      	lsls	r3, r3, #3
 801892c:	440b      	add	r3, r1
 801892e:	3314      	adds	r3, #20
 8018930:	781b      	ldrb	r3, [r3, #0]
 8018932:	2b01      	cmp	r3, #1
 8018934:	d917      	bls.n	8018966 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018936:	4a49      	ldr	r2, [pc, #292]	; (8018a5c <etharp_query+0x274>)
 8018938:	7c7b      	ldrb	r3, [r7, #17]
 801893a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801893c:	7c7a      	ldrb	r2, [r7, #17]
 801893e:	4613      	mov	r3, r2
 8018940:	005b      	lsls	r3, r3, #1
 8018942:	4413      	add	r3, r2
 8018944:	00db      	lsls	r3, r3, #3
 8018946:	3308      	adds	r3, #8
 8018948:	4a41      	ldr	r2, [pc, #260]	; (8018a50 <etharp_query+0x268>)
 801894a:	4413      	add	r3, r2
 801894c:	3304      	adds	r3, #4
 801894e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018952:	9200      	str	r2, [sp, #0]
 8018954:	697a      	ldr	r2, [r7, #20]
 8018956:	6879      	ldr	r1, [r7, #4]
 8018958:	68f8      	ldr	r0, [r7, #12]
 801895a:	f001 fc6f 	bl	801a23c <ethernet_output>
 801895e:	4603      	mov	r3, r0
 8018960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018964:	e067      	b.n	8018a36 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018966:	7c7a      	ldrb	r2, [r7, #17]
 8018968:	4939      	ldr	r1, [pc, #228]	; (8018a50 <etharp_query+0x268>)
 801896a:	4613      	mov	r3, r2
 801896c:	005b      	lsls	r3, r3, #1
 801896e:	4413      	add	r3, r2
 8018970:	00db      	lsls	r3, r3, #3
 8018972:	440b      	add	r3, r1
 8018974:	3314      	adds	r3, #20
 8018976:	781b      	ldrb	r3, [r3, #0]
 8018978:	2b01      	cmp	r3, #1
 801897a:	d15c      	bne.n	8018a36 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801897c:	2300      	movs	r3, #0
 801897e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018984:	e01c      	b.n	80189c0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018986:	69fb      	ldr	r3, [r7, #28]
 8018988:	895a      	ldrh	r2, [r3, #10]
 801898a:	69fb      	ldr	r3, [r7, #28]
 801898c:	891b      	ldrh	r3, [r3, #8]
 801898e:	429a      	cmp	r2, r3
 8018990:	d10a      	bne.n	80189a8 <etharp_query+0x1c0>
 8018992:	69fb      	ldr	r3, [r7, #28]
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d006      	beq.n	80189a8 <etharp_query+0x1c0>
 801899a:	4b2a      	ldr	r3, [pc, #168]	; (8018a44 <etharp_query+0x25c>)
 801899c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80189a0:	492f      	ldr	r1, [pc, #188]	; (8018a60 <etharp_query+0x278>)
 80189a2:	482a      	ldr	r0, [pc, #168]	; (8018a4c <etharp_query+0x264>)
 80189a4:	f002 fa4e 	bl	801ae44 <printf>
      if (PBUF_NEEDS_COPY(p)) {
 80189a8:	69fb      	ldr	r3, [r7, #28]
 80189aa:	7b1b      	ldrb	r3, [r3, #12]
 80189ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d002      	beq.n	80189ba <etharp_query+0x1d2>
        copy_needed = 1;
 80189b4:	2301      	movs	r3, #1
 80189b6:	61bb      	str	r3, [r7, #24]
        break;
 80189b8:	e005      	b.n	80189c6 <etharp_query+0x1de>
      }
      p = p->next;
 80189ba:	69fb      	ldr	r3, [r7, #28]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80189c0:	69fb      	ldr	r3, [r7, #28]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d1df      	bne.n	8018986 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80189c6:	69bb      	ldr	r3, [r7, #24]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d007      	beq.n	80189dc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80189cc:	687a      	ldr	r2, [r7, #4]
 80189ce:	f44f 7120 	mov.w	r1, #640	; 0x280
 80189d2:	200e      	movs	r0, #14
 80189d4:	f7f8 fa72 	bl	8010ebc <pbuf_clone>
 80189d8:	61f8      	str	r0, [r7, #28]
 80189da:	e004      	b.n	80189e6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80189e0:	69f8      	ldr	r0, [r7, #28]
 80189e2:	f7f8 f899 	bl	8010b18 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80189e6:	69fb      	ldr	r3, [r7, #28]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d021      	beq.n	8018a30 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80189ec:	7c7a      	ldrb	r2, [r7, #17]
 80189ee:	4918      	ldr	r1, [pc, #96]	; (8018a50 <etharp_query+0x268>)
 80189f0:	4613      	mov	r3, r2
 80189f2:	005b      	lsls	r3, r3, #1
 80189f4:	4413      	add	r3, r2
 80189f6:	00db      	lsls	r3, r3, #3
 80189f8:	440b      	add	r3, r1
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d00a      	beq.n	8018a16 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018a00:	7c7a      	ldrb	r2, [r7, #17]
 8018a02:	4913      	ldr	r1, [pc, #76]	; (8018a50 <etharp_query+0x268>)
 8018a04:	4613      	mov	r3, r2
 8018a06:	005b      	lsls	r3, r3, #1
 8018a08:	4413      	add	r3, r2
 8018a0a:	00db      	lsls	r3, r3, #3
 8018a0c:	440b      	add	r3, r1
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	4618      	mov	r0, r3
 8018a12:	f7f7 ffdb 	bl	80109cc <pbuf_free>
      }
      arp_table[i].q = p;
 8018a16:	7c7a      	ldrb	r2, [r7, #17]
 8018a18:	490d      	ldr	r1, [pc, #52]	; (8018a50 <etharp_query+0x268>)
 8018a1a:	4613      	mov	r3, r2
 8018a1c:	005b      	lsls	r3, r3, #1
 8018a1e:	4413      	add	r3, r2
 8018a20:	00db      	lsls	r3, r3, #3
 8018a22:	440b      	add	r3, r1
 8018a24:	69fa      	ldr	r2, [r7, #28]
 8018a26:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018a28:	2300      	movs	r3, #0
 8018a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018a2e:	e002      	b.n	8018a36 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018a30:	23ff      	movs	r3, #255	; 0xff
 8018a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018a36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	3728      	adds	r7, #40	; 0x28
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}
 8018a42:	bf00      	nop
 8018a44:	08026e28 	.word	0x08026e28
 8018a48:	08026fd4 	.word	0x08026fd4
 8018a4c:	08026ea0 	.word	0x08026ea0
 8018a50:	20004f38 	.word	0x20004f38
 8018a54:	08026fe4 	.word	0x08026fe4
 8018a58:	08026fc8 	.word	0x08026fc8
 8018a5c:	20005028 	.word	0x20005028
 8018a60:	0802700c 	.word	0x0802700c

08018a64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b08a      	sub	sp, #40	; 0x28
 8018a68:	af02      	add	r7, sp, #8
 8018a6a:	60f8      	str	r0, [r7, #12]
 8018a6c:	60b9      	str	r1, [r7, #8]
 8018a6e:	607a      	str	r2, [r7, #4]
 8018a70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018a72:	2300      	movs	r3, #0
 8018a74:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d106      	bne.n	8018a8a <etharp_raw+0x26>
 8018a7c:	4b3a      	ldr	r3, [pc, #232]	; (8018b68 <etharp_raw+0x104>)
 8018a7e:	f240 4257 	movw	r2, #1111	; 0x457
 8018a82:	493a      	ldr	r1, [pc, #232]	; (8018b6c <etharp_raw+0x108>)
 8018a84:	483a      	ldr	r0, [pc, #232]	; (8018b70 <etharp_raw+0x10c>)
 8018a86:	f002 f9dd 	bl	801ae44 <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018a8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a8e:	211c      	movs	r1, #28
 8018a90:	200e      	movs	r0, #14
 8018a92:	f7f7 fcb7 	bl	8010404 <pbuf_alloc>
 8018a96:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018a98:	69bb      	ldr	r3, [r7, #24]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d102      	bne.n	8018aa4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8018aa2:	e05d      	b.n	8018b60 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018aa4:	69bb      	ldr	r3, [r7, #24]
 8018aa6:	895b      	ldrh	r3, [r3, #10]
 8018aa8:	2b1b      	cmp	r3, #27
 8018aaa:	d806      	bhi.n	8018aba <etharp_raw+0x56>
 8018aac:	4b2e      	ldr	r3, [pc, #184]	; (8018b68 <etharp_raw+0x104>)
 8018aae:	f240 4262 	movw	r2, #1122	; 0x462
 8018ab2:	4930      	ldr	r1, [pc, #192]	; (8018b74 <etharp_raw+0x110>)
 8018ab4:	482e      	ldr	r0, [pc, #184]	; (8018b70 <etharp_raw+0x10c>)
 8018ab6:	f002 f9c5 	bl	801ae44 <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018aba:	69bb      	ldr	r3, [r7, #24]
 8018abc:	685b      	ldr	r3, [r3, #4]
 8018abe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018ac0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f7f6 fc18 	bl	800f2f8 <lwip_htons>
 8018ac8:	4603      	mov	r3, r0
 8018aca:	461a      	mov	r2, r3
 8018acc:	697b      	ldr	r3, [r7, #20]
 8018ace:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ad6:	2b06      	cmp	r3, #6
 8018ad8:	d006      	beq.n	8018ae8 <etharp_raw+0x84>
 8018ada:	4b23      	ldr	r3, [pc, #140]	; (8018b68 <etharp_raw+0x104>)
 8018adc:	f240 4269 	movw	r2, #1129	; 0x469
 8018ae0:	4925      	ldr	r1, [pc, #148]	; (8018b78 <etharp_raw+0x114>)
 8018ae2:	4823      	ldr	r0, [pc, #140]	; (8018b70 <etharp_raw+0x10c>)
 8018ae4:	f002 f9ae 	bl	801ae44 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018ae8:	697b      	ldr	r3, [r7, #20]
 8018aea:	3308      	adds	r3, #8
 8018aec:	2206      	movs	r2, #6
 8018aee:	6839      	ldr	r1, [r7, #0]
 8018af0:	4618      	mov	r0, r3
 8018af2:	f001 fef9 	bl	801a8e8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018af6:	697b      	ldr	r3, [r7, #20]
 8018af8:	3312      	adds	r3, #18
 8018afa:	2206      	movs	r2, #6
 8018afc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018afe:	4618      	mov	r0, r3
 8018b00:	f001 fef2 	bl	801a8e8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018b04:	697b      	ldr	r3, [r7, #20]
 8018b06:	330e      	adds	r3, #14
 8018b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b0a:	6812      	ldr	r2, [r2, #0]
 8018b0c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018b0e:	697b      	ldr	r3, [r7, #20]
 8018b10:	3318      	adds	r3, #24
 8018b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b14:	6812      	ldr	r2, [r2, #0]
 8018b16:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018b18:	697b      	ldr	r3, [r7, #20]
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	701a      	strb	r2, [r3, #0]
 8018b1e:	2200      	movs	r2, #0
 8018b20:	f042 0201 	orr.w	r2, r2, #1
 8018b24:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018b26:	697b      	ldr	r3, [r7, #20]
 8018b28:	2200      	movs	r2, #0
 8018b2a:	f042 0208 	orr.w	r2, r2, #8
 8018b2e:	709a      	strb	r2, [r3, #2]
 8018b30:	2200      	movs	r2, #0
 8018b32:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	2206      	movs	r2, #6
 8018b38:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018b3a:	697b      	ldr	r3, [r7, #20]
 8018b3c:	2204      	movs	r2, #4
 8018b3e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018b40:	f640 0306 	movw	r3, #2054	; 0x806
 8018b44:	9300      	str	r3, [sp, #0]
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	68ba      	ldr	r2, [r7, #8]
 8018b4a:	69b9      	ldr	r1, [r7, #24]
 8018b4c:	68f8      	ldr	r0, [r7, #12]
 8018b4e:	f001 fb75 	bl	801a23c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018b52:	69b8      	ldr	r0, [r7, #24]
 8018b54:	f7f7 ff3a 	bl	80109cc <pbuf_free>
  p = NULL;
 8018b58:	2300      	movs	r3, #0
 8018b5a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018b5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018b60:	4618      	mov	r0, r3
 8018b62:	3720      	adds	r7, #32
 8018b64:	46bd      	mov	sp, r7
 8018b66:	bd80      	pop	{r7, pc}
 8018b68:	08026e28 	.word	0x08026e28
 8018b6c:	08026f78 	.word	0x08026f78
 8018b70:	08026ea0 	.word	0x08026ea0
 8018b74:	08027028 	.word	0x08027028
 8018b78:	0802705c 	.word	0x0802705c

08018b7c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b088      	sub	sp, #32
 8018b80:	af04      	add	r7, sp, #16
 8018b82:	60f8      	str	r0, [r7, #12]
 8018b84:	60b9      	str	r1, [r7, #8]
 8018b86:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018b98:	2201      	movs	r2, #1
 8018b9a:	9203      	str	r2, [sp, #12]
 8018b9c:	68ba      	ldr	r2, [r7, #8]
 8018b9e:	9202      	str	r2, [sp, #8]
 8018ba0:	4a06      	ldr	r2, [pc, #24]	; (8018bbc <etharp_request_dst+0x40>)
 8018ba2:	9201      	str	r2, [sp, #4]
 8018ba4:	9300      	str	r3, [sp, #0]
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	687a      	ldr	r2, [r7, #4]
 8018baa:	68f8      	ldr	r0, [r7, #12]
 8018bac:	f7ff ff5a 	bl	8018a64 <etharp_raw>
 8018bb0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	3710      	adds	r7, #16
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	bd80      	pop	{r7, pc}
 8018bba:	bf00      	nop
 8018bbc:	08028d38 	.word	0x08028d38

08018bc0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018bc0:	b580      	push	{r7, lr}
 8018bc2:	b082      	sub	sp, #8
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
 8018bc8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018bca:	4a05      	ldr	r2, [pc, #20]	; (8018be0 <etharp_request+0x20>)
 8018bcc:	6839      	ldr	r1, [r7, #0]
 8018bce:	6878      	ldr	r0, [r7, #4]
 8018bd0:	f7ff ffd4 	bl	8018b7c <etharp_request_dst>
 8018bd4:	4603      	mov	r3, r0
}
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	3708      	adds	r7, #8
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd80      	pop	{r7, pc}
 8018bde:	bf00      	nop
 8018be0:	08028d30 	.word	0x08028d30

08018be4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b08e      	sub	sp, #56	; 0x38
 8018be8:	af04      	add	r7, sp, #16
 8018bea:	6078      	str	r0, [r7, #4]
 8018bec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018bee:	4b79      	ldr	r3, [pc, #484]	; (8018dd4 <icmp_input+0x1f0>)
 8018bf0:	689b      	ldr	r3, [r3, #8]
 8018bf2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bf6:	781b      	ldrb	r3, [r3, #0]
 8018bf8:	f003 030f 	and.w	r3, r3, #15
 8018bfc:	b2db      	uxtb	r3, r3
 8018bfe:	009b      	lsls	r3, r3, #2
 8018c00:	b2db      	uxtb	r3, r3
 8018c02:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018c04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c06:	2b13      	cmp	r3, #19
 8018c08:	f240 80cd 	bls.w	8018da6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	895b      	ldrh	r3, [r3, #10]
 8018c10:	2b03      	cmp	r3, #3
 8018c12:	f240 80ca 	bls.w	8018daa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	685b      	ldr	r3, [r3, #4]
 8018c1a:	781b      	ldrb	r3, [r3, #0]
 8018c1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018c20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	f000 80b7 	beq.w	8018d98 <icmp_input+0x1b4>
 8018c2a:	2b08      	cmp	r3, #8
 8018c2c:	f040 80b7 	bne.w	8018d9e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018c30:	4b69      	ldr	r3, [pc, #420]	; (8018dd8 <icmp_input+0x1f4>)
 8018c32:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018c34:	4b67      	ldr	r3, [pc, #412]	; (8018dd4 <icmp_input+0x1f0>)
 8018c36:	695b      	ldr	r3, [r3, #20]
 8018c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018c3c:	2be0      	cmp	r3, #224	; 0xe0
 8018c3e:	f000 80bb 	beq.w	8018db8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018c42:	4b64      	ldr	r3, [pc, #400]	; (8018dd4 <icmp_input+0x1f0>)
 8018c44:	695b      	ldr	r3, [r3, #20]
 8018c46:	4a63      	ldr	r2, [pc, #396]	; (8018dd4 <icmp_input+0x1f0>)
 8018c48:	6812      	ldr	r2, [r2, #0]
 8018c4a:	4611      	mov	r1, r2
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	f000 fbed 	bl	801942c <ip4_addr_isbroadcast_u32>
 8018c52:	4603      	mov	r3, r0
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	f040 80b1 	bne.w	8018dbc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	891b      	ldrh	r3, [r3, #8]
 8018c5e:	2b07      	cmp	r3, #7
 8018c60:	f240 80a5 	bls.w	8018dae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018c64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c66:	330e      	adds	r3, #14
 8018c68:	4619      	mov	r1, r3
 8018c6a:	6878      	ldr	r0, [r7, #4]
 8018c6c:	f7f7 fe18 	bl	80108a0 <pbuf_add_header>
 8018c70:	4603      	mov	r3, r0
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d04b      	beq.n	8018d0e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	891a      	ldrh	r2, [r3, #8]
 8018c7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c7c:	4413      	add	r3, r2
 8018c7e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	891b      	ldrh	r3, [r3, #8]
 8018c84:	8b7a      	ldrh	r2, [r7, #26]
 8018c86:	429a      	cmp	r2, r3
 8018c88:	f0c0 809a 	bcc.w	8018dc0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018c8c:	8b7b      	ldrh	r3, [r7, #26]
 8018c8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018c92:	4619      	mov	r1, r3
 8018c94:	200e      	movs	r0, #14
 8018c96:	f7f7 fbb5 	bl	8010404 <pbuf_alloc>
 8018c9a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018c9c:	697b      	ldr	r3, [r7, #20]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	f000 8090 	beq.w	8018dc4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018ca4:	697b      	ldr	r3, [r7, #20]
 8018ca6:	895b      	ldrh	r3, [r3, #10]
 8018ca8:	461a      	mov	r2, r3
 8018caa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018cac:	3308      	adds	r3, #8
 8018cae:	429a      	cmp	r2, r3
 8018cb0:	d203      	bcs.n	8018cba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018cb2:	6978      	ldr	r0, [r7, #20]
 8018cb4:	f7f7 fe8a 	bl	80109cc <pbuf_free>
          goto icmperr;
 8018cb8:	e085      	b.n	8018dc6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018cba:	697b      	ldr	r3, [r7, #20]
 8018cbc:	685b      	ldr	r3, [r3, #4]
 8018cbe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018cc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	f001 fe10 	bl	801a8e8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018cc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018cca:	4619      	mov	r1, r3
 8018ccc:	6978      	ldr	r0, [r7, #20]
 8018cce:	f7f7 fdf7 	bl	80108c0 <pbuf_remove_header>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d009      	beq.n	8018cec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018cd8:	4b40      	ldr	r3, [pc, #256]	; (8018ddc <icmp_input+0x1f8>)
 8018cda:	22b6      	movs	r2, #182	; 0xb6
 8018cdc:	4940      	ldr	r1, [pc, #256]	; (8018de0 <icmp_input+0x1fc>)
 8018cde:	4841      	ldr	r0, [pc, #260]	; (8018de4 <icmp_input+0x200>)
 8018ce0:	f002 f8b0 	bl	801ae44 <printf>
          pbuf_free(r);
 8018ce4:	6978      	ldr	r0, [r7, #20]
 8018ce6:	f7f7 fe71 	bl	80109cc <pbuf_free>
          goto icmperr;
 8018cea:	e06c      	b.n	8018dc6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018cec:	6879      	ldr	r1, [r7, #4]
 8018cee:	6978      	ldr	r0, [r7, #20]
 8018cf0:	f7f7 ffa0 	bl	8010c34 <pbuf_copy>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d003      	beq.n	8018d02 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018cfa:	6978      	ldr	r0, [r7, #20]
 8018cfc:	f7f7 fe66 	bl	80109cc <pbuf_free>
          goto icmperr;
 8018d00:	e061      	b.n	8018dc6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8018d02:	6878      	ldr	r0, [r7, #4]
 8018d04:	f7f7 fe62 	bl	80109cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018d08:	697b      	ldr	r3, [r7, #20]
 8018d0a:	607b      	str	r3, [r7, #4]
 8018d0c:	e00f      	b.n	8018d2e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018d0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018d10:	330e      	adds	r3, #14
 8018d12:	4619      	mov	r1, r3
 8018d14:	6878      	ldr	r0, [r7, #4]
 8018d16:	f7f7 fdd3 	bl	80108c0 <pbuf_remove_header>
 8018d1a:	4603      	mov	r3, r0
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d006      	beq.n	8018d2e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018d20:	4b2e      	ldr	r3, [pc, #184]	; (8018ddc <icmp_input+0x1f8>)
 8018d22:	22c7      	movs	r2, #199	; 0xc7
 8018d24:	4930      	ldr	r1, [pc, #192]	; (8018de8 <icmp_input+0x204>)
 8018d26:	482f      	ldr	r0, [pc, #188]	; (8018de4 <icmp_input+0x200>)
 8018d28:	f002 f88c 	bl	801ae44 <printf>
          goto icmperr;
 8018d2c:	e04b      	b.n	8018dc6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	685b      	ldr	r3, [r3, #4]
 8018d32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018d34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018d36:	4619      	mov	r1, r3
 8018d38:	6878      	ldr	r0, [r7, #4]
 8018d3a:	f7f7 fdb1 	bl	80108a0 <pbuf_add_header>
 8018d3e:	4603      	mov	r3, r0
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d12b      	bne.n	8018d9c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	685b      	ldr	r3, [r3, #4]
 8018d48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018d4a:	69fb      	ldr	r3, [r7, #28]
 8018d4c:	681a      	ldr	r2, [r3, #0]
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018d52:	4b20      	ldr	r3, [pc, #128]	; (8018dd4 <icmp_input+0x1f0>)
 8018d54:	691a      	ldr	r2, [r3, #16]
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018d5a:	693b      	ldr	r3, [r7, #16]
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8018d60:	693b      	ldr	r3, [r7, #16]
 8018d62:	2200      	movs	r2, #0
 8018d64:	709a      	strb	r2, [r3, #2]
 8018d66:	2200      	movs	r2, #0
 8018d68:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	22ff      	movs	r2, #255	; 0xff
 8018d6e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	2200      	movs	r2, #0
 8018d74:	729a      	strb	r2, [r3, #10]
 8018d76:	2200      	movs	r2, #0
 8018d78:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018d7a:	683b      	ldr	r3, [r7, #0]
 8018d7c:	9302      	str	r3, [sp, #8]
 8018d7e:	2301      	movs	r3, #1
 8018d80:	9301      	str	r3, [sp, #4]
 8018d82:	2300      	movs	r3, #0
 8018d84:	9300      	str	r3, [sp, #0]
 8018d86:	23ff      	movs	r3, #255	; 0xff
 8018d88:	2200      	movs	r2, #0
 8018d8a:	69f9      	ldr	r1, [r7, #28]
 8018d8c:	6878      	ldr	r0, [r7, #4]
 8018d8e:	f000 fa75 	bl	801927c <ip4_output_if>
 8018d92:	4603      	mov	r3, r0
 8018d94:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018d96:	e001      	b.n	8018d9c <icmp_input+0x1b8>
      break;
 8018d98:	bf00      	nop
 8018d9a:	e000      	b.n	8018d9e <icmp_input+0x1ba>
      break;
 8018d9c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018d9e:	6878      	ldr	r0, [r7, #4]
 8018da0:	f7f7 fe14 	bl	80109cc <pbuf_free>
  return;
 8018da4:	e013      	b.n	8018dce <icmp_input+0x1ea>
    goto lenerr;
 8018da6:	bf00      	nop
 8018da8:	e002      	b.n	8018db0 <icmp_input+0x1cc>
    goto lenerr;
 8018daa:	bf00      	nop
 8018dac:	e000      	b.n	8018db0 <icmp_input+0x1cc>
        goto lenerr;
 8018dae:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018db0:	6878      	ldr	r0, [r7, #4]
 8018db2:	f7f7 fe0b 	bl	80109cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018db6:	e00a      	b.n	8018dce <icmp_input+0x1ea>
        goto icmperr;
 8018db8:	bf00      	nop
 8018dba:	e004      	b.n	8018dc6 <icmp_input+0x1e2>
        goto icmperr;
 8018dbc:	bf00      	nop
 8018dbe:	e002      	b.n	8018dc6 <icmp_input+0x1e2>
          goto icmperr;
 8018dc0:	bf00      	nop
 8018dc2:	e000      	b.n	8018dc6 <icmp_input+0x1e2>
          goto icmperr;
 8018dc4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018dc6:	6878      	ldr	r0, [r7, #4]
 8018dc8:	f7f7 fe00 	bl	80109cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018dcc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018dce:	3728      	adds	r7, #40	; 0x28
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	bd80      	pop	{r7, pc}
 8018dd4:	20008700 	.word	0x20008700
 8018dd8:	20008714 	.word	0x20008714
 8018ddc:	080270a0 	.word	0x080270a0
 8018de0:	080270d8 	.word	0x080270d8
 8018de4:	08027110 	.word	0x08027110
 8018de8:	08027138 	.word	0x08027138

08018dec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b082      	sub	sp, #8
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
 8018df4:	460b      	mov	r3, r1
 8018df6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018df8:	78fb      	ldrb	r3, [r7, #3]
 8018dfa:	461a      	mov	r2, r3
 8018dfc:	2103      	movs	r1, #3
 8018dfe:	6878      	ldr	r0, [r7, #4]
 8018e00:	f000 f814 	bl	8018e2c <icmp_send_response>
}
 8018e04:	bf00      	nop
 8018e06:	3708      	adds	r7, #8
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	bd80      	pop	{r7, pc}

08018e0c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b082      	sub	sp, #8
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
 8018e14:	460b      	mov	r3, r1
 8018e16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018e18:	78fb      	ldrb	r3, [r7, #3]
 8018e1a:	461a      	mov	r2, r3
 8018e1c:	210b      	movs	r1, #11
 8018e1e:	6878      	ldr	r0, [r7, #4]
 8018e20:	f000 f804 	bl	8018e2c <icmp_send_response>
}
 8018e24:	bf00      	nop
 8018e26:	3708      	adds	r7, #8
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	bd80      	pop	{r7, pc}

08018e2c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b08c      	sub	sp, #48	; 0x30
 8018e30:	af04      	add	r7, sp, #16
 8018e32:	6078      	str	r0, [r7, #4]
 8018e34:	460b      	mov	r3, r1
 8018e36:	70fb      	strb	r3, [r7, #3]
 8018e38:	4613      	mov	r3, r2
 8018e3a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018e3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e40:	2124      	movs	r1, #36	; 0x24
 8018e42:	2022      	movs	r0, #34	; 0x22
 8018e44:	f7f7 fade 	bl	8010404 <pbuf_alloc>
 8018e48:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018e4a:	69fb      	ldr	r3, [r7, #28]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d04c      	beq.n	8018eea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018e50:	69fb      	ldr	r3, [r7, #28]
 8018e52:	895b      	ldrh	r3, [r3, #10]
 8018e54:	2b23      	cmp	r3, #35	; 0x23
 8018e56:	d806      	bhi.n	8018e66 <icmp_send_response+0x3a>
 8018e58:	4b26      	ldr	r3, [pc, #152]	; (8018ef4 <icmp_send_response+0xc8>)
 8018e5a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018e5e:	4926      	ldr	r1, [pc, #152]	; (8018ef8 <icmp_send_response+0xcc>)
 8018e60:	4826      	ldr	r0, [pc, #152]	; (8018efc <icmp_send_response+0xd0>)
 8018e62:	f001 ffef 	bl	801ae44 <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	685b      	ldr	r3, [r3, #4]
 8018e6a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018e6c:	69fb      	ldr	r3, [r7, #28]
 8018e6e:	685b      	ldr	r3, [r3, #4]
 8018e70:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018e72:	697b      	ldr	r3, [r7, #20]
 8018e74:	78fa      	ldrb	r2, [r7, #3]
 8018e76:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	78ba      	ldrb	r2, [r7, #2]
 8018e7c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018e7e:	697b      	ldr	r3, [r7, #20]
 8018e80:	2200      	movs	r2, #0
 8018e82:	711a      	strb	r2, [r3, #4]
 8018e84:	2200      	movs	r2, #0
 8018e86:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018e88:	697b      	ldr	r3, [r7, #20]
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	719a      	strb	r2, [r3, #6]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018e92:	69fb      	ldr	r3, [r7, #28]
 8018e94:	685b      	ldr	r3, [r3, #4]
 8018e96:	f103 0008 	add.w	r0, r3, #8
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	685b      	ldr	r3, [r3, #4]
 8018e9e:	221c      	movs	r2, #28
 8018ea0:	4619      	mov	r1, r3
 8018ea2:	f001 fd21 	bl	801a8e8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018ea6:	69bb      	ldr	r3, [r7, #24]
 8018ea8:	68db      	ldr	r3, [r3, #12]
 8018eaa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018eac:	f107 030c 	add.w	r3, r7, #12
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	f000 f825 	bl	8018f00 <ip4_route>
 8018eb6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018eb8:	693b      	ldr	r3, [r7, #16]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d011      	beq.n	8018ee2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018ebe:	697b      	ldr	r3, [r7, #20]
 8018ec0:	2200      	movs	r2, #0
 8018ec2:	709a      	strb	r2, [r3, #2]
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018ec8:	f107 020c 	add.w	r2, r7, #12
 8018ecc:	693b      	ldr	r3, [r7, #16]
 8018ece:	9302      	str	r3, [sp, #8]
 8018ed0:	2301      	movs	r3, #1
 8018ed2:	9301      	str	r3, [sp, #4]
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	9300      	str	r3, [sp, #0]
 8018ed8:	23ff      	movs	r3, #255	; 0xff
 8018eda:	2100      	movs	r1, #0
 8018edc:	69f8      	ldr	r0, [r7, #28]
 8018ede:	f000 f9cd 	bl	801927c <ip4_output_if>
  }
  pbuf_free(q);
 8018ee2:	69f8      	ldr	r0, [r7, #28]
 8018ee4:	f7f7 fd72 	bl	80109cc <pbuf_free>
 8018ee8:	e000      	b.n	8018eec <icmp_send_response+0xc0>
    return;
 8018eea:	bf00      	nop
}
 8018eec:	3720      	adds	r7, #32
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}
 8018ef2:	bf00      	nop
 8018ef4:	080270a0 	.word	0x080270a0
 8018ef8:	0802716c 	.word	0x0802716c
 8018efc:	08027110 	.word	0x08027110

08018f00 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018f00:	b480      	push	{r7}
 8018f02:	b085      	sub	sp, #20
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018f08:	4b33      	ldr	r3, [pc, #204]	; (8018fd8 <ip4_route+0xd8>)
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	60fb      	str	r3, [r7, #12]
 8018f0e:	e036      	b.n	8018f7e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018f16:	f003 0301 	and.w	r3, r3, #1
 8018f1a:	b2db      	uxtb	r3, r3
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d02b      	beq.n	8018f78 <ip4_route+0x78>
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018f26:	089b      	lsrs	r3, r3, #2
 8018f28:	f003 0301 	and.w	r3, r3, #1
 8018f2c:	b2db      	uxtb	r3, r3
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d022      	beq.n	8018f78 <ip4_route+0x78>
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	3304      	adds	r3, #4
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d01d      	beq.n	8018f78 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	681a      	ldr	r2, [r3, #0]
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	3304      	adds	r3, #4
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	405a      	eors	r2, r3
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	3308      	adds	r3, #8
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	4013      	ands	r3, r2
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d101      	bne.n	8018f58 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	e038      	b.n	8018fca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018f5e:	f003 0302 	and.w	r3, r3, #2
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d108      	bne.n	8018f78 <ip4_route+0x78>
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	681a      	ldr	r2, [r3, #0]
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	330c      	adds	r3, #12
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	429a      	cmp	r2, r3
 8018f72:	d101      	bne.n	8018f78 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	e028      	b.n	8018fca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	60fb      	str	r3, [r7, #12]
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d1c5      	bne.n	8018f10 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018f84:	4b15      	ldr	r3, [pc, #84]	; (8018fdc <ip4_route+0xdc>)
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d01a      	beq.n	8018fc2 <ip4_route+0xc2>
 8018f8c:	4b13      	ldr	r3, [pc, #76]	; (8018fdc <ip4_route+0xdc>)
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018f94:	f003 0301 	and.w	r3, r3, #1
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d012      	beq.n	8018fc2 <ip4_route+0xc2>
 8018f9c:	4b0f      	ldr	r3, [pc, #60]	; (8018fdc <ip4_route+0xdc>)
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018fa4:	f003 0304 	and.w	r3, r3, #4
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d00a      	beq.n	8018fc2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018fac:	4b0b      	ldr	r3, [pc, #44]	; (8018fdc <ip4_route+0xdc>)
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	3304      	adds	r3, #4
 8018fb2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d004      	beq.n	8018fc2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	b2db      	uxtb	r3, r3
 8018fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8018fc0:	d101      	bne.n	8018fc6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	e001      	b.n	8018fca <ip4_route+0xca>
  }

  return netif_default;
 8018fc6:	4b05      	ldr	r3, [pc, #20]	; (8018fdc <ip4_route+0xdc>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
}
 8018fca:	4618      	mov	r0, r3
 8018fcc:	3714      	adds	r7, #20
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd4:	4770      	bx	lr
 8018fd6:	bf00      	nop
 8018fd8:	2000be04 	.word	0x2000be04
 8018fdc:	2000be08 	.word	0x2000be08

08018fe0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b082      	sub	sp, #8
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018fee:	f003 0301 	and.w	r3, r3, #1
 8018ff2:	b2db      	uxtb	r3, r3
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d016      	beq.n	8019026 <ip4_input_accept+0x46>
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	3304      	adds	r3, #4
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d011      	beq.n	8019026 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019002:	4b0b      	ldr	r3, [pc, #44]	; (8019030 <ip4_input_accept+0x50>)
 8019004:	695a      	ldr	r2, [r3, #20]
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	3304      	adds	r3, #4
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	429a      	cmp	r2, r3
 801900e:	d008      	beq.n	8019022 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019010:	4b07      	ldr	r3, [pc, #28]	; (8019030 <ip4_input_accept+0x50>)
 8019012:	695b      	ldr	r3, [r3, #20]
 8019014:	6879      	ldr	r1, [r7, #4]
 8019016:	4618      	mov	r0, r3
 8019018:	f000 fa08 	bl	801942c <ip4_addr_isbroadcast_u32>
 801901c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801901e:	2b00      	cmp	r3, #0
 8019020:	d001      	beq.n	8019026 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019022:	2301      	movs	r3, #1
 8019024:	e000      	b.n	8019028 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019026:	2300      	movs	r3, #0
}
 8019028:	4618      	mov	r0, r3
 801902a:	3708      	adds	r7, #8
 801902c:	46bd      	mov	sp, r7
 801902e:	bd80      	pop	{r7, pc}
 8019030:	20008700 	.word	0x20008700

08019034 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b086      	sub	sp, #24
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
 801903c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	685b      	ldr	r3, [r3, #4]
 8019042:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019044:	697b      	ldr	r3, [r7, #20]
 8019046:	781b      	ldrb	r3, [r3, #0]
 8019048:	091b      	lsrs	r3, r3, #4
 801904a:	b2db      	uxtb	r3, r3
 801904c:	2b04      	cmp	r3, #4
 801904e:	d004      	beq.n	801905a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019050:	6878      	ldr	r0, [r7, #4]
 8019052:	f7f7 fcbb 	bl	80109cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019056:	2300      	movs	r3, #0
 8019058:	e107      	b.n	801926a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801905a:	697b      	ldr	r3, [r7, #20]
 801905c:	781b      	ldrb	r3, [r3, #0]
 801905e:	f003 030f 	and.w	r3, r3, #15
 8019062:	b2db      	uxtb	r3, r3
 8019064:	009b      	lsls	r3, r3, #2
 8019066:	b2db      	uxtb	r3, r3
 8019068:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801906a:	697b      	ldr	r3, [r7, #20]
 801906c:	885b      	ldrh	r3, [r3, #2]
 801906e:	b29b      	uxth	r3, r3
 8019070:	4618      	mov	r0, r3
 8019072:	f7f6 f941 	bl	800f2f8 <lwip_htons>
 8019076:	4603      	mov	r3, r0
 8019078:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	891b      	ldrh	r3, [r3, #8]
 801907e:	89ba      	ldrh	r2, [r7, #12]
 8019080:	429a      	cmp	r2, r3
 8019082:	d204      	bcs.n	801908e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019084:	89bb      	ldrh	r3, [r7, #12]
 8019086:	4619      	mov	r1, r3
 8019088:	6878      	ldr	r0, [r7, #4]
 801908a:	f7f7 fb19 	bl	80106c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	895b      	ldrh	r3, [r3, #10]
 8019092:	89fa      	ldrh	r2, [r7, #14]
 8019094:	429a      	cmp	r2, r3
 8019096:	d807      	bhi.n	80190a8 <ip4_input+0x74>
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	891b      	ldrh	r3, [r3, #8]
 801909c:	89ba      	ldrh	r2, [r7, #12]
 801909e:	429a      	cmp	r2, r3
 80190a0:	d802      	bhi.n	80190a8 <ip4_input+0x74>
 80190a2:	89fb      	ldrh	r3, [r7, #14]
 80190a4:	2b13      	cmp	r3, #19
 80190a6:	d804      	bhi.n	80190b2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80190a8:	6878      	ldr	r0, [r7, #4]
 80190aa:	f7f7 fc8f 	bl	80109cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80190ae:	2300      	movs	r3, #0
 80190b0:	e0db      	b.n	801926a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80190b2:	697b      	ldr	r3, [r7, #20]
 80190b4:	691b      	ldr	r3, [r3, #16]
 80190b6:	4a6f      	ldr	r2, [pc, #444]	; (8019274 <ip4_input+0x240>)
 80190b8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80190ba:	697b      	ldr	r3, [r7, #20]
 80190bc:	68db      	ldr	r3, [r3, #12]
 80190be:	4a6d      	ldr	r2, [pc, #436]	; (8019274 <ip4_input+0x240>)
 80190c0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80190c2:	4b6c      	ldr	r3, [pc, #432]	; (8019274 <ip4_input+0x240>)
 80190c4:	695b      	ldr	r3, [r3, #20]
 80190c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80190ca:	2be0      	cmp	r3, #224	; 0xe0
 80190cc:	d112      	bne.n	80190f4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80190ce:	683b      	ldr	r3, [r7, #0]
 80190d0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80190d4:	f003 0301 	and.w	r3, r3, #1
 80190d8:	b2db      	uxtb	r3, r3
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d007      	beq.n	80190ee <ip4_input+0xba>
 80190de:	683b      	ldr	r3, [r7, #0]
 80190e0:	3304      	adds	r3, #4
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d002      	beq.n	80190ee <ip4_input+0xba>
      netif = inp;
 80190e8:	683b      	ldr	r3, [r7, #0]
 80190ea:	613b      	str	r3, [r7, #16]
 80190ec:	e02a      	b.n	8019144 <ip4_input+0x110>
    } else {
      netif = NULL;
 80190ee:	2300      	movs	r3, #0
 80190f0:	613b      	str	r3, [r7, #16]
 80190f2:	e027      	b.n	8019144 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80190f4:	6838      	ldr	r0, [r7, #0]
 80190f6:	f7ff ff73 	bl	8018fe0 <ip4_input_accept>
 80190fa:	4603      	mov	r3, r0
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d002      	beq.n	8019106 <ip4_input+0xd2>
      netif = inp;
 8019100:	683b      	ldr	r3, [r7, #0]
 8019102:	613b      	str	r3, [r7, #16]
 8019104:	e01e      	b.n	8019144 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019106:	2300      	movs	r3, #0
 8019108:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801910a:	4b5a      	ldr	r3, [pc, #360]	; (8019274 <ip4_input+0x240>)
 801910c:	695b      	ldr	r3, [r3, #20]
 801910e:	b2db      	uxtb	r3, r3
 8019110:	2b7f      	cmp	r3, #127	; 0x7f
 8019112:	d017      	beq.n	8019144 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019114:	4b58      	ldr	r3, [pc, #352]	; (8019278 <ip4_input+0x244>)
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	613b      	str	r3, [r7, #16]
 801911a:	e00e      	b.n	801913a <ip4_input+0x106>
          if (netif == inp) {
 801911c:	693a      	ldr	r2, [r7, #16]
 801911e:	683b      	ldr	r3, [r7, #0]
 8019120:	429a      	cmp	r2, r3
 8019122:	d006      	beq.n	8019132 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019124:	6938      	ldr	r0, [r7, #16]
 8019126:	f7ff ff5b 	bl	8018fe0 <ip4_input_accept>
 801912a:	4603      	mov	r3, r0
 801912c:	2b00      	cmp	r3, #0
 801912e:	d108      	bne.n	8019142 <ip4_input+0x10e>
 8019130:	e000      	b.n	8019134 <ip4_input+0x100>
            continue;
 8019132:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019134:	693b      	ldr	r3, [r7, #16]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	613b      	str	r3, [r7, #16]
 801913a:	693b      	ldr	r3, [r7, #16]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d1ed      	bne.n	801911c <ip4_input+0xe8>
 8019140:	e000      	b.n	8019144 <ip4_input+0x110>
            break;
 8019142:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019144:	4b4b      	ldr	r3, [pc, #300]	; (8019274 <ip4_input+0x240>)
 8019146:	691b      	ldr	r3, [r3, #16]
 8019148:	6839      	ldr	r1, [r7, #0]
 801914a:	4618      	mov	r0, r3
 801914c:	f000 f96e 	bl	801942c <ip4_addr_isbroadcast_u32>
 8019150:	4603      	mov	r3, r0
 8019152:	2b00      	cmp	r3, #0
 8019154:	d105      	bne.n	8019162 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019156:	4b47      	ldr	r3, [pc, #284]	; (8019274 <ip4_input+0x240>)
 8019158:	691b      	ldr	r3, [r3, #16]
 801915a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801915e:	2be0      	cmp	r3, #224	; 0xe0
 8019160:	d104      	bne.n	801916c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019162:	6878      	ldr	r0, [r7, #4]
 8019164:	f7f7 fc32 	bl	80109cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019168:	2300      	movs	r3, #0
 801916a:	e07e      	b.n	801926a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801916c:	693b      	ldr	r3, [r7, #16]
 801916e:	2b00      	cmp	r3, #0
 8019170:	d104      	bne.n	801917c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019172:	6878      	ldr	r0, [r7, #4]
 8019174:	f7f7 fc2a 	bl	80109cc <pbuf_free>
    return ERR_OK;
 8019178:	2300      	movs	r3, #0
 801917a:	e076      	b.n	801926a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801917c:	697b      	ldr	r3, [r7, #20]
 801917e:	88db      	ldrh	r3, [r3, #6]
 8019180:	b29b      	uxth	r3, r3
 8019182:	461a      	mov	r2, r3
 8019184:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019188:	4013      	ands	r3, r2
 801918a:	2b00      	cmp	r3, #0
 801918c:	d00b      	beq.n	80191a6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801918e:	6878      	ldr	r0, [r7, #4]
 8019190:	f000 fc92 	bl	8019ab8 <ip4_reass>
 8019194:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d101      	bne.n	80191a0 <ip4_input+0x16c>
      return ERR_OK;
 801919c:	2300      	movs	r3, #0
 801919e:	e064      	b.n	801926a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	685b      	ldr	r3, [r3, #4]
 80191a4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80191a6:	4a33      	ldr	r2, [pc, #204]	; (8019274 <ip4_input+0x240>)
 80191a8:	693b      	ldr	r3, [r7, #16]
 80191aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80191ac:	4a31      	ldr	r2, [pc, #196]	; (8019274 <ip4_input+0x240>)
 80191ae:	683b      	ldr	r3, [r7, #0]
 80191b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80191b2:	4a30      	ldr	r2, [pc, #192]	; (8019274 <ip4_input+0x240>)
 80191b4:	697b      	ldr	r3, [r7, #20]
 80191b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80191b8:	697b      	ldr	r3, [r7, #20]
 80191ba:	781b      	ldrb	r3, [r3, #0]
 80191bc:	f003 030f 	and.w	r3, r3, #15
 80191c0:	b2db      	uxtb	r3, r3
 80191c2:	009b      	lsls	r3, r3, #2
 80191c4:	b2db      	uxtb	r3, r3
 80191c6:	b29a      	uxth	r2, r3
 80191c8:	4b2a      	ldr	r3, [pc, #168]	; (8019274 <ip4_input+0x240>)
 80191ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80191cc:	89fb      	ldrh	r3, [r7, #14]
 80191ce:	4619      	mov	r1, r3
 80191d0:	6878      	ldr	r0, [r7, #4]
 80191d2:	f7f7 fb75 	bl	80108c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80191d6:	697b      	ldr	r3, [r7, #20]
 80191d8:	7a5b      	ldrb	r3, [r3, #9]
 80191da:	2b11      	cmp	r3, #17
 80191dc:	d006      	beq.n	80191ec <ip4_input+0x1b8>
 80191de:	2b11      	cmp	r3, #17
 80191e0:	dc13      	bgt.n	801920a <ip4_input+0x1d6>
 80191e2:	2b01      	cmp	r3, #1
 80191e4:	d00c      	beq.n	8019200 <ip4_input+0x1cc>
 80191e6:	2b06      	cmp	r3, #6
 80191e8:	d005      	beq.n	80191f6 <ip4_input+0x1c2>
 80191ea:	e00e      	b.n	801920a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80191ec:	6839      	ldr	r1, [r7, #0]
 80191ee:	6878      	ldr	r0, [r7, #4]
 80191f0:	f7fe f970 	bl	80174d4 <udp_input>
        break;
 80191f4:	e026      	b.n	8019244 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80191f6:	6839      	ldr	r1, [r7, #0]
 80191f8:	6878      	ldr	r0, [r7, #4]
 80191fa:	f7f9 fd2d 	bl	8012c58 <tcp_input>
        break;
 80191fe:	e021      	b.n	8019244 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019200:	6839      	ldr	r1, [r7, #0]
 8019202:	6878      	ldr	r0, [r7, #4]
 8019204:	f7ff fcee 	bl	8018be4 <icmp_input>
        break;
 8019208:	e01c      	b.n	8019244 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801920a:	4b1a      	ldr	r3, [pc, #104]	; (8019274 <ip4_input+0x240>)
 801920c:	695b      	ldr	r3, [r3, #20]
 801920e:	6939      	ldr	r1, [r7, #16]
 8019210:	4618      	mov	r0, r3
 8019212:	f000 f90b 	bl	801942c <ip4_addr_isbroadcast_u32>
 8019216:	4603      	mov	r3, r0
 8019218:	2b00      	cmp	r3, #0
 801921a:	d10f      	bne.n	801923c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801921c:	4b15      	ldr	r3, [pc, #84]	; (8019274 <ip4_input+0x240>)
 801921e:	695b      	ldr	r3, [r3, #20]
 8019220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019224:	2be0      	cmp	r3, #224	; 0xe0
 8019226:	d009      	beq.n	801923c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019228:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801922c:	4619      	mov	r1, r3
 801922e:	6878      	ldr	r0, [r7, #4]
 8019230:	f7f7 fbb9 	bl	80109a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019234:	2102      	movs	r1, #2
 8019236:	6878      	ldr	r0, [r7, #4]
 8019238:	f7ff fdd8 	bl	8018dec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801923c:	6878      	ldr	r0, [r7, #4]
 801923e:	f7f7 fbc5 	bl	80109cc <pbuf_free>
        break;
 8019242:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019244:	4b0b      	ldr	r3, [pc, #44]	; (8019274 <ip4_input+0x240>)
 8019246:	2200      	movs	r2, #0
 8019248:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801924a:	4b0a      	ldr	r3, [pc, #40]	; (8019274 <ip4_input+0x240>)
 801924c:	2200      	movs	r2, #0
 801924e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019250:	4b08      	ldr	r3, [pc, #32]	; (8019274 <ip4_input+0x240>)
 8019252:	2200      	movs	r2, #0
 8019254:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019256:	4b07      	ldr	r3, [pc, #28]	; (8019274 <ip4_input+0x240>)
 8019258:	2200      	movs	r2, #0
 801925a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801925c:	4b05      	ldr	r3, [pc, #20]	; (8019274 <ip4_input+0x240>)
 801925e:	2200      	movs	r2, #0
 8019260:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019262:	4b04      	ldr	r3, [pc, #16]	; (8019274 <ip4_input+0x240>)
 8019264:	2200      	movs	r2, #0
 8019266:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019268:	2300      	movs	r3, #0
}
 801926a:	4618      	mov	r0, r3
 801926c:	3718      	adds	r7, #24
 801926e:	46bd      	mov	sp, r7
 8019270:	bd80      	pop	{r7, pc}
 8019272:	bf00      	nop
 8019274:	20008700 	.word	0x20008700
 8019278:	2000be04 	.word	0x2000be04

0801927c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801927c:	b580      	push	{r7, lr}
 801927e:	b08a      	sub	sp, #40	; 0x28
 8019280:	af04      	add	r7, sp, #16
 8019282:	60f8      	str	r0, [r7, #12]
 8019284:	60b9      	str	r1, [r7, #8]
 8019286:	607a      	str	r2, [r7, #4]
 8019288:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801928a:	68bb      	ldr	r3, [r7, #8]
 801928c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d009      	beq.n	80192a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019294:	68bb      	ldr	r3, [r7, #8]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d003      	beq.n	80192a2 <ip4_output_if+0x26>
 801929a:	68bb      	ldr	r3, [r7, #8]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d102      	bne.n	80192a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80192a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192a4:	3304      	adds	r3, #4
 80192a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80192a8:	78fa      	ldrb	r2, [r7, #3]
 80192aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ac:	9302      	str	r3, [sp, #8]
 80192ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80192b2:	9301      	str	r3, [sp, #4]
 80192b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80192b8:	9300      	str	r3, [sp, #0]
 80192ba:	4613      	mov	r3, r2
 80192bc:	687a      	ldr	r2, [r7, #4]
 80192be:	6979      	ldr	r1, [r7, #20]
 80192c0:	68f8      	ldr	r0, [r7, #12]
 80192c2:	f000 f805 	bl	80192d0 <ip4_output_if_src>
 80192c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80192c8:	4618      	mov	r0, r3
 80192ca:	3718      	adds	r7, #24
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bd80      	pop	{r7, pc}

080192d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b088      	sub	sp, #32
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	60f8      	str	r0, [r7, #12]
 80192d8:	60b9      	str	r1, [r7, #8]
 80192da:	607a      	str	r2, [r7, #4]
 80192dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	7b9b      	ldrb	r3, [r3, #14]
 80192e2:	2b01      	cmp	r3, #1
 80192e4:	d006      	beq.n	80192f4 <ip4_output_if_src+0x24>
 80192e6:	4b4b      	ldr	r3, [pc, #300]	; (8019414 <ip4_output_if_src+0x144>)
 80192e8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80192ec:	494a      	ldr	r1, [pc, #296]	; (8019418 <ip4_output_if_src+0x148>)
 80192ee:	484b      	ldr	r0, [pc, #300]	; (801941c <ip4_output_if_src+0x14c>)
 80192f0:	f001 fda8 	bl	801ae44 <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d060      	beq.n	80193bc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80192fa:	2314      	movs	r3, #20
 80192fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80192fe:	2114      	movs	r1, #20
 8019300:	68f8      	ldr	r0, [r7, #12]
 8019302:	f7f7 facd 	bl	80108a0 <pbuf_add_header>
 8019306:	4603      	mov	r3, r0
 8019308:	2b00      	cmp	r3, #0
 801930a:	d002      	beq.n	8019312 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801930c:	f06f 0301 	mvn.w	r3, #1
 8019310:	e07c      	b.n	801940c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	685b      	ldr	r3, [r3, #4]
 8019316:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	895b      	ldrh	r3, [r3, #10]
 801931c:	2b13      	cmp	r3, #19
 801931e:	d806      	bhi.n	801932e <ip4_output_if_src+0x5e>
 8019320:	4b3c      	ldr	r3, [pc, #240]	; (8019414 <ip4_output_if_src+0x144>)
 8019322:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019326:	493e      	ldr	r1, [pc, #248]	; (8019420 <ip4_output_if_src+0x150>)
 8019328:	483c      	ldr	r0, [pc, #240]	; (801941c <ip4_output_if_src+0x14c>)
 801932a:	f001 fd8b 	bl	801ae44 <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801932e:	69fb      	ldr	r3, [r7, #28]
 8019330:	78fa      	ldrb	r2, [r7, #3]
 8019332:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019334:	69fb      	ldr	r3, [r7, #28]
 8019336:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801933a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	681a      	ldr	r2, [r3, #0]
 8019340:	69fb      	ldr	r3, [r7, #28]
 8019342:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019344:	8b7b      	ldrh	r3, [r7, #26]
 8019346:	089b      	lsrs	r3, r3, #2
 8019348:	b29b      	uxth	r3, r3
 801934a:	b2db      	uxtb	r3, r3
 801934c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019350:	b2da      	uxtb	r2, r3
 8019352:	69fb      	ldr	r3, [r7, #28]
 8019354:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019356:	69fb      	ldr	r3, [r7, #28]
 8019358:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801935c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	891b      	ldrh	r3, [r3, #8]
 8019362:	4618      	mov	r0, r3
 8019364:	f7f5 ffc8 	bl	800f2f8 <lwip_htons>
 8019368:	4603      	mov	r3, r0
 801936a:	461a      	mov	r2, r3
 801936c:	69fb      	ldr	r3, [r7, #28]
 801936e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019370:	69fb      	ldr	r3, [r7, #28]
 8019372:	2200      	movs	r2, #0
 8019374:	719a      	strb	r2, [r3, #6]
 8019376:	2200      	movs	r2, #0
 8019378:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801937a:	4b2a      	ldr	r3, [pc, #168]	; (8019424 <ip4_output_if_src+0x154>)
 801937c:	881b      	ldrh	r3, [r3, #0]
 801937e:	4618      	mov	r0, r3
 8019380:	f7f5 ffba 	bl	800f2f8 <lwip_htons>
 8019384:	4603      	mov	r3, r0
 8019386:	461a      	mov	r2, r3
 8019388:	69fb      	ldr	r3, [r7, #28]
 801938a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801938c:	4b25      	ldr	r3, [pc, #148]	; (8019424 <ip4_output_if_src+0x154>)
 801938e:	881b      	ldrh	r3, [r3, #0]
 8019390:	3301      	adds	r3, #1
 8019392:	b29a      	uxth	r2, r3
 8019394:	4b23      	ldr	r3, [pc, #140]	; (8019424 <ip4_output_if_src+0x154>)
 8019396:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019398:	68bb      	ldr	r3, [r7, #8]
 801939a:	2b00      	cmp	r3, #0
 801939c:	d104      	bne.n	80193a8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801939e:	4b22      	ldr	r3, [pc, #136]	; (8019428 <ip4_output_if_src+0x158>)
 80193a0:	681a      	ldr	r2, [r3, #0]
 80193a2:	69fb      	ldr	r3, [r7, #28]
 80193a4:	60da      	str	r2, [r3, #12]
 80193a6:	e003      	b.n	80193b0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80193a8:	68bb      	ldr	r3, [r7, #8]
 80193aa:	681a      	ldr	r2, [r3, #0]
 80193ac:	69fb      	ldr	r3, [r7, #28]
 80193ae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80193b0:	69fb      	ldr	r3, [r7, #28]
 80193b2:	2200      	movs	r2, #0
 80193b4:	729a      	strb	r2, [r3, #10]
 80193b6:	2200      	movs	r2, #0
 80193b8:	72da      	strb	r2, [r3, #11]
 80193ba:	e00f      	b.n	80193dc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	895b      	ldrh	r3, [r3, #10]
 80193c0:	2b13      	cmp	r3, #19
 80193c2:	d802      	bhi.n	80193ca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80193c4:	f06f 0301 	mvn.w	r3, #1
 80193c8:	e020      	b.n	801940c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	685b      	ldr	r3, [r3, #4]
 80193ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80193d0:	69fb      	ldr	r3, [r7, #28]
 80193d2:	691b      	ldr	r3, [r3, #16]
 80193d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80193d6:	f107 0314 	add.w	r3, r7, #20
 80193da:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80193dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193de:	8c1b      	ldrh	r3, [r3, #32]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d00c      	beq.n	80193fe <ip4_output_if_src+0x12e>
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	891a      	ldrh	r2, [r3, #8]
 80193e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193ea:	8c1b      	ldrh	r3, [r3, #32]
 80193ec:	429a      	cmp	r2, r3
 80193ee:	d906      	bls.n	80193fe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80193f0:	687a      	ldr	r2, [r7, #4]
 80193f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80193f4:	68f8      	ldr	r0, [r7, #12]
 80193f6:	f000 fd4d 	bl	8019e94 <ip4_frag>
 80193fa:	4603      	mov	r3, r0
 80193fc:	e006      	b.n	801940c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80193fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019400:	695b      	ldr	r3, [r3, #20]
 8019402:	687a      	ldr	r2, [r7, #4]
 8019404:	68f9      	ldr	r1, [r7, #12]
 8019406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019408:	4798      	blx	r3
 801940a:	4603      	mov	r3, r0
}
 801940c:	4618      	mov	r0, r3
 801940e:	3720      	adds	r7, #32
 8019410:	46bd      	mov	sp, r7
 8019412:	bd80      	pop	{r7, pc}
 8019414:	08027198 	.word	0x08027198
 8019418:	080271cc 	.word	0x080271cc
 801941c:	080271d8 	.word	0x080271d8
 8019420:	08027200 	.word	0x08027200
 8019424:	2000502a 	.word	0x2000502a
 8019428:	08028d2c 	.word	0x08028d2c

0801942c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801942c:	b480      	push	{r7}
 801942e:	b085      	sub	sp, #20
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
 8019434:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019440:	d002      	beq.n	8019448 <ip4_addr_isbroadcast_u32+0x1c>
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d101      	bne.n	801944c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019448:	2301      	movs	r3, #1
 801944a:	e02a      	b.n	80194a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801944c:	683b      	ldr	r3, [r7, #0]
 801944e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019452:	f003 0302 	and.w	r3, r3, #2
 8019456:	2b00      	cmp	r3, #0
 8019458:	d101      	bne.n	801945e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801945a:	2300      	movs	r3, #0
 801945c:	e021      	b.n	80194a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801945e:	683b      	ldr	r3, [r7, #0]
 8019460:	3304      	adds	r3, #4
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	687a      	ldr	r2, [r7, #4]
 8019466:	429a      	cmp	r2, r3
 8019468:	d101      	bne.n	801946e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801946a:	2300      	movs	r3, #0
 801946c:	e019      	b.n	80194a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801946e:	68fa      	ldr	r2, [r7, #12]
 8019470:	683b      	ldr	r3, [r7, #0]
 8019472:	3304      	adds	r3, #4
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	405a      	eors	r2, r3
 8019478:	683b      	ldr	r3, [r7, #0]
 801947a:	3308      	adds	r3, #8
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	4013      	ands	r3, r2
 8019480:	2b00      	cmp	r3, #0
 8019482:	d10d      	bne.n	80194a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019484:	683b      	ldr	r3, [r7, #0]
 8019486:	3308      	adds	r3, #8
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	43da      	mvns	r2, r3
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019490:	683b      	ldr	r3, [r7, #0]
 8019492:	3308      	adds	r3, #8
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019498:	429a      	cmp	r2, r3
 801949a:	d101      	bne.n	80194a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801949c:	2301      	movs	r3, #1
 801949e:	e000      	b.n	80194a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80194a0:	2300      	movs	r3, #0
  }
}
 80194a2:	4618      	mov	r0, r3
 80194a4:	3714      	adds	r7, #20
 80194a6:	46bd      	mov	sp, r7
 80194a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ac:	4770      	bx	lr
	...

080194b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b084      	sub	sp, #16
 80194b4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80194b6:	2300      	movs	r3, #0
 80194b8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80194ba:	4b12      	ldr	r3, [pc, #72]	; (8019504 <ip_reass_tmr+0x54>)
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80194c0:	e018      	b.n	80194f4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	7fdb      	ldrb	r3, [r3, #31]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d00b      	beq.n	80194e2 <ip_reass_tmr+0x32>
      r->timer--;
 80194ca:	68fb      	ldr	r3, [r7, #12]
 80194cc:	7fdb      	ldrb	r3, [r3, #31]
 80194ce:	3b01      	subs	r3, #1
 80194d0:	b2da      	uxtb	r2, r3
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	60fb      	str	r3, [r7, #12]
 80194e0:	e008      	b.n	80194f4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80194ec:	68b9      	ldr	r1, [r7, #8]
 80194ee:	6878      	ldr	r0, [r7, #4]
 80194f0:	f000 f80a 	bl	8019508 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d1e3      	bne.n	80194c2 <ip_reass_tmr+0x12>
    }
  }
}
 80194fa:	bf00      	nop
 80194fc:	bf00      	nop
 80194fe:	3710      	adds	r7, #16
 8019500:	46bd      	mov	sp, r7
 8019502:	bd80      	pop	{r7, pc}
 8019504:	2000502c 	.word	0x2000502c

08019508 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b088      	sub	sp, #32
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
 8019510:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019512:	2300      	movs	r3, #0
 8019514:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019516:	683a      	ldr	r2, [r7, #0]
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	429a      	cmp	r2, r3
 801951c:	d105      	bne.n	801952a <ip_reass_free_complete_datagram+0x22>
 801951e:	4b45      	ldr	r3, [pc, #276]	; (8019634 <ip_reass_free_complete_datagram+0x12c>)
 8019520:	22ab      	movs	r2, #171	; 0xab
 8019522:	4945      	ldr	r1, [pc, #276]	; (8019638 <ip_reass_free_complete_datagram+0x130>)
 8019524:	4845      	ldr	r0, [pc, #276]	; (801963c <ip_reass_free_complete_datagram+0x134>)
 8019526:	f001 fc8d 	bl	801ae44 <printf>
  if (prev != NULL) {
 801952a:	683b      	ldr	r3, [r7, #0]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d00a      	beq.n	8019546 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019530:	683b      	ldr	r3, [r7, #0]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	687a      	ldr	r2, [r7, #4]
 8019536:	429a      	cmp	r2, r3
 8019538:	d005      	beq.n	8019546 <ip_reass_free_complete_datagram+0x3e>
 801953a:	4b3e      	ldr	r3, [pc, #248]	; (8019634 <ip_reass_free_complete_datagram+0x12c>)
 801953c:	22ad      	movs	r2, #173	; 0xad
 801953e:	4940      	ldr	r1, [pc, #256]	; (8019640 <ip_reass_free_complete_datagram+0x138>)
 8019540:	483e      	ldr	r0, [pc, #248]	; (801963c <ip_reass_free_complete_datagram+0x134>)
 8019542:	f001 fc7f 	bl	801ae44 <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	685b      	ldr	r3, [r3, #4]
 801954a:	685b      	ldr	r3, [r3, #4]
 801954c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801954e:	697b      	ldr	r3, [r7, #20]
 8019550:	889b      	ldrh	r3, [r3, #4]
 8019552:	b29b      	uxth	r3, r3
 8019554:	2b00      	cmp	r3, #0
 8019556:	d12a      	bne.n	80195ae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	685b      	ldr	r3, [r3, #4]
 801955c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801955e:	697b      	ldr	r3, [r7, #20]
 8019560:	681a      	ldr	r2, [r3, #0]
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019566:	69bb      	ldr	r3, [r7, #24]
 8019568:	6858      	ldr	r0, [r3, #4]
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	3308      	adds	r3, #8
 801956e:	2214      	movs	r2, #20
 8019570:	4619      	mov	r1, r3
 8019572:	f001 f9b9 	bl	801a8e8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019576:	2101      	movs	r1, #1
 8019578:	69b8      	ldr	r0, [r7, #24]
 801957a:	f7ff fc47 	bl	8018e0c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801957e:	69b8      	ldr	r0, [r7, #24]
 8019580:	f7f7 fab2 	bl	8010ae8 <pbuf_clen>
 8019584:	4603      	mov	r3, r0
 8019586:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019588:	8bfa      	ldrh	r2, [r7, #30]
 801958a:	8a7b      	ldrh	r3, [r7, #18]
 801958c:	4413      	add	r3, r2
 801958e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019592:	db05      	blt.n	80195a0 <ip_reass_free_complete_datagram+0x98>
 8019594:	4b27      	ldr	r3, [pc, #156]	; (8019634 <ip_reass_free_complete_datagram+0x12c>)
 8019596:	22bc      	movs	r2, #188	; 0xbc
 8019598:	492a      	ldr	r1, [pc, #168]	; (8019644 <ip_reass_free_complete_datagram+0x13c>)
 801959a:	4828      	ldr	r0, [pc, #160]	; (801963c <ip_reass_free_complete_datagram+0x134>)
 801959c:	f001 fc52 	bl	801ae44 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80195a0:	8bfa      	ldrh	r2, [r7, #30]
 80195a2:	8a7b      	ldrh	r3, [r7, #18]
 80195a4:	4413      	add	r3, r2
 80195a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80195a8:	69b8      	ldr	r0, [r7, #24]
 80195aa:	f7f7 fa0f 	bl	80109cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	685b      	ldr	r3, [r3, #4]
 80195b2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80195b4:	e01f      	b.n	80195f6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80195b6:	69bb      	ldr	r3, [r7, #24]
 80195b8:	685b      	ldr	r3, [r3, #4]
 80195ba:	617b      	str	r3, [r7, #20]
    pcur = p;
 80195bc:	69bb      	ldr	r3, [r7, #24]
 80195be:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80195c0:	697b      	ldr	r3, [r7, #20]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80195c6:	68f8      	ldr	r0, [r7, #12]
 80195c8:	f7f7 fa8e 	bl	8010ae8 <pbuf_clen>
 80195cc:	4603      	mov	r3, r0
 80195ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80195d0:	8bfa      	ldrh	r2, [r7, #30]
 80195d2:	8a7b      	ldrh	r3, [r7, #18]
 80195d4:	4413      	add	r3, r2
 80195d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80195da:	db05      	blt.n	80195e8 <ip_reass_free_complete_datagram+0xe0>
 80195dc:	4b15      	ldr	r3, [pc, #84]	; (8019634 <ip_reass_free_complete_datagram+0x12c>)
 80195de:	22cc      	movs	r2, #204	; 0xcc
 80195e0:	4918      	ldr	r1, [pc, #96]	; (8019644 <ip_reass_free_complete_datagram+0x13c>)
 80195e2:	4816      	ldr	r0, [pc, #88]	; (801963c <ip_reass_free_complete_datagram+0x134>)
 80195e4:	f001 fc2e 	bl	801ae44 <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80195e8:	8bfa      	ldrh	r2, [r7, #30]
 80195ea:	8a7b      	ldrh	r3, [r7, #18]
 80195ec:	4413      	add	r3, r2
 80195ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80195f0:	68f8      	ldr	r0, [r7, #12]
 80195f2:	f7f7 f9eb 	bl	80109cc <pbuf_free>
  while (p != NULL) {
 80195f6:	69bb      	ldr	r3, [r7, #24]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d1dc      	bne.n	80195b6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80195fc:	6839      	ldr	r1, [r7, #0]
 80195fe:	6878      	ldr	r0, [r7, #4]
 8019600:	f000 f8c2 	bl	8019788 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019604:	4b10      	ldr	r3, [pc, #64]	; (8019648 <ip_reass_free_complete_datagram+0x140>)
 8019606:	881b      	ldrh	r3, [r3, #0]
 8019608:	8bfa      	ldrh	r2, [r7, #30]
 801960a:	429a      	cmp	r2, r3
 801960c:	d905      	bls.n	801961a <ip_reass_free_complete_datagram+0x112>
 801960e:	4b09      	ldr	r3, [pc, #36]	; (8019634 <ip_reass_free_complete_datagram+0x12c>)
 8019610:	22d2      	movs	r2, #210	; 0xd2
 8019612:	490e      	ldr	r1, [pc, #56]	; (801964c <ip_reass_free_complete_datagram+0x144>)
 8019614:	4809      	ldr	r0, [pc, #36]	; (801963c <ip_reass_free_complete_datagram+0x134>)
 8019616:	f001 fc15 	bl	801ae44 <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801961a:	4b0b      	ldr	r3, [pc, #44]	; (8019648 <ip_reass_free_complete_datagram+0x140>)
 801961c:	881a      	ldrh	r2, [r3, #0]
 801961e:	8bfb      	ldrh	r3, [r7, #30]
 8019620:	1ad3      	subs	r3, r2, r3
 8019622:	b29a      	uxth	r2, r3
 8019624:	4b08      	ldr	r3, [pc, #32]	; (8019648 <ip_reass_free_complete_datagram+0x140>)
 8019626:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019628:	8bfb      	ldrh	r3, [r7, #30]
}
 801962a:	4618      	mov	r0, r3
 801962c:	3720      	adds	r7, #32
 801962e:	46bd      	mov	sp, r7
 8019630:	bd80      	pop	{r7, pc}
 8019632:	bf00      	nop
 8019634:	08027230 	.word	0x08027230
 8019638:	0802726c 	.word	0x0802726c
 801963c:	08027278 	.word	0x08027278
 8019640:	080272a0 	.word	0x080272a0
 8019644:	080272b4 	.word	0x080272b4
 8019648:	20005030 	.word	0x20005030
 801964c:	080272d4 	.word	0x080272d4

08019650 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b08a      	sub	sp, #40	; 0x28
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
 8019658:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801965a:	2300      	movs	r3, #0
 801965c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801965e:	2300      	movs	r3, #0
 8019660:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019662:	2300      	movs	r3, #0
 8019664:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019666:	2300      	movs	r3, #0
 8019668:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801966a:	2300      	movs	r3, #0
 801966c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801966e:	4b28      	ldr	r3, [pc, #160]	; (8019710 <ip_reass_remove_oldest_datagram+0xc0>)
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019674:	e030      	b.n	80196d8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019678:	695a      	ldr	r2, [r3, #20]
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	68db      	ldr	r3, [r3, #12]
 801967e:	429a      	cmp	r2, r3
 8019680:	d10c      	bne.n	801969c <ip_reass_remove_oldest_datagram+0x4c>
 8019682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019684:	699a      	ldr	r2, [r3, #24]
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	691b      	ldr	r3, [r3, #16]
 801968a:	429a      	cmp	r2, r3
 801968c:	d106      	bne.n	801969c <ip_reass_remove_oldest_datagram+0x4c>
 801968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019690:	899a      	ldrh	r2, [r3, #12]
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	889b      	ldrh	r3, [r3, #4]
 8019696:	b29b      	uxth	r3, r3
 8019698:	429a      	cmp	r2, r3
 801969a:	d014      	beq.n	80196c6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801969c:	693b      	ldr	r3, [r7, #16]
 801969e:	3301      	adds	r3, #1
 80196a0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80196a2:	6a3b      	ldr	r3, [r7, #32]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d104      	bne.n	80196b2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80196a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196aa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80196ac:	69fb      	ldr	r3, [r7, #28]
 80196ae:	61bb      	str	r3, [r7, #24]
 80196b0:	e009      	b.n	80196c6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80196b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b4:	7fda      	ldrb	r2, [r3, #31]
 80196b6:	6a3b      	ldr	r3, [r7, #32]
 80196b8:	7fdb      	ldrb	r3, [r3, #31]
 80196ba:	429a      	cmp	r2, r3
 80196bc:	d803      	bhi.n	80196c6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80196be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80196c2:	69fb      	ldr	r3, [r7, #28]
 80196c4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80196c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d001      	beq.n	80196d2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80196ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196d0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80196d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80196d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d1cb      	bne.n	8019676 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80196de:	6a3b      	ldr	r3, [r7, #32]
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d008      	beq.n	80196f6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80196e4:	69b9      	ldr	r1, [r7, #24]
 80196e6:	6a38      	ldr	r0, [r7, #32]
 80196e8:	f7ff ff0e 	bl	8019508 <ip_reass_free_complete_datagram>
 80196ec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80196ee:	697a      	ldr	r2, [r7, #20]
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	4413      	add	r3, r2
 80196f4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80196f6:	697a      	ldr	r2, [r7, #20]
 80196f8:	683b      	ldr	r3, [r7, #0]
 80196fa:	429a      	cmp	r2, r3
 80196fc:	da02      	bge.n	8019704 <ip_reass_remove_oldest_datagram+0xb4>
 80196fe:	693b      	ldr	r3, [r7, #16]
 8019700:	2b01      	cmp	r3, #1
 8019702:	dcac      	bgt.n	801965e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019704:	697b      	ldr	r3, [r7, #20]
}
 8019706:	4618      	mov	r0, r3
 8019708:	3728      	adds	r7, #40	; 0x28
 801970a:	46bd      	mov	sp, r7
 801970c:	bd80      	pop	{r7, pc}
 801970e:	bf00      	nop
 8019710:	2000502c 	.word	0x2000502c

08019714 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019714:	b580      	push	{r7, lr}
 8019716:	b084      	sub	sp, #16
 8019718:	af00      	add	r7, sp, #0
 801971a:	6078      	str	r0, [r7, #4]
 801971c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801971e:	2004      	movs	r0, #4
 8019720:	f7f6 fad6 	bl	800fcd0 <memp_malloc>
 8019724:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d110      	bne.n	801974e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801972c:	6839      	ldr	r1, [r7, #0]
 801972e:	6878      	ldr	r0, [r7, #4]
 8019730:	f7ff ff8e 	bl	8019650 <ip_reass_remove_oldest_datagram>
 8019734:	4602      	mov	r2, r0
 8019736:	683b      	ldr	r3, [r7, #0]
 8019738:	4293      	cmp	r3, r2
 801973a:	dc03      	bgt.n	8019744 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801973c:	2004      	movs	r0, #4
 801973e:	f7f6 fac7 	bl	800fcd0 <memp_malloc>
 8019742:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d101      	bne.n	801974e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801974a:	2300      	movs	r3, #0
 801974c:	e016      	b.n	801977c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801974e:	2220      	movs	r2, #32
 8019750:	2100      	movs	r1, #0
 8019752:	68f8      	ldr	r0, [r7, #12]
 8019754:	f001 f8f0 	bl	801a938 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	220f      	movs	r2, #15
 801975c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801975e:	4b09      	ldr	r3, [pc, #36]	; (8019784 <ip_reass_enqueue_new_datagram+0x70>)
 8019760:	681a      	ldr	r2, [r3, #0]
 8019762:	68fb      	ldr	r3, [r7, #12]
 8019764:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019766:	4a07      	ldr	r2, [pc, #28]	; (8019784 <ip_reass_enqueue_new_datagram+0x70>)
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	3308      	adds	r3, #8
 8019770:	2214      	movs	r2, #20
 8019772:	6879      	ldr	r1, [r7, #4]
 8019774:	4618      	mov	r0, r3
 8019776:	f001 f8b7 	bl	801a8e8 <memcpy>
  return ipr;
 801977a:	68fb      	ldr	r3, [r7, #12]
}
 801977c:	4618      	mov	r0, r3
 801977e:	3710      	adds	r7, #16
 8019780:	46bd      	mov	sp, r7
 8019782:	bd80      	pop	{r7, pc}
 8019784:	2000502c 	.word	0x2000502c

08019788 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019788:	b580      	push	{r7, lr}
 801978a:	b082      	sub	sp, #8
 801978c:	af00      	add	r7, sp, #0
 801978e:	6078      	str	r0, [r7, #4]
 8019790:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019792:	4b10      	ldr	r3, [pc, #64]	; (80197d4 <ip_reass_dequeue_datagram+0x4c>)
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	687a      	ldr	r2, [r7, #4]
 8019798:	429a      	cmp	r2, r3
 801979a:	d104      	bne.n	80197a6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	4a0c      	ldr	r2, [pc, #48]	; (80197d4 <ip_reass_dequeue_datagram+0x4c>)
 80197a2:	6013      	str	r3, [r2, #0]
 80197a4:	e00d      	b.n	80197c2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80197a6:	683b      	ldr	r3, [r7, #0]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d106      	bne.n	80197ba <ip_reass_dequeue_datagram+0x32>
 80197ac:	4b0a      	ldr	r3, [pc, #40]	; (80197d8 <ip_reass_dequeue_datagram+0x50>)
 80197ae:	f240 1245 	movw	r2, #325	; 0x145
 80197b2:	490a      	ldr	r1, [pc, #40]	; (80197dc <ip_reass_dequeue_datagram+0x54>)
 80197b4:	480a      	ldr	r0, [pc, #40]	; (80197e0 <ip_reass_dequeue_datagram+0x58>)
 80197b6:	f001 fb45 	bl	801ae44 <printf>
    prev->next = ipr->next;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	681a      	ldr	r2, [r3, #0]
 80197be:	683b      	ldr	r3, [r7, #0]
 80197c0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80197c2:	6879      	ldr	r1, [r7, #4]
 80197c4:	2004      	movs	r0, #4
 80197c6:	f7f6 fad5 	bl	800fd74 <memp_free>
}
 80197ca:	bf00      	nop
 80197cc:	3708      	adds	r7, #8
 80197ce:	46bd      	mov	sp, r7
 80197d0:	bd80      	pop	{r7, pc}
 80197d2:	bf00      	nop
 80197d4:	2000502c 	.word	0x2000502c
 80197d8:	08027230 	.word	0x08027230
 80197dc:	080272f8 	.word	0x080272f8
 80197e0:	08027278 	.word	0x08027278

080197e4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b08c      	sub	sp, #48	; 0x30
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	60f8      	str	r0, [r7, #12]
 80197ec:	60b9      	str	r1, [r7, #8]
 80197ee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80197f0:	2300      	movs	r3, #0
 80197f2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80197f4:	2301      	movs	r3, #1
 80197f6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80197f8:	68bb      	ldr	r3, [r7, #8]
 80197fa:	685b      	ldr	r3, [r3, #4]
 80197fc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80197fe:	69fb      	ldr	r3, [r7, #28]
 8019800:	885b      	ldrh	r3, [r3, #2]
 8019802:	b29b      	uxth	r3, r3
 8019804:	4618      	mov	r0, r3
 8019806:	f7f5 fd77 	bl	800f2f8 <lwip_htons>
 801980a:	4603      	mov	r3, r0
 801980c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801980e:	69fb      	ldr	r3, [r7, #28]
 8019810:	781b      	ldrb	r3, [r3, #0]
 8019812:	f003 030f 	and.w	r3, r3, #15
 8019816:	b2db      	uxtb	r3, r3
 8019818:	009b      	lsls	r3, r3, #2
 801981a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801981c:	7e7b      	ldrb	r3, [r7, #25]
 801981e:	b29b      	uxth	r3, r3
 8019820:	8b7a      	ldrh	r2, [r7, #26]
 8019822:	429a      	cmp	r2, r3
 8019824:	d202      	bcs.n	801982c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019826:	f04f 33ff 	mov.w	r3, #4294967295
 801982a:	e135      	b.n	8019a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801982c:	7e7b      	ldrb	r3, [r7, #25]
 801982e:	b29b      	uxth	r3, r3
 8019830:	8b7a      	ldrh	r2, [r7, #26]
 8019832:	1ad3      	subs	r3, r2, r3
 8019834:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019836:	69fb      	ldr	r3, [r7, #28]
 8019838:	88db      	ldrh	r3, [r3, #6]
 801983a:	b29b      	uxth	r3, r3
 801983c:	4618      	mov	r0, r3
 801983e:	f7f5 fd5b 	bl	800f2f8 <lwip_htons>
 8019842:	4603      	mov	r3, r0
 8019844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019848:	b29b      	uxth	r3, r3
 801984a:	00db      	lsls	r3, r3, #3
 801984c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801984e:	68bb      	ldr	r3, [r7, #8]
 8019850:	685b      	ldr	r3, [r3, #4]
 8019852:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019856:	2200      	movs	r2, #0
 8019858:	701a      	strb	r2, [r3, #0]
 801985a:	2200      	movs	r2, #0
 801985c:	705a      	strb	r2, [r3, #1]
 801985e:	2200      	movs	r2, #0
 8019860:	709a      	strb	r2, [r3, #2]
 8019862:	2200      	movs	r2, #0
 8019864:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019868:	8afa      	ldrh	r2, [r7, #22]
 801986a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801986c:	8afa      	ldrh	r2, [r7, #22]
 801986e:	8b7b      	ldrh	r3, [r7, #26]
 8019870:	4413      	add	r3, r2
 8019872:	b29a      	uxth	r2, r3
 8019874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019876:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801987a:	88db      	ldrh	r3, [r3, #6]
 801987c:	b29b      	uxth	r3, r3
 801987e:	8afa      	ldrh	r2, [r7, #22]
 8019880:	429a      	cmp	r2, r3
 8019882:	d902      	bls.n	801988a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019884:	f04f 33ff 	mov.w	r3, #4294967295
 8019888:	e106      	b.n	8019a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	685b      	ldr	r3, [r3, #4]
 801988e:	627b      	str	r3, [r7, #36]	; 0x24
 8019890:	e068      	b.n	8019964 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019894:	685b      	ldr	r3, [r3, #4]
 8019896:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801989a:	889b      	ldrh	r3, [r3, #4]
 801989c:	b29a      	uxth	r2, r3
 801989e:	693b      	ldr	r3, [r7, #16]
 80198a0:	889b      	ldrh	r3, [r3, #4]
 80198a2:	b29b      	uxth	r3, r3
 80198a4:	429a      	cmp	r2, r3
 80198a6:	d235      	bcs.n	8019914 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80198a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80198ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d020      	beq.n	80198f6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80198b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198b6:	889b      	ldrh	r3, [r3, #4]
 80198b8:	b29a      	uxth	r2, r3
 80198ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198bc:	88db      	ldrh	r3, [r3, #6]
 80198be:	b29b      	uxth	r3, r3
 80198c0:	429a      	cmp	r2, r3
 80198c2:	d307      	bcc.n	80198d4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80198c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198c6:	88db      	ldrh	r3, [r3, #6]
 80198c8:	b29a      	uxth	r2, r3
 80198ca:	693b      	ldr	r3, [r7, #16]
 80198cc:	889b      	ldrh	r3, [r3, #4]
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	429a      	cmp	r2, r3
 80198d2:	d902      	bls.n	80198da <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80198d4:	f04f 33ff 	mov.w	r3, #4294967295
 80198d8:	e0de      	b.n	8019a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80198da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198dc:	68ba      	ldr	r2, [r7, #8]
 80198de:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80198e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198e2:	88db      	ldrh	r3, [r3, #6]
 80198e4:	b29a      	uxth	r2, r3
 80198e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198e8:	889b      	ldrh	r3, [r3, #4]
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	429a      	cmp	r2, r3
 80198ee:	d03d      	beq.n	801996c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80198f0:	2300      	movs	r3, #0
 80198f2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80198f4:	e03a      	b.n	801996c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80198f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198f8:	88db      	ldrh	r3, [r3, #6]
 80198fa:	b29a      	uxth	r2, r3
 80198fc:	693b      	ldr	r3, [r7, #16]
 80198fe:	889b      	ldrh	r3, [r3, #4]
 8019900:	b29b      	uxth	r3, r3
 8019902:	429a      	cmp	r2, r3
 8019904:	d902      	bls.n	801990c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019906:	f04f 33ff 	mov.w	r3, #4294967295
 801990a:	e0c5      	b.n	8019a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	68ba      	ldr	r2, [r7, #8]
 8019910:	605a      	str	r2, [r3, #4]
      break;
 8019912:	e02b      	b.n	801996c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019916:	889b      	ldrh	r3, [r3, #4]
 8019918:	b29a      	uxth	r2, r3
 801991a:	693b      	ldr	r3, [r7, #16]
 801991c:	889b      	ldrh	r3, [r3, #4]
 801991e:	b29b      	uxth	r3, r3
 8019920:	429a      	cmp	r2, r3
 8019922:	d102      	bne.n	801992a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019924:	f04f 33ff 	mov.w	r3, #4294967295
 8019928:	e0b6      	b.n	8019a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801992c:	889b      	ldrh	r3, [r3, #4]
 801992e:	b29a      	uxth	r2, r3
 8019930:	693b      	ldr	r3, [r7, #16]
 8019932:	88db      	ldrh	r3, [r3, #6]
 8019934:	b29b      	uxth	r3, r3
 8019936:	429a      	cmp	r2, r3
 8019938:	d202      	bcs.n	8019940 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801993a:	f04f 33ff 	mov.w	r3, #4294967295
 801993e:	e0ab      	b.n	8019a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019942:	2b00      	cmp	r3, #0
 8019944:	d009      	beq.n	801995a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019948:	88db      	ldrh	r3, [r3, #6]
 801994a:	b29a      	uxth	r2, r3
 801994c:	693b      	ldr	r3, [r7, #16]
 801994e:	889b      	ldrh	r3, [r3, #4]
 8019950:	b29b      	uxth	r3, r3
 8019952:	429a      	cmp	r2, r3
 8019954:	d001      	beq.n	801995a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019956:	2300      	movs	r3, #0
 8019958:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801995a:	693b      	ldr	r3, [r7, #16]
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019960:	693b      	ldr	r3, [r7, #16]
 8019962:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019966:	2b00      	cmp	r3, #0
 8019968:	d193      	bne.n	8019892 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801996a:	e000      	b.n	801996e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801996c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019970:	2b00      	cmp	r3, #0
 8019972:	d12d      	bne.n	80199d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019976:	2b00      	cmp	r3, #0
 8019978:	d01c      	beq.n	80199b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801997c:	88db      	ldrh	r3, [r3, #6]
 801997e:	b29a      	uxth	r2, r3
 8019980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019982:	889b      	ldrh	r3, [r3, #4]
 8019984:	b29b      	uxth	r3, r3
 8019986:	429a      	cmp	r2, r3
 8019988:	d906      	bls.n	8019998 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801998a:	4b45      	ldr	r3, [pc, #276]	; (8019aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801998c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019990:	4944      	ldr	r1, [pc, #272]	; (8019aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019992:	4845      	ldr	r0, [pc, #276]	; (8019aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019994:	f001 fa56 	bl	801ae44 <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801999a:	68ba      	ldr	r2, [r7, #8]
 801999c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199a0:	88db      	ldrh	r3, [r3, #6]
 80199a2:	b29a      	uxth	r2, r3
 80199a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199a6:	889b      	ldrh	r3, [r3, #4]
 80199a8:	b29b      	uxth	r3, r3
 80199aa:	429a      	cmp	r2, r3
 80199ac:	d010      	beq.n	80199d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80199ae:	2300      	movs	r3, #0
 80199b0:	623b      	str	r3, [r7, #32]
 80199b2:	e00d      	b.n	80199d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	685b      	ldr	r3, [r3, #4]
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d006      	beq.n	80199ca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80199bc:	4b38      	ldr	r3, [pc, #224]	; (8019aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80199be:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80199c2:	493a      	ldr	r1, [pc, #232]	; (8019aac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80199c4:	4838      	ldr	r0, [pc, #224]	; (8019aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80199c6:	f001 fa3d 	bl	801ae44 <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	68ba      	ldr	r2, [r7, #8]
 80199ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d105      	bne.n	80199e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	7f9b      	ldrb	r3, [r3, #30]
 80199da:	f003 0301 	and.w	r3, r3, #1
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d059      	beq.n	8019a96 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80199e2:	6a3b      	ldr	r3, [r7, #32]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d04f      	beq.n	8019a88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	685b      	ldr	r3, [r3, #4]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d006      	beq.n	80199fe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	685b      	ldr	r3, [r3, #4]
 80199f4:	685b      	ldr	r3, [r3, #4]
 80199f6:	889b      	ldrh	r3, [r3, #4]
 80199f8:	b29b      	uxth	r3, r3
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d002      	beq.n	8019a04 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80199fe:	2300      	movs	r3, #0
 8019a00:	623b      	str	r3, [r7, #32]
 8019a02:	e041      	b.n	8019a88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a06:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019a0e:	e012      	b.n	8019a36 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a12:	685b      	ldr	r3, [r3, #4]
 8019a14:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a18:	88db      	ldrh	r3, [r3, #6]
 8019a1a:	b29a      	uxth	r2, r3
 8019a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a1e:	889b      	ldrh	r3, [r3, #4]
 8019a20:	b29b      	uxth	r3, r3
 8019a22:	429a      	cmp	r2, r3
 8019a24:	d002      	beq.n	8019a2c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019a26:	2300      	movs	r3, #0
 8019a28:	623b      	str	r3, [r7, #32]
            break;
 8019a2a:	e007      	b.n	8019a3c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a2e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d1e9      	bne.n	8019a10 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019a3c:	6a3b      	ldr	r3, [r7, #32]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d022      	beq.n	8019a88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	685b      	ldr	r3, [r3, #4]
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d106      	bne.n	8019a58 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019a4a:	4b15      	ldr	r3, [pc, #84]	; (8019aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019a4c:	f240 12df 	movw	r2, #479	; 0x1df
 8019a50:	4917      	ldr	r1, [pc, #92]	; (8019ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019a52:	4815      	ldr	r0, [pc, #84]	; (8019aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019a54:	f001 f9f6 	bl	801ae44 <printf>
          LWIP_ASSERT("sanity check",
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	685b      	ldr	r3, [r3, #4]
 8019a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019a60:	429a      	cmp	r2, r3
 8019a62:	d106      	bne.n	8019a72 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019a64:	4b0e      	ldr	r3, [pc, #56]	; (8019aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019a66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019a6a:	4911      	ldr	r1, [pc, #68]	; (8019ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019a6c:	480e      	ldr	r0, [pc, #56]	; (8019aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019a6e:	f001 f9e9 	bl	801ae44 <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d006      	beq.n	8019a88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019a7a:	4b09      	ldr	r3, [pc, #36]	; (8019aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019a7c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019a80:	490c      	ldr	r1, [pc, #48]	; (8019ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019a82:	4809      	ldr	r0, [pc, #36]	; (8019aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019a84:	f001 f9de 	bl	801ae44 <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019a88:	6a3b      	ldr	r3, [r7, #32]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	bf14      	ite	ne
 8019a8e:	2301      	movne	r3, #1
 8019a90:	2300      	moveq	r3, #0
 8019a92:	b2db      	uxtb	r3, r3
 8019a94:	e000      	b.n	8019a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019a96:	2300      	movs	r3, #0
}
 8019a98:	4618      	mov	r0, r3
 8019a9a:	3730      	adds	r7, #48	; 0x30
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	bd80      	pop	{r7, pc}
 8019aa0:	08027230 	.word	0x08027230
 8019aa4:	08027314 	.word	0x08027314
 8019aa8:	08027278 	.word	0x08027278
 8019aac:	08027334 	.word	0x08027334
 8019ab0:	0802736c 	.word	0x0802736c
 8019ab4:	0802737c 	.word	0x0802737c

08019ab8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019ab8:	b580      	push	{r7, lr}
 8019aba:	b08e      	sub	sp, #56	; 0x38
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	685b      	ldr	r3, [r3, #4]
 8019ac4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ac8:	781b      	ldrb	r3, [r3, #0]
 8019aca:	f003 030f 	and.w	r3, r3, #15
 8019ace:	b2db      	uxtb	r3, r3
 8019ad0:	009b      	lsls	r3, r3, #2
 8019ad2:	b2db      	uxtb	r3, r3
 8019ad4:	2b14      	cmp	r3, #20
 8019ad6:	f040 8167 	bne.w	8019da8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019adc:	88db      	ldrh	r3, [r3, #6]
 8019ade:	b29b      	uxth	r3, r3
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	f7f5 fc09 	bl	800f2f8 <lwip_htons>
 8019ae6:	4603      	mov	r3, r0
 8019ae8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019aec:	b29b      	uxth	r3, r3
 8019aee:	00db      	lsls	r3, r3, #3
 8019af0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019af4:	885b      	ldrh	r3, [r3, #2]
 8019af6:	b29b      	uxth	r3, r3
 8019af8:	4618      	mov	r0, r3
 8019afa:	f7f5 fbfd 	bl	800f2f8 <lwip_htons>
 8019afe:	4603      	mov	r3, r0
 8019b00:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b04:	781b      	ldrb	r3, [r3, #0]
 8019b06:	f003 030f 	and.w	r3, r3, #15
 8019b0a:	b2db      	uxtb	r3, r3
 8019b0c:	009b      	lsls	r3, r3, #2
 8019b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019b16:	b29b      	uxth	r3, r3
 8019b18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019b1a:	429a      	cmp	r2, r3
 8019b1c:	f0c0 8146 	bcc.w	8019dac <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019b24:	b29b      	uxth	r3, r3
 8019b26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019b28:	1ad3      	subs	r3, r2, r3
 8019b2a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019b2c:	6878      	ldr	r0, [r7, #4]
 8019b2e:	f7f6 ffdb 	bl	8010ae8 <pbuf_clen>
 8019b32:	4603      	mov	r3, r0
 8019b34:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8019b36:	4b9f      	ldr	r3, [pc, #636]	; (8019db4 <ip4_reass+0x2fc>)
 8019b38:	881b      	ldrh	r3, [r3, #0]
 8019b3a:	461a      	mov	r2, r3
 8019b3c:	8c3b      	ldrh	r3, [r7, #32]
 8019b3e:	4413      	add	r3, r2
 8019b40:	2b0a      	cmp	r3, #10
 8019b42:	dd10      	ble.n	8019b66 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019b44:	8c3b      	ldrh	r3, [r7, #32]
 8019b46:	4619      	mov	r1, r3
 8019b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019b4a:	f7ff fd81 	bl	8019650 <ip_reass_remove_oldest_datagram>
 8019b4e:	4603      	mov	r3, r0
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	f000 812d 	beq.w	8019db0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8019b56:	4b97      	ldr	r3, [pc, #604]	; (8019db4 <ip4_reass+0x2fc>)
 8019b58:	881b      	ldrh	r3, [r3, #0]
 8019b5a:	461a      	mov	r2, r3
 8019b5c:	8c3b      	ldrh	r3, [r7, #32]
 8019b5e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019b60:	2b0a      	cmp	r3, #10
 8019b62:	f300 8125 	bgt.w	8019db0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019b66:	4b94      	ldr	r3, [pc, #592]	; (8019db8 <ip4_reass+0x300>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8019b6c:	e015      	b.n	8019b9a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b70:	695a      	ldr	r2, [r3, #20]
 8019b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b74:	68db      	ldr	r3, [r3, #12]
 8019b76:	429a      	cmp	r2, r3
 8019b78:	d10c      	bne.n	8019b94 <ip4_reass+0xdc>
 8019b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b7c:	699a      	ldr	r2, [r3, #24]
 8019b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b80:	691b      	ldr	r3, [r3, #16]
 8019b82:	429a      	cmp	r2, r3
 8019b84:	d106      	bne.n	8019b94 <ip4_reass+0xdc>
 8019b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b88:	899a      	ldrh	r2, [r3, #12]
 8019b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b8c:	889b      	ldrh	r3, [r3, #4]
 8019b8e:	b29b      	uxth	r3, r3
 8019b90:	429a      	cmp	r2, r3
 8019b92:	d006      	beq.n	8019ba2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	633b      	str	r3, [r7, #48]	; 0x30
 8019b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d1e6      	bne.n	8019b6e <ip4_reass+0xb6>
 8019ba0:	e000      	b.n	8019ba4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019ba2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d109      	bne.n	8019bbe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019baa:	8c3b      	ldrh	r3, [r7, #32]
 8019bac:	4619      	mov	r1, r3
 8019bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019bb0:	f7ff fdb0 	bl	8019714 <ip_reass_enqueue_new_datagram>
 8019bb4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d11c      	bne.n	8019bf6 <ip4_reass+0x13e>
      goto nullreturn;
 8019bbc:	e109      	b.n	8019dd2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bc0:	88db      	ldrh	r3, [r3, #6]
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	f7f5 fb97 	bl	800f2f8 <lwip_htons>
 8019bca:	4603      	mov	r3, r0
 8019bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d110      	bne.n	8019bf6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bd6:	89db      	ldrh	r3, [r3, #14]
 8019bd8:	4618      	mov	r0, r3
 8019bda:	f7f5 fb8d 	bl	800f2f8 <lwip_htons>
 8019bde:	4603      	mov	r3, r0
 8019be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d006      	beq.n	8019bf6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bea:	3308      	adds	r3, #8
 8019bec:	2214      	movs	r2, #20
 8019bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	f000 fe79 	bl	801a8e8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bf8:	88db      	ldrh	r3, [r3, #6]
 8019bfa:	b29b      	uxth	r3, r3
 8019bfc:	f003 0320 	and.w	r3, r3, #32
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	bf0c      	ite	eq
 8019c04:	2301      	moveq	r3, #1
 8019c06:	2300      	movne	r3, #0
 8019c08:	b2db      	uxtb	r3, r3
 8019c0a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019c0c:	69fb      	ldr	r3, [r7, #28]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d00e      	beq.n	8019c30 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019c12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019c16:	4413      	add	r3, r2
 8019c18:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019c1a:	8b7a      	ldrh	r2, [r7, #26]
 8019c1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019c1e:	429a      	cmp	r2, r3
 8019c20:	f0c0 80a0 	bcc.w	8019d64 <ip4_reass+0x2ac>
 8019c24:	8b7b      	ldrh	r3, [r7, #26]
 8019c26:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019c2a:	4293      	cmp	r3, r2
 8019c2c:	f200 809a 	bhi.w	8019d64 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019c30:	69fa      	ldr	r2, [r7, #28]
 8019c32:	6879      	ldr	r1, [r7, #4]
 8019c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019c36:	f7ff fdd5 	bl	80197e4 <ip_reass_chain_frag_into_datagram_and_validate>
 8019c3a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019c3c:	697b      	ldr	r3, [r7, #20]
 8019c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c42:	f000 8091 	beq.w	8019d68 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019c46:	4b5b      	ldr	r3, [pc, #364]	; (8019db4 <ip4_reass+0x2fc>)
 8019c48:	881a      	ldrh	r2, [r3, #0]
 8019c4a:	8c3b      	ldrh	r3, [r7, #32]
 8019c4c:	4413      	add	r3, r2
 8019c4e:	b29a      	uxth	r2, r3
 8019c50:	4b58      	ldr	r3, [pc, #352]	; (8019db4 <ip4_reass+0x2fc>)
 8019c52:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019c54:	69fb      	ldr	r3, [r7, #28]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d00d      	beq.n	8019c76 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019c5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019c5e:	4413      	add	r3, r2
 8019c60:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c64:	8a7a      	ldrh	r2, [r7, #18]
 8019c66:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c6a:	7f9b      	ldrb	r3, [r3, #30]
 8019c6c:	f043 0301 	orr.w	r3, r3, #1
 8019c70:	b2da      	uxtb	r2, r3
 8019c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c74:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	2b01      	cmp	r3, #1
 8019c7a:	d171      	bne.n	8019d60 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c7e:	8b9b      	ldrh	r3, [r3, #28]
 8019c80:	3314      	adds	r3, #20
 8019c82:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c86:	685b      	ldr	r3, [r3, #4]
 8019c88:	685b      	ldr	r3, [r3, #4]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c90:	685b      	ldr	r3, [r3, #4]
 8019c92:	685b      	ldr	r3, [r3, #4]
 8019c94:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c98:	3308      	adds	r3, #8
 8019c9a:	2214      	movs	r2, #20
 8019c9c:	4619      	mov	r1, r3
 8019c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ca0:	f000 fe22 	bl	801a8e8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019ca4:	8a3b      	ldrh	r3, [r7, #16]
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	f7f5 fb26 	bl	800f2f8 <lwip_htons>
 8019cac:	4603      	mov	r3, r0
 8019cae:	461a      	mov	r2, r3
 8019cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb6:	2200      	movs	r2, #0
 8019cb8:	719a      	strb	r2, [r3, #6]
 8019cba:	2200      	movs	r2, #0
 8019cbc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	729a      	strb	r2, [r3, #10]
 8019cc4:	2200      	movs	r2, #0
 8019cc6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cca:	685b      	ldr	r3, [r3, #4]
 8019ccc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019cce:	e00d      	b.n	8019cec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019cd2:	685b      	ldr	r3, [r3, #4]
 8019cd4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019cd6:	2114      	movs	r1, #20
 8019cd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019cda:	f7f6 fdf1 	bl	80108c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019cde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019ce0:	6878      	ldr	r0, [r7, #4]
 8019ce2:	f7f6 ff41 	bl	8010b68 <pbuf_cat>
      r = iprh->next_pbuf;
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8019cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d1ee      	bne.n	8019cd0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019cf2:	4b31      	ldr	r3, [pc, #196]	; (8019db8 <ip4_reass+0x300>)
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019cf8:	429a      	cmp	r2, r3
 8019cfa:	d102      	bne.n	8019d02 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d00:	e010      	b.n	8019d24 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019d02:	4b2d      	ldr	r3, [pc, #180]	; (8019db8 <ip4_reass+0x300>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d08:	e007      	b.n	8019d1a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d10:	429a      	cmp	r2, r3
 8019d12:	d006      	beq.n	8019d22 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d1f4      	bne.n	8019d0a <ip4_reass+0x252>
 8019d20:	e000      	b.n	8019d24 <ip4_reass+0x26c>
          break;
 8019d22:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019d24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019d26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019d28:	f7ff fd2e 	bl	8019788 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019d2c:	6878      	ldr	r0, [r7, #4]
 8019d2e:	f7f6 fedb 	bl	8010ae8 <pbuf_clen>
 8019d32:	4603      	mov	r3, r0
 8019d34:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019d36:	4b1f      	ldr	r3, [pc, #124]	; (8019db4 <ip4_reass+0x2fc>)
 8019d38:	881b      	ldrh	r3, [r3, #0]
 8019d3a:	8c3a      	ldrh	r2, [r7, #32]
 8019d3c:	429a      	cmp	r2, r3
 8019d3e:	d906      	bls.n	8019d4e <ip4_reass+0x296>
 8019d40:	4b1e      	ldr	r3, [pc, #120]	; (8019dbc <ip4_reass+0x304>)
 8019d42:	f240 229b 	movw	r2, #667	; 0x29b
 8019d46:	491e      	ldr	r1, [pc, #120]	; (8019dc0 <ip4_reass+0x308>)
 8019d48:	481e      	ldr	r0, [pc, #120]	; (8019dc4 <ip4_reass+0x30c>)
 8019d4a:	f001 f87b 	bl	801ae44 <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019d4e:	4b19      	ldr	r3, [pc, #100]	; (8019db4 <ip4_reass+0x2fc>)
 8019d50:	881a      	ldrh	r2, [r3, #0]
 8019d52:	8c3b      	ldrh	r3, [r7, #32]
 8019d54:	1ad3      	subs	r3, r2, r3
 8019d56:	b29a      	uxth	r2, r3
 8019d58:	4b16      	ldr	r3, [pc, #88]	; (8019db4 <ip4_reass+0x2fc>)
 8019d5a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	e03c      	b.n	8019dda <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019d60:	2300      	movs	r3, #0
 8019d62:	e03a      	b.n	8019dda <ip4_reass+0x322>
      goto nullreturn_ipr;
 8019d64:	bf00      	nop
 8019d66:	e000      	b.n	8019d6a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8019d68:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d106      	bne.n	8019d7e <ip4_reass+0x2c6>
 8019d70:	4b12      	ldr	r3, [pc, #72]	; (8019dbc <ip4_reass+0x304>)
 8019d72:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019d76:	4914      	ldr	r1, [pc, #80]	; (8019dc8 <ip4_reass+0x310>)
 8019d78:	4812      	ldr	r0, [pc, #72]	; (8019dc4 <ip4_reass+0x30c>)
 8019d7a:	f001 f863 	bl	801ae44 <printf>
  if (ipr->p == NULL) {
 8019d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d80:	685b      	ldr	r3, [r3, #4]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d124      	bne.n	8019dd0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019d86:	4b0c      	ldr	r3, [pc, #48]	; (8019db8 <ip4_reass+0x300>)
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d8c:	429a      	cmp	r2, r3
 8019d8e:	d006      	beq.n	8019d9e <ip4_reass+0x2e6>
 8019d90:	4b0a      	ldr	r3, [pc, #40]	; (8019dbc <ip4_reass+0x304>)
 8019d92:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019d96:	490d      	ldr	r1, [pc, #52]	; (8019dcc <ip4_reass+0x314>)
 8019d98:	480a      	ldr	r0, [pc, #40]	; (8019dc4 <ip4_reass+0x30c>)
 8019d9a:	f001 f853 	bl	801ae44 <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019d9e:	2100      	movs	r1, #0
 8019da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019da2:	f7ff fcf1 	bl	8019788 <ip_reass_dequeue_datagram>
 8019da6:	e014      	b.n	8019dd2 <ip4_reass+0x31a>
    goto nullreturn;
 8019da8:	bf00      	nop
 8019daa:	e012      	b.n	8019dd2 <ip4_reass+0x31a>
    goto nullreturn;
 8019dac:	bf00      	nop
 8019dae:	e010      	b.n	8019dd2 <ip4_reass+0x31a>
      goto nullreturn;
 8019db0:	bf00      	nop
 8019db2:	e00e      	b.n	8019dd2 <ip4_reass+0x31a>
 8019db4:	20005030 	.word	0x20005030
 8019db8:	2000502c 	.word	0x2000502c
 8019dbc:	08027230 	.word	0x08027230
 8019dc0:	080273a0 	.word	0x080273a0
 8019dc4:	08027278 	.word	0x08027278
 8019dc8:	080273bc 	.word	0x080273bc
 8019dcc:	080273c8 	.word	0x080273c8
  }

nullreturn:
 8019dd0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019dd2:	6878      	ldr	r0, [r7, #4]
 8019dd4:	f7f6 fdfa 	bl	80109cc <pbuf_free>
  return NULL;
 8019dd8:	2300      	movs	r3, #0
}
 8019dda:	4618      	mov	r0, r3
 8019ddc:	3738      	adds	r7, #56	; 0x38
 8019dde:	46bd      	mov	sp, r7
 8019de0:	bd80      	pop	{r7, pc}
 8019de2:	bf00      	nop

08019de4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019de8:	2005      	movs	r0, #5
 8019dea:	f7f5 ff71 	bl	800fcd0 <memp_malloc>
 8019dee:	4603      	mov	r3, r0
}
 8019df0:	4618      	mov	r0, r3
 8019df2:	bd80      	pop	{r7, pc}

08019df4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b082      	sub	sp, #8
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d106      	bne.n	8019e10 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019e02:	4b07      	ldr	r3, [pc, #28]	; (8019e20 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019e04:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019e08:	4906      	ldr	r1, [pc, #24]	; (8019e24 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019e0a:	4807      	ldr	r0, [pc, #28]	; (8019e28 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019e0c:	f001 f81a 	bl	801ae44 <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019e10:	6879      	ldr	r1, [r7, #4]
 8019e12:	2005      	movs	r0, #5
 8019e14:	f7f5 ffae 	bl	800fd74 <memp_free>
}
 8019e18:	bf00      	nop
 8019e1a:	3708      	adds	r7, #8
 8019e1c:	46bd      	mov	sp, r7
 8019e1e:	bd80      	pop	{r7, pc}
 8019e20:	08027230 	.word	0x08027230
 8019e24:	080273e8 	.word	0x080273e8
 8019e28:	08027278 	.word	0x08027278

08019e2c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b084      	sub	sp, #16
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d106      	bne.n	8019e4c <ipfrag_free_pbuf_custom+0x20>
 8019e3e:	4b11      	ldr	r3, [pc, #68]	; (8019e84 <ipfrag_free_pbuf_custom+0x58>)
 8019e40:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019e44:	4910      	ldr	r1, [pc, #64]	; (8019e88 <ipfrag_free_pbuf_custom+0x5c>)
 8019e46:	4811      	ldr	r0, [pc, #68]	; (8019e8c <ipfrag_free_pbuf_custom+0x60>)
 8019e48:	f000 fffc 	bl	801ae44 <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019e4c:	68fa      	ldr	r2, [r7, #12]
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	429a      	cmp	r2, r3
 8019e52:	d006      	beq.n	8019e62 <ipfrag_free_pbuf_custom+0x36>
 8019e54:	4b0b      	ldr	r3, [pc, #44]	; (8019e84 <ipfrag_free_pbuf_custom+0x58>)
 8019e56:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019e5a:	490d      	ldr	r1, [pc, #52]	; (8019e90 <ipfrag_free_pbuf_custom+0x64>)
 8019e5c:	480b      	ldr	r0, [pc, #44]	; (8019e8c <ipfrag_free_pbuf_custom+0x60>)
 8019e5e:	f000 fff1 	bl	801ae44 <printf>
  if (pcr->original != NULL) {
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	695b      	ldr	r3, [r3, #20]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d004      	beq.n	8019e74 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	695b      	ldr	r3, [r3, #20]
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f7f6 fdac 	bl	80109cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019e74:	68f8      	ldr	r0, [r7, #12]
 8019e76:	f7ff ffbd 	bl	8019df4 <ip_frag_free_pbuf_custom_ref>
}
 8019e7a:	bf00      	nop
 8019e7c:	3710      	adds	r7, #16
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	bd80      	pop	{r7, pc}
 8019e82:	bf00      	nop
 8019e84:	08027230 	.word	0x08027230
 8019e88:	080273f4 	.word	0x080273f4
 8019e8c:	08027278 	.word	0x08027278
 8019e90:	08027400 	.word	0x08027400

08019e94 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b094      	sub	sp, #80	; 0x50
 8019e98:	af02      	add	r7, sp, #8
 8019e9a:	60f8      	str	r0, [r7, #12]
 8019e9c:	60b9      	str	r1, [r7, #8]
 8019e9e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019ea6:	68bb      	ldr	r3, [r7, #8]
 8019ea8:	8c1b      	ldrh	r3, [r3, #32]
 8019eaa:	3b14      	subs	r3, #20
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	da00      	bge.n	8019eb2 <ip4_frag+0x1e>
 8019eb0:	3307      	adds	r3, #7
 8019eb2:	10db      	asrs	r3, r3, #3
 8019eb4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019eb6:	2314      	movs	r3, #20
 8019eb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	685b      	ldr	r3, [r3, #4]
 8019ebe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ec2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ec6:	781b      	ldrb	r3, [r3, #0]
 8019ec8:	f003 030f 	and.w	r3, r3, #15
 8019ecc:	b2db      	uxtb	r3, r3
 8019ece:	009b      	lsls	r3, r3, #2
 8019ed0:	b2db      	uxtb	r3, r3
 8019ed2:	2b14      	cmp	r3, #20
 8019ed4:	d002      	beq.n	8019edc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019ed6:	f06f 0305 	mvn.w	r3, #5
 8019eda:	e110      	b.n	801a0fe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	895b      	ldrh	r3, [r3, #10]
 8019ee0:	2b13      	cmp	r3, #19
 8019ee2:	d809      	bhi.n	8019ef8 <ip4_frag+0x64>
 8019ee4:	4b88      	ldr	r3, [pc, #544]	; (801a108 <ip4_frag+0x274>)
 8019ee6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019eea:	4988      	ldr	r1, [pc, #544]	; (801a10c <ip4_frag+0x278>)
 8019eec:	4888      	ldr	r0, [pc, #544]	; (801a110 <ip4_frag+0x27c>)
 8019eee:	f000 ffa9 	bl	801ae44 <printf>
 8019ef2:	f06f 0305 	mvn.w	r3, #5
 8019ef6:	e102      	b.n	801a0fe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019efa:	88db      	ldrh	r3, [r3, #6]
 8019efc:	b29b      	uxth	r3, r3
 8019efe:	4618      	mov	r0, r3
 8019f00:	f7f5 f9fa 	bl	800f2f8 <lwip_htons>
 8019f04:	4603      	mov	r3, r0
 8019f06:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019f08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019f0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019f0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019f12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019f18:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	891b      	ldrh	r3, [r3, #8]
 8019f1e:	3b14      	subs	r3, #20
 8019f20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019f24:	e0e1      	b.n	801a0ea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019f26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019f28:	00db      	lsls	r3, r3, #3
 8019f2a:	b29b      	uxth	r3, r3
 8019f2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019f30:	4293      	cmp	r3, r2
 8019f32:	bf28      	it	cs
 8019f34:	4613      	movcs	r3, r2
 8019f36:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019f38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f3c:	2114      	movs	r1, #20
 8019f3e:	200e      	movs	r0, #14
 8019f40:	f7f6 fa60 	bl	8010404 <pbuf_alloc>
 8019f44:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	f000 80d5 	beq.w	801a0f8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f50:	895b      	ldrh	r3, [r3, #10]
 8019f52:	2b13      	cmp	r3, #19
 8019f54:	d806      	bhi.n	8019f64 <ip4_frag+0xd0>
 8019f56:	4b6c      	ldr	r3, [pc, #432]	; (801a108 <ip4_frag+0x274>)
 8019f58:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019f5c:	496d      	ldr	r1, [pc, #436]	; (801a114 <ip4_frag+0x280>)
 8019f5e:	486c      	ldr	r0, [pc, #432]	; (801a110 <ip4_frag+0x27c>)
 8019f60:	f000 ff70 	bl	801ae44 <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f66:	685b      	ldr	r3, [r3, #4]
 8019f68:	2214      	movs	r2, #20
 8019f6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	f000 fcbb 	bl	801a8e8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f74:	685b      	ldr	r3, [r3, #4]
 8019f76:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019f78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019f7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019f7e:	e064      	b.n	801a04a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	895a      	ldrh	r2, [r3, #10]
 8019f84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019f86:	1ad3      	subs	r3, r2, r3
 8019f88:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	895b      	ldrh	r3, [r3, #10]
 8019f8e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019f90:	429a      	cmp	r2, r3
 8019f92:	d906      	bls.n	8019fa2 <ip4_frag+0x10e>
 8019f94:	4b5c      	ldr	r3, [pc, #368]	; (801a108 <ip4_frag+0x274>)
 8019f96:	f240 322d 	movw	r2, #813	; 0x32d
 8019f9a:	495f      	ldr	r1, [pc, #380]	; (801a118 <ip4_frag+0x284>)
 8019f9c:	485c      	ldr	r0, [pc, #368]	; (801a110 <ip4_frag+0x27c>)
 8019f9e:	f000 ff51 	bl	801ae44 <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019fa2:	8bfa      	ldrh	r2, [r7, #30]
 8019fa4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019fa8:	4293      	cmp	r3, r2
 8019faa:	bf28      	it	cs
 8019fac:	4613      	movcs	r3, r2
 8019fae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019fb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d105      	bne.n	8019fc6 <ip4_frag+0x132>
        poff = 0;
 8019fba:	2300      	movs	r3, #0
 8019fbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	60fb      	str	r3, [r7, #12]
        continue;
 8019fc4:	e041      	b.n	801a04a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019fc6:	f7ff ff0d 	bl	8019de4 <ip_frag_alloc_pbuf_custom_ref>
 8019fca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019fcc:	69bb      	ldr	r3, [r7, #24]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d103      	bne.n	8019fda <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019fd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019fd4:	f7f6 fcfa 	bl	80109cc <pbuf_free>
        goto memerr;
 8019fd8:	e08f      	b.n	801a0fa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019fda:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019fe0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019fe2:	4413      	add	r3, r2
 8019fe4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019fe8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019fec:	9201      	str	r2, [sp, #4]
 8019fee:	9300      	str	r3, [sp, #0]
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	2241      	movs	r2, #65	; 0x41
 8019ff4:	2000      	movs	r0, #0
 8019ff6:	f7f6 fb2f 	bl	8010658 <pbuf_alloced_custom>
 8019ffa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019ffc:	697b      	ldr	r3, [r7, #20]
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d106      	bne.n	801a010 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a002:	69b8      	ldr	r0, [r7, #24]
 801a004:	f7ff fef6 	bl	8019df4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a00a:	f7f6 fcdf 	bl	80109cc <pbuf_free>
        goto memerr;
 801a00e:	e074      	b.n	801a0fa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a010:	68f8      	ldr	r0, [r7, #12]
 801a012:	f7f6 fd81 	bl	8010b18 <pbuf_ref>
      pcr->original = p;
 801a016:	69bb      	ldr	r3, [r7, #24]
 801a018:	68fa      	ldr	r2, [r7, #12]
 801a01a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a01c:	69bb      	ldr	r3, [r7, #24]
 801a01e:	4a3f      	ldr	r2, [pc, #252]	; (801a11c <ip4_frag+0x288>)
 801a020:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a022:	6979      	ldr	r1, [r7, #20]
 801a024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a026:	f7f6 fd9f 	bl	8010b68 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a02a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a02e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a032:	1ad3      	subs	r3, r2, r3
 801a034:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a038:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d004      	beq.n	801a04a <ip4_frag+0x1b6>
        poff = 0;
 801a040:	2300      	movs	r3, #0
 801a042:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a04a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d196      	bne.n	8019f80 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a052:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a054:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a058:	4413      	add	r3, r2
 801a05a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a05c:	68bb      	ldr	r3, [r7, #8]
 801a05e:	8c1b      	ldrh	r3, [r3, #32]
 801a060:	f1a3 0213 	sub.w	r2, r3, #19
 801a064:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a068:	429a      	cmp	r2, r3
 801a06a:	bfcc      	ite	gt
 801a06c:	2301      	movgt	r3, #1
 801a06e:	2300      	movle	r3, #0
 801a070:	b2db      	uxtb	r3, r3
 801a072:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a074:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a07c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a07e:	6a3b      	ldr	r3, [r7, #32]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d002      	beq.n	801a08a <ip4_frag+0x1f6>
 801a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a086:	2b00      	cmp	r3, #0
 801a088:	d003      	beq.n	801a092 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a08a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a08c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a090:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a092:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a094:	4618      	mov	r0, r3
 801a096:	f7f5 f92f 	bl	800f2f8 <lwip_htons>
 801a09a:	4603      	mov	r3, r0
 801a09c:	461a      	mov	r2, r3
 801a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0a0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a0a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a0a4:	3314      	adds	r3, #20
 801a0a6:	b29b      	uxth	r3, r3
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f7f5 f925 	bl	800f2f8 <lwip_htons>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	461a      	mov	r2, r3
 801a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0b4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0b8:	2200      	movs	r2, #0
 801a0ba:	729a      	strb	r2, [r3, #10]
 801a0bc:	2200      	movs	r2, #0
 801a0be:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a0c0:	68bb      	ldr	r3, [r7, #8]
 801a0c2:	695b      	ldr	r3, [r3, #20]
 801a0c4:	687a      	ldr	r2, [r7, #4]
 801a0c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a0c8:	68b8      	ldr	r0, [r7, #8]
 801a0ca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a0cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a0ce:	f7f6 fc7d 	bl	80109cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a0d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a0d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a0d8:	1ad3      	subs	r3, r2, r3
 801a0da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a0de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a0e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a0e4:	4413      	add	r3, r2
 801a0e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a0ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	f47f af19 	bne.w	8019f26 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a0f4:	2300      	movs	r3, #0
 801a0f6:	e002      	b.n	801a0fe <ip4_frag+0x26a>
      goto memerr;
 801a0f8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a0fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a0fe:	4618      	mov	r0, r3
 801a100:	3748      	adds	r7, #72	; 0x48
 801a102:	46bd      	mov	sp, r7
 801a104:	bd80      	pop	{r7, pc}
 801a106:	bf00      	nop
 801a108:	08027230 	.word	0x08027230
 801a10c:	0802740c 	.word	0x0802740c
 801a110:	08027278 	.word	0x08027278
 801a114:	08027428 	.word	0x08027428
 801a118:	08027448 	.word	0x08027448
 801a11c:	08019e2d 	.word	0x08019e2d

0801a120 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a120:	b580      	push	{r7, lr}
 801a122:	b086      	sub	sp, #24
 801a124:	af00      	add	r7, sp, #0
 801a126:	6078      	str	r0, [r7, #4]
 801a128:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a12a:	230e      	movs	r3, #14
 801a12c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	895b      	ldrh	r3, [r3, #10]
 801a132:	2b0e      	cmp	r3, #14
 801a134:	d96e      	bls.n	801a214 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	7bdb      	ldrb	r3, [r3, #15]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d106      	bne.n	801a14c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a13e:	683b      	ldr	r3, [r7, #0]
 801a140:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a144:	3301      	adds	r3, #1
 801a146:	b2da      	uxtb	r2, r3
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	685b      	ldr	r3, [r3, #4]
 801a150:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a152:	693b      	ldr	r3, [r7, #16]
 801a154:	7b1a      	ldrb	r2, [r3, #12]
 801a156:	7b5b      	ldrb	r3, [r3, #13]
 801a158:	021b      	lsls	r3, r3, #8
 801a15a:	4313      	orrs	r3, r2
 801a15c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a15e:	693b      	ldr	r3, [r7, #16]
 801a160:	781b      	ldrb	r3, [r3, #0]
 801a162:	f003 0301 	and.w	r3, r3, #1
 801a166:	2b00      	cmp	r3, #0
 801a168:	d023      	beq.n	801a1b2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a16a:	693b      	ldr	r3, [r7, #16]
 801a16c:	781b      	ldrb	r3, [r3, #0]
 801a16e:	2b01      	cmp	r3, #1
 801a170:	d10f      	bne.n	801a192 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a172:	693b      	ldr	r3, [r7, #16]
 801a174:	785b      	ldrb	r3, [r3, #1]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d11b      	bne.n	801a1b2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a17a:	693b      	ldr	r3, [r7, #16]
 801a17c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a17e:	2b5e      	cmp	r3, #94	; 0x5e
 801a180:	d117      	bne.n	801a1b2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	7b5b      	ldrb	r3, [r3, #13]
 801a186:	f043 0310 	orr.w	r3, r3, #16
 801a18a:	b2da      	uxtb	r2, r3
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	735a      	strb	r2, [r3, #13]
 801a190:	e00f      	b.n	801a1b2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a192:	693b      	ldr	r3, [r7, #16]
 801a194:	2206      	movs	r2, #6
 801a196:	4928      	ldr	r1, [pc, #160]	; (801a238 <ethernet_input+0x118>)
 801a198:	4618      	mov	r0, r3
 801a19a:	f000 fb97 	bl	801a8cc <memcmp>
 801a19e:	4603      	mov	r3, r0
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d106      	bne.n	801a1b2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	7b5b      	ldrb	r3, [r3, #13]
 801a1a8:	f043 0308 	orr.w	r3, r3, #8
 801a1ac:	b2da      	uxtb	r2, r3
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a1b2:	89fb      	ldrh	r3, [r7, #14]
 801a1b4:	2b08      	cmp	r3, #8
 801a1b6:	d003      	beq.n	801a1c0 <ethernet_input+0xa0>
 801a1b8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a1bc:	d014      	beq.n	801a1e8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a1be:	e032      	b.n	801a226 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a1c0:	683b      	ldr	r3, [r7, #0]
 801a1c2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801a1c6:	f003 0308 	and.w	r3, r3, #8
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d024      	beq.n	801a218 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a1ce:	8afb      	ldrh	r3, [r7, #22]
 801a1d0:	4619      	mov	r1, r3
 801a1d2:	6878      	ldr	r0, [r7, #4]
 801a1d4:	f7f6 fb74 	bl	80108c0 <pbuf_remove_header>
 801a1d8:	4603      	mov	r3, r0
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d11e      	bne.n	801a21c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a1de:	6839      	ldr	r1, [r7, #0]
 801a1e0:	6878      	ldr	r0, [r7, #4]
 801a1e2:	f7fe ff27 	bl	8019034 <ip4_input>
      break;
 801a1e6:	e013      	b.n	801a210 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a1e8:	683b      	ldr	r3, [r7, #0]
 801a1ea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801a1ee:	f003 0308 	and.w	r3, r3, #8
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d014      	beq.n	801a220 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a1f6:	8afb      	ldrh	r3, [r7, #22]
 801a1f8:	4619      	mov	r1, r3
 801a1fa:	6878      	ldr	r0, [r7, #4]
 801a1fc:	f7f6 fb60 	bl	80108c0 <pbuf_remove_header>
 801a200:	4603      	mov	r3, r0
 801a202:	2b00      	cmp	r3, #0
 801a204:	d10e      	bne.n	801a224 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a206:	6839      	ldr	r1, [r7, #0]
 801a208:	6878      	ldr	r0, [r7, #4]
 801a20a:	f7fe f8c7 	bl	801839c <etharp_input>
      break;
 801a20e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a210:	2300      	movs	r3, #0
 801a212:	e00c      	b.n	801a22e <ethernet_input+0x10e>
    goto free_and_return;
 801a214:	bf00      	nop
 801a216:	e006      	b.n	801a226 <ethernet_input+0x106>
        goto free_and_return;
 801a218:	bf00      	nop
 801a21a:	e004      	b.n	801a226 <ethernet_input+0x106>
        goto free_and_return;
 801a21c:	bf00      	nop
 801a21e:	e002      	b.n	801a226 <ethernet_input+0x106>
        goto free_and_return;
 801a220:	bf00      	nop
 801a222:	e000      	b.n	801a226 <ethernet_input+0x106>
        goto free_and_return;
 801a224:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a226:	6878      	ldr	r0, [r7, #4]
 801a228:	f7f6 fbd0 	bl	80109cc <pbuf_free>
  return ERR_OK;
 801a22c:	2300      	movs	r3, #0
}
 801a22e:	4618      	mov	r0, r3
 801a230:	3718      	adds	r7, #24
 801a232:	46bd      	mov	sp, r7
 801a234:	bd80      	pop	{r7, pc}
 801a236:	bf00      	nop
 801a238:	08028d30 	.word	0x08028d30

0801a23c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a23c:	b580      	push	{r7, lr}
 801a23e:	b086      	sub	sp, #24
 801a240:	af00      	add	r7, sp, #0
 801a242:	60f8      	str	r0, [r7, #12]
 801a244:	60b9      	str	r1, [r7, #8]
 801a246:	607a      	str	r2, [r7, #4]
 801a248:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a24a:	8c3b      	ldrh	r3, [r7, #32]
 801a24c:	4618      	mov	r0, r3
 801a24e:	f7f5 f853 	bl	800f2f8 <lwip_htons>
 801a252:	4603      	mov	r3, r0
 801a254:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a256:	210e      	movs	r1, #14
 801a258:	68b8      	ldr	r0, [r7, #8]
 801a25a:	f7f6 fb21 	bl	80108a0 <pbuf_add_header>
 801a25e:	4603      	mov	r3, r0
 801a260:	2b00      	cmp	r3, #0
 801a262:	d125      	bne.n	801a2b0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a264:	68bb      	ldr	r3, [r7, #8]
 801a266:	685b      	ldr	r3, [r3, #4]
 801a268:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a26a:	693b      	ldr	r3, [r7, #16]
 801a26c:	8afa      	ldrh	r2, [r7, #22]
 801a26e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a270:	693b      	ldr	r3, [r7, #16]
 801a272:	2206      	movs	r2, #6
 801a274:	6839      	ldr	r1, [r7, #0]
 801a276:	4618      	mov	r0, r3
 801a278:	f000 fb36 	bl	801a8e8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a27c:	693b      	ldr	r3, [r7, #16]
 801a27e:	3306      	adds	r3, #6
 801a280:	2206      	movs	r2, #6
 801a282:	6879      	ldr	r1, [r7, #4]
 801a284:	4618      	mov	r0, r3
 801a286:	f000 fb2f 	bl	801a8e8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a290:	2b06      	cmp	r3, #6
 801a292:	d006      	beq.n	801a2a2 <ethernet_output+0x66>
 801a294:	4b0a      	ldr	r3, [pc, #40]	; (801a2c0 <ethernet_output+0x84>)
 801a296:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a29a:	490a      	ldr	r1, [pc, #40]	; (801a2c4 <ethernet_output+0x88>)
 801a29c:	480a      	ldr	r0, [pc, #40]	; (801a2c8 <ethernet_output+0x8c>)
 801a29e:	f000 fdd1 	bl	801ae44 <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	699b      	ldr	r3, [r3, #24]
 801a2a6:	68b9      	ldr	r1, [r7, #8]
 801a2a8:	68f8      	ldr	r0, [r7, #12]
 801a2aa:	4798      	blx	r3
 801a2ac:	4603      	mov	r3, r0
 801a2ae:	e002      	b.n	801a2b6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a2b0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a2b2:	f06f 0301 	mvn.w	r3, #1
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	3718      	adds	r7, #24
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bd80      	pop	{r7, pc}
 801a2be:	bf00      	nop
 801a2c0:	08027458 	.word	0x08027458
 801a2c4:	08027490 	.word	0x08027490
 801a2c8:	080274c4 	.word	0x080274c4

0801a2cc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b086      	sub	sp, #24
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]
 801a2d4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801a2d6:	683b      	ldr	r3, [r7, #0]
 801a2d8:	60bb      	str	r3, [r7, #8]
 801a2da:	2304      	movs	r3, #4
 801a2dc:	60fb      	str	r3, [r7, #12]
 801a2de:	2300      	movs	r3, #0
 801a2e0:	613b      	str	r3, [r7, #16]
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801a2e6:	f107 0308 	add.w	r3, r7, #8
 801a2ea:	2100      	movs	r1, #0
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	f7ef fa1c 	bl	800972a <osMessageCreate>
 801a2f2:	4602      	mov	r2, r0
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d102      	bne.n	801a306 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801a300:	f04f 33ff 	mov.w	r3, #4294967295
 801a304:	e000      	b.n	801a308 <sys_mbox_new+0x3c>

  return ERR_OK;
 801a306:	2300      	movs	r3, #0
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3718      	adds	r7, #24
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}

0801a310 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801a310:	b580      	push	{r7, lr}
 801a312:	b082      	sub	sp, #8
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	4618      	mov	r0, r3
 801a31e:	f7ef fae1 	bl	80098e4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	4618      	mov	r0, r3
 801a328:	f7ef faf2 	bl	8009910 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801a32c:	bf00      	nop
 801a32e:	3708      	adds	r7, #8
 801a330:	46bd      	mov	sp, r7
 801a332:	bd80      	pop	{r7, pc}

0801a334 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a334:	b580      	push	{r7, lr}
 801a336:	b084      	sub	sp, #16
 801a338:	af00      	add	r7, sp, #0
 801a33a:	6078      	str	r0, [r7, #4]
 801a33c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	6839      	ldr	r1, [r7, #0]
 801a344:	2200      	movs	r2, #0
 801a346:	4618      	mov	r0, r3
 801a348:	f7ef fa18 	bl	800977c <osMessagePut>
 801a34c:	4603      	mov	r3, r0
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d102      	bne.n	801a358 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801a352:	2300      	movs	r3, #0
 801a354:	73fb      	strb	r3, [r7, #15]
 801a356:	e001      	b.n	801a35c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a358:	23ff      	movs	r3, #255	; 0xff
 801a35a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a35c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a360:	4618      	mov	r0, r3
 801a362:	3710      	adds	r7, #16
 801a364:	46bd      	mov	sp, r7
 801a366:	bd80      	pop	{r7, pc}

0801a368 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b08c      	sub	sp, #48	; 0x30
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	61f8      	str	r0, [r7, #28]
 801a370:	61b9      	str	r1, [r7, #24]
 801a372:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801a374:	f7ef f818 	bl	80093a8 <osKernelSysTick>
 801a378:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a37a:	697b      	ldr	r3, [r7, #20]
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d017      	beq.n	801a3b0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801a380:	69fb      	ldr	r3, [r7, #28]
 801a382:	6819      	ldr	r1, [r3, #0]
 801a384:	f107 0320 	add.w	r3, r7, #32
 801a388:	697a      	ldr	r2, [r7, #20]
 801a38a:	4618      	mov	r0, r3
 801a38c:	f7ef fa36 	bl	80097fc <osMessageGet>

    if(event.status == osEventMessage)
 801a390:	6a3b      	ldr	r3, [r7, #32]
 801a392:	2b10      	cmp	r3, #16
 801a394:	d109      	bne.n	801a3aa <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a398:	461a      	mov	r2, r3
 801a39a:	69bb      	ldr	r3, [r7, #24]
 801a39c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801a39e:	f7ef f803 	bl	80093a8 <osKernelSysTick>
 801a3a2:	4602      	mov	r2, r0
 801a3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3a6:	1ad3      	subs	r3, r2, r3
 801a3a8:	e019      	b.n	801a3de <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a3aa:	f04f 33ff 	mov.w	r3, #4294967295
 801a3ae:	e016      	b.n	801a3de <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801a3b0:	69fb      	ldr	r3, [r7, #28]
 801a3b2:	6819      	ldr	r1, [r3, #0]
 801a3b4:	463b      	mov	r3, r7
 801a3b6:	f04f 32ff 	mov.w	r2, #4294967295
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	f7ef fa1e 	bl	80097fc <osMessageGet>
 801a3c0:	f107 0320 	add.w	r3, r7, #32
 801a3c4:	463a      	mov	r2, r7
 801a3c6:	ca07      	ldmia	r2, {r0, r1, r2}
 801a3c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ce:	461a      	mov	r2, r3
 801a3d0:	69bb      	ldr	r3, [r7, #24]
 801a3d2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801a3d4:	f7ee ffe8 	bl	80093a8 <osKernelSysTick>
 801a3d8:	4602      	mov	r2, r0
 801a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3dc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a3de:	4618      	mov	r0, r3
 801a3e0:	3730      	adds	r7, #48	; 0x30
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bd80      	pop	{r7, pc}

0801a3e6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801a3e6:	b580      	push	{r7, lr}
 801a3e8:	b086      	sub	sp, #24
 801a3ea:	af00      	add	r7, sp, #0
 801a3ec:	6078      	str	r0, [r7, #4]
 801a3ee:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	6819      	ldr	r1, [r3, #0]
 801a3f4:	f107 030c 	add.w	r3, r7, #12
 801a3f8:	2200      	movs	r2, #0
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	f7ef f9fe 	bl	80097fc <osMessageGet>

  if(event.status == osEventMessage)
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	2b10      	cmp	r3, #16
 801a404:	d105      	bne.n	801a412 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801a406:	693b      	ldr	r3, [r7, #16]
 801a408:	461a      	mov	r2, r3
 801a40a:	683b      	ldr	r3, [r7, #0]
 801a40c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801a40e:	2300      	movs	r3, #0
 801a410:	e001      	b.n	801a416 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801a412:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801a416:	4618      	mov	r0, r3
 801a418:	3718      	adds	r7, #24
 801a41a:	46bd      	mov	sp, r7
 801a41c:	bd80      	pop	{r7, pc}

0801a41e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a41e:	b480      	push	{r7}
 801a420:	b083      	sub	sp, #12
 801a422:	af00      	add	r7, sp, #0
 801a424:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d101      	bne.n	801a432 <sys_mbox_valid+0x14>
    return 0;
 801a42e:	2300      	movs	r3, #0
 801a430:	e000      	b.n	801a434 <sys_mbox_valid+0x16>
  else
    return 1;
 801a432:	2301      	movs	r3, #1
}
 801a434:	4618      	mov	r0, r3
 801a436:	370c      	adds	r7, #12
 801a438:	46bd      	mov	sp, r7
 801a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a43e:	4770      	bx	lr

0801a440 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801a440:	b480      	push	{r7}
 801a442:	b083      	sub	sp, #12
 801a444:	af00      	add	r7, sp, #0
 801a446:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	2200      	movs	r2, #0
 801a44c:	601a      	str	r2, [r3, #0]
}
 801a44e:	bf00      	nop
 801a450:	370c      	adds	r7, #12
 801a452:	46bd      	mov	sp, r7
 801a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a458:	4770      	bx	lr

0801a45a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801a45a:	b580      	push	{r7, lr}
 801a45c:	b084      	sub	sp, #16
 801a45e:	af00      	add	r7, sp, #0
 801a460:	6078      	str	r0, [r7, #4]
 801a462:	460b      	mov	r3, r1
 801a464:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801a466:	2300      	movs	r3, #0
 801a468:	60bb      	str	r3, [r7, #8]
 801a46a:	2300      	movs	r3, #0
 801a46c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801a46e:	f107 0308 	add.w	r3, r7, #8
 801a472:	2101      	movs	r1, #1
 801a474:	4618      	mov	r0, r3
 801a476:	f7ef f88f 	bl	8009598 <osSemaphoreCreate>
 801a47a:	4602      	mov	r2, r0
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d102      	bne.n	801a48e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a488:	f04f 33ff 	mov.w	r3, #4294967295
 801a48c:	e009      	b.n	801a4a2 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801a48e:	78fb      	ldrb	r3, [r7, #3]
 801a490:	2b00      	cmp	r3, #0
 801a492:	d105      	bne.n	801a4a0 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	2100      	movs	r1, #0
 801a49a:	4618      	mov	r0, r3
 801a49c:	f7ef f8ae 	bl	80095fc <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801a4a0:	2300      	movs	r3, #0
}
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	3710      	adds	r7, #16
 801a4a6:	46bd      	mov	sp, r7
 801a4a8:	bd80      	pop	{r7, pc}

0801a4aa <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801a4aa:	b580      	push	{r7, lr}
 801a4ac:	b084      	sub	sp, #16
 801a4ae:	af00      	add	r7, sp, #0
 801a4b0:	6078      	str	r0, [r7, #4]
 801a4b2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801a4b4:	f7ee ff78 	bl	80093a8 <osKernelSysTick>
 801a4b8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a4ba:	683b      	ldr	r3, [r7, #0]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d011      	beq.n	801a4e4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	6839      	ldr	r1, [r7, #0]
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	f7ef f898 	bl	80095fc <osSemaphoreWait>
 801a4cc:	4603      	mov	r3, r0
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d105      	bne.n	801a4de <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801a4d2:	f7ee ff69 	bl	80093a8 <osKernelSysTick>
 801a4d6:	4602      	mov	r2, r0
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	1ad3      	subs	r3, r2, r3
 801a4dc:	e012      	b.n	801a504 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a4de:	f04f 33ff 	mov.w	r3, #4294967295
 801a4e2:	e00f      	b.n	801a504 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801a4e4:	bf00      	nop
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	f04f 31ff 	mov.w	r1, #4294967295
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	f7ef f884 	bl	80095fc <osSemaphoreWait>
 801a4f4:	4603      	mov	r3, r0
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d1f5      	bne.n	801a4e6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801a4fa:	f7ee ff55 	bl	80093a8 <osKernelSysTick>
 801a4fe:	4602      	mov	r2, r0
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a504:	4618      	mov	r0, r3
 801a506:	3710      	adds	r7, #16
 801a508:	46bd      	mov	sp, r7
 801a50a:	bd80      	pop	{r7, pc}

0801a50c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b082      	sub	sp, #8
 801a510:	af00      	add	r7, sp, #0
 801a512:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	4618      	mov	r0, r3
 801a51a:	f7ef f8bd 	bl	8009698 <osSemaphoreRelease>
}
 801a51e:	bf00      	nop
 801a520:	3708      	adds	r7, #8
 801a522:	46bd      	mov	sp, r7
 801a524:	bd80      	pop	{r7, pc}

0801a526 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801a526:	b580      	push	{r7, lr}
 801a528:	b082      	sub	sp, #8
 801a52a:	af00      	add	r7, sp, #0
 801a52c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	4618      	mov	r0, r3
 801a534:	f7ef f8e6 	bl	8009704 <osSemaphoreDelete>
}
 801a538:	bf00      	nop
 801a53a:	3708      	adds	r7, #8
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bd80      	pop	{r7, pc}

0801a540 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801a540:	b480      	push	{r7}
 801a542:	b083      	sub	sp, #12
 801a544:	af00      	add	r7, sp, #0
 801a546:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d101      	bne.n	801a554 <sys_sem_valid+0x14>
    return 0;
 801a550:	2300      	movs	r3, #0
 801a552:	e000      	b.n	801a556 <sys_sem_valid+0x16>
  else
    return 1;
 801a554:	2301      	movs	r3, #1
}
 801a556:	4618      	mov	r0, r3
 801a558:	370c      	adds	r7, #12
 801a55a:	46bd      	mov	sp, r7
 801a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a560:	4770      	bx	lr

0801a562 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801a562:	b480      	push	{r7}
 801a564:	b083      	sub	sp, #12
 801a566:	af00      	add	r7, sp, #0
 801a568:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	2200      	movs	r2, #0
 801a56e:	601a      	str	r2, [r3, #0]
}
 801a570:	bf00      	nop
 801a572:	370c      	adds	r7, #12
 801a574:	46bd      	mov	sp, r7
 801a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a57a:	4770      	bx	lr

0801a57c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a57c:	b580      	push	{r7, lr}
 801a57e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a580:	4803      	ldr	r0, [pc, #12]	; (801a590 <sys_init+0x14>)
 801a582:	f7ee ff6d 	bl	8009460 <osMutexCreate>
 801a586:	4603      	mov	r3, r0
 801a588:	4a02      	ldr	r2, [pc, #8]	; (801a594 <sys_init+0x18>)
 801a58a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801a58c:	bf00      	nop
 801a58e:	bd80      	pop	{r7, pc}
 801a590:	08028d40 	.word	0x08028d40
 801a594:	2000be34 	.word	0x2000be34

0801a598 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a598:	b580      	push	{r7, lr}
 801a59a:	b084      	sub	sp, #16
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801a5a0:	2300      	movs	r3, #0
 801a5a2:	60bb      	str	r3, [r7, #8]
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a5a8:	f107 0308 	add.w	r3, r7, #8
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	f7ee ff57 	bl	8009460 <osMutexCreate>
 801a5b2:	4602      	mov	r2, r0
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d102      	bne.n	801a5c6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a5c0:	f04f 33ff 	mov.w	r3, #4294967295
 801a5c4:	e000      	b.n	801a5c8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a5c6:	2300      	movs	r3, #0
}
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	3710      	adds	r7, #16
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	bd80      	pop	{r7, pc}

0801a5d0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a5d0:	b580      	push	{r7, lr}
 801a5d2:	b082      	sub	sp, #8
 801a5d4:	af00      	add	r7, sp, #0
 801a5d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	f04f 31ff 	mov.w	r1, #4294967295
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	f7ee ff55 	bl	8009490 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801a5e6:	bf00      	nop
 801a5e8:	3708      	adds	r7, #8
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bd80      	pop	{r7, pc}

0801a5ee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a5ee:	b580      	push	{r7, lr}
 801a5f0:	b082      	sub	sp, #8
 801a5f2:	af00      	add	r7, sp, #0
 801a5f4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	f7ee ff96 	bl	800952c <osMutexRelease>
}
 801a600:	bf00      	nop
 801a602:	3708      	adds	r7, #8
 801a604:	46bd      	mov	sp, r7
 801a606:	bd80      	pop	{r7, pc}

0801a608 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a608:	b580      	push	{r7, lr}
 801a60a:	b08c      	sub	sp, #48	; 0x30
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	60f8      	str	r0, [r7, #12]
 801a610:	60b9      	str	r1, [r7, #8]
 801a612:	607a      	str	r2, [r7, #4]
 801a614:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a616:	f107 0314 	add.w	r3, r7, #20
 801a61a:	2200      	movs	r2, #0
 801a61c:	601a      	str	r2, [r3, #0]
 801a61e:	605a      	str	r2, [r3, #4]
 801a620:	609a      	str	r2, [r3, #8]
 801a622:	60da      	str	r2, [r3, #12]
 801a624:	611a      	str	r2, [r3, #16]
 801a626:	615a      	str	r2, [r3, #20]
 801a628:	619a      	str	r2, [r3, #24]
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	617b      	str	r3, [r7, #20]
 801a62e:	68bb      	ldr	r3, [r7, #8]
 801a630:	61bb      	str	r3, [r7, #24]
 801a632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a634:	b21b      	sxth	r3, r3
 801a636:	83bb      	strh	r3, [r7, #28]
 801a638:	683b      	ldr	r3, [r7, #0]
 801a63a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a63c:	f107 0314 	add.w	r3, r7, #20
 801a640:	6879      	ldr	r1, [r7, #4]
 801a642:	4618      	mov	r0, r3
 801a644:	f7ee fec0 	bl	80093c8 <osThreadCreate>
 801a648:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801a64a:	4618      	mov	r0, r3
 801a64c:	3730      	adds	r7, #48	; 0x30
 801a64e:	46bd      	mov	sp, r7
 801a650:	bd80      	pop	{r7, pc}
	...

0801a654 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a654:	b580      	push	{r7, lr}
 801a656:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a658:	4b04      	ldr	r3, [pc, #16]	; (801a66c <sys_arch_protect+0x18>)
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	f04f 31ff 	mov.w	r1, #4294967295
 801a660:	4618      	mov	r0, r3
 801a662:	f7ee ff15 	bl	8009490 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801a666:	2301      	movs	r3, #1
}
 801a668:	4618      	mov	r0, r3
 801a66a:	bd80      	pop	{r7, pc}
 801a66c:	2000be34 	.word	0x2000be34

0801a670 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b082      	sub	sp, #8
 801a674:	af00      	add	r7, sp, #0
 801a676:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a678:	4b04      	ldr	r3, [pc, #16]	; (801a68c <sys_arch_unprotect+0x1c>)
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	4618      	mov	r0, r3
 801a67e:	f7ee ff55 	bl	800952c <osMutexRelease>
}
 801a682:	bf00      	nop
 801a684:	3708      	adds	r7, #8
 801a686:	46bd      	mov	sp, r7
 801a688:	bd80      	pop	{r7, pc}
 801a68a:	bf00      	nop
 801a68c:	2000be34 	.word	0x2000be34

0801a690 <atoi>:
 801a690:	220a      	movs	r2, #10
 801a692:	2100      	movs	r1, #0
 801a694:	f000 bd12 	b.w	801b0bc <strtol>

0801a698 <__libc_init_array>:
 801a698:	b570      	push	{r4, r5, r6, lr}
 801a69a:	4d0d      	ldr	r5, [pc, #52]	; (801a6d0 <__libc_init_array+0x38>)
 801a69c:	4c0d      	ldr	r4, [pc, #52]	; (801a6d4 <__libc_init_array+0x3c>)
 801a69e:	1b64      	subs	r4, r4, r5
 801a6a0:	10a4      	asrs	r4, r4, #2
 801a6a2:	2600      	movs	r6, #0
 801a6a4:	42a6      	cmp	r6, r4
 801a6a6:	d109      	bne.n	801a6bc <__libc_init_array+0x24>
 801a6a8:	4d0b      	ldr	r5, [pc, #44]	; (801a6d8 <__libc_init_array+0x40>)
 801a6aa:	4c0c      	ldr	r4, [pc, #48]	; (801a6dc <__libc_init_array+0x44>)
 801a6ac:	f009 fa0e 	bl	8023acc <_init>
 801a6b0:	1b64      	subs	r4, r4, r5
 801a6b2:	10a4      	asrs	r4, r4, #2
 801a6b4:	2600      	movs	r6, #0
 801a6b6:	42a6      	cmp	r6, r4
 801a6b8:	d105      	bne.n	801a6c6 <__libc_init_array+0x2e>
 801a6ba:	bd70      	pop	{r4, r5, r6, pc}
 801a6bc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6c0:	4798      	blx	r3
 801a6c2:	3601      	adds	r6, #1
 801a6c4:	e7ee      	b.n	801a6a4 <__libc_init_array+0xc>
 801a6c6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6ca:	4798      	blx	r3
 801a6cc:	3601      	adds	r6, #1
 801a6ce:	e7f2      	b.n	801a6b6 <__libc_init_array+0x1e>
 801a6d0:	08029270 	.word	0x08029270
 801a6d4:	08029270 	.word	0x08029270
 801a6d8:	08029270 	.word	0x08029270
 801a6dc:	08029278 	.word	0x08029278

0801a6e0 <localtime_r>:
 801a6e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a6e4:	4607      	mov	r7, r0
 801a6e6:	9101      	str	r1, [sp, #4]
 801a6e8:	f004 fd10 	bl	801f10c <__gettzinfo>
 801a6ec:	9901      	ldr	r1, [sp, #4]
 801a6ee:	4680      	mov	r8, r0
 801a6f0:	4638      	mov	r0, r7
 801a6f2:	f004 fd0f 	bl	801f114 <gmtime_r>
 801a6f6:	6943      	ldr	r3, [r0, #20]
 801a6f8:	079a      	lsls	r2, r3, #30
 801a6fa:	4604      	mov	r4, r0
 801a6fc:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801a700:	d105      	bne.n	801a70e <localtime_r+0x2e>
 801a702:	2264      	movs	r2, #100	; 0x64
 801a704:	fb96 f3f2 	sdiv	r3, r6, r2
 801a708:	fb02 6313 	mls	r3, r2, r3, r6
 801a70c:	bb7b      	cbnz	r3, 801a76e <localtime_r+0x8e>
 801a70e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801a712:	fb96 f5f3 	sdiv	r5, r6, r3
 801a716:	fb03 6515 	mls	r5, r3, r5, r6
 801a71a:	fab5 f585 	clz	r5, r5
 801a71e:	096d      	lsrs	r5, r5, #5
 801a720:	4b68      	ldr	r3, [pc, #416]	; (801a8c4 <localtime_r+0x1e4>)
 801a722:	2230      	movs	r2, #48	; 0x30
 801a724:	fb02 3505 	mla	r5, r2, r5, r3
 801a728:	f001 ff5a 	bl	801c5e0 <__tz_lock>
 801a72c:	f001 ff64 	bl	801c5f8 <_tzset_unlocked>
 801a730:	4b65      	ldr	r3, [pc, #404]	; (801a8c8 <localtime_r+0x1e8>)
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	b353      	cbz	r3, 801a78c <localtime_r+0xac>
 801a736:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a73a:	42b3      	cmp	r3, r6
 801a73c:	d119      	bne.n	801a772 <localtime_r+0x92>
 801a73e:	f8d8 1000 	ldr.w	r1, [r8]
 801a742:	e9d7 6700 	ldrd	r6, r7, [r7]
 801a746:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801a74a:	b9d1      	cbnz	r1, 801a782 <localtime_r+0xa2>
 801a74c:	4296      	cmp	r6, r2
 801a74e:	eb77 0303 	sbcs.w	r3, r7, r3
 801a752:	da23      	bge.n	801a79c <localtime_r+0xbc>
 801a754:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801a758:	4296      	cmp	r6, r2
 801a75a:	eb77 0303 	sbcs.w	r3, r7, r3
 801a75e:	bfb4      	ite	lt
 801a760:	2301      	movlt	r3, #1
 801a762:	2300      	movge	r3, #0
 801a764:	6223      	str	r3, [r4, #32]
 801a766:	db1b      	blt.n	801a7a0 <localtime_r+0xc0>
 801a768:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801a76c:	e01a      	b.n	801a7a4 <localtime_r+0xc4>
 801a76e:	2501      	movs	r5, #1
 801a770:	e7d6      	b.n	801a720 <localtime_r+0x40>
 801a772:	4630      	mov	r0, r6
 801a774:	f001 fe8c 	bl	801c490 <__tzcalc_limits>
 801a778:	2800      	cmp	r0, #0
 801a77a:	d1e0      	bne.n	801a73e <localtime_r+0x5e>
 801a77c:	f04f 33ff 	mov.w	r3, #4294967295
 801a780:	e004      	b.n	801a78c <localtime_r+0xac>
 801a782:	4296      	cmp	r6, r2
 801a784:	eb77 0303 	sbcs.w	r3, r7, r3
 801a788:	da02      	bge.n	801a790 <localtime_r+0xb0>
 801a78a:	2300      	movs	r3, #0
 801a78c:	6223      	str	r3, [r4, #32]
 801a78e:	e7eb      	b.n	801a768 <localtime_r+0x88>
 801a790:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801a794:	4296      	cmp	r6, r2
 801a796:	eb77 0303 	sbcs.w	r3, r7, r3
 801a79a:	daf6      	bge.n	801a78a <localtime_r+0xaa>
 801a79c:	2301      	movs	r3, #1
 801a79e:	6223      	str	r3, [r4, #32]
 801a7a0:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801a7a4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801a7a8:	203c      	movs	r0, #60	; 0x3c
 801a7aa:	fb91 f6f3 	sdiv	r6, r1, r3
 801a7ae:	fb03 1316 	mls	r3, r3, r6, r1
 801a7b2:	6861      	ldr	r1, [r4, #4]
 801a7b4:	fb93 f2f0 	sdiv	r2, r3, r0
 801a7b8:	fb00 3012 	mls	r0, r0, r2, r3
 801a7bc:	6823      	ldr	r3, [r4, #0]
 801a7be:	1a89      	subs	r1, r1, r2
 801a7c0:	68a2      	ldr	r2, [r4, #8]
 801a7c2:	6061      	str	r1, [r4, #4]
 801a7c4:	1a1b      	subs	r3, r3, r0
 801a7c6:	1b92      	subs	r2, r2, r6
 801a7c8:	2b3b      	cmp	r3, #59	; 0x3b
 801a7ca:	6023      	str	r3, [r4, #0]
 801a7cc:	60a2      	str	r2, [r4, #8]
 801a7ce:	dd35      	ble.n	801a83c <localtime_r+0x15c>
 801a7d0:	3101      	adds	r1, #1
 801a7d2:	6061      	str	r1, [r4, #4]
 801a7d4:	3b3c      	subs	r3, #60	; 0x3c
 801a7d6:	6023      	str	r3, [r4, #0]
 801a7d8:	6863      	ldr	r3, [r4, #4]
 801a7da:	2b3b      	cmp	r3, #59	; 0x3b
 801a7dc:	dd34      	ble.n	801a848 <localtime_r+0x168>
 801a7de:	3201      	adds	r2, #1
 801a7e0:	60a2      	str	r2, [r4, #8]
 801a7e2:	3b3c      	subs	r3, #60	; 0x3c
 801a7e4:	6063      	str	r3, [r4, #4]
 801a7e6:	68a3      	ldr	r3, [r4, #8]
 801a7e8:	2b17      	cmp	r3, #23
 801a7ea:	dd33      	ble.n	801a854 <localtime_r+0x174>
 801a7ec:	69e2      	ldr	r2, [r4, #28]
 801a7ee:	3201      	adds	r2, #1
 801a7f0:	61e2      	str	r2, [r4, #28]
 801a7f2:	69a2      	ldr	r2, [r4, #24]
 801a7f4:	3201      	adds	r2, #1
 801a7f6:	2a06      	cmp	r2, #6
 801a7f8:	bfc8      	it	gt
 801a7fa:	2200      	movgt	r2, #0
 801a7fc:	61a2      	str	r2, [r4, #24]
 801a7fe:	68e2      	ldr	r2, [r4, #12]
 801a800:	3b18      	subs	r3, #24
 801a802:	3201      	adds	r2, #1
 801a804:	60a3      	str	r3, [r4, #8]
 801a806:	6923      	ldr	r3, [r4, #16]
 801a808:	60e2      	str	r2, [r4, #12]
 801a80a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801a80e:	428a      	cmp	r2, r1
 801a810:	dd0e      	ble.n	801a830 <localtime_r+0x150>
 801a812:	2b0b      	cmp	r3, #11
 801a814:	eba2 0201 	sub.w	r2, r2, r1
 801a818:	60e2      	str	r2, [r4, #12]
 801a81a:	f103 0201 	add.w	r2, r3, #1
 801a81e:	bf09      	itett	eq
 801a820:	6963      	ldreq	r3, [r4, #20]
 801a822:	6122      	strne	r2, [r4, #16]
 801a824:	2200      	moveq	r2, #0
 801a826:	3301      	addeq	r3, #1
 801a828:	bf02      	ittt	eq
 801a82a:	6122      	streq	r2, [r4, #16]
 801a82c:	6163      	streq	r3, [r4, #20]
 801a82e:	61e2      	streq	r2, [r4, #28]
 801a830:	f001 fedc 	bl	801c5ec <__tz_unlock>
 801a834:	4620      	mov	r0, r4
 801a836:	b002      	add	sp, #8
 801a838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	dacb      	bge.n	801a7d8 <localtime_r+0xf8>
 801a840:	3901      	subs	r1, #1
 801a842:	6061      	str	r1, [r4, #4]
 801a844:	333c      	adds	r3, #60	; 0x3c
 801a846:	e7c6      	b.n	801a7d6 <localtime_r+0xf6>
 801a848:	2b00      	cmp	r3, #0
 801a84a:	dacc      	bge.n	801a7e6 <localtime_r+0x106>
 801a84c:	3a01      	subs	r2, #1
 801a84e:	60a2      	str	r2, [r4, #8]
 801a850:	333c      	adds	r3, #60	; 0x3c
 801a852:	e7c7      	b.n	801a7e4 <localtime_r+0x104>
 801a854:	2b00      	cmp	r3, #0
 801a856:	daeb      	bge.n	801a830 <localtime_r+0x150>
 801a858:	69e2      	ldr	r2, [r4, #28]
 801a85a:	3a01      	subs	r2, #1
 801a85c:	61e2      	str	r2, [r4, #28]
 801a85e:	69a2      	ldr	r2, [r4, #24]
 801a860:	3a01      	subs	r2, #1
 801a862:	bf48      	it	mi
 801a864:	2206      	movmi	r2, #6
 801a866:	61a2      	str	r2, [r4, #24]
 801a868:	68e2      	ldr	r2, [r4, #12]
 801a86a:	3318      	adds	r3, #24
 801a86c:	3a01      	subs	r2, #1
 801a86e:	60e2      	str	r2, [r4, #12]
 801a870:	60a3      	str	r3, [r4, #8]
 801a872:	2a00      	cmp	r2, #0
 801a874:	d1dc      	bne.n	801a830 <localtime_r+0x150>
 801a876:	6923      	ldr	r3, [r4, #16]
 801a878:	3b01      	subs	r3, #1
 801a87a:	d405      	bmi.n	801a888 <localtime_r+0x1a8>
 801a87c:	6123      	str	r3, [r4, #16]
 801a87e:	6923      	ldr	r3, [r4, #16]
 801a880:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801a884:	60e3      	str	r3, [r4, #12]
 801a886:	e7d3      	b.n	801a830 <localtime_r+0x150>
 801a888:	230b      	movs	r3, #11
 801a88a:	6123      	str	r3, [r4, #16]
 801a88c:	6963      	ldr	r3, [r4, #20]
 801a88e:	1e5a      	subs	r2, r3, #1
 801a890:	6162      	str	r2, [r4, #20]
 801a892:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801a896:	0793      	lsls	r3, r2, #30
 801a898:	d105      	bne.n	801a8a6 <localtime_r+0x1c6>
 801a89a:	2164      	movs	r1, #100	; 0x64
 801a89c:	fb92 f3f1 	sdiv	r3, r2, r1
 801a8a0:	fb01 2313 	mls	r3, r1, r3, r2
 801a8a4:	b963      	cbnz	r3, 801a8c0 <localtime_r+0x1e0>
 801a8a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a8aa:	fb92 f3f1 	sdiv	r3, r2, r1
 801a8ae:	fb01 2313 	mls	r3, r1, r3, r2
 801a8b2:	fab3 f383 	clz	r3, r3
 801a8b6:	095b      	lsrs	r3, r3, #5
 801a8b8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801a8bc:	61e3      	str	r3, [r4, #28]
 801a8be:	e7de      	b.n	801a87e <localtime_r+0x19e>
 801a8c0:	2301      	movs	r3, #1
 801a8c2:	e7f9      	b.n	801a8b8 <localtime_r+0x1d8>
 801a8c4:	08028eb0 	.word	0x08028eb0
 801a8c8:	2000504c 	.word	0x2000504c

0801a8cc <memcmp>:
 801a8cc:	b530      	push	{r4, r5, lr}
 801a8ce:	3901      	subs	r1, #1
 801a8d0:	2400      	movs	r4, #0
 801a8d2:	42a2      	cmp	r2, r4
 801a8d4:	d101      	bne.n	801a8da <memcmp+0xe>
 801a8d6:	2000      	movs	r0, #0
 801a8d8:	e005      	b.n	801a8e6 <memcmp+0x1a>
 801a8da:	5d03      	ldrb	r3, [r0, r4]
 801a8dc:	3401      	adds	r4, #1
 801a8de:	5d0d      	ldrb	r5, [r1, r4]
 801a8e0:	42ab      	cmp	r3, r5
 801a8e2:	d0f6      	beq.n	801a8d2 <memcmp+0x6>
 801a8e4:	1b58      	subs	r0, r3, r5
 801a8e6:	bd30      	pop	{r4, r5, pc}

0801a8e8 <memcpy>:
 801a8e8:	440a      	add	r2, r1
 801a8ea:	4291      	cmp	r1, r2
 801a8ec:	f100 33ff 	add.w	r3, r0, #4294967295
 801a8f0:	d100      	bne.n	801a8f4 <memcpy+0xc>
 801a8f2:	4770      	bx	lr
 801a8f4:	b510      	push	{r4, lr}
 801a8f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a8fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a8fe:	4291      	cmp	r1, r2
 801a900:	d1f9      	bne.n	801a8f6 <memcpy+0xe>
 801a902:	bd10      	pop	{r4, pc}

0801a904 <memmove>:
 801a904:	4288      	cmp	r0, r1
 801a906:	b510      	push	{r4, lr}
 801a908:	eb01 0402 	add.w	r4, r1, r2
 801a90c:	d902      	bls.n	801a914 <memmove+0x10>
 801a90e:	4284      	cmp	r4, r0
 801a910:	4623      	mov	r3, r4
 801a912:	d807      	bhi.n	801a924 <memmove+0x20>
 801a914:	1e43      	subs	r3, r0, #1
 801a916:	42a1      	cmp	r1, r4
 801a918:	d008      	beq.n	801a92c <memmove+0x28>
 801a91a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a91e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a922:	e7f8      	b.n	801a916 <memmove+0x12>
 801a924:	4402      	add	r2, r0
 801a926:	4601      	mov	r1, r0
 801a928:	428a      	cmp	r2, r1
 801a92a:	d100      	bne.n	801a92e <memmove+0x2a>
 801a92c:	bd10      	pop	{r4, pc}
 801a92e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a936:	e7f7      	b.n	801a928 <memmove+0x24>

0801a938 <memset>:
 801a938:	4402      	add	r2, r0
 801a93a:	4603      	mov	r3, r0
 801a93c:	4293      	cmp	r3, r2
 801a93e:	d100      	bne.n	801a942 <memset+0xa>
 801a940:	4770      	bx	lr
 801a942:	f803 1b01 	strb.w	r1, [r3], #1
 801a946:	e7f9      	b.n	801a93c <memset+0x4>

0801a948 <validate_structure>:
 801a948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a94a:	6801      	ldr	r1, [r0, #0]
 801a94c:	293b      	cmp	r1, #59	; 0x3b
 801a94e:	4604      	mov	r4, r0
 801a950:	d911      	bls.n	801a976 <validate_structure+0x2e>
 801a952:	223c      	movs	r2, #60	; 0x3c
 801a954:	4668      	mov	r0, sp
 801a956:	f003 fab1 	bl	801debc <div>
 801a95a:	9a01      	ldr	r2, [sp, #4]
 801a95c:	6863      	ldr	r3, [r4, #4]
 801a95e:	9900      	ldr	r1, [sp, #0]
 801a960:	2a00      	cmp	r2, #0
 801a962:	440b      	add	r3, r1
 801a964:	6063      	str	r3, [r4, #4]
 801a966:	bfbb      	ittet	lt
 801a968:	323c      	addlt	r2, #60	; 0x3c
 801a96a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a96e:	6022      	strge	r2, [r4, #0]
 801a970:	6022      	strlt	r2, [r4, #0]
 801a972:	bfb8      	it	lt
 801a974:	6063      	strlt	r3, [r4, #4]
 801a976:	6861      	ldr	r1, [r4, #4]
 801a978:	293b      	cmp	r1, #59	; 0x3b
 801a97a:	d911      	bls.n	801a9a0 <validate_structure+0x58>
 801a97c:	223c      	movs	r2, #60	; 0x3c
 801a97e:	4668      	mov	r0, sp
 801a980:	f003 fa9c 	bl	801debc <div>
 801a984:	9a01      	ldr	r2, [sp, #4]
 801a986:	68a3      	ldr	r3, [r4, #8]
 801a988:	9900      	ldr	r1, [sp, #0]
 801a98a:	2a00      	cmp	r2, #0
 801a98c:	440b      	add	r3, r1
 801a98e:	60a3      	str	r3, [r4, #8]
 801a990:	bfbb      	ittet	lt
 801a992:	323c      	addlt	r2, #60	; 0x3c
 801a994:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a998:	6062      	strge	r2, [r4, #4]
 801a99a:	6062      	strlt	r2, [r4, #4]
 801a99c:	bfb8      	it	lt
 801a99e:	60a3      	strlt	r3, [r4, #8]
 801a9a0:	68a1      	ldr	r1, [r4, #8]
 801a9a2:	2917      	cmp	r1, #23
 801a9a4:	d911      	bls.n	801a9ca <validate_structure+0x82>
 801a9a6:	2218      	movs	r2, #24
 801a9a8:	4668      	mov	r0, sp
 801a9aa:	f003 fa87 	bl	801debc <div>
 801a9ae:	9a01      	ldr	r2, [sp, #4]
 801a9b0:	68e3      	ldr	r3, [r4, #12]
 801a9b2:	9900      	ldr	r1, [sp, #0]
 801a9b4:	2a00      	cmp	r2, #0
 801a9b6:	440b      	add	r3, r1
 801a9b8:	60e3      	str	r3, [r4, #12]
 801a9ba:	bfbb      	ittet	lt
 801a9bc:	3218      	addlt	r2, #24
 801a9be:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a9c2:	60a2      	strge	r2, [r4, #8]
 801a9c4:	60a2      	strlt	r2, [r4, #8]
 801a9c6:	bfb8      	it	lt
 801a9c8:	60e3      	strlt	r3, [r4, #12]
 801a9ca:	6921      	ldr	r1, [r4, #16]
 801a9cc:	290b      	cmp	r1, #11
 801a9ce:	d911      	bls.n	801a9f4 <validate_structure+0xac>
 801a9d0:	220c      	movs	r2, #12
 801a9d2:	4668      	mov	r0, sp
 801a9d4:	f003 fa72 	bl	801debc <div>
 801a9d8:	9a01      	ldr	r2, [sp, #4]
 801a9da:	6963      	ldr	r3, [r4, #20]
 801a9dc:	9900      	ldr	r1, [sp, #0]
 801a9de:	2a00      	cmp	r2, #0
 801a9e0:	440b      	add	r3, r1
 801a9e2:	6163      	str	r3, [r4, #20]
 801a9e4:	bfbb      	ittet	lt
 801a9e6:	320c      	addlt	r2, #12
 801a9e8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801a9ec:	6122      	strge	r2, [r4, #16]
 801a9ee:	6122      	strlt	r2, [r4, #16]
 801a9f0:	bfb8      	it	lt
 801a9f2:	6163      	strlt	r3, [r4, #20]
 801a9f4:	6963      	ldr	r3, [r4, #20]
 801a9f6:	0799      	lsls	r1, r3, #30
 801a9f8:	d120      	bne.n	801aa3c <validate_structure+0xf4>
 801a9fa:	2164      	movs	r1, #100	; 0x64
 801a9fc:	fb93 f2f1 	sdiv	r2, r3, r1
 801aa00:	fb01 3212 	mls	r2, r1, r2, r3
 801aa04:	b9e2      	cbnz	r2, 801aa40 <validate_structure+0xf8>
 801aa06:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801aa0a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801aa0e:	fb93 f2f1 	sdiv	r2, r3, r1
 801aa12:	fb01 3312 	mls	r3, r1, r2, r3
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	bf14      	ite	ne
 801aa1a:	231c      	movne	r3, #28
 801aa1c:	231d      	moveq	r3, #29
 801aa1e:	68e2      	ldr	r2, [r4, #12]
 801aa20:	2a00      	cmp	r2, #0
 801aa22:	dc0f      	bgt.n	801aa44 <validate_structure+0xfc>
 801aa24:	4f33      	ldr	r7, [pc, #204]	; (801aaf4 <validate_structure+0x1ac>)
 801aa26:	260b      	movs	r6, #11
 801aa28:	2064      	movs	r0, #100	; 0x64
 801aa2a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801aa2e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801aa32:	f1bc 0f00 	cmp.w	ip, #0
 801aa36:	dd31      	ble.n	801aa9c <validate_structure+0x154>
 801aa38:	b003      	add	sp, #12
 801aa3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa3c:	231c      	movs	r3, #28
 801aa3e:	e7ee      	b.n	801aa1e <validate_structure+0xd6>
 801aa40:	231d      	movs	r3, #29
 801aa42:	e7ec      	b.n	801aa1e <validate_structure+0xd6>
 801aa44:	4f2b      	ldr	r7, [pc, #172]	; (801aaf4 <validate_structure+0x1ac>)
 801aa46:	f04f 0c00 	mov.w	ip, #0
 801aa4a:	2564      	movs	r5, #100	; 0x64
 801aa4c:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801aa50:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801aa54:	2a01      	cmp	r2, #1
 801aa56:	bf14      	ite	ne
 801aa58:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801aa5c:	4618      	moveq	r0, r3
 801aa5e:	4281      	cmp	r1, r0
 801aa60:	ddea      	ble.n	801aa38 <validate_structure+0xf0>
 801aa62:	3201      	adds	r2, #1
 801aa64:	1a09      	subs	r1, r1, r0
 801aa66:	2a0c      	cmp	r2, #12
 801aa68:	60e1      	str	r1, [r4, #12]
 801aa6a:	6122      	str	r2, [r4, #16]
 801aa6c:	d1f0      	bne.n	801aa50 <validate_structure+0x108>
 801aa6e:	6963      	ldr	r3, [r4, #20]
 801aa70:	1c5a      	adds	r2, r3, #1
 801aa72:	0791      	lsls	r1, r2, #30
 801aa74:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801aa78:	d137      	bne.n	801aaea <validate_structure+0x1a2>
 801aa7a:	fb92 f1f5 	sdiv	r1, r2, r5
 801aa7e:	fb05 2211 	mls	r2, r5, r1, r2
 801aa82:	2a00      	cmp	r2, #0
 801aa84:	d133      	bne.n	801aaee <validate_structure+0x1a6>
 801aa86:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801aa8a:	fb93 f2f6 	sdiv	r2, r3, r6
 801aa8e:	fb06 3312 	mls	r3, r6, r2, r3
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	bf14      	ite	ne
 801aa96:	231c      	movne	r3, #28
 801aa98:	231d      	moveq	r3, #29
 801aa9a:	e7d9      	b.n	801aa50 <validate_structure+0x108>
 801aa9c:	6921      	ldr	r1, [r4, #16]
 801aa9e:	3901      	subs	r1, #1
 801aaa0:	6121      	str	r1, [r4, #16]
 801aaa2:	3101      	adds	r1, #1
 801aaa4:	d114      	bne.n	801aad0 <validate_structure+0x188>
 801aaa6:	6963      	ldr	r3, [r4, #20]
 801aaa8:	1e59      	subs	r1, r3, #1
 801aaaa:	078a      	lsls	r2, r1, #30
 801aaac:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801aab0:	d117      	bne.n	801aae2 <validate_structure+0x19a>
 801aab2:	fb91 f2f0 	sdiv	r2, r1, r0
 801aab6:	fb00 1112 	mls	r1, r0, r2, r1
 801aaba:	b9a1      	cbnz	r1, 801aae6 <validate_structure+0x19e>
 801aabc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801aac0:	fb93 f2f5 	sdiv	r2, r3, r5
 801aac4:	fb05 3312 	mls	r3, r5, r2, r3
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	bf14      	ite	ne
 801aacc:	231c      	movne	r3, #28
 801aace:	231d      	moveq	r3, #29
 801aad0:	6922      	ldr	r2, [r4, #16]
 801aad2:	2a01      	cmp	r2, #1
 801aad4:	bf14      	ite	ne
 801aad6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801aada:	461a      	moveq	r2, r3
 801aadc:	4462      	add	r2, ip
 801aade:	60e2      	str	r2, [r4, #12]
 801aae0:	e7a5      	b.n	801aa2e <validate_structure+0xe6>
 801aae2:	231c      	movs	r3, #28
 801aae4:	e7f4      	b.n	801aad0 <validate_structure+0x188>
 801aae6:	231d      	movs	r3, #29
 801aae8:	e7f2      	b.n	801aad0 <validate_structure+0x188>
 801aaea:	231c      	movs	r3, #28
 801aaec:	e7b0      	b.n	801aa50 <validate_structure+0x108>
 801aaee:	231d      	movs	r3, #29
 801aaf0:	e7ae      	b.n	801aa50 <validate_structure+0x108>
 801aaf2:	bf00      	nop
 801aaf4:	08028e50 	.word	0x08028e50

0801aaf8 <mktime>:
 801aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aafc:	b08b      	sub	sp, #44	; 0x2c
 801aafe:	4605      	mov	r5, r0
 801ab00:	f004 fb04 	bl	801f10c <__gettzinfo>
 801ab04:	4607      	mov	r7, r0
 801ab06:	4628      	mov	r0, r5
 801ab08:	f7ff ff1e 	bl	801a948 <validate_structure>
 801ab0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ab10:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801ab14:	68a8      	ldr	r0, [r5, #8]
 801ab16:	696e      	ldr	r6, [r5, #20]
 801ab18:	fb0a 2303 	mla	r3, sl, r3, r2
 801ab1c:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801ab20:	fb0a 3a00 	mla	sl, sl, r0, r3
 801ab24:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801ab28:	4ac3      	ldr	r2, [pc, #780]	; (801ae38 <mktime+0x340>)
 801ab2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801ab2e:	3c01      	subs	r4, #1
 801ab30:	2b01      	cmp	r3, #1
 801ab32:	4414      	add	r4, r2
 801ab34:	dd11      	ble.n	801ab5a <mktime+0x62>
 801ab36:	07b1      	lsls	r1, r6, #30
 801ab38:	d10f      	bne.n	801ab5a <mktime+0x62>
 801ab3a:	2264      	movs	r2, #100	; 0x64
 801ab3c:	fb96 f3f2 	sdiv	r3, r6, r2
 801ab40:	fb02 6313 	mls	r3, r2, r3, r6
 801ab44:	b943      	cbnz	r3, 801ab58 <mktime+0x60>
 801ab46:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801ab4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801ab4e:	fb91 f3f2 	sdiv	r3, r1, r2
 801ab52:	fb02 1313 	mls	r3, r2, r3, r1
 801ab56:	b903      	cbnz	r3, 801ab5a <mktime+0x62>
 801ab58:	3401      	adds	r4, #1
 801ab5a:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801ab5e:	3310      	adds	r3, #16
 801ab60:	f644 6220 	movw	r2, #20000	; 0x4e20
 801ab64:	4293      	cmp	r3, r2
 801ab66:	61ec      	str	r4, [r5, #28]
 801ab68:	f200 8161 	bhi.w	801ae2e <mktime+0x336>
 801ab6c:	2e46      	cmp	r6, #70	; 0x46
 801ab6e:	dd77      	ble.n	801ac60 <mktime+0x168>
 801ab70:	2346      	movs	r3, #70	; 0x46
 801ab72:	f240 1e6d 	movw	lr, #365	; 0x16d
 801ab76:	2164      	movs	r1, #100	; 0x64
 801ab78:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801ab7c:	079a      	lsls	r2, r3, #30
 801ab7e:	d169      	bne.n	801ac54 <mktime+0x15c>
 801ab80:	fb93 f2f1 	sdiv	r2, r3, r1
 801ab84:	fb01 3212 	mls	r2, r1, r2, r3
 801ab88:	2a00      	cmp	r2, #0
 801ab8a:	d166      	bne.n	801ac5a <mktime+0x162>
 801ab8c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801ab90:	fb9c f2f0 	sdiv	r2, ip, r0
 801ab94:	fb00 c212 	mls	r2, r0, r2, ip
 801ab98:	2a00      	cmp	r2, #0
 801ab9a:	bf14      	ite	ne
 801ab9c:	4672      	movne	r2, lr
 801ab9e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801aba2:	3301      	adds	r3, #1
 801aba4:	429e      	cmp	r6, r3
 801aba6:	4414      	add	r4, r2
 801aba8:	d1e8      	bne.n	801ab7c <mktime+0x84>
 801abaa:	4ba4      	ldr	r3, [pc, #656]	; (801ae3c <mktime+0x344>)
 801abac:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801abb0:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801abb4:	f001 fd14 	bl	801c5e0 <__tz_lock>
 801abb8:	f001 fd1e 	bl	801c5f8 <_tzset_unlocked>
 801abbc:	4ba0      	ldr	r3, [pc, #640]	; (801ae40 <mktime+0x348>)
 801abbe:	f8d3 9000 	ldr.w	r9, [r3]
 801abc2:	f1b9 0f00 	cmp.w	r9, #0
 801abc6:	d03f      	beq.n	801ac48 <mktime+0x150>
 801abc8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801abcc:	6968      	ldr	r0, [r5, #20]
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	f1b9 0f01 	cmp.w	r9, #1
 801abd4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801abd8:	46c8      	mov	r8, r9
 801abda:	bfa8      	it	ge
 801abdc:	f04f 0801 	movge.w	r8, #1
 801abe0:	4283      	cmp	r3, r0
 801abe2:	d17f      	bne.n	801ace4 <mktime+0x1ec>
 801abe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801abe6:	4619      	mov	r1, r3
 801abe8:	17da      	asrs	r2, r3, #31
 801abea:	e9cd 1200 	strd	r1, r2, [sp]
 801abee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801abf2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801abf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801abfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801abfc:	1a80      	subs	r0, r0, r2
 801abfe:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801ac02:	4582      	cmp	sl, r0
 801ac04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ac08:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ac0c:	da71      	bge.n	801acf2 <mktime+0x1fa>
 801ac0e:	9800      	ldr	r0, [sp, #0]
 801ac10:	6a39      	ldr	r1, [r7, #32]
 801ac12:	1a09      	subs	r1, r1, r0
 801ac14:	9104      	str	r1, [sp, #16]
 801ac16:	9801      	ldr	r0, [sp, #4]
 801ac18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ac1a:	eb61 0100 	sbc.w	r1, r1, r0
 801ac1e:	9105      	str	r1, [sp, #20]
 801ac20:	6839      	ldr	r1, [r7, #0]
 801ac22:	2900      	cmp	r1, #0
 801ac24:	d075      	beq.n	801ad12 <mktime+0x21a>
 801ac26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ac2a:	4582      	cmp	sl, r0
 801ac2c:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ac30:	db05      	blt.n	801ac3e <mktime+0x146>
 801ac32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ac36:	4582      	cmp	sl, r0
 801ac38:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ac3c:	db6f      	blt.n	801ad1e <mktime+0x226>
 801ac3e:	f1b9 0f00 	cmp.w	r9, #0
 801ac42:	f04f 0900 	mov.w	r9, #0
 801ac46:	da6f      	bge.n	801ad28 <mktime+0x230>
 801ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac4a:	eb1a 0a03 	adds.w	sl, sl, r3
 801ac4e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801ac52:	e0ae      	b.n	801adb2 <mktime+0x2ba>
 801ac54:	f240 126d 	movw	r2, #365	; 0x16d
 801ac58:	e7a3      	b.n	801aba2 <mktime+0xaa>
 801ac5a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801ac5e:	e7a0      	b.n	801aba2 <mktime+0xaa>
 801ac60:	d0a3      	beq.n	801abaa <mktime+0xb2>
 801ac62:	2345      	movs	r3, #69	; 0x45
 801ac64:	f240 1e6d 	movw	lr, #365	; 0x16d
 801ac68:	2164      	movs	r1, #100	; 0x64
 801ac6a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801ac6e:	e012      	b.n	801ac96 <mktime+0x19e>
 801ac70:	bb62      	cbnz	r2, 801accc <mktime+0x1d4>
 801ac72:	fb93 f2f1 	sdiv	r2, r3, r1
 801ac76:	fb01 3212 	mls	r2, r1, r2, r3
 801ac7a:	bb52      	cbnz	r2, 801acd2 <mktime+0x1da>
 801ac7c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801ac80:	fb9c f2f0 	sdiv	r2, ip, r0
 801ac84:	fb00 c212 	mls	r2, r0, r2, ip
 801ac88:	2a00      	cmp	r2, #0
 801ac8a:	bf14      	ite	ne
 801ac8c:	4672      	movne	r2, lr
 801ac8e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801ac92:	1aa4      	subs	r4, r4, r2
 801ac94:	3b01      	subs	r3, #1
 801ac96:	429e      	cmp	r6, r3
 801ac98:	f003 0203 	and.w	r2, r3, #3
 801ac9c:	dbe8      	blt.n	801ac70 <mktime+0x178>
 801ac9e:	b9da      	cbnz	r2, 801acd8 <mktime+0x1e0>
 801aca0:	2264      	movs	r2, #100	; 0x64
 801aca2:	fb96 f3f2 	sdiv	r3, r6, r2
 801aca6:	fb02 6313 	mls	r3, r2, r3, r6
 801acaa:	b9c3      	cbnz	r3, 801acde <mktime+0x1e6>
 801acac:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801acb0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801acb4:	fb91 f3f2 	sdiv	r3, r1, r2
 801acb8:	fb02 1313 	mls	r3, r2, r3, r1
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	f240 136d 	movw	r3, #365	; 0x16d
 801acc2:	bf08      	it	eq
 801acc4:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801acc8:	1ae4      	subs	r4, r4, r3
 801acca:	e76e      	b.n	801abaa <mktime+0xb2>
 801accc:	f240 126d 	movw	r2, #365	; 0x16d
 801acd0:	e7df      	b.n	801ac92 <mktime+0x19a>
 801acd2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801acd6:	e7dc      	b.n	801ac92 <mktime+0x19a>
 801acd8:	f240 136d 	movw	r3, #365	; 0x16d
 801acdc:	e7f4      	b.n	801acc8 <mktime+0x1d0>
 801acde:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801ace2:	e7f1      	b.n	801acc8 <mktime+0x1d0>
 801ace4:	f001 fbd4 	bl	801c490 <__tzcalc_limits>
 801ace8:	2800      	cmp	r0, #0
 801acea:	f47f af7b 	bne.w	801abe4 <mktime+0xec>
 801acee:	46c1      	mov	r9, r8
 801acf0:	e054      	b.n	801ad9c <mktime+0x2a4>
 801acf2:	9800      	ldr	r0, [sp, #0]
 801acf4:	9902      	ldr	r1, [sp, #8]
 801acf6:	1a09      	subs	r1, r1, r0
 801acf8:	9108      	str	r1, [sp, #32]
 801acfa:	9801      	ldr	r0, [sp, #4]
 801acfc:	9903      	ldr	r1, [sp, #12]
 801acfe:	eb61 0100 	sbc.w	r1, r1, r0
 801ad02:	9109      	str	r1, [sp, #36]	; 0x24
 801ad04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ad08:	4582      	cmp	sl, r0
 801ad0a:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ad0e:	dbee      	blt.n	801acee <mktime+0x1f6>
 801ad10:	e77d      	b.n	801ac0e <mktime+0x116>
 801ad12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ad16:	4582      	cmp	sl, r0
 801ad18:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ad1c:	db89      	blt.n	801ac32 <mktime+0x13a>
 801ad1e:	f1b9 0f00 	cmp.w	r9, #0
 801ad22:	db3f      	blt.n	801ada4 <mktime+0x2ac>
 801ad24:	f04f 0901 	mov.w	r9, #1
 801ad28:	ea88 0809 	eor.w	r8, r8, r9
 801ad2c:	f1b8 0f01 	cmp.w	r8, #1
 801ad30:	d134      	bne.n	801ad9c <mktime+0x2a4>
 801ad32:	f1b9 0f00 	cmp.w	r9, #0
 801ad36:	d04f      	beq.n	801add8 <mktime+0x2e0>
 801ad38:	1ad3      	subs	r3, r2, r3
 801ad3a:	682a      	ldr	r2, [r5, #0]
 801ad3c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801ad40:	441a      	add	r2, r3
 801ad42:	eb1a 0a03 	adds.w	sl, sl, r3
 801ad46:	602a      	str	r2, [r5, #0]
 801ad48:	4628      	mov	r0, r5
 801ad4a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801ad4e:	f7ff fdfb 	bl	801a948 <validate_structure>
 801ad52:	68ea      	ldr	r2, [r5, #12]
 801ad54:	ebb2 0208 	subs.w	r2, r2, r8
 801ad58:	d020      	beq.n	801ad9c <mktime+0x2a4>
 801ad5a:	2a01      	cmp	r2, #1
 801ad5c:	dc3e      	bgt.n	801addc <mktime+0x2e4>
 801ad5e:	1c90      	adds	r0, r2, #2
 801ad60:	bfd8      	it	le
 801ad62:	2201      	movle	r2, #1
 801ad64:	69eb      	ldr	r3, [r5, #28]
 801ad66:	18d3      	adds	r3, r2, r3
 801ad68:	4414      	add	r4, r2
 801ad6a:	d540      	bpl.n	801adee <mktime+0x2f6>
 801ad6c:	1e72      	subs	r2, r6, #1
 801ad6e:	0791      	lsls	r1, r2, #30
 801ad70:	d137      	bne.n	801ade2 <mktime+0x2ea>
 801ad72:	2164      	movs	r1, #100	; 0x64
 801ad74:	fb92 f3f1 	sdiv	r3, r2, r1
 801ad78:	fb01 2313 	mls	r3, r1, r3, r2
 801ad7c:	bba3      	cbnz	r3, 801ade8 <mktime+0x2f0>
 801ad7e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801ad82:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801ad86:	fb96 f3f2 	sdiv	r3, r6, r2
 801ad8a:	fb02 6613 	mls	r6, r2, r3, r6
 801ad8e:	2e00      	cmp	r6, #0
 801ad90:	f240 136d 	movw	r3, #365	; 0x16d
 801ad94:	bf18      	it	ne
 801ad96:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801ad9a:	61eb      	str	r3, [r5, #28]
 801ad9c:	f1b9 0f01 	cmp.w	r9, #1
 801ada0:	f47f af52 	bne.w	801ac48 <mktime+0x150>
 801ada4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ada6:	eb1a 0a03 	adds.w	sl, sl, r3
 801adaa:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801adae:	f04f 0901 	mov.w	r9, #1
 801adb2:	f001 fc1b 	bl	801c5ec <__tz_unlock>
 801adb6:	3404      	adds	r4, #4
 801adb8:	2307      	movs	r3, #7
 801adba:	fb94 f3f3 	sdiv	r3, r4, r3
 801adbe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801adc2:	1ae4      	subs	r4, r4, r3
 801adc4:	bf48      	it	mi
 801adc6:	3407      	addmi	r4, #7
 801adc8:	f8c5 9020 	str.w	r9, [r5, #32]
 801adcc:	61ac      	str	r4, [r5, #24]
 801adce:	4650      	mov	r0, sl
 801add0:	4659      	mov	r1, fp
 801add2:	b00b      	add	sp, #44	; 0x2c
 801add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801add8:	1a9b      	subs	r3, r3, r2
 801adda:	e7ae      	b.n	801ad3a <mktime+0x242>
 801addc:	f04f 32ff 	mov.w	r2, #4294967295
 801ade0:	e7c0      	b.n	801ad64 <mktime+0x26c>
 801ade2:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801ade6:	e7d8      	b.n	801ad9a <mktime+0x2a2>
 801ade8:	f240 136d 	movw	r3, #365	; 0x16d
 801adec:	e7d5      	b.n	801ad9a <mktime+0x2a2>
 801adee:	07b2      	lsls	r2, r6, #30
 801adf0:	d117      	bne.n	801ae22 <mktime+0x32a>
 801adf2:	2164      	movs	r1, #100	; 0x64
 801adf4:	fb96 f2f1 	sdiv	r2, r6, r1
 801adf8:	fb01 6212 	mls	r2, r1, r2, r6
 801adfc:	b9a2      	cbnz	r2, 801ae28 <mktime+0x330>
 801adfe:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801ae02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801ae06:	fb96 f2f1 	sdiv	r2, r6, r1
 801ae0a:	fb01 6612 	mls	r6, r1, r2, r6
 801ae0e:	2e00      	cmp	r6, #0
 801ae10:	f240 126d 	movw	r2, #365	; 0x16d
 801ae14:	bf08      	it	eq
 801ae16:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801ae1a:	4293      	cmp	r3, r2
 801ae1c:	bfa8      	it	ge
 801ae1e:	1a9b      	subge	r3, r3, r2
 801ae20:	e7bb      	b.n	801ad9a <mktime+0x2a2>
 801ae22:	f240 126d 	movw	r2, #365	; 0x16d
 801ae26:	e7f8      	b.n	801ae1a <mktime+0x322>
 801ae28:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801ae2c:	e7f5      	b.n	801ae1a <mktime+0x322>
 801ae2e:	f04f 3aff 	mov.w	sl, #4294967295
 801ae32:	f04f 3bff 	mov.w	fp, #4294967295
 801ae36:	e7ca      	b.n	801adce <mktime+0x2d6>
 801ae38:	08028e80 	.word	0x08028e80
 801ae3c:	00015180 	.word	0x00015180
 801ae40:	2000504c 	.word	0x2000504c

0801ae44 <printf>:
 801ae44:	b40f      	push	{r0, r1, r2, r3}
 801ae46:	b507      	push	{r0, r1, r2, lr}
 801ae48:	4906      	ldr	r1, [pc, #24]	; (801ae64 <printf+0x20>)
 801ae4a:	ab04      	add	r3, sp, #16
 801ae4c:	6808      	ldr	r0, [r1, #0]
 801ae4e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae52:	6881      	ldr	r1, [r0, #8]
 801ae54:	9301      	str	r3, [sp, #4]
 801ae56:	f001 fd53 	bl	801c900 <_vfprintf_r>
 801ae5a:	b003      	add	sp, #12
 801ae5c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae60:	b004      	add	sp, #16
 801ae62:	4770      	bx	lr
 801ae64:	20000038 	.word	0x20000038

0801ae68 <rand>:
 801ae68:	4b0b      	ldr	r3, [pc, #44]	; (801ae98 <rand+0x30>)
 801ae6a:	480c      	ldr	r0, [pc, #48]	; (801ae9c <rand+0x34>)
 801ae6c:	6819      	ldr	r1, [r3, #0]
 801ae6e:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 801ae72:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 801ae76:	b510      	push	{r4, lr}
 801ae78:	4c09      	ldr	r4, [pc, #36]	; (801aea0 <rand+0x38>)
 801ae7a:	4350      	muls	r0, r2
 801ae7c:	fb04 0003 	mla	r0, r4, r3, r0
 801ae80:	fba2 3404 	umull	r3, r4, r2, r4
 801ae84:	1c5a      	adds	r2, r3, #1
 801ae86:	4404      	add	r4, r0
 801ae88:	f144 0000 	adc.w	r0, r4, #0
 801ae8c:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
 801ae90:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ae94:	bd10      	pop	{r4, pc}
 801ae96:	bf00      	nop
 801ae98:	20000038 	.word	0x20000038
 801ae9c:	5851f42d 	.word	0x5851f42d
 801aea0:	4c957f2d 	.word	0x4c957f2d

0801aea4 <snprintf>:
 801aea4:	b40c      	push	{r2, r3}
 801aea6:	b530      	push	{r4, r5, lr}
 801aea8:	4b17      	ldr	r3, [pc, #92]	; (801af08 <snprintf+0x64>)
 801aeaa:	1e0c      	subs	r4, r1, #0
 801aeac:	681d      	ldr	r5, [r3, #0]
 801aeae:	b09d      	sub	sp, #116	; 0x74
 801aeb0:	da08      	bge.n	801aec4 <snprintf+0x20>
 801aeb2:	238b      	movs	r3, #139	; 0x8b
 801aeb4:	602b      	str	r3, [r5, #0]
 801aeb6:	f04f 30ff 	mov.w	r0, #4294967295
 801aeba:	b01d      	add	sp, #116	; 0x74
 801aebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aec0:	b002      	add	sp, #8
 801aec2:	4770      	bx	lr
 801aec4:	f44f 7302 	mov.w	r3, #520	; 0x208
 801aec8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aecc:	bf14      	ite	ne
 801aece:	f104 33ff 	addne.w	r3, r4, #4294967295
 801aed2:	4623      	moveq	r3, r4
 801aed4:	9304      	str	r3, [sp, #16]
 801aed6:	9307      	str	r3, [sp, #28]
 801aed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aedc:	9002      	str	r0, [sp, #8]
 801aede:	9006      	str	r0, [sp, #24]
 801aee0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aee4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801aee6:	ab21      	add	r3, sp, #132	; 0x84
 801aee8:	a902      	add	r1, sp, #8
 801aeea:	4628      	mov	r0, r5
 801aeec:	9301      	str	r3, [sp, #4]
 801aeee:	f000 f8ef 	bl	801b0d0 <_svfprintf_r>
 801aef2:	1c43      	adds	r3, r0, #1
 801aef4:	bfbc      	itt	lt
 801aef6:	238b      	movlt	r3, #139	; 0x8b
 801aef8:	602b      	strlt	r3, [r5, #0]
 801aefa:	2c00      	cmp	r4, #0
 801aefc:	d0dd      	beq.n	801aeba <snprintf+0x16>
 801aefe:	9b02      	ldr	r3, [sp, #8]
 801af00:	2200      	movs	r2, #0
 801af02:	701a      	strb	r2, [r3, #0]
 801af04:	e7d9      	b.n	801aeba <snprintf+0x16>
 801af06:	bf00      	nop
 801af08:	20000038 	.word	0x20000038

0801af0c <sprintf>:
 801af0c:	b40e      	push	{r1, r2, r3}
 801af0e:	b500      	push	{lr}
 801af10:	b09c      	sub	sp, #112	; 0x70
 801af12:	ab1d      	add	r3, sp, #116	; 0x74
 801af14:	9002      	str	r0, [sp, #8]
 801af16:	9006      	str	r0, [sp, #24]
 801af18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801af1c:	4809      	ldr	r0, [pc, #36]	; (801af44 <sprintf+0x38>)
 801af1e:	9107      	str	r1, [sp, #28]
 801af20:	9104      	str	r1, [sp, #16]
 801af22:	4909      	ldr	r1, [pc, #36]	; (801af48 <sprintf+0x3c>)
 801af24:	f853 2b04 	ldr.w	r2, [r3], #4
 801af28:	9105      	str	r1, [sp, #20]
 801af2a:	6800      	ldr	r0, [r0, #0]
 801af2c:	9301      	str	r3, [sp, #4]
 801af2e:	a902      	add	r1, sp, #8
 801af30:	f000 f8ce 	bl	801b0d0 <_svfprintf_r>
 801af34:	9b02      	ldr	r3, [sp, #8]
 801af36:	2200      	movs	r2, #0
 801af38:	701a      	strb	r2, [r3, #0]
 801af3a:	b01c      	add	sp, #112	; 0x70
 801af3c:	f85d eb04 	ldr.w	lr, [sp], #4
 801af40:	b003      	add	sp, #12
 801af42:	4770      	bx	lr
 801af44:	20000038 	.word	0x20000038
 801af48:	ffff0208 	.word	0xffff0208

0801af4c <strchr>:
 801af4c:	b2c9      	uxtb	r1, r1
 801af4e:	4603      	mov	r3, r0
 801af50:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af54:	b11a      	cbz	r2, 801af5e <strchr+0x12>
 801af56:	428a      	cmp	r2, r1
 801af58:	d1f9      	bne.n	801af4e <strchr+0x2>
 801af5a:	4618      	mov	r0, r3
 801af5c:	4770      	bx	lr
 801af5e:	2900      	cmp	r1, #0
 801af60:	bf18      	it	ne
 801af62:	2300      	movne	r3, #0
 801af64:	e7f9      	b.n	801af5a <strchr+0xe>

0801af66 <strncmp>:
 801af66:	b510      	push	{r4, lr}
 801af68:	b16a      	cbz	r2, 801af86 <strncmp+0x20>
 801af6a:	3901      	subs	r1, #1
 801af6c:	1884      	adds	r4, r0, r2
 801af6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801af72:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801af76:	4293      	cmp	r3, r2
 801af78:	d103      	bne.n	801af82 <strncmp+0x1c>
 801af7a:	42a0      	cmp	r0, r4
 801af7c:	d001      	beq.n	801af82 <strncmp+0x1c>
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d1f5      	bne.n	801af6e <strncmp+0x8>
 801af82:	1a98      	subs	r0, r3, r2
 801af84:	bd10      	pop	{r4, pc}
 801af86:	4610      	mov	r0, r2
 801af88:	e7fc      	b.n	801af84 <strncmp+0x1e>

0801af8a <strncpy>:
 801af8a:	b510      	push	{r4, lr}
 801af8c:	3901      	subs	r1, #1
 801af8e:	4603      	mov	r3, r0
 801af90:	b132      	cbz	r2, 801afa0 <strncpy+0x16>
 801af92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801af96:	f803 4b01 	strb.w	r4, [r3], #1
 801af9a:	3a01      	subs	r2, #1
 801af9c:	2c00      	cmp	r4, #0
 801af9e:	d1f7      	bne.n	801af90 <strncpy+0x6>
 801afa0:	441a      	add	r2, r3
 801afa2:	2100      	movs	r1, #0
 801afa4:	4293      	cmp	r3, r2
 801afa6:	d100      	bne.n	801afaa <strncpy+0x20>
 801afa8:	bd10      	pop	{r4, pc}
 801afaa:	f803 1b01 	strb.w	r1, [r3], #1
 801afae:	e7f9      	b.n	801afa4 <strncpy+0x1a>

0801afb0 <_strtol_l.isra.0>:
 801afb0:	2b01      	cmp	r3, #1
 801afb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afb6:	d001      	beq.n	801afbc <_strtol_l.isra.0+0xc>
 801afb8:	2b24      	cmp	r3, #36	; 0x24
 801afba:	d906      	bls.n	801afca <_strtol_l.isra.0+0x1a>
 801afbc:	f003 fdf4 	bl	801eba8 <__errno>
 801afc0:	2316      	movs	r3, #22
 801afc2:	6003      	str	r3, [r0, #0]
 801afc4:	2000      	movs	r0, #0
 801afc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afca:	4f3a      	ldr	r7, [pc, #232]	; (801b0b4 <_strtol_l.isra.0+0x104>)
 801afcc:	468e      	mov	lr, r1
 801afce:	4676      	mov	r6, lr
 801afd0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801afd4:	5de5      	ldrb	r5, [r4, r7]
 801afd6:	f015 0508 	ands.w	r5, r5, #8
 801afda:	d1f8      	bne.n	801afce <_strtol_l.isra.0+0x1e>
 801afdc:	2c2d      	cmp	r4, #45	; 0x2d
 801afde:	d134      	bne.n	801b04a <_strtol_l.isra.0+0x9a>
 801afe0:	f89e 4000 	ldrb.w	r4, [lr]
 801afe4:	f04f 0801 	mov.w	r8, #1
 801afe8:	f106 0e02 	add.w	lr, r6, #2
 801afec:	2b00      	cmp	r3, #0
 801afee:	d05c      	beq.n	801b0aa <_strtol_l.isra.0+0xfa>
 801aff0:	2b10      	cmp	r3, #16
 801aff2:	d10c      	bne.n	801b00e <_strtol_l.isra.0+0x5e>
 801aff4:	2c30      	cmp	r4, #48	; 0x30
 801aff6:	d10a      	bne.n	801b00e <_strtol_l.isra.0+0x5e>
 801aff8:	f89e 4000 	ldrb.w	r4, [lr]
 801affc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b000:	2c58      	cmp	r4, #88	; 0x58
 801b002:	d14d      	bne.n	801b0a0 <_strtol_l.isra.0+0xf0>
 801b004:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b008:	2310      	movs	r3, #16
 801b00a:	f10e 0e02 	add.w	lr, lr, #2
 801b00e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b012:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b016:	2600      	movs	r6, #0
 801b018:	fbbc f9f3 	udiv	r9, ip, r3
 801b01c:	4635      	mov	r5, r6
 801b01e:	fb03 ca19 	mls	sl, r3, r9, ip
 801b022:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b026:	2f09      	cmp	r7, #9
 801b028:	d818      	bhi.n	801b05c <_strtol_l.isra.0+0xac>
 801b02a:	463c      	mov	r4, r7
 801b02c:	42a3      	cmp	r3, r4
 801b02e:	dd24      	ble.n	801b07a <_strtol_l.isra.0+0xca>
 801b030:	2e00      	cmp	r6, #0
 801b032:	db1f      	blt.n	801b074 <_strtol_l.isra.0+0xc4>
 801b034:	45a9      	cmp	r9, r5
 801b036:	d31d      	bcc.n	801b074 <_strtol_l.isra.0+0xc4>
 801b038:	d101      	bne.n	801b03e <_strtol_l.isra.0+0x8e>
 801b03a:	45a2      	cmp	sl, r4
 801b03c:	db1a      	blt.n	801b074 <_strtol_l.isra.0+0xc4>
 801b03e:	fb05 4503 	mla	r5, r5, r3, r4
 801b042:	2601      	movs	r6, #1
 801b044:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b048:	e7eb      	b.n	801b022 <_strtol_l.isra.0+0x72>
 801b04a:	2c2b      	cmp	r4, #43	; 0x2b
 801b04c:	bf08      	it	eq
 801b04e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b052:	46a8      	mov	r8, r5
 801b054:	bf08      	it	eq
 801b056:	f106 0e02 	addeq.w	lr, r6, #2
 801b05a:	e7c7      	b.n	801afec <_strtol_l.isra.0+0x3c>
 801b05c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b060:	2f19      	cmp	r7, #25
 801b062:	d801      	bhi.n	801b068 <_strtol_l.isra.0+0xb8>
 801b064:	3c37      	subs	r4, #55	; 0x37
 801b066:	e7e1      	b.n	801b02c <_strtol_l.isra.0+0x7c>
 801b068:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b06c:	2f19      	cmp	r7, #25
 801b06e:	d804      	bhi.n	801b07a <_strtol_l.isra.0+0xca>
 801b070:	3c57      	subs	r4, #87	; 0x57
 801b072:	e7db      	b.n	801b02c <_strtol_l.isra.0+0x7c>
 801b074:	f04f 36ff 	mov.w	r6, #4294967295
 801b078:	e7e4      	b.n	801b044 <_strtol_l.isra.0+0x94>
 801b07a:	2e00      	cmp	r6, #0
 801b07c:	da05      	bge.n	801b08a <_strtol_l.isra.0+0xda>
 801b07e:	2322      	movs	r3, #34	; 0x22
 801b080:	6003      	str	r3, [r0, #0]
 801b082:	4665      	mov	r5, ip
 801b084:	b942      	cbnz	r2, 801b098 <_strtol_l.isra.0+0xe8>
 801b086:	4628      	mov	r0, r5
 801b088:	e79d      	b.n	801afc6 <_strtol_l.isra.0+0x16>
 801b08a:	f1b8 0f00 	cmp.w	r8, #0
 801b08e:	d000      	beq.n	801b092 <_strtol_l.isra.0+0xe2>
 801b090:	426d      	negs	r5, r5
 801b092:	2a00      	cmp	r2, #0
 801b094:	d0f7      	beq.n	801b086 <_strtol_l.isra.0+0xd6>
 801b096:	b10e      	cbz	r6, 801b09c <_strtol_l.isra.0+0xec>
 801b098:	f10e 31ff 	add.w	r1, lr, #4294967295
 801b09c:	6011      	str	r1, [r2, #0]
 801b09e:	e7f2      	b.n	801b086 <_strtol_l.isra.0+0xd6>
 801b0a0:	2430      	movs	r4, #48	; 0x30
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d1b3      	bne.n	801b00e <_strtol_l.isra.0+0x5e>
 801b0a6:	2308      	movs	r3, #8
 801b0a8:	e7b1      	b.n	801b00e <_strtol_l.isra.0+0x5e>
 801b0aa:	2c30      	cmp	r4, #48	; 0x30
 801b0ac:	d0a4      	beq.n	801aff8 <_strtol_l.isra.0+0x48>
 801b0ae:	230a      	movs	r3, #10
 801b0b0:	e7ad      	b.n	801b00e <_strtol_l.isra.0+0x5e>
 801b0b2:	bf00      	nop
 801b0b4:	08028d49 	.word	0x08028d49

0801b0b8 <_strtol_r>:
 801b0b8:	f7ff bf7a 	b.w	801afb0 <_strtol_l.isra.0>

0801b0bc <strtol>:
 801b0bc:	4613      	mov	r3, r2
 801b0be:	460a      	mov	r2, r1
 801b0c0:	4601      	mov	r1, r0
 801b0c2:	4802      	ldr	r0, [pc, #8]	; (801b0cc <strtol+0x10>)
 801b0c4:	6800      	ldr	r0, [r0, #0]
 801b0c6:	f7ff bf73 	b.w	801afb0 <_strtol_l.isra.0>
 801b0ca:	bf00      	nop
 801b0cc:	20000038 	.word	0x20000038

0801b0d0 <_svfprintf_r>:
 801b0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0d4:	ed2d 8b04 	vpush	{d8-d9}
 801b0d8:	b0cf      	sub	sp, #316	; 0x13c
 801b0da:	4689      	mov	r9, r1
 801b0dc:	4693      	mov	fp, r2
 801b0de:	461e      	mov	r6, r3
 801b0e0:	4682      	mov	sl, r0
 801b0e2:	f004 f8c7 	bl	801f274 <_localeconv_r>
 801b0e6:	6803      	ldr	r3, [r0, #0]
 801b0e8:	9313      	str	r3, [sp, #76]	; 0x4c
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	f7e5 f89a 	bl	8000224 <strlen>
 801b0f0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801b0f4:	900e      	str	r0, [sp, #56]	; 0x38
 801b0f6:	0618      	lsls	r0, r3, #24
 801b0f8:	d51a      	bpl.n	801b130 <_svfprintf_r+0x60>
 801b0fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b0fe:	b9bb      	cbnz	r3, 801b130 <_svfprintf_r+0x60>
 801b100:	2140      	movs	r1, #64	; 0x40
 801b102:	4650      	mov	r0, sl
 801b104:	f004 f93c 	bl	801f380 <_malloc_r>
 801b108:	f8c9 0000 	str.w	r0, [r9]
 801b10c:	f8c9 0010 	str.w	r0, [r9, #16]
 801b110:	b958      	cbnz	r0, 801b12a <_svfprintf_r+0x5a>
 801b112:	230c      	movs	r3, #12
 801b114:	f8ca 3000 	str.w	r3, [sl]
 801b118:	f04f 33ff 	mov.w	r3, #4294967295
 801b11c:	930f      	str	r3, [sp, #60]	; 0x3c
 801b11e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b120:	b04f      	add	sp, #316	; 0x13c
 801b122:	ecbd 8b04 	vpop	{d8-d9}
 801b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b12a:	2340      	movs	r3, #64	; 0x40
 801b12c:	f8c9 3014 	str.w	r3, [r9, #20]
 801b130:	ed9f 7b93 	vldr	d7, [pc, #588]	; 801b380 <_svfprintf_r+0x2b0>
 801b134:	2500      	movs	r5, #0
 801b136:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801b13a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801b13e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801b142:	ac25      	add	r4, sp, #148	; 0x94
 801b144:	9422      	str	r4, [sp, #136]	; 0x88
 801b146:	9505      	str	r5, [sp, #20]
 801b148:	950a      	str	r5, [sp, #40]	; 0x28
 801b14a:	9512      	str	r5, [sp, #72]	; 0x48
 801b14c:	9514      	str	r5, [sp, #80]	; 0x50
 801b14e:	950f      	str	r5, [sp, #60]	; 0x3c
 801b150:	465b      	mov	r3, fp
 801b152:	461d      	mov	r5, r3
 801b154:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b158:	b10a      	cbz	r2, 801b15e <_svfprintf_r+0x8e>
 801b15a:	2a25      	cmp	r2, #37	; 0x25
 801b15c:	d1f9      	bne.n	801b152 <_svfprintf_r+0x82>
 801b15e:	ebb5 070b 	subs.w	r7, r5, fp
 801b162:	d00d      	beq.n	801b180 <_svfprintf_r+0xb0>
 801b164:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b166:	443b      	add	r3, r7
 801b168:	9324      	str	r3, [sp, #144]	; 0x90
 801b16a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b16c:	3301      	adds	r3, #1
 801b16e:	2b07      	cmp	r3, #7
 801b170:	e9c4 b700 	strd	fp, r7, [r4]
 801b174:	9323      	str	r3, [sp, #140]	; 0x8c
 801b176:	dc79      	bgt.n	801b26c <_svfprintf_r+0x19c>
 801b178:	3408      	adds	r4, #8
 801b17a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b17c:	443b      	add	r3, r7
 801b17e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b180:	782b      	ldrb	r3, [r5, #0]
 801b182:	2b00      	cmp	r3, #0
 801b184:	f001 8140 	beq.w	801c408 <_svfprintf_r+0x1338>
 801b188:	2300      	movs	r3, #0
 801b18a:	f04f 32ff 	mov.w	r2, #4294967295
 801b18e:	3501      	adds	r5, #1
 801b190:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801b194:	9204      	str	r2, [sp, #16]
 801b196:	9310      	str	r3, [sp, #64]	; 0x40
 801b198:	4698      	mov	r8, r3
 801b19a:	270a      	movs	r7, #10
 801b19c:	212b      	movs	r1, #43	; 0x2b
 801b19e:	462a      	mov	r2, r5
 801b1a0:	f812 3b01 	ldrb.w	r3, [r2], #1
 801b1a4:	9307      	str	r3, [sp, #28]
 801b1a6:	920b      	str	r2, [sp, #44]	; 0x2c
 801b1a8:	9b07      	ldr	r3, [sp, #28]
 801b1aa:	3b20      	subs	r3, #32
 801b1ac:	2b5a      	cmp	r3, #90	; 0x5a
 801b1ae:	f200 85b4 	bhi.w	801bd1a <_svfprintf_r+0xc4a>
 801b1b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 801b1b6:	007e      	.short	0x007e
 801b1b8:	05b205b2 	.word	0x05b205b2
 801b1bc:	05b20086 	.word	0x05b20086
 801b1c0:	05b205b2 	.word	0x05b205b2
 801b1c4:	05b20065 	.word	0x05b20065
 801b1c8:	008905b2 	.word	0x008905b2
 801b1cc:	05b20093 	.word	0x05b20093
 801b1d0:	00960090 	.word	0x00960090
 801b1d4:	00b305b2 	.word	0x00b305b2
 801b1d8:	00b600b6 	.word	0x00b600b6
 801b1dc:	00b600b6 	.word	0x00b600b6
 801b1e0:	00b600b6 	.word	0x00b600b6
 801b1e4:	00b600b6 	.word	0x00b600b6
 801b1e8:	05b200b6 	.word	0x05b200b6
 801b1ec:	05b205b2 	.word	0x05b205b2
 801b1f0:	05b205b2 	.word	0x05b205b2
 801b1f4:	05b205b2 	.word	0x05b205b2
 801b1f8:	05b20127 	.word	0x05b20127
 801b1fc:	00fc00e9 	.word	0x00fc00e9
 801b200:	01270127 	.word	0x01270127
 801b204:	05b20127 	.word	0x05b20127
 801b208:	05b205b2 	.word	0x05b205b2
 801b20c:	00c605b2 	.word	0x00c605b2
 801b210:	05b205b2 	.word	0x05b205b2
 801b214:	05b20492 	.word	0x05b20492
 801b218:	05b205b2 	.word	0x05b205b2
 801b21c:	05b204d9 	.word	0x05b204d9
 801b220:	05b204fa 	.word	0x05b204fa
 801b224:	051905b2 	.word	0x051905b2
 801b228:	05b205b2 	.word	0x05b205b2
 801b22c:	05b205b2 	.word	0x05b205b2
 801b230:	05b205b2 	.word	0x05b205b2
 801b234:	05b205b2 	.word	0x05b205b2
 801b238:	05b20127 	.word	0x05b20127
 801b23c:	00fe00e9 	.word	0x00fe00e9
 801b240:	01270127 	.word	0x01270127
 801b244:	00c90127 	.word	0x00c90127
 801b248:	00dd00fe 	.word	0x00dd00fe
 801b24c:	00d605b2 	.word	0x00d605b2
 801b250:	046f05b2 	.word	0x046f05b2
 801b254:	04c80494 	.word	0x04c80494
 801b258:	05b200dd 	.word	0x05b200dd
 801b25c:	007c04d9 	.word	0x007c04d9
 801b260:	05b204fc 	.word	0x05b204fc
 801b264:	053605b2 	.word	0x053605b2
 801b268:	007c05b2 	.word	0x007c05b2
 801b26c:	aa22      	add	r2, sp, #136	; 0x88
 801b26e:	4649      	mov	r1, r9
 801b270:	4650      	mov	r0, sl
 801b272:	f004 ff4d 	bl	8020110 <__ssprint_r>
 801b276:	2800      	cmp	r0, #0
 801b278:	f040 8132 	bne.w	801b4e0 <_svfprintf_r+0x410>
 801b27c:	ac25      	add	r4, sp, #148	; 0x94
 801b27e:	e77c      	b.n	801b17a <_svfprintf_r+0xaa>
 801b280:	4650      	mov	r0, sl
 801b282:	f003 fff7 	bl	801f274 <_localeconv_r>
 801b286:	6843      	ldr	r3, [r0, #4]
 801b288:	9314      	str	r3, [sp, #80]	; 0x50
 801b28a:	4618      	mov	r0, r3
 801b28c:	f7e4 ffca 	bl	8000224 <strlen>
 801b290:	9012      	str	r0, [sp, #72]	; 0x48
 801b292:	4650      	mov	r0, sl
 801b294:	f003 ffee 	bl	801f274 <_localeconv_r>
 801b298:	6883      	ldr	r3, [r0, #8]
 801b29a:	930a      	str	r3, [sp, #40]	; 0x28
 801b29c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b29e:	212b      	movs	r1, #43	; 0x2b
 801b2a0:	b12b      	cbz	r3, 801b2ae <_svfprintf_r+0x1de>
 801b2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2a4:	b11b      	cbz	r3, 801b2ae <_svfprintf_r+0x1de>
 801b2a6:	781b      	ldrb	r3, [r3, #0]
 801b2a8:	b10b      	cbz	r3, 801b2ae <_svfprintf_r+0x1de>
 801b2aa:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801b2ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b2b0:	e775      	b.n	801b19e <_svfprintf_r+0xce>
 801b2b2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d1f9      	bne.n	801b2ae <_svfprintf_r+0x1de>
 801b2ba:	2320      	movs	r3, #32
 801b2bc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801b2c0:	e7f5      	b.n	801b2ae <_svfprintf_r+0x1de>
 801b2c2:	f048 0801 	orr.w	r8, r8, #1
 801b2c6:	e7f2      	b.n	801b2ae <_svfprintf_r+0x1de>
 801b2c8:	f856 3b04 	ldr.w	r3, [r6], #4
 801b2cc:	9310      	str	r3, [sp, #64]	; 0x40
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	daed      	bge.n	801b2ae <_svfprintf_r+0x1de>
 801b2d2:	425b      	negs	r3, r3
 801b2d4:	9310      	str	r3, [sp, #64]	; 0x40
 801b2d6:	f048 0804 	orr.w	r8, r8, #4
 801b2da:	e7e8      	b.n	801b2ae <_svfprintf_r+0x1de>
 801b2dc:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801b2e0:	e7e5      	b.n	801b2ae <_svfprintf_r+0x1de>
 801b2e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b2e4:	f812 3b01 	ldrb.w	r3, [r2], #1
 801b2e8:	9307      	str	r3, [sp, #28]
 801b2ea:	2b2a      	cmp	r3, #42	; 0x2a
 801b2ec:	d113      	bne.n	801b316 <_svfprintf_r+0x246>
 801b2ee:	f856 0b04 	ldr.w	r0, [r6], #4
 801b2f2:	920b      	str	r2, [sp, #44]	; 0x2c
 801b2f4:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801b2f8:	9304      	str	r3, [sp, #16]
 801b2fa:	e7d8      	b.n	801b2ae <_svfprintf_r+0x1de>
 801b2fc:	9804      	ldr	r0, [sp, #16]
 801b2fe:	fb07 3300 	mla	r3, r7, r0, r3
 801b302:	9304      	str	r3, [sp, #16]
 801b304:	f812 3b01 	ldrb.w	r3, [r2], #1
 801b308:	9307      	str	r3, [sp, #28]
 801b30a:	9b07      	ldr	r3, [sp, #28]
 801b30c:	3b30      	subs	r3, #48	; 0x30
 801b30e:	2b09      	cmp	r3, #9
 801b310:	d9f4      	bls.n	801b2fc <_svfprintf_r+0x22c>
 801b312:	920b      	str	r2, [sp, #44]	; 0x2c
 801b314:	e748      	b.n	801b1a8 <_svfprintf_r+0xd8>
 801b316:	2300      	movs	r3, #0
 801b318:	9304      	str	r3, [sp, #16]
 801b31a:	e7f6      	b.n	801b30a <_svfprintf_r+0x23a>
 801b31c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 801b320:	e7c5      	b.n	801b2ae <_svfprintf_r+0x1de>
 801b322:	2300      	movs	r3, #0
 801b324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b326:	9310      	str	r3, [sp, #64]	; 0x40
 801b328:	9b07      	ldr	r3, [sp, #28]
 801b32a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b32c:	3b30      	subs	r3, #48	; 0x30
 801b32e:	fb07 3300 	mla	r3, r7, r0, r3
 801b332:	9310      	str	r3, [sp, #64]	; 0x40
 801b334:	f812 3b01 	ldrb.w	r3, [r2], #1
 801b338:	9307      	str	r3, [sp, #28]
 801b33a:	3b30      	subs	r3, #48	; 0x30
 801b33c:	2b09      	cmp	r3, #9
 801b33e:	d9f3      	bls.n	801b328 <_svfprintf_r+0x258>
 801b340:	e7e7      	b.n	801b312 <_svfprintf_r+0x242>
 801b342:	f048 0808 	orr.w	r8, r8, #8
 801b346:	e7b2      	b.n	801b2ae <_svfprintf_r+0x1de>
 801b348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b34a:	781b      	ldrb	r3, [r3, #0]
 801b34c:	2b68      	cmp	r3, #104	; 0x68
 801b34e:	bf01      	itttt	eq
 801b350:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801b352:	3301      	addeq	r3, #1
 801b354:	930b      	streq	r3, [sp, #44]	; 0x2c
 801b356:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 801b35a:	bf18      	it	ne
 801b35c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 801b360:	e7a5      	b.n	801b2ae <_svfprintf_r+0x1de>
 801b362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b364:	781b      	ldrb	r3, [r3, #0]
 801b366:	2b6c      	cmp	r3, #108	; 0x6c
 801b368:	d105      	bne.n	801b376 <_svfprintf_r+0x2a6>
 801b36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b36c:	3301      	adds	r3, #1
 801b36e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b370:	f048 0820 	orr.w	r8, r8, #32
 801b374:	e79b      	b.n	801b2ae <_svfprintf_r+0x1de>
 801b376:	f048 0810 	orr.w	r8, r8, #16
 801b37a:	e798      	b.n	801b2ae <_svfprintf_r+0x1de>
 801b37c:	f3af 8000 	nop.w
	...
 801b388:	4632      	mov	r2, r6
 801b38a:	2000      	movs	r0, #0
 801b38c:	f852 3b04 	ldr.w	r3, [r2], #4
 801b390:	9206      	str	r2, [sp, #24]
 801b392:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801b396:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801b39a:	2301      	movs	r3, #1
 801b39c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801b3a0:	9003      	str	r0, [sp, #12]
 801b3a2:	9304      	str	r3, [sp, #16]
 801b3a4:	4606      	mov	r6, r0
 801b3a6:	4605      	mov	r5, r0
 801b3a8:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801b3ac:	e1b8      	b.n	801b720 <_svfprintf_r+0x650>
 801b3ae:	f048 0810 	orr.w	r8, r8, #16
 801b3b2:	f018 0f20 	tst.w	r8, #32
 801b3b6:	d012      	beq.n	801b3de <_svfprintf_r+0x30e>
 801b3b8:	3607      	adds	r6, #7
 801b3ba:	f026 0307 	bic.w	r3, r6, #7
 801b3be:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801b3c2:	9306      	str	r3, [sp, #24]
 801b3c4:	2e00      	cmp	r6, #0
 801b3c6:	f177 0300 	sbcs.w	r3, r7, #0
 801b3ca:	da06      	bge.n	801b3da <_svfprintf_r+0x30a>
 801b3cc:	4276      	negs	r6, r6
 801b3ce:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801b3d2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801b3d6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801b3da:	2301      	movs	r3, #1
 801b3dc:	e38e      	b.n	801bafc <_svfprintf_r+0xa2c>
 801b3de:	1d33      	adds	r3, r6, #4
 801b3e0:	f018 0f10 	tst.w	r8, #16
 801b3e4:	9306      	str	r3, [sp, #24]
 801b3e6:	d002      	beq.n	801b3ee <_svfprintf_r+0x31e>
 801b3e8:	6836      	ldr	r6, [r6, #0]
 801b3ea:	17f7      	asrs	r7, r6, #31
 801b3ec:	e7ea      	b.n	801b3c4 <_svfprintf_r+0x2f4>
 801b3ee:	f018 0f40 	tst.w	r8, #64	; 0x40
 801b3f2:	6836      	ldr	r6, [r6, #0]
 801b3f4:	d001      	beq.n	801b3fa <_svfprintf_r+0x32a>
 801b3f6:	b236      	sxth	r6, r6
 801b3f8:	e7f7      	b.n	801b3ea <_svfprintf_r+0x31a>
 801b3fa:	f418 7f00 	tst.w	r8, #512	; 0x200
 801b3fe:	bf18      	it	ne
 801b400:	b276      	sxtbne	r6, r6
 801b402:	e7f2      	b.n	801b3ea <_svfprintf_r+0x31a>
 801b404:	3607      	adds	r6, #7
 801b406:	f026 0307 	bic.w	r3, r6, #7
 801b40a:	ecb3 7b02 	vldmia	r3!, {d7}
 801b40e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801b412:	9306      	str	r3, [sp, #24]
 801b414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b416:	ee09 3a10 	vmov	s18, r3
 801b41a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b41c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b420:	ee09 3a90 	vmov	s19, r3
 801b424:	f04f 32ff 	mov.w	r2, #4294967295
 801b428:	4b3a      	ldr	r3, [pc, #232]	; (801b514 <_svfprintf_r+0x444>)
 801b42a:	ec51 0b19 	vmov	r0, r1, d9
 801b42e:	f7e5 fbad 	bl	8000b8c <__aeabi_dcmpun>
 801b432:	bb10      	cbnz	r0, 801b47a <_svfprintf_r+0x3aa>
 801b434:	4b37      	ldr	r3, [pc, #220]	; (801b514 <_svfprintf_r+0x444>)
 801b436:	ec51 0b19 	vmov	r0, r1, d9
 801b43a:	f04f 32ff 	mov.w	r2, #4294967295
 801b43e:	f7e5 fb87 	bl	8000b50 <__aeabi_dcmple>
 801b442:	b9d0      	cbnz	r0, 801b47a <_svfprintf_r+0x3aa>
 801b444:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b448:	2200      	movs	r2, #0
 801b44a:	2300      	movs	r3, #0
 801b44c:	f7e5 fb76 	bl	8000b3c <__aeabi_dcmplt>
 801b450:	b110      	cbz	r0, 801b458 <_svfprintf_r+0x388>
 801b452:	232d      	movs	r3, #45	; 0x2d
 801b454:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801b458:	4a2f      	ldr	r2, [pc, #188]	; (801b518 <_svfprintf_r+0x448>)
 801b45a:	4830      	ldr	r0, [pc, #192]	; (801b51c <_svfprintf_r+0x44c>)
 801b45c:	9b07      	ldr	r3, [sp, #28]
 801b45e:	2100      	movs	r1, #0
 801b460:	2b47      	cmp	r3, #71	; 0x47
 801b462:	bfd4      	ite	le
 801b464:	4693      	movle	fp, r2
 801b466:	4683      	movgt	fp, r0
 801b468:	2303      	movs	r3, #3
 801b46a:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801b46e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 801b472:	2600      	movs	r6, #0
 801b474:	4633      	mov	r3, r6
 801b476:	f001 b802 	b.w	801c47e <_svfprintf_r+0x13ae>
 801b47a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801b47e:	4610      	mov	r0, r2
 801b480:	4619      	mov	r1, r3
 801b482:	f7e5 fb83 	bl	8000b8c <__aeabi_dcmpun>
 801b486:	b140      	cbz	r0, 801b49a <_svfprintf_r+0x3ca>
 801b488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b48a:	4a25      	ldr	r2, [pc, #148]	; (801b520 <_svfprintf_r+0x450>)
 801b48c:	4825      	ldr	r0, [pc, #148]	; (801b524 <_svfprintf_r+0x454>)
 801b48e:	2b00      	cmp	r3, #0
 801b490:	bfbc      	itt	lt
 801b492:	232d      	movlt	r3, #45	; 0x2d
 801b494:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801b498:	e7e0      	b.n	801b45c <_svfprintf_r+0x38c>
 801b49a:	9b07      	ldr	r3, [sp, #28]
 801b49c:	f023 0320 	bic.w	r3, r3, #32
 801b4a0:	2b41      	cmp	r3, #65	; 0x41
 801b4a2:	9308      	str	r3, [sp, #32]
 801b4a4:	d125      	bne.n	801b4f2 <_svfprintf_r+0x422>
 801b4a6:	2330      	movs	r3, #48	; 0x30
 801b4a8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801b4ac:	9b07      	ldr	r3, [sp, #28]
 801b4ae:	2b61      	cmp	r3, #97	; 0x61
 801b4b0:	bf0c      	ite	eq
 801b4b2:	2378      	moveq	r3, #120	; 0x78
 801b4b4:	2358      	movne	r3, #88	; 0x58
 801b4b6:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801b4ba:	9b04      	ldr	r3, [sp, #16]
 801b4bc:	2b63      	cmp	r3, #99	; 0x63
 801b4be:	f048 0802 	orr.w	r8, r8, #2
 801b4c2:	dd31      	ble.n	801b528 <_svfprintf_r+0x458>
 801b4c4:	1c59      	adds	r1, r3, #1
 801b4c6:	4650      	mov	r0, sl
 801b4c8:	f003 ff5a 	bl	801f380 <_malloc_r>
 801b4cc:	4683      	mov	fp, r0
 801b4ce:	2800      	cmp	r0, #0
 801b4d0:	f040 81fe 	bne.w	801b8d0 <_svfprintf_r+0x800>
 801b4d4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801b4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b4dc:	f8a9 300c 	strh.w	r3, [r9, #12]
 801b4e0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801b4e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 801b4e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b4ea:	bf18      	it	ne
 801b4ec:	f04f 33ff 	movne.w	r3, #4294967295
 801b4f0:	e614      	b.n	801b11c <_svfprintf_r+0x4c>
 801b4f2:	9b04      	ldr	r3, [sp, #16]
 801b4f4:	3301      	adds	r3, #1
 801b4f6:	f000 81ed 	beq.w	801b8d4 <_svfprintf_r+0x804>
 801b4fa:	9b08      	ldr	r3, [sp, #32]
 801b4fc:	2b47      	cmp	r3, #71	; 0x47
 801b4fe:	f040 81ec 	bne.w	801b8da <_svfprintf_r+0x80a>
 801b502:	9b04      	ldr	r3, [sp, #16]
 801b504:	2b00      	cmp	r3, #0
 801b506:	f040 81e8 	bne.w	801b8da <_svfprintf_r+0x80a>
 801b50a:	9303      	str	r3, [sp, #12]
 801b50c:	2301      	movs	r3, #1
 801b50e:	9304      	str	r3, [sp, #16]
 801b510:	e00d      	b.n	801b52e <_svfprintf_r+0x45e>
 801b512:	bf00      	nop
 801b514:	7fefffff 	.word	0x7fefffff
 801b518:	08028f10 	.word	0x08028f10
 801b51c:	08028f14 	.word	0x08028f14
 801b520:	08028f18 	.word	0x08028f18
 801b524:	08028f1c 	.word	0x08028f1c
 801b528:	9003      	str	r0, [sp, #12]
 801b52a:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801b52e:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 801b532:	9311      	str	r3, [sp, #68]	; 0x44
 801b534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b536:	2b00      	cmp	r3, #0
 801b538:	f280 81d1 	bge.w	801b8de <_svfprintf_r+0x80e>
 801b53c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b53e:	ee08 3a10 	vmov	s16, r3
 801b542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b544:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b548:	ee08 3a90 	vmov	s17, r3
 801b54c:	232d      	movs	r3, #45	; 0x2d
 801b54e:	9318      	str	r3, [sp, #96]	; 0x60
 801b550:	9b08      	ldr	r3, [sp, #32]
 801b552:	2b41      	cmp	r3, #65	; 0x41
 801b554:	f040 81e1 	bne.w	801b91a <_svfprintf_r+0x84a>
 801b558:	eeb0 0a48 	vmov.f32	s0, s16
 801b55c:	eef0 0a68 	vmov.f32	s1, s17
 801b560:	a81c      	add	r0, sp, #112	; 0x70
 801b562:	f004 fc8b 	bl	801fe7c <frexp>
 801b566:	2200      	movs	r2, #0
 801b568:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b56c:	ec51 0b10 	vmov	r0, r1, d0
 801b570:	f7e5 f872 	bl	8000658 <__aeabi_dmul>
 801b574:	2200      	movs	r2, #0
 801b576:	2300      	movs	r3, #0
 801b578:	4606      	mov	r6, r0
 801b57a:	460f      	mov	r7, r1
 801b57c:	f7e5 fad4 	bl	8000b28 <__aeabi_dcmpeq>
 801b580:	b108      	cbz	r0, 801b586 <_svfprintf_r+0x4b6>
 801b582:	2301      	movs	r3, #1
 801b584:	931c      	str	r3, [sp, #112]	; 0x70
 801b586:	4bb4      	ldr	r3, [pc, #720]	; (801b858 <_svfprintf_r+0x788>)
 801b588:	4ab4      	ldr	r2, [pc, #720]	; (801b85c <_svfprintf_r+0x78c>)
 801b58a:	9907      	ldr	r1, [sp, #28]
 801b58c:	2961      	cmp	r1, #97	; 0x61
 801b58e:	bf18      	it	ne
 801b590:	461a      	movne	r2, r3
 801b592:	9b04      	ldr	r3, [sp, #16]
 801b594:	9217      	str	r2, [sp, #92]	; 0x5c
 801b596:	3b01      	subs	r3, #1
 801b598:	9305      	str	r3, [sp, #20]
 801b59a:	465d      	mov	r5, fp
 801b59c:	4bb0      	ldr	r3, [pc, #704]	; (801b860 <_svfprintf_r+0x790>)
 801b59e:	2200      	movs	r2, #0
 801b5a0:	4630      	mov	r0, r6
 801b5a2:	4639      	mov	r1, r7
 801b5a4:	f7e5 f858 	bl	8000658 <__aeabi_dmul>
 801b5a8:	460f      	mov	r7, r1
 801b5aa:	4606      	mov	r6, r0
 801b5ac:	f7e5 fb04 	bl	8000bb8 <__aeabi_d2iz>
 801b5b0:	9019      	str	r0, [sp, #100]	; 0x64
 801b5b2:	f7e4 ffe7 	bl	8000584 <__aeabi_i2d>
 801b5b6:	4602      	mov	r2, r0
 801b5b8:	460b      	mov	r3, r1
 801b5ba:	4630      	mov	r0, r6
 801b5bc:	4639      	mov	r1, r7
 801b5be:	f7e4 fe93 	bl	80002e8 <__aeabi_dsub>
 801b5c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b5c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5c6:	5c9b      	ldrb	r3, [r3, r2]
 801b5c8:	f805 3b01 	strb.w	r3, [r5], #1
 801b5cc:	9b05      	ldr	r3, [sp, #20]
 801b5ce:	9309      	str	r3, [sp, #36]	; 0x24
 801b5d0:	1c5a      	adds	r2, r3, #1
 801b5d2:	4606      	mov	r6, r0
 801b5d4:	460f      	mov	r7, r1
 801b5d6:	d007      	beq.n	801b5e8 <_svfprintf_r+0x518>
 801b5d8:	3b01      	subs	r3, #1
 801b5da:	9305      	str	r3, [sp, #20]
 801b5dc:	2200      	movs	r2, #0
 801b5de:	2300      	movs	r3, #0
 801b5e0:	f7e5 faa2 	bl	8000b28 <__aeabi_dcmpeq>
 801b5e4:	2800      	cmp	r0, #0
 801b5e6:	d0d9      	beq.n	801b59c <_svfprintf_r+0x4cc>
 801b5e8:	4b9e      	ldr	r3, [pc, #632]	; (801b864 <_svfprintf_r+0x794>)
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	4630      	mov	r0, r6
 801b5ee:	4639      	mov	r1, r7
 801b5f0:	f7e5 fac2 	bl	8000b78 <__aeabi_dcmpgt>
 801b5f4:	b960      	cbnz	r0, 801b610 <_svfprintf_r+0x540>
 801b5f6:	4b9b      	ldr	r3, [pc, #620]	; (801b864 <_svfprintf_r+0x794>)
 801b5f8:	2200      	movs	r2, #0
 801b5fa:	4630      	mov	r0, r6
 801b5fc:	4639      	mov	r1, r7
 801b5fe:	f7e5 fa93 	bl	8000b28 <__aeabi_dcmpeq>
 801b602:	2800      	cmp	r0, #0
 801b604:	f000 8184 	beq.w	801b910 <_svfprintf_r+0x840>
 801b608:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b60a:	07df      	lsls	r7, r3, #31
 801b60c:	f140 8180 	bpl.w	801b910 <_svfprintf_r+0x840>
 801b610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b612:	9520      	str	r5, [sp, #128]	; 0x80
 801b614:	7bd9      	ldrb	r1, [r3, #15]
 801b616:	2030      	movs	r0, #48	; 0x30
 801b618:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b61a:	1e53      	subs	r3, r2, #1
 801b61c:	9320      	str	r3, [sp, #128]	; 0x80
 801b61e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801b622:	428b      	cmp	r3, r1
 801b624:	f000 8163 	beq.w	801b8ee <_svfprintf_r+0x81e>
 801b628:	2b39      	cmp	r3, #57	; 0x39
 801b62a:	bf0b      	itete	eq
 801b62c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801b62e:	3301      	addne	r3, #1
 801b630:	7a9b      	ldrbeq	r3, [r3, #10]
 801b632:	b2db      	uxtbne	r3, r3
 801b634:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b638:	eba5 030b 	sub.w	r3, r5, fp
 801b63c:	9305      	str	r3, [sp, #20]
 801b63e:	9b08      	ldr	r3, [sp, #32]
 801b640:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801b642:	2b47      	cmp	r3, #71	; 0x47
 801b644:	f040 81b1 	bne.w	801b9aa <_svfprintf_r+0x8da>
 801b648:	1cee      	adds	r6, r5, #3
 801b64a:	db03      	blt.n	801b654 <_svfprintf_r+0x584>
 801b64c:	9b04      	ldr	r3, [sp, #16]
 801b64e:	42ab      	cmp	r3, r5
 801b650:	f280 81d6 	bge.w	801ba00 <_svfprintf_r+0x930>
 801b654:	9b07      	ldr	r3, [sp, #28]
 801b656:	3b02      	subs	r3, #2
 801b658:	9307      	str	r3, [sp, #28]
 801b65a:	9907      	ldr	r1, [sp, #28]
 801b65c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801b660:	f021 0120 	bic.w	r1, r1, #32
 801b664:	2941      	cmp	r1, #65	; 0x41
 801b666:	bf08      	it	eq
 801b668:	320f      	addeq	r2, #15
 801b66a:	f105 33ff 	add.w	r3, r5, #4294967295
 801b66e:	bf06      	itte	eq
 801b670:	b2d2      	uxtbeq	r2, r2
 801b672:	2101      	moveq	r1, #1
 801b674:	2100      	movne	r1, #0
 801b676:	2b00      	cmp	r3, #0
 801b678:	931c      	str	r3, [sp, #112]	; 0x70
 801b67a:	bfb8      	it	lt
 801b67c:	f1c5 0301 	rsblt	r3, r5, #1
 801b680:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801b684:	bfb4      	ite	lt
 801b686:	222d      	movlt	r2, #45	; 0x2d
 801b688:	222b      	movge	r2, #43	; 0x2b
 801b68a:	2b09      	cmp	r3, #9
 801b68c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801b690:	f340 81a4 	ble.w	801b9dc <_svfprintf_r+0x90c>
 801b694:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801b698:	260a      	movs	r6, #10
 801b69a:	4611      	mov	r1, r2
 801b69c:	fb93 f5f6 	sdiv	r5, r3, r6
 801b6a0:	fb06 3015 	mls	r0, r6, r5, r3
 801b6a4:	3030      	adds	r0, #48	; 0x30
 801b6a6:	f801 0c01 	strb.w	r0, [r1, #-1]
 801b6aa:	4618      	mov	r0, r3
 801b6ac:	2863      	cmp	r0, #99	; 0x63
 801b6ae:	f102 32ff 	add.w	r2, r2, #4294967295
 801b6b2:	462b      	mov	r3, r5
 801b6b4:	dcf1      	bgt.n	801b69a <_svfprintf_r+0x5ca>
 801b6b6:	3330      	adds	r3, #48	; 0x30
 801b6b8:	1e88      	subs	r0, r1, #2
 801b6ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b6be:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801b6c2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801b6c6:	4603      	mov	r3, r0
 801b6c8:	42ab      	cmp	r3, r5
 801b6ca:	f0c0 8182 	bcc.w	801b9d2 <_svfprintf_r+0x902>
 801b6ce:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801b6d2:	1a52      	subs	r2, r2, r1
 801b6d4:	42a8      	cmp	r0, r5
 801b6d6:	bf88      	it	hi
 801b6d8:	2200      	movhi	r2, #0
 801b6da:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801b6de:	441a      	add	r2, r3
 801b6e0:	ab1e      	add	r3, sp, #120	; 0x78
 801b6e2:	1ad3      	subs	r3, r2, r3
 801b6e4:	9a05      	ldr	r2, [sp, #20]
 801b6e6:	9315      	str	r3, [sp, #84]	; 0x54
 801b6e8:	2a01      	cmp	r2, #1
 801b6ea:	4413      	add	r3, r2
 801b6ec:	9304      	str	r3, [sp, #16]
 801b6ee:	dc02      	bgt.n	801b6f6 <_svfprintf_r+0x626>
 801b6f0:	f018 0f01 	tst.w	r8, #1
 801b6f4:	d003      	beq.n	801b6fe <_svfprintf_r+0x62e>
 801b6f6:	9b04      	ldr	r3, [sp, #16]
 801b6f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b6fa:	4413      	add	r3, r2
 801b6fc:	9304      	str	r3, [sp, #16]
 801b6fe:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 801b702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b706:	9311      	str	r3, [sp, #68]	; 0x44
 801b708:	2300      	movs	r3, #0
 801b70a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801b70e:	461d      	mov	r5, r3
 801b710:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b712:	b113      	cbz	r3, 801b71a <_svfprintf_r+0x64a>
 801b714:	232d      	movs	r3, #45	; 0x2d
 801b716:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801b71a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 801b71e:	2600      	movs	r6, #0
 801b720:	9b04      	ldr	r3, [sp, #16]
 801b722:	42b3      	cmp	r3, r6
 801b724:	bfb8      	it	lt
 801b726:	4633      	movlt	r3, r6
 801b728:	9311      	str	r3, [sp, #68]	; 0x44
 801b72a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801b72e:	b113      	cbz	r3, 801b736 <_svfprintf_r+0x666>
 801b730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b732:	3301      	adds	r3, #1
 801b734:	9311      	str	r3, [sp, #68]	; 0x44
 801b736:	f018 0302 	ands.w	r3, r8, #2
 801b73a:	9317      	str	r3, [sp, #92]	; 0x5c
 801b73c:	bf1e      	ittt	ne
 801b73e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801b740:	3302      	addne	r3, #2
 801b742:	9311      	strne	r3, [sp, #68]	; 0x44
 801b744:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801b748:	9318      	str	r3, [sp, #96]	; 0x60
 801b74a:	d11f      	bne.n	801b78c <_svfprintf_r+0x6bc>
 801b74c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801b750:	1a9f      	subs	r7, r3, r2
 801b752:	2f00      	cmp	r7, #0
 801b754:	dd1a      	ble.n	801b78c <_svfprintf_r+0x6bc>
 801b756:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801b75a:	4843      	ldr	r0, [pc, #268]	; (801b868 <_svfprintf_r+0x798>)
 801b75c:	6020      	str	r0, [r4, #0]
 801b75e:	2f10      	cmp	r7, #16
 801b760:	f103 0301 	add.w	r3, r3, #1
 801b764:	f104 0108 	add.w	r1, r4, #8
 801b768:	f300 82e6 	bgt.w	801bd38 <_svfprintf_r+0xc68>
 801b76c:	6067      	str	r7, [r4, #4]
 801b76e:	2b07      	cmp	r3, #7
 801b770:	4417      	add	r7, r2
 801b772:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801b776:	f340 82f2 	ble.w	801bd5e <_svfprintf_r+0xc8e>
 801b77a:	aa22      	add	r2, sp, #136	; 0x88
 801b77c:	4649      	mov	r1, r9
 801b77e:	4650      	mov	r0, sl
 801b780:	f004 fcc6 	bl	8020110 <__ssprint_r>
 801b784:	2800      	cmp	r0, #0
 801b786:	f040 861d 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801b78a:	ac25      	add	r4, sp, #148	; 0x94
 801b78c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801b790:	b173      	cbz	r3, 801b7b0 <_svfprintf_r+0x6e0>
 801b792:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801b796:	6023      	str	r3, [r4, #0]
 801b798:	2301      	movs	r3, #1
 801b79a:	6063      	str	r3, [r4, #4]
 801b79c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b79e:	3301      	adds	r3, #1
 801b7a0:	9324      	str	r3, [sp, #144]	; 0x90
 801b7a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b7a4:	3301      	adds	r3, #1
 801b7a6:	2b07      	cmp	r3, #7
 801b7a8:	9323      	str	r3, [sp, #140]	; 0x8c
 801b7aa:	f300 82da 	bgt.w	801bd62 <_svfprintf_r+0xc92>
 801b7ae:	3408      	adds	r4, #8
 801b7b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b7b2:	b16b      	cbz	r3, 801b7d0 <_svfprintf_r+0x700>
 801b7b4:	ab1b      	add	r3, sp, #108	; 0x6c
 801b7b6:	6023      	str	r3, [r4, #0]
 801b7b8:	2302      	movs	r3, #2
 801b7ba:	6063      	str	r3, [r4, #4]
 801b7bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b7be:	3302      	adds	r3, #2
 801b7c0:	9324      	str	r3, [sp, #144]	; 0x90
 801b7c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b7c4:	3301      	adds	r3, #1
 801b7c6:	2b07      	cmp	r3, #7
 801b7c8:	9323      	str	r3, [sp, #140]	; 0x8c
 801b7ca:	f300 82d4 	bgt.w	801bd76 <_svfprintf_r+0xca6>
 801b7ce:	3408      	adds	r4, #8
 801b7d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b7d2:	2b80      	cmp	r3, #128	; 0x80
 801b7d4:	d11f      	bne.n	801b816 <_svfprintf_r+0x746>
 801b7d6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801b7da:	1a9f      	subs	r7, r3, r2
 801b7dc:	2f00      	cmp	r7, #0
 801b7de:	dd1a      	ble.n	801b816 <_svfprintf_r+0x746>
 801b7e0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801b7e4:	4821      	ldr	r0, [pc, #132]	; (801b86c <_svfprintf_r+0x79c>)
 801b7e6:	6020      	str	r0, [r4, #0]
 801b7e8:	2f10      	cmp	r7, #16
 801b7ea:	f103 0301 	add.w	r3, r3, #1
 801b7ee:	f104 0108 	add.w	r1, r4, #8
 801b7f2:	f300 82ca 	bgt.w	801bd8a <_svfprintf_r+0xcba>
 801b7f6:	6067      	str	r7, [r4, #4]
 801b7f8:	2b07      	cmp	r3, #7
 801b7fa:	4417      	add	r7, r2
 801b7fc:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801b800:	f340 82d6 	ble.w	801bdb0 <_svfprintf_r+0xce0>
 801b804:	aa22      	add	r2, sp, #136	; 0x88
 801b806:	4649      	mov	r1, r9
 801b808:	4650      	mov	r0, sl
 801b80a:	f004 fc81 	bl	8020110 <__ssprint_r>
 801b80e:	2800      	cmp	r0, #0
 801b810:	f040 85d8 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801b814:	ac25      	add	r4, sp, #148	; 0x94
 801b816:	9b04      	ldr	r3, [sp, #16]
 801b818:	1af6      	subs	r6, r6, r3
 801b81a:	2e00      	cmp	r6, #0
 801b81c:	dd28      	ble.n	801b870 <_svfprintf_r+0x7a0>
 801b81e:	4f13      	ldr	r7, [pc, #76]	; (801b86c <_svfprintf_r+0x79c>)
 801b820:	6027      	str	r7, [r4, #0]
 801b822:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801b826:	2e10      	cmp	r6, #16
 801b828:	f103 0301 	add.w	r3, r3, #1
 801b82c:	f104 0108 	add.w	r1, r4, #8
 801b830:	f300 82c0 	bgt.w	801bdb4 <_svfprintf_r+0xce4>
 801b834:	6066      	str	r6, [r4, #4]
 801b836:	2b07      	cmp	r3, #7
 801b838:	4416      	add	r6, r2
 801b83a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801b83e:	f340 82cc 	ble.w	801bdda <_svfprintf_r+0xd0a>
 801b842:	aa22      	add	r2, sp, #136	; 0x88
 801b844:	4649      	mov	r1, r9
 801b846:	4650      	mov	r0, sl
 801b848:	f004 fc62 	bl	8020110 <__ssprint_r>
 801b84c:	2800      	cmp	r0, #0
 801b84e:	f040 85b9 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801b852:	ac25      	add	r4, sp, #148	; 0x94
 801b854:	e00c      	b.n	801b870 <_svfprintf_r+0x7a0>
 801b856:	bf00      	nop
 801b858:	08028f31 	.word	0x08028f31
 801b85c:	08028f20 	.word	0x08028f20
 801b860:	40300000 	.word	0x40300000
 801b864:	3fe00000 	.word	0x3fe00000
 801b868:	08028f44 	.word	0x08028f44
 801b86c:	08028f54 	.word	0x08028f54
 801b870:	f418 7f80 	tst.w	r8, #256	; 0x100
 801b874:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801b876:	f040 82b7 	bne.w	801bde8 <_svfprintf_r+0xd18>
 801b87a:	9b04      	ldr	r3, [sp, #16]
 801b87c:	f8c4 b000 	str.w	fp, [r4]
 801b880:	441e      	add	r6, r3
 801b882:	6063      	str	r3, [r4, #4]
 801b884:	9624      	str	r6, [sp, #144]	; 0x90
 801b886:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801b888:	3301      	adds	r3, #1
 801b88a:	2b07      	cmp	r3, #7
 801b88c:	9323      	str	r3, [sp, #140]	; 0x8c
 801b88e:	f300 82f0 	bgt.w	801be72 <_svfprintf_r+0xda2>
 801b892:	3408      	adds	r4, #8
 801b894:	f018 0f04 	tst.w	r8, #4
 801b898:	f040 8576 	bne.w	801c388 <_svfprintf_r+0x12b8>
 801b89c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801b8a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b8a2:	428a      	cmp	r2, r1
 801b8a4:	bfac      	ite	ge
 801b8a6:	189b      	addge	r3, r3, r2
 801b8a8:	185b      	addlt	r3, r3, r1
 801b8aa:	930f      	str	r3, [sp, #60]	; 0x3c
 801b8ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b8ae:	b13b      	cbz	r3, 801b8c0 <_svfprintf_r+0x7f0>
 801b8b0:	aa22      	add	r2, sp, #136	; 0x88
 801b8b2:	4649      	mov	r1, r9
 801b8b4:	4650      	mov	r0, sl
 801b8b6:	f004 fc2b 	bl	8020110 <__ssprint_r>
 801b8ba:	2800      	cmp	r0, #0
 801b8bc:	f040 8582 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801b8c0:	2300      	movs	r3, #0
 801b8c2:	9323      	str	r3, [sp, #140]	; 0x8c
 801b8c4:	9b03      	ldr	r3, [sp, #12]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	f040 8598 	bne.w	801c3fc <_svfprintf_r+0x132c>
 801b8cc:	ac25      	add	r4, sp, #148	; 0x94
 801b8ce:	e0ed      	b.n	801baac <_svfprintf_r+0x9dc>
 801b8d0:	9003      	str	r0, [sp, #12]
 801b8d2:	e62c      	b.n	801b52e <_svfprintf_r+0x45e>
 801b8d4:	9003      	str	r0, [sp, #12]
 801b8d6:	2306      	movs	r3, #6
 801b8d8:	e619      	b.n	801b50e <_svfprintf_r+0x43e>
 801b8da:	9003      	str	r0, [sp, #12]
 801b8dc:	e627      	b.n	801b52e <_svfprintf_r+0x45e>
 801b8de:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801b8e2:	2300      	movs	r3, #0
 801b8e4:	eeb0 8a47 	vmov.f32	s16, s14
 801b8e8:	eef0 8a67 	vmov.f32	s17, s15
 801b8ec:	e62f      	b.n	801b54e <_svfprintf_r+0x47e>
 801b8ee:	f802 0c01 	strb.w	r0, [r2, #-1]
 801b8f2:	e691      	b.n	801b618 <_svfprintf_r+0x548>
 801b8f4:	f803 0b01 	strb.w	r0, [r3], #1
 801b8f8:	1aca      	subs	r2, r1, r3
 801b8fa:	2a00      	cmp	r2, #0
 801b8fc:	dafa      	bge.n	801b8f4 <_svfprintf_r+0x824>
 801b8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b902:	3201      	adds	r2, #1
 801b904:	f103 0301 	add.w	r3, r3, #1
 801b908:	bfb8      	it	lt
 801b90a:	2300      	movlt	r3, #0
 801b90c:	441d      	add	r5, r3
 801b90e:	e693      	b.n	801b638 <_svfprintf_r+0x568>
 801b910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b912:	462b      	mov	r3, r5
 801b914:	18a9      	adds	r1, r5, r2
 801b916:	2030      	movs	r0, #48	; 0x30
 801b918:	e7ee      	b.n	801b8f8 <_svfprintf_r+0x828>
 801b91a:	9b08      	ldr	r3, [sp, #32]
 801b91c:	2b46      	cmp	r3, #70	; 0x46
 801b91e:	d005      	beq.n	801b92c <_svfprintf_r+0x85c>
 801b920:	2b45      	cmp	r3, #69	; 0x45
 801b922:	d11b      	bne.n	801b95c <_svfprintf_r+0x88c>
 801b924:	9b04      	ldr	r3, [sp, #16]
 801b926:	1c5d      	adds	r5, r3, #1
 801b928:	2102      	movs	r1, #2
 801b92a:	e001      	b.n	801b930 <_svfprintf_r+0x860>
 801b92c:	9d04      	ldr	r5, [sp, #16]
 801b92e:	2103      	movs	r1, #3
 801b930:	ab20      	add	r3, sp, #128	; 0x80
 801b932:	9301      	str	r3, [sp, #4]
 801b934:	ab1d      	add	r3, sp, #116	; 0x74
 801b936:	9300      	str	r3, [sp, #0]
 801b938:	462a      	mov	r2, r5
 801b93a:	ab1c      	add	r3, sp, #112	; 0x70
 801b93c:	4650      	mov	r0, sl
 801b93e:	eeb0 0a48 	vmov.f32	s0, s16
 801b942:	eef0 0a68 	vmov.f32	s1, s17
 801b946:	f002 fb5b 	bl	801e000 <_dtoa_r>
 801b94a:	9b08      	ldr	r3, [sp, #32]
 801b94c:	2b47      	cmp	r3, #71	; 0x47
 801b94e:	4683      	mov	fp, r0
 801b950:	d106      	bne.n	801b960 <_svfprintf_r+0x890>
 801b952:	f018 0f01 	tst.w	r8, #1
 801b956:	d103      	bne.n	801b960 <_svfprintf_r+0x890>
 801b958:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b95a:	e66d      	b.n	801b638 <_svfprintf_r+0x568>
 801b95c:	9d04      	ldr	r5, [sp, #16]
 801b95e:	e7e3      	b.n	801b928 <_svfprintf_r+0x858>
 801b960:	9b08      	ldr	r3, [sp, #32]
 801b962:	2b46      	cmp	r3, #70	; 0x46
 801b964:	eb0b 0605 	add.w	r6, fp, r5
 801b968:	d10f      	bne.n	801b98a <_svfprintf_r+0x8ba>
 801b96a:	f89b 3000 	ldrb.w	r3, [fp]
 801b96e:	2b30      	cmp	r3, #48	; 0x30
 801b970:	d109      	bne.n	801b986 <_svfprintf_r+0x8b6>
 801b972:	ec51 0b18 	vmov	r0, r1, d8
 801b976:	2200      	movs	r2, #0
 801b978:	2300      	movs	r3, #0
 801b97a:	f7e5 f8d5 	bl	8000b28 <__aeabi_dcmpeq>
 801b97e:	b910      	cbnz	r0, 801b986 <_svfprintf_r+0x8b6>
 801b980:	f1c5 0501 	rsb	r5, r5, #1
 801b984:	951c      	str	r5, [sp, #112]	; 0x70
 801b986:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b988:	441e      	add	r6, r3
 801b98a:	ec51 0b18 	vmov	r0, r1, d8
 801b98e:	2200      	movs	r2, #0
 801b990:	2300      	movs	r3, #0
 801b992:	f7e5 f8c9 	bl	8000b28 <__aeabi_dcmpeq>
 801b996:	b100      	cbz	r0, 801b99a <_svfprintf_r+0x8ca>
 801b998:	9620      	str	r6, [sp, #128]	; 0x80
 801b99a:	2230      	movs	r2, #48	; 0x30
 801b99c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b99e:	429e      	cmp	r6, r3
 801b9a0:	d9da      	bls.n	801b958 <_svfprintf_r+0x888>
 801b9a2:	1c59      	adds	r1, r3, #1
 801b9a4:	9120      	str	r1, [sp, #128]	; 0x80
 801b9a6:	701a      	strb	r2, [r3, #0]
 801b9a8:	e7f8      	b.n	801b99c <_svfprintf_r+0x8cc>
 801b9aa:	9b08      	ldr	r3, [sp, #32]
 801b9ac:	2b46      	cmp	r3, #70	; 0x46
 801b9ae:	f47f ae54 	bne.w	801b65a <_svfprintf_r+0x58a>
 801b9b2:	9a04      	ldr	r2, [sp, #16]
 801b9b4:	f008 0301 	and.w	r3, r8, #1
 801b9b8:	2d00      	cmp	r5, #0
 801b9ba:	ea43 0302 	orr.w	r3, r3, r2
 801b9be:	dd1a      	ble.n	801b9f6 <_svfprintf_r+0x926>
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d034      	beq.n	801ba2e <_svfprintf_r+0x95e>
 801b9c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b9c6:	18eb      	adds	r3, r5, r3
 801b9c8:	441a      	add	r2, r3
 801b9ca:	9204      	str	r2, [sp, #16]
 801b9cc:	2366      	movs	r3, #102	; 0x66
 801b9ce:	9307      	str	r3, [sp, #28]
 801b9d0:	e033      	b.n	801ba3a <_svfprintf_r+0x96a>
 801b9d2:	f813 6b01 	ldrb.w	r6, [r3], #1
 801b9d6:	f802 6b01 	strb.w	r6, [r2], #1
 801b9da:	e675      	b.n	801b6c8 <_svfprintf_r+0x5f8>
 801b9dc:	b941      	cbnz	r1, 801b9f0 <_svfprintf_r+0x920>
 801b9de:	2230      	movs	r2, #48	; 0x30
 801b9e0:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801b9e4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801b9e8:	3330      	adds	r3, #48	; 0x30
 801b9ea:	f802 3b01 	strb.w	r3, [r2], #1
 801b9ee:	e677      	b.n	801b6e0 <_svfprintf_r+0x610>
 801b9f0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801b9f4:	e7f8      	b.n	801b9e8 <_svfprintf_r+0x918>
 801b9f6:	b1e3      	cbz	r3, 801ba32 <_svfprintf_r+0x962>
 801b9f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b9fa:	9a04      	ldr	r2, [sp, #16]
 801b9fc:	3301      	adds	r3, #1
 801b9fe:	e7e3      	b.n	801b9c8 <_svfprintf_r+0x8f8>
 801ba00:	9b05      	ldr	r3, [sp, #20]
 801ba02:	429d      	cmp	r5, r3
 801ba04:	db07      	blt.n	801ba16 <_svfprintf_r+0x946>
 801ba06:	f018 0f01 	tst.w	r8, #1
 801ba0a:	d02d      	beq.n	801ba68 <_svfprintf_r+0x998>
 801ba0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba0e:	18eb      	adds	r3, r5, r3
 801ba10:	9304      	str	r3, [sp, #16]
 801ba12:	2367      	movs	r3, #103	; 0x67
 801ba14:	e7db      	b.n	801b9ce <_svfprintf_r+0x8fe>
 801ba16:	9b05      	ldr	r3, [sp, #20]
 801ba18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ba1a:	2d00      	cmp	r5, #0
 801ba1c:	4413      	add	r3, r2
 801ba1e:	9304      	str	r3, [sp, #16]
 801ba20:	dcf7      	bgt.n	801ba12 <_svfprintf_r+0x942>
 801ba22:	9a04      	ldr	r2, [sp, #16]
 801ba24:	f1c5 0301 	rsb	r3, r5, #1
 801ba28:	441a      	add	r2, r3
 801ba2a:	4613      	mov	r3, r2
 801ba2c:	e7f0      	b.n	801ba10 <_svfprintf_r+0x940>
 801ba2e:	9504      	str	r5, [sp, #16]
 801ba30:	e7cc      	b.n	801b9cc <_svfprintf_r+0x8fc>
 801ba32:	2366      	movs	r3, #102	; 0x66
 801ba34:	9307      	str	r3, [sp, #28]
 801ba36:	2301      	movs	r3, #1
 801ba38:	9304      	str	r3, [sp, #16]
 801ba3a:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801ba3e:	9309      	str	r3, [sp, #36]	; 0x24
 801ba40:	d025      	beq.n	801ba8e <_svfprintf_r+0x9be>
 801ba42:	2300      	movs	r3, #0
 801ba44:	2d00      	cmp	r5, #0
 801ba46:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801ba4a:	f77f ae61 	ble.w	801b710 <_svfprintf_r+0x640>
 801ba4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba50:	781b      	ldrb	r3, [r3, #0]
 801ba52:	2bff      	cmp	r3, #255	; 0xff
 801ba54:	d10a      	bne.n	801ba6c <_svfprintf_r+0x99c>
 801ba56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ba5a:	9904      	ldr	r1, [sp, #16]
 801ba5c:	4413      	add	r3, r2
 801ba5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ba60:	fb02 1303 	mla	r3, r2, r3, r1
 801ba64:	9304      	str	r3, [sp, #16]
 801ba66:	e653      	b.n	801b710 <_svfprintf_r+0x640>
 801ba68:	9504      	str	r5, [sp, #16]
 801ba6a:	e7d2      	b.n	801ba12 <_svfprintf_r+0x942>
 801ba6c:	42ab      	cmp	r3, r5
 801ba6e:	daf2      	bge.n	801ba56 <_svfprintf_r+0x986>
 801ba70:	1aed      	subs	r5, r5, r3
 801ba72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba74:	785b      	ldrb	r3, [r3, #1]
 801ba76:	b133      	cbz	r3, 801ba86 <_svfprintf_r+0x9b6>
 801ba78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba7a:	3301      	adds	r3, #1
 801ba7c:	9309      	str	r3, [sp, #36]	; 0x24
 801ba7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba80:	3301      	adds	r3, #1
 801ba82:	930a      	str	r3, [sp, #40]	; 0x28
 801ba84:	e7e3      	b.n	801ba4e <_svfprintf_r+0x97e>
 801ba86:	9b08      	ldr	r3, [sp, #32]
 801ba88:	3301      	adds	r3, #1
 801ba8a:	9308      	str	r3, [sp, #32]
 801ba8c:	e7df      	b.n	801ba4e <_svfprintf_r+0x97e>
 801ba8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba90:	9308      	str	r3, [sp, #32]
 801ba92:	e63d      	b.n	801b710 <_svfprintf_r+0x640>
 801ba94:	4632      	mov	r2, r6
 801ba96:	f018 0f20 	tst.w	r8, #32
 801ba9a:	f852 3b04 	ldr.w	r3, [r2], #4
 801ba9e:	9206      	str	r2, [sp, #24]
 801baa0:	d009      	beq.n	801bab6 <_svfprintf_r+0x9e6>
 801baa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801baa4:	4610      	mov	r0, r2
 801baa6:	17d1      	asrs	r1, r2, #31
 801baa8:	e9c3 0100 	strd	r0, r1, [r3]
 801baac:	9e06      	ldr	r6, [sp, #24]
 801baae:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801bab2:	f7ff bb4d 	b.w	801b150 <_svfprintf_r+0x80>
 801bab6:	f018 0f10 	tst.w	r8, #16
 801baba:	d002      	beq.n	801bac2 <_svfprintf_r+0x9f2>
 801babc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801babe:	601a      	str	r2, [r3, #0]
 801bac0:	e7f4      	b.n	801baac <_svfprintf_r+0x9dc>
 801bac2:	f018 0f40 	tst.w	r8, #64	; 0x40
 801bac6:	d002      	beq.n	801bace <_svfprintf_r+0x9fe>
 801bac8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801baca:	801a      	strh	r2, [r3, #0]
 801bacc:	e7ee      	b.n	801baac <_svfprintf_r+0x9dc>
 801bace:	f418 7f00 	tst.w	r8, #512	; 0x200
 801bad2:	d0f3      	beq.n	801babc <_svfprintf_r+0x9ec>
 801bad4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bad6:	701a      	strb	r2, [r3, #0]
 801bad8:	e7e8      	b.n	801baac <_svfprintf_r+0x9dc>
 801bada:	f048 0810 	orr.w	r8, r8, #16
 801bade:	f018 0f20 	tst.w	r8, #32
 801bae2:	d01e      	beq.n	801bb22 <_svfprintf_r+0xa52>
 801bae4:	3607      	adds	r6, #7
 801bae6:	f026 0307 	bic.w	r3, r6, #7
 801baea:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801baee:	9306      	str	r3, [sp, #24]
 801baf0:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801baf4:	2300      	movs	r3, #0
 801baf6:	2200      	movs	r2, #0
 801baf8:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801bafc:	9a04      	ldr	r2, [sp, #16]
 801bafe:	3201      	adds	r2, #1
 801bb00:	f000 848d 	beq.w	801c41e <_svfprintf_r+0x134e>
 801bb04:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 801bb08:	9203      	str	r2, [sp, #12]
 801bb0a:	ea56 0207 	orrs.w	r2, r6, r7
 801bb0e:	f040 848c 	bne.w	801c42a <_svfprintf_r+0x135a>
 801bb12:	9a04      	ldr	r2, [sp, #16]
 801bb14:	2a00      	cmp	r2, #0
 801bb16:	f000 80f5 	beq.w	801bd04 <_svfprintf_r+0xc34>
 801bb1a:	2b01      	cmp	r3, #1
 801bb1c:	f040 8488 	bne.w	801c430 <_svfprintf_r+0x1360>
 801bb20:	e097      	b.n	801bc52 <_svfprintf_r+0xb82>
 801bb22:	1d33      	adds	r3, r6, #4
 801bb24:	f018 0f10 	tst.w	r8, #16
 801bb28:	9306      	str	r3, [sp, #24]
 801bb2a:	d001      	beq.n	801bb30 <_svfprintf_r+0xa60>
 801bb2c:	6836      	ldr	r6, [r6, #0]
 801bb2e:	e003      	b.n	801bb38 <_svfprintf_r+0xa68>
 801bb30:	f018 0f40 	tst.w	r8, #64	; 0x40
 801bb34:	d002      	beq.n	801bb3c <_svfprintf_r+0xa6c>
 801bb36:	8836      	ldrh	r6, [r6, #0]
 801bb38:	2700      	movs	r7, #0
 801bb3a:	e7d9      	b.n	801baf0 <_svfprintf_r+0xa20>
 801bb3c:	f418 7f00 	tst.w	r8, #512	; 0x200
 801bb40:	d0f4      	beq.n	801bb2c <_svfprintf_r+0xa5c>
 801bb42:	7836      	ldrb	r6, [r6, #0]
 801bb44:	e7f8      	b.n	801bb38 <_svfprintf_r+0xa68>
 801bb46:	4633      	mov	r3, r6
 801bb48:	2278      	movs	r2, #120	; 0x78
 801bb4a:	f853 6b04 	ldr.w	r6, [r3], #4
 801bb4e:	9306      	str	r3, [sp, #24]
 801bb50:	f647 0330 	movw	r3, #30768	; 0x7830
 801bb54:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801bb58:	4ba1      	ldr	r3, [pc, #644]	; (801bde0 <_svfprintf_r+0xd10>)
 801bb5a:	9316      	str	r3, [sp, #88]	; 0x58
 801bb5c:	2700      	movs	r7, #0
 801bb5e:	f048 0802 	orr.w	r8, r8, #2
 801bb62:	2302      	movs	r3, #2
 801bb64:	9207      	str	r2, [sp, #28]
 801bb66:	e7c6      	b.n	801baf6 <_svfprintf_r+0xa26>
 801bb68:	4633      	mov	r3, r6
 801bb6a:	2500      	movs	r5, #0
 801bb6c:	f853 bb04 	ldr.w	fp, [r3], #4
 801bb70:	9306      	str	r3, [sp, #24]
 801bb72:	9b04      	ldr	r3, [sp, #16]
 801bb74:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801bb78:	1c59      	adds	r1, r3, #1
 801bb7a:	d010      	beq.n	801bb9e <_svfprintf_r+0xace>
 801bb7c:	461a      	mov	r2, r3
 801bb7e:	4629      	mov	r1, r5
 801bb80:	4658      	mov	r0, fp
 801bb82:	f7e4 fb5d 	bl	8000240 <memchr>
 801bb86:	9003      	str	r0, [sp, #12]
 801bb88:	2800      	cmp	r0, #0
 801bb8a:	f000 80d2 	beq.w	801bd32 <_svfprintf_r+0xc62>
 801bb8e:	eba0 030b 	sub.w	r3, r0, fp
 801bb92:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801bb96:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801bb9a:	462e      	mov	r6, r5
 801bb9c:	e5c0      	b.n	801b720 <_svfprintf_r+0x650>
 801bb9e:	4658      	mov	r0, fp
 801bba0:	f7e4 fb40 	bl	8000224 <strlen>
 801bba4:	e9cd 5003 	strd	r5, r0, [sp, #12]
 801bba8:	e463      	b.n	801b472 <_svfprintf_r+0x3a2>
 801bbaa:	f048 0810 	orr.w	r8, r8, #16
 801bbae:	f018 0f20 	tst.w	r8, #32
 801bbb2:	d007      	beq.n	801bbc4 <_svfprintf_r+0xaf4>
 801bbb4:	3607      	adds	r6, #7
 801bbb6:	f026 0307 	bic.w	r3, r6, #7
 801bbba:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801bbbe:	9306      	str	r3, [sp, #24]
 801bbc0:	2301      	movs	r3, #1
 801bbc2:	e798      	b.n	801baf6 <_svfprintf_r+0xa26>
 801bbc4:	1d33      	adds	r3, r6, #4
 801bbc6:	f018 0f10 	tst.w	r8, #16
 801bbca:	9306      	str	r3, [sp, #24]
 801bbcc:	d001      	beq.n	801bbd2 <_svfprintf_r+0xb02>
 801bbce:	6836      	ldr	r6, [r6, #0]
 801bbd0:	e003      	b.n	801bbda <_svfprintf_r+0xb0a>
 801bbd2:	f018 0f40 	tst.w	r8, #64	; 0x40
 801bbd6:	d002      	beq.n	801bbde <_svfprintf_r+0xb0e>
 801bbd8:	8836      	ldrh	r6, [r6, #0]
 801bbda:	2700      	movs	r7, #0
 801bbdc:	e7f0      	b.n	801bbc0 <_svfprintf_r+0xaf0>
 801bbde:	f418 7f00 	tst.w	r8, #512	; 0x200
 801bbe2:	d0f4      	beq.n	801bbce <_svfprintf_r+0xafe>
 801bbe4:	7836      	ldrb	r6, [r6, #0]
 801bbe6:	e7f8      	b.n	801bbda <_svfprintf_r+0xb0a>
 801bbe8:	4b7e      	ldr	r3, [pc, #504]	; (801bde4 <_svfprintf_r+0xd14>)
 801bbea:	9316      	str	r3, [sp, #88]	; 0x58
 801bbec:	f018 0f20 	tst.w	r8, #32
 801bbf0:	d019      	beq.n	801bc26 <_svfprintf_r+0xb56>
 801bbf2:	3607      	adds	r6, #7
 801bbf4:	f026 0307 	bic.w	r3, r6, #7
 801bbf8:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801bbfc:	9306      	str	r3, [sp, #24]
 801bbfe:	f018 0f01 	tst.w	r8, #1
 801bc02:	d00a      	beq.n	801bc1a <_svfprintf_r+0xb4a>
 801bc04:	ea56 0307 	orrs.w	r3, r6, r7
 801bc08:	d007      	beq.n	801bc1a <_svfprintf_r+0xb4a>
 801bc0a:	2330      	movs	r3, #48	; 0x30
 801bc0c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801bc10:	9b07      	ldr	r3, [sp, #28]
 801bc12:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801bc16:	f048 0802 	orr.w	r8, r8, #2
 801bc1a:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801bc1e:	2302      	movs	r3, #2
 801bc20:	e769      	b.n	801baf6 <_svfprintf_r+0xa26>
 801bc22:	4b6f      	ldr	r3, [pc, #444]	; (801bde0 <_svfprintf_r+0xd10>)
 801bc24:	e7e1      	b.n	801bbea <_svfprintf_r+0xb1a>
 801bc26:	1d33      	adds	r3, r6, #4
 801bc28:	f018 0f10 	tst.w	r8, #16
 801bc2c:	9306      	str	r3, [sp, #24]
 801bc2e:	d001      	beq.n	801bc34 <_svfprintf_r+0xb64>
 801bc30:	6836      	ldr	r6, [r6, #0]
 801bc32:	e003      	b.n	801bc3c <_svfprintf_r+0xb6c>
 801bc34:	f018 0f40 	tst.w	r8, #64	; 0x40
 801bc38:	d002      	beq.n	801bc40 <_svfprintf_r+0xb70>
 801bc3a:	8836      	ldrh	r6, [r6, #0]
 801bc3c:	2700      	movs	r7, #0
 801bc3e:	e7de      	b.n	801bbfe <_svfprintf_r+0xb2e>
 801bc40:	f418 7f00 	tst.w	r8, #512	; 0x200
 801bc44:	d0f4      	beq.n	801bc30 <_svfprintf_r+0xb60>
 801bc46:	7836      	ldrb	r6, [r6, #0]
 801bc48:	e7f8      	b.n	801bc3c <_svfprintf_r+0xb6c>
 801bc4a:	2f00      	cmp	r7, #0
 801bc4c:	bf08      	it	eq
 801bc4e:	2e0a      	cmpeq	r6, #10
 801bc50:	d206      	bcs.n	801bc60 <_svfprintf_r+0xb90>
 801bc52:	3630      	adds	r6, #48	; 0x30
 801bc54:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801bc58:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 801bc5c:	f000 bc06 	b.w	801c46c <_svfprintf_r+0x139c>
 801bc60:	2300      	movs	r3, #0
 801bc62:	9305      	str	r3, [sp, #20]
 801bc64:	9b03      	ldr	r3, [sp, #12]
 801bc66:	ad4e      	add	r5, sp, #312	; 0x138
 801bc68:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 801bc6c:	220a      	movs	r2, #10
 801bc6e:	2300      	movs	r3, #0
 801bc70:	4630      	mov	r0, r6
 801bc72:	4639      	mov	r1, r7
 801bc74:	f7e5 f818 	bl	8000ca8 <__aeabi_uldivmod>
 801bc78:	9b05      	ldr	r3, [sp, #20]
 801bc7a:	3230      	adds	r2, #48	; 0x30
 801bc7c:	3301      	adds	r3, #1
 801bc7e:	f105 3bff 	add.w	fp, r5, #4294967295
 801bc82:	f805 2c01 	strb.w	r2, [r5, #-1]
 801bc86:	9305      	str	r3, [sp, #20]
 801bc88:	f1b8 0f00 	cmp.w	r8, #0
 801bc8c:	d019      	beq.n	801bcc2 <_svfprintf_r+0xbf2>
 801bc8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc90:	9a05      	ldr	r2, [sp, #20]
 801bc92:	781b      	ldrb	r3, [r3, #0]
 801bc94:	429a      	cmp	r2, r3
 801bc96:	d114      	bne.n	801bcc2 <_svfprintf_r+0xbf2>
 801bc98:	2aff      	cmp	r2, #255	; 0xff
 801bc9a:	d012      	beq.n	801bcc2 <_svfprintf_r+0xbf2>
 801bc9c:	2f00      	cmp	r7, #0
 801bc9e:	bf08      	it	eq
 801bca0:	2e0a      	cmpeq	r6, #10
 801bca2:	d30e      	bcc.n	801bcc2 <_svfprintf_r+0xbf2>
 801bca4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bca6:	9914      	ldr	r1, [sp, #80]	; 0x50
 801bca8:	ebab 0b03 	sub.w	fp, fp, r3
 801bcac:	461a      	mov	r2, r3
 801bcae:	4658      	mov	r0, fp
 801bcb0:	f7ff f96b 	bl	801af8a <strncpy>
 801bcb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcb6:	785d      	ldrb	r5, [r3, #1]
 801bcb8:	b195      	cbz	r5, 801bce0 <_svfprintf_r+0xc10>
 801bcba:	3301      	adds	r3, #1
 801bcbc:	930a      	str	r3, [sp, #40]	; 0x28
 801bcbe:	2300      	movs	r3, #0
 801bcc0:	9305      	str	r3, [sp, #20]
 801bcc2:	220a      	movs	r2, #10
 801bcc4:	2300      	movs	r3, #0
 801bcc6:	4630      	mov	r0, r6
 801bcc8:	4639      	mov	r1, r7
 801bcca:	f7e4 ffed 	bl	8000ca8 <__aeabi_uldivmod>
 801bcce:	2f00      	cmp	r7, #0
 801bcd0:	bf08      	it	eq
 801bcd2:	2e0a      	cmpeq	r6, #10
 801bcd4:	f0c0 83ca 	bcc.w	801c46c <_svfprintf_r+0x139c>
 801bcd8:	4606      	mov	r6, r0
 801bcda:	460f      	mov	r7, r1
 801bcdc:	465d      	mov	r5, fp
 801bcde:	e7c5      	b.n	801bc6c <_svfprintf_r+0xb9c>
 801bce0:	9505      	str	r5, [sp, #20]
 801bce2:	e7ee      	b.n	801bcc2 <_svfprintf_r+0xbf2>
 801bce4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bce6:	f006 030f 	and.w	r3, r6, #15
 801bcea:	5cd3      	ldrb	r3, [r2, r3]
 801bcec:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801bcf0:	0933      	lsrs	r3, r6, #4
 801bcf2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801bcf6:	093a      	lsrs	r2, r7, #4
 801bcf8:	461e      	mov	r6, r3
 801bcfa:	4617      	mov	r7, r2
 801bcfc:	ea56 0307 	orrs.w	r3, r6, r7
 801bd00:	d1f0      	bne.n	801bce4 <_svfprintf_r+0xc14>
 801bd02:	e3b3      	b.n	801c46c <_svfprintf_r+0x139c>
 801bd04:	b933      	cbnz	r3, 801bd14 <_svfprintf_r+0xc44>
 801bd06:	f018 0f01 	tst.w	r8, #1
 801bd0a:	d003      	beq.n	801bd14 <_svfprintf_r+0xc44>
 801bd0c:	2330      	movs	r3, #48	; 0x30
 801bd0e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801bd12:	e7a1      	b.n	801bc58 <_svfprintf_r+0xb88>
 801bd14:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801bd18:	e3a8      	b.n	801c46c <_svfprintf_r+0x139c>
 801bd1a:	9b07      	ldr	r3, [sp, #28]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	f000 8373 	beq.w	801c408 <_svfprintf_r+0x1338>
 801bd22:	2000      	movs	r0, #0
 801bd24:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801bd28:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801bd2c:	9606      	str	r6, [sp, #24]
 801bd2e:	f7ff bb34 	b.w	801b39a <_svfprintf_r+0x2ca>
 801bd32:	9e03      	ldr	r6, [sp, #12]
 801bd34:	f7ff bb9e 	b.w	801b474 <_svfprintf_r+0x3a4>
 801bd38:	2010      	movs	r0, #16
 801bd3a:	4402      	add	r2, r0
 801bd3c:	2b07      	cmp	r3, #7
 801bd3e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801bd42:	6060      	str	r0, [r4, #4]
 801bd44:	dd08      	ble.n	801bd58 <_svfprintf_r+0xc88>
 801bd46:	aa22      	add	r2, sp, #136	; 0x88
 801bd48:	4649      	mov	r1, r9
 801bd4a:	4650      	mov	r0, sl
 801bd4c:	f004 f9e0 	bl	8020110 <__ssprint_r>
 801bd50:	2800      	cmp	r0, #0
 801bd52:	f040 8337 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801bd56:	a925      	add	r1, sp, #148	; 0x94
 801bd58:	3f10      	subs	r7, #16
 801bd5a:	460c      	mov	r4, r1
 801bd5c:	e4fb      	b.n	801b756 <_svfprintf_r+0x686>
 801bd5e:	460c      	mov	r4, r1
 801bd60:	e514      	b.n	801b78c <_svfprintf_r+0x6bc>
 801bd62:	aa22      	add	r2, sp, #136	; 0x88
 801bd64:	4649      	mov	r1, r9
 801bd66:	4650      	mov	r0, sl
 801bd68:	f004 f9d2 	bl	8020110 <__ssprint_r>
 801bd6c:	2800      	cmp	r0, #0
 801bd6e:	f040 8329 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801bd72:	ac25      	add	r4, sp, #148	; 0x94
 801bd74:	e51c      	b.n	801b7b0 <_svfprintf_r+0x6e0>
 801bd76:	aa22      	add	r2, sp, #136	; 0x88
 801bd78:	4649      	mov	r1, r9
 801bd7a:	4650      	mov	r0, sl
 801bd7c:	f004 f9c8 	bl	8020110 <__ssprint_r>
 801bd80:	2800      	cmp	r0, #0
 801bd82:	f040 831f 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801bd86:	ac25      	add	r4, sp, #148	; 0x94
 801bd88:	e522      	b.n	801b7d0 <_svfprintf_r+0x700>
 801bd8a:	2010      	movs	r0, #16
 801bd8c:	4402      	add	r2, r0
 801bd8e:	2b07      	cmp	r3, #7
 801bd90:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801bd94:	6060      	str	r0, [r4, #4]
 801bd96:	dd08      	ble.n	801bdaa <_svfprintf_r+0xcda>
 801bd98:	aa22      	add	r2, sp, #136	; 0x88
 801bd9a:	4649      	mov	r1, r9
 801bd9c:	4650      	mov	r0, sl
 801bd9e:	f004 f9b7 	bl	8020110 <__ssprint_r>
 801bda2:	2800      	cmp	r0, #0
 801bda4:	f040 830e 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801bda8:	a925      	add	r1, sp, #148	; 0x94
 801bdaa:	3f10      	subs	r7, #16
 801bdac:	460c      	mov	r4, r1
 801bdae:	e517      	b.n	801b7e0 <_svfprintf_r+0x710>
 801bdb0:	460c      	mov	r4, r1
 801bdb2:	e530      	b.n	801b816 <_svfprintf_r+0x746>
 801bdb4:	2010      	movs	r0, #16
 801bdb6:	4402      	add	r2, r0
 801bdb8:	2b07      	cmp	r3, #7
 801bdba:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801bdbe:	6060      	str	r0, [r4, #4]
 801bdc0:	dd08      	ble.n	801bdd4 <_svfprintf_r+0xd04>
 801bdc2:	aa22      	add	r2, sp, #136	; 0x88
 801bdc4:	4649      	mov	r1, r9
 801bdc6:	4650      	mov	r0, sl
 801bdc8:	f004 f9a2 	bl	8020110 <__ssprint_r>
 801bdcc:	2800      	cmp	r0, #0
 801bdce:	f040 82f9 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801bdd2:	a925      	add	r1, sp, #148	; 0x94
 801bdd4:	3e10      	subs	r6, #16
 801bdd6:	460c      	mov	r4, r1
 801bdd8:	e522      	b.n	801b820 <_svfprintf_r+0x750>
 801bdda:	460c      	mov	r4, r1
 801bddc:	e548      	b.n	801b870 <_svfprintf_r+0x7a0>
 801bdde:	bf00      	nop
 801bde0:	08028f20 	.word	0x08028f20
 801bde4:	08028f31 	.word	0x08028f31
 801bde8:	9b07      	ldr	r3, [sp, #28]
 801bdea:	2b65      	cmp	r3, #101	; 0x65
 801bdec:	f340 8232 	ble.w	801c254 <_svfprintf_r+0x1184>
 801bdf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bdf4:	2200      	movs	r2, #0
 801bdf6:	2300      	movs	r3, #0
 801bdf8:	f7e4 fe96 	bl	8000b28 <__aeabi_dcmpeq>
 801bdfc:	2800      	cmp	r0, #0
 801bdfe:	d068      	beq.n	801bed2 <_svfprintf_r+0xe02>
 801be00:	4b6d      	ldr	r3, [pc, #436]	; (801bfb8 <_svfprintf_r+0xee8>)
 801be02:	6023      	str	r3, [r4, #0]
 801be04:	2301      	movs	r3, #1
 801be06:	441e      	add	r6, r3
 801be08:	6063      	str	r3, [r4, #4]
 801be0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801be0c:	9624      	str	r6, [sp, #144]	; 0x90
 801be0e:	3301      	adds	r3, #1
 801be10:	2b07      	cmp	r3, #7
 801be12:	9323      	str	r3, [sp, #140]	; 0x8c
 801be14:	dc37      	bgt.n	801be86 <_svfprintf_r+0xdb6>
 801be16:	3408      	adds	r4, #8
 801be18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801be1a:	9a05      	ldr	r2, [sp, #20]
 801be1c:	4293      	cmp	r3, r2
 801be1e:	db03      	blt.n	801be28 <_svfprintf_r+0xd58>
 801be20:	f018 0f01 	tst.w	r8, #1
 801be24:	f43f ad36 	beq.w	801b894 <_svfprintf_r+0x7c4>
 801be28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801be2a:	6023      	str	r3, [r4, #0]
 801be2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801be30:	6063      	str	r3, [r4, #4]
 801be32:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801be34:	4413      	add	r3, r2
 801be36:	9324      	str	r3, [sp, #144]	; 0x90
 801be38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801be3a:	3301      	adds	r3, #1
 801be3c:	2b07      	cmp	r3, #7
 801be3e:	9323      	str	r3, [sp, #140]	; 0x8c
 801be40:	dc2b      	bgt.n	801be9a <_svfprintf_r+0xdca>
 801be42:	3408      	adds	r4, #8
 801be44:	9b05      	ldr	r3, [sp, #20]
 801be46:	1e5d      	subs	r5, r3, #1
 801be48:	2d00      	cmp	r5, #0
 801be4a:	f77f ad23 	ble.w	801b894 <_svfprintf_r+0x7c4>
 801be4e:	4e5b      	ldr	r6, [pc, #364]	; (801bfbc <_svfprintf_r+0xeec>)
 801be50:	2710      	movs	r7, #16
 801be52:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801be56:	2d10      	cmp	r5, #16
 801be58:	f103 0301 	add.w	r3, r3, #1
 801be5c:	f104 0108 	add.w	r1, r4, #8
 801be60:	6026      	str	r6, [r4, #0]
 801be62:	dc24      	bgt.n	801beae <_svfprintf_r+0xdde>
 801be64:	6065      	str	r5, [r4, #4]
 801be66:	2b07      	cmp	r3, #7
 801be68:	4415      	add	r5, r2
 801be6a:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801be6e:	f340 8288 	ble.w	801c382 <_svfprintf_r+0x12b2>
 801be72:	aa22      	add	r2, sp, #136	; 0x88
 801be74:	4649      	mov	r1, r9
 801be76:	4650      	mov	r0, sl
 801be78:	f004 f94a 	bl	8020110 <__ssprint_r>
 801be7c:	2800      	cmp	r0, #0
 801be7e:	f040 82a1 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801be82:	ac25      	add	r4, sp, #148	; 0x94
 801be84:	e506      	b.n	801b894 <_svfprintf_r+0x7c4>
 801be86:	aa22      	add	r2, sp, #136	; 0x88
 801be88:	4649      	mov	r1, r9
 801be8a:	4650      	mov	r0, sl
 801be8c:	f004 f940 	bl	8020110 <__ssprint_r>
 801be90:	2800      	cmp	r0, #0
 801be92:	f040 8297 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801be96:	ac25      	add	r4, sp, #148	; 0x94
 801be98:	e7be      	b.n	801be18 <_svfprintf_r+0xd48>
 801be9a:	aa22      	add	r2, sp, #136	; 0x88
 801be9c:	4649      	mov	r1, r9
 801be9e:	4650      	mov	r0, sl
 801bea0:	f004 f936 	bl	8020110 <__ssprint_r>
 801bea4:	2800      	cmp	r0, #0
 801bea6:	f040 828d 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801beaa:	ac25      	add	r4, sp, #148	; 0x94
 801beac:	e7ca      	b.n	801be44 <_svfprintf_r+0xd74>
 801beae:	3210      	adds	r2, #16
 801beb0:	2b07      	cmp	r3, #7
 801beb2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801beb6:	6067      	str	r7, [r4, #4]
 801beb8:	dd08      	ble.n	801becc <_svfprintf_r+0xdfc>
 801beba:	aa22      	add	r2, sp, #136	; 0x88
 801bebc:	4649      	mov	r1, r9
 801bebe:	4650      	mov	r0, sl
 801bec0:	f004 f926 	bl	8020110 <__ssprint_r>
 801bec4:	2800      	cmp	r0, #0
 801bec6:	f040 827d 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801beca:	a925      	add	r1, sp, #148	; 0x94
 801becc:	3d10      	subs	r5, #16
 801bece:	460c      	mov	r4, r1
 801bed0:	e7bf      	b.n	801be52 <_svfprintf_r+0xd82>
 801bed2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	dc73      	bgt.n	801bfc0 <_svfprintf_r+0xef0>
 801bed8:	4b37      	ldr	r3, [pc, #220]	; (801bfb8 <_svfprintf_r+0xee8>)
 801beda:	6023      	str	r3, [r4, #0]
 801bedc:	2301      	movs	r3, #1
 801bede:	441e      	add	r6, r3
 801bee0:	6063      	str	r3, [r4, #4]
 801bee2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bee4:	9624      	str	r6, [sp, #144]	; 0x90
 801bee6:	3301      	adds	r3, #1
 801bee8:	2b07      	cmp	r3, #7
 801beea:	9323      	str	r3, [sp, #140]	; 0x8c
 801beec:	dc3d      	bgt.n	801bf6a <_svfprintf_r+0xe9a>
 801beee:	3408      	adds	r4, #8
 801bef0:	9905      	ldr	r1, [sp, #20]
 801bef2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801bef4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bef6:	430a      	orrs	r2, r1
 801bef8:	f008 0101 	and.w	r1, r8, #1
 801befc:	430a      	orrs	r2, r1
 801befe:	f43f acc9 	beq.w	801b894 <_svfprintf_r+0x7c4>
 801bf02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bf04:	6022      	str	r2, [r4, #0]
 801bf06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bf08:	6062      	str	r2, [r4, #4]
 801bf0a:	4413      	add	r3, r2
 801bf0c:	9324      	str	r3, [sp, #144]	; 0x90
 801bf0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bf10:	3301      	adds	r3, #1
 801bf12:	2b07      	cmp	r3, #7
 801bf14:	9323      	str	r3, [sp, #140]	; 0x8c
 801bf16:	dc32      	bgt.n	801bf7e <_svfprintf_r+0xeae>
 801bf18:	3408      	adds	r4, #8
 801bf1a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801bf1c:	2d00      	cmp	r5, #0
 801bf1e:	da1b      	bge.n	801bf58 <_svfprintf_r+0xe88>
 801bf20:	4e26      	ldr	r6, [pc, #152]	; (801bfbc <_svfprintf_r+0xeec>)
 801bf22:	426d      	negs	r5, r5
 801bf24:	4623      	mov	r3, r4
 801bf26:	2710      	movs	r7, #16
 801bf28:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801bf2c:	2d10      	cmp	r5, #16
 801bf2e:	f102 0201 	add.w	r2, r2, #1
 801bf32:	f104 0408 	add.w	r4, r4, #8
 801bf36:	601e      	str	r6, [r3, #0]
 801bf38:	dc2b      	bgt.n	801bf92 <_svfprintf_r+0xec2>
 801bf3a:	605d      	str	r5, [r3, #4]
 801bf3c:	2a07      	cmp	r2, #7
 801bf3e:	440d      	add	r5, r1
 801bf40:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801bf44:	dd08      	ble.n	801bf58 <_svfprintf_r+0xe88>
 801bf46:	aa22      	add	r2, sp, #136	; 0x88
 801bf48:	4649      	mov	r1, r9
 801bf4a:	4650      	mov	r0, sl
 801bf4c:	f004 f8e0 	bl	8020110 <__ssprint_r>
 801bf50:	2800      	cmp	r0, #0
 801bf52:	f040 8237 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801bf56:	ac25      	add	r4, sp, #148	; 0x94
 801bf58:	9b05      	ldr	r3, [sp, #20]
 801bf5a:	9a05      	ldr	r2, [sp, #20]
 801bf5c:	6063      	str	r3, [r4, #4]
 801bf5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bf60:	f8c4 b000 	str.w	fp, [r4]
 801bf64:	4413      	add	r3, r2
 801bf66:	9324      	str	r3, [sp, #144]	; 0x90
 801bf68:	e48d      	b.n	801b886 <_svfprintf_r+0x7b6>
 801bf6a:	aa22      	add	r2, sp, #136	; 0x88
 801bf6c:	4649      	mov	r1, r9
 801bf6e:	4650      	mov	r0, sl
 801bf70:	f004 f8ce 	bl	8020110 <__ssprint_r>
 801bf74:	2800      	cmp	r0, #0
 801bf76:	f040 8225 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801bf7a:	ac25      	add	r4, sp, #148	; 0x94
 801bf7c:	e7b8      	b.n	801bef0 <_svfprintf_r+0xe20>
 801bf7e:	aa22      	add	r2, sp, #136	; 0x88
 801bf80:	4649      	mov	r1, r9
 801bf82:	4650      	mov	r0, sl
 801bf84:	f004 f8c4 	bl	8020110 <__ssprint_r>
 801bf88:	2800      	cmp	r0, #0
 801bf8a:	f040 821b 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801bf8e:	ac25      	add	r4, sp, #148	; 0x94
 801bf90:	e7c3      	b.n	801bf1a <_svfprintf_r+0xe4a>
 801bf92:	3110      	adds	r1, #16
 801bf94:	2a07      	cmp	r2, #7
 801bf96:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801bf9a:	605f      	str	r7, [r3, #4]
 801bf9c:	dd08      	ble.n	801bfb0 <_svfprintf_r+0xee0>
 801bf9e:	aa22      	add	r2, sp, #136	; 0x88
 801bfa0:	4649      	mov	r1, r9
 801bfa2:	4650      	mov	r0, sl
 801bfa4:	f004 f8b4 	bl	8020110 <__ssprint_r>
 801bfa8:	2800      	cmp	r0, #0
 801bfaa:	f040 820b 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801bfae:	ac25      	add	r4, sp, #148	; 0x94
 801bfb0:	3d10      	subs	r5, #16
 801bfb2:	4623      	mov	r3, r4
 801bfb4:	e7b8      	b.n	801bf28 <_svfprintf_r+0xe58>
 801bfb6:	bf00      	nop
 801bfb8:	08028f42 	.word	0x08028f42
 801bfbc:	08028f54 	.word	0x08028f54
 801bfc0:	9b05      	ldr	r3, [sp, #20]
 801bfc2:	42ab      	cmp	r3, r5
 801bfc4:	bfa8      	it	ge
 801bfc6:	462b      	movge	r3, r5
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	461f      	mov	r7, r3
 801bfcc:	dd0a      	ble.n	801bfe4 <_svfprintf_r+0xf14>
 801bfce:	441e      	add	r6, r3
 801bfd0:	e9c4 b300 	strd	fp, r3, [r4]
 801bfd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bfd6:	9624      	str	r6, [sp, #144]	; 0x90
 801bfd8:	3301      	adds	r3, #1
 801bfda:	2b07      	cmp	r3, #7
 801bfdc:	9323      	str	r3, [sp, #140]	; 0x8c
 801bfde:	f300 8086 	bgt.w	801c0ee <_svfprintf_r+0x101e>
 801bfe2:	3408      	adds	r4, #8
 801bfe4:	2f00      	cmp	r7, #0
 801bfe6:	bfac      	ite	ge
 801bfe8:	1bee      	subge	r6, r5, r7
 801bfea:	462e      	movlt	r6, r5
 801bfec:	2e00      	cmp	r6, #0
 801bfee:	dd19      	ble.n	801c024 <_svfprintf_r+0xf54>
 801bff0:	4f97      	ldr	r7, [pc, #604]	; (801c250 <_svfprintf_r+0x1180>)
 801bff2:	6027      	str	r7, [r4, #0]
 801bff4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801bff8:	2e10      	cmp	r6, #16
 801bffa:	f103 0301 	add.w	r3, r3, #1
 801bffe:	f104 0108 	add.w	r1, r4, #8
 801c002:	dc7e      	bgt.n	801c102 <_svfprintf_r+0x1032>
 801c004:	6066      	str	r6, [r4, #4]
 801c006:	2b07      	cmp	r3, #7
 801c008:	4416      	add	r6, r2
 801c00a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801c00e:	f340 808b 	ble.w	801c128 <_svfprintf_r+0x1058>
 801c012:	aa22      	add	r2, sp, #136	; 0x88
 801c014:	4649      	mov	r1, r9
 801c016:	4650      	mov	r0, sl
 801c018:	f004 f87a 	bl	8020110 <__ssprint_r>
 801c01c:	2800      	cmp	r0, #0
 801c01e:	f040 81d1 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801c022:	ac25      	add	r4, sp, #148	; 0x94
 801c024:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801c028:	445d      	add	r5, fp
 801c02a:	d00b      	beq.n	801c044 <_svfprintf_r+0xf74>
 801c02c:	4e88      	ldr	r6, [pc, #544]	; (801c250 <_svfprintf_r+0x1180>)
 801c02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c030:	2b00      	cmp	r3, #0
 801c032:	d17b      	bne.n	801c12c <_svfprintf_r+0x105c>
 801c034:	9b08      	ldr	r3, [sp, #32]
 801c036:	2b00      	cmp	r3, #0
 801c038:	d17b      	bne.n	801c132 <_svfprintf_r+0x1062>
 801c03a:	9b05      	ldr	r3, [sp, #20]
 801c03c:	445b      	add	r3, fp
 801c03e:	429d      	cmp	r5, r3
 801c040:	bf28      	it	cs
 801c042:	461d      	movcs	r5, r3
 801c044:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c046:	9a05      	ldr	r2, [sp, #20]
 801c048:	4293      	cmp	r3, r2
 801c04a:	db02      	blt.n	801c052 <_svfprintf_r+0xf82>
 801c04c:	f018 0f01 	tst.w	r8, #1
 801c050:	d00e      	beq.n	801c070 <_svfprintf_r+0xfa0>
 801c052:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c054:	6023      	str	r3, [r4, #0]
 801c056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c05a:	6063      	str	r3, [r4, #4]
 801c05c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c05e:	4413      	add	r3, r2
 801c060:	9324      	str	r3, [sp, #144]	; 0x90
 801c062:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c064:	3301      	adds	r3, #1
 801c066:	2b07      	cmp	r3, #7
 801c068:	9323      	str	r3, [sp, #140]	; 0x8c
 801c06a:	f300 80dd 	bgt.w	801c228 <_svfprintf_r+0x1158>
 801c06e:	3408      	adds	r4, #8
 801c070:	9b05      	ldr	r3, [sp, #20]
 801c072:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801c074:	eb0b 0203 	add.w	r2, fp, r3
 801c078:	1b9e      	subs	r6, r3, r6
 801c07a:	1b52      	subs	r2, r2, r5
 801c07c:	4296      	cmp	r6, r2
 801c07e:	bfa8      	it	ge
 801c080:	4616      	movge	r6, r2
 801c082:	2e00      	cmp	r6, #0
 801c084:	dd0b      	ble.n	801c09e <_svfprintf_r+0xfce>
 801c086:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c088:	4433      	add	r3, r6
 801c08a:	9324      	str	r3, [sp, #144]	; 0x90
 801c08c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c08e:	3301      	adds	r3, #1
 801c090:	2b07      	cmp	r3, #7
 801c092:	e9c4 5600 	strd	r5, r6, [r4]
 801c096:	9323      	str	r3, [sp, #140]	; 0x8c
 801c098:	f300 80d0 	bgt.w	801c23c <_svfprintf_r+0x116c>
 801c09c:	3408      	adds	r4, #8
 801c09e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801c0a0:	9b05      	ldr	r3, [sp, #20]
 801c0a2:	2e00      	cmp	r6, #0
 801c0a4:	eba3 0505 	sub.w	r5, r3, r5
 801c0a8:	bfa8      	it	ge
 801c0aa:	1bad      	subge	r5, r5, r6
 801c0ac:	2d00      	cmp	r5, #0
 801c0ae:	f77f abf1 	ble.w	801b894 <_svfprintf_r+0x7c4>
 801c0b2:	4e67      	ldr	r6, [pc, #412]	; (801c250 <_svfprintf_r+0x1180>)
 801c0b4:	2710      	movs	r7, #16
 801c0b6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c0ba:	2d10      	cmp	r5, #16
 801c0bc:	f103 0301 	add.w	r3, r3, #1
 801c0c0:	f104 0108 	add.w	r1, r4, #8
 801c0c4:	6026      	str	r6, [r4, #0]
 801c0c6:	f77f aecd 	ble.w	801be64 <_svfprintf_r+0xd94>
 801c0ca:	3210      	adds	r2, #16
 801c0cc:	2b07      	cmp	r3, #7
 801c0ce:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c0d2:	6067      	str	r7, [r4, #4]
 801c0d4:	dd08      	ble.n	801c0e8 <_svfprintf_r+0x1018>
 801c0d6:	aa22      	add	r2, sp, #136	; 0x88
 801c0d8:	4649      	mov	r1, r9
 801c0da:	4650      	mov	r0, sl
 801c0dc:	f004 f818 	bl	8020110 <__ssprint_r>
 801c0e0:	2800      	cmp	r0, #0
 801c0e2:	f040 816f 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801c0e6:	a925      	add	r1, sp, #148	; 0x94
 801c0e8:	3d10      	subs	r5, #16
 801c0ea:	460c      	mov	r4, r1
 801c0ec:	e7e3      	b.n	801c0b6 <_svfprintf_r+0xfe6>
 801c0ee:	aa22      	add	r2, sp, #136	; 0x88
 801c0f0:	4649      	mov	r1, r9
 801c0f2:	4650      	mov	r0, sl
 801c0f4:	f004 f80c 	bl	8020110 <__ssprint_r>
 801c0f8:	2800      	cmp	r0, #0
 801c0fa:	f040 8163 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801c0fe:	ac25      	add	r4, sp, #148	; 0x94
 801c100:	e770      	b.n	801bfe4 <_svfprintf_r+0xf14>
 801c102:	2010      	movs	r0, #16
 801c104:	4402      	add	r2, r0
 801c106:	2b07      	cmp	r3, #7
 801c108:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c10c:	6060      	str	r0, [r4, #4]
 801c10e:	dd08      	ble.n	801c122 <_svfprintf_r+0x1052>
 801c110:	aa22      	add	r2, sp, #136	; 0x88
 801c112:	4649      	mov	r1, r9
 801c114:	4650      	mov	r0, sl
 801c116:	f003 fffb 	bl	8020110 <__ssprint_r>
 801c11a:	2800      	cmp	r0, #0
 801c11c:	f040 8152 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801c120:	a925      	add	r1, sp, #148	; 0x94
 801c122:	3e10      	subs	r6, #16
 801c124:	460c      	mov	r4, r1
 801c126:	e764      	b.n	801bff2 <_svfprintf_r+0xf22>
 801c128:	460c      	mov	r4, r1
 801c12a:	e77b      	b.n	801c024 <_svfprintf_r+0xf54>
 801c12c:	9b08      	ldr	r3, [sp, #32]
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d04a      	beq.n	801c1c8 <_svfprintf_r+0x10f8>
 801c132:	9b08      	ldr	r3, [sp, #32]
 801c134:	3b01      	subs	r3, #1
 801c136:	9308      	str	r3, [sp, #32]
 801c138:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c13a:	6023      	str	r3, [r4, #0]
 801c13c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c13e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c140:	6063      	str	r3, [r4, #4]
 801c142:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c144:	4413      	add	r3, r2
 801c146:	9324      	str	r3, [sp, #144]	; 0x90
 801c148:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c14a:	3301      	adds	r3, #1
 801c14c:	2b07      	cmp	r3, #7
 801c14e:	9323      	str	r3, [sp, #140]	; 0x8c
 801c150:	dc41      	bgt.n	801c1d6 <_svfprintf_r+0x1106>
 801c152:	3408      	adds	r4, #8
 801c154:	9b05      	ldr	r3, [sp, #20]
 801c156:	445b      	add	r3, fp
 801c158:	1b5a      	subs	r2, r3, r5
 801c15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c15c:	781b      	ldrb	r3, [r3, #0]
 801c15e:	4293      	cmp	r3, r2
 801c160:	bfa8      	it	ge
 801c162:	4613      	movge	r3, r2
 801c164:	2b00      	cmp	r3, #0
 801c166:	461f      	mov	r7, r3
 801c168:	dd0a      	ble.n	801c180 <_svfprintf_r+0x10b0>
 801c16a:	e9c4 5300 	strd	r5, r3, [r4]
 801c16e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c170:	443b      	add	r3, r7
 801c172:	9324      	str	r3, [sp, #144]	; 0x90
 801c174:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c176:	3301      	adds	r3, #1
 801c178:	2b07      	cmp	r3, #7
 801c17a:	9323      	str	r3, [sp, #140]	; 0x8c
 801c17c:	dc35      	bgt.n	801c1ea <_svfprintf_r+0x111a>
 801c17e:	3408      	adds	r4, #8
 801c180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c182:	781b      	ldrb	r3, [r3, #0]
 801c184:	2f00      	cmp	r7, #0
 801c186:	bfac      	ite	ge
 801c188:	1bdf      	subge	r7, r3, r7
 801c18a:	461f      	movlt	r7, r3
 801c18c:	2f00      	cmp	r7, #0
 801c18e:	dd17      	ble.n	801c1c0 <_svfprintf_r+0x10f0>
 801c190:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801c194:	2f10      	cmp	r7, #16
 801c196:	f102 0201 	add.w	r2, r2, #1
 801c19a:	f104 0108 	add.w	r1, r4, #8
 801c19e:	6026      	str	r6, [r4, #0]
 801c1a0:	dc2d      	bgt.n	801c1fe <_svfprintf_r+0x112e>
 801c1a2:	443b      	add	r3, r7
 801c1a4:	2a07      	cmp	r2, #7
 801c1a6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801c1aa:	6067      	str	r7, [r4, #4]
 801c1ac:	dd3a      	ble.n	801c224 <_svfprintf_r+0x1154>
 801c1ae:	aa22      	add	r2, sp, #136	; 0x88
 801c1b0:	4649      	mov	r1, r9
 801c1b2:	4650      	mov	r0, sl
 801c1b4:	f003 ffac 	bl	8020110 <__ssprint_r>
 801c1b8:	2800      	cmp	r0, #0
 801c1ba:	f040 8103 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801c1be:	ac25      	add	r4, sp, #148	; 0x94
 801c1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c1c2:	781b      	ldrb	r3, [r3, #0]
 801c1c4:	441d      	add	r5, r3
 801c1c6:	e732      	b.n	801c02e <_svfprintf_r+0xf5e>
 801c1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c1ca:	3b01      	subs	r3, #1
 801c1cc:	930a      	str	r3, [sp, #40]	; 0x28
 801c1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1d0:	3b01      	subs	r3, #1
 801c1d2:	9309      	str	r3, [sp, #36]	; 0x24
 801c1d4:	e7b0      	b.n	801c138 <_svfprintf_r+0x1068>
 801c1d6:	aa22      	add	r2, sp, #136	; 0x88
 801c1d8:	4649      	mov	r1, r9
 801c1da:	4650      	mov	r0, sl
 801c1dc:	f003 ff98 	bl	8020110 <__ssprint_r>
 801c1e0:	2800      	cmp	r0, #0
 801c1e2:	f040 80ef 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801c1e6:	ac25      	add	r4, sp, #148	; 0x94
 801c1e8:	e7b4      	b.n	801c154 <_svfprintf_r+0x1084>
 801c1ea:	aa22      	add	r2, sp, #136	; 0x88
 801c1ec:	4649      	mov	r1, r9
 801c1ee:	4650      	mov	r0, sl
 801c1f0:	f003 ff8e 	bl	8020110 <__ssprint_r>
 801c1f4:	2800      	cmp	r0, #0
 801c1f6:	f040 80e5 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801c1fa:	ac25      	add	r4, sp, #148	; 0x94
 801c1fc:	e7c0      	b.n	801c180 <_svfprintf_r+0x10b0>
 801c1fe:	2010      	movs	r0, #16
 801c200:	4403      	add	r3, r0
 801c202:	2a07      	cmp	r2, #7
 801c204:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801c208:	6060      	str	r0, [r4, #4]
 801c20a:	dd08      	ble.n	801c21e <_svfprintf_r+0x114e>
 801c20c:	aa22      	add	r2, sp, #136	; 0x88
 801c20e:	4649      	mov	r1, r9
 801c210:	4650      	mov	r0, sl
 801c212:	f003 ff7d 	bl	8020110 <__ssprint_r>
 801c216:	2800      	cmp	r0, #0
 801c218:	f040 80d4 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801c21c:	a925      	add	r1, sp, #148	; 0x94
 801c21e:	3f10      	subs	r7, #16
 801c220:	460c      	mov	r4, r1
 801c222:	e7b5      	b.n	801c190 <_svfprintf_r+0x10c0>
 801c224:	460c      	mov	r4, r1
 801c226:	e7cb      	b.n	801c1c0 <_svfprintf_r+0x10f0>
 801c228:	aa22      	add	r2, sp, #136	; 0x88
 801c22a:	4649      	mov	r1, r9
 801c22c:	4650      	mov	r0, sl
 801c22e:	f003 ff6f 	bl	8020110 <__ssprint_r>
 801c232:	2800      	cmp	r0, #0
 801c234:	f040 80c6 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801c238:	ac25      	add	r4, sp, #148	; 0x94
 801c23a:	e719      	b.n	801c070 <_svfprintf_r+0xfa0>
 801c23c:	aa22      	add	r2, sp, #136	; 0x88
 801c23e:	4649      	mov	r1, r9
 801c240:	4650      	mov	r0, sl
 801c242:	f003 ff65 	bl	8020110 <__ssprint_r>
 801c246:	2800      	cmp	r0, #0
 801c248:	f040 80bc 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801c24c:	ac25      	add	r4, sp, #148	; 0x94
 801c24e:	e726      	b.n	801c09e <_svfprintf_r+0xfce>
 801c250:	08028f54 	.word	0x08028f54
 801c254:	9a05      	ldr	r2, [sp, #20]
 801c256:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c258:	2a01      	cmp	r2, #1
 801c25a:	f106 0601 	add.w	r6, r6, #1
 801c25e:	f103 0301 	add.w	r3, r3, #1
 801c262:	f104 0508 	add.w	r5, r4, #8
 801c266:	dc02      	bgt.n	801c26e <_svfprintf_r+0x119e>
 801c268:	f018 0f01 	tst.w	r8, #1
 801c26c:	d07e      	beq.n	801c36c <_svfprintf_r+0x129c>
 801c26e:	2201      	movs	r2, #1
 801c270:	2b07      	cmp	r3, #7
 801c272:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801c276:	f8c4 b000 	str.w	fp, [r4]
 801c27a:	6062      	str	r2, [r4, #4]
 801c27c:	dd08      	ble.n	801c290 <_svfprintf_r+0x11c0>
 801c27e:	aa22      	add	r2, sp, #136	; 0x88
 801c280:	4649      	mov	r1, r9
 801c282:	4650      	mov	r0, sl
 801c284:	f003 ff44 	bl	8020110 <__ssprint_r>
 801c288:	2800      	cmp	r0, #0
 801c28a:	f040 809b 	bne.w	801c3c4 <_svfprintf_r+0x12f4>
 801c28e:	ad25      	add	r5, sp, #148	; 0x94
 801c290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c292:	602b      	str	r3, [r5, #0]
 801c294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c298:	606b      	str	r3, [r5, #4]
 801c29a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c29c:	4413      	add	r3, r2
 801c29e:	9324      	str	r3, [sp, #144]	; 0x90
 801c2a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c2a2:	3301      	adds	r3, #1
 801c2a4:	2b07      	cmp	r3, #7
 801c2a6:	9323      	str	r3, [sp, #140]	; 0x8c
 801c2a8:	dc32      	bgt.n	801c310 <_svfprintf_r+0x1240>
 801c2aa:	3508      	adds	r5, #8
 801c2ac:	9b05      	ldr	r3, [sp, #20]
 801c2ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c2b2:	1e5c      	subs	r4, r3, #1
 801c2b4:	2200      	movs	r2, #0
 801c2b6:	2300      	movs	r3, #0
 801c2b8:	f7e4 fc36 	bl	8000b28 <__aeabi_dcmpeq>
 801c2bc:	2800      	cmp	r0, #0
 801c2be:	d130      	bne.n	801c322 <_svfprintf_r+0x1252>
 801c2c0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801c2c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c2c4:	9a05      	ldr	r2, [sp, #20]
 801c2c6:	3101      	adds	r1, #1
 801c2c8:	3b01      	subs	r3, #1
 801c2ca:	f10b 0001 	add.w	r0, fp, #1
 801c2ce:	4413      	add	r3, r2
 801c2d0:	2907      	cmp	r1, #7
 801c2d2:	e9c5 0400 	strd	r0, r4, [r5]
 801c2d6:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801c2da:	dd50      	ble.n	801c37e <_svfprintf_r+0x12ae>
 801c2dc:	aa22      	add	r2, sp, #136	; 0x88
 801c2de:	4649      	mov	r1, r9
 801c2e0:	4650      	mov	r0, sl
 801c2e2:	f003 ff15 	bl	8020110 <__ssprint_r>
 801c2e6:	2800      	cmp	r0, #0
 801c2e8:	d16c      	bne.n	801c3c4 <_svfprintf_r+0x12f4>
 801c2ea:	ad25      	add	r5, sp, #148	; 0x94
 801c2ec:	ab1e      	add	r3, sp, #120	; 0x78
 801c2ee:	602b      	str	r3, [r5, #0]
 801c2f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c2f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c2f4:	606b      	str	r3, [r5, #4]
 801c2f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c2f8:	4413      	add	r3, r2
 801c2fa:	9324      	str	r3, [sp, #144]	; 0x90
 801c2fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c2fe:	3301      	adds	r3, #1
 801c300:	2b07      	cmp	r3, #7
 801c302:	9323      	str	r3, [sp, #140]	; 0x8c
 801c304:	f73f adb5 	bgt.w	801be72 <_svfprintf_r+0xda2>
 801c308:	f105 0408 	add.w	r4, r5, #8
 801c30c:	f7ff bac2 	b.w	801b894 <_svfprintf_r+0x7c4>
 801c310:	aa22      	add	r2, sp, #136	; 0x88
 801c312:	4649      	mov	r1, r9
 801c314:	4650      	mov	r0, sl
 801c316:	f003 fefb 	bl	8020110 <__ssprint_r>
 801c31a:	2800      	cmp	r0, #0
 801c31c:	d152      	bne.n	801c3c4 <_svfprintf_r+0x12f4>
 801c31e:	ad25      	add	r5, sp, #148	; 0x94
 801c320:	e7c4      	b.n	801c2ac <_svfprintf_r+0x11dc>
 801c322:	2c00      	cmp	r4, #0
 801c324:	dde2      	ble.n	801c2ec <_svfprintf_r+0x121c>
 801c326:	4e58      	ldr	r6, [pc, #352]	; (801c488 <_svfprintf_r+0x13b8>)
 801c328:	2710      	movs	r7, #16
 801c32a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c32e:	2c10      	cmp	r4, #16
 801c330:	f103 0301 	add.w	r3, r3, #1
 801c334:	f105 0108 	add.w	r1, r5, #8
 801c338:	602e      	str	r6, [r5, #0]
 801c33a:	dc07      	bgt.n	801c34c <_svfprintf_r+0x127c>
 801c33c:	606c      	str	r4, [r5, #4]
 801c33e:	2b07      	cmp	r3, #7
 801c340:	4414      	add	r4, r2
 801c342:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801c346:	dcc9      	bgt.n	801c2dc <_svfprintf_r+0x120c>
 801c348:	460d      	mov	r5, r1
 801c34a:	e7cf      	b.n	801c2ec <_svfprintf_r+0x121c>
 801c34c:	3210      	adds	r2, #16
 801c34e:	2b07      	cmp	r3, #7
 801c350:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c354:	606f      	str	r7, [r5, #4]
 801c356:	dd06      	ble.n	801c366 <_svfprintf_r+0x1296>
 801c358:	aa22      	add	r2, sp, #136	; 0x88
 801c35a:	4649      	mov	r1, r9
 801c35c:	4650      	mov	r0, sl
 801c35e:	f003 fed7 	bl	8020110 <__ssprint_r>
 801c362:	bb78      	cbnz	r0, 801c3c4 <_svfprintf_r+0x12f4>
 801c364:	a925      	add	r1, sp, #148	; 0x94
 801c366:	3c10      	subs	r4, #16
 801c368:	460d      	mov	r5, r1
 801c36a:	e7de      	b.n	801c32a <_svfprintf_r+0x125a>
 801c36c:	2201      	movs	r2, #1
 801c36e:	2b07      	cmp	r3, #7
 801c370:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801c374:	f8c4 b000 	str.w	fp, [r4]
 801c378:	6062      	str	r2, [r4, #4]
 801c37a:	ddb7      	ble.n	801c2ec <_svfprintf_r+0x121c>
 801c37c:	e7ae      	b.n	801c2dc <_svfprintf_r+0x120c>
 801c37e:	3508      	adds	r5, #8
 801c380:	e7b4      	b.n	801c2ec <_svfprintf_r+0x121c>
 801c382:	460c      	mov	r4, r1
 801c384:	f7ff ba86 	b.w	801b894 <_svfprintf_r+0x7c4>
 801c388:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801c38c:	1a9d      	subs	r5, r3, r2
 801c38e:	2d00      	cmp	r5, #0
 801c390:	f77f aa84 	ble.w	801b89c <_svfprintf_r+0x7cc>
 801c394:	4e3d      	ldr	r6, [pc, #244]	; (801c48c <_svfprintf_r+0x13bc>)
 801c396:	2710      	movs	r7, #16
 801c398:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c39c:	2d10      	cmp	r5, #16
 801c39e:	f103 0301 	add.w	r3, r3, #1
 801c3a2:	6026      	str	r6, [r4, #0]
 801c3a4:	dc18      	bgt.n	801c3d8 <_svfprintf_r+0x1308>
 801c3a6:	6065      	str	r5, [r4, #4]
 801c3a8:	2b07      	cmp	r3, #7
 801c3aa:	4415      	add	r5, r2
 801c3ac:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801c3b0:	f77f aa74 	ble.w	801b89c <_svfprintf_r+0x7cc>
 801c3b4:	aa22      	add	r2, sp, #136	; 0x88
 801c3b6:	4649      	mov	r1, r9
 801c3b8:	4650      	mov	r0, sl
 801c3ba:	f003 fea9 	bl	8020110 <__ssprint_r>
 801c3be:	2800      	cmp	r0, #0
 801c3c0:	f43f aa6c 	beq.w	801b89c <_svfprintf_r+0x7cc>
 801c3c4:	9b03      	ldr	r3, [sp, #12]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	f43f a88a 	beq.w	801b4e0 <_svfprintf_r+0x410>
 801c3cc:	4619      	mov	r1, r3
 801c3ce:	4650      	mov	r0, sl
 801c3d0:	f002 fd7a 	bl	801eec8 <_free_r>
 801c3d4:	f7ff b884 	b.w	801b4e0 <_svfprintf_r+0x410>
 801c3d8:	3210      	adds	r2, #16
 801c3da:	2b07      	cmp	r3, #7
 801c3dc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c3e0:	6067      	str	r7, [r4, #4]
 801c3e2:	dc02      	bgt.n	801c3ea <_svfprintf_r+0x131a>
 801c3e4:	3408      	adds	r4, #8
 801c3e6:	3d10      	subs	r5, #16
 801c3e8:	e7d6      	b.n	801c398 <_svfprintf_r+0x12c8>
 801c3ea:	aa22      	add	r2, sp, #136	; 0x88
 801c3ec:	4649      	mov	r1, r9
 801c3ee:	4650      	mov	r0, sl
 801c3f0:	f003 fe8e 	bl	8020110 <__ssprint_r>
 801c3f4:	2800      	cmp	r0, #0
 801c3f6:	d1e5      	bne.n	801c3c4 <_svfprintf_r+0x12f4>
 801c3f8:	ac25      	add	r4, sp, #148	; 0x94
 801c3fa:	e7f4      	b.n	801c3e6 <_svfprintf_r+0x1316>
 801c3fc:	9903      	ldr	r1, [sp, #12]
 801c3fe:	4650      	mov	r0, sl
 801c400:	f002 fd62 	bl	801eec8 <_free_r>
 801c404:	f7ff ba62 	b.w	801b8cc <_svfprintf_r+0x7fc>
 801c408:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	f43f a868 	beq.w	801b4e0 <_svfprintf_r+0x410>
 801c410:	aa22      	add	r2, sp, #136	; 0x88
 801c412:	4649      	mov	r1, r9
 801c414:	4650      	mov	r0, sl
 801c416:	f003 fe7b 	bl	8020110 <__ssprint_r>
 801c41a:	f7ff b861 	b.w	801b4e0 <_svfprintf_r+0x410>
 801c41e:	ea56 0207 	orrs.w	r2, r6, r7
 801c422:	f8cd 800c 	str.w	r8, [sp, #12]
 801c426:	f43f ab78 	beq.w	801bb1a <_svfprintf_r+0xa4a>
 801c42a:	2b01      	cmp	r3, #1
 801c42c:	f43f ac0d 	beq.w	801bc4a <_svfprintf_r+0xb7a>
 801c430:	2b02      	cmp	r3, #2
 801c432:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801c436:	f43f ac55 	beq.w	801bce4 <_svfprintf_r+0xc14>
 801c43a:	08f2      	lsrs	r2, r6, #3
 801c43c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801c440:	08f8      	lsrs	r0, r7, #3
 801c442:	f006 0307 	and.w	r3, r6, #7
 801c446:	4607      	mov	r7, r0
 801c448:	4616      	mov	r6, r2
 801c44a:	3330      	adds	r3, #48	; 0x30
 801c44c:	ea56 0207 	orrs.w	r2, r6, r7
 801c450:	4659      	mov	r1, fp
 801c452:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801c456:	d1f0      	bne.n	801c43a <_svfprintf_r+0x136a>
 801c458:	9a03      	ldr	r2, [sp, #12]
 801c45a:	07d2      	lsls	r2, r2, #31
 801c45c:	d506      	bpl.n	801c46c <_svfprintf_r+0x139c>
 801c45e:	2b30      	cmp	r3, #48	; 0x30
 801c460:	d004      	beq.n	801c46c <_svfprintf_r+0x139c>
 801c462:	2330      	movs	r3, #48	; 0x30
 801c464:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801c468:	f1a1 0b02 	sub.w	fp, r1, #2
 801c46c:	ab4e      	add	r3, sp, #312	; 0x138
 801c46e:	eba3 030b 	sub.w	r3, r3, fp
 801c472:	9e04      	ldr	r6, [sp, #16]
 801c474:	9304      	str	r3, [sp, #16]
 801c476:	2300      	movs	r3, #0
 801c478:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801c47c:	9303      	str	r3, [sp, #12]
 801c47e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c482:	461d      	mov	r5, r3
 801c484:	f7ff b94c 	b.w	801b720 <_svfprintf_r+0x650>
 801c488:	08028f54 	.word	0x08028f54
 801c48c:	08028f44 	.word	0x08028f44

0801c490 <__tzcalc_limits>:
 801c490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c494:	4680      	mov	r8, r0
 801c496:	f002 fe39 	bl	801f10c <__gettzinfo>
 801c49a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801c49e:	4598      	cmp	r8, r3
 801c4a0:	f340 8098 	ble.w	801c5d4 <__tzcalc_limits+0x144>
 801c4a4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801c4a8:	4443      	add	r3, r8
 801c4aa:	109b      	asrs	r3, r3, #2
 801c4ac:	f240 126d 	movw	r2, #365	; 0x16d
 801c4b0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801c4b4:	fb02 3505 	mla	r5, r2, r5, r3
 801c4b8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801c4bc:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801c4c0:	fb93 f3f2 	sdiv	r3, r3, r2
 801c4c4:	441d      	add	r5, r3
 801c4c6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801c4ca:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801c4ce:	fb98 f7f3 	sdiv	r7, r8, r3
 801c4d2:	fb03 8717 	mls	r7, r3, r7, r8
 801c4d6:	4442      	add	r2, r8
 801c4d8:	fab7 fc87 	clz	ip, r7
 801c4dc:	fbb2 f2f3 	udiv	r2, r2, r3
 801c4e0:	f008 0303 	and.w	r3, r8, #3
 801c4e4:	4415      	add	r5, r2
 801c4e6:	2264      	movs	r2, #100	; 0x64
 801c4e8:	f8c0 8004 	str.w	r8, [r0, #4]
 801c4ec:	fb98 f6f2 	sdiv	r6, r8, r2
 801c4f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801c4f4:	fb02 8616 	mls	r6, r2, r6, r8
 801c4f8:	4604      	mov	r4, r0
 801c4fa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801c4fe:	9300      	str	r3, [sp, #0]
 801c500:	f04f 0e07 	mov.w	lr, #7
 801c504:	7a22      	ldrb	r2, [r4, #8]
 801c506:	6963      	ldr	r3, [r4, #20]
 801c508:	2a4a      	cmp	r2, #74	; 0x4a
 801c50a:	d128      	bne.n	801c55e <__tzcalc_limits+0xce>
 801c50c:	9900      	ldr	r1, [sp, #0]
 801c50e:	18ea      	adds	r2, r5, r3
 801c510:	b901      	cbnz	r1, 801c514 <__tzcalc_limits+0x84>
 801c512:	b906      	cbnz	r6, 801c516 <__tzcalc_limits+0x86>
 801c514:	bb0f      	cbnz	r7, 801c55a <__tzcalc_limits+0xca>
 801c516:	2b3b      	cmp	r3, #59	; 0x3b
 801c518:	bfd4      	ite	le
 801c51a:	2300      	movle	r3, #0
 801c51c:	2301      	movgt	r3, #1
 801c51e:	4413      	add	r3, r2
 801c520:	1e5a      	subs	r2, r3, #1
 801c522:	69a3      	ldr	r3, [r4, #24]
 801c524:	492c      	ldr	r1, [pc, #176]	; (801c5d8 <__tzcalc_limits+0x148>)
 801c526:	fb01 3202 	mla	r2, r1, r2, r3
 801c52a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c52c:	4413      	add	r3, r2
 801c52e:	461a      	mov	r2, r3
 801c530:	17db      	asrs	r3, r3, #31
 801c532:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801c536:	3428      	adds	r4, #40	; 0x28
 801c538:	45a3      	cmp	fp, r4
 801c53a:	d1e3      	bne.n	801c504 <__tzcalc_limits+0x74>
 801c53c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801c540:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801c544:	4294      	cmp	r4, r2
 801c546:	eb75 0303 	sbcs.w	r3, r5, r3
 801c54a:	bfb4      	ite	lt
 801c54c:	2301      	movlt	r3, #1
 801c54e:	2300      	movge	r3, #0
 801c550:	6003      	str	r3, [r0, #0]
 801c552:	2001      	movs	r0, #1
 801c554:	b003      	add	sp, #12
 801c556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c55a:	2300      	movs	r3, #0
 801c55c:	e7df      	b.n	801c51e <__tzcalc_limits+0x8e>
 801c55e:	2a44      	cmp	r2, #68	; 0x44
 801c560:	d101      	bne.n	801c566 <__tzcalc_limits+0xd6>
 801c562:	18ea      	adds	r2, r5, r3
 801c564:	e7dd      	b.n	801c522 <__tzcalc_limits+0x92>
 801c566:	9a00      	ldr	r2, [sp, #0]
 801c568:	bb72      	cbnz	r2, 801c5c8 <__tzcalc_limits+0x138>
 801c56a:	2e00      	cmp	r6, #0
 801c56c:	bf0c      	ite	eq
 801c56e:	46e0      	moveq	r8, ip
 801c570:	f04f 0801 	movne.w	r8, #1
 801c574:	4919      	ldr	r1, [pc, #100]	; (801c5dc <__tzcalc_limits+0x14c>)
 801c576:	68e2      	ldr	r2, [r4, #12]
 801c578:	9201      	str	r2, [sp, #4]
 801c57a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801c57e:	fb0a 1808 	mla	r8, sl, r8, r1
 801c582:	462a      	mov	r2, r5
 801c584:	f04f 0900 	mov.w	r9, #0
 801c588:	f1a8 0804 	sub.w	r8, r8, #4
 801c58c:	9901      	ldr	r1, [sp, #4]
 801c58e:	f109 0901 	add.w	r9, r9, #1
 801c592:	4549      	cmp	r1, r9
 801c594:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801c598:	dc18      	bgt.n	801c5cc <__tzcalc_limits+0x13c>
 801c59a:	f102 0804 	add.w	r8, r2, #4
 801c59e:	fb98 f9fe 	sdiv	r9, r8, lr
 801c5a2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801c5a6:	eba8 0909 	sub.w	r9, r8, r9
 801c5aa:	ebb3 0909 	subs.w	r9, r3, r9
 801c5ae:	6923      	ldr	r3, [r4, #16]
 801c5b0:	f103 33ff 	add.w	r3, r3, #4294967295
 801c5b4:	bf48      	it	mi
 801c5b6:	f109 0907 	addmi.w	r9, r9, #7
 801c5ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801c5be:	444b      	add	r3, r9
 801c5c0:	4553      	cmp	r3, sl
 801c5c2:	da05      	bge.n	801c5d0 <__tzcalc_limits+0x140>
 801c5c4:	441a      	add	r2, r3
 801c5c6:	e7ac      	b.n	801c522 <__tzcalc_limits+0x92>
 801c5c8:	46e0      	mov	r8, ip
 801c5ca:	e7d3      	b.n	801c574 <__tzcalc_limits+0xe4>
 801c5cc:	4452      	add	r2, sl
 801c5ce:	e7dd      	b.n	801c58c <__tzcalc_limits+0xfc>
 801c5d0:	3b07      	subs	r3, #7
 801c5d2:	e7f5      	b.n	801c5c0 <__tzcalc_limits+0x130>
 801c5d4:	2000      	movs	r0, #0
 801c5d6:	e7bd      	b.n	801c554 <__tzcalc_limits+0xc4>
 801c5d8:	00015180 	.word	0x00015180
 801c5dc:	08028eb0 	.word	0x08028eb0

0801c5e0 <__tz_lock>:
 801c5e0:	4801      	ldr	r0, [pc, #4]	; (801c5e8 <__tz_lock+0x8>)
 801c5e2:	f002 be4d 	b.w	801f280 <__retarget_lock_acquire>
 801c5e6:	bf00      	nop
 801c5e8:	2000be3f 	.word	0x2000be3f

0801c5ec <__tz_unlock>:
 801c5ec:	4801      	ldr	r0, [pc, #4]	; (801c5f4 <__tz_unlock+0x8>)
 801c5ee:	f002 be49 	b.w	801f284 <__retarget_lock_release>
 801c5f2:	bf00      	nop
 801c5f4:	2000be3f 	.word	0x2000be3f

0801c5f8 <_tzset_unlocked>:
 801c5f8:	4b01      	ldr	r3, [pc, #4]	; (801c600 <_tzset_unlocked+0x8>)
 801c5fa:	6818      	ldr	r0, [r3, #0]
 801c5fc:	f000 b802 	b.w	801c604 <_tzset_unlocked_r>
 801c600:	20000038 	.word	0x20000038

0801c604 <_tzset_unlocked_r>:
 801c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c608:	b08d      	sub	sp, #52	; 0x34
 801c60a:	4607      	mov	r7, r0
 801c60c:	f002 fd7e 	bl	801f10c <__gettzinfo>
 801c610:	49ae      	ldr	r1, [pc, #696]	; (801c8cc <_tzset_unlocked_r+0x2c8>)
 801c612:	4eaf      	ldr	r6, [pc, #700]	; (801c8d0 <_tzset_unlocked_r+0x2cc>)
 801c614:	4605      	mov	r5, r0
 801c616:	4638      	mov	r0, r7
 801c618:	f002 fd70 	bl	801f0fc <_getenv_r>
 801c61c:	4604      	mov	r4, r0
 801c61e:	b970      	cbnz	r0, 801c63e <_tzset_unlocked_r+0x3a>
 801c620:	4bac      	ldr	r3, [pc, #688]	; (801c8d4 <_tzset_unlocked_r+0x2d0>)
 801c622:	4aad      	ldr	r2, [pc, #692]	; (801c8d8 <_tzset_unlocked_r+0x2d4>)
 801c624:	6018      	str	r0, [r3, #0]
 801c626:	4bad      	ldr	r3, [pc, #692]	; (801c8dc <_tzset_unlocked_r+0x2d8>)
 801c628:	6018      	str	r0, [r3, #0]
 801c62a:	4bad      	ldr	r3, [pc, #692]	; (801c8e0 <_tzset_unlocked_r+0x2dc>)
 801c62c:	6830      	ldr	r0, [r6, #0]
 801c62e:	e9c3 2200 	strd	r2, r2, [r3]
 801c632:	f002 fe9d 	bl	801f370 <free>
 801c636:	6034      	str	r4, [r6, #0]
 801c638:	b00d      	add	sp, #52	; 0x34
 801c63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c63e:	6831      	ldr	r1, [r6, #0]
 801c640:	2900      	cmp	r1, #0
 801c642:	d15f      	bne.n	801c704 <_tzset_unlocked_r+0x100>
 801c644:	6830      	ldr	r0, [r6, #0]
 801c646:	f002 fe93 	bl	801f370 <free>
 801c64a:	4620      	mov	r0, r4
 801c64c:	f7e3 fdea 	bl	8000224 <strlen>
 801c650:	1c41      	adds	r1, r0, #1
 801c652:	4638      	mov	r0, r7
 801c654:	f002 fe94 	bl	801f380 <_malloc_r>
 801c658:	6030      	str	r0, [r6, #0]
 801c65a:	2800      	cmp	r0, #0
 801c65c:	d157      	bne.n	801c70e <_tzset_unlocked_r+0x10a>
 801c65e:	7823      	ldrb	r3, [r4, #0]
 801c660:	4aa0      	ldr	r2, [pc, #640]	; (801c8e4 <_tzset_unlocked_r+0x2e0>)
 801c662:	49a1      	ldr	r1, [pc, #644]	; (801c8e8 <_tzset_unlocked_r+0x2e4>)
 801c664:	2b3a      	cmp	r3, #58	; 0x3a
 801c666:	bf08      	it	eq
 801c668:	3401      	addeq	r4, #1
 801c66a:	ae0a      	add	r6, sp, #40	; 0x28
 801c66c:	4633      	mov	r3, r6
 801c66e:	4620      	mov	r0, r4
 801c670:	f003 fc4c 	bl	801ff0c <siscanf>
 801c674:	2800      	cmp	r0, #0
 801c676:	dddf      	ble.n	801c638 <_tzset_unlocked_r+0x34>
 801c678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c67a:	18e7      	adds	r7, r4, r3
 801c67c:	5ce3      	ldrb	r3, [r4, r3]
 801c67e:	2b2d      	cmp	r3, #45	; 0x2d
 801c680:	d149      	bne.n	801c716 <_tzset_unlocked_r+0x112>
 801c682:	3701      	adds	r7, #1
 801c684:	f04f 34ff 	mov.w	r4, #4294967295
 801c688:	f10d 0a20 	add.w	sl, sp, #32
 801c68c:	f10d 0b1e 	add.w	fp, sp, #30
 801c690:	f04f 0800 	mov.w	r8, #0
 801c694:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801c698:	4994      	ldr	r1, [pc, #592]	; (801c8ec <_tzset_unlocked_r+0x2e8>)
 801c69a:	9603      	str	r6, [sp, #12]
 801c69c:	f8cd b000 	str.w	fp, [sp]
 801c6a0:	4633      	mov	r3, r6
 801c6a2:	aa07      	add	r2, sp, #28
 801c6a4:	4638      	mov	r0, r7
 801c6a6:	f8ad 801e 	strh.w	r8, [sp, #30]
 801c6aa:	f8ad 8020 	strh.w	r8, [sp, #32]
 801c6ae:	f003 fc2d 	bl	801ff0c <siscanf>
 801c6b2:	4540      	cmp	r0, r8
 801c6b4:	ddc0      	ble.n	801c638 <_tzset_unlocked_r+0x34>
 801c6b6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801c6ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c6be:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801c8f8 <_tzset_unlocked_r+0x2f4>
 801c6c2:	213c      	movs	r1, #60	; 0x3c
 801c6c4:	fb01 2203 	mla	r2, r1, r3, r2
 801c6c8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801c6cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801c6d0:	fb01 2303 	mla	r3, r1, r3, r2
 801c6d4:	435c      	muls	r4, r3
 801c6d6:	62ac      	str	r4, [r5, #40]	; 0x28
 801c6d8:	4c81      	ldr	r4, [pc, #516]	; (801c8e0 <_tzset_unlocked_r+0x2dc>)
 801c6da:	4b82      	ldr	r3, [pc, #520]	; (801c8e4 <_tzset_unlocked_r+0x2e0>)
 801c6dc:	6023      	str	r3, [r4, #0]
 801c6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6e0:	4981      	ldr	r1, [pc, #516]	; (801c8e8 <_tzset_unlocked_r+0x2e4>)
 801c6e2:	441f      	add	r7, r3
 801c6e4:	464a      	mov	r2, r9
 801c6e6:	4633      	mov	r3, r6
 801c6e8:	4638      	mov	r0, r7
 801c6ea:	f003 fc0f 	bl	801ff0c <siscanf>
 801c6ee:	4540      	cmp	r0, r8
 801c6f0:	dc16      	bgt.n	801c720 <_tzset_unlocked_r+0x11c>
 801c6f2:	6823      	ldr	r3, [r4, #0]
 801c6f4:	6063      	str	r3, [r4, #4]
 801c6f6:	4b77      	ldr	r3, [pc, #476]	; (801c8d4 <_tzset_unlocked_r+0x2d0>)
 801c6f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801c6fa:	601a      	str	r2, [r3, #0]
 801c6fc:	4b77      	ldr	r3, [pc, #476]	; (801c8dc <_tzset_unlocked_r+0x2d8>)
 801c6fe:	f8c3 8000 	str.w	r8, [r3]
 801c702:	e799      	b.n	801c638 <_tzset_unlocked_r+0x34>
 801c704:	f7e3 fd84 	bl	8000210 <strcmp>
 801c708:	2800      	cmp	r0, #0
 801c70a:	d19b      	bne.n	801c644 <_tzset_unlocked_r+0x40>
 801c70c:	e794      	b.n	801c638 <_tzset_unlocked_r+0x34>
 801c70e:	4621      	mov	r1, r4
 801c710:	f003 fc6d 	bl	801ffee <strcpy>
 801c714:	e7a3      	b.n	801c65e <_tzset_unlocked_r+0x5a>
 801c716:	2b2b      	cmp	r3, #43	; 0x2b
 801c718:	bf08      	it	eq
 801c71a:	3701      	addeq	r7, #1
 801c71c:	2401      	movs	r4, #1
 801c71e:	e7b3      	b.n	801c688 <_tzset_unlocked_r+0x84>
 801c720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c722:	f8c4 9004 	str.w	r9, [r4, #4]
 801c726:	18fc      	adds	r4, r7, r3
 801c728:	5cfb      	ldrb	r3, [r7, r3]
 801c72a:	2b2d      	cmp	r3, #45	; 0x2d
 801c72c:	f040 808b 	bne.w	801c846 <_tzset_unlocked_r+0x242>
 801c730:	3401      	adds	r4, #1
 801c732:	f04f 37ff 	mov.w	r7, #4294967295
 801c736:	2300      	movs	r3, #0
 801c738:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c73c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c740:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c744:	930a      	str	r3, [sp, #40]	; 0x28
 801c746:	e9cd a602 	strd	sl, r6, [sp, #8]
 801c74a:	e9cd b600 	strd	fp, r6, [sp]
 801c74e:	4967      	ldr	r1, [pc, #412]	; (801c8ec <_tzset_unlocked_r+0x2e8>)
 801c750:	4633      	mov	r3, r6
 801c752:	aa07      	add	r2, sp, #28
 801c754:	4620      	mov	r0, r4
 801c756:	f003 fbd9 	bl	801ff0c <siscanf>
 801c75a:	2800      	cmp	r0, #0
 801c75c:	dc78      	bgt.n	801c850 <_tzset_unlocked_r+0x24c>
 801c75e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801c760:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801c764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c766:	652f      	str	r7, [r5, #80]	; 0x50
 801c768:	441c      	add	r4, r3
 801c76a:	462f      	mov	r7, r5
 801c76c:	f04f 0900 	mov.w	r9, #0
 801c770:	7823      	ldrb	r3, [r4, #0]
 801c772:	2b2c      	cmp	r3, #44	; 0x2c
 801c774:	bf08      	it	eq
 801c776:	3401      	addeq	r4, #1
 801c778:	f894 8000 	ldrb.w	r8, [r4]
 801c77c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801c780:	d178      	bne.n	801c874 <_tzset_unlocked_r+0x270>
 801c782:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801c786:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801c78a:	ab09      	add	r3, sp, #36	; 0x24
 801c78c:	9300      	str	r3, [sp, #0]
 801c78e:	4958      	ldr	r1, [pc, #352]	; (801c8f0 <_tzset_unlocked_r+0x2ec>)
 801c790:	9603      	str	r6, [sp, #12]
 801c792:	4633      	mov	r3, r6
 801c794:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801c798:	4620      	mov	r0, r4
 801c79a:	f003 fbb7 	bl	801ff0c <siscanf>
 801c79e:	2803      	cmp	r0, #3
 801c7a0:	f47f af4a 	bne.w	801c638 <_tzset_unlocked_r+0x34>
 801c7a4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801c7a8:	1e4b      	subs	r3, r1, #1
 801c7aa:	2b0b      	cmp	r3, #11
 801c7ac:	f63f af44 	bhi.w	801c638 <_tzset_unlocked_r+0x34>
 801c7b0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c7b4:	1e53      	subs	r3, r2, #1
 801c7b6:	2b04      	cmp	r3, #4
 801c7b8:	f63f af3e 	bhi.w	801c638 <_tzset_unlocked_r+0x34>
 801c7bc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801c7c0:	2b06      	cmp	r3, #6
 801c7c2:	f63f af39 	bhi.w	801c638 <_tzset_unlocked_r+0x34>
 801c7c6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801c7ca:	f887 8008 	strb.w	r8, [r7, #8]
 801c7ce:	617b      	str	r3, [r7, #20]
 801c7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c7d2:	eb04 0803 	add.w	r8, r4, r3
 801c7d6:	2302      	movs	r3, #2
 801c7d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c7dc:	2300      	movs	r3, #0
 801c7de:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c7e2:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c7e6:	930a      	str	r3, [sp, #40]	; 0x28
 801c7e8:	f898 3000 	ldrb.w	r3, [r8]
 801c7ec:	2b2f      	cmp	r3, #47	; 0x2f
 801c7ee:	d109      	bne.n	801c804 <_tzset_unlocked_r+0x200>
 801c7f0:	e9cd a602 	strd	sl, r6, [sp, #8]
 801c7f4:	e9cd b600 	strd	fp, r6, [sp]
 801c7f8:	493e      	ldr	r1, [pc, #248]	; (801c8f4 <_tzset_unlocked_r+0x2f0>)
 801c7fa:	4633      	mov	r3, r6
 801c7fc:	aa07      	add	r2, sp, #28
 801c7fe:	4640      	mov	r0, r8
 801c800:	f003 fb84 	bl	801ff0c <siscanf>
 801c804:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801c808:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c80c:	213c      	movs	r1, #60	; 0x3c
 801c80e:	fb01 2203 	mla	r2, r1, r3, r2
 801c812:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801c816:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801c81a:	fb01 2303 	mla	r3, r1, r3, r2
 801c81e:	61bb      	str	r3, [r7, #24]
 801c820:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c822:	3728      	adds	r7, #40	; 0x28
 801c824:	4444      	add	r4, r8
 801c826:	f1b9 0f00 	cmp.w	r9, #0
 801c82a:	d020      	beq.n	801c86e <_tzset_unlocked_r+0x26a>
 801c82c:	6868      	ldr	r0, [r5, #4]
 801c82e:	f7ff fe2f 	bl	801c490 <__tzcalc_limits>
 801c832:	4b28      	ldr	r3, [pc, #160]	; (801c8d4 <_tzset_unlocked_r+0x2d0>)
 801c834:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801c836:	601a      	str	r2, [r3, #0]
 801c838:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801c83a:	1a9b      	subs	r3, r3, r2
 801c83c:	4a27      	ldr	r2, [pc, #156]	; (801c8dc <_tzset_unlocked_r+0x2d8>)
 801c83e:	bf18      	it	ne
 801c840:	2301      	movne	r3, #1
 801c842:	6013      	str	r3, [r2, #0]
 801c844:	e6f8      	b.n	801c638 <_tzset_unlocked_r+0x34>
 801c846:	2b2b      	cmp	r3, #43	; 0x2b
 801c848:	bf08      	it	eq
 801c84a:	3401      	addeq	r4, #1
 801c84c:	2701      	movs	r7, #1
 801c84e:	e772      	b.n	801c736 <_tzset_unlocked_r+0x132>
 801c850:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801c854:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c858:	213c      	movs	r1, #60	; 0x3c
 801c85a:	fb01 2203 	mla	r2, r1, r3, r2
 801c85e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801c862:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801c866:	fb01 2303 	mla	r3, r1, r3, r2
 801c86a:	435f      	muls	r7, r3
 801c86c:	e77a      	b.n	801c764 <_tzset_unlocked_r+0x160>
 801c86e:	f04f 0901 	mov.w	r9, #1
 801c872:	e77d      	b.n	801c770 <_tzset_unlocked_r+0x16c>
 801c874:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801c878:	bf06      	itte	eq
 801c87a:	3401      	addeq	r4, #1
 801c87c:	4643      	moveq	r3, r8
 801c87e:	2344      	movne	r3, #68	; 0x44
 801c880:	220a      	movs	r2, #10
 801c882:	a90b      	add	r1, sp, #44	; 0x2c
 801c884:	4620      	mov	r0, r4
 801c886:	9305      	str	r3, [sp, #20]
 801c888:	f003 fc38 	bl	80200fc <strtoul>
 801c88c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801c890:	9b05      	ldr	r3, [sp, #20]
 801c892:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801c896:	45a0      	cmp	r8, r4
 801c898:	d114      	bne.n	801c8c4 <_tzset_unlocked_r+0x2c0>
 801c89a:	234d      	movs	r3, #77	; 0x4d
 801c89c:	f1b9 0f00 	cmp.w	r9, #0
 801c8a0:	d107      	bne.n	801c8b2 <_tzset_unlocked_r+0x2ae>
 801c8a2:	722b      	strb	r3, [r5, #8]
 801c8a4:	2103      	movs	r1, #3
 801c8a6:	2302      	movs	r3, #2
 801c8a8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801c8ac:	f8c5 9014 	str.w	r9, [r5, #20]
 801c8b0:	e791      	b.n	801c7d6 <_tzset_unlocked_r+0x1d2>
 801c8b2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801c8b6:	220b      	movs	r2, #11
 801c8b8:	2301      	movs	r3, #1
 801c8ba:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801c8be:	2300      	movs	r3, #0
 801c8c0:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c8c2:	e788      	b.n	801c7d6 <_tzset_unlocked_r+0x1d2>
 801c8c4:	b280      	uxth	r0, r0
 801c8c6:	723b      	strb	r3, [r7, #8]
 801c8c8:	6178      	str	r0, [r7, #20]
 801c8ca:	e784      	b.n	801c7d6 <_tzset_unlocked_r+0x1d2>
 801c8cc:	08028f64 	.word	0x08028f64
 801c8d0:	20005048 	.word	0x20005048
 801c8d4:	20005050 	.word	0x20005050
 801c8d8:	08028f67 	.word	0x08028f67
 801c8dc:	2000504c 	.word	0x2000504c
 801c8e0:	20000468 	.word	0x20000468
 801c8e4:	2000503d 	.word	0x2000503d
 801c8e8:	08028f6b 	.word	0x08028f6b
 801c8ec:	08028f8e 	.word	0x08028f8e
 801c8f0:	08028f7a 	.word	0x08028f7a
 801c8f4:	08028f8d 	.word	0x08028f8d
 801c8f8:	20005032 	.word	0x20005032
 801c8fc:	00000000 	.word	0x00000000

0801c900 <_vfprintf_r>:
 801c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c904:	ed2d 8b04 	vpush	{d8-d9}
 801c908:	b0cf      	sub	sp, #316	; 0x13c
 801c90a:	4689      	mov	r9, r1
 801c90c:	9203      	str	r2, [sp, #12]
 801c90e:	461c      	mov	r4, r3
 801c910:	461e      	mov	r6, r3
 801c912:	4682      	mov	sl, r0
 801c914:	f002 fcae 	bl	801f274 <_localeconv_r>
 801c918:	6803      	ldr	r3, [r0, #0]
 801c91a:	9313      	str	r3, [sp, #76]	; 0x4c
 801c91c:	4618      	mov	r0, r3
 801c91e:	f7e3 fc81 	bl	8000224 <strlen>
 801c922:	900e      	str	r0, [sp, #56]	; 0x38
 801c924:	f1ba 0f00 	cmp.w	sl, #0
 801c928:	d005      	beq.n	801c936 <_vfprintf_r+0x36>
 801c92a:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 801c92e:	b913      	cbnz	r3, 801c936 <_vfprintf_r+0x36>
 801c930:	4650      	mov	r0, sl
 801c932:	f002 fa39 	bl	801eda8 <__sinit>
 801c936:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801c93a:	07d8      	lsls	r0, r3, #31
 801c93c:	d407      	bmi.n	801c94e <_vfprintf_r+0x4e>
 801c93e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c942:	0599      	lsls	r1, r3, #22
 801c944:	d403      	bmi.n	801c94e <_vfprintf_r+0x4e>
 801c946:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801c94a:	f002 fc9a 	bl	801f282 <__retarget_lock_acquire_recursive>
 801c94e:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 801c952:	049a      	lsls	r2, r3, #18
 801c954:	d409      	bmi.n	801c96a <_vfprintf_r+0x6a>
 801c956:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c95a:	f8a9 300c 	strh.w	r3, [r9, #12]
 801c95e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801c962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c966:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 801c96a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c96e:	071f      	lsls	r7, r3, #28
 801c970:	d502      	bpl.n	801c978 <_vfprintf_r+0x78>
 801c972:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c976:	b9d3      	cbnz	r3, 801c9ae <_vfprintf_r+0xae>
 801c978:	4649      	mov	r1, r9
 801c97a:	4650      	mov	r0, sl
 801c97c:	f001 fa36 	bl	801ddec <__swsetup_r>
 801c980:	b1a8      	cbz	r0, 801c9ae <_vfprintf_r+0xae>
 801c982:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801c986:	07dd      	lsls	r5, r3, #31
 801c988:	d508      	bpl.n	801c99c <_vfprintf_r+0x9c>
 801c98a:	f04f 33ff 	mov.w	r3, #4294967295
 801c98e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c990:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c992:	b04f      	add	sp, #316	; 0x13c
 801c994:	ecbd 8b04 	vpop	{d8-d9}
 801c998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c99c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c9a0:	059c      	lsls	r4, r3, #22
 801c9a2:	d4f2      	bmi.n	801c98a <_vfprintf_r+0x8a>
 801c9a4:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801c9a8:	f002 fc6d 	bl	801f286 <__retarget_lock_release_recursive>
 801c9ac:	e7ed      	b.n	801c98a <_vfprintf_r+0x8a>
 801c9ae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c9b2:	f003 021a 	and.w	r2, r3, #26
 801c9b6:	2a0a      	cmp	r2, #10
 801c9b8:	d115      	bne.n	801c9e6 <_vfprintf_r+0xe6>
 801c9ba:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 801c9be:	2a00      	cmp	r2, #0
 801c9c0:	db11      	blt.n	801c9e6 <_vfprintf_r+0xe6>
 801c9c2:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 801c9c6:	07d0      	lsls	r0, r2, #31
 801c9c8:	d405      	bmi.n	801c9d6 <_vfprintf_r+0xd6>
 801c9ca:	0599      	lsls	r1, r3, #22
 801c9cc:	d403      	bmi.n	801c9d6 <_vfprintf_r+0xd6>
 801c9ce:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801c9d2:	f002 fc58 	bl	801f286 <__retarget_lock_release_recursive>
 801c9d6:	9a03      	ldr	r2, [sp, #12]
 801c9d8:	4623      	mov	r3, r4
 801c9da:	4649      	mov	r1, r9
 801c9dc:	4650      	mov	r0, sl
 801c9de:	f001 f9c5 	bl	801dd6c <__sbprintf>
 801c9e2:	900f      	str	r0, [sp, #60]	; 0x3c
 801c9e4:	e7d4      	b.n	801c990 <_vfprintf_r+0x90>
 801c9e6:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 801cc50 <_vfprintf_r+0x350>
 801c9ea:	2500      	movs	r5, #0
 801c9ec:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801c9f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c9f4:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801c9f8:	ac25      	add	r4, sp, #148	; 0x94
 801c9fa:	9422      	str	r4, [sp, #136]	; 0x88
 801c9fc:	9505      	str	r5, [sp, #20]
 801c9fe:	950a      	str	r5, [sp, #40]	; 0x28
 801ca00:	9512      	str	r5, [sp, #72]	; 0x48
 801ca02:	9514      	str	r5, [sp, #80]	; 0x50
 801ca04:	950f      	str	r5, [sp, #60]	; 0x3c
 801ca06:	9b03      	ldr	r3, [sp, #12]
 801ca08:	461d      	mov	r5, r3
 801ca0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ca0e:	b10a      	cbz	r2, 801ca14 <_vfprintf_r+0x114>
 801ca10:	2a25      	cmp	r2, #37	; 0x25
 801ca12:	d1f9      	bne.n	801ca08 <_vfprintf_r+0x108>
 801ca14:	9b03      	ldr	r3, [sp, #12]
 801ca16:	1aef      	subs	r7, r5, r3
 801ca18:	d00d      	beq.n	801ca36 <_vfprintf_r+0x136>
 801ca1a:	e9c4 3700 	strd	r3, r7, [r4]
 801ca1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ca20:	443b      	add	r3, r7
 801ca22:	9324      	str	r3, [sp, #144]	; 0x90
 801ca24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ca26:	3301      	adds	r3, #1
 801ca28:	2b07      	cmp	r3, #7
 801ca2a:	9323      	str	r3, [sp, #140]	; 0x8c
 801ca2c:	dc79      	bgt.n	801cb22 <_vfprintf_r+0x222>
 801ca2e:	3408      	adds	r4, #8
 801ca30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ca32:	443b      	add	r3, r7
 801ca34:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca36:	782b      	ldrb	r3, [r5, #0]
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	f001 8156 	beq.w	801dcea <_vfprintf_r+0x13ea>
 801ca3e:	2300      	movs	r3, #0
 801ca40:	3501      	adds	r5, #1
 801ca42:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801ca46:	f04f 38ff 	mov.w	r8, #4294967295
 801ca4a:	9310      	str	r3, [sp, #64]	; 0x40
 801ca4c:	469b      	mov	fp, r3
 801ca4e:	270a      	movs	r7, #10
 801ca50:	212b      	movs	r1, #43	; 0x2b
 801ca52:	462a      	mov	r2, r5
 801ca54:	f812 3b01 	ldrb.w	r3, [r2], #1
 801ca58:	9307      	str	r3, [sp, #28]
 801ca5a:	4613      	mov	r3, r2
 801ca5c:	930b      	str	r3, [sp, #44]	; 0x2c
 801ca5e:	9b07      	ldr	r3, [sp, #28]
 801ca60:	3b20      	subs	r3, #32
 801ca62:	2b5a      	cmp	r3, #90	; 0x5a
 801ca64:	f200 85c0 	bhi.w	801d5e8 <_vfprintf_r+0xce8>
 801ca68:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ca6c:	05be007e 	.word	0x05be007e
 801ca70:	008605be 	.word	0x008605be
 801ca74:	05be05be 	.word	0x05be05be
 801ca78:	006505be 	.word	0x006505be
 801ca7c:	05be05be 	.word	0x05be05be
 801ca80:	00930089 	.word	0x00930089
 801ca84:	009005be 	.word	0x009005be
 801ca88:	05be0096 	.word	0x05be0096
 801ca8c:	00b200af 	.word	0x00b200af
 801ca90:	00b200b2 	.word	0x00b200b2
 801ca94:	00b200b2 	.word	0x00b200b2
 801ca98:	00b200b2 	.word	0x00b200b2
 801ca9c:	00b200b2 	.word	0x00b200b2
 801caa0:	05be05be 	.word	0x05be05be
 801caa4:	05be05be 	.word	0x05be05be
 801caa8:	05be05be 	.word	0x05be05be
 801caac:	012105be 	.word	0x012105be
 801cab0:	00df05be 	.word	0x00df05be
 801cab4:	012100f6 	.word	0x012100f6
 801cab8:	01210121 	.word	0x01210121
 801cabc:	05be05be 	.word	0x05be05be
 801cac0:	05be05be 	.word	0x05be05be
 801cac4:	05be00c2 	.word	0x05be00c2
 801cac8:	049005be 	.word	0x049005be
 801cacc:	05be05be 	.word	0x05be05be
 801cad0:	04d705be 	.word	0x04d705be
 801cad4:	04fb05be 	.word	0x04fb05be
 801cad8:	05be05be 	.word	0x05be05be
 801cadc:	05be051a 	.word	0x05be051a
 801cae0:	05be05be 	.word	0x05be05be
 801cae4:	05be05be 	.word	0x05be05be
 801cae8:	05be05be 	.word	0x05be05be
 801caec:	012105be 	.word	0x012105be
 801caf0:	00df05be 	.word	0x00df05be
 801caf4:	012100f8 	.word	0x012100f8
 801caf8:	01210121 	.word	0x01210121
 801cafc:	00f800c5 	.word	0x00f800c5
 801cb00:	05be00d9 	.word	0x05be00d9
 801cb04:	05be00d2 	.word	0x05be00d2
 801cb08:	0492046d 	.word	0x0492046d
 801cb0c:	00d904c6 	.word	0x00d904c6
 801cb10:	04d705be 	.word	0x04d705be
 801cb14:	04fd007c 	.word	0x04fd007c
 801cb18:	05be05be 	.word	0x05be05be
 801cb1c:	05be0537 	.word	0x05be0537
 801cb20:	007c      	.short	0x007c
 801cb22:	aa22      	add	r2, sp, #136	; 0x88
 801cb24:	4649      	mov	r1, r9
 801cb26:	4650      	mov	r0, sl
 801cb28:	f004 fbeb 	bl	8021302 <__sprint_r>
 801cb2c:	2800      	cmp	r0, #0
 801cb2e:	f040 8130 	bne.w	801cd92 <_vfprintf_r+0x492>
 801cb32:	ac25      	add	r4, sp, #148	; 0x94
 801cb34:	e77c      	b.n	801ca30 <_vfprintf_r+0x130>
 801cb36:	4650      	mov	r0, sl
 801cb38:	f002 fb9c 	bl	801f274 <_localeconv_r>
 801cb3c:	6843      	ldr	r3, [r0, #4]
 801cb3e:	9314      	str	r3, [sp, #80]	; 0x50
 801cb40:	4618      	mov	r0, r3
 801cb42:	f7e3 fb6f 	bl	8000224 <strlen>
 801cb46:	9012      	str	r0, [sp, #72]	; 0x48
 801cb48:	4650      	mov	r0, sl
 801cb4a:	f002 fb93 	bl	801f274 <_localeconv_r>
 801cb4e:	6883      	ldr	r3, [r0, #8]
 801cb50:	930a      	str	r3, [sp, #40]	; 0x28
 801cb52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cb54:	212b      	movs	r1, #43	; 0x2b
 801cb56:	b12b      	cbz	r3, 801cb64 <_vfprintf_r+0x264>
 801cb58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb5a:	b11b      	cbz	r3, 801cb64 <_vfprintf_r+0x264>
 801cb5c:	781b      	ldrb	r3, [r3, #0]
 801cb5e:	b10b      	cbz	r3, 801cb64 <_vfprintf_r+0x264>
 801cb60:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801cb64:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801cb66:	e774      	b.n	801ca52 <_vfprintf_r+0x152>
 801cb68:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d1f9      	bne.n	801cb64 <_vfprintf_r+0x264>
 801cb70:	2320      	movs	r3, #32
 801cb72:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801cb76:	e7f5      	b.n	801cb64 <_vfprintf_r+0x264>
 801cb78:	f04b 0b01 	orr.w	fp, fp, #1
 801cb7c:	e7f2      	b.n	801cb64 <_vfprintf_r+0x264>
 801cb7e:	f856 3b04 	ldr.w	r3, [r6], #4
 801cb82:	9310      	str	r3, [sp, #64]	; 0x40
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	daed      	bge.n	801cb64 <_vfprintf_r+0x264>
 801cb88:	425b      	negs	r3, r3
 801cb8a:	9310      	str	r3, [sp, #64]	; 0x40
 801cb8c:	f04b 0b04 	orr.w	fp, fp, #4
 801cb90:	e7e8      	b.n	801cb64 <_vfprintf_r+0x264>
 801cb92:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801cb96:	e7e5      	b.n	801cb64 <_vfprintf_r+0x264>
 801cb98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cb9e:	9207      	str	r2, [sp, #28]
 801cba0:	2a2a      	cmp	r2, #42	; 0x2a
 801cba2:	d10f      	bne.n	801cbc4 <_vfprintf_r+0x2c4>
 801cba4:	f856 0b04 	ldr.w	r0, [r6], #4
 801cba8:	930b      	str	r3, [sp, #44]	; 0x2c
 801cbaa:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 801cbae:	e7d9      	b.n	801cb64 <_vfprintf_r+0x264>
 801cbb0:	fb07 2808 	mla	r8, r7, r8, r2
 801cbb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cbb8:	9207      	str	r2, [sp, #28]
 801cbba:	9a07      	ldr	r2, [sp, #28]
 801cbbc:	3a30      	subs	r2, #48	; 0x30
 801cbbe:	2a09      	cmp	r2, #9
 801cbc0:	d9f6      	bls.n	801cbb0 <_vfprintf_r+0x2b0>
 801cbc2:	e74b      	b.n	801ca5c <_vfprintf_r+0x15c>
 801cbc4:	f04f 0800 	mov.w	r8, #0
 801cbc8:	e7f7      	b.n	801cbba <_vfprintf_r+0x2ba>
 801cbca:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801cbce:	e7c9      	b.n	801cb64 <_vfprintf_r+0x264>
 801cbd0:	2200      	movs	r2, #0
 801cbd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbd4:	9210      	str	r2, [sp, #64]	; 0x40
 801cbd6:	9a07      	ldr	r2, [sp, #28]
 801cbd8:	9810      	ldr	r0, [sp, #64]	; 0x40
 801cbda:	3a30      	subs	r2, #48	; 0x30
 801cbdc:	fb07 2200 	mla	r2, r7, r0, r2
 801cbe0:	9210      	str	r2, [sp, #64]	; 0x40
 801cbe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cbe6:	9207      	str	r2, [sp, #28]
 801cbe8:	3a30      	subs	r2, #48	; 0x30
 801cbea:	2a09      	cmp	r2, #9
 801cbec:	d9f3      	bls.n	801cbd6 <_vfprintf_r+0x2d6>
 801cbee:	e735      	b.n	801ca5c <_vfprintf_r+0x15c>
 801cbf0:	f04b 0b08 	orr.w	fp, fp, #8
 801cbf4:	e7b6      	b.n	801cb64 <_vfprintf_r+0x264>
 801cbf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbf8:	781b      	ldrb	r3, [r3, #0]
 801cbfa:	2b68      	cmp	r3, #104	; 0x68
 801cbfc:	bf01      	itttt	eq
 801cbfe:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801cc00:	3301      	addeq	r3, #1
 801cc02:	930b      	streq	r3, [sp, #44]	; 0x2c
 801cc04:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 801cc08:	bf18      	it	ne
 801cc0a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801cc0e:	e7a9      	b.n	801cb64 <_vfprintf_r+0x264>
 801cc10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc12:	781b      	ldrb	r3, [r3, #0]
 801cc14:	2b6c      	cmp	r3, #108	; 0x6c
 801cc16:	d105      	bne.n	801cc24 <_vfprintf_r+0x324>
 801cc18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc1a:	3301      	adds	r3, #1
 801cc1c:	930b      	str	r3, [sp, #44]	; 0x2c
 801cc1e:	f04b 0b20 	orr.w	fp, fp, #32
 801cc22:	e79f      	b.n	801cb64 <_vfprintf_r+0x264>
 801cc24:	f04b 0b10 	orr.w	fp, fp, #16
 801cc28:	e79c      	b.n	801cb64 <_vfprintf_r+0x264>
 801cc2a:	4632      	mov	r2, r6
 801cc2c:	2000      	movs	r0, #0
 801cc2e:	f852 3b04 	ldr.w	r3, [r2], #4
 801cc32:	9206      	str	r2, [sp, #24]
 801cc34:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801cc38:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801cc3c:	ab35      	add	r3, sp, #212	; 0xd4
 801cc3e:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801cc42:	9004      	str	r0, [sp, #16]
 801cc44:	f04f 0801 	mov.w	r8, #1
 801cc48:	4606      	mov	r6, r0
 801cc4a:	4605      	mov	r5, r0
 801cc4c:	9303      	str	r3, [sp, #12]
 801cc4e:	e1c3      	b.n	801cfd8 <_vfprintf_r+0x6d8>
	...
 801cc58:	f04b 0b10 	orr.w	fp, fp, #16
 801cc5c:	f01b 0f20 	tst.w	fp, #32
 801cc60:	d012      	beq.n	801cc88 <_vfprintf_r+0x388>
 801cc62:	3607      	adds	r6, #7
 801cc64:	f026 0307 	bic.w	r3, r6, #7
 801cc68:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801cc6c:	9306      	str	r3, [sp, #24]
 801cc6e:	2e00      	cmp	r6, #0
 801cc70:	f177 0300 	sbcs.w	r3, r7, #0
 801cc74:	da06      	bge.n	801cc84 <_vfprintf_r+0x384>
 801cc76:	4276      	negs	r6, r6
 801cc78:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801cc7c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801cc80:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801cc84:	2301      	movs	r3, #1
 801cc86:	e392      	b.n	801d3ae <_vfprintf_r+0xaae>
 801cc88:	1d33      	adds	r3, r6, #4
 801cc8a:	f01b 0f10 	tst.w	fp, #16
 801cc8e:	9306      	str	r3, [sp, #24]
 801cc90:	d002      	beq.n	801cc98 <_vfprintf_r+0x398>
 801cc92:	6836      	ldr	r6, [r6, #0]
 801cc94:	17f7      	asrs	r7, r6, #31
 801cc96:	e7ea      	b.n	801cc6e <_vfprintf_r+0x36e>
 801cc98:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801cc9c:	6836      	ldr	r6, [r6, #0]
 801cc9e:	d001      	beq.n	801cca4 <_vfprintf_r+0x3a4>
 801cca0:	b236      	sxth	r6, r6
 801cca2:	e7f7      	b.n	801cc94 <_vfprintf_r+0x394>
 801cca4:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801cca8:	bf18      	it	ne
 801ccaa:	b276      	sxtbne	r6, r6
 801ccac:	e7f2      	b.n	801cc94 <_vfprintf_r+0x394>
 801ccae:	3607      	adds	r6, #7
 801ccb0:	f026 0307 	bic.w	r3, r6, #7
 801ccb4:	ecb3 7b02 	vldmia	r3!, {d7}
 801ccb8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801ccbc:	9306      	str	r3, [sp, #24]
 801ccbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ccc0:	ee09 3a10 	vmov	s18, r3
 801ccc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ccc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ccca:	ee09 3a90 	vmov	s19, r3
 801ccce:	f04f 32ff 	mov.w	r2, #4294967295
 801ccd2:	4b39      	ldr	r3, [pc, #228]	; (801cdb8 <_vfprintf_r+0x4b8>)
 801ccd4:	ec51 0b19 	vmov	r0, r1, d9
 801ccd8:	f7e3 ff58 	bl	8000b8c <__aeabi_dcmpun>
 801ccdc:	bb20      	cbnz	r0, 801cd28 <_vfprintf_r+0x428>
 801ccde:	4b36      	ldr	r3, [pc, #216]	; (801cdb8 <_vfprintf_r+0x4b8>)
 801cce0:	ec51 0b19 	vmov	r0, r1, d9
 801cce4:	f04f 32ff 	mov.w	r2, #4294967295
 801cce8:	f7e3 ff32 	bl	8000b50 <__aeabi_dcmple>
 801ccec:	b9e0      	cbnz	r0, 801cd28 <_vfprintf_r+0x428>
 801ccee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ccf2:	2200      	movs	r2, #0
 801ccf4:	2300      	movs	r3, #0
 801ccf6:	f7e3 ff21 	bl	8000b3c <__aeabi_dcmplt>
 801ccfa:	b110      	cbz	r0, 801cd02 <_vfprintf_r+0x402>
 801ccfc:	232d      	movs	r3, #45	; 0x2d
 801ccfe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801cd02:	4a2e      	ldr	r2, [pc, #184]	; (801cdbc <_vfprintf_r+0x4bc>)
 801cd04:	482e      	ldr	r0, [pc, #184]	; (801cdc0 <_vfprintf_r+0x4c0>)
 801cd06:	9907      	ldr	r1, [sp, #28]
 801cd08:	4613      	mov	r3, r2
 801cd0a:	2947      	cmp	r1, #71	; 0x47
 801cd0c:	bfc8      	it	gt
 801cd0e:	4603      	movgt	r3, r0
 801cd10:	9303      	str	r3, [sp, #12]
 801cd12:	2300      	movs	r3, #0
 801cd14:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801cd18:	9304      	str	r3, [sp, #16]
 801cd1a:	f04f 0803 	mov.w	r8, #3
 801cd1e:	461e      	mov	r6, r3
 801cd20:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801cd24:	461d      	mov	r5, r3
 801cd26:	e157      	b.n	801cfd8 <_vfprintf_r+0x6d8>
 801cd28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801cd2c:	4610      	mov	r0, r2
 801cd2e:	4619      	mov	r1, r3
 801cd30:	f7e3 ff2c 	bl	8000b8c <__aeabi_dcmpun>
 801cd34:	b140      	cbz	r0, 801cd48 <_vfprintf_r+0x448>
 801cd36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd38:	4a22      	ldr	r2, [pc, #136]	; (801cdc4 <_vfprintf_r+0x4c4>)
 801cd3a:	4823      	ldr	r0, [pc, #140]	; (801cdc8 <_vfprintf_r+0x4c8>)
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	bfbc      	itt	lt
 801cd40:	232d      	movlt	r3, #45	; 0x2d
 801cd42:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801cd46:	e7de      	b.n	801cd06 <_vfprintf_r+0x406>
 801cd48:	9b07      	ldr	r3, [sp, #28]
 801cd4a:	f023 0320 	bic.w	r3, r3, #32
 801cd4e:	2b41      	cmp	r3, #65	; 0x41
 801cd50:	9308      	str	r3, [sp, #32]
 801cd52:	d13b      	bne.n	801cdcc <_vfprintf_r+0x4cc>
 801cd54:	2330      	movs	r3, #48	; 0x30
 801cd56:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801cd5a:	9b07      	ldr	r3, [sp, #28]
 801cd5c:	2b61      	cmp	r3, #97	; 0x61
 801cd5e:	bf0c      	ite	eq
 801cd60:	2378      	moveq	r3, #120	; 0x78
 801cd62:	2358      	movne	r3, #88	; 0x58
 801cd64:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 801cd68:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801cd6c:	f04b 0b02 	orr.w	fp, fp, #2
 801cd70:	f340 8209 	ble.w	801d186 <_vfprintf_r+0x886>
 801cd74:	f108 0101 	add.w	r1, r8, #1
 801cd78:	4650      	mov	r0, sl
 801cd7a:	f002 fb01 	bl	801f380 <_malloc_r>
 801cd7e:	9003      	str	r0, [sp, #12]
 801cd80:	2800      	cmp	r0, #0
 801cd82:	f040 8204 	bne.w	801d18e <_vfprintf_r+0x88e>
 801cd86:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801cd8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd8e:	f8a9 300c 	strh.w	r3, [r9, #12]
 801cd92:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801cd96:	07d9      	lsls	r1, r3, #31
 801cd98:	d407      	bmi.n	801cdaa <_vfprintf_r+0x4aa>
 801cd9a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801cd9e:	059a      	lsls	r2, r3, #22
 801cda0:	d403      	bmi.n	801cdaa <_vfprintf_r+0x4aa>
 801cda2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801cda6:	f002 fa6e 	bl	801f286 <__retarget_lock_release_recursive>
 801cdaa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801cdae:	065b      	lsls	r3, r3, #25
 801cdb0:	f57f adee 	bpl.w	801c990 <_vfprintf_r+0x90>
 801cdb4:	e5e9      	b.n	801c98a <_vfprintf_r+0x8a>
 801cdb6:	bf00      	nop
 801cdb8:	7fefffff 	.word	0x7fefffff
 801cdbc:	08028f10 	.word	0x08028f10
 801cdc0:	08028f14 	.word	0x08028f14
 801cdc4:	08028f18 	.word	0x08028f18
 801cdc8:	08028f1c 	.word	0x08028f1c
 801cdcc:	f1b8 3fff 	cmp.w	r8, #4294967295
 801cdd0:	f000 81e0 	beq.w	801d194 <_vfprintf_r+0x894>
 801cdd4:	9b08      	ldr	r3, [sp, #32]
 801cdd6:	2b47      	cmp	r3, #71	; 0x47
 801cdd8:	f040 81e0 	bne.w	801d19c <_vfprintf_r+0x89c>
 801cddc:	f1b8 0f00 	cmp.w	r8, #0
 801cde0:	f040 81dc 	bne.w	801d19c <_vfprintf_r+0x89c>
 801cde4:	f8cd 8010 	str.w	r8, [sp, #16]
 801cde8:	f04f 0801 	mov.w	r8, #1
 801cdec:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801cdf0:	9311      	str	r3, [sp, #68]	; 0x44
 801cdf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	f280 81d3 	bge.w	801d1a0 <_vfprintf_r+0x8a0>
 801cdfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cdfc:	ee08 3a10 	vmov	s16, r3
 801ce00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ce06:	ee08 3a90 	vmov	s17, r3
 801ce0a:	232d      	movs	r3, #45	; 0x2d
 801ce0c:	9318      	str	r3, [sp, #96]	; 0x60
 801ce0e:	9b08      	ldr	r3, [sp, #32]
 801ce10:	2b41      	cmp	r3, #65	; 0x41
 801ce12:	f040 81e3 	bne.w	801d1dc <_vfprintf_r+0x8dc>
 801ce16:	eeb0 0a48 	vmov.f32	s0, s16
 801ce1a:	eef0 0a68 	vmov.f32	s1, s17
 801ce1e:	a81c      	add	r0, sp, #112	; 0x70
 801ce20:	f003 f82c 	bl	801fe7c <frexp>
 801ce24:	2200      	movs	r2, #0
 801ce26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801ce2a:	ec51 0b10 	vmov	r0, r1, d0
 801ce2e:	f7e3 fc13 	bl	8000658 <__aeabi_dmul>
 801ce32:	2200      	movs	r2, #0
 801ce34:	2300      	movs	r3, #0
 801ce36:	4606      	mov	r6, r0
 801ce38:	460f      	mov	r7, r1
 801ce3a:	f7e3 fe75 	bl	8000b28 <__aeabi_dcmpeq>
 801ce3e:	b108      	cbz	r0, 801ce44 <_vfprintf_r+0x544>
 801ce40:	2301      	movs	r3, #1
 801ce42:	931c      	str	r3, [sp, #112]	; 0x70
 801ce44:	4bb7      	ldr	r3, [pc, #732]	; (801d124 <_vfprintf_r+0x824>)
 801ce46:	4ab8      	ldr	r2, [pc, #736]	; (801d128 <_vfprintf_r+0x828>)
 801ce48:	9907      	ldr	r1, [sp, #28]
 801ce4a:	9d03      	ldr	r5, [sp, #12]
 801ce4c:	2961      	cmp	r1, #97	; 0x61
 801ce4e:	bf18      	it	ne
 801ce50:	461a      	movne	r2, r3
 801ce52:	f108 33ff 	add.w	r3, r8, #4294967295
 801ce56:	9217      	str	r2, [sp, #92]	; 0x5c
 801ce58:	9305      	str	r3, [sp, #20]
 801ce5a:	4bb4      	ldr	r3, [pc, #720]	; (801d12c <_vfprintf_r+0x82c>)
 801ce5c:	2200      	movs	r2, #0
 801ce5e:	4630      	mov	r0, r6
 801ce60:	4639      	mov	r1, r7
 801ce62:	f7e3 fbf9 	bl	8000658 <__aeabi_dmul>
 801ce66:	460f      	mov	r7, r1
 801ce68:	4606      	mov	r6, r0
 801ce6a:	f7e3 fea5 	bl	8000bb8 <__aeabi_d2iz>
 801ce6e:	9019      	str	r0, [sp, #100]	; 0x64
 801ce70:	f7e3 fb88 	bl	8000584 <__aeabi_i2d>
 801ce74:	4602      	mov	r2, r0
 801ce76:	460b      	mov	r3, r1
 801ce78:	4630      	mov	r0, r6
 801ce7a:	4639      	mov	r1, r7
 801ce7c:	f7e3 fa34 	bl	80002e8 <__aeabi_dsub>
 801ce80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ce82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ce84:	5c9b      	ldrb	r3, [r3, r2]
 801ce86:	f805 3b01 	strb.w	r3, [r5], #1
 801ce8a:	9b05      	ldr	r3, [sp, #20]
 801ce8c:	9309      	str	r3, [sp, #36]	; 0x24
 801ce8e:	1c5a      	adds	r2, r3, #1
 801ce90:	4606      	mov	r6, r0
 801ce92:	460f      	mov	r7, r1
 801ce94:	d007      	beq.n	801cea6 <_vfprintf_r+0x5a6>
 801ce96:	3b01      	subs	r3, #1
 801ce98:	9305      	str	r3, [sp, #20]
 801ce9a:	2200      	movs	r2, #0
 801ce9c:	2300      	movs	r3, #0
 801ce9e:	f7e3 fe43 	bl	8000b28 <__aeabi_dcmpeq>
 801cea2:	2800      	cmp	r0, #0
 801cea4:	d0d9      	beq.n	801ce5a <_vfprintf_r+0x55a>
 801cea6:	4ba2      	ldr	r3, [pc, #648]	; (801d130 <_vfprintf_r+0x830>)
 801cea8:	2200      	movs	r2, #0
 801ceaa:	4630      	mov	r0, r6
 801ceac:	4639      	mov	r1, r7
 801ceae:	f7e3 fe63 	bl	8000b78 <__aeabi_dcmpgt>
 801ceb2:	b960      	cbnz	r0, 801cece <_vfprintf_r+0x5ce>
 801ceb4:	4b9e      	ldr	r3, [pc, #632]	; (801d130 <_vfprintf_r+0x830>)
 801ceb6:	2200      	movs	r2, #0
 801ceb8:	4630      	mov	r0, r6
 801ceba:	4639      	mov	r1, r7
 801cebc:	f7e3 fe34 	bl	8000b28 <__aeabi_dcmpeq>
 801cec0:	2800      	cmp	r0, #0
 801cec2:	f000 8186 	beq.w	801d1d2 <_vfprintf_r+0x8d2>
 801cec6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cec8:	07df      	lsls	r7, r3, #31
 801ceca:	f140 8182 	bpl.w	801d1d2 <_vfprintf_r+0x8d2>
 801cece:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ced0:	9520      	str	r5, [sp, #128]	; 0x80
 801ced2:	7bd9      	ldrb	r1, [r3, #15]
 801ced4:	2030      	movs	r0, #48	; 0x30
 801ced6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ced8:	1e53      	subs	r3, r2, #1
 801ceda:	9320      	str	r3, [sp, #128]	; 0x80
 801cedc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801cee0:	428b      	cmp	r3, r1
 801cee2:	f000 8165 	beq.w	801d1b0 <_vfprintf_r+0x8b0>
 801cee6:	2b39      	cmp	r3, #57	; 0x39
 801cee8:	bf0b      	itete	eq
 801ceea:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801ceec:	3301      	addne	r3, #1
 801ceee:	7a9b      	ldrbeq	r3, [r3, #10]
 801cef0:	b2db      	uxtbne	r3, r3
 801cef2:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cef6:	9b03      	ldr	r3, [sp, #12]
 801cef8:	1aeb      	subs	r3, r5, r3
 801cefa:	9305      	str	r3, [sp, #20]
 801cefc:	9b08      	ldr	r3, [sp, #32]
 801cefe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801cf00:	2b47      	cmp	r3, #71	; 0x47
 801cf02:	f040 81b3 	bne.w	801d26c <_vfprintf_r+0x96c>
 801cf06:	1cee      	adds	r6, r5, #3
 801cf08:	db02      	blt.n	801cf10 <_vfprintf_r+0x610>
 801cf0a:	4545      	cmp	r5, r8
 801cf0c:	f340 81d5 	ble.w	801d2ba <_vfprintf_r+0x9ba>
 801cf10:	9b07      	ldr	r3, [sp, #28]
 801cf12:	3b02      	subs	r3, #2
 801cf14:	9307      	str	r3, [sp, #28]
 801cf16:	9907      	ldr	r1, [sp, #28]
 801cf18:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801cf1c:	f021 0120 	bic.w	r1, r1, #32
 801cf20:	2941      	cmp	r1, #65	; 0x41
 801cf22:	bf08      	it	eq
 801cf24:	320f      	addeq	r2, #15
 801cf26:	f105 33ff 	add.w	r3, r5, #4294967295
 801cf2a:	bf06      	itte	eq
 801cf2c:	b2d2      	uxtbeq	r2, r2
 801cf2e:	2101      	moveq	r1, #1
 801cf30:	2100      	movne	r1, #0
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	931c      	str	r3, [sp, #112]	; 0x70
 801cf36:	bfb8      	it	lt
 801cf38:	f1c5 0301 	rsblt	r3, r5, #1
 801cf3c:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801cf40:	bfb4      	ite	lt
 801cf42:	222d      	movlt	r2, #45	; 0x2d
 801cf44:	222b      	movge	r2, #43	; 0x2b
 801cf46:	2b09      	cmp	r3, #9
 801cf48:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801cf4c:	f340 81a4 	ble.w	801d298 <_vfprintf_r+0x998>
 801cf50:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801cf54:	260a      	movs	r6, #10
 801cf56:	4611      	mov	r1, r2
 801cf58:	fb93 f5f6 	sdiv	r5, r3, r6
 801cf5c:	fb06 3015 	mls	r0, r6, r5, r3
 801cf60:	3030      	adds	r0, #48	; 0x30
 801cf62:	f801 0c01 	strb.w	r0, [r1, #-1]
 801cf66:	4618      	mov	r0, r3
 801cf68:	2863      	cmp	r0, #99	; 0x63
 801cf6a:	f102 32ff 	add.w	r2, r2, #4294967295
 801cf6e:	462b      	mov	r3, r5
 801cf70:	dcf1      	bgt.n	801cf56 <_vfprintf_r+0x656>
 801cf72:	3330      	adds	r3, #48	; 0x30
 801cf74:	1e88      	subs	r0, r1, #2
 801cf76:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cf7a:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801cf7e:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801cf82:	4603      	mov	r3, r0
 801cf84:	42ab      	cmp	r3, r5
 801cf86:	f0c0 8182 	bcc.w	801d28e <_vfprintf_r+0x98e>
 801cf8a:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801cf8e:	1a52      	subs	r2, r2, r1
 801cf90:	42a8      	cmp	r0, r5
 801cf92:	bf88      	it	hi
 801cf94:	2200      	movhi	r2, #0
 801cf96:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801cf9a:	441a      	add	r2, r3
 801cf9c:	ab1e      	add	r3, sp, #120	; 0x78
 801cf9e:	1ad3      	subs	r3, r2, r3
 801cfa0:	9a05      	ldr	r2, [sp, #20]
 801cfa2:	9315      	str	r3, [sp, #84]	; 0x54
 801cfa4:	2a01      	cmp	r2, #1
 801cfa6:	eb03 0802 	add.w	r8, r3, r2
 801cfaa:	dc02      	bgt.n	801cfb2 <_vfprintf_r+0x6b2>
 801cfac:	f01b 0f01 	tst.w	fp, #1
 801cfb0:	d001      	beq.n	801cfb6 <_vfprintf_r+0x6b6>
 801cfb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfb4:	4498      	add	r8, r3
 801cfb6:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801cfba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cfbe:	9311      	str	r3, [sp, #68]	; 0x44
 801cfc0:	2300      	movs	r3, #0
 801cfc2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801cfc6:	461d      	mov	r5, r3
 801cfc8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801cfca:	b113      	cbz	r3, 801cfd2 <_vfprintf_r+0x6d2>
 801cfcc:	232d      	movs	r3, #45	; 0x2d
 801cfce:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801cfd2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801cfd6:	2600      	movs	r6, #0
 801cfd8:	4546      	cmp	r6, r8
 801cfda:	4633      	mov	r3, r6
 801cfdc:	bfb8      	it	lt
 801cfde:	4643      	movlt	r3, r8
 801cfe0:	9311      	str	r3, [sp, #68]	; 0x44
 801cfe2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801cfe6:	b113      	cbz	r3, 801cfee <_vfprintf_r+0x6ee>
 801cfe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cfea:	3301      	adds	r3, #1
 801cfec:	9311      	str	r3, [sp, #68]	; 0x44
 801cfee:	f01b 0302 	ands.w	r3, fp, #2
 801cff2:	9317      	str	r3, [sp, #92]	; 0x5c
 801cff4:	bf1e      	ittt	ne
 801cff6:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801cff8:	3302      	addne	r3, #2
 801cffa:	9311      	strne	r3, [sp, #68]	; 0x44
 801cffc:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 801d000:	9318      	str	r3, [sp, #96]	; 0x60
 801d002:	d11f      	bne.n	801d044 <_vfprintf_r+0x744>
 801d004:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801d008:	1a9f      	subs	r7, r3, r2
 801d00a:	2f00      	cmp	r7, #0
 801d00c:	dd1a      	ble.n	801d044 <_vfprintf_r+0x744>
 801d00e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d012:	4848      	ldr	r0, [pc, #288]	; (801d134 <_vfprintf_r+0x834>)
 801d014:	6020      	str	r0, [r4, #0]
 801d016:	2f10      	cmp	r7, #16
 801d018:	f103 0301 	add.w	r3, r3, #1
 801d01c:	f104 0108 	add.w	r1, r4, #8
 801d020:	f300 82f0 	bgt.w	801d604 <_vfprintf_r+0xd04>
 801d024:	6067      	str	r7, [r4, #4]
 801d026:	2b07      	cmp	r3, #7
 801d028:	4417      	add	r7, r2
 801d02a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801d02e:	f340 82fc 	ble.w	801d62a <_vfprintf_r+0xd2a>
 801d032:	aa22      	add	r2, sp, #136	; 0x88
 801d034:	4649      	mov	r1, r9
 801d036:	4650      	mov	r0, sl
 801d038:	f004 f963 	bl	8021302 <__sprint_r>
 801d03c:	2800      	cmp	r0, #0
 801d03e:	f040 8632 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d042:	ac25      	add	r4, sp, #148	; 0x94
 801d044:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801d048:	b173      	cbz	r3, 801d068 <_vfprintf_r+0x768>
 801d04a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801d04e:	6023      	str	r3, [r4, #0]
 801d050:	2301      	movs	r3, #1
 801d052:	6063      	str	r3, [r4, #4]
 801d054:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d056:	3301      	adds	r3, #1
 801d058:	9324      	str	r3, [sp, #144]	; 0x90
 801d05a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d05c:	3301      	adds	r3, #1
 801d05e:	2b07      	cmp	r3, #7
 801d060:	9323      	str	r3, [sp, #140]	; 0x8c
 801d062:	f300 82e4 	bgt.w	801d62e <_vfprintf_r+0xd2e>
 801d066:	3408      	adds	r4, #8
 801d068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d06a:	b16b      	cbz	r3, 801d088 <_vfprintf_r+0x788>
 801d06c:	ab1b      	add	r3, sp, #108	; 0x6c
 801d06e:	6023      	str	r3, [r4, #0]
 801d070:	2302      	movs	r3, #2
 801d072:	6063      	str	r3, [r4, #4]
 801d074:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d076:	3302      	adds	r3, #2
 801d078:	9324      	str	r3, [sp, #144]	; 0x90
 801d07a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d07c:	3301      	adds	r3, #1
 801d07e:	2b07      	cmp	r3, #7
 801d080:	9323      	str	r3, [sp, #140]	; 0x8c
 801d082:	f300 82de 	bgt.w	801d642 <_vfprintf_r+0xd42>
 801d086:	3408      	adds	r4, #8
 801d088:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d08a:	2b80      	cmp	r3, #128	; 0x80
 801d08c:	d11f      	bne.n	801d0ce <_vfprintf_r+0x7ce>
 801d08e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801d092:	1a9f      	subs	r7, r3, r2
 801d094:	2f00      	cmp	r7, #0
 801d096:	dd1a      	ble.n	801d0ce <_vfprintf_r+0x7ce>
 801d098:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d09c:	4826      	ldr	r0, [pc, #152]	; (801d138 <_vfprintf_r+0x838>)
 801d09e:	6020      	str	r0, [r4, #0]
 801d0a0:	2f10      	cmp	r7, #16
 801d0a2:	f103 0301 	add.w	r3, r3, #1
 801d0a6:	f104 0108 	add.w	r1, r4, #8
 801d0aa:	f300 82d4 	bgt.w	801d656 <_vfprintf_r+0xd56>
 801d0ae:	6067      	str	r7, [r4, #4]
 801d0b0:	2b07      	cmp	r3, #7
 801d0b2:	4417      	add	r7, r2
 801d0b4:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801d0b8:	f340 82e0 	ble.w	801d67c <_vfprintf_r+0xd7c>
 801d0bc:	aa22      	add	r2, sp, #136	; 0x88
 801d0be:	4649      	mov	r1, r9
 801d0c0:	4650      	mov	r0, sl
 801d0c2:	f004 f91e 	bl	8021302 <__sprint_r>
 801d0c6:	2800      	cmp	r0, #0
 801d0c8:	f040 85ed 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d0cc:	ac25      	add	r4, sp, #148	; 0x94
 801d0ce:	eba6 0608 	sub.w	r6, r6, r8
 801d0d2:	2e00      	cmp	r6, #0
 801d0d4:	dd1a      	ble.n	801d10c <_vfprintf_r+0x80c>
 801d0d6:	4f18      	ldr	r7, [pc, #96]	; (801d138 <_vfprintf_r+0x838>)
 801d0d8:	6027      	str	r7, [r4, #0]
 801d0da:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d0de:	2e10      	cmp	r6, #16
 801d0e0:	f103 0301 	add.w	r3, r3, #1
 801d0e4:	f104 0108 	add.w	r1, r4, #8
 801d0e8:	f300 82ca 	bgt.w	801d680 <_vfprintf_r+0xd80>
 801d0ec:	6066      	str	r6, [r4, #4]
 801d0ee:	2b07      	cmp	r3, #7
 801d0f0:	4416      	add	r6, r2
 801d0f2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801d0f6:	f340 82d6 	ble.w	801d6a6 <_vfprintf_r+0xda6>
 801d0fa:	aa22      	add	r2, sp, #136	; 0x88
 801d0fc:	4649      	mov	r1, r9
 801d0fe:	4650      	mov	r0, sl
 801d100:	f004 f8ff 	bl	8021302 <__sprint_r>
 801d104:	2800      	cmp	r0, #0
 801d106:	f040 85ce 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d10a:	ac25      	add	r4, sp, #148	; 0x94
 801d10c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801d110:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801d112:	f040 82cf 	bne.w	801d6b4 <_vfprintf_r+0xdb4>
 801d116:	9b03      	ldr	r3, [sp, #12]
 801d118:	e9c4 3800 	strd	r3, r8, [r4]
 801d11c:	4446      	add	r6, r8
 801d11e:	9624      	str	r6, [sp, #144]	; 0x90
 801d120:	e00c      	b.n	801d13c <_vfprintf_r+0x83c>
 801d122:	bf00      	nop
 801d124:	08028f31 	.word	0x08028f31
 801d128:	08028f20 	.word	0x08028f20
 801d12c:	40300000 	.word	0x40300000
 801d130:	3fe00000 	.word	0x3fe00000
 801d134:	08028fa0 	.word	0x08028fa0
 801d138:	08028fb0 	.word	0x08028fb0
 801d13c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d13e:	3301      	adds	r3, #1
 801d140:	2b07      	cmp	r3, #7
 801d142:	9323      	str	r3, [sp, #140]	; 0x8c
 801d144:	f300 82fb 	bgt.w	801d73e <_vfprintf_r+0xe3e>
 801d148:	3408      	adds	r4, #8
 801d14a:	f01b 0f04 	tst.w	fp, #4
 801d14e:	f040 858c 	bne.w	801dc6a <_vfprintf_r+0x136a>
 801d152:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801d156:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d158:	428a      	cmp	r2, r1
 801d15a:	bfac      	ite	ge
 801d15c:	189b      	addge	r3, r3, r2
 801d15e:	185b      	addlt	r3, r3, r1
 801d160:	930f      	str	r3, [sp, #60]	; 0x3c
 801d162:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d164:	b13b      	cbz	r3, 801d176 <_vfprintf_r+0x876>
 801d166:	aa22      	add	r2, sp, #136	; 0x88
 801d168:	4649      	mov	r1, r9
 801d16a:	4650      	mov	r0, sl
 801d16c:	f004 f8c9 	bl	8021302 <__sprint_r>
 801d170:	2800      	cmp	r0, #0
 801d172:	f040 8598 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d176:	2300      	movs	r3, #0
 801d178:	9323      	str	r3, [sp, #140]	; 0x8c
 801d17a:	9b04      	ldr	r3, [sp, #16]
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	f040 85ae 	bne.w	801dcde <_vfprintf_r+0x13de>
 801d182:	ac25      	add	r4, sp, #148	; 0x94
 801d184:	e0eb      	b.n	801d35e <_vfprintf_r+0xa5e>
 801d186:	ab35      	add	r3, sp, #212	; 0xd4
 801d188:	9004      	str	r0, [sp, #16]
 801d18a:	9303      	str	r3, [sp, #12]
 801d18c:	e62e      	b.n	801cdec <_vfprintf_r+0x4ec>
 801d18e:	9b03      	ldr	r3, [sp, #12]
 801d190:	9304      	str	r3, [sp, #16]
 801d192:	e62b      	b.n	801cdec <_vfprintf_r+0x4ec>
 801d194:	9004      	str	r0, [sp, #16]
 801d196:	f04f 0806 	mov.w	r8, #6
 801d19a:	e627      	b.n	801cdec <_vfprintf_r+0x4ec>
 801d19c:	9004      	str	r0, [sp, #16]
 801d19e:	e625      	b.n	801cdec <_vfprintf_r+0x4ec>
 801d1a0:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801d1a4:	2300      	movs	r3, #0
 801d1a6:	eeb0 8a47 	vmov.f32	s16, s14
 801d1aa:	eef0 8a67 	vmov.f32	s17, s15
 801d1ae:	e62d      	b.n	801ce0c <_vfprintf_r+0x50c>
 801d1b0:	f802 0c01 	strb.w	r0, [r2, #-1]
 801d1b4:	e68f      	b.n	801ced6 <_vfprintf_r+0x5d6>
 801d1b6:	f803 0b01 	strb.w	r0, [r3], #1
 801d1ba:	1aca      	subs	r2, r1, r3
 801d1bc:	2a00      	cmp	r2, #0
 801d1be:	dafa      	bge.n	801d1b6 <_vfprintf_r+0x8b6>
 801d1c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1c4:	3201      	adds	r2, #1
 801d1c6:	f103 0301 	add.w	r3, r3, #1
 801d1ca:	bfb8      	it	lt
 801d1cc:	2300      	movlt	r3, #0
 801d1ce:	441d      	add	r5, r3
 801d1d0:	e691      	b.n	801cef6 <_vfprintf_r+0x5f6>
 801d1d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d1d4:	462b      	mov	r3, r5
 801d1d6:	18a9      	adds	r1, r5, r2
 801d1d8:	2030      	movs	r0, #48	; 0x30
 801d1da:	e7ee      	b.n	801d1ba <_vfprintf_r+0x8ba>
 801d1dc:	9b08      	ldr	r3, [sp, #32]
 801d1de:	2b46      	cmp	r3, #70	; 0x46
 801d1e0:	d005      	beq.n	801d1ee <_vfprintf_r+0x8ee>
 801d1e2:	2b45      	cmp	r3, #69	; 0x45
 801d1e4:	d11b      	bne.n	801d21e <_vfprintf_r+0x91e>
 801d1e6:	f108 0501 	add.w	r5, r8, #1
 801d1ea:	2102      	movs	r1, #2
 801d1ec:	e001      	b.n	801d1f2 <_vfprintf_r+0x8f2>
 801d1ee:	4645      	mov	r5, r8
 801d1f0:	2103      	movs	r1, #3
 801d1f2:	ab20      	add	r3, sp, #128	; 0x80
 801d1f4:	9301      	str	r3, [sp, #4]
 801d1f6:	ab1d      	add	r3, sp, #116	; 0x74
 801d1f8:	9300      	str	r3, [sp, #0]
 801d1fa:	462a      	mov	r2, r5
 801d1fc:	ab1c      	add	r3, sp, #112	; 0x70
 801d1fe:	4650      	mov	r0, sl
 801d200:	eeb0 0a48 	vmov.f32	s0, s16
 801d204:	eef0 0a68 	vmov.f32	s1, s17
 801d208:	f000 fefa 	bl	801e000 <_dtoa_r>
 801d20c:	9b08      	ldr	r3, [sp, #32]
 801d20e:	9003      	str	r0, [sp, #12]
 801d210:	2b47      	cmp	r3, #71	; 0x47
 801d212:	d106      	bne.n	801d222 <_vfprintf_r+0x922>
 801d214:	f01b 0f01 	tst.w	fp, #1
 801d218:	d103      	bne.n	801d222 <_vfprintf_r+0x922>
 801d21a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801d21c:	e66b      	b.n	801cef6 <_vfprintf_r+0x5f6>
 801d21e:	4645      	mov	r5, r8
 801d220:	e7e3      	b.n	801d1ea <_vfprintf_r+0x8ea>
 801d222:	9b03      	ldr	r3, [sp, #12]
 801d224:	195e      	adds	r6, r3, r5
 801d226:	9b08      	ldr	r3, [sp, #32]
 801d228:	2b46      	cmp	r3, #70	; 0x46
 801d22a:	d10f      	bne.n	801d24c <_vfprintf_r+0x94c>
 801d22c:	9b03      	ldr	r3, [sp, #12]
 801d22e:	781b      	ldrb	r3, [r3, #0]
 801d230:	2b30      	cmp	r3, #48	; 0x30
 801d232:	d109      	bne.n	801d248 <_vfprintf_r+0x948>
 801d234:	ec51 0b18 	vmov	r0, r1, d8
 801d238:	2200      	movs	r2, #0
 801d23a:	2300      	movs	r3, #0
 801d23c:	f7e3 fc74 	bl	8000b28 <__aeabi_dcmpeq>
 801d240:	b910      	cbnz	r0, 801d248 <_vfprintf_r+0x948>
 801d242:	f1c5 0501 	rsb	r5, r5, #1
 801d246:	951c      	str	r5, [sp, #112]	; 0x70
 801d248:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d24a:	441e      	add	r6, r3
 801d24c:	ec51 0b18 	vmov	r0, r1, d8
 801d250:	2200      	movs	r2, #0
 801d252:	2300      	movs	r3, #0
 801d254:	f7e3 fc68 	bl	8000b28 <__aeabi_dcmpeq>
 801d258:	b100      	cbz	r0, 801d25c <_vfprintf_r+0x95c>
 801d25a:	9620      	str	r6, [sp, #128]	; 0x80
 801d25c:	2230      	movs	r2, #48	; 0x30
 801d25e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d260:	429e      	cmp	r6, r3
 801d262:	d9da      	bls.n	801d21a <_vfprintf_r+0x91a>
 801d264:	1c59      	adds	r1, r3, #1
 801d266:	9120      	str	r1, [sp, #128]	; 0x80
 801d268:	701a      	strb	r2, [r3, #0]
 801d26a:	e7f8      	b.n	801d25e <_vfprintf_r+0x95e>
 801d26c:	9b08      	ldr	r3, [sp, #32]
 801d26e:	2b46      	cmp	r3, #70	; 0x46
 801d270:	f47f ae51 	bne.w	801cf16 <_vfprintf_r+0x616>
 801d274:	f00b 0301 	and.w	r3, fp, #1
 801d278:	2d00      	cmp	r5, #0
 801d27a:	ea43 0308 	orr.w	r3, r3, r8
 801d27e:	dd18      	ble.n	801d2b2 <_vfprintf_r+0x9b2>
 801d280:	b383      	cbz	r3, 801d2e4 <_vfprintf_r+0x9e4>
 801d282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d284:	18eb      	adds	r3, r5, r3
 801d286:	4498      	add	r8, r3
 801d288:	2366      	movs	r3, #102	; 0x66
 801d28a:	9307      	str	r3, [sp, #28]
 801d28c:	e030      	b.n	801d2f0 <_vfprintf_r+0x9f0>
 801d28e:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d292:	f802 6b01 	strb.w	r6, [r2], #1
 801d296:	e675      	b.n	801cf84 <_vfprintf_r+0x684>
 801d298:	b941      	cbnz	r1, 801d2ac <_vfprintf_r+0x9ac>
 801d29a:	2230      	movs	r2, #48	; 0x30
 801d29c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801d2a0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801d2a4:	3330      	adds	r3, #48	; 0x30
 801d2a6:	f802 3b01 	strb.w	r3, [r2], #1
 801d2aa:	e677      	b.n	801cf9c <_vfprintf_r+0x69c>
 801d2ac:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801d2b0:	e7f8      	b.n	801d2a4 <_vfprintf_r+0x9a4>
 801d2b2:	b1cb      	cbz	r3, 801d2e8 <_vfprintf_r+0x9e8>
 801d2b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2b6:	3301      	adds	r3, #1
 801d2b8:	e7e5      	b.n	801d286 <_vfprintf_r+0x986>
 801d2ba:	9b05      	ldr	r3, [sp, #20]
 801d2bc:	429d      	cmp	r5, r3
 801d2be:	db07      	blt.n	801d2d0 <_vfprintf_r+0x9d0>
 801d2c0:	f01b 0f01 	tst.w	fp, #1
 801d2c4:	d029      	beq.n	801d31a <_vfprintf_r+0xa1a>
 801d2c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2c8:	eb05 0803 	add.w	r8, r5, r3
 801d2cc:	2367      	movs	r3, #103	; 0x67
 801d2ce:	e7dc      	b.n	801d28a <_vfprintf_r+0x98a>
 801d2d0:	9b05      	ldr	r3, [sp, #20]
 801d2d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d2d4:	2d00      	cmp	r5, #0
 801d2d6:	eb03 0802 	add.w	r8, r3, r2
 801d2da:	dcf7      	bgt.n	801d2cc <_vfprintf_r+0x9cc>
 801d2dc:	f1c5 0301 	rsb	r3, r5, #1
 801d2e0:	4498      	add	r8, r3
 801d2e2:	e7f3      	b.n	801d2cc <_vfprintf_r+0x9cc>
 801d2e4:	46a8      	mov	r8, r5
 801d2e6:	e7cf      	b.n	801d288 <_vfprintf_r+0x988>
 801d2e8:	2366      	movs	r3, #102	; 0x66
 801d2ea:	9307      	str	r3, [sp, #28]
 801d2ec:	f04f 0801 	mov.w	r8, #1
 801d2f0:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801d2f4:	9309      	str	r3, [sp, #36]	; 0x24
 801d2f6:	d023      	beq.n	801d340 <_vfprintf_r+0xa40>
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	2d00      	cmp	r5, #0
 801d2fc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d300:	f77f ae62 	ble.w	801cfc8 <_vfprintf_r+0x6c8>
 801d304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d306:	781b      	ldrb	r3, [r3, #0]
 801d308:	2bff      	cmp	r3, #255	; 0xff
 801d30a:	d108      	bne.n	801d31e <_vfprintf_r+0xa1e>
 801d30c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d310:	4413      	add	r3, r2
 801d312:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d314:	fb02 8803 	mla	r8, r2, r3, r8
 801d318:	e656      	b.n	801cfc8 <_vfprintf_r+0x6c8>
 801d31a:	46a8      	mov	r8, r5
 801d31c:	e7d6      	b.n	801d2cc <_vfprintf_r+0x9cc>
 801d31e:	42ab      	cmp	r3, r5
 801d320:	daf4      	bge.n	801d30c <_vfprintf_r+0xa0c>
 801d322:	1aed      	subs	r5, r5, r3
 801d324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d326:	785b      	ldrb	r3, [r3, #1]
 801d328:	b133      	cbz	r3, 801d338 <_vfprintf_r+0xa38>
 801d32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d32c:	3301      	adds	r3, #1
 801d32e:	9309      	str	r3, [sp, #36]	; 0x24
 801d330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d332:	3301      	adds	r3, #1
 801d334:	930a      	str	r3, [sp, #40]	; 0x28
 801d336:	e7e5      	b.n	801d304 <_vfprintf_r+0xa04>
 801d338:	9b08      	ldr	r3, [sp, #32]
 801d33a:	3301      	adds	r3, #1
 801d33c:	9308      	str	r3, [sp, #32]
 801d33e:	e7e1      	b.n	801d304 <_vfprintf_r+0xa04>
 801d340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d342:	9308      	str	r3, [sp, #32]
 801d344:	e640      	b.n	801cfc8 <_vfprintf_r+0x6c8>
 801d346:	4632      	mov	r2, r6
 801d348:	f01b 0f20 	tst.w	fp, #32
 801d34c:	f852 3b04 	ldr.w	r3, [r2], #4
 801d350:	9206      	str	r2, [sp, #24]
 801d352:	d009      	beq.n	801d368 <_vfprintf_r+0xa68>
 801d354:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d356:	4610      	mov	r0, r2
 801d358:	17d1      	asrs	r1, r2, #31
 801d35a:	e9c3 0100 	strd	r0, r1, [r3]
 801d35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d360:	9e06      	ldr	r6, [sp, #24]
 801d362:	9303      	str	r3, [sp, #12]
 801d364:	f7ff bb4f 	b.w	801ca06 <_vfprintf_r+0x106>
 801d368:	f01b 0f10 	tst.w	fp, #16
 801d36c:	d002      	beq.n	801d374 <_vfprintf_r+0xa74>
 801d36e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d370:	601a      	str	r2, [r3, #0]
 801d372:	e7f4      	b.n	801d35e <_vfprintf_r+0xa5e>
 801d374:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801d378:	d002      	beq.n	801d380 <_vfprintf_r+0xa80>
 801d37a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d37c:	801a      	strh	r2, [r3, #0]
 801d37e:	e7ee      	b.n	801d35e <_vfprintf_r+0xa5e>
 801d380:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801d384:	d0f3      	beq.n	801d36e <_vfprintf_r+0xa6e>
 801d386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d388:	701a      	strb	r2, [r3, #0]
 801d38a:	e7e8      	b.n	801d35e <_vfprintf_r+0xa5e>
 801d38c:	f04b 0b10 	orr.w	fp, fp, #16
 801d390:	f01b 0f20 	tst.w	fp, #32
 801d394:	d01e      	beq.n	801d3d4 <_vfprintf_r+0xad4>
 801d396:	3607      	adds	r6, #7
 801d398:	f026 0307 	bic.w	r3, r6, #7
 801d39c:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801d3a0:	9306      	str	r3, [sp, #24]
 801d3a2:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801d3a6:	2300      	movs	r3, #0
 801d3a8:	2200      	movs	r2, #0
 801d3aa:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801d3ae:	f1b8 3fff 	cmp.w	r8, #4294967295
 801d3b2:	f000 84a9 	beq.w	801dd08 <_vfprintf_r+0x1408>
 801d3b6:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 801d3ba:	9204      	str	r2, [sp, #16]
 801d3bc:	ea56 0207 	orrs.w	r2, r6, r7
 801d3c0:	f040 84a8 	bne.w	801dd14 <_vfprintf_r+0x1414>
 801d3c4:	f1b8 0f00 	cmp.w	r8, #0
 801d3c8:	f000 8104 	beq.w	801d5d4 <_vfprintf_r+0xcd4>
 801d3cc:	2b01      	cmp	r3, #1
 801d3ce:	f040 84a4 	bne.w	801dd1a <_vfprintf_r+0x141a>
 801d3d2:	e09a      	b.n	801d50a <_vfprintf_r+0xc0a>
 801d3d4:	1d33      	adds	r3, r6, #4
 801d3d6:	f01b 0f10 	tst.w	fp, #16
 801d3da:	9306      	str	r3, [sp, #24]
 801d3dc:	d001      	beq.n	801d3e2 <_vfprintf_r+0xae2>
 801d3de:	6836      	ldr	r6, [r6, #0]
 801d3e0:	e003      	b.n	801d3ea <_vfprintf_r+0xaea>
 801d3e2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801d3e6:	d002      	beq.n	801d3ee <_vfprintf_r+0xaee>
 801d3e8:	8836      	ldrh	r6, [r6, #0]
 801d3ea:	2700      	movs	r7, #0
 801d3ec:	e7d9      	b.n	801d3a2 <_vfprintf_r+0xaa2>
 801d3ee:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801d3f2:	d0f4      	beq.n	801d3de <_vfprintf_r+0xade>
 801d3f4:	7836      	ldrb	r6, [r6, #0]
 801d3f6:	e7f8      	b.n	801d3ea <_vfprintf_r+0xaea>
 801d3f8:	4633      	mov	r3, r6
 801d3fa:	2278      	movs	r2, #120	; 0x78
 801d3fc:	f853 6b04 	ldr.w	r6, [r3], #4
 801d400:	9306      	str	r3, [sp, #24]
 801d402:	f647 0330 	movw	r3, #30768	; 0x7830
 801d406:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801d40a:	4ba8      	ldr	r3, [pc, #672]	; (801d6ac <_vfprintf_r+0xdac>)
 801d40c:	9316      	str	r3, [sp, #88]	; 0x58
 801d40e:	2700      	movs	r7, #0
 801d410:	f04b 0b02 	orr.w	fp, fp, #2
 801d414:	2302      	movs	r3, #2
 801d416:	9207      	str	r2, [sp, #28]
 801d418:	e7c6      	b.n	801d3a8 <_vfprintf_r+0xaa8>
 801d41a:	4632      	mov	r2, r6
 801d41c:	2500      	movs	r5, #0
 801d41e:	f852 3b04 	ldr.w	r3, [r2], #4
 801d422:	9303      	str	r3, [sp, #12]
 801d424:	f1b8 3fff 	cmp.w	r8, #4294967295
 801d428:	9206      	str	r2, [sp, #24]
 801d42a:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801d42e:	d010      	beq.n	801d452 <_vfprintf_r+0xb52>
 801d430:	9803      	ldr	r0, [sp, #12]
 801d432:	4642      	mov	r2, r8
 801d434:	4629      	mov	r1, r5
 801d436:	f7e2 ff03 	bl	8000240 <memchr>
 801d43a:	9004      	str	r0, [sp, #16]
 801d43c:	2800      	cmp	r0, #0
 801d43e:	f000 80df 	beq.w	801d600 <_vfprintf_r+0xd00>
 801d442:	9a03      	ldr	r2, [sp, #12]
 801d444:	9504      	str	r5, [sp, #16]
 801d446:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801d44a:	eba0 0802 	sub.w	r8, r0, r2
 801d44e:	462e      	mov	r6, r5
 801d450:	e5c2      	b.n	801cfd8 <_vfprintf_r+0x6d8>
 801d452:	9803      	ldr	r0, [sp, #12]
 801d454:	f7e2 fee6 	bl	8000224 <strlen>
 801d458:	462e      	mov	r6, r5
 801d45a:	4680      	mov	r8, r0
 801d45c:	9504      	str	r5, [sp, #16]
 801d45e:	4633      	mov	r3, r6
 801d460:	e45e      	b.n	801cd20 <_vfprintf_r+0x420>
 801d462:	f04b 0b10 	orr.w	fp, fp, #16
 801d466:	f01b 0f20 	tst.w	fp, #32
 801d46a:	d007      	beq.n	801d47c <_vfprintf_r+0xb7c>
 801d46c:	3607      	adds	r6, #7
 801d46e:	f026 0307 	bic.w	r3, r6, #7
 801d472:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801d476:	9306      	str	r3, [sp, #24]
 801d478:	2301      	movs	r3, #1
 801d47a:	e795      	b.n	801d3a8 <_vfprintf_r+0xaa8>
 801d47c:	1d33      	adds	r3, r6, #4
 801d47e:	f01b 0f10 	tst.w	fp, #16
 801d482:	9306      	str	r3, [sp, #24]
 801d484:	d001      	beq.n	801d48a <_vfprintf_r+0xb8a>
 801d486:	6836      	ldr	r6, [r6, #0]
 801d488:	e003      	b.n	801d492 <_vfprintf_r+0xb92>
 801d48a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801d48e:	d002      	beq.n	801d496 <_vfprintf_r+0xb96>
 801d490:	8836      	ldrh	r6, [r6, #0]
 801d492:	2700      	movs	r7, #0
 801d494:	e7f0      	b.n	801d478 <_vfprintf_r+0xb78>
 801d496:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801d49a:	d0f4      	beq.n	801d486 <_vfprintf_r+0xb86>
 801d49c:	7836      	ldrb	r6, [r6, #0]
 801d49e:	e7f8      	b.n	801d492 <_vfprintf_r+0xb92>
 801d4a0:	4b83      	ldr	r3, [pc, #524]	; (801d6b0 <_vfprintf_r+0xdb0>)
 801d4a2:	9316      	str	r3, [sp, #88]	; 0x58
 801d4a4:	f01b 0f20 	tst.w	fp, #32
 801d4a8:	d019      	beq.n	801d4de <_vfprintf_r+0xbde>
 801d4aa:	3607      	adds	r6, #7
 801d4ac:	f026 0307 	bic.w	r3, r6, #7
 801d4b0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801d4b4:	9306      	str	r3, [sp, #24]
 801d4b6:	f01b 0f01 	tst.w	fp, #1
 801d4ba:	d00a      	beq.n	801d4d2 <_vfprintf_r+0xbd2>
 801d4bc:	ea56 0307 	orrs.w	r3, r6, r7
 801d4c0:	d007      	beq.n	801d4d2 <_vfprintf_r+0xbd2>
 801d4c2:	2330      	movs	r3, #48	; 0x30
 801d4c4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801d4c8:	9b07      	ldr	r3, [sp, #28]
 801d4ca:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801d4ce:	f04b 0b02 	orr.w	fp, fp, #2
 801d4d2:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801d4d6:	2302      	movs	r3, #2
 801d4d8:	e766      	b.n	801d3a8 <_vfprintf_r+0xaa8>
 801d4da:	4b74      	ldr	r3, [pc, #464]	; (801d6ac <_vfprintf_r+0xdac>)
 801d4dc:	e7e1      	b.n	801d4a2 <_vfprintf_r+0xba2>
 801d4de:	1d33      	adds	r3, r6, #4
 801d4e0:	f01b 0f10 	tst.w	fp, #16
 801d4e4:	9306      	str	r3, [sp, #24]
 801d4e6:	d001      	beq.n	801d4ec <_vfprintf_r+0xbec>
 801d4e8:	6836      	ldr	r6, [r6, #0]
 801d4ea:	e003      	b.n	801d4f4 <_vfprintf_r+0xbf4>
 801d4ec:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801d4f0:	d002      	beq.n	801d4f8 <_vfprintf_r+0xbf8>
 801d4f2:	8836      	ldrh	r6, [r6, #0]
 801d4f4:	2700      	movs	r7, #0
 801d4f6:	e7de      	b.n	801d4b6 <_vfprintf_r+0xbb6>
 801d4f8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801d4fc:	d0f4      	beq.n	801d4e8 <_vfprintf_r+0xbe8>
 801d4fe:	7836      	ldrb	r6, [r6, #0]
 801d500:	e7f8      	b.n	801d4f4 <_vfprintf_r+0xbf4>
 801d502:	2f00      	cmp	r7, #0
 801d504:	bf08      	it	eq
 801d506:	2e0a      	cmpeq	r6, #10
 801d508:	d206      	bcs.n	801d518 <_vfprintf_r+0xc18>
 801d50a:	3630      	adds	r6, #48	; 0x30
 801d50c:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801d510:	f20d 1337 	addw	r3, sp, #311	; 0x137
 801d514:	f000 bc23 	b.w	801dd5e <_vfprintf_r+0x145e>
 801d518:	2300      	movs	r3, #0
 801d51a:	9305      	str	r3, [sp, #20]
 801d51c:	9b04      	ldr	r3, [sp, #16]
 801d51e:	ad4e      	add	r5, sp, #312	; 0x138
 801d520:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 801d524:	1e6b      	subs	r3, r5, #1
 801d526:	9303      	str	r3, [sp, #12]
 801d528:	220a      	movs	r2, #10
 801d52a:	2300      	movs	r3, #0
 801d52c:	4630      	mov	r0, r6
 801d52e:	4639      	mov	r1, r7
 801d530:	f7e3 fbba 	bl	8000ca8 <__aeabi_uldivmod>
 801d534:	9b05      	ldr	r3, [sp, #20]
 801d536:	3230      	adds	r2, #48	; 0x30
 801d538:	3301      	adds	r3, #1
 801d53a:	f805 2c01 	strb.w	r2, [r5, #-1]
 801d53e:	9305      	str	r3, [sp, #20]
 801d540:	f1bb 0f00 	cmp.w	fp, #0
 801d544:	d019      	beq.n	801d57a <_vfprintf_r+0xc7a>
 801d546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d548:	9a05      	ldr	r2, [sp, #20]
 801d54a:	781b      	ldrb	r3, [r3, #0]
 801d54c:	429a      	cmp	r2, r3
 801d54e:	d114      	bne.n	801d57a <_vfprintf_r+0xc7a>
 801d550:	2aff      	cmp	r2, #255	; 0xff
 801d552:	d012      	beq.n	801d57a <_vfprintf_r+0xc7a>
 801d554:	2f00      	cmp	r7, #0
 801d556:	bf08      	it	eq
 801d558:	2e0a      	cmpeq	r6, #10
 801d55a:	d30e      	bcc.n	801d57a <_vfprintf_r+0xc7a>
 801d55c:	9b03      	ldr	r3, [sp, #12]
 801d55e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d560:	9914      	ldr	r1, [sp, #80]	; 0x50
 801d562:	1a9b      	subs	r3, r3, r2
 801d564:	4618      	mov	r0, r3
 801d566:	9303      	str	r3, [sp, #12]
 801d568:	f7fd fd0f 	bl	801af8a <strncpy>
 801d56c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d56e:	785d      	ldrb	r5, [r3, #1]
 801d570:	b1e5      	cbz	r5, 801d5ac <_vfprintf_r+0xcac>
 801d572:	3301      	adds	r3, #1
 801d574:	930a      	str	r3, [sp, #40]	; 0x28
 801d576:	2300      	movs	r3, #0
 801d578:	9305      	str	r3, [sp, #20]
 801d57a:	220a      	movs	r2, #10
 801d57c:	2300      	movs	r3, #0
 801d57e:	4630      	mov	r0, r6
 801d580:	4639      	mov	r1, r7
 801d582:	f7e3 fb91 	bl	8000ca8 <__aeabi_uldivmod>
 801d586:	2f00      	cmp	r7, #0
 801d588:	bf08      	it	eq
 801d58a:	2e0a      	cmpeq	r6, #10
 801d58c:	d20a      	bcs.n	801d5a4 <_vfprintf_r+0xca4>
 801d58e:	9b03      	ldr	r3, [sp, #12]
 801d590:	f8dd b010 	ldr.w	fp, [sp, #16]
 801d594:	aa4e      	add	r2, sp, #312	; 0x138
 801d596:	4646      	mov	r6, r8
 801d598:	eba2 0803 	sub.w	r8, r2, r3
 801d59c:	2300      	movs	r3, #0
 801d59e:	9304      	str	r3, [sp, #16]
 801d5a0:	f7ff bbbe 	b.w	801cd20 <_vfprintf_r+0x420>
 801d5a4:	9d03      	ldr	r5, [sp, #12]
 801d5a6:	4606      	mov	r6, r0
 801d5a8:	460f      	mov	r7, r1
 801d5aa:	e7bb      	b.n	801d524 <_vfprintf_r+0xc24>
 801d5ac:	9505      	str	r5, [sp, #20]
 801d5ae:	e7e4      	b.n	801d57a <_vfprintf_r+0xc7a>
 801d5b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d5b2:	f006 030f 	and.w	r3, r6, #15
 801d5b6:	5cd3      	ldrb	r3, [r2, r3]
 801d5b8:	9a03      	ldr	r2, [sp, #12]
 801d5ba:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801d5be:	0933      	lsrs	r3, r6, #4
 801d5c0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801d5c4:	9203      	str	r2, [sp, #12]
 801d5c6:	093a      	lsrs	r2, r7, #4
 801d5c8:	461e      	mov	r6, r3
 801d5ca:	4617      	mov	r7, r2
 801d5cc:	ea56 0307 	orrs.w	r3, r6, r7
 801d5d0:	d1ee      	bne.n	801d5b0 <_vfprintf_r+0xcb0>
 801d5d2:	e7dc      	b.n	801d58e <_vfprintf_r+0xc8e>
 801d5d4:	b933      	cbnz	r3, 801d5e4 <_vfprintf_r+0xce4>
 801d5d6:	f01b 0f01 	tst.w	fp, #1
 801d5da:	d003      	beq.n	801d5e4 <_vfprintf_r+0xce4>
 801d5dc:	2330      	movs	r3, #48	; 0x30
 801d5de:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801d5e2:	e795      	b.n	801d510 <_vfprintf_r+0xc10>
 801d5e4:	ab4e      	add	r3, sp, #312	; 0x138
 801d5e6:	e3ba      	b.n	801dd5e <_vfprintf_r+0x145e>
 801d5e8:	9b07      	ldr	r3, [sp, #28]
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	f000 837d 	beq.w	801dcea <_vfprintf_r+0x13ea>
 801d5f0:	2000      	movs	r0, #0
 801d5f2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801d5f6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801d5fa:	9606      	str	r6, [sp, #24]
 801d5fc:	f7ff bb1e 	b.w	801cc3c <_vfprintf_r+0x33c>
 801d600:	9e04      	ldr	r6, [sp, #16]
 801d602:	e72c      	b.n	801d45e <_vfprintf_r+0xb5e>
 801d604:	2010      	movs	r0, #16
 801d606:	4402      	add	r2, r0
 801d608:	2b07      	cmp	r3, #7
 801d60a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801d60e:	6060      	str	r0, [r4, #4]
 801d610:	dd08      	ble.n	801d624 <_vfprintf_r+0xd24>
 801d612:	aa22      	add	r2, sp, #136	; 0x88
 801d614:	4649      	mov	r1, r9
 801d616:	4650      	mov	r0, sl
 801d618:	f003 fe73 	bl	8021302 <__sprint_r>
 801d61c:	2800      	cmp	r0, #0
 801d61e:	f040 8342 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d622:	a925      	add	r1, sp, #148	; 0x94
 801d624:	3f10      	subs	r7, #16
 801d626:	460c      	mov	r4, r1
 801d628:	e4f1      	b.n	801d00e <_vfprintf_r+0x70e>
 801d62a:	460c      	mov	r4, r1
 801d62c:	e50a      	b.n	801d044 <_vfprintf_r+0x744>
 801d62e:	aa22      	add	r2, sp, #136	; 0x88
 801d630:	4649      	mov	r1, r9
 801d632:	4650      	mov	r0, sl
 801d634:	f003 fe65 	bl	8021302 <__sprint_r>
 801d638:	2800      	cmp	r0, #0
 801d63a:	f040 8334 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d63e:	ac25      	add	r4, sp, #148	; 0x94
 801d640:	e512      	b.n	801d068 <_vfprintf_r+0x768>
 801d642:	aa22      	add	r2, sp, #136	; 0x88
 801d644:	4649      	mov	r1, r9
 801d646:	4650      	mov	r0, sl
 801d648:	f003 fe5b 	bl	8021302 <__sprint_r>
 801d64c:	2800      	cmp	r0, #0
 801d64e:	f040 832a 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d652:	ac25      	add	r4, sp, #148	; 0x94
 801d654:	e518      	b.n	801d088 <_vfprintf_r+0x788>
 801d656:	2010      	movs	r0, #16
 801d658:	4402      	add	r2, r0
 801d65a:	2b07      	cmp	r3, #7
 801d65c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801d660:	6060      	str	r0, [r4, #4]
 801d662:	dd08      	ble.n	801d676 <_vfprintf_r+0xd76>
 801d664:	aa22      	add	r2, sp, #136	; 0x88
 801d666:	4649      	mov	r1, r9
 801d668:	4650      	mov	r0, sl
 801d66a:	f003 fe4a 	bl	8021302 <__sprint_r>
 801d66e:	2800      	cmp	r0, #0
 801d670:	f040 8319 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d674:	a925      	add	r1, sp, #148	; 0x94
 801d676:	3f10      	subs	r7, #16
 801d678:	460c      	mov	r4, r1
 801d67a:	e50d      	b.n	801d098 <_vfprintf_r+0x798>
 801d67c:	460c      	mov	r4, r1
 801d67e:	e526      	b.n	801d0ce <_vfprintf_r+0x7ce>
 801d680:	2010      	movs	r0, #16
 801d682:	4402      	add	r2, r0
 801d684:	2b07      	cmp	r3, #7
 801d686:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801d68a:	6060      	str	r0, [r4, #4]
 801d68c:	dd08      	ble.n	801d6a0 <_vfprintf_r+0xda0>
 801d68e:	aa22      	add	r2, sp, #136	; 0x88
 801d690:	4649      	mov	r1, r9
 801d692:	4650      	mov	r0, sl
 801d694:	f003 fe35 	bl	8021302 <__sprint_r>
 801d698:	2800      	cmp	r0, #0
 801d69a:	f040 8304 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d69e:	a925      	add	r1, sp, #148	; 0x94
 801d6a0:	3e10      	subs	r6, #16
 801d6a2:	460c      	mov	r4, r1
 801d6a4:	e518      	b.n	801d0d8 <_vfprintf_r+0x7d8>
 801d6a6:	460c      	mov	r4, r1
 801d6a8:	e530      	b.n	801d10c <_vfprintf_r+0x80c>
 801d6aa:	bf00      	nop
 801d6ac:	08028f20 	.word	0x08028f20
 801d6b0:	08028f31 	.word	0x08028f31
 801d6b4:	9b07      	ldr	r3, [sp, #28]
 801d6b6:	2b65      	cmp	r3, #101	; 0x65
 801d6b8:	f340 8242 	ble.w	801db40 <_vfprintf_r+0x1240>
 801d6bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d6c0:	2200      	movs	r2, #0
 801d6c2:	2300      	movs	r3, #0
 801d6c4:	f7e3 fa30 	bl	8000b28 <__aeabi_dcmpeq>
 801d6c8:	2800      	cmp	r0, #0
 801d6ca:	d068      	beq.n	801d79e <_vfprintf_r+0xe9e>
 801d6cc:	4b6d      	ldr	r3, [pc, #436]	; (801d884 <_vfprintf_r+0xf84>)
 801d6ce:	6023      	str	r3, [r4, #0]
 801d6d0:	2301      	movs	r3, #1
 801d6d2:	441e      	add	r6, r3
 801d6d4:	6063      	str	r3, [r4, #4]
 801d6d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d6d8:	9624      	str	r6, [sp, #144]	; 0x90
 801d6da:	3301      	adds	r3, #1
 801d6dc:	2b07      	cmp	r3, #7
 801d6de:	9323      	str	r3, [sp, #140]	; 0x8c
 801d6e0:	dc37      	bgt.n	801d752 <_vfprintf_r+0xe52>
 801d6e2:	3408      	adds	r4, #8
 801d6e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d6e6:	9a05      	ldr	r2, [sp, #20]
 801d6e8:	4293      	cmp	r3, r2
 801d6ea:	db03      	blt.n	801d6f4 <_vfprintf_r+0xdf4>
 801d6ec:	f01b 0f01 	tst.w	fp, #1
 801d6f0:	f43f ad2b 	beq.w	801d14a <_vfprintf_r+0x84a>
 801d6f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d6f6:	6023      	str	r3, [r4, #0]
 801d6f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d6fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d6fc:	6063      	str	r3, [r4, #4]
 801d6fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d700:	4413      	add	r3, r2
 801d702:	9324      	str	r3, [sp, #144]	; 0x90
 801d704:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d706:	3301      	adds	r3, #1
 801d708:	2b07      	cmp	r3, #7
 801d70a:	9323      	str	r3, [sp, #140]	; 0x8c
 801d70c:	dc2b      	bgt.n	801d766 <_vfprintf_r+0xe66>
 801d70e:	3408      	adds	r4, #8
 801d710:	9b05      	ldr	r3, [sp, #20]
 801d712:	1e5d      	subs	r5, r3, #1
 801d714:	2d00      	cmp	r5, #0
 801d716:	f77f ad18 	ble.w	801d14a <_vfprintf_r+0x84a>
 801d71a:	4e5b      	ldr	r6, [pc, #364]	; (801d888 <_vfprintf_r+0xf88>)
 801d71c:	2710      	movs	r7, #16
 801d71e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d722:	2d10      	cmp	r5, #16
 801d724:	f103 0301 	add.w	r3, r3, #1
 801d728:	f104 0108 	add.w	r1, r4, #8
 801d72c:	6026      	str	r6, [r4, #0]
 801d72e:	dc24      	bgt.n	801d77a <_vfprintf_r+0xe7a>
 801d730:	6065      	str	r5, [r4, #4]
 801d732:	2b07      	cmp	r3, #7
 801d734:	4415      	add	r5, r2
 801d736:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801d73a:	f340 8293 	ble.w	801dc64 <_vfprintf_r+0x1364>
 801d73e:	aa22      	add	r2, sp, #136	; 0x88
 801d740:	4649      	mov	r1, r9
 801d742:	4650      	mov	r0, sl
 801d744:	f003 fddd 	bl	8021302 <__sprint_r>
 801d748:	2800      	cmp	r0, #0
 801d74a:	f040 82ac 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d74e:	ac25      	add	r4, sp, #148	; 0x94
 801d750:	e4fb      	b.n	801d14a <_vfprintf_r+0x84a>
 801d752:	aa22      	add	r2, sp, #136	; 0x88
 801d754:	4649      	mov	r1, r9
 801d756:	4650      	mov	r0, sl
 801d758:	f003 fdd3 	bl	8021302 <__sprint_r>
 801d75c:	2800      	cmp	r0, #0
 801d75e:	f040 82a2 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d762:	ac25      	add	r4, sp, #148	; 0x94
 801d764:	e7be      	b.n	801d6e4 <_vfprintf_r+0xde4>
 801d766:	aa22      	add	r2, sp, #136	; 0x88
 801d768:	4649      	mov	r1, r9
 801d76a:	4650      	mov	r0, sl
 801d76c:	f003 fdc9 	bl	8021302 <__sprint_r>
 801d770:	2800      	cmp	r0, #0
 801d772:	f040 8298 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d776:	ac25      	add	r4, sp, #148	; 0x94
 801d778:	e7ca      	b.n	801d710 <_vfprintf_r+0xe10>
 801d77a:	3210      	adds	r2, #16
 801d77c:	2b07      	cmp	r3, #7
 801d77e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801d782:	6067      	str	r7, [r4, #4]
 801d784:	dd08      	ble.n	801d798 <_vfprintf_r+0xe98>
 801d786:	aa22      	add	r2, sp, #136	; 0x88
 801d788:	4649      	mov	r1, r9
 801d78a:	4650      	mov	r0, sl
 801d78c:	f003 fdb9 	bl	8021302 <__sprint_r>
 801d790:	2800      	cmp	r0, #0
 801d792:	f040 8288 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d796:	a925      	add	r1, sp, #148	; 0x94
 801d798:	3d10      	subs	r5, #16
 801d79a:	460c      	mov	r4, r1
 801d79c:	e7bf      	b.n	801d71e <_vfprintf_r+0xe1e>
 801d79e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	dc73      	bgt.n	801d88c <_vfprintf_r+0xf8c>
 801d7a4:	4b37      	ldr	r3, [pc, #220]	; (801d884 <_vfprintf_r+0xf84>)
 801d7a6:	6023      	str	r3, [r4, #0]
 801d7a8:	2301      	movs	r3, #1
 801d7aa:	441e      	add	r6, r3
 801d7ac:	6063      	str	r3, [r4, #4]
 801d7ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d7b0:	9624      	str	r6, [sp, #144]	; 0x90
 801d7b2:	3301      	adds	r3, #1
 801d7b4:	2b07      	cmp	r3, #7
 801d7b6:	9323      	str	r3, [sp, #140]	; 0x8c
 801d7b8:	dc3d      	bgt.n	801d836 <_vfprintf_r+0xf36>
 801d7ba:	3408      	adds	r4, #8
 801d7bc:	9905      	ldr	r1, [sp, #20]
 801d7be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801d7c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d7c2:	430a      	orrs	r2, r1
 801d7c4:	f00b 0101 	and.w	r1, fp, #1
 801d7c8:	430a      	orrs	r2, r1
 801d7ca:	f43f acbe 	beq.w	801d14a <_vfprintf_r+0x84a>
 801d7ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d7d0:	6022      	str	r2, [r4, #0]
 801d7d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d7d4:	6062      	str	r2, [r4, #4]
 801d7d6:	4413      	add	r3, r2
 801d7d8:	9324      	str	r3, [sp, #144]	; 0x90
 801d7da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d7dc:	3301      	adds	r3, #1
 801d7de:	2b07      	cmp	r3, #7
 801d7e0:	9323      	str	r3, [sp, #140]	; 0x8c
 801d7e2:	dc32      	bgt.n	801d84a <_vfprintf_r+0xf4a>
 801d7e4:	3408      	adds	r4, #8
 801d7e6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801d7e8:	2d00      	cmp	r5, #0
 801d7ea:	da1b      	bge.n	801d824 <_vfprintf_r+0xf24>
 801d7ec:	4e26      	ldr	r6, [pc, #152]	; (801d888 <_vfprintf_r+0xf88>)
 801d7ee:	426d      	negs	r5, r5
 801d7f0:	4623      	mov	r3, r4
 801d7f2:	2710      	movs	r7, #16
 801d7f4:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801d7f8:	2d10      	cmp	r5, #16
 801d7fa:	f102 0201 	add.w	r2, r2, #1
 801d7fe:	f104 0408 	add.w	r4, r4, #8
 801d802:	601e      	str	r6, [r3, #0]
 801d804:	dc2b      	bgt.n	801d85e <_vfprintf_r+0xf5e>
 801d806:	605d      	str	r5, [r3, #4]
 801d808:	2a07      	cmp	r2, #7
 801d80a:	440d      	add	r5, r1
 801d80c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801d810:	dd08      	ble.n	801d824 <_vfprintf_r+0xf24>
 801d812:	aa22      	add	r2, sp, #136	; 0x88
 801d814:	4649      	mov	r1, r9
 801d816:	4650      	mov	r0, sl
 801d818:	f003 fd73 	bl	8021302 <__sprint_r>
 801d81c:	2800      	cmp	r0, #0
 801d81e:	f040 8242 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d822:	ac25      	add	r4, sp, #148	; 0x94
 801d824:	9b03      	ldr	r3, [sp, #12]
 801d826:	6023      	str	r3, [r4, #0]
 801d828:	9b05      	ldr	r3, [sp, #20]
 801d82a:	9a05      	ldr	r2, [sp, #20]
 801d82c:	6063      	str	r3, [r4, #4]
 801d82e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d830:	4413      	add	r3, r2
 801d832:	9324      	str	r3, [sp, #144]	; 0x90
 801d834:	e482      	b.n	801d13c <_vfprintf_r+0x83c>
 801d836:	aa22      	add	r2, sp, #136	; 0x88
 801d838:	4649      	mov	r1, r9
 801d83a:	4650      	mov	r0, sl
 801d83c:	f003 fd61 	bl	8021302 <__sprint_r>
 801d840:	2800      	cmp	r0, #0
 801d842:	f040 8230 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d846:	ac25      	add	r4, sp, #148	; 0x94
 801d848:	e7b8      	b.n	801d7bc <_vfprintf_r+0xebc>
 801d84a:	aa22      	add	r2, sp, #136	; 0x88
 801d84c:	4649      	mov	r1, r9
 801d84e:	4650      	mov	r0, sl
 801d850:	f003 fd57 	bl	8021302 <__sprint_r>
 801d854:	2800      	cmp	r0, #0
 801d856:	f040 8226 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d85a:	ac25      	add	r4, sp, #148	; 0x94
 801d85c:	e7c3      	b.n	801d7e6 <_vfprintf_r+0xee6>
 801d85e:	3110      	adds	r1, #16
 801d860:	2a07      	cmp	r2, #7
 801d862:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801d866:	605f      	str	r7, [r3, #4]
 801d868:	dd08      	ble.n	801d87c <_vfprintf_r+0xf7c>
 801d86a:	aa22      	add	r2, sp, #136	; 0x88
 801d86c:	4649      	mov	r1, r9
 801d86e:	4650      	mov	r0, sl
 801d870:	f003 fd47 	bl	8021302 <__sprint_r>
 801d874:	2800      	cmp	r0, #0
 801d876:	f040 8216 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d87a:	ac25      	add	r4, sp, #148	; 0x94
 801d87c:	3d10      	subs	r5, #16
 801d87e:	4623      	mov	r3, r4
 801d880:	e7b8      	b.n	801d7f4 <_vfprintf_r+0xef4>
 801d882:	bf00      	nop
 801d884:	08028f42 	.word	0x08028f42
 801d888:	08028fb0 	.word	0x08028fb0
 801d88c:	9b05      	ldr	r3, [sp, #20]
 801d88e:	42ab      	cmp	r3, r5
 801d890:	bfa8      	it	ge
 801d892:	462b      	movge	r3, r5
 801d894:	2b00      	cmp	r3, #0
 801d896:	461f      	mov	r7, r3
 801d898:	dd0b      	ble.n	801d8b2 <_vfprintf_r+0xfb2>
 801d89a:	9b03      	ldr	r3, [sp, #12]
 801d89c:	e9c4 3700 	strd	r3, r7, [r4]
 801d8a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d8a2:	3301      	adds	r3, #1
 801d8a4:	443e      	add	r6, r7
 801d8a6:	2b07      	cmp	r3, #7
 801d8a8:	9624      	str	r6, [sp, #144]	; 0x90
 801d8aa:	9323      	str	r3, [sp, #140]	; 0x8c
 801d8ac:	f300 808c 	bgt.w	801d9c8 <_vfprintf_r+0x10c8>
 801d8b0:	3408      	adds	r4, #8
 801d8b2:	2f00      	cmp	r7, #0
 801d8b4:	bfac      	ite	ge
 801d8b6:	1bee      	subge	r6, r5, r7
 801d8b8:	462e      	movlt	r6, r5
 801d8ba:	2e00      	cmp	r6, #0
 801d8bc:	dd1c      	ble.n	801d8f8 <_vfprintf_r+0xff8>
 801d8be:	4f9f      	ldr	r7, [pc, #636]	; (801db3c <_vfprintf_r+0x123c>)
 801d8c0:	f04f 0810 	mov.w	r8, #16
 801d8c4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d8c8:	2e10      	cmp	r6, #16
 801d8ca:	f103 0301 	add.w	r3, r3, #1
 801d8ce:	f104 0108 	add.w	r1, r4, #8
 801d8d2:	6027      	str	r7, [r4, #0]
 801d8d4:	f300 8082 	bgt.w	801d9dc <_vfprintf_r+0x10dc>
 801d8d8:	6066      	str	r6, [r4, #4]
 801d8da:	2b07      	cmp	r3, #7
 801d8dc:	4416      	add	r6, r2
 801d8de:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801d8e2:	f340 808e 	ble.w	801da02 <_vfprintf_r+0x1102>
 801d8e6:	aa22      	add	r2, sp, #136	; 0x88
 801d8e8:	4649      	mov	r1, r9
 801d8ea:	4650      	mov	r0, sl
 801d8ec:	f003 fd09 	bl	8021302 <__sprint_r>
 801d8f0:	2800      	cmp	r0, #0
 801d8f2:	f040 81d8 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d8f6:	ac25      	add	r4, sp, #148	; 0x94
 801d8f8:	9b03      	ldr	r3, [sp, #12]
 801d8fa:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801d8fe:	441d      	add	r5, r3
 801d900:	d00d      	beq.n	801d91e <_vfprintf_r+0x101e>
 801d902:	4e8e      	ldr	r6, [pc, #568]	; (801db3c <_vfprintf_r+0x123c>)
 801d904:	2710      	movs	r7, #16
 801d906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d17c      	bne.n	801da06 <_vfprintf_r+0x1106>
 801d90c:	9b08      	ldr	r3, [sp, #32]
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d17c      	bne.n	801da0c <_vfprintf_r+0x110c>
 801d912:	9b03      	ldr	r3, [sp, #12]
 801d914:	9a05      	ldr	r2, [sp, #20]
 801d916:	4413      	add	r3, r2
 801d918:	429d      	cmp	r5, r3
 801d91a:	bf28      	it	cs
 801d91c:	461d      	movcs	r5, r3
 801d91e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d920:	9a05      	ldr	r2, [sp, #20]
 801d922:	4293      	cmp	r3, r2
 801d924:	db02      	blt.n	801d92c <_vfprintf_r+0x102c>
 801d926:	f01b 0f01 	tst.w	fp, #1
 801d92a:	d00e      	beq.n	801d94a <_vfprintf_r+0x104a>
 801d92c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d92e:	6023      	str	r3, [r4, #0]
 801d930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d934:	6063      	str	r3, [r4, #4]
 801d936:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d938:	4413      	add	r3, r2
 801d93a:	9324      	str	r3, [sp, #144]	; 0x90
 801d93c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d93e:	3301      	adds	r3, #1
 801d940:	2b07      	cmp	r3, #7
 801d942:	9323      	str	r3, [sp, #140]	; 0x8c
 801d944:	f300 80e5 	bgt.w	801db12 <_vfprintf_r+0x1212>
 801d948:	3408      	adds	r4, #8
 801d94a:	9905      	ldr	r1, [sp, #20]
 801d94c:	9b03      	ldr	r3, [sp, #12]
 801d94e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801d950:	440b      	add	r3, r1
 801d952:	1b8e      	subs	r6, r1, r6
 801d954:	1b5a      	subs	r2, r3, r5
 801d956:	4296      	cmp	r6, r2
 801d958:	bfa8      	it	ge
 801d95a:	4616      	movge	r6, r2
 801d95c:	2e00      	cmp	r6, #0
 801d95e:	dd0b      	ble.n	801d978 <_vfprintf_r+0x1078>
 801d960:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d962:	4433      	add	r3, r6
 801d964:	9324      	str	r3, [sp, #144]	; 0x90
 801d966:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d968:	3301      	adds	r3, #1
 801d96a:	2b07      	cmp	r3, #7
 801d96c:	e9c4 5600 	strd	r5, r6, [r4]
 801d970:	9323      	str	r3, [sp, #140]	; 0x8c
 801d972:	f300 80d8 	bgt.w	801db26 <_vfprintf_r+0x1226>
 801d976:	3408      	adds	r4, #8
 801d978:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801d97a:	9b05      	ldr	r3, [sp, #20]
 801d97c:	2e00      	cmp	r6, #0
 801d97e:	eba3 0505 	sub.w	r5, r3, r5
 801d982:	bfa8      	it	ge
 801d984:	1bad      	subge	r5, r5, r6
 801d986:	2d00      	cmp	r5, #0
 801d988:	f77f abdf 	ble.w	801d14a <_vfprintf_r+0x84a>
 801d98c:	4e6b      	ldr	r6, [pc, #428]	; (801db3c <_vfprintf_r+0x123c>)
 801d98e:	2710      	movs	r7, #16
 801d990:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d994:	2d10      	cmp	r5, #16
 801d996:	f103 0301 	add.w	r3, r3, #1
 801d99a:	f104 0108 	add.w	r1, r4, #8
 801d99e:	6026      	str	r6, [r4, #0]
 801d9a0:	f77f aec6 	ble.w	801d730 <_vfprintf_r+0xe30>
 801d9a4:	3210      	adds	r2, #16
 801d9a6:	2b07      	cmp	r3, #7
 801d9a8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801d9ac:	6067      	str	r7, [r4, #4]
 801d9ae:	dd08      	ble.n	801d9c2 <_vfprintf_r+0x10c2>
 801d9b0:	aa22      	add	r2, sp, #136	; 0x88
 801d9b2:	4649      	mov	r1, r9
 801d9b4:	4650      	mov	r0, sl
 801d9b6:	f003 fca4 	bl	8021302 <__sprint_r>
 801d9ba:	2800      	cmp	r0, #0
 801d9bc:	f040 8173 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d9c0:	a925      	add	r1, sp, #148	; 0x94
 801d9c2:	3d10      	subs	r5, #16
 801d9c4:	460c      	mov	r4, r1
 801d9c6:	e7e3      	b.n	801d990 <_vfprintf_r+0x1090>
 801d9c8:	aa22      	add	r2, sp, #136	; 0x88
 801d9ca:	4649      	mov	r1, r9
 801d9cc:	4650      	mov	r0, sl
 801d9ce:	f003 fc98 	bl	8021302 <__sprint_r>
 801d9d2:	2800      	cmp	r0, #0
 801d9d4:	f040 8167 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d9d8:	ac25      	add	r4, sp, #148	; 0x94
 801d9da:	e76a      	b.n	801d8b2 <_vfprintf_r+0xfb2>
 801d9dc:	3210      	adds	r2, #16
 801d9de:	2b07      	cmp	r3, #7
 801d9e0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801d9e4:	f8c4 8004 	str.w	r8, [r4, #4]
 801d9e8:	dd08      	ble.n	801d9fc <_vfprintf_r+0x10fc>
 801d9ea:	aa22      	add	r2, sp, #136	; 0x88
 801d9ec:	4649      	mov	r1, r9
 801d9ee:	4650      	mov	r0, sl
 801d9f0:	f003 fc87 	bl	8021302 <__sprint_r>
 801d9f4:	2800      	cmp	r0, #0
 801d9f6:	f040 8156 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801d9fa:	a925      	add	r1, sp, #148	; 0x94
 801d9fc:	3e10      	subs	r6, #16
 801d9fe:	460c      	mov	r4, r1
 801da00:	e760      	b.n	801d8c4 <_vfprintf_r+0xfc4>
 801da02:	460c      	mov	r4, r1
 801da04:	e778      	b.n	801d8f8 <_vfprintf_r+0xff8>
 801da06:	9b08      	ldr	r3, [sp, #32]
 801da08:	2b00      	cmp	r3, #0
 801da0a:	d052      	beq.n	801dab2 <_vfprintf_r+0x11b2>
 801da0c:	9b08      	ldr	r3, [sp, #32]
 801da0e:	3b01      	subs	r3, #1
 801da10:	9308      	str	r3, [sp, #32]
 801da12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801da14:	6023      	str	r3, [r4, #0]
 801da16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801da18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801da1a:	6063      	str	r3, [r4, #4]
 801da1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801da1e:	4413      	add	r3, r2
 801da20:	9324      	str	r3, [sp, #144]	; 0x90
 801da22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801da24:	3301      	adds	r3, #1
 801da26:	2b07      	cmp	r3, #7
 801da28:	9323      	str	r3, [sp, #140]	; 0x8c
 801da2a:	dc49      	bgt.n	801dac0 <_vfprintf_r+0x11c0>
 801da2c:	3408      	adds	r4, #8
 801da2e:	9b03      	ldr	r3, [sp, #12]
 801da30:	9a05      	ldr	r2, [sp, #20]
 801da32:	eb03 0802 	add.w	r8, r3, r2
 801da36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da38:	781b      	ldrb	r3, [r3, #0]
 801da3a:	eba8 0805 	sub.w	r8, r8, r5
 801da3e:	4598      	cmp	r8, r3
 801da40:	bfa8      	it	ge
 801da42:	4698      	movge	r8, r3
 801da44:	f1b8 0f00 	cmp.w	r8, #0
 801da48:	dd0a      	ble.n	801da60 <_vfprintf_r+0x1160>
 801da4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801da4c:	4443      	add	r3, r8
 801da4e:	9324      	str	r3, [sp, #144]	; 0x90
 801da50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801da52:	3301      	adds	r3, #1
 801da54:	2b07      	cmp	r3, #7
 801da56:	e9c4 5800 	strd	r5, r8, [r4]
 801da5a:	9323      	str	r3, [sp, #140]	; 0x8c
 801da5c:	dc3a      	bgt.n	801dad4 <_vfprintf_r+0x11d4>
 801da5e:	3408      	adds	r4, #8
 801da60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da62:	781b      	ldrb	r3, [r3, #0]
 801da64:	f1b8 0f00 	cmp.w	r8, #0
 801da68:	bfac      	ite	ge
 801da6a:	eba3 0808 	subge.w	r8, r3, r8
 801da6e:	4698      	movlt	r8, r3
 801da70:	f1b8 0f00 	cmp.w	r8, #0
 801da74:	dd19      	ble.n	801daaa <_vfprintf_r+0x11aa>
 801da76:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801da7a:	f1b8 0f10 	cmp.w	r8, #16
 801da7e:	f102 0201 	add.w	r2, r2, #1
 801da82:	f104 0108 	add.w	r1, r4, #8
 801da86:	6026      	str	r6, [r4, #0]
 801da88:	dc2e      	bgt.n	801dae8 <_vfprintf_r+0x11e8>
 801da8a:	4443      	add	r3, r8
 801da8c:	2a07      	cmp	r2, #7
 801da8e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801da92:	f8c4 8004 	str.w	r8, [r4, #4]
 801da96:	dd3a      	ble.n	801db0e <_vfprintf_r+0x120e>
 801da98:	aa22      	add	r2, sp, #136	; 0x88
 801da9a:	4649      	mov	r1, r9
 801da9c:	4650      	mov	r0, sl
 801da9e:	f003 fc30 	bl	8021302 <__sprint_r>
 801daa2:	2800      	cmp	r0, #0
 801daa4:	f040 80ff 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801daa8:	ac25      	add	r4, sp, #148	; 0x94
 801daaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801daac:	781b      	ldrb	r3, [r3, #0]
 801daae:	441d      	add	r5, r3
 801dab0:	e729      	b.n	801d906 <_vfprintf_r+0x1006>
 801dab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dab4:	3b01      	subs	r3, #1
 801dab6:	930a      	str	r3, [sp, #40]	; 0x28
 801dab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801daba:	3b01      	subs	r3, #1
 801dabc:	9309      	str	r3, [sp, #36]	; 0x24
 801dabe:	e7a8      	b.n	801da12 <_vfprintf_r+0x1112>
 801dac0:	aa22      	add	r2, sp, #136	; 0x88
 801dac2:	4649      	mov	r1, r9
 801dac4:	4650      	mov	r0, sl
 801dac6:	f003 fc1c 	bl	8021302 <__sprint_r>
 801daca:	2800      	cmp	r0, #0
 801dacc:	f040 80eb 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801dad0:	ac25      	add	r4, sp, #148	; 0x94
 801dad2:	e7ac      	b.n	801da2e <_vfprintf_r+0x112e>
 801dad4:	aa22      	add	r2, sp, #136	; 0x88
 801dad6:	4649      	mov	r1, r9
 801dad8:	4650      	mov	r0, sl
 801dada:	f003 fc12 	bl	8021302 <__sprint_r>
 801dade:	2800      	cmp	r0, #0
 801dae0:	f040 80e1 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801dae4:	ac25      	add	r4, sp, #148	; 0x94
 801dae6:	e7bb      	b.n	801da60 <_vfprintf_r+0x1160>
 801dae8:	3310      	adds	r3, #16
 801daea:	2a07      	cmp	r2, #7
 801daec:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801daf0:	6067      	str	r7, [r4, #4]
 801daf2:	dd08      	ble.n	801db06 <_vfprintf_r+0x1206>
 801daf4:	aa22      	add	r2, sp, #136	; 0x88
 801daf6:	4649      	mov	r1, r9
 801daf8:	4650      	mov	r0, sl
 801dafa:	f003 fc02 	bl	8021302 <__sprint_r>
 801dafe:	2800      	cmp	r0, #0
 801db00:	f040 80d1 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801db04:	a925      	add	r1, sp, #148	; 0x94
 801db06:	f1a8 0810 	sub.w	r8, r8, #16
 801db0a:	460c      	mov	r4, r1
 801db0c:	e7b3      	b.n	801da76 <_vfprintf_r+0x1176>
 801db0e:	460c      	mov	r4, r1
 801db10:	e7cb      	b.n	801daaa <_vfprintf_r+0x11aa>
 801db12:	aa22      	add	r2, sp, #136	; 0x88
 801db14:	4649      	mov	r1, r9
 801db16:	4650      	mov	r0, sl
 801db18:	f003 fbf3 	bl	8021302 <__sprint_r>
 801db1c:	2800      	cmp	r0, #0
 801db1e:	f040 80c2 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801db22:	ac25      	add	r4, sp, #148	; 0x94
 801db24:	e711      	b.n	801d94a <_vfprintf_r+0x104a>
 801db26:	aa22      	add	r2, sp, #136	; 0x88
 801db28:	4649      	mov	r1, r9
 801db2a:	4650      	mov	r0, sl
 801db2c:	f003 fbe9 	bl	8021302 <__sprint_r>
 801db30:	2800      	cmp	r0, #0
 801db32:	f040 80b8 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801db36:	ac25      	add	r4, sp, #148	; 0x94
 801db38:	e71e      	b.n	801d978 <_vfprintf_r+0x1078>
 801db3a:	bf00      	nop
 801db3c:	08028fb0 	.word	0x08028fb0
 801db40:	9a05      	ldr	r2, [sp, #20]
 801db42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801db44:	2a01      	cmp	r2, #1
 801db46:	9a03      	ldr	r2, [sp, #12]
 801db48:	6022      	str	r2, [r4, #0]
 801db4a:	f106 0601 	add.w	r6, r6, #1
 801db4e:	f103 0301 	add.w	r3, r3, #1
 801db52:	f04f 0201 	mov.w	r2, #1
 801db56:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801db5a:	f104 0508 	add.w	r5, r4, #8
 801db5e:	6062      	str	r2, [r4, #4]
 801db60:	dc02      	bgt.n	801db68 <_vfprintf_r+0x1268>
 801db62:	f01b 0f01 	tst.w	fp, #1
 801db66:	d078      	beq.n	801dc5a <_vfprintf_r+0x135a>
 801db68:	2b07      	cmp	r3, #7
 801db6a:	dd08      	ble.n	801db7e <_vfprintf_r+0x127e>
 801db6c:	aa22      	add	r2, sp, #136	; 0x88
 801db6e:	4649      	mov	r1, r9
 801db70:	4650      	mov	r0, sl
 801db72:	f003 fbc6 	bl	8021302 <__sprint_r>
 801db76:	2800      	cmp	r0, #0
 801db78:	f040 8095 	bne.w	801dca6 <_vfprintf_r+0x13a6>
 801db7c:	ad25      	add	r5, sp, #148	; 0x94
 801db7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db80:	602b      	str	r3, [r5, #0]
 801db82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801db86:	606b      	str	r3, [r5, #4]
 801db88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801db8a:	4413      	add	r3, r2
 801db8c:	9324      	str	r3, [sp, #144]	; 0x90
 801db8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801db90:	3301      	adds	r3, #1
 801db92:	2b07      	cmp	r3, #7
 801db94:	9323      	str	r3, [sp, #140]	; 0x8c
 801db96:	dc32      	bgt.n	801dbfe <_vfprintf_r+0x12fe>
 801db98:	3508      	adds	r5, #8
 801db9a:	9b05      	ldr	r3, [sp, #20]
 801db9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801dba0:	1e5c      	subs	r4, r3, #1
 801dba2:	2200      	movs	r2, #0
 801dba4:	2300      	movs	r3, #0
 801dba6:	f7e2 ffbf 	bl	8000b28 <__aeabi_dcmpeq>
 801dbaa:	2800      	cmp	r0, #0
 801dbac:	d130      	bne.n	801dc10 <_vfprintf_r+0x1310>
 801dbae:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801dbb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dbb2:	9803      	ldr	r0, [sp, #12]
 801dbb4:	9a05      	ldr	r2, [sp, #20]
 801dbb6:	3101      	adds	r1, #1
 801dbb8:	3b01      	subs	r3, #1
 801dbba:	3001      	adds	r0, #1
 801dbbc:	4413      	add	r3, r2
 801dbbe:	2907      	cmp	r1, #7
 801dbc0:	e9c5 0400 	strd	r0, r4, [r5]
 801dbc4:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801dbc8:	dd4a      	ble.n	801dc60 <_vfprintf_r+0x1360>
 801dbca:	aa22      	add	r2, sp, #136	; 0x88
 801dbcc:	4649      	mov	r1, r9
 801dbce:	4650      	mov	r0, sl
 801dbd0:	f003 fb97 	bl	8021302 <__sprint_r>
 801dbd4:	2800      	cmp	r0, #0
 801dbd6:	d166      	bne.n	801dca6 <_vfprintf_r+0x13a6>
 801dbd8:	ad25      	add	r5, sp, #148	; 0x94
 801dbda:	ab1e      	add	r3, sp, #120	; 0x78
 801dbdc:	602b      	str	r3, [r5, #0]
 801dbde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dbe0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dbe2:	606b      	str	r3, [r5, #4]
 801dbe4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dbe6:	4413      	add	r3, r2
 801dbe8:	9324      	str	r3, [sp, #144]	; 0x90
 801dbea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801dbec:	3301      	adds	r3, #1
 801dbee:	2b07      	cmp	r3, #7
 801dbf0:	9323      	str	r3, [sp, #140]	; 0x8c
 801dbf2:	f73f ada4 	bgt.w	801d73e <_vfprintf_r+0xe3e>
 801dbf6:	f105 0408 	add.w	r4, r5, #8
 801dbfa:	f7ff baa6 	b.w	801d14a <_vfprintf_r+0x84a>
 801dbfe:	aa22      	add	r2, sp, #136	; 0x88
 801dc00:	4649      	mov	r1, r9
 801dc02:	4650      	mov	r0, sl
 801dc04:	f003 fb7d 	bl	8021302 <__sprint_r>
 801dc08:	2800      	cmp	r0, #0
 801dc0a:	d14c      	bne.n	801dca6 <_vfprintf_r+0x13a6>
 801dc0c:	ad25      	add	r5, sp, #148	; 0x94
 801dc0e:	e7c4      	b.n	801db9a <_vfprintf_r+0x129a>
 801dc10:	2c00      	cmp	r4, #0
 801dc12:	dde2      	ble.n	801dbda <_vfprintf_r+0x12da>
 801dc14:	4e53      	ldr	r6, [pc, #332]	; (801dd64 <_vfprintf_r+0x1464>)
 801dc16:	2710      	movs	r7, #16
 801dc18:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801dc1c:	2c10      	cmp	r4, #16
 801dc1e:	f103 0301 	add.w	r3, r3, #1
 801dc22:	f105 0108 	add.w	r1, r5, #8
 801dc26:	602e      	str	r6, [r5, #0]
 801dc28:	dc07      	bgt.n	801dc3a <_vfprintf_r+0x133a>
 801dc2a:	606c      	str	r4, [r5, #4]
 801dc2c:	2b07      	cmp	r3, #7
 801dc2e:	4414      	add	r4, r2
 801dc30:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801dc34:	dcc9      	bgt.n	801dbca <_vfprintf_r+0x12ca>
 801dc36:	460d      	mov	r5, r1
 801dc38:	e7cf      	b.n	801dbda <_vfprintf_r+0x12da>
 801dc3a:	3210      	adds	r2, #16
 801dc3c:	2b07      	cmp	r3, #7
 801dc3e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801dc42:	606f      	str	r7, [r5, #4]
 801dc44:	dd06      	ble.n	801dc54 <_vfprintf_r+0x1354>
 801dc46:	aa22      	add	r2, sp, #136	; 0x88
 801dc48:	4649      	mov	r1, r9
 801dc4a:	4650      	mov	r0, sl
 801dc4c:	f003 fb59 	bl	8021302 <__sprint_r>
 801dc50:	bb48      	cbnz	r0, 801dca6 <_vfprintf_r+0x13a6>
 801dc52:	a925      	add	r1, sp, #148	; 0x94
 801dc54:	3c10      	subs	r4, #16
 801dc56:	460d      	mov	r5, r1
 801dc58:	e7de      	b.n	801dc18 <_vfprintf_r+0x1318>
 801dc5a:	2b07      	cmp	r3, #7
 801dc5c:	ddbd      	ble.n	801dbda <_vfprintf_r+0x12da>
 801dc5e:	e7b4      	b.n	801dbca <_vfprintf_r+0x12ca>
 801dc60:	3508      	adds	r5, #8
 801dc62:	e7ba      	b.n	801dbda <_vfprintf_r+0x12da>
 801dc64:	460c      	mov	r4, r1
 801dc66:	f7ff ba70 	b.w	801d14a <_vfprintf_r+0x84a>
 801dc6a:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801dc6e:	1a9d      	subs	r5, r3, r2
 801dc70:	2d00      	cmp	r5, #0
 801dc72:	f77f aa6e 	ble.w	801d152 <_vfprintf_r+0x852>
 801dc76:	4e3c      	ldr	r6, [pc, #240]	; (801dd68 <_vfprintf_r+0x1468>)
 801dc78:	2710      	movs	r7, #16
 801dc7a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801dc7e:	2d10      	cmp	r5, #16
 801dc80:	f103 0301 	add.w	r3, r3, #1
 801dc84:	6026      	str	r6, [r4, #0]
 801dc86:	dc18      	bgt.n	801dcba <_vfprintf_r+0x13ba>
 801dc88:	6065      	str	r5, [r4, #4]
 801dc8a:	2b07      	cmp	r3, #7
 801dc8c:	4415      	add	r5, r2
 801dc8e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801dc92:	f77f aa5e 	ble.w	801d152 <_vfprintf_r+0x852>
 801dc96:	aa22      	add	r2, sp, #136	; 0x88
 801dc98:	4649      	mov	r1, r9
 801dc9a:	4650      	mov	r0, sl
 801dc9c:	f003 fb31 	bl	8021302 <__sprint_r>
 801dca0:	2800      	cmp	r0, #0
 801dca2:	f43f aa56 	beq.w	801d152 <_vfprintf_r+0x852>
 801dca6:	9b04      	ldr	r3, [sp, #16]
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	f43f a872 	beq.w	801cd92 <_vfprintf_r+0x492>
 801dcae:	4619      	mov	r1, r3
 801dcb0:	4650      	mov	r0, sl
 801dcb2:	f001 f909 	bl	801eec8 <_free_r>
 801dcb6:	f7ff b86c 	b.w	801cd92 <_vfprintf_r+0x492>
 801dcba:	3210      	adds	r2, #16
 801dcbc:	2b07      	cmp	r3, #7
 801dcbe:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801dcc2:	6067      	str	r7, [r4, #4]
 801dcc4:	dc02      	bgt.n	801dccc <_vfprintf_r+0x13cc>
 801dcc6:	3408      	adds	r4, #8
 801dcc8:	3d10      	subs	r5, #16
 801dcca:	e7d6      	b.n	801dc7a <_vfprintf_r+0x137a>
 801dccc:	aa22      	add	r2, sp, #136	; 0x88
 801dcce:	4649      	mov	r1, r9
 801dcd0:	4650      	mov	r0, sl
 801dcd2:	f003 fb16 	bl	8021302 <__sprint_r>
 801dcd6:	2800      	cmp	r0, #0
 801dcd8:	d1e5      	bne.n	801dca6 <_vfprintf_r+0x13a6>
 801dcda:	ac25      	add	r4, sp, #148	; 0x94
 801dcdc:	e7f4      	b.n	801dcc8 <_vfprintf_r+0x13c8>
 801dcde:	9904      	ldr	r1, [sp, #16]
 801dce0:	4650      	mov	r0, sl
 801dce2:	f001 f8f1 	bl	801eec8 <_free_r>
 801dce6:	f7ff ba4c 	b.w	801d182 <_vfprintf_r+0x882>
 801dcea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dcec:	b91b      	cbnz	r3, 801dcf6 <_vfprintf_r+0x13f6>
 801dcee:	2300      	movs	r3, #0
 801dcf0:	9323      	str	r3, [sp, #140]	; 0x8c
 801dcf2:	f7ff b84e 	b.w	801cd92 <_vfprintf_r+0x492>
 801dcf6:	aa22      	add	r2, sp, #136	; 0x88
 801dcf8:	4649      	mov	r1, r9
 801dcfa:	4650      	mov	r0, sl
 801dcfc:	f003 fb01 	bl	8021302 <__sprint_r>
 801dd00:	2800      	cmp	r0, #0
 801dd02:	d0f4      	beq.n	801dcee <_vfprintf_r+0x13ee>
 801dd04:	f7ff b845 	b.w	801cd92 <_vfprintf_r+0x492>
 801dd08:	ea56 0207 	orrs.w	r2, r6, r7
 801dd0c:	f8cd b010 	str.w	fp, [sp, #16]
 801dd10:	f43f ab5c 	beq.w	801d3cc <_vfprintf_r+0xacc>
 801dd14:	2b01      	cmp	r3, #1
 801dd16:	f43f abf4 	beq.w	801d502 <_vfprintf_r+0xc02>
 801dd1a:	2b02      	cmp	r3, #2
 801dd1c:	ab4e      	add	r3, sp, #312	; 0x138
 801dd1e:	9303      	str	r3, [sp, #12]
 801dd20:	f43f ac46 	beq.w	801d5b0 <_vfprintf_r+0xcb0>
 801dd24:	9903      	ldr	r1, [sp, #12]
 801dd26:	f006 0307 	and.w	r3, r6, #7
 801dd2a:	460a      	mov	r2, r1
 801dd2c:	3330      	adds	r3, #48	; 0x30
 801dd2e:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801dd32:	9203      	str	r2, [sp, #12]
 801dd34:	08f2      	lsrs	r2, r6, #3
 801dd36:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801dd3a:	08f8      	lsrs	r0, r7, #3
 801dd3c:	4616      	mov	r6, r2
 801dd3e:	4607      	mov	r7, r0
 801dd40:	ea56 0207 	orrs.w	r2, r6, r7
 801dd44:	d1ee      	bne.n	801dd24 <_vfprintf_r+0x1424>
 801dd46:	9a04      	ldr	r2, [sp, #16]
 801dd48:	07d0      	lsls	r0, r2, #31
 801dd4a:	f57f ac20 	bpl.w	801d58e <_vfprintf_r+0xc8e>
 801dd4e:	2b30      	cmp	r3, #48	; 0x30
 801dd50:	f43f ac1d 	beq.w	801d58e <_vfprintf_r+0xc8e>
 801dd54:	9a03      	ldr	r2, [sp, #12]
 801dd56:	2330      	movs	r3, #48	; 0x30
 801dd58:	f802 3c01 	strb.w	r3, [r2, #-1]
 801dd5c:	1e8b      	subs	r3, r1, #2
 801dd5e:	9303      	str	r3, [sp, #12]
 801dd60:	e415      	b.n	801d58e <_vfprintf_r+0xc8e>
 801dd62:	bf00      	nop
 801dd64:	08028fb0 	.word	0x08028fb0
 801dd68:	08028fa0 	.word	0x08028fa0

0801dd6c <__sbprintf>:
 801dd6c:	b570      	push	{r4, r5, r6, lr}
 801dd6e:	460c      	mov	r4, r1
 801dd70:	8989      	ldrh	r1, [r1, #12]
 801dd72:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801dd76:	f021 0102 	bic.w	r1, r1, #2
 801dd7a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801dd7e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801dd80:	911b      	str	r1, [sp, #108]	; 0x6c
 801dd82:	89e1      	ldrh	r1, [r4, #14]
 801dd84:	f8ad 1016 	strh.w	r1, [sp, #22]
 801dd88:	69e1      	ldr	r1, [r4, #28]
 801dd8a:	9109      	str	r1, [sp, #36]	; 0x24
 801dd8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801dd8e:	910b      	str	r1, [sp, #44]	; 0x2c
 801dd90:	a91c      	add	r1, sp, #112	; 0x70
 801dd92:	9102      	str	r1, [sp, #8]
 801dd94:	9106      	str	r1, [sp, #24]
 801dd96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801dd9a:	4606      	mov	r6, r0
 801dd9c:	9104      	str	r1, [sp, #16]
 801dd9e:	9107      	str	r1, [sp, #28]
 801dda0:	a818      	add	r0, sp, #96	; 0x60
 801dda2:	2100      	movs	r1, #0
 801dda4:	e9cd 3200 	strd	r3, r2, [sp]
 801dda8:	9108      	str	r1, [sp, #32]
 801ddaa:	f001 fa67 	bl	801f27c <__retarget_lock_init_recursive>
 801ddae:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ddb2:	a902      	add	r1, sp, #8
 801ddb4:	4630      	mov	r0, r6
 801ddb6:	f7fe fda3 	bl	801c900 <_vfprintf_r>
 801ddba:	1e05      	subs	r5, r0, #0
 801ddbc:	db07      	blt.n	801ddce <__sbprintf+0x62>
 801ddbe:	a902      	add	r1, sp, #8
 801ddc0:	4630      	mov	r0, r6
 801ddc2:	f000 ff85 	bl	801ecd0 <_fflush_r>
 801ddc6:	2800      	cmp	r0, #0
 801ddc8:	bf18      	it	ne
 801ddca:	f04f 35ff 	movne.w	r5, #4294967295
 801ddce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801ddd2:	9818      	ldr	r0, [sp, #96]	; 0x60
 801ddd4:	065b      	lsls	r3, r3, #25
 801ddd6:	bf42      	ittt	mi
 801ddd8:	89a3      	ldrhmi	r3, [r4, #12]
 801ddda:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801ddde:	81a3      	strhmi	r3, [r4, #12]
 801dde0:	f001 fa4d 	bl	801f27e <__retarget_lock_close_recursive>
 801dde4:	4628      	mov	r0, r5
 801dde6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801ddea:	bd70      	pop	{r4, r5, r6, pc}

0801ddec <__swsetup_r>:
 801ddec:	b538      	push	{r3, r4, r5, lr}
 801ddee:	4b2a      	ldr	r3, [pc, #168]	; (801de98 <__swsetup_r+0xac>)
 801ddf0:	4605      	mov	r5, r0
 801ddf2:	6818      	ldr	r0, [r3, #0]
 801ddf4:	460c      	mov	r4, r1
 801ddf6:	b118      	cbz	r0, 801de00 <__swsetup_r+0x14>
 801ddf8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801ddfa:	b90b      	cbnz	r3, 801de00 <__swsetup_r+0x14>
 801ddfc:	f000 ffd4 	bl	801eda8 <__sinit>
 801de00:	89a3      	ldrh	r3, [r4, #12]
 801de02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801de06:	0718      	lsls	r0, r3, #28
 801de08:	d422      	bmi.n	801de50 <__swsetup_r+0x64>
 801de0a:	06d9      	lsls	r1, r3, #27
 801de0c:	d407      	bmi.n	801de1e <__swsetup_r+0x32>
 801de0e:	2309      	movs	r3, #9
 801de10:	602b      	str	r3, [r5, #0]
 801de12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801de16:	81a3      	strh	r3, [r4, #12]
 801de18:	f04f 30ff 	mov.w	r0, #4294967295
 801de1c:	e034      	b.n	801de88 <__swsetup_r+0x9c>
 801de1e:	0758      	lsls	r0, r3, #29
 801de20:	d512      	bpl.n	801de48 <__swsetup_r+0x5c>
 801de22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801de24:	b141      	cbz	r1, 801de38 <__swsetup_r+0x4c>
 801de26:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801de2a:	4299      	cmp	r1, r3
 801de2c:	d002      	beq.n	801de34 <__swsetup_r+0x48>
 801de2e:	4628      	mov	r0, r5
 801de30:	f001 f84a 	bl	801eec8 <_free_r>
 801de34:	2300      	movs	r3, #0
 801de36:	6323      	str	r3, [r4, #48]	; 0x30
 801de38:	89a3      	ldrh	r3, [r4, #12]
 801de3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801de3e:	81a3      	strh	r3, [r4, #12]
 801de40:	2300      	movs	r3, #0
 801de42:	6063      	str	r3, [r4, #4]
 801de44:	6923      	ldr	r3, [r4, #16]
 801de46:	6023      	str	r3, [r4, #0]
 801de48:	89a3      	ldrh	r3, [r4, #12]
 801de4a:	f043 0308 	orr.w	r3, r3, #8
 801de4e:	81a3      	strh	r3, [r4, #12]
 801de50:	6923      	ldr	r3, [r4, #16]
 801de52:	b94b      	cbnz	r3, 801de68 <__swsetup_r+0x7c>
 801de54:	89a3      	ldrh	r3, [r4, #12]
 801de56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801de5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801de5e:	d003      	beq.n	801de68 <__swsetup_r+0x7c>
 801de60:	4621      	mov	r1, r4
 801de62:	4628      	mov	r0, r5
 801de64:	f001 fa3c 	bl	801f2e0 <__smakebuf_r>
 801de68:	89a0      	ldrh	r0, [r4, #12]
 801de6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801de6e:	f010 0301 	ands.w	r3, r0, #1
 801de72:	d00a      	beq.n	801de8a <__swsetup_r+0x9e>
 801de74:	2300      	movs	r3, #0
 801de76:	60a3      	str	r3, [r4, #8]
 801de78:	6963      	ldr	r3, [r4, #20]
 801de7a:	425b      	negs	r3, r3
 801de7c:	61a3      	str	r3, [r4, #24]
 801de7e:	6923      	ldr	r3, [r4, #16]
 801de80:	b943      	cbnz	r3, 801de94 <__swsetup_r+0xa8>
 801de82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801de86:	d1c4      	bne.n	801de12 <__swsetup_r+0x26>
 801de88:	bd38      	pop	{r3, r4, r5, pc}
 801de8a:	0781      	lsls	r1, r0, #30
 801de8c:	bf58      	it	pl
 801de8e:	6963      	ldrpl	r3, [r4, #20]
 801de90:	60a3      	str	r3, [r4, #8]
 801de92:	e7f4      	b.n	801de7e <__swsetup_r+0x92>
 801de94:	2000      	movs	r0, #0
 801de96:	e7f7      	b.n	801de88 <__swsetup_r+0x9c>
 801de98:	20000038 	.word	0x20000038

0801de9c <register_fini>:
 801de9c:	4b02      	ldr	r3, [pc, #8]	; (801dea8 <register_fini+0xc>)
 801de9e:	b113      	cbz	r3, 801dea6 <register_fini+0xa>
 801dea0:	4802      	ldr	r0, [pc, #8]	; (801deac <register_fini+0x10>)
 801dea2:	f000 b805 	b.w	801deb0 <atexit>
 801dea6:	4770      	bx	lr
 801dea8:	00000000 	.word	0x00000000
 801deac:	0801edf9 	.word	0x0801edf9

0801deb0 <atexit>:
 801deb0:	2300      	movs	r3, #0
 801deb2:	4601      	mov	r1, r0
 801deb4:	461a      	mov	r2, r3
 801deb6:	4618      	mov	r0, r3
 801deb8:	f003 bf30 	b.w	8021d1c <__register_exitproc>

0801debc <div>:
 801debc:	2900      	cmp	r1, #0
 801debe:	b510      	push	{r4, lr}
 801dec0:	fb91 f4f2 	sdiv	r4, r1, r2
 801dec4:	fb02 1314 	mls	r3, r2, r4, r1
 801dec8:	db06      	blt.n	801ded8 <div+0x1c>
 801deca:	2b00      	cmp	r3, #0
 801decc:	da01      	bge.n	801ded2 <div+0x16>
 801dece:	3401      	adds	r4, #1
 801ded0:	1a9b      	subs	r3, r3, r2
 801ded2:	e9c0 4300 	strd	r4, r3, [r0]
 801ded6:	bd10      	pop	{r4, pc}
 801ded8:	2b00      	cmp	r3, #0
 801deda:	bfc4      	itt	gt
 801dedc:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801dee0:	189b      	addgt	r3, r3, r2
 801dee2:	e7f6      	b.n	801ded2 <div+0x16>

0801dee4 <quorem>:
 801dee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dee8:	6903      	ldr	r3, [r0, #16]
 801deea:	690c      	ldr	r4, [r1, #16]
 801deec:	42a3      	cmp	r3, r4
 801deee:	4607      	mov	r7, r0
 801def0:	f2c0 8081 	blt.w	801dff6 <quorem+0x112>
 801def4:	3c01      	subs	r4, #1
 801def6:	f101 0814 	add.w	r8, r1, #20
 801defa:	f100 0514 	add.w	r5, r0, #20
 801defe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801df02:	9301      	str	r3, [sp, #4]
 801df04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801df08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801df0c:	3301      	adds	r3, #1
 801df0e:	429a      	cmp	r2, r3
 801df10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801df14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801df18:	fbb2 f6f3 	udiv	r6, r2, r3
 801df1c:	d331      	bcc.n	801df82 <quorem+0x9e>
 801df1e:	f04f 0e00 	mov.w	lr, #0
 801df22:	4640      	mov	r0, r8
 801df24:	46ac      	mov	ip, r5
 801df26:	46f2      	mov	sl, lr
 801df28:	f850 2b04 	ldr.w	r2, [r0], #4
 801df2c:	b293      	uxth	r3, r2
 801df2e:	fb06 e303 	mla	r3, r6, r3, lr
 801df32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801df36:	b29b      	uxth	r3, r3
 801df38:	ebaa 0303 	sub.w	r3, sl, r3
 801df3c:	0c12      	lsrs	r2, r2, #16
 801df3e:	f8dc a000 	ldr.w	sl, [ip]
 801df42:	fb06 e202 	mla	r2, r6, r2, lr
 801df46:	fa13 f38a 	uxtah	r3, r3, sl
 801df4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801df4e:	fa1f fa82 	uxth.w	sl, r2
 801df52:	f8dc 2000 	ldr.w	r2, [ip]
 801df56:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801df5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801df5e:	b29b      	uxth	r3, r3
 801df60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801df64:	4581      	cmp	r9, r0
 801df66:	f84c 3b04 	str.w	r3, [ip], #4
 801df6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801df6e:	d2db      	bcs.n	801df28 <quorem+0x44>
 801df70:	f855 300b 	ldr.w	r3, [r5, fp]
 801df74:	b92b      	cbnz	r3, 801df82 <quorem+0x9e>
 801df76:	9b01      	ldr	r3, [sp, #4]
 801df78:	3b04      	subs	r3, #4
 801df7a:	429d      	cmp	r5, r3
 801df7c:	461a      	mov	r2, r3
 801df7e:	d32e      	bcc.n	801dfde <quorem+0xfa>
 801df80:	613c      	str	r4, [r7, #16]
 801df82:	4638      	mov	r0, r7
 801df84:	f001 fe7a 	bl	801fc7c <__mcmp>
 801df88:	2800      	cmp	r0, #0
 801df8a:	db24      	blt.n	801dfd6 <quorem+0xf2>
 801df8c:	3601      	adds	r6, #1
 801df8e:	4628      	mov	r0, r5
 801df90:	f04f 0c00 	mov.w	ip, #0
 801df94:	f858 2b04 	ldr.w	r2, [r8], #4
 801df98:	f8d0 e000 	ldr.w	lr, [r0]
 801df9c:	b293      	uxth	r3, r2
 801df9e:	ebac 0303 	sub.w	r3, ip, r3
 801dfa2:	0c12      	lsrs	r2, r2, #16
 801dfa4:	fa13 f38e 	uxtah	r3, r3, lr
 801dfa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801dfac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801dfb0:	b29b      	uxth	r3, r3
 801dfb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801dfb6:	45c1      	cmp	r9, r8
 801dfb8:	f840 3b04 	str.w	r3, [r0], #4
 801dfbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801dfc0:	d2e8      	bcs.n	801df94 <quorem+0xb0>
 801dfc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801dfc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801dfca:	b922      	cbnz	r2, 801dfd6 <quorem+0xf2>
 801dfcc:	3b04      	subs	r3, #4
 801dfce:	429d      	cmp	r5, r3
 801dfd0:	461a      	mov	r2, r3
 801dfd2:	d30a      	bcc.n	801dfea <quorem+0x106>
 801dfd4:	613c      	str	r4, [r7, #16]
 801dfd6:	4630      	mov	r0, r6
 801dfd8:	b003      	add	sp, #12
 801dfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfde:	6812      	ldr	r2, [r2, #0]
 801dfe0:	3b04      	subs	r3, #4
 801dfe2:	2a00      	cmp	r2, #0
 801dfe4:	d1cc      	bne.n	801df80 <quorem+0x9c>
 801dfe6:	3c01      	subs	r4, #1
 801dfe8:	e7c7      	b.n	801df7a <quorem+0x96>
 801dfea:	6812      	ldr	r2, [r2, #0]
 801dfec:	3b04      	subs	r3, #4
 801dfee:	2a00      	cmp	r2, #0
 801dff0:	d1f0      	bne.n	801dfd4 <quorem+0xf0>
 801dff2:	3c01      	subs	r4, #1
 801dff4:	e7eb      	b.n	801dfce <quorem+0xea>
 801dff6:	2000      	movs	r0, #0
 801dff8:	e7ee      	b.n	801dfd8 <quorem+0xf4>
 801dffa:	0000      	movs	r0, r0
 801dffc:	0000      	movs	r0, r0
	...

0801e000 <_dtoa_r>:
 801e000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e004:	ed2d 8b02 	vpush	{d8}
 801e008:	b095      	sub	sp, #84	; 0x54
 801e00a:	ec57 6b10 	vmov	r6, r7, d0
 801e00e:	9105      	str	r1, [sp, #20]
 801e010:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801e012:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e014:	9209      	str	r2, [sp, #36]	; 0x24
 801e016:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801e01a:	4604      	mov	r4, r0
 801e01c:	930f      	str	r3, [sp, #60]	; 0x3c
 801e01e:	b141      	cbz	r1, 801e032 <_dtoa_r+0x32>
 801e020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e022:	604a      	str	r2, [r1, #4]
 801e024:	2301      	movs	r3, #1
 801e026:	4093      	lsls	r3, r2
 801e028:	608b      	str	r3, [r1, #8]
 801e02a:	f001 fc1c 	bl	801f866 <_Bfree>
 801e02e:	2300      	movs	r3, #0
 801e030:	6423      	str	r3, [r4, #64]	; 0x40
 801e032:	1e3b      	subs	r3, r7, #0
 801e034:	bfb9      	ittee	lt
 801e036:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e03a:	9303      	strlt	r3, [sp, #12]
 801e03c:	2300      	movge	r3, #0
 801e03e:	602b      	strge	r3, [r5, #0]
 801e040:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801e044:	4ba2      	ldr	r3, [pc, #648]	; (801e2d0 <_dtoa_r+0x2d0>)
 801e046:	bfbc      	itt	lt
 801e048:	2201      	movlt	r2, #1
 801e04a:	602a      	strlt	r2, [r5, #0]
 801e04c:	ea33 0309 	bics.w	r3, r3, r9
 801e050:	d11b      	bne.n	801e08a <_dtoa_r+0x8a>
 801e052:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e054:	f242 730f 	movw	r3, #9999	; 0x270f
 801e058:	6013      	str	r3, [r2, #0]
 801e05a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e05e:	4333      	orrs	r3, r6
 801e060:	f000 8578 	beq.w	801eb54 <_dtoa_r+0xb54>
 801e064:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e066:	b90b      	cbnz	r3, 801e06c <_dtoa_r+0x6c>
 801e068:	4b9a      	ldr	r3, [pc, #616]	; (801e2d4 <_dtoa_r+0x2d4>)
 801e06a:	e024      	b.n	801e0b6 <_dtoa_r+0xb6>
 801e06c:	4b99      	ldr	r3, [pc, #612]	; (801e2d4 <_dtoa_r+0x2d4>)
 801e06e:	9300      	str	r3, [sp, #0]
 801e070:	3303      	adds	r3, #3
 801e072:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e074:	6013      	str	r3, [r2, #0]
 801e076:	9800      	ldr	r0, [sp, #0]
 801e078:	b015      	add	sp, #84	; 0x54
 801e07a:	ecbd 8b02 	vpop	{d8}
 801e07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e082:	4b95      	ldr	r3, [pc, #596]	; (801e2d8 <_dtoa_r+0x2d8>)
 801e084:	9300      	str	r3, [sp, #0]
 801e086:	3308      	adds	r3, #8
 801e088:	e7f3      	b.n	801e072 <_dtoa_r+0x72>
 801e08a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e08e:	2200      	movs	r2, #0
 801e090:	ec51 0b17 	vmov	r0, r1, d7
 801e094:	2300      	movs	r3, #0
 801e096:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801e09a:	f7e2 fd45 	bl	8000b28 <__aeabi_dcmpeq>
 801e09e:	4680      	mov	r8, r0
 801e0a0:	b158      	cbz	r0, 801e0ba <_dtoa_r+0xba>
 801e0a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e0a4:	2301      	movs	r3, #1
 801e0a6:	6013      	str	r3, [r2, #0]
 801e0a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	f000 854f 	beq.w	801eb4e <_dtoa_r+0xb4e>
 801e0b0:	488a      	ldr	r0, [pc, #552]	; (801e2dc <_dtoa_r+0x2dc>)
 801e0b2:	6018      	str	r0, [r3, #0]
 801e0b4:	1e43      	subs	r3, r0, #1
 801e0b6:	9300      	str	r3, [sp, #0]
 801e0b8:	e7dd      	b.n	801e076 <_dtoa_r+0x76>
 801e0ba:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801e0be:	aa12      	add	r2, sp, #72	; 0x48
 801e0c0:	a913      	add	r1, sp, #76	; 0x4c
 801e0c2:	4620      	mov	r0, r4
 801e0c4:	f001 fe7e 	bl	801fdc4 <__d2b>
 801e0c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e0cc:	4683      	mov	fp, r0
 801e0ce:	2d00      	cmp	r5, #0
 801e0d0:	d07c      	beq.n	801e1cc <_dtoa_r+0x1cc>
 801e0d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e0d4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801e0d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e0dc:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801e0e0:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801e0e4:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801e0e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801e0ec:	4b7c      	ldr	r3, [pc, #496]	; (801e2e0 <_dtoa_r+0x2e0>)
 801e0ee:	2200      	movs	r2, #0
 801e0f0:	4630      	mov	r0, r6
 801e0f2:	4639      	mov	r1, r7
 801e0f4:	f7e2 f8f8 	bl	80002e8 <__aeabi_dsub>
 801e0f8:	a36f      	add	r3, pc, #444	; (adr r3, 801e2b8 <_dtoa_r+0x2b8>)
 801e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0fe:	f7e2 faab 	bl	8000658 <__aeabi_dmul>
 801e102:	a36f      	add	r3, pc, #444	; (adr r3, 801e2c0 <_dtoa_r+0x2c0>)
 801e104:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e108:	f7e2 f8f0 	bl	80002ec <__adddf3>
 801e10c:	4606      	mov	r6, r0
 801e10e:	4628      	mov	r0, r5
 801e110:	460f      	mov	r7, r1
 801e112:	f7e2 fa37 	bl	8000584 <__aeabi_i2d>
 801e116:	a36c      	add	r3, pc, #432	; (adr r3, 801e2c8 <_dtoa_r+0x2c8>)
 801e118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e11c:	f7e2 fa9c 	bl	8000658 <__aeabi_dmul>
 801e120:	4602      	mov	r2, r0
 801e122:	460b      	mov	r3, r1
 801e124:	4630      	mov	r0, r6
 801e126:	4639      	mov	r1, r7
 801e128:	f7e2 f8e0 	bl	80002ec <__adddf3>
 801e12c:	4606      	mov	r6, r0
 801e12e:	460f      	mov	r7, r1
 801e130:	f7e2 fd42 	bl	8000bb8 <__aeabi_d2iz>
 801e134:	2200      	movs	r2, #0
 801e136:	4682      	mov	sl, r0
 801e138:	2300      	movs	r3, #0
 801e13a:	4630      	mov	r0, r6
 801e13c:	4639      	mov	r1, r7
 801e13e:	f7e2 fcfd 	bl	8000b3c <__aeabi_dcmplt>
 801e142:	b148      	cbz	r0, 801e158 <_dtoa_r+0x158>
 801e144:	4650      	mov	r0, sl
 801e146:	f7e2 fa1d 	bl	8000584 <__aeabi_i2d>
 801e14a:	4632      	mov	r2, r6
 801e14c:	463b      	mov	r3, r7
 801e14e:	f7e2 fceb 	bl	8000b28 <__aeabi_dcmpeq>
 801e152:	b908      	cbnz	r0, 801e158 <_dtoa_r+0x158>
 801e154:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e158:	f1ba 0f16 	cmp.w	sl, #22
 801e15c:	d854      	bhi.n	801e208 <_dtoa_r+0x208>
 801e15e:	4b61      	ldr	r3, [pc, #388]	; (801e2e4 <_dtoa_r+0x2e4>)
 801e160:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e164:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e16c:	f7e2 fce6 	bl	8000b3c <__aeabi_dcmplt>
 801e170:	2800      	cmp	r0, #0
 801e172:	d04b      	beq.n	801e20c <_dtoa_r+0x20c>
 801e174:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e178:	2300      	movs	r3, #0
 801e17a:	930e      	str	r3, [sp, #56]	; 0x38
 801e17c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e17e:	1b5d      	subs	r5, r3, r5
 801e180:	1e6b      	subs	r3, r5, #1
 801e182:	9304      	str	r3, [sp, #16]
 801e184:	bf43      	ittte	mi
 801e186:	2300      	movmi	r3, #0
 801e188:	f1c5 0801 	rsbmi	r8, r5, #1
 801e18c:	9304      	strmi	r3, [sp, #16]
 801e18e:	f04f 0800 	movpl.w	r8, #0
 801e192:	f1ba 0f00 	cmp.w	sl, #0
 801e196:	db3b      	blt.n	801e210 <_dtoa_r+0x210>
 801e198:	9b04      	ldr	r3, [sp, #16]
 801e19a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e19e:	4453      	add	r3, sl
 801e1a0:	9304      	str	r3, [sp, #16]
 801e1a2:	2300      	movs	r3, #0
 801e1a4:	9306      	str	r3, [sp, #24]
 801e1a6:	9b05      	ldr	r3, [sp, #20]
 801e1a8:	2b09      	cmp	r3, #9
 801e1aa:	d86a      	bhi.n	801e282 <_dtoa_r+0x282>
 801e1ac:	2b05      	cmp	r3, #5
 801e1ae:	bfc4      	itt	gt
 801e1b0:	3b04      	subgt	r3, #4
 801e1b2:	9305      	strgt	r3, [sp, #20]
 801e1b4:	9b05      	ldr	r3, [sp, #20]
 801e1b6:	f1a3 0302 	sub.w	r3, r3, #2
 801e1ba:	bfcc      	ite	gt
 801e1bc:	2500      	movgt	r5, #0
 801e1be:	2501      	movle	r5, #1
 801e1c0:	2b03      	cmp	r3, #3
 801e1c2:	d86a      	bhi.n	801e29a <_dtoa_r+0x29a>
 801e1c4:	e8df f003 	tbb	[pc, r3]
 801e1c8:	5b4d4f2c 	.word	0x5b4d4f2c
 801e1cc:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801e1d0:	441d      	add	r5, r3
 801e1d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801e1d6:	2b20      	cmp	r3, #32
 801e1d8:	bfc1      	itttt	gt
 801e1da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801e1de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801e1e2:	fa09 f303 	lslgt.w	r3, r9, r3
 801e1e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 801e1ea:	bfda      	itte	le
 801e1ec:	f1c3 0320 	rsble	r3, r3, #32
 801e1f0:	fa06 f003 	lslle.w	r0, r6, r3
 801e1f4:	4318      	orrgt	r0, r3
 801e1f6:	f7e2 f9b5 	bl	8000564 <__aeabi_ui2d>
 801e1fa:	2301      	movs	r3, #1
 801e1fc:	4606      	mov	r6, r0
 801e1fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801e202:	3d01      	subs	r5, #1
 801e204:	9310      	str	r3, [sp, #64]	; 0x40
 801e206:	e771      	b.n	801e0ec <_dtoa_r+0xec>
 801e208:	2301      	movs	r3, #1
 801e20a:	e7b6      	b.n	801e17a <_dtoa_r+0x17a>
 801e20c:	900e      	str	r0, [sp, #56]	; 0x38
 801e20e:	e7b5      	b.n	801e17c <_dtoa_r+0x17c>
 801e210:	f1ca 0300 	rsb	r3, sl, #0
 801e214:	9306      	str	r3, [sp, #24]
 801e216:	2300      	movs	r3, #0
 801e218:	eba8 080a 	sub.w	r8, r8, sl
 801e21c:	930d      	str	r3, [sp, #52]	; 0x34
 801e21e:	e7c2      	b.n	801e1a6 <_dtoa_r+0x1a6>
 801e220:	2300      	movs	r3, #0
 801e222:	9308      	str	r3, [sp, #32]
 801e224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e226:	2b00      	cmp	r3, #0
 801e228:	dc3a      	bgt.n	801e2a0 <_dtoa_r+0x2a0>
 801e22a:	f04f 0901 	mov.w	r9, #1
 801e22e:	f8cd 9004 	str.w	r9, [sp, #4]
 801e232:	464b      	mov	r3, r9
 801e234:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801e238:	2200      	movs	r2, #0
 801e23a:	6462      	str	r2, [r4, #68]	; 0x44
 801e23c:	2204      	movs	r2, #4
 801e23e:	f102 0014 	add.w	r0, r2, #20
 801e242:	4298      	cmp	r0, r3
 801e244:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801e246:	d931      	bls.n	801e2ac <_dtoa_r+0x2ac>
 801e248:	4620      	mov	r0, r4
 801e24a:	f001 fae7 	bl	801f81c <_Balloc>
 801e24e:	9000      	str	r0, [sp, #0]
 801e250:	2800      	cmp	r0, #0
 801e252:	d14d      	bne.n	801e2f0 <_dtoa_r+0x2f0>
 801e254:	4b24      	ldr	r3, [pc, #144]	; (801e2e8 <_dtoa_r+0x2e8>)
 801e256:	4602      	mov	r2, r0
 801e258:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e25c:	4823      	ldr	r0, [pc, #140]	; (801e2ec <_dtoa_r+0x2ec>)
 801e25e:	f003 fd9d 	bl	8021d9c <__assert_func>
 801e262:	2301      	movs	r3, #1
 801e264:	e7dd      	b.n	801e222 <_dtoa_r+0x222>
 801e266:	2300      	movs	r3, #0
 801e268:	9308      	str	r3, [sp, #32]
 801e26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e26c:	eb0a 0903 	add.w	r9, sl, r3
 801e270:	f109 0301 	add.w	r3, r9, #1
 801e274:	2b01      	cmp	r3, #1
 801e276:	9301      	str	r3, [sp, #4]
 801e278:	bfb8      	it	lt
 801e27a:	2301      	movlt	r3, #1
 801e27c:	e7dc      	b.n	801e238 <_dtoa_r+0x238>
 801e27e:	2301      	movs	r3, #1
 801e280:	e7f2      	b.n	801e268 <_dtoa_r+0x268>
 801e282:	2501      	movs	r5, #1
 801e284:	2300      	movs	r3, #0
 801e286:	9305      	str	r3, [sp, #20]
 801e288:	9508      	str	r5, [sp, #32]
 801e28a:	f04f 39ff 	mov.w	r9, #4294967295
 801e28e:	2200      	movs	r2, #0
 801e290:	f8cd 9004 	str.w	r9, [sp, #4]
 801e294:	2312      	movs	r3, #18
 801e296:	9209      	str	r2, [sp, #36]	; 0x24
 801e298:	e7ce      	b.n	801e238 <_dtoa_r+0x238>
 801e29a:	2301      	movs	r3, #1
 801e29c:	9308      	str	r3, [sp, #32]
 801e29e:	e7f4      	b.n	801e28a <_dtoa_r+0x28a>
 801e2a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e2a4:	f8cd 9004 	str.w	r9, [sp, #4]
 801e2a8:	464b      	mov	r3, r9
 801e2aa:	e7c5      	b.n	801e238 <_dtoa_r+0x238>
 801e2ac:	3101      	adds	r1, #1
 801e2ae:	6461      	str	r1, [r4, #68]	; 0x44
 801e2b0:	0052      	lsls	r2, r2, #1
 801e2b2:	e7c4      	b.n	801e23e <_dtoa_r+0x23e>
 801e2b4:	f3af 8000 	nop.w
 801e2b8:	636f4361 	.word	0x636f4361
 801e2bc:	3fd287a7 	.word	0x3fd287a7
 801e2c0:	8b60c8b3 	.word	0x8b60c8b3
 801e2c4:	3fc68a28 	.word	0x3fc68a28
 801e2c8:	509f79fb 	.word	0x509f79fb
 801e2cc:	3fd34413 	.word	0x3fd34413
 801e2d0:	7ff00000 	.word	0x7ff00000
 801e2d4:	08028fc0 	.word	0x08028fc0
 801e2d8:	08028fc4 	.word	0x08028fc4
 801e2dc:	08028f43 	.word	0x08028f43
 801e2e0:	3ff80000 	.word	0x3ff80000
 801e2e4:	080290c8 	.word	0x080290c8
 801e2e8:	08028fcd 	.word	0x08028fcd
 801e2ec:	08028fde 	.word	0x08028fde
 801e2f0:	9b00      	ldr	r3, [sp, #0]
 801e2f2:	6423      	str	r3, [r4, #64]	; 0x40
 801e2f4:	9b01      	ldr	r3, [sp, #4]
 801e2f6:	2b0e      	cmp	r3, #14
 801e2f8:	f200 80ad 	bhi.w	801e456 <_dtoa_r+0x456>
 801e2fc:	2d00      	cmp	r5, #0
 801e2fe:	f000 80aa 	beq.w	801e456 <_dtoa_r+0x456>
 801e302:	f1ba 0f00 	cmp.w	sl, #0
 801e306:	dd36      	ble.n	801e376 <_dtoa_r+0x376>
 801e308:	4ac2      	ldr	r2, [pc, #776]	; (801e614 <_dtoa_r+0x614>)
 801e30a:	f00a 030f 	and.w	r3, sl, #15
 801e30e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e312:	ed93 7b00 	vldr	d7, [r3]
 801e316:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801e31a:	ea4f 172a 	mov.w	r7, sl, asr #4
 801e31e:	eeb0 8a47 	vmov.f32	s16, s14
 801e322:	eef0 8a67 	vmov.f32	s17, s15
 801e326:	d016      	beq.n	801e356 <_dtoa_r+0x356>
 801e328:	4bbb      	ldr	r3, [pc, #748]	; (801e618 <_dtoa_r+0x618>)
 801e32a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e32e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e332:	f7e2 fabb 	bl	80008ac <__aeabi_ddiv>
 801e336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e33a:	f007 070f 	and.w	r7, r7, #15
 801e33e:	2503      	movs	r5, #3
 801e340:	4eb5      	ldr	r6, [pc, #724]	; (801e618 <_dtoa_r+0x618>)
 801e342:	b957      	cbnz	r7, 801e35a <_dtoa_r+0x35a>
 801e344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e348:	ec53 2b18 	vmov	r2, r3, d8
 801e34c:	f7e2 faae 	bl	80008ac <__aeabi_ddiv>
 801e350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e354:	e029      	b.n	801e3aa <_dtoa_r+0x3aa>
 801e356:	2502      	movs	r5, #2
 801e358:	e7f2      	b.n	801e340 <_dtoa_r+0x340>
 801e35a:	07f9      	lsls	r1, r7, #31
 801e35c:	d508      	bpl.n	801e370 <_dtoa_r+0x370>
 801e35e:	ec51 0b18 	vmov	r0, r1, d8
 801e362:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e366:	f7e2 f977 	bl	8000658 <__aeabi_dmul>
 801e36a:	ec41 0b18 	vmov	d8, r0, r1
 801e36e:	3501      	adds	r5, #1
 801e370:	107f      	asrs	r7, r7, #1
 801e372:	3608      	adds	r6, #8
 801e374:	e7e5      	b.n	801e342 <_dtoa_r+0x342>
 801e376:	f000 80a6 	beq.w	801e4c6 <_dtoa_r+0x4c6>
 801e37a:	f1ca 0600 	rsb	r6, sl, #0
 801e37e:	4ba5      	ldr	r3, [pc, #660]	; (801e614 <_dtoa_r+0x614>)
 801e380:	4fa5      	ldr	r7, [pc, #660]	; (801e618 <_dtoa_r+0x618>)
 801e382:	f006 020f 	and.w	r2, r6, #15
 801e386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e38e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e392:	f7e2 f961 	bl	8000658 <__aeabi_dmul>
 801e396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e39a:	1136      	asrs	r6, r6, #4
 801e39c:	2300      	movs	r3, #0
 801e39e:	2502      	movs	r5, #2
 801e3a0:	2e00      	cmp	r6, #0
 801e3a2:	f040 8085 	bne.w	801e4b0 <_dtoa_r+0x4b0>
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	d1d2      	bne.n	801e350 <_dtoa_r+0x350>
 801e3aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	f000 808c 	beq.w	801e4ca <_dtoa_r+0x4ca>
 801e3b2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e3b6:	4b99      	ldr	r3, [pc, #612]	; (801e61c <_dtoa_r+0x61c>)
 801e3b8:	2200      	movs	r2, #0
 801e3ba:	4630      	mov	r0, r6
 801e3bc:	4639      	mov	r1, r7
 801e3be:	f7e2 fbbd 	bl	8000b3c <__aeabi_dcmplt>
 801e3c2:	2800      	cmp	r0, #0
 801e3c4:	f000 8081 	beq.w	801e4ca <_dtoa_r+0x4ca>
 801e3c8:	9b01      	ldr	r3, [sp, #4]
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d07d      	beq.n	801e4ca <_dtoa_r+0x4ca>
 801e3ce:	f1b9 0f00 	cmp.w	r9, #0
 801e3d2:	dd3c      	ble.n	801e44e <_dtoa_r+0x44e>
 801e3d4:	f10a 33ff 	add.w	r3, sl, #4294967295
 801e3d8:	9307      	str	r3, [sp, #28]
 801e3da:	2200      	movs	r2, #0
 801e3dc:	4b90      	ldr	r3, [pc, #576]	; (801e620 <_dtoa_r+0x620>)
 801e3de:	4630      	mov	r0, r6
 801e3e0:	4639      	mov	r1, r7
 801e3e2:	f7e2 f939 	bl	8000658 <__aeabi_dmul>
 801e3e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e3ea:	3501      	adds	r5, #1
 801e3ec:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801e3f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e3f4:	4628      	mov	r0, r5
 801e3f6:	f7e2 f8c5 	bl	8000584 <__aeabi_i2d>
 801e3fa:	4632      	mov	r2, r6
 801e3fc:	463b      	mov	r3, r7
 801e3fe:	f7e2 f92b 	bl	8000658 <__aeabi_dmul>
 801e402:	4b88      	ldr	r3, [pc, #544]	; (801e624 <_dtoa_r+0x624>)
 801e404:	2200      	movs	r2, #0
 801e406:	f7e1 ff71 	bl	80002ec <__adddf3>
 801e40a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801e40e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e412:	9303      	str	r3, [sp, #12]
 801e414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e416:	2b00      	cmp	r3, #0
 801e418:	d15c      	bne.n	801e4d4 <_dtoa_r+0x4d4>
 801e41a:	4b83      	ldr	r3, [pc, #524]	; (801e628 <_dtoa_r+0x628>)
 801e41c:	2200      	movs	r2, #0
 801e41e:	4630      	mov	r0, r6
 801e420:	4639      	mov	r1, r7
 801e422:	f7e1 ff61 	bl	80002e8 <__aeabi_dsub>
 801e426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e42a:	4606      	mov	r6, r0
 801e42c:	460f      	mov	r7, r1
 801e42e:	f7e2 fba3 	bl	8000b78 <__aeabi_dcmpgt>
 801e432:	2800      	cmp	r0, #0
 801e434:	f040 8295 	bne.w	801e962 <_dtoa_r+0x962>
 801e438:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801e43c:	4630      	mov	r0, r6
 801e43e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e442:	4639      	mov	r1, r7
 801e444:	f7e2 fb7a 	bl	8000b3c <__aeabi_dcmplt>
 801e448:	2800      	cmp	r0, #0
 801e44a:	f040 8287 	bne.w	801e95c <_dtoa_r+0x95c>
 801e44e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e452:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e456:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e458:	2b00      	cmp	r3, #0
 801e45a:	f2c0 8157 	blt.w	801e70c <_dtoa_r+0x70c>
 801e45e:	f1ba 0f0e 	cmp.w	sl, #14
 801e462:	f300 8153 	bgt.w	801e70c <_dtoa_r+0x70c>
 801e466:	4b6b      	ldr	r3, [pc, #428]	; (801e614 <_dtoa_r+0x614>)
 801e468:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e46c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e472:	2b00      	cmp	r3, #0
 801e474:	f280 80e2 	bge.w	801e63c <_dtoa_r+0x63c>
 801e478:	9b01      	ldr	r3, [sp, #4]
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	f300 80de 	bgt.w	801e63c <_dtoa_r+0x63c>
 801e480:	f040 826c 	bne.w	801e95c <_dtoa_r+0x95c>
 801e484:	4b68      	ldr	r3, [pc, #416]	; (801e628 <_dtoa_r+0x628>)
 801e486:	2200      	movs	r2, #0
 801e488:	4640      	mov	r0, r8
 801e48a:	4649      	mov	r1, r9
 801e48c:	f7e2 f8e4 	bl	8000658 <__aeabi_dmul>
 801e490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e494:	f7e2 fb66 	bl	8000b64 <__aeabi_dcmpge>
 801e498:	9e01      	ldr	r6, [sp, #4]
 801e49a:	4637      	mov	r7, r6
 801e49c:	2800      	cmp	r0, #0
 801e49e:	f040 8242 	bne.w	801e926 <_dtoa_r+0x926>
 801e4a2:	9d00      	ldr	r5, [sp, #0]
 801e4a4:	2331      	movs	r3, #49	; 0x31
 801e4a6:	f805 3b01 	strb.w	r3, [r5], #1
 801e4aa:	f10a 0a01 	add.w	sl, sl, #1
 801e4ae:	e23e      	b.n	801e92e <_dtoa_r+0x92e>
 801e4b0:	07f2      	lsls	r2, r6, #31
 801e4b2:	d505      	bpl.n	801e4c0 <_dtoa_r+0x4c0>
 801e4b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e4b8:	f7e2 f8ce 	bl	8000658 <__aeabi_dmul>
 801e4bc:	3501      	adds	r5, #1
 801e4be:	2301      	movs	r3, #1
 801e4c0:	1076      	asrs	r6, r6, #1
 801e4c2:	3708      	adds	r7, #8
 801e4c4:	e76c      	b.n	801e3a0 <_dtoa_r+0x3a0>
 801e4c6:	2502      	movs	r5, #2
 801e4c8:	e76f      	b.n	801e3aa <_dtoa_r+0x3aa>
 801e4ca:	9b01      	ldr	r3, [sp, #4]
 801e4cc:	f8cd a01c 	str.w	sl, [sp, #28]
 801e4d0:	930c      	str	r3, [sp, #48]	; 0x30
 801e4d2:	e78d      	b.n	801e3f0 <_dtoa_r+0x3f0>
 801e4d4:	9900      	ldr	r1, [sp, #0]
 801e4d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e4d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e4da:	4b4e      	ldr	r3, [pc, #312]	; (801e614 <_dtoa_r+0x614>)
 801e4dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e4e0:	4401      	add	r1, r0
 801e4e2:	9102      	str	r1, [sp, #8]
 801e4e4:	9908      	ldr	r1, [sp, #32]
 801e4e6:	eeb0 8a47 	vmov.f32	s16, s14
 801e4ea:	eef0 8a67 	vmov.f32	s17, s15
 801e4ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e4f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e4f6:	2900      	cmp	r1, #0
 801e4f8:	d045      	beq.n	801e586 <_dtoa_r+0x586>
 801e4fa:	494c      	ldr	r1, [pc, #304]	; (801e62c <_dtoa_r+0x62c>)
 801e4fc:	2000      	movs	r0, #0
 801e4fe:	f7e2 f9d5 	bl	80008ac <__aeabi_ddiv>
 801e502:	ec53 2b18 	vmov	r2, r3, d8
 801e506:	f7e1 feef 	bl	80002e8 <__aeabi_dsub>
 801e50a:	9d00      	ldr	r5, [sp, #0]
 801e50c:	ec41 0b18 	vmov	d8, r0, r1
 801e510:	4639      	mov	r1, r7
 801e512:	4630      	mov	r0, r6
 801e514:	f7e2 fb50 	bl	8000bb8 <__aeabi_d2iz>
 801e518:	900c      	str	r0, [sp, #48]	; 0x30
 801e51a:	f7e2 f833 	bl	8000584 <__aeabi_i2d>
 801e51e:	4602      	mov	r2, r0
 801e520:	460b      	mov	r3, r1
 801e522:	4630      	mov	r0, r6
 801e524:	4639      	mov	r1, r7
 801e526:	f7e1 fedf 	bl	80002e8 <__aeabi_dsub>
 801e52a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e52c:	3330      	adds	r3, #48	; 0x30
 801e52e:	f805 3b01 	strb.w	r3, [r5], #1
 801e532:	ec53 2b18 	vmov	r2, r3, d8
 801e536:	4606      	mov	r6, r0
 801e538:	460f      	mov	r7, r1
 801e53a:	f7e2 faff 	bl	8000b3c <__aeabi_dcmplt>
 801e53e:	2800      	cmp	r0, #0
 801e540:	d165      	bne.n	801e60e <_dtoa_r+0x60e>
 801e542:	4632      	mov	r2, r6
 801e544:	463b      	mov	r3, r7
 801e546:	4935      	ldr	r1, [pc, #212]	; (801e61c <_dtoa_r+0x61c>)
 801e548:	2000      	movs	r0, #0
 801e54a:	f7e1 fecd 	bl	80002e8 <__aeabi_dsub>
 801e54e:	ec53 2b18 	vmov	r2, r3, d8
 801e552:	f7e2 faf3 	bl	8000b3c <__aeabi_dcmplt>
 801e556:	2800      	cmp	r0, #0
 801e558:	f040 80b8 	bne.w	801e6cc <_dtoa_r+0x6cc>
 801e55c:	9b02      	ldr	r3, [sp, #8]
 801e55e:	429d      	cmp	r5, r3
 801e560:	f43f af75 	beq.w	801e44e <_dtoa_r+0x44e>
 801e564:	4b2e      	ldr	r3, [pc, #184]	; (801e620 <_dtoa_r+0x620>)
 801e566:	ec51 0b18 	vmov	r0, r1, d8
 801e56a:	2200      	movs	r2, #0
 801e56c:	f7e2 f874 	bl	8000658 <__aeabi_dmul>
 801e570:	4b2b      	ldr	r3, [pc, #172]	; (801e620 <_dtoa_r+0x620>)
 801e572:	ec41 0b18 	vmov	d8, r0, r1
 801e576:	2200      	movs	r2, #0
 801e578:	4630      	mov	r0, r6
 801e57a:	4639      	mov	r1, r7
 801e57c:	f7e2 f86c 	bl	8000658 <__aeabi_dmul>
 801e580:	4606      	mov	r6, r0
 801e582:	460f      	mov	r7, r1
 801e584:	e7c4      	b.n	801e510 <_dtoa_r+0x510>
 801e586:	ec51 0b17 	vmov	r0, r1, d7
 801e58a:	f7e2 f865 	bl	8000658 <__aeabi_dmul>
 801e58e:	9b02      	ldr	r3, [sp, #8]
 801e590:	9d00      	ldr	r5, [sp, #0]
 801e592:	930c      	str	r3, [sp, #48]	; 0x30
 801e594:	ec41 0b18 	vmov	d8, r0, r1
 801e598:	4639      	mov	r1, r7
 801e59a:	4630      	mov	r0, r6
 801e59c:	f7e2 fb0c 	bl	8000bb8 <__aeabi_d2iz>
 801e5a0:	9011      	str	r0, [sp, #68]	; 0x44
 801e5a2:	f7e1 ffef 	bl	8000584 <__aeabi_i2d>
 801e5a6:	4602      	mov	r2, r0
 801e5a8:	460b      	mov	r3, r1
 801e5aa:	4630      	mov	r0, r6
 801e5ac:	4639      	mov	r1, r7
 801e5ae:	f7e1 fe9b 	bl	80002e8 <__aeabi_dsub>
 801e5b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e5b4:	3330      	adds	r3, #48	; 0x30
 801e5b6:	f805 3b01 	strb.w	r3, [r5], #1
 801e5ba:	9b02      	ldr	r3, [sp, #8]
 801e5bc:	429d      	cmp	r5, r3
 801e5be:	4606      	mov	r6, r0
 801e5c0:	460f      	mov	r7, r1
 801e5c2:	f04f 0200 	mov.w	r2, #0
 801e5c6:	d133      	bne.n	801e630 <_dtoa_r+0x630>
 801e5c8:	4b18      	ldr	r3, [pc, #96]	; (801e62c <_dtoa_r+0x62c>)
 801e5ca:	ec51 0b18 	vmov	r0, r1, d8
 801e5ce:	f7e1 fe8d 	bl	80002ec <__adddf3>
 801e5d2:	4602      	mov	r2, r0
 801e5d4:	460b      	mov	r3, r1
 801e5d6:	4630      	mov	r0, r6
 801e5d8:	4639      	mov	r1, r7
 801e5da:	f7e2 facd 	bl	8000b78 <__aeabi_dcmpgt>
 801e5de:	2800      	cmp	r0, #0
 801e5e0:	d174      	bne.n	801e6cc <_dtoa_r+0x6cc>
 801e5e2:	ec53 2b18 	vmov	r2, r3, d8
 801e5e6:	4911      	ldr	r1, [pc, #68]	; (801e62c <_dtoa_r+0x62c>)
 801e5e8:	2000      	movs	r0, #0
 801e5ea:	f7e1 fe7d 	bl	80002e8 <__aeabi_dsub>
 801e5ee:	4602      	mov	r2, r0
 801e5f0:	460b      	mov	r3, r1
 801e5f2:	4630      	mov	r0, r6
 801e5f4:	4639      	mov	r1, r7
 801e5f6:	f7e2 faa1 	bl	8000b3c <__aeabi_dcmplt>
 801e5fa:	2800      	cmp	r0, #0
 801e5fc:	f43f af27 	beq.w	801e44e <_dtoa_r+0x44e>
 801e600:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e602:	1e6b      	subs	r3, r5, #1
 801e604:	930c      	str	r3, [sp, #48]	; 0x30
 801e606:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801e60a:	2b30      	cmp	r3, #48	; 0x30
 801e60c:	d0f8      	beq.n	801e600 <_dtoa_r+0x600>
 801e60e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e612:	e049      	b.n	801e6a8 <_dtoa_r+0x6a8>
 801e614:	080290c8 	.word	0x080290c8
 801e618:	080290a0 	.word	0x080290a0
 801e61c:	3ff00000 	.word	0x3ff00000
 801e620:	40240000 	.word	0x40240000
 801e624:	401c0000 	.word	0x401c0000
 801e628:	40140000 	.word	0x40140000
 801e62c:	3fe00000 	.word	0x3fe00000
 801e630:	4baf      	ldr	r3, [pc, #700]	; (801e8f0 <_dtoa_r+0x8f0>)
 801e632:	f7e2 f811 	bl	8000658 <__aeabi_dmul>
 801e636:	4606      	mov	r6, r0
 801e638:	460f      	mov	r7, r1
 801e63a:	e7ad      	b.n	801e598 <_dtoa_r+0x598>
 801e63c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e640:	9d00      	ldr	r5, [sp, #0]
 801e642:	4642      	mov	r2, r8
 801e644:	464b      	mov	r3, r9
 801e646:	4630      	mov	r0, r6
 801e648:	4639      	mov	r1, r7
 801e64a:	f7e2 f92f 	bl	80008ac <__aeabi_ddiv>
 801e64e:	f7e2 fab3 	bl	8000bb8 <__aeabi_d2iz>
 801e652:	9002      	str	r0, [sp, #8]
 801e654:	f7e1 ff96 	bl	8000584 <__aeabi_i2d>
 801e658:	4642      	mov	r2, r8
 801e65a:	464b      	mov	r3, r9
 801e65c:	f7e1 fffc 	bl	8000658 <__aeabi_dmul>
 801e660:	4602      	mov	r2, r0
 801e662:	460b      	mov	r3, r1
 801e664:	4630      	mov	r0, r6
 801e666:	4639      	mov	r1, r7
 801e668:	f7e1 fe3e 	bl	80002e8 <__aeabi_dsub>
 801e66c:	9e02      	ldr	r6, [sp, #8]
 801e66e:	9f01      	ldr	r7, [sp, #4]
 801e670:	3630      	adds	r6, #48	; 0x30
 801e672:	f805 6b01 	strb.w	r6, [r5], #1
 801e676:	9e00      	ldr	r6, [sp, #0]
 801e678:	1bae      	subs	r6, r5, r6
 801e67a:	42b7      	cmp	r7, r6
 801e67c:	4602      	mov	r2, r0
 801e67e:	460b      	mov	r3, r1
 801e680:	d137      	bne.n	801e6f2 <_dtoa_r+0x6f2>
 801e682:	f7e1 fe33 	bl	80002ec <__adddf3>
 801e686:	4642      	mov	r2, r8
 801e688:	464b      	mov	r3, r9
 801e68a:	4606      	mov	r6, r0
 801e68c:	460f      	mov	r7, r1
 801e68e:	f7e2 fa73 	bl	8000b78 <__aeabi_dcmpgt>
 801e692:	b9c8      	cbnz	r0, 801e6c8 <_dtoa_r+0x6c8>
 801e694:	4642      	mov	r2, r8
 801e696:	464b      	mov	r3, r9
 801e698:	4630      	mov	r0, r6
 801e69a:	4639      	mov	r1, r7
 801e69c:	f7e2 fa44 	bl	8000b28 <__aeabi_dcmpeq>
 801e6a0:	b110      	cbz	r0, 801e6a8 <_dtoa_r+0x6a8>
 801e6a2:	9b02      	ldr	r3, [sp, #8]
 801e6a4:	07d9      	lsls	r1, r3, #31
 801e6a6:	d40f      	bmi.n	801e6c8 <_dtoa_r+0x6c8>
 801e6a8:	4620      	mov	r0, r4
 801e6aa:	4659      	mov	r1, fp
 801e6ac:	f001 f8db 	bl	801f866 <_Bfree>
 801e6b0:	2300      	movs	r3, #0
 801e6b2:	702b      	strb	r3, [r5, #0]
 801e6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e6b6:	f10a 0001 	add.w	r0, sl, #1
 801e6ba:	6018      	str	r0, [r3, #0]
 801e6bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	f43f acd9 	beq.w	801e076 <_dtoa_r+0x76>
 801e6c4:	601d      	str	r5, [r3, #0]
 801e6c6:	e4d6      	b.n	801e076 <_dtoa_r+0x76>
 801e6c8:	f8cd a01c 	str.w	sl, [sp, #28]
 801e6cc:	462b      	mov	r3, r5
 801e6ce:	461d      	mov	r5, r3
 801e6d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e6d4:	2a39      	cmp	r2, #57	; 0x39
 801e6d6:	d108      	bne.n	801e6ea <_dtoa_r+0x6ea>
 801e6d8:	9a00      	ldr	r2, [sp, #0]
 801e6da:	429a      	cmp	r2, r3
 801e6dc:	d1f7      	bne.n	801e6ce <_dtoa_r+0x6ce>
 801e6de:	9a07      	ldr	r2, [sp, #28]
 801e6e0:	9900      	ldr	r1, [sp, #0]
 801e6e2:	3201      	adds	r2, #1
 801e6e4:	9207      	str	r2, [sp, #28]
 801e6e6:	2230      	movs	r2, #48	; 0x30
 801e6e8:	700a      	strb	r2, [r1, #0]
 801e6ea:	781a      	ldrb	r2, [r3, #0]
 801e6ec:	3201      	adds	r2, #1
 801e6ee:	701a      	strb	r2, [r3, #0]
 801e6f0:	e78d      	b.n	801e60e <_dtoa_r+0x60e>
 801e6f2:	4b7f      	ldr	r3, [pc, #508]	; (801e8f0 <_dtoa_r+0x8f0>)
 801e6f4:	2200      	movs	r2, #0
 801e6f6:	f7e1 ffaf 	bl	8000658 <__aeabi_dmul>
 801e6fa:	2200      	movs	r2, #0
 801e6fc:	2300      	movs	r3, #0
 801e6fe:	4606      	mov	r6, r0
 801e700:	460f      	mov	r7, r1
 801e702:	f7e2 fa11 	bl	8000b28 <__aeabi_dcmpeq>
 801e706:	2800      	cmp	r0, #0
 801e708:	d09b      	beq.n	801e642 <_dtoa_r+0x642>
 801e70a:	e7cd      	b.n	801e6a8 <_dtoa_r+0x6a8>
 801e70c:	9a08      	ldr	r2, [sp, #32]
 801e70e:	2a00      	cmp	r2, #0
 801e710:	f000 80c4 	beq.w	801e89c <_dtoa_r+0x89c>
 801e714:	9a05      	ldr	r2, [sp, #20]
 801e716:	2a01      	cmp	r2, #1
 801e718:	f300 80a8 	bgt.w	801e86c <_dtoa_r+0x86c>
 801e71c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e71e:	2a00      	cmp	r2, #0
 801e720:	f000 80a0 	beq.w	801e864 <_dtoa_r+0x864>
 801e724:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801e728:	9e06      	ldr	r6, [sp, #24]
 801e72a:	4645      	mov	r5, r8
 801e72c:	9a04      	ldr	r2, [sp, #16]
 801e72e:	2101      	movs	r1, #1
 801e730:	441a      	add	r2, r3
 801e732:	4620      	mov	r0, r4
 801e734:	4498      	add	r8, r3
 801e736:	9204      	str	r2, [sp, #16]
 801e738:	f001 f938 	bl	801f9ac <__i2b>
 801e73c:	4607      	mov	r7, r0
 801e73e:	2d00      	cmp	r5, #0
 801e740:	dd0b      	ble.n	801e75a <_dtoa_r+0x75a>
 801e742:	9b04      	ldr	r3, [sp, #16]
 801e744:	2b00      	cmp	r3, #0
 801e746:	dd08      	ble.n	801e75a <_dtoa_r+0x75a>
 801e748:	42ab      	cmp	r3, r5
 801e74a:	9a04      	ldr	r2, [sp, #16]
 801e74c:	bfa8      	it	ge
 801e74e:	462b      	movge	r3, r5
 801e750:	eba8 0803 	sub.w	r8, r8, r3
 801e754:	1aed      	subs	r5, r5, r3
 801e756:	1ad3      	subs	r3, r2, r3
 801e758:	9304      	str	r3, [sp, #16]
 801e75a:	9b06      	ldr	r3, [sp, #24]
 801e75c:	b1fb      	cbz	r3, 801e79e <_dtoa_r+0x79e>
 801e75e:	9b08      	ldr	r3, [sp, #32]
 801e760:	2b00      	cmp	r3, #0
 801e762:	f000 809f 	beq.w	801e8a4 <_dtoa_r+0x8a4>
 801e766:	2e00      	cmp	r6, #0
 801e768:	dd11      	ble.n	801e78e <_dtoa_r+0x78e>
 801e76a:	4639      	mov	r1, r7
 801e76c:	4632      	mov	r2, r6
 801e76e:	4620      	mov	r0, r4
 801e770:	f001 f9d8 	bl	801fb24 <__pow5mult>
 801e774:	465a      	mov	r2, fp
 801e776:	4601      	mov	r1, r0
 801e778:	4607      	mov	r7, r0
 801e77a:	4620      	mov	r0, r4
 801e77c:	f001 f92c 	bl	801f9d8 <__multiply>
 801e780:	4659      	mov	r1, fp
 801e782:	9007      	str	r0, [sp, #28]
 801e784:	4620      	mov	r0, r4
 801e786:	f001 f86e 	bl	801f866 <_Bfree>
 801e78a:	9b07      	ldr	r3, [sp, #28]
 801e78c:	469b      	mov	fp, r3
 801e78e:	9b06      	ldr	r3, [sp, #24]
 801e790:	1b9a      	subs	r2, r3, r6
 801e792:	d004      	beq.n	801e79e <_dtoa_r+0x79e>
 801e794:	4659      	mov	r1, fp
 801e796:	4620      	mov	r0, r4
 801e798:	f001 f9c4 	bl	801fb24 <__pow5mult>
 801e79c:	4683      	mov	fp, r0
 801e79e:	2101      	movs	r1, #1
 801e7a0:	4620      	mov	r0, r4
 801e7a2:	f001 f903 	bl	801f9ac <__i2b>
 801e7a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	4606      	mov	r6, r0
 801e7ac:	dd7c      	ble.n	801e8a8 <_dtoa_r+0x8a8>
 801e7ae:	461a      	mov	r2, r3
 801e7b0:	4601      	mov	r1, r0
 801e7b2:	4620      	mov	r0, r4
 801e7b4:	f001 f9b6 	bl	801fb24 <__pow5mult>
 801e7b8:	9b05      	ldr	r3, [sp, #20]
 801e7ba:	2b01      	cmp	r3, #1
 801e7bc:	4606      	mov	r6, r0
 801e7be:	dd76      	ble.n	801e8ae <_dtoa_r+0x8ae>
 801e7c0:	2300      	movs	r3, #0
 801e7c2:	9306      	str	r3, [sp, #24]
 801e7c4:	6933      	ldr	r3, [r6, #16]
 801e7c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801e7ca:	6918      	ldr	r0, [r3, #16]
 801e7cc:	f001 f89e 	bl	801f90c <__hi0bits>
 801e7d0:	f1c0 0020 	rsb	r0, r0, #32
 801e7d4:	9b04      	ldr	r3, [sp, #16]
 801e7d6:	4418      	add	r0, r3
 801e7d8:	f010 001f 	ands.w	r0, r0, #31
 801e7dc:	f000 8086 	beq.w	801e8ec <_dtoa_r+0x8ec>
 801e7e0:	f1c0 0320 	rsb	r3, r0, #32
 801e7e4:	2b04      	cmp	r3, #4
 801e7e6:	dd7f      	ble.n	801e8e8 <_dtoa_r+0x8e8>
 801e7e8:	f1c0 001c 	rsb	r0, r0, #28
 801e7ec:	9b04      	ldr	r3, [sp, #16]
 801e7ee:	4403      	add	r3, r0
 801e7f0:	4480      	add	r8, r0
 801e7f2:	4405      	add	r5, r0
 801e7f4:	9304      	str	r3, [sp, #16]
 801e7f6:	f1b8 0f00 	cmp.w	r8, #0
 801e7fa:	dd05      	ble.n	801e808 <_dtoa_r+0x808>
 801e7fc:	4659      	mov	r1, fp
 801e7fe:	4642      	mov	r2, r8
 801e800:	4620      	mov	r0, r4
 801e802:	f001 f9cf 	bl	801fba4 <__lshift>
 801e806:	4683      	mov	fp, r0
 801e808:	9b04      	ldr	r3, [sp, #16]
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	dd05      	ble.n	801e81a <_dtoa_r+0x81a>
 801e80e:	4631      	mov	r1, r6
 801e810:	461a      	mov	r2, r3
 801e812:	4620      	mov	r0, r4
 801e814:	f001 f9c6 	bl	801fba4 <__lshift>
 801e818:	4606      	mov	r6, r0
 801e81a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d069      	beq.n	801e8f4 <_dtoa_r+0x8f4>
 801e820:	4631      	mov	r1, r6
 801e822:	4658      	mov	r0, fp
 801e824:	f001 fa2a 	bl	801fc7c <__mcmp>
 801e828:	2800      	cmp	r0, #0
 801e82a:	da63      	bge.n	801e8f4 <_dtoa_r+0x8f4>
 801e82c:	2300      	movs	r3, #0
 801e82e:	4659      	mov	r1, fp
 801e830:	220a      	movs	r2, #10
 801e832:	4620      	mov	r0, r4
 801e834:	f001 f820 	bl	801f878 <__multadd>
 801e838:	9b08      	ldr	r3, [sp, #32]
 801e83a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e83e:	4683      	mov	fp, r0
 801e840:	2b00      	cmp	r3, #0
 801e842:	f000 818e 	beq.w	801eb62 <_dtoa_r+0xb62>
 801e846:	4639      	mov	r1, r7
 801e848:	2300      	movs	r3, #0
 801e84a:	220a      	movs	r2, #10
 801e84c:	4620      	mov	r0, r4
 801e84e:	f001 f813 	bl	801f878 <__multadd>
 801e852:	f1b9 0f00 	cmp.w	r9, #0
 801e856:	4607      	mov	r7, r0
 801e858:	f300 808e 	bgt.w	801e978 <_dtoa_r+0x978>
 801e85c:	9b05      	ldr	r3, [sp, #20]
 801e85e:	2b02      	cmp	r3, #2
 801e860:	dc50      	bgt.n	801e904 <_dtoa_r+0x904>
 801e862:	e089      	b.n	801e978 <_dtoa_r+0x978>
 801e864:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e86a:	e75d      	b.n	801e728 <_dtoa_r+0x728>
 801e86c:	9b01      	ldr	r3, [sp, #4]
 801e86e:	1e5e      	subs	r6, r3, #1
 801e870:	9b06      	ldr	r3, [sp, #24]
 801e872:	42b3      	cmp	r3, r6
 801e874:	bfbf      	itttt	lt
 801e876:	9b06      	ldrlt	r3, [sp, #24]
 801e878:	9606      	strlt	r6, [sp, #24]
 801e87a:	1af2      	sublt	r2, r6, r3
 801e87c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801e87e:	bfb6      	itet	lt
 801e880:	189b      	addlt	r3, r3, r2
 801e882:	1b9e      	subge	r6, r3, r6
 801e884:	930d      	strlt	r3, [sp, #52]	; 0x34
 801e886:	9b01      	ldr	r3, [sp, #4]
 801e888:	bfb8      	it	lt
 801e88a:	2600      	movlt	r6, #0
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	bfb5      	itete	lt
 801e890:	eba8 0503 	sublt.w	r5, r8, r3
 801e894:	9b01      	ldrge	r3, [sp, #4]
 801e896:	2300      	movlt	r3, #0
 801e898:	4645      	movge	r5, r8
 801e89a:	e747      	b.n	801e72c <_dtoa_r+0x72c>
 801e89c:	9e06      	ldr	r6, [sp, #24]
 801e89e:	9f08      	ldr	r7, [sp, #32]
 801e8a0:	4645      	mov	r5, r8
 801e8a2:	e74c      	b.n	801e73e <_dtoa_r+0x73e>
 801e8a4:	9a06      	ldr	r2, [sp, #24]
 801e8a6:	e775      	b.n	801e794 <_dtoa_r+0x794>
 801e8a8:	9b05      	ldr	r3, [sp, #20]
 801e8aa:	2b01      	cmp	r3, #1
 801e8ac:	dc18      	bgt.n	801e8e0 <_dtoa_r+0x8e0>
 801e8ae:	9b02      	ldr	r3, [sp, #8]
 801e8b0:	b9b3      	cbnz	r3, 801e8e0 <_dtoa_r+0x8e0>
 801e8b2:	9b03      	ldr	r3, [sp, #12]
 801e8b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e8b8:	b9a3      	cbnz	r3, 801e8e4 <_dtoa_r+0x8e4>
 801e8ba:	9b03      	ldr	r3, [sp, #12]
 801e8bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e8c0:	0d1b      	lsrs	r3, r3, #20
 801e8c2:	051b      	lsls	r3, r3, #20
 801e8c4:	b12b      	cbz	r3, 801e8d2 <_dtoa_r+0x8d2>
 801e8c6:	9b04      	ldr	r3, [sp, #16]
 801e8c8:	3301      	adds	r3, #1
 801e8ca:	9304      	str	r3, [sp, #16]
 801e8cc:	f108 0801 	add.w	r8, r8, #1
 801e8d0:	2301      	movs	r3, #1
 801e8d2:	9306      	str	r3, [sp, #24]
 801e8d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	f47f af74 	bne.w	801e7c4 <_dtoa_r+0x7c4>
 801e8dc:	2001      	movs	r0, #1
 801e8de:	e779      	b.n	801e7d4 <_dtoa_r+0x7d4>
 801e8e0:	2300      	movs	r3, #0
 801e8e2:	e7f6      	b.n	801e8d2 <_dtoa_r+0x8d2>
 801e8e4:	9b02      	ldr	r3, [sp, #8]
 801e8e6:	e7f4      	b.n	801e8d2 <_dtoa_r+0x8d2>
 801e8e8:	d085      	beq.n	801e7f6 <_dtoa_r+0x7f6>
 801e8ea:	4618      	mov	r0, r3
 801e8ec:	301c      	adds	r0, #28
 801e8ee:	e77d      	b.n	801e7ec <_dtoa_r+0x7ec>
 801e8f0:	40240000 	.word	0x40240000
 801e8f4:	9b01      	ldr	r3, [sp, #4]
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	dc38      	bgt.n	801e96c <_dtoa_r+0x96c>
 801e8fa:	9b05      	ldr	r3, [sp, #20]
 801e8fc:	2b02      	cmp	r3, #2
 801e8fe:	dd35      	ble.n	801e96c <_dtoa_r+0x96c>
 801e900:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801e904:	f1b9 0f00 	cmp.w	r9, #0
 801e908:	d10d      	bne.n	801e926 <_dtoa_r+0x926>
 801e90a:	4631      	mov	r1, r6
 801e90c:	464b      	mov	r3, r9
 801e90e:	2205      	movs	r2, #5
 801e910:	4620      	mov	r0, r4
 801e912:	f000 ffb1 	bl	801f878 <__multadd>
 801e916:	4601      	mov	r1, r0
 801e918:	4606      	mov	r6, r0
 801e91a:	4658      	mov	r0, fp
 801e91c:	f001 f9ae 	bl	801fc7c <__mcmp>
 801e920:	2800      	cmp	r0, #0
 801e922:	f73f adbe 	bgt.w	801e4a2 <_dtoa_r+0x4a2>
 801e926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e928:	9d00      	ldr	r5, [sp, #0]
 801e92a:	ea6f 0a03 	mvn.w	sl, r3
 801e92e:	f04f 0800 	mov.w	r8, #0
 801e932:	4631      	mov	r1, r6
 801e934:	4620      	mov	r0, r4
 801e936:	f000 ff96 	bl	801f866 <_Bfree>
 801e93a:	2f00      	cmp	r7, #0
 801e93c:	f43f aeb4 	beq.w	801e6a8 <_dtoa_r+0x6a8>
 801e940:	f1b8 0f00 	cmp.w	r8, #0
 801e944:	d005      	beq.n	801e952 <_dtoa_r+0x952>
 801e946:	45b8      	cmp	r8, r7
 801e948:	d003      	beq.n	801e952 <_dtoa_r+0x952>
 801e94a:	4641      	mov	r1, r8
 801e94c:	4620      	mov	r0, r4
 801e94e:	f000 ff8a 	bl	801f866 <_Bfree>
 801e952:	4639      	mov	r1, r7
 801e954:	4620      	mov	r0, r4
 801e956:	f000 ff86 	bl	801f866 <_Bfree>
 801e95a:	e6a5      	b.n	801e6a8 <_dtoa_r+0x6a8>
 801e95c:	2600      	movs	r6, #0
 801e95e:	4637      	mov	r7, r6
 801e960:	e7e1      	b.n	801e926 <_dtoa_r+0x926>
 801e962:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e964:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e968:	4637      	mov	r7, r6
 801e96a:	e59a      	b.n	801e4a2 <_dtoa_r+0x4a2>
 801e96c:	9b08      	ldr	r3, [sp, #32]
 801e96e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801e972:	2b00      	cmp	r3, #0
 801e974:	f000 80fc 	beq.w	801eb70 <_dtoa_r+0xb70>
 801e978:	2d00      	cmp	r5, #0
 801e97a:	dd05      	ble.n	801e988 <_dtoa_r+0x988>
 801e97c:	4639      	mov	r1, r7
 801e97e:	462a      	mov	r2, r5
 801e980:	4620      	mov	r0, r4
 801e982:	f001 f90f 	bl	801fba4 <__lshift>
 801e986:	4607      	mov	r7, r0
 801e988:	9b06      	ldr	r3, [sp, #24]
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	d05b      	beq.n	801ea46 <_dtoa_r+0xa46>
 801e98e:	6879      	ldr	r1, [r7, #4]
 801e990:	4620      	mov	r0, r4
 801e992:	f000 ff43 	bl	801f81c <_Balloc>
 801e996:	4605      	mov	r5, r0
 801e998:	b920      	cbnz	r0, 801e9a4 <_dtoa_r+0x9a4>
 801e99a:	4b80      	ldr	r3, [pc, #512]	; (801eb9c <_dtoa_r+0xb9c>)
 801e99c:	4602      	mov	r2, r0
 801e99e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801e9a2:	e45b      	b.n	801e25c <_dtoa_r+0x25c>
 801e9a4:	693a      	ldr	r2, [r7, #16]
 801e9a6:	3202      	adds	r2, #2
 801e9a8:	0092      	lsls	r2, r2, #2
 801e9aa:	f107 010c 	add.w	r1, r7, #12
 801e9ae:	300c      	adds	r0, #12
 801e9b0:	f7fb ff9a 	bl	801a8e8 <memcpy>
 801e9b4:	2201      	movs	r2, #1
 801e9b6:	4629      	mov	r1, r5
 801e9b8:	4620      	mov	r0, r4
 801e9ba:	f001 f8f3 	bl	801fba4 <__lshift>
 801e9be:	9b00      	ldr	r3, [sp, #0]
 801e9c0:	3301      	adds	r3, #1
 801e9c2:	9301      	str	r3, [sp, #4]
 801e9c4:	9b00      	ldr	r3, [sp, #0]
 801e9c6:	444b      	add	r3, r9
 801e9c8:	9307      	str	r3, [sp, #28]
 801e9ca:	9b02      	ldr	r3, [sp, #8]
 801e9cc:	f003 0301 	and.w	r3, r3, #1
 801e9d0:	46b8      	mov	r8, r7
 801e9d2:	9306      	str	r3, [sp, #24]
 801e9d4:	4607      	mov	r7, r0
 801e9d6:	9b01      	ldr	r3, [sp, #4]
 801e9d8:	4631      	mov	r1, r6
 801e9da:	3b01      	subs	r3, #1
 801e9dc:	4658      	mov	r0, fp
 801e9de:	9302      	str	r3, [sp, #8]
 801e9e0:	f7ff fa80 	bl	801dee4 <quorem>
 801e9e4:	4603      	mov	r3, r0
 801e9e6:	3330      	adds	r3, #48	; 0x30
 801e9e8:	9004      	str	r0, [sp, #16]
 801e9ea:	4641      	mov	r1, r8
 801e9ec:	4658      	mov	r0, fp
 801e9ee:	9308      	str	r3, [sp, #32]
 801e9f0:	f001 f944 	bl	801fc7c <__mcmp>
 801e9f4:	463a      	mov	r2, r7
 801e9f6:	4681      	mov	r9, r0
 801e9f8:	4631      	mov	r1, r6
 801e9fa:	4620      	mov	r0, r4
 801e9fc:	f001 f95a 	bl	801fcb4 <__mdiff>
 801ea00:	68c2      	ldr	r2, [r0, #12]
 801ea02:	9b08      	ldr	r3, [sp, #32]
 801ea04:	4605      	mov	r5, r0
 801ea06:	bb02      	cbnz	r2, 801ea4a <_dtoa_r+0xa4a>
 801ea08:	4601      	mov	r1, r0
 801ea0a:	4658      	mov	r0, fp
 801ea0c:	f001 f936 	bl	801fc7c <__mcmp>
 801ea10:	9b08      	ldr	r3, [sp, #32]
 801ea12:	4602      	mov	r2, r0
 801ea14:	4629      	mov	r1, r5
 801ea16:	4620      	mov	r0, r4
 801ea18:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ea1c:	f000 ff23 	bl	801f866 <_Bfree>
 801ea20:	9b05      	ldr	r3, [sp, #20]
 801ea22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea24:	9d01      	ldr	r5, [sp, #4]
 801ea26:	ea43 0102 	orr.w	r1, r3, r2
 801ea2a:	9b06      	ldr	r3, [sp, #24]
 801ea2c:	430b      	orrs	r3, r1
 801ea2e:	9b08      	ldr	r3, [sp, #32]
 801ea30:	d10d      	bne.n	801ea4e <_dtoa_r+0xa4e>
 801ea32:	2b39      	cmp	r3, #57	; 0x39
 801ea34:	d029      	beq.n	801ea8a <_dtoa_r+0xa8a>
 801ea36:	f1b9 0f00 	cmp.w	r9, #0
 801ea3a:	dd01      	ble.n	801ea40 <_dtoa_r+0xa40>
 801ea3c:	9b04      	ldr	r3, [sp, #16]
 801ea3e:	3331      	adds	r3, #49	; 0x31
 801ea40:	9a02      	ldr	r2, [sp, #8]
 801ea42:	7013      	strb	r3, [r2, #0]
 801ea44:	e775      	b.n	801e932 <_dtoa_r+0x932>
 801ea46:	4638      	mov	r0, r7
 801ea48:	e7b9      	b.n	801e9be <_dtoa_r+0x9be>
 801ea4a:	2201      	movs	r2, #1
 801ea4c:	e7e2      	b.n	801ea14 <_dtoa_r+0xa14>
 801ea4e:	f1b9 0f00 	cmp.w	r9, #0
 801ea52:	db06      	blt.n	801ea62 <_dtoa_r+0xa62>
 801ea54:	9905      	ldr	r1, [sp, #20]
 801ea56:	ea41 0909 	orr.w	r9, r1, r9
 801ea5a:	9906      	ldr	r1, [sp, #24]
 801ea5c:	ea59 0101 	orrs.w	r1, r9, r1
 801ea60:	d120      	bne.n	801eaa4 <_dtoa_r+0xaa4>
 801ea62:	2a00      	cmp	r2, #0
 801ea64:	ddec      	ble.n	801ea40 <_dtoa_r+0xa40>
 801ea66:	4659      	mov	r1, fp
 801ea68:	2201      	movs	r2, #1
 801ea6a:	4620      	mov	r0, r4
 801ea6c:	9301      	str	r3, [sp, #4]
 801ea6e:	f001 f899 	bl	801fba4 <__lshift>
 801ea72:	4631      	mov	r1, r6
 801ea74:	4683      	mov	fp, r0
 801ea76:	f001 f901 	bl	801fc7c <__mcmp>
 801ea7a:	2800      	cmp	r0, #0
 801ea7c:	9b01      	ldr	r3, [sp, #4]
 801ea7e:	dc02      	bgt.n	801ea86 <_dtoa_r+0xa86>
 801ea80:	d1de      	bne.n	801ea40 <_dtoa_r+0xa40>
 801ea82:	07da      	lsls	r2, r3, #31
 801ea84:	d5dc      	bpl.n	801ea40 <_dtoa_r+0xa40>
 801ea86:	2b39      	cmp	r3, #57	; 0x39
 801ea88:	d1d8      	bne.n	801ea3c <_dtoa_r+0xa3c>
 801ea8a:	9a02      	ldr	r2, [sp, #8]
 801ea8c:	2339      	movs	r3, #57	; 0x39
 801ea8e:	7013      	strb	r3, [r2, #0]
 801ea90:	462b      	mov	r3, r5
 801ea92:	461d      	mov	r5, r3
 801ea94:	3b01      	subs	r3, #1
 801ea96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ea9a:	2a39      	cmp	r2, #57	; 0x39
 801ea9c:	d050      	beq.n	801eb40 <_dtoa_r+0xb40>
 801ea9e:	3201      	adds	r2, #1
 801eaa0:	701a      	strb	r2, [r3, #0]
 801eaa2:	e746      	b.n	801e932 <_dtoa_r+0x932>
 801eaa4:	2a00      	cmp	r2, #0
 801eaa6:	dd03      	ble.n	801eab0 <_dtoa_r+0xab0>
 801eaa8:	2b39      	cmp	r3, #57	; 0x39
 801eaaa:	d0ee      	beq.n	801ea8a <_dtoa_r+0xa8a>
 801eaac:	3301      	adds	r3, #1
 801eaae:	e7c7      	b.n	801ea40 <_dtoa_r+0xa40>
 801eab0:	9a01      	ldr	r2, [sp, #4]
 801eab2:	9907      	ldr	r1, [sp, #28]
 801eab4:	f802 3c01 	strb.w	r3, [r2, #-1]
 801eab8:	428a      	cmp	r2, r1
 801eaba:	d02a      	beq.n	801eb12 <_dtoa_r+0xb12>
 801eabc:	4659      	mov	r1, fp
 801eabe:	2300      	movs	r3, #0
 801eac0:	220a      	movs	r2, #10
 801eac2:	4620      	mov	r0, r4
 801eac4:	f000 fed8 	bl	801f878 <__multadd>
 801eac8:	45b8      	cmp	r8, r7
 801eaca:	4683      	mov	fp, r0
 801eacc:	f04f 0300 	mov.w	r3, #0
 801ead0:	f04f 020a 	mov.w	r2, #10
 801ead4:	4641      	mov	r1, r8
 801ead6:	4620      	mov	r0, r4
 801ead8:	d107      	bne.n	801eaea <_dtoa_r+0xaea>
 801eada:	f000 fecd 	bl	801f878 <__multadd>
 801eade:	4680      	mov	r8, r0
 801eae0:	4607      	mov	r7, r0
 801eae2:	9b01      	ldr	r3, [sp, #4]
 801eae4:	3301      	adds	r3, #1
 801eae6:	9301      	str	r3, [sp, #4]
 801eae8:	e775      	b.n	801e9d6 <_dtoa_r+0x9d6>
 801eaea:	f000 fec5 	bl	801f878 <__multadd>
 801eaee:	4639      	mov	r1, r7
 801eaf0:	4680      	mov	r8, r0
 801eaf2:	2300      	movs	r3, #0
 801eaf4:	220a      	movs	r2, #10
 801eaf6:	4620      	mov	r0, r4
 801eaf8:	f000 febe 	bl	801f878 <__multadd>
 801eafc:	4607      	mov	r7, r0
 801eafe:	e7f0      	b.n	801eae2 <_dtoa_r+0xae2>
 801eb00:	f1b9 0f00 	cmp.w	r9, #0
 801eb04:	9a00      	ldr	r2, [sp, #0]
 801eb06:	bfcc      	ite	gt
 801eb08:	464d      	movgt	r5, r9
 801eb0a:	2501      	movle	r5, #1
 801eb0c:	4415      	add	r5, r2
 801eb0e:	f04f 0800 	mov.w	r8, #0
 801eb12:	4659      	mov	r1, fp
 801eb14:	2201      	movs	r2, #1
 801eb16:	4620      	mov	r0, r4
 801eb18:	9301      	str	r3, [sp, #4]
 801eb1a:	f001 f843 	bl	801fba4 <__lshift>
 801eb1e:	4631      	mov	r1, r6
 801eb20:	4683      	mov	fp, r0
 801eb22:	f001 f8ab 	bl	801fc7c <__mcmp>
 801eb26:	2800      	cmp	r0, #0
 801eb28:	dcb2      	bgt.n	801ea90 <_dtoa_r+0xa90>
 801eb2a:	d102      	bne.n	801eb32 <_dtoa_r+0xb32>
 801eb2c:	9b01      	ldr	r3, [sp, #4]
 801eb2e:	07db      	lsls	r3, r3, #31
 801eb30:	d4ae      	bmi.n	801ea90 <_dtoa_r+0xa90>
 801eb32:	462b      	mov	r3, r5
 801eb34:	461d      	mov	r5, r3
 801eb36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801eb3a:	2a30      	cmp	r2, #48	; 0x30
 801eb3c:	d0fa      	beq.n	801eb34 <_dtoa_r+0xb34>
 801eb3e:	e6f8      	b.n	801e932 <_dtoa_r+0x932>
 801eb40:	9a00      	ldr	r2, [sp, #0]
 801eb42:	429a      	cmp	r2, r3
 801eb44:	d1a5      	bne.n	801ea92 <_dtoa_r+0xa92>
 801eb46:	f10a 0a01 	add.w	sl, sl, #1
 801eb4a:	2331      	movs	r3, #49	; 0x31
 801eb4c:	e779      	b.n	801ea42 <_dtoa_r+0xa42>
 801eb4e:	4b14      	ldr	r3, [pc, #80]	; (801eba0 <_dtoa_r+0xba0>)
 801eb50:	f7ff bab1 	b.w	801e0b6 <_dtoa_r+0xb6>
 801eb54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eb56:	2b00      	cmp	r3, #0
 801eb58:	f47f aa93 	bne.w	801e082 <_dtoa_r+0x82>
 801eb5c:	4b11      	ldr	r3, [pc, #68]	; (801eba4 <_dtoa_r+0xba4>)
 801eb5e:	f7ff baaa 	b.w	801e0b6 <_dtoa_r+0xb6>
 801eb62:	f1b9 0f00 	cmp.w	r9, #0
 801eb66:	dc03      	bgt.n	801eb70 <_dtoa_r+0xb70>
 801eb68:	9b05      	ldr	r3, [sp, #20]
 801eb6a:	2b02      	cmp	r3, #2
 801eb6c:	f73f aeca 	bgt.w	801e904 <_dtoa_r+0x904>
 801eb70:	9d00      	ldr	r5, [sp, #0]
 801eb72:	4631      	mov	r1, r6
 801eb74:	4658      	mov	r0, fp
 801eb76:	f7ff f9b5 	bl	801dee4 <quorem>
 801eb7a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801eb7e:	f805 3b01 	strb.w	r3, [r5], #1
 801eb82:	9a00      	ldr	r2, [sp, #0]
 801eb84:	1aaa      	subs	r2, r5, r2
 801eb86:	4591      	cmp	r9, r2
 801eb88:	ddba      	ble.n	801eb00 <_dtoa_r+0xb00>
 801eb8a:	4659      	mov	r1, fp
 801eb8c:	2300      	movs	r3, #0
 801eb8e:	220a      	movs	r2, #10
 801eb90:	4620      	mov	r0, r4
 801eb92:	f000 fe71 	bl	801f878 <__multadd>
 801eb96:	4683      	mov	fp, r0
 801eb98:	e7eb      	b.n	801eb72 <_dtoa_r+0xb72>
 801eb9a:	bf00      	nop
 801eb9c:	08028fcd 	.word	0x08028fcd
 801eba0:	08028f42 	.word	0x08028f42
 801eba4:	08028fc4 	.word	0x08028fc4

0801eba8 <__errno>:
 801eba8:	4b01      	ldr	r3, [pc, #4]	; (801ebb0 <__errno+0x8>)
 801ebaa:	6818      	ldr	r0, [r3, #0]
 801ebac:	4770      	bx	lr
 801ebae:	bf00      	nop
 801ebb0:	20000038 	.word	0x20000038

0801ebb4 <__sflush_r>:
 801ebb4:	898b      	ldrh	r3, [r1, #12]
 801ebb6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ebba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebbe:	4605      	mov	r5, r0
 801ebc0:	0718      	lsls	r0, r3, #28
 801ebc2:	460c      	mov	r4, r1
 801ebc4:	d45f      	bmi.n	801ec86 <__sflush_r+0xd2>
 801ebc6:	684b      	ldr	r3, [r1, #4]
 801ebc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	818a      	strh	r2, [r1, #12]
 801ebd0:	dc05      	bgt.n	801ebde <__sflush_r+0x2a>
 801ebd2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	dc02      	bgt.n	801ebde <__sflush_r+0x2a>
 801ebd8:	2000      	movs	r0, #0
 801ebda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ebde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ebe0:	2e00      	cmp	r6, #0
 801ebe2:	d0f9      	beq.n	801ebd8 <__sflush_r+0x24>
 801ebe4:	2300      	movs	r3, #0
 801ebe6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ebea:	682f      	ldr	r7, [r5, #0]
 801ebec:	602b      	str	r3, [r5, #0]
 801ebee:	d036      	beq.n	801ec5e <__sflush_r+0xaa>
 801ebf0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801ebf2:	89a3      	ldrh	r3, [r4, #12]
 801ebf4:	075a      	lsls	r2, r3, #29
 801ebf6:	d505      	bpl.n	801ec04 <__sflush_r+0x50>
 801ebf8:	6863      	ldr	r3, [r4, #4]
 801ebfa:	1ac0      	subs	r0, r0, r3
 801ebfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ebfe:	b10b      	cbz	r3, 801ec04 <__sflush_r+0x50>
 801ec00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ec02:	1ac0      	subs	r0, r0, r3
 801ec04:	2300      	movs	r3, #0
 801ec06:	4602      	mov	r2, r0
 801ec08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ec0a:	69e1      	ldr	r1, [r4, #28]
 801ec0c:	4628      	mov	r0, r5
 801ec0e:	47b0      	blx	r6
 801ec10:	1c43      	adds	r3, r0, #1
 801ec12:	89a3      	ldrh	r3, [r4, #12]
 801ec14:	d106      	bne.n	801ec24 <__sflush_r+0x70>
 801ec16:	6829      	ldr	r1, [r5, #0]
 801ec18:	291d      	cmp	r1, #29
 801ec1a:	d830      	bhi.n	801ec7e <__sflush_r+0xca>
 801ec1c:	4a2b      	ldr	r2, [pc, #172]	; (801eccc <__sflush_r+0x118>)
 801ec1e:	40ca      	lsrs	r2, r1
 801ec20:	07d6      	lsls	r6, r2, #31
 801ec22:	d52c      	bpl.n	801ec7e <__sflush_r+0xca>
 801ec24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ec28:	b21b      	sxth	r3, r3
 801ec2a:	2200      	movs	r2, #0
 801ec2c:	6062      	str	r2, [r4, #4]
 801ec2e:	04d9      	lsls	r1, r3, #19
 801ec30:	6922      	ldr	r2, [r4, #16]
 801ec32:	81a3      	strh	r3, [r4, #12]
 801ec34:	6022      	str	r2, [r4, #0]
 801ec36:	d504      	bpl.n	801ec42 <__sflush_r+0x8e>
 801ec38:	1c42      	adds	r2, r0, #1
 801ec3a:	d101      	bne.n	801ec40 <__sflush_r+0x8c>
 801ec3c:	682b      	ldr	r3, [r5, #0]
 801ec3e:	b903      	cbnz	r3, 801ec42 <__sflush_r+0x8e>
 801ec40:	6520      	str	r0, [r4, #80]	; 0x50
 801ec42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ec44:	602f      	str	r7, [r5, #0]
 801ec46:	2900      	cmp	r1, #0
 801ec48:	d0c6      	beq.n	801ebd8 <__sflush_r+0x24>
 801ec4a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801ec4e:	4299      	cmp	r1, r3
 801ec50:	d002      	beq.n	801ec58 <__sflush_r+0xa4>
 801ec52:	4628      	mov	r0, r5
 801ec54:	f000 f938 	bl	801eec8 <_free_r>
 801ec58:	2000      	movs	r0, #0
 801ec5a:	6320      	str	r0, [r4, #48]	; 0x30
 801ec5c:	e7bd      	b.n	801ebda <__sflush_r+0x26>
 801ec5e:	69e1      	ldr	r1, [r4, #28]
 801ec60:	2301      	movs	r3, #1
 801ec62:	4628      	mov	r0, r5
 801ec64:	47b0      	blx	r6
 801ec66:	1c41      	adds	r1, r0, #1
 801ec68:	d1c3      	bne.n	801ebf2 <__sflush_r+0x3e>
 801ec6a:	682b      	ldr	r3, [r5, #0]
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d0c0      	beq.n	801ebf2 <__sflush_r+0x3e>
 801ec70:	2b1d      	cmp	r3, #29
 801ec72:	d001      	beq.n	801ec78 <__sflush_r+0xc4>
 801ec74:	2b16      	cmp	r3, #22
 801ec76:	d101      	bne.n	801ec7c <__sflush_r+0xc8>
 801ec78:	602f      	str	r7, [r5, #0]
 801ec7a:	e7ad      	b.n	801ebd8 <__sflush_r+0x24>
 801ec7c:	89a3      	ldrh	r3, [r4, #12]
 801ec7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ec82:	81a3      	strh	r3, [r4, #12]
 801ec84:	e7a9      	b.n	801ebda <__sflush_r+0x26>
 801ec86:	690f      	ldr	r7, [r1, #16]
 801ec88:	2f00      	cmp	r7, #0
 801ec8a:	d0a5      	beq.n	801ebd8 <__sflush_r+0x24>
 801ec8c:	079b      	lsls	r3, r3, #30
 801ec8e:	680e      	ldr	r6, [r1, #0]
 801ec90:	bf08      	it	eq
 801ec92:	694b      	ldreq	r3, [r1, #20]
 801ec94:	600f      	str	r7, [r1, #0]
 801ec96:	bf18      	it	ne
 801ec98:	2300      	movne	r3, #0
 801ec9a:	eba6 0807 	sub.w	r8, r6, r7
 801ec9e:	608b      	str	r3, [r1, #8]
 801eca0:	f1b8 0f00 	cmp.w	r8, #0
 801eca4:	dd98      	ble.n	801ebd8 <__sflush_r+0x24>
 801eca6:	69e1      	ldr	r1, [r4, #28]
 801eca8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801ecaa:	4643      	mov	r3, r8
 801ecac:	463a      	mov	r2, r7
 801ecae:	4628      	mov	r0, r5
 801ecb0:	47b0      	blx	r6
 801ecb2:	2800      	cmp	r0, #0
 801ecb4:	dc06      	bgt.n	801ecc4 <__sflush_r+0x110>
 801ecb6:	89a3      	ldrh	r3, [r4, #12]
 801ecb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ecbc:	81a3      	strh	r3, [r4, #12]
 801ecbe:	f04f 30ff 	mov.w	r0, #4294967295
 801ecc2:	e78a      	b.n	801ebda <__sflush_r+0x26>
 801ecc4:	4407      	add	r7, r0
 801ecc6:	eba8 0800 	sub.w	r8, r8, r0
 801ecca:	e7e9      	b.n	801eca0 <__sflush_r+0xec>
 801eccc:	20400001 	.word	0x20400001

0801ecd0 <_fflush_r>:
 801ecd0:	b538      	push	{r3, r4, r5, lr}
 801ecd2:	460c      	mov	r4, r1
 801ecd4:	4605      	mov	r5, r0
 801ecd6:	b118      	cbz	r0, 801ece0 <_fflush_r+0x10>
 801ecd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801ecda:	b90b      	cbnz	r3, 801ece0 <_fflush_r+0x10>
 801ecdc:	f000 f864 	bl	801eda8 <__sinit>
 801ece0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ece4:	b1bb      	cbz	r3, 801ed16 <_fflush_r+0x46>
 801ece6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ece8:	07d0      	lsls	r0, r2, #31
 801ecea:	d404      	bmi.n	801ecf6 <_fflush_r+0x26>
 801ecec:	0599      	lsls	r1, r3, #22
 801ecee:	d402      	bmi.n	801ecf6 <_fflush_r+0x26>
 801ecf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ecf2:	f000 fac6 	bl	801f282 <__retarget_lock_acquire_recursive>
 801ecf6:	4628      	mov	r0, r5
 801ecf8:	4621      	mov	r1, r4
 801ecfa:	f7ff ff5b 	bl	801ebb4 <__sflush_r>
 801ecfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ed00:	07da      	lsls	r2, r3, #31
 801ed02:	4605      	mov	r5, r0
 801ed04:	d405      	bmi.n	801ed12 <_fflush_r+0x42>
 801ed06:	89a3      	ldrh	r3, [r4, #12]
 801ed08:	059b      	lsls	r3, r3, #22
 801ed0a:	d402      	bmi.n	801ed12 <_fflush_r+0x42>
 801ed0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed0e:	f000 faba 	bl	801f286 <__retarget_lock_release_recursive>
 801ed12:	4628      	mov	r0, r5
 801ed14:	bd38      	pop	{r3, r4, r5, pc}
 801ed16:	461d      	mov	r5, r3
 801ed18:	e7fb      	b.n	801ed12 <_fflush_r+0x42>
	...

0801ed1c <std>:
 801ed1c:	2300      	movs	r3, #0
 801ed1e:	b510      	push	{r4, lr}
 801ed20:	4604      	mov	r4, r0
 801ed22:	e9c0 3300 	strd	r3, r3, [r0]
 801ed26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ed2a:	6083      	str	r3, [r0, #8]
 801ed2c:	8181      	strh	r1, [r0, #12]
 801ed2e:	6643      	str	r3, [r0, #100]	; 0x64
 801ed30:	81c2      	strh	r2, [r0, #14]
 801ed32:	6183      	str	r3, [r0, #24]
 801ed34:	4619      	mov	r1, r3
 801ed36:	2208      	movs	r2, #8
 801ed38:	305c      	adds	r0, #92	; 0x5c
 801ed3a:	f7fb fdfd 	bl	801a938 <memset>
 801ed3e:	4b07      	ldr	r3, [pc, #28]	; (801ed5c <std+0x40>)
 801ed40:	6223      	str	r3, [r4, #32]
 801ed42:	4b07      	ldr	r3, [pc, #28]	; (801ed60 <std+0x44>)
 801ed44:	6263      	str	r3, [r4, #36]	; 0x24
 801ed46:	4b07      	ldr	r3, [pc, #28]	; (801ed64 <std+0x48>)
 801ed48:	62a3      	str	r3, [r4, #40]	; 0x28
 801ed4a:	4b07      	ldr	r3, [pc, #28]	; (801ed68 <std+0x4c>)
 801ed4c:	61e4      	str	r4, [r4, #28]
 801ed4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ed50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ed54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed58:	f000 ba90 	b.w	801f27c <__retarget_lock_init_recursive>
 801ed5c:	0801ff65 	.word	0x0801ff65
 801ed60:	0801ff8b 	.word	0x0801ff8b
 801ed64:	0801ffc3 	.word	0x0801ffc3
 801ed68:	0801ffe7 	.word	0x0801ffe7

0801ed6c <_cleanup_r>:
 801ed6c:	4901      	ldr	r1, [pc, #4]	; (801ed74 <_cleanup_r+0x8>)
 801ed6e:	f000 b96b 	b.w	801f048 <_fwalk_reent>
 801ed72:	bf00      	nop
 801ed74:	08021e6d 	.word	0x08021e6d

0801ed78 <__sfp_lock_acquire>:
 801ed78:	4801      	ldr	r0, [pc, #4]	; (801ed80 <__sfp_lock_acquire+0x8>)
 801ed7a:	f000 ba82 	b.w	801f282 <__retarget_lock_acquire_recursive>
 801ed7e:	bf00      	nop
 801ed80:	2000be40 	.word	0x2000be40

0801ed84 <__sfp_lock_release>:
 801ed84:	4801      	ldr	r0, [pc, #4]	; (801ed8c <__sfp_lock_release+0x8>)
 801ed86:	f000 ba7e 	b.w	801f286 <__retarget_lock_release_recursive>
 801ed8a:	bf00      	nop
 801ed8c:	2000be40 	.word	0x2000be40

0801ed90 <__sinit_lock_acquire>:
 801ed90:	4801      	ldr	r0, [pc, #4]	; (801ed98 <__sinit_lock_acquire+0x8>)
 801ed92:	f000 ba76 	b.w	801f282 <__retarget_lock_acquire_recursive>
 801ed96:	bf00      	nop
 801ed98:	2000be3b 	.word	0x2000be3b

0801ed9c <__sinit_lock_release>:
 801ed9c:	4801      	ldr	r0, [pc, #4]	; (801eda4 <__sinit_lock_release+0x8>)
 801ed9e:	f000 ba72 	b.w	801f286 <__retarget_lock_release_recursive>
 801eda2:	bf00      	nop
 801eda4:	2000be3b 	.word	0x2000be3b

0801eda8 <__sinit>:
 801eda8:	b510      	push	{r4, lr}
 801edaa:	4604      	mov	r4, r0
 801edac:	f7ff fff0 	bl	801ed90 <__sinit_lock_acquire>
 801edb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801edb2:	b11a      	cbz	r2, 801edbc <__sinit+0x14>
 801edb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801edb8:	f7ff bff0 	b.w	801ed9c <__sinit_lock_release>
 801edbc:	4b0d      	ldr	r3, [pc, #52]	; (801edf4 <__sinit+0x4c>)
 801edbe:	63e3      	str	r3, [r4, #60]	; 0x3c
 801edc0:	2303      	movs	r3, #3
 801edc2:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 801edc6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801edca:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801edce:	6860      	ldr	r0, [r4, #4]
 801edd0:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801edd4:	2104      	movs	r1, #4
 801edd6:	f7ff ffa1 	bl	801ed1c <std>
 801edda:	68a0      	ldr	r0, [r4, #8]
 801eddc:	2201      	movs	r2, #1
 801edde:	2109      	movs	r1, #9
 801ede0:	f7ff ff9c 	bl	801ed1c <std>
 801ede4:	68e0      	ldr	r0, [r4, #12]
 801ede6:	2202      	movs	r2, #2
 801ede8:	2112      	movs	r1, #18
 801edea:	f7ff ff97 	bl	801ed1c <std>
 801edee:	2301      	movs	r3, #1
 801edf0:	63a3      	str	r3, [r4, #56]	; 0x38
 801edf2:	e7df      	b.n	801edb4 <__sinit+0xc>
 801edf4:	0801ed6d 	.word	0x0801ed6d

0801edf8 <__libc_fini_array>:
 801edf8:	b538      	push	{r3, r4, r5, lr}
 801edfa:	4d07      	ldr	r5, [pc, #28]	; (801ee18 <__libc_fini_array+0x20>)
 801edfc:	4c07      	ldr	r4, [pc, #28]	; (801ee1c <__libc_fini_array+0x24>)
 801edfe:	1b64      	subs	r4, r4, r5
 801ee00:	10a4      	asrs	r4, r4, #2
 801ee02:	b91c      	cbnz	r4, 801ee0c <__libc_fini_array+0x14>
 801ee04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ee08:	f004 be66 	b.w	8023ad8 <_fini>
 801ee0c:	3c01      	subs	r4, #1
 801ee0e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801ee12:	4798      	blx	r3
 801ee14:	e7f5      	b.n	801ee02 <__libc_fini_array+0xa>
 801ee16:	bf00      	nop
 801ee18:	08029278 	.word	0x08029278
 801ee1c:	0802927c 	.word	0x0802927c

0801ee20 <_malloc_trim_r>:
 801ee20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee24:	4606      	mov	r6, r0
 801ee26:	2008      	movs	r0, #8
 801ee28:	460c      	mov	r4, r1
 801ee2a:	f002 fa23 	bl	8021274 <sysconf>
 801ee2e:	4f23      	ldr	r7, [pc, #140]	; (801eebc <_malloc_trim_r+0x9c>)
 801ee30:	4680      	mov	r8, r0
 801ee32:	4630      	mov	r0, r6
 801ee34:	f000 fce6 	bl	801f804 <__malloc_lock>
 801ee38:	68bb      	ldr	r3, [r7, #8]
 801ee3a:	685d      	ldr	r5, [r3, #4]
 801ee3c:	f025 0503 	bic.w	r5, r5, #3
 801ee40:	1b2c      	subs	r4, r5, r4
 801ee42:	3c11      	subs	r4, #17
 801ee44:	4444      	add	r4, r8
 801ee46:	fbb4 f4f8 	udiv	r4, r4, r8
 801ee4a:	3c01      	subs	r4, #1
 801ee4c:	fb08 f404 	mul.w	r4, r8, r4
 801ee50:	45a0      	cmp	r8, r4
 801ee52:	dd05      	ble.n	801ee60 <_malloc_trim_r+0x40>
 801ee54:	4630      	mov	r0, r6
 801ee56:	f000 fcdb 	bl	801f810 <__malloc_unlock>
 801ee5a:	2000      	movs	r0, #0
 801ee5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee60:	2100      	movs	r1, #0
 801ee62:	4630      	mov	r0, r6
 801ee64:	f001 f842 	bl	801feec <_sbrk_r>
 801ee68:	68bb      	ldr	r3, [r7, #8]
 801ee6a:	442b      	add	r3, r5
 801ee6c:	4298      	cmp	r0, r3
 801ee6e:	d1f1      	bne.n	801ee54 <_malloc_trim_r+0x34>
 801ee70:	4261      	negs	r1, r4
 801ee72:	4630      	mov	r0, r6
 801ee74:	f001 f83a 	bl	801feec <_sbrk_r>
 801ee78:	3001      	adds	r0, #1
 801ee7a:	d110      	bne.n	801ee9e <_malloc_trim_r+0x7e>
 801ee7c:	2100      	movs	r1, #0
 801ee7e:	4630      	mov	r0, r6
 801ee80:	f001 f834 	bl	801feec <_sbrk_r>
 801ee84:	68ba      	ldr	r2, [r7, #8]
 801ee86:	1a83      	subs	r3, r0, r2
 801ee88:	2b0f      	cmp	r3, #15
 801ee8a:	dde3      	ble.n	801ee54 <_malloc_trim_r+0x34>
 801ee8c:	490c      	ldr	r1, [pc, #48]	; (801eec0 <_malloc_trim_r+0xa0>)
 801ee8e:	6809      	ldr	r1, [r1, #0]
 801ee90:	1a40      	subs	r0, r0, r1
 801ee92:	490c      	ldr	r1, [pc, #48]	; (801eec4 <_malloc_trim_r+0xa4>)
 801ee94:	f043 0301 	orr.w	r3, r3, #1
 801ee98:	6008      	str	r0, [r1, #0]
 801ee9a:	6053      	str	r3, [r2, #4]
 801ee9c:	e7da      	b.n	801ee54 <_malloc_trim_r+0x34>
 801ee9e:	68bb      	ldr	r3, [r7, #8]
 801eea0:	4a08      	ldr	r2, [pc, #32]	; (801eec4 <_malloc_trim_r+0xa4>)
 801eea2:	1b2d      	subs	r5, r5, r4
 801eea4:	f045 0501 	orr.w	r5, r5, #1
 801eea8:	605d      	str	r5, [r3, #4]
 801eeaa:	6813      	ldr	r3, [r2, #0]
 801eeac:	4630      	mov	r0, r6
 801eeae:	1b1c      	subs	r4, r3, r4
 801eeb0:	6014      	str	r4, [r2, #0]
 801eeb2:	f000 fcad 	bl	801f810 <__malloc_unlock>
 801eeb6:	2001      	movs	r0, #1
 801eeb8:	e7d0      	b.n	801ee5c <_malloc_trim_r+0x3c>
 801eeba:	bf00      	nop
 801eebc:	200004d0 	.word	0x200004d0
 801eec0:	200008d8 	.word	0x200008d8
 801eec4:	20005054 	.word	0x20005054

0801eec8 <_free_r>:
 801eec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeca:	4605      	mov	r5, r0
 801eecc:	460f      	mov	r7, r1
 801eece:	2900      	cmp	r1, #0
 801eed0:	f000 80b1 	beq.w	801f036 <_free_r+0x16e>
 801eed4:	f000 fc96 	bl	801f804 <__malloc_lock>
 801eed8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801eedc:	4856      	ldr	r0, [pc, #344]	; (801f038 <_free_r+0x170>)
 801eede:	f022 0401 	bic.w	r4, r2, #1
 801eee2:	f1a7 0308 	sub.w	r3, r7, #8
 801eee6:	eb03 0c04 	add.w	ip, r3, r4
 801eeea:	6881      	ldr	r1, [r0, #8]
 801eeec:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801eef0:	4561      	cmp	r1, ip
 801eef2:	f026 0603 	bic.w	r6, r6, #3
 801eef6:	f002 0201 	and.w	r2, r2, #1
 801eefa:	d11b      	bne.n	801ef34 <_free_r+0x6c>
 801eefc:	4434      	add	r4, r6
 801eefe:	b93a      	cbnz	r2, 801ef10 <_free_r+0x48>
 801ef00:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801ef04:	1a9b      	subs	r3, r3, r2
 801ef06:	4414      	add	r4, r2
 801ef08:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801ef0c:	60ca      	str	r2, [r1, #12]
 801ef0e:	6091      	str	r1, [r2, #8]
 801ef10:	f044 0201 	orr.w	r2, r4, #1
 801ef14:	605a      	str	r2, [r3, #4]
 801ef16:	6083      	str	r3, [r0, #8]
 801ef18:	4b48      	ldr	r3, [pc, #288]	; (801f03c <_free_r+0x174>)
 801ef1a:	681b      	ldr	r3, [r3, #0]
 801ef1c:	42a3      	cmp	r3, r4
 801ef1e:	d804      	bhi.n	801ef2a <_free_r+0x62>
 801ef20:	4b47      	ldr	r3, [pc, #284]	; (801f040 <_free_r+0x178>)
 801ef22:	4628      	mov	r0, r5
 801ef24:	6819      	ldr	r1, [r3, #0]
 801ef26:	f7ff ff7b 	bl	801ee20 <_malloc_trim_r>
 801ef2a:	4628      	mov	r0, r5
 801ef2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ef30:	f000 bc6e 	b.w	801f810 <__malloc_unlock>
 801ef34:	f8cc 6004 	str.w	r6, [ip, #4]
 801ef38:	2a00      	cmp	r2, #0
 801ef3a:	d138      	bne.n	801efae <_free_r+0xe6>
 801ef3c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801ef40:	1a5b      	subs	r3, r3, r1
 801ef42:	440c      	add	r4, r1
 801ef44:	6899      	ldr	r1, [r3, #8]
 801ef46:	f100 0708 	add.w	r7, r0, #8
 801ef4a:	42b9      	cmp	r1, r7
 801ef4c:	d031      	beq.n	801efb2 <_free_r+0xea>
 801ef4e:	68df      	ldr	r7, [r3, #12]
 801ef50:	60cf      	str	r7, [r1, #12]
 801ef52:	60b9      	str	r1, [r7, #8]
 801ef54:	eb0c 0106 	add.w	r1, ip, r6
 801ef58:	6849      	ldr	r1, [r1, #4]
 801ef5a:	07c9      	lsls	r1, r1, #31
 801ef5c:	d40b      	bmi.n	801ef76 <_free_r+0xae>
 801ef5e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801ef62:	4434      	add	r4, r6
 801ef64:	bb3a      	cbnz	r2, 801efb6 <_free_r+0xee>
 801ef66:	4e37      	ldr	r6, [pc, #220]	; (801f044 <_free_r+0x17c>)
 801ef68:	42b1      	cmp	r1, r6
 801ef6a:	d124      	bne.n	801efb6 <_free_r+0xee>
 801ef6c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ef70:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801ef74:	2201      	movs	r2, #1
 801ef76:	f044 0101 	orr.w	r1, r4, #1
 801ef7a:	6059      	str	r1, [r3, #4]
 801ef7c:	511c      	str	r4, [r3, r4]
 801ef7e:	2a00      	cmp	r2, #0
 801ef80:	d1d3      	bne.n	801ef2a <_free_r+0x62>
 801ef82:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801ef86:	d21b      	bcs.n	801efc0 <_free_r+0xf8>
 801ef88:	0961      	lsrs	r1, r4, #5
 801ef8a:	08e2      	lsrs	r2, r4, #3
 801ef8c:	2401      	movs	r4, #1
 801ef8e:	408c      	lsls	r4, r1
 801ef90:	6841      	ldr	r1, [r0, #4]
 801ef92:	3201      	adds	r2, #1
 801ef94:	430c      	orrs	r4, r1
 801ef96:	6044      	str	r4, [r0, #4]
 801ef98:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801ef9c:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 801efa0:	3908      	subs	r1, #8
 801efa2:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801efa6:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801efaa:	60e3      	str	r3, [r4, #12]
 801efac:	e7bd      	b.n	801ef2a <_free_r+0x62>
 801efae:	2200      	movs	r2, #0
 801efb0:	e7d0      	b.n	801ef54 <_free_r+0x8c>
 801efb2:	2201      	movs	r2, #1
 801efb4:	e7ce      	b.n	801ef54 <_free_r+0x8c>
 801efb6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801efba:	60ce      	str	r6, [r1, #12]
 801efbc:	60b1      	str	r1, [r6, #8]
 801efbe:	e7da      	b.n	801ef76 <_free_r+0xae>
 801efc0:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801efc4:	ea4f 2254 	mov.w	r2, r4, lsr #9
 801efc8:	d214      	bcs.n	801eff4 <_free_r+0x12c>
 801efca:	09a2      	lsrs	r2, r4, #6
 801efcc:	3238      	adds	r2, #56	; 0x38
 801efce:	1c51      	adds	r1, r2, #1
 801efd0:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801efd4:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 801efd8:	428e      	cmp	r6, r1
 801efda:	d125      	bne.n	801f028 <_free_r+0x160>
 801efdc:	2401      	movs	r4, #1
 801efde:	1092      	asrs	r2, r2, #2
 801efe0:	fa04 f202 	lsl.w	r2, r4, r2
 801efe4:	6844      	ldr	r4, [r0, #4]
 801efe6:	4322      	orrs	r2, r4
 801efe8:	6042      	str	r2, [r0, #4]
 801efea:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801efee:	60b3      	str	r3, [r6, #8]
 801eff0:	60cb      	str	r3, [r1, #12]
 801eff2:	e79a      	b.n	801ef2a <_free_r+0x62>
 801eff4:	2a14      	cmp	r2, #20
 801eff6:	d801      	bhi.n	801effc <_free_r+0x134>
 801eff8:	325b      	adds	r2, #91	; 0x5b
 801effa:	e7e8      	b.n	801efce <_free_r+0x106>
 801effc:	2a54      	cmp	r2, #84	; 0x54
 801effe:	d802      	bhi.n	801f006 <_free_r+0x13e>
 801f000:	0b22      	lsrs	r2, r4, #12
 801f002:	326e      	adds	r2, #110	; 0x6e
 801f004:	e7e3      	b.n	801efce <_free_r+0x106>
 801f006:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801f00a:	d802      	bhi.n	801f012 <_free_r+0x14a>
 801f00c:	0be2      	lsrs	r2, r4, #15
 801f00e:	3277      	adds	r2, #119	; 0x77
 801f010:	e7dd      	b.n	801efce <_free_r+0x106>
 801f012:	f240 5154 	movw	r1, #1364	; 0x554
 801f016:	428a      	cmp	r2, r1
 801f018:	bf9a      	itte	ls
 801f01a:	0ca2      	lsrls	r2, r4, #18
 801f01c:	327c      	addls	r2, #124	; 0x7c
 801f01e:	227e      	movhi	r2, #126	; 0x7e
 801f020:	e7d5      	b.n	801efce <_free_r+0x106>
 801f022:	6889      	ldr	r1, [r1, #8]
 801f024:	428e      	cmp	r6, r1
 801f026:	d004      	beq.n	801f032 <_free_r+0x16a>
 801f028:	684a      	ldr	r2, [r1, #4]
 801f02a:	f022 0203 	bic.w	r2, r2, #3
 801f02e:	42a2      	cmp	r2, r4
 801f030:	d8f7      	bhi.n	801f022 <_free_r+0x15a>
 801f032:	68ce      	ldr	r6, [r1, #12]
 801f034:	e7d9      	b.n	801efea <_free_r+0x122>
 801f036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f038:	200004d0 	.word	0x200004d0
 801f03c:	200008dc 	.word	0x200008dc
 801f040:	20005084 	.word	0x20005084
 801f044:	200004d8 	.word	0x200004d8

0801f048 <_fwalk_reent>:
 801f048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f04c:	4606      	mov	r6, r0
 801f04e:	4688      	mov	r8, r1
 801f050:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 801f054:	2700      	movs	r7, #0
 801f056:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f05a:	f1b9 0901 	subs.w	r9, r9, #1
 801f05e:	d505      	bpl.n	801f06c <_fwalk_reent+0x24>
 801f060:	6824      	ldr	r4, [r4, #0]
 801f062:	2c00      	cmp	r4, #0
 801f064:	d1f7      	bne.n	801f056 <_fwalk_reent+0xe>
 801f066:	4638      	mov	r0, r7
 801f068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f06c:	89ab      	ldrh	r3, [r5, #12]
 801f06e:	2b01      	cmp	r3, #1
 801f070:	d907      	bls.n	801f082 <_fwalk_reent+0x3a>
 801f072:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f076:	3301      	adds	r3, #1
 801f078:	d003      	beq.n	801f082 <_fwalk_reent+0x3a>
 801f07a:	4629      	mov	r1, r5
 801f07c:	4630      	mov	r0, r6
 801f07e:	47c0      	blx	r8
 801f080:	4307      	orrs	r7, r0
 801f082:	3568      	adds	r5, #104	; 0x68
 801f084:	e7e9      	b.n	801f05a <_fwalk_reent+0x12>
	...

0801f088 <_findenv_r>:
 801f088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f08c:	4607      	mov	r7, r0
 801f08e:	4689      	mov	r9, r1
 801f090:	4616      	mov	r6, r2
 801f092:	f002 fedf 	bl	8021e54 <__env_lock>
 801f096:	4b18      	ldr	r3, [pc, #96]	; (801f0f8 <_findenv_r+0x70>)
 801f098:	681c      	ldr	r4, [r3, #0]
 801f09a:	469a      	mov	sl, r3
 801f09c:	b134      	cbz	r4, 801f0ac <_findenv_r+0x24>
 801f09e:	464b      	mov	r3, r9
 801f0a0:	4698      	mov	r8, r3
 801f0a2:	f813 1b01 	ldrb.w	r1, [r3], #1
 801f0a6:	b139      	cbz	r1, 801f0b8 <_findenv_r+0x30>
 801f0a8:	293d      	cmp	r1, #61	; 0x3d
 801f0aa:	d1f9      	bne.n	801f0a0 <_findenv_r+0x18>
 801f0ac:	4638      	mov	r0, r7
 801f0ae:	f002 fed7 	bl	8021e60 <__env_unlock>
 801f0b2:	2000      	movs	r0, #0
 801f0b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0b8:	eba8 0809 	sub.w	r8, r8, r9
 801f0bc:	46a3      	mov	fp, r4
 801f0be:	f854 0b04 	ldr.w	r0, [r4], #4
 801f0c2:	2800      	cmp	r0, #0
 801f0c4:	d0f2      	beq.n	801f0ac <_findenv_r+0x24>
 801f0c6:	4642      	mov	r2, r8
 801f0c8:	4649      	mov	r1, r9
 801f0ca:	f7fb ff4c 	bl	801af66 <strncmp>
 801f0ce:	2800      	cmp	r0, #0
 801f0d0:	d1f4      	bne.n	801f0bc <_findenv_r+0x34>
 801f0d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f0d6:	eb03 0508 	add.w	r5, r3, r8
 801f0da:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f0de:	2b3d      	cmp	r3, #61	; 0x3d
 801f0e0:	d1ec      	bne.n	801f0bc <_findenv_r+0x34>
 801f0e2:	f8da 3000 	ldr.w	r3, [sl]
 801f0e6:	ebab 0303 	sub.w	r3, fp, r3
 801f0ea:	109b      	asrs	r3, r3, #2
 801f0ec:	4638      	mov	r0, r7
 801f0ee:	6033      	str	r3, [r6, #0]
 801f0f0:	f002 feb6 	bl	8021e60 <__env_unlock>
 801f0f4:	1c68      	adds	r0, r5, #1
 801f0f6:	e7dd      	b.n	801f0b4 <_findenv_r+0x2c>
 801f0f8:	20000018 	.word	0x20000018

0801f0fc <_getenv_r>:
 801f0fc:	b507      	push	{r0, r1, r2, lr}
 801f0fe:	aa01      	add	r2, sp, #4
 801f100:	f7ff ffc2 	bl	801f088 <_findenv_r>
 801f104:	b003      	add	sp, #12
 801f106:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801f10c <__gettzinfo>:
 801f10c:	4800      	ldr	r0, [pc, #0]	; (801f110 <__gettzinfo+0x4>)
 801f10e:	4770      	bx	lr
 801f110:	20000478 	.word	0x20000478

0801f114 <gmtime_r>:
 801f114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f118:	e9d0 6700 	ldrd	r6, r7, [r0]
 801f11c:	460c      	mov	r4, r1
 801f11e:	4a51      	ldr	r2, [pc, #324]	; (801f264 <gmtime_r+0x150>)
 801f120:	2300      	movs	r3, #0
 801f122:	4630      	mov	r0, r6
 801f124:	4639      	mov	r1, r7
 801f126:	f7e1 fd6f 	bl	8000c08 <__aeabi_ldivmod>
 801f12a:	4639      	mov	r1, r7
 801f12c:	4605      	mov	r5, r0
 801f12e:	4a4d      	ldr	r2, [pc, #308]	; (801f264 <gmtime_r+0x150>)
 801f130:	4630      	mov	r0, r6
 801f132:	2300      	movs	r3, #0
 801f134:	f7e1 fd68 	bl	8000c08 <__aeabi_ldivmod>
 801f138:	2a00      	cmp	r2, #0
 801f13a:	bfbc      	itt	lt
 801f13c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801f140:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801f144:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f148:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801f14c:	fbb2 f3f1 	udiv	r3, r2, r1
 801f150:	fb01 2213 	mls	r2, r1, r3, r2
 801f154:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801f158:	bfac      	ite	ge
 801f15a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801f15e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801f162:	60a3      	str	r3, [r4, #8]
 801f164:	fbb2 f3f1 	udiv	r3, r2, r1
 801f168:	fb01 2213 	mls	r2, r1, r3, r2
 801f16c:	6063      	str	r3, [r4, #4]
 801f16e:	6022      	str	r2, [r4, #0]
 801f170:	1cc3      	adds	r3, r0, #3
 801f172:	2207      	movs	r2, #7
 801f174:	fb93 f2f2 	sdiv	r2, r3, r2
 801f178:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801f17c:	1a9b      	subs	r3, r3, r2
 801f17e:	bf48      	it	mi
 801f180:	3307      	addmi	r3, #7
 801f182:	2800      	cmp	r0, #0
 801f184:	61a3      	str	r3, [r4, #24]
 801f186:	bfb8      	it	lt
 801f188:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801f18c:	4936      	ldr	r1, [pc, #216]	; (801f268 <gmtime_r+0x154>)
 801f18e:	bfae      	itee	ge
 801f190:	fb90 f1f1 	sdivge	r1, r0, r1
 801f194:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801f198:	fb93 f1f1 	sdivlt	r1, r3, r1
 801f19c:	4b33      	ldr	r3, [pc, #204]	; (801f26c <gmtime_r+0x158>)
 801f19e:	fb03 0001 	mla	r0, r3, r1, r0
 801f1a2:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801f1a6:	fbb0 f2f2 	udiv	r2, r0, r2
 801f1aa:	4402      	add	r2, r0
 801f1ac:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801f1b0:	fbb0 f3fc 	udiv	r3, r0, ip
 801f1b4:	1ad2      	subs	r2, r2, r3
 801f1b6:	f240 176d 	movw	r7, #365	; 0x16d
 801f1ba:	4b2d      	ldr	r3, [pc, #180]	; (801f270 <gmtime_r+0x15c>)
 801f1bc:	fbb0 f3f3 	udiv	r3, r0, r3
 801f1c0:	2664      	movs	r6, #100	; 0x64
 801f1c2:	1ad3      	subs	r3, r2, r3
 801f1c4:	fbb3 f5f7 	udiv	r5, r3, r7
 801f1c8:	fbb3 f3fc 	udiv	r3, r3, ip
 801f1cc:	fbb5 f2f6 	udiv	r2, r5, r6
 801f1d0:	1ad3      	subs	r3, r2, r3
 801f1d2:	4403      	add	r3, r0
 801f1d4:	fb07 3315 	mls	r3, r7, r5, r3
 801f1d8:	2099      	movs	r0, #153	; 0x99
 801f1da:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801f1de:	f10c 0c02 	add.w	ip, ip, #2
 801f1e2:	f103 0e01 	add.w	lr, r3, #1
 801f1e6:	fbbc f7f0 	udiv	r7, ip, r0
 801f1ea:	4378      	muls	r0, r7
 801f1ec:	3002      	adds	r0, #2
 801f1ee:	f04f 0805 	mov.w	r8, #5
 801f1f2:	fbb0 f0f8 	udiv	r0, r0, r8
 801f1f6:	ebae 0000 	sub.w	r0, lr, r0
 801f1fa:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801f1fe:	45f4      	cmp	ip, lr
 801f200:	bf94      	ite	ls
 801f202:	f04f 0c02 	movls.w	ip, #2
 801f206:	f06f 0c09 	mvnhi.w	ip, #9
 801f20a:	4467      	add	r7, ip
 801f20c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801f210:	fb0c 5101 	mla	r1, ip, r1, r5
 801f214:	2f01      	cmp	r7, #1
 801f216:	bf98      	it	ls
 801f218:	3101      	addls	r1, #1
 801f21a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801f21e:	d30c      	bcc.n	801f23a <gmtime_r+0x126>
 801f220:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801f224:	61e3      	str	r3, [r4, #28]
 801f226:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801f22a:	2300      	movs	r3, #0
 801f22c:	60e0      	str	r0, [r4, #12]
 801f22e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801f232:	6223      	str	r3, [r4, #32]
 801f234:	4620      	mov	r0, r4
 801f236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f23a:	f015 0f03 	tst.w	r5, #3
 801f23e:	d102      	bne.n	801f246 <gmtime_r+0x132>
 801f240:	fb06 5212 	mls	r2, r6, r2, r5
 801f244:	b95a      	cbnz	r2, 801f25e <gmtime_r+0x14a>
 801f246:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801f24a:	fbb5 f2f6 	udiv	r2, r5, r6
 801f24e:	fb06 5212 	mls	r2, r6, r2, r5
 801f252:	fab2 f282 	clz	r2, r2
 801f256:	0952      	lsrs	r2, r2, #5
 801f258:	333b      	adds	r3, #59	; 0x3b
 801f25a:	4413      	add	r3, r2
 801f25c:	e7e2      	b.n	801f224 <gmtime_r+0x110>
 801f25e:	2201      	movs	r2, #1
 801f260:	e7fa      	b.n	801f258 <gmtime_r+0x144>
 801f262:	bf00      	nop
 801f264:	00015180 	.word	0x00015180
 801f268:	00023ab1 	.word	0x00023ab1
 801f26c:	fffdc54f 	.word	0xfffdc54f
 801f270:	00023ab0 	.word	0x00023ab0

0801f274 <_localeconv_r>:
 801f274:	4800      	ldr	r0, [pc, #0]	; (801f278 <_localeconv_r+0x4>)
 801f276:	4770      	bx	lr
 801f278:	200009d0 	.word	0x200009d0

0801f27c <__retarget_lock_init_recursive>:
 801f27c:	4770      	bx	lr

0801f27e <__retarget_lock_close_recursive>:
 801f27e:	4770      	bx	lr

0801f280 <__retarget_lock_acquire>:
 801f280:	4770      	bx	lr

0801f282 <__retarget_lock_acquire_recursive>:
 801f282:	4770      	bx	lr

0801f284 <__retarget_lock_release>:
 801f284:	4770      	bx	lr

0801f286 <__retarget_lock_release_recursive>:
 801f286:	4770      	bx	lr

0801f288 <__swhatbuf_r>:
 801f288:	b570      	push	{r4, r5, r6, lr}
 801f28a:	460e      	mov	r6, r1
 801f28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f290:	2900      	cmp	r1, #0
 801f292:	b096      	sub	sp, #88	; 0x58
 801f294:	4614      	mov	r4, r2
 801f296:	461d      	mov	r5, r3
 801f298:	da09      	bge.n	801f2ae <__swhatbuf_r+0x26>
 801f29a:	89b3      	ldrh	r3, [r6, #12]
 801f29c:	2200      	movs	r2, #0
 801f29e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801f2a2:	602a      	str	r2, [r5, #0]
 801f2a4:	d116      	bne.n	801f2d4 <__swhatbuf_r+0x4c>
 801f2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f2aa:	6023      	str	r3, [r4, #0]
 801f2ac:	e015      	b.n	801f2da <__swhatbuf_r+0x52>
 801f2ae:	466a      	mov	r2, sp
 801f2b0:	f002 feb2 	bl	8022018 <_fstat_r>
 801f2b4:	2800      	cmp	r0, #0
 801f2b6:	dbf0      	blt.n	801f29a <__swhatbuf_r+0x12>
 801f2b8:	9a01      	ldr	r2, [sp, #4]
 801f2ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f2be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f2c2:	425a      	negs	r2, r3
 801f2c4:	415a      	adcs	r2, r3
 801f2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f2ca:	602a      	str	r2, [r5, #0]
 801f2cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801f2d0:	6023      	str	r3, [r4, #0]
 801f2d2:	e002      	b.n	801f2da <__swhatbuf_r+0x52>
 801f2d4:	2340      	movs	r3, #64	; 0x40
 801f2d6:	6023      	str	r3, [r4, #0]
 801f2d8:	4610      	mov	r0, r2
 801f2da:	b016      	add	sp, #88	; 0x58
 801f2dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f2e0 <__smakebuf_r>:
 801f2e0:	898b      	ldrh	r3, [r1, #12]
 801f2e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f2e4:	079d      	lsls	r5, r3, #30
 801f2e6:	4606      	mov	r6, r0
 801f2e8:	460c      	mov	r4, r1
 801f2ea:	d507      	bpl.n	801f2fc <__smakebuf_r+0x1c>
 801f2ec:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801f2f0:	6023      	str	r3, [r4, #0]
 801f2f2:	6123      	str	r3, [r4, #16]
 801f2f4:	2301      	movs	r3, #1
 801f2f6:	6163      	str	r3, [r4, #20]
 801f2f8:	b002      	add	sp, #8
 801f2fa:	bd70      	pop	{r4, r5, r6, pc}
 801f2fc:	ab01      	add	r3, sp, #4
 801f2fe:	466a      	mov	r2, sp
 801f300:	f7ff ffc2 	bl	801f288 <__swhatbuf_r>
 801f304:	9900      	ldr	r1, [sp, #0]
 801f306:	4605      	mov	r5, r0
 801f308:	4630      	mov	r0, r6
 801f30a:	f000 f839 	bl	801f380 <_malloc_r>
 801f30e:	b948      	cbnz	r0, 801f324 <__smakebuf_r+0x44>
 801f310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f314:	059a      	lsls	r2, r3, #22
 801f316:	d4ef      	bmi.n	801f2f8 <__smakebuf_r+0x18>
 801f318:	f023 0303 	bic.w	r3, r3, #3
 801f31c:	f043 0302 	orr.w	r3, r3, #2
 801f320:	81a3      	strh	r3, [r4, #12]
 801f322:	e7e3      	b.n	801f2ec <__smakebuf_r+0xc>
 801f324:	4b0d      	ldr	r3, [pc, #52]	; (801f35c <__smakebuf_r+0x7c>)
 801f326:	63f3      	str	r3, [r6, #60]	; 0x3c
 801f328:	89a3      	ldrh	r3, [r4, #12]
 801f32a:	6020      	str	r0, [r4, #0]
 801f32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f330:	81a3      	strh	r3, [r4, #12]
 801f332:	9b00      	ldr	r3, [sp, #0]
 801f334:	6163      	str	r3, [r4, #20]
 801f336:	9b01      	ldr	r3, [sp, #4]
 801f338:	6120      	str	r0, [r4, #16]
 801f33a:	b15b      	cbz	r3, 801f354 <__smakebuf_r+0x74>
 801f33c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f340:	4630      	mov	r0, r6
 801f342:	f002 ffc5 	bl	80222d0 <_isatty_r>
 801f346:	b128      	cbz	r0, 801f354 <__smakebuf_r+0x74>
 801f348:	89a3      	ldrh	r3, [r4, #12]
 801f34a:	f023 0303 	bic.w	r3, r3, #3
 801f34e:	f043 0301 	orr.w	r3, r3, #1
 801f352:	81a3      	strh	r3, [r4, #12]
 801f354:	89a0      	ldrh	r0, [r4, #12]
 801f356:	4305      	orrs	r5, r0
 801f358:	81a5      	strh	r5, [r4, #12]
 801f35a:	e7cd      	b.n	801f2f8 <__smakebuf_r+0x18>
 801f35c:	0801ed6d 	.word	0x0801ed6d

0801f360 <malloc>:
 801f360:	4b02      	ldr	r3, [pc, #8]	; (801f36c <malloc+0xc>)
 801f362:	4601      	mov	r1, r0
 801f364:	6818      	ldr	r0, [r3, #0]
 801f366:	f000 b80b 	b.w	801f380 <_malloc_r>
 801f36a:	bf00      	nop
 801f36c:	20000038 	.word	0x20000038

0801f370 <free>:
 801f370:	4b02      	ldr	r3, [pc, #8]	; (801f37c <free+0xc>)
 801f372:	4601      	mov	r1, r0
 801f374:	6818      	ldr	r0, [r3, #0]
 801f376:	f7ff bda7 	b.w	801eec8 <_free_r>
 801f37a:	bf00      	nop
 801f37c:	20000038 	.word	0x20000038

0801f380 <_malloc_r>:
 801f380:	f101 030b 	add.w	r3, r1, #11
 801f384:	2b16      	cmp	r3, #22
 801f386:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f38a:	4605      	mov	r5, r0
 801f38c:	d906      	bls.n	801f39c <_malloc_r+0x1c>
 801f38e:	f033 0707 	bics.w	r7, r3, #7
 801f392:	d504      	bpl.n	801f39e <_malloc_r+0x1e>
 801f394:	230c      	movs	r3, #12
 801f396:	602b      	str	r3, [r5, #0]
 801f398:	2400      	movs	r4, #0
 801f39a:	e1ae      	b.n	801f6fa <_malloc_r+0x37a>
 801f39c:	2710      	movs	r7, #16
 801f39e:	42b9      	cmp	r1, r7
 801f3a0:	d8f8      	bhi.n	801f394 <_malloc_r+0x14>
 801f3a2:	4628      	mov	r0, r5
 801f3a4:	f000 fa2e 	bl	801f804 <__malloc_lock>
 801f3a8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 801f3ac:	4ec3      	ldr	r6, [pc, #780]	; (801f6bc <_malloc_r+0x33c>)
 801f3ae:	d238      	bcs.n	801f422 <_malloc_r+0xa2>
 801f3b0:	f107 0208 	add.w	r2, r7, #8
 801f3b4:	4432      	add	r2, r6
 801f3b6:	f1a2 0108 	sub.w	r1, r2, #8
 801f3ba:	6854      	ldr	r4, [r2, #4]
 801f3bc:	428c      	cmp	r4, r1
 801f3be:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801f3c2:	d102      	bne.n	801f3ca <_malloc_r+0x4a>
 801f3c4:	68d4      	ldr	r4, [r2, #12]
 801f3c6:	42a2      	cmp	r2, r4
 801f3c8:	d010      	beq.n	801f3ec <_malloc_r+0x6c>
 801f3ca:	6863      	ldr	r3, [r4, #4]
 801f3cc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801f3d0:	f023 0303 	bic.w	r3, r3, #3
 801f3d4:	60ca      	str	r2, [r1, #12]
 801f3d6:	4423      	add	r3, r4
 801f3d8:	6091      	str	r1, [r2, #8]
 801f3da:	685a      	ldr	r2, [r3, #4]
 801f3dc:	f042 0201 	orr.w	r2, r2, #1
 801f3e0:	605a      	str	r2, [r3, #4]
 801f3e2:	4628      	mov	r0, r5
 801f3e4:	f000 fa14 	bl	801f810 <__malloc_unlock>
 801f3e8:	3408      	adds	r4, #8
 801f3ea:	e186      	b.n	801f6fa <_malloc_r+0x37a>
 801f3ec:	3302      	adds	r3, #2
 801f3ee:	4ab4      	ldr	r2, [pc, #720]	; (801f6c0 <_malloc_r+0x340>)
 801f3f0:	6934      	ldr	r4, [r6, #16]
 801f3f2:	4294      	cmp	r4, r2
 801f3f4:	4611      	mov	r1, r2
 801f3f6:	d077      	beq.n	801f4e8 <_malloc_r+0x168>
 801f3f8:	6860      	ldr	r0, [r4, #4]
 801f3fa:	f020 0c03 	bic.w	ip, r0, #3
 801f3fe:	ebac 0007 	sub.w	r0, ip, r7
 801f402:	280f      	cmp	r0, #15
 801f404:	dd48      	ble.n	801f498 <_malloc_r+0x118>
 801f406:	19e1      	adds	r1, r4, r7
 801f408:	f040 0301 	orr.w	r3, r0, #1
 801f40c:	f047 0701 	orr.w	r7, r7, #1
 801f410:	6067      	str	r7, [r4, #4]
 801f412:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801f416:	e9c1 2202 	strd	r2, r2, [r1, #8]
 801f41a:	604b      	str	r3, [r1, #4]
 801f41c:	f844 000c 	str.w	r0, [r4, ip]
 801f420:	e7df      	b.n	801f3e2 <_malloc_r+0x62>
 801f422:	0a7b      	lsrs	r3, r7, #9
 801f424:	d02a      	beq.n	801f47c <_malloc_r+0xfc>
 801f426:	2b04      	cmp	r3, #4
 801f428:	d812      	bhi.n	801f450 <_malloc_r+0xd0>
 801f42a:	09bb      	lsrs	r3, r7, #6
 801f42c:	3338      	adds	r3, #56	; 0x38
 801f42e:	1c5a      	adds	r2, r3, #1
 801f430:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801f434:	f1a2 0c08 	sub.w	ip, r2, #8
 801f438:	6854      	ldr	r4, [r2, #4]
 801f43a:	4564      	cmp	r4, ip
 801f43c:	d006      	beq.n	801f44c <_malloc_r+0xcc>
 801f43e:	6862      	ldr	r2, [r4, #4]
 801f440:	f022 0203 	bic.w	r2, r2, #3
 801f444:	1bd0      	subs	r0, r2, r7
 801f446:	280f      	cmp	r0, #15
 801f448:	dd1c      	ble.n	801f484 <_malloc_r+0x104>
 801f44a:	3b01      	subs	r3, #1
 801f44c:	3301      	adds	r3, #1
 801f44e:	e7ce      	b.n	801f3ee <_malloc_r+0x6e>
 801f450:	2b14      	cmp	r3, #20
 801f452:	d801      	bhi.n	801f458 <_malloc_r+0xd8>
 801f454:	335b      	adds	r3, #91	; 0x5b
 801f456:	e7ea      	b.n	801f42e <_malloc_r+0xae>
 801f458:	2b54      	cmp	r3, #84	; 0x54
 801f45a:	d802      	bhi.n	801f462 <_malloc_r+0xe2>
 801f45c:	0b3b      	lsrs	r3, r7, #12
 801f45e:	336e      	adds	r3, #110	; 0x6e
 801f460:	e7e5      	b.n	801f42e <_malloc_r+0xae>
 801f462:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801f466:	d802      	bhi.n	801f46e <_malloc_r+0xee>
 801f468:	0bfb      	lsrs	r3, r7, #15
 801f46a:	3377      	adds	r3, #119	; 0x77
 801f46c:	e7df      	b.n	801f42e <_malloc_r+0xae>
 801f46e:	f240 5254 	movw	r2, #1364	; 0x554
 801f472:	4293      	cmp	r3, r2
 801f474:	d804      	bhi.n	801f480 <_malloc_r+0x100>
 801f476:	0cbb      	lsrs	r3, r7, #18
 801f478:	337c      	adds	r3, #124	; 0x7c
 801f47a:	e7d8      	b.n	801f42e <_malloc_r+0xae>
 801f47c:	233f      	movs	r3, #63	; 0x3f
 801f47e:	e7d6      	b.n	801f42e <_malloc_r+0xae>
 801f480:	237e      	movs	r3, #126	; 0x7e
 801f482:	e7d4      	b.n	801f42e <_malloc_r+0xae>
 801f484:	2800      	cmp	r0, #0
 801f486:	68e1      	ldr	r1, [r4, #12]
 801f488:	db04      	blt.n	801f494 <_malloc_r+0x114>
 801f48a:	68a3      	ldr	r3, [r4, #8]
 801f48c:	60d9      	str	r1, [r3, #12]
 801f48e:	608b      	str	r3, [r1, #8]
 801f490:	18a3      	adds	r3, r4, r2
 801f492:	e7a2      	b.n	801f3da <_malloc_r+0x5a>
 801f494:	460c      	mov	r4, r1
 801f496:	e7d0      	b.n	801f43a <_malloc_r+0xba>
 801f498:	2800      	cmp	r0, #0
 801f49a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801f49e:	db07      	blt.n	801f4b0 <_malloc_r+0x130>
 801f4a0:	44a4      	add	ip, r4
 801f4a2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801f4a6:	f043 0301 	orr.w	r3, r3, #1
 801f4aa:	f8cc 3004 	str.w	r3, [ip, #4]
 801f4ae:	e798      	b.n	801f3e2 <_malloc_r+0x62>
 801f4b0:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801f4b4:	6870      	ldr	r0, [r6, #4]
 801f4b6:	f080 809e 	bcs.w	801f5f6 <_malloc_r+0x276>
 801f4ba:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801f4be:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801f4c2:	f04f 0c01 	mov.w	ip, #1
 801f4c6:	3201      	adds	r2, #1
 801f4c8:	fa0c fc0e 	lsl.w	ip, ip, lr
 801f4cc:	ea4c 0000 	orr.w	r0, ip, r0
 801f4d0:	6070      	str	r0, [r6, #4]
 801f4d2:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801f4d6:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801f4da:	3808      	subs	r0, #8
 801f4dc:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801f4e0:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801f4e4:	f8cc 400c 	str.w	r4, [ip, #12]
 801f4e8:	2001      	movs	r0, #1
 801f4ea:	109a      	asrs	r2, r3, #2
 801f4ec:	fa00 f202 	lsl.w	r2, r0, r2
 801f4f0:	6870      	ldr	r0, [r6, #4]
 801f4f2:	4290      	cmp	r0, r2
 801f4f4:	d326      	bcc.n	801f544 <_malloc_r+0x1c4>
 801f4f6:	4210      	tst	r0, r2
 801f4f8:	d106      	bne.n	801f508 <_malloc_r+0x188>
 801f4fa:	f023 0303 	bic.w	r3, r3, #3
 801f4fe:	0052      	lsls	r2, r2, #1
 801f500:	4210      	tst	r0, r2
 801f502:	f103 0304 	add.w	r3, r3, #4
 801f506:	d0fa      	beq.n	801f4fe <_malloc_r+0x17e>
 801f508:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801f50c:	46c1      	mov	r9, r8
 801f50e:	469e      	mov	lr, r3
 801f510:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801f514:	454c      	cmp	r4, r9
 801f516:	f040 80b3 	bne.w	801f680 <_malloc_r+0x300>
 801f51a:	f10e 0e01 	add.w	lr, lr, #1
 801f51e:	f01e 0f03 	tst.w	lr, #3
 801f522:	f109 0908 	add.w	r9, r9, #8
 801f526:	d1f3      	bne.n	801f510 <_malloc_r+0x190>
 801f528:	0798      	lsls	r0, r3, #30
 801f52a:	f040 80ec 	bne.w	801f706 <_malloc_r+0x386>
 801f52e:	6873      	ldr	r3, [r6, #4]
 801f530:	ea23 0302 	bic.w	r3, r3, r2
 801f534:	6073      	str	r3, [r6, #4]
 801f536:	6870      	ldr	r0, [r6, #4]
 801f538:	0052      	lsls	r2, r2, #1
 801f53a:	4290      	cmp	r0, r2
 801f53c:	d302      	bcc.n	801f544 <_malloc_r+0x1c4>
 801f53e:	2a00      	cmp	r2, #0
 801f540:	f040 80ee 	bne.w	801f720 <_malloc_r+0x3a0>
 801f544:	f8d6 b008 	ldr.w	fp, [r6, #8]
 801f548:	f8db 1004 	ldr.w	r1, [fp, #4]
 801f54c:	f021 0903 	bic.w	r9, r1, #3
 801f550:	45b9      	cmp	r9, r7
 801f552:	d304      	bcc.n	801f55e <_malloc_r+0x1de>
 801f554:	eba9 0207 	sub.w	r2, r9, r7
 801f558:	2a0f      	cmp	r2, #15
 801f55a:	f300 8149 	bgt.w	801f7f0 <_malloc_r+0x470>
 801f55e:	4a59      	ldr	r2, [pc, #356]	; (801f6c4 <_malloc_r+0x344>)
 801f560:	6811      	ldr	r1, [r2, #0]
 801f562:	3110      	adds	r1, #16
 801f564:	eb0b 0309 	add.w	r3, fp, r9
 801f568:	4439      	add	r1, r7
 801f56a:	2008      	movs	r0, #8
 801f56c:	9301      	str	r3, [sp, #4]
 801f56e:	9100      	str	r1, [sp, #0]
 801f570:	f001 fe80 	bl	8021274 <sysconf>
 801f574:	4a54      	ldr	r2, [pc, #336]	; (801f6c8 <_malloc_r+0x348>)
 801f576:	e9dd 1300 	ldrd	r1, r3, [sp]
 801f57a:	4680      	mov	r8, r0
 801f57c:	6810      	ldr	r0, [r2, #0]
 801f57e:	3001      	adds	r0, #1
 801f580:	bf1f      	itttt	ne
 801f582:	f101 31ff 	addne.w	r1, r1, #4294967295
 801f586:	4441      	addne	r1, r8
 801f588:	f1c8 0000 	rsbne	r0, r8, #0
 801f58c:	4001      	andne	r1, r0
 801f58e:	4628      	mov	r0, r5
 801f590:	e9cd 1300 	strd	r1, r3, [sp]
 801f594:	f000 fcaa 	bl	801feec <_sbrk_r>
 801f598:	1c42      	adds	r2, r0, #1
 801f59a:	4604      	mov	r4, r0
 801f59c:	f000 80fc 	beq.w	801f798 <_malloc_r+0x418>
 801f5a0:	9b01      	ldr	r3, [sp, #4]
 801f5a2:	9900      	ldr	r1, [sp, #0]
 801f5a4:	4a48      	ldr	r2, [pc, #288]	; (801f6c8 <_malloc_r+0x348>)
 801f5a6:	4283      	cmp	r3, r0
 801f5a8:	d902      	bls.n	801f5b0 <_malloc_r+0x230>
 801f5aa:	45b3      	cmp	fp, r6
 801f5ac:	f040 80f4 	bne.w	801f798 <_malloc_r+0x418>
 801f5b0:	f8df a120 	ldr.w	sl, [pc, #288]	; 801f6d4 <_malloc_r+0x354>
 801f5b4:	f8da 0000 	ldr.w	r0, [sl]
 801f5b8:	42a3      	cmp	r3, r4
 801f5ba:	eb00 0e01 	add.w	lr, r0, r1
 801f5be:	f8ca e000 	str.w	lr, [sl]
 801f5c2:	f108 3cff 	add.w	ip, r8, #4294967295
 801f5c6:	f040 80ad 	bne.w	801f724 <_malloc_r+0x3a4>
 801f5ca:	ea13 0f0c 	tst.w	r3, ip
 801f5ce:	f040 80a9 	bne.w	801f724 <_malloc_r+0x3a4>
 801f5d2:	68b3      	ldr	r3, [r6, #8]
 801f5d4:	4449      	add	r1, r9
 801f5d6:	f041 0101 	orr.w	r1, r1, #1
 801f5da:	6059      	str	r1, [r3, #4]
 801f5dc:	4a3b      	ldr	r2, [pc, #236]	; (801f6cc <_malloc_r+0x34c>)
 801f5de:	f8da 3000 	ldr.w	r3, [sl]
 801f5e2:	6811      	ldr	r1, [r2, #0]
 801f5e4:	428b      	cmp	r3, r1
 801f5e6:	bf88      	it	hi
 801f5e8:	6013      	strhi	r3, [r2, #0]
 801f5ea:	4a39      	ldr	r2, [pc, #228]	; (801f6d0 <_malloc_r+0x350>)
 801f5ec:	6811      	ldr	r1, [r2, #0]
 801f5ee:	428b      	cmp	r3, r1
 801f5f0:	bf88      	it	hi
 801f5f2:	6013      	strhi	r3, [r2, #0]
 801f5f4:	e0d0      	b.n	801f798 <_malloc_r+0x418>
 801f5f6:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 801f5fa:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801f5fe:	d218      	bcs.n	801f632 <_malloc_r+0x2b2>
 801f600:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801f604:	3238      	adds	r2, #56	; 0x38
 801f606:	f102 0e01 	add.w	lr, r2, #1
 801f60a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801f60e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801f612:	45f0      	cmp	r8, lr
 801f614:	d12b      	bne.n	801f66e <_malloc_r+0x2ee>
 801f616:	1092      	asrs	r2, r2, #2
 801f618:	f04f 0c01 	mov.w	ip, #1
 801f61c:	fa0c f202 	lsl.w	r2, ip, r2
 801f620:	4310      	orrs	r0, r2
 801f622:	6070      	str	r0, [r6, #4]
 801f624:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801f628:	f8c8 4008 	str.w	r4, [r8, #8]
 801f62c:	f8ce 400c 	str.w	r4, [lr, #12]
 801f630:	e75a      	b.n	801f4e8 <_malloc_r+0x168>
 801f632:	2a14      	cmp	r2, #20
 801f634:	d801      	bhi.n	801f63a <_malloc_r+0x2ba>
 801f636:	325b      	adds	r2, #91	; 0x5b
 801f638:	e7e5      	b.n	801f606 <_malloc_r+0x286>
 801f63a:	2a54      	cmp	r2, #84	; 0x54
 801f63c:	d803      	bhi.n	801f646 <_malloc_r+0x2c6>
 801f63e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801f642:	326e      	adds	r2, #110	; 0x6e
 801f644:	e7df      	b.n	801f606 <_malloc_r+0x286>
 801f646:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801f64a:	d803      	bhi.n	801f654 <_malloc_r+0x2d4>
 801f64c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801f650:	3277      	adds	r2, #119	; 0x77
 801f652:	e7d8      	b.n	801f606 <_malloc_r+0x286>
 801f654:	f240 5e54 	movw	lr, #1364	; 0x554
 801f658:	4572      	cmp	r2, lr
 801f65a:	bf9a      	itte	ls
 801f65c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801f660:	327c      	addls	r2, #124	; 0x7c
 801f662:	227e      	movhi	r2, #126	; 0x7e
 801f664:	e7cf      	b.n	801f606 <_malloc_r+0x286>
 801f666:	f8de e008 	ldr.w	lr, [lr, #8]
 801f66a:	45f0      	cmp	r8, lr
 801f66c:	d005      	beq.n	801f67a <_malloc_r+0x2fa>
 801f66e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f672:	f022 0203 	bic.w	r2, r2, #3
 801f676:	4562      	cmp	r2, ip
 801f678:	d8f5      	bhi.n	801f666 <_malloc_r+0x2e6>
 801f67a:	f8de 800c 	ldr.w	r8, [lr, #12]
 801f67e:	e7d1      	b.n	801f624 <_malloc_r+0x2a4>
 801f680:	6860      	ldr	r0, [r4, #4]
 801f682:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801f686:	f020 0003 	bic.w	r0, r0, #3
 801f68a:	eba0 0a07 	sub.w	sl, r0, r7
 801f68e:	f1ba 0f0f 	cmp.w	sl, #15
 801f692:	dd21      	ble.n	801f6d8 <_malloc_r+0x358>
 801f694:	68a3      	ldr	r3, [r4, #8]
 801f696:	19e2      	adds	r2, r4, r7
 801f698:	f047 0701 	orr.w	r7, r7, #1
 801f69c:	6067      	str	r7, [r4, #4]
 801f69e:	f8c3 c00c 	str.w	ip, [r3, #12]
 801f6a2:	f8cc 3008 	str.w	r3, [ip, #8]
 801f6a6:	f04a 0301 	orr.w	r3, sl, #1
 801f6aa:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801f6ae:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801f6b2:	6053      	str	r3, [r2, #4]
 801f6b4:	f844 a000 	str.w	sl, [r4, r0]
 801f6b8:	e693      	b.n	801f3e2 <_malloc_r+0x62>
 801f6ba:	bf00      	nop
 801f6bc:	200004d0 	.word	0x200004d0
 801f6c0:	200004d8 	.word	0x200004d8
 801f6c4:	20005084 	.word	0x20005084
 801f6c8:	200008d8 	.word	0x200008d8
 801f6cc:	2000507c 	.word	0x2000507c
 801f6d0:	20005080 	.word	0x20005080
 801f6d4:	20005054 	.word	0x20005054
 801f6d8:	f1ba 0f00 	cmp.w	sl, #0
 801f6dc:	db11      	blt.n	801f702 <_malloc_r+0x382>
 801f6de:	4420      	add	r0, r4
 801f6e0:	6843      	ldr	r3, [r0, #4]
 801f6e2:	f043 0301 	orr.w	r3, r3, #1
 801f6e6:	6043      	str	r3, [r0, #4]
 801f6e8:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801f6ec:	4628      	mov	r0, r5
 801f6ee:	f8c3 c00c 	str.w	ip, [r3, #12]
 801f6f2:	f8cc 3008 	str.w	r3, [ip, #8]
 801f6f6:	f000 f88b 	bl	801f810 <__malloc_unlock>
 801f6fa:	4620      	mov	r0, r4
 801f6fc:	b003      	add	sp, #12
 801f6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f702:	4664      	mov	r4, ip
 801f704:	e706      	b.n	801f514 <_malloc_r+0x194>
 801f706:	f858 0908 	ldr.w	r0, [r8], #-8
 801f70a:	4540      	cmp	r0, r8
 801f70c:	f103 33ff 	add.w	r3, r3, #4294967295
 801f710:	f43f af0a 	beq.w	801f528 <_malloc_r+0x1a8>
 801f714:	e70f      	b.n	801f536 <_malloc_r+0x1b6>
 801f716:	3304      	adds	r3, #4
 801f718:	0052      	lsls	r2, r2, #1
 801f71a:	4210      	tst	r0, r2
 801f71c:	d0fb      	beq.n	801f716 <_malloc_r+0x396>
 801f71e:	e6f3      	b.n	801f508 <_malloc_r+0x188>
 801f720:	4673      	mov	r3, lr
 801f722:	e7fa      	b.n	801f71a <_malloc_r+0x39a>
 801f724:	6810      	ldr	r0, [r2, #0]
 801f726:	3001      	adds	r0, #1
 801f728:	bf1b      	ittet	ne
 801f72a:	1ae3      	subne	r3, r4, r3
 801f72c:	4473      	addne	r3, lr
 801f72e:	6014      	streq	r4, [r2, #0]
 801f730:	f8ca 3000 	strne.w	r3, [sl]
 801f734:	f014 0307 	ands.w	r3, r4, #7
 801f738:	bf1a      	itte	ne
 801f73a:	f1c3 0008 	rsbne	r0, r3, #8
 801f73e:	1824      	addne	r4, r4, r0
 801f740:	4618      	moveq	r0, r3
 801f742:	1862      	adds	r2, r4, r1
 801f744:	ea02 010c 	and.w	r1, r2, ip
 801f748:	4480      	add	r8, r0
 801f74a:	eba8 0801 	sub.w	r8, r8, r1
 801f74e:	ea08 080c 	and.w	r8, r8, ip
 801f752:	4641      	mov	r1, r8
 801f754:	4628      	mov	r0, r5
 801f756:	9301      	str	r3, [sp, #4]
 801f758:	9200      	str	r2, [sp, #0]
 801f75a:	f000 fbc7 	bl	801feec <_sbrk_r>
 801f75e:	1c43      	adds	r3, r0, #1
 801f760:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f764:	d105      	bne.n	801f772 <_malloc_r+0x3f2>
 801f766:	b32b      	cbz	r3, 801f7b4 <_malloc_r+0x434>
 801f768:	f1a3 0008 	sub.w	r0, r3, #8
 801f76c:	4410      	add	r0, r2
 801f76e:	f04f 0800 	mov.w	r8, #0
 801f772:	f8da 2000 	ldr.w	r2, [sl]
 801f776:	60b4      	str	r4, [r6, #8]
 801f778:	1b00      	subs	r0, r0, r4
 801f77a:	4440      	add	r0, r8
 801f77c:	4442      	add	r2, r8
 801f77e:	f040 0001 	orr.w	r0, r0, #1
 801f782:	45b3      	cmp	fp, r6
 801f784:	f8ca 2000 	str.w	r2, [sl]
 801f788:	6060      	str	r0, [r4, #4]
 801f78a:	f43f af27 	beq.w	801f5dc <_malloc_r+0x25c>
 801f78e:	f1b9 0f0f 	cmp.w	r9, #15
 801f792:	d812      	bhi.n	801f7ba <_malloc_r+0x43a>
 801f794:	2301      	movs	r3, #1
 801f796:	6063      	str	r3, [r4, #4]
 801f798:	68b3      	ldr	r3, [r6, #8]
 801f79a:	685b      	ldr	r3, [r3, #4]
 801f79c:	f023 0303 	bic.w	r3, r3, #3
 801f7a0:	42bb      	cmp	r3, r7
 801f7a2:	eba3 0207 	sub.w	r2, r3, r7
 801f7a6:	d301      	bcc.n	801f7ac <_malloc_r+0x42c>
 801f7a8:	2a0f      	cmp	r2, #15
 801f7aa:	dc21      	bgt.n	801f7f0 <_malloc_r+0x470>
 801f7ac:	4628      	mov	r0, r5
 801f7ae:	f000 f82f 	bl	801f810 <__malloc_unlock>
 801f7b2:	e5f1      	b.n	801f398 <_malloc_r+0x18>
 801f7b4:	4610      	mov	r0, r2
 801f7b6:	4698      	mov	r8, r3
 801f7b8:	e7db      	b.n	801f772 <_malloc_r+0x3f2>
 801f7ba:	f8db 3004 	ldr.w	r3, [fp, #4]
 801f7be:	f1a9 090c 	sub.w	r9, r9, #12
 801f7c2:	f029 0907 	bic.w	r9, r9, #7
 801f7c6:	f003 0301 	and.w	r3, r3, #1
 801f7ca:	ea43 0309 	orr.w	r3, r3, r9
 801f7ce:	f8cb 3004 	str.w	r3, [fp, #4]
 801f7d2:	2205      	movs	r2, #5
 801f7d4:	eb0b 0309 	add.w	r3, fp, r9
 801f7d8:	f1b9 0f0f 	cmp.w	r9, #15
 801f7dc:	e9c3 2201 	strd	r2, r2, [r3, #4]
 801f7e0:	f67f aefc 	bls.w	801f5dc <_malloc_r+0x25c>
 801f7e4:	f10b 0108 	add.w	r1, fp, #8
 801f7e8:	4628      	mov	r0, r5
 801f7ea:	f7ff fb6d 	bl	801eec8 <_free_r>
 801f7ee:	e6f5      	b.n	801f5dc <_malloc_r+0x25c>
 801f7f0:	68b4      	ldr	r4, [r6, #8]
 801f7f2:	f047 0301 	orr.w	r3, r7, #1
 801f7f6:	4427      	add	r7, r4
 801f7f8:	f042 0201 	orr.w	r2, r2, #1
 801f7fc:	6063      	str	r3, [r4, #4]
 801f7fe:	60b7      	str	r7, [r6, #8]
 801f800:	607a      	str	r2, [r7, #4]
 801f802:	e5ee      	b.n	801f3e2 <_malloc_r+0x62>

0801f804 <__malloc_lock>:
 801f804:	4801      	ldr	r0, [pc, #4]	; (801f80c <__malloc_lock+0x8>)
 801f806:	f7ff bd3c 	b.w	801f282 <__retarget_lock_acquire_recursive>
 801f80a:	bf00      	nop
 801f80c:	2000be3c 	.word	0x2000be3c

0801f810 <__malloc_unlock>:
 801f810:	4801      	ldr	r0, [pc, #4]	; (801f818 <__malloc_unlock+0x8>)
 801f812:	f7ff bd38 	b.w	801f286 <__retarget_lock_release_recursive>
 801f816:	bf00      	nop
 801f818:	2000be3c 	.word	0x2000be3c

0801f81c <_Balloc>:
 801f81c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801f81e:	b570      	push	{r4, r5, r6, lr}
 801f820:	4605      	mov	r5, r0
 801f822:	460c      	mov	r4, r1
 801f824:	b17b      	cbz	r3, 801f846 <_Balloc+0x2a>
 801f826:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801f828:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f82c:	b9a0      	cbnz	r0, 801f858 <_Balloc+0x3c>
 801f82e:	2101      	movs	r1, #1
 801f830:	fa01 f604 	lsl.w	r6, r1, r4
 801f834:	1d72      	adds	r2, r6, #5
 801f836:	0092      	lsls	r2, r2, #2
 801f838:	4628      	mov	r0, r5
 801f83a:	f002 facd 	bl	8021dd8 <_calloc_r>
 801f83e:	b148      	cbz	r0, 801f854 <_Balloc+0x38>
 801f840:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801f844:	e00b      	b.n	801f85e <_Balloc+0x42>
 801f846:	2221      	movs	r2, #33	; 0x21
 801f848:	2104      	movs	r1, #4
 801f84a:	f002 fac5 	bl	8021dd8 <_calloc_r>
 801f84e:	64e8      	str	r0, [r5, #76]	; 0x4c
 801f850:	2800      	cmp	r0, #0
 801f852:	d1e8      	bne.n	801f826 <_Balloc+0xa>
 801f854:	2000      	movs	r0, #0
 801f856:	bd70      	pop	{r4, r5, r6, pc}
 801f858:	6802      	ldr	r2, [r0, #0]
 801f85a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801f85e:	2300      	movs	r3, #0
 801f860:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f864:	e7f7      	b.n	801f856 <_Balloc+0x3a>

0801f866 <_Bfree>:
 801f866:	b131      	cbz	r1, 801f876 <_Bfree+0x10>
 801f868:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801f86a:	684a      	ldr	r2, [r1, #4]
 801f86c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f870:	6008      	str	r0, [r1, #0]
 801f872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801f876:	4770      	bx	lr

0801f878 <__multadd>:
 801f878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f87c:	690e      	ldr	r6, [r1, #16]
 801f87e:	4607      	mov	r7, r0
 801f880:	4698      	mov	r8, r3
 801f882:	460c      	mov	r4, r1
 801f884:	f101 0014 	add.w	r0, r1, #20
 801f888:	2300      	movs	r3, #0
 801f88a:	6805      	ldr	r5, [r0, #0]
 801f88c:	b2a9      	uxth	r1, r5
 801f88e:	fb02 8101 	mla	r1, r2, r1, r8
 801f892:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801f896:	0c2d      	lsrs	r5, r5, #16
 801f898:	fb02 c505 	mla	r5, r2, r5, ip
 801f89c:	b289      	uxth	r1, r1
 801f89e:	3301      	adds	r3, #1
 801f8a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801f8a4:	429e      	cmp	r6, r3
 801f8a6:	f840 1b04 	str.w	r1, [r0], #4
 801f8aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801f8ae:	dcec      	bgt.n	801f88a <__multadd+0x12>
 801f8b0:	f1b8 0f00 	cmp.w	r8, #0
 801f8b4:	d022      	beq.n	801f8fc <__multadd+0x84>
 801f8b6:	68a3      	ldr	r3, [r4, #8]
 801f8b8:	42b3      	cmp	r3, r6
 801f8ba:	dc19      	bgt.n	801f8f0 <__multadd+0x78>
 801f8bc:	6861      	ldr	r1, [r4, #4]
 801f8be:	4638      	mov	r0, r7
 801f8c0:	3101      	adds	r1, #1
 801f8c2:	f7ff ffab 	bl	801f81c <_Balloc>
 801f8c6:	4605      	mov	r5, r0
 801f8c8:	b928      	cbnz	r0, 801f8d6 <__multadd+0x5e>
 801f8ca:	4602      	mov	r2, r0
 801f8cc:	4b0d      	ldr	r3, [pc, #52]	; (801f904 <__multadd+0x8c>)
 801f8ce:	480e      	ldr	r0, [pc, #56]	; (801f908 <__multadd+0x90>)
 801f8d0:	21b5      	movs	r1, #181	; 0xb5
 801f8d2:	f002 fa63 	bl	8021d9c <__assert_func>
 801f8d6:	6922      	ldr	r2, [r4, #16]
 801f8d8:	3202      	adds	r2, #2
 801f8da:	f104 010c 	add.w	r1, r4, #12
 801f8de:	0092      	lsls	r2, r2, #2
 801f8e0:	300c      	adds	r0, #12
 801f8e2:	f7fb f801 	bl	801a8e8 <memcpy>
 801f8e6:	4621      	mov	r1, r4
 801f8e8:	4638      	mov	r0, r7
 801f8ea:	f7ff ffbc 	bl	801f866 <_Bfree>
 801f8ee:	462c      	mov	r4, r5
 801f8f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801f8f4:	3601      	adds	r6, #1
 801f8f6:	f8c3 8014 	str.w	r8, [r3, #20]
 801f8fa:	6126      	str	r6, [r4, #16]
 801f8fc:	4620      	mov	r0, r4
 801f8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f902:	bf00      	nop
 801f904:	08028fcd 	.word	0x08028fcd
 801f908:	0802903d 	.word	0x0802903d

0801f90c <__hi0bits>:
 801f90c:	0c03      	lsrs	r3, r0, #16
 801f90e:	041b      	lsls	r3, r3, #16
 801f910:	b9d3      	cbnz	r3, 801f948 <__hi0bits+0x3c>
 801f912:	0400      	lsls	r0, r0, #16
 801f914:	2310      	movs	r3, #16
 801f916:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f91a:	bf04      	itt	eq
 801f91c:	0200      	lsleq	r0, r0, #8
 801f91e:	3308      	addeq	r3, #8
 801f920:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f924:	bf04      	itt	eq
 801f926:	0100      	lsleq	r0, r0, #4
 801f928:	3304      	addeq	r3, #4
 801f92a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f92e:	bf04      	itt	eq
 801f930:	0080      	lsleq	r0, r0, #2
 801f932:	3302      	addeq	r3, #2
 801f934:	2800      	cmp	r0, #0
 801f936:	db05      	blt.n	801f944 <__hi0bits+0x38>
 801f938:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f93c:	f103 0301 	add.w	r3, r3, #1
 801f940:	bf08      	it	eq
 801f942:	2320      	moveq	r3, #32
 801f944:	4618      	mov	r0, r3
 801f946:	4770      	bx	lr
 801f948:	2300      	movs	r3, #0
 801f94a:	e7e4      	b.n	801f916 <__hi0bits+0xa>

0801f94c <__lo0bits>:
 801f94c:	6803      	ldr	r3, [r0, #0]
 801f94e:	f013 0207 	ands.w	r2, r3, #7
 801f952:	4601      	mov	r1, r0
 801f954:	d00b      	beq.n	801f96e <__lo0bits+0x22>
 801f956:	07da      	lsls	r2, r3, #31
 801f958:	d424      	bmi.n	801f9a4 <__lo0bits+0x58>
 801f95a:	0798      	lsls	r0, r3, #30
 801f95c:	bf49      	itett	mi
 801f95e:	085b      	lsrmi	r3, r3, #1
 801f960:	089b      	lsrpl	r3, r3, #2
 801f962:	2001      	movmi	r0, #1
 801f964:	600b      	strmi	r3, [r1, #0]
 801f966:	bf5c      	itt	pl
 801f968:	600b      	strpl	r3, [r1, #0]
 801f96a:	2002      	movpl	r0, #2
 801f96c:	4770      	bx	lr
 801f96e:	b298      	uxth	r0, r3
 801f970:	b9b0      	cbnz	r0, 801f9a0 <__lo0bits+0x54>
 801f972:	0c1b      	lsrs	r3, r3, #16
 801f974:	2010      	movs	r0, #16
 801f976:	f013 0fff 	tst.w	r3, #255	; 0xff
 801f97a:	bf04      	itt	eq
 801f97c:	0a1b      	lsreq	r3, r3, #8
 801f97e:	3008      	addeq	r0, #8
 801f980:	071a      	lsls	r2, r3, #28
 801f982:	bf04      	itt	eq
 801f984:	091b      	lsreq	r3, r3, #4
 801f986:	3004      	addeq	r0, #4
 801f988:	079a      	lsls	r2, r3, #30
 801f98a:	bf04      	itt	eq
 801f98c:	089b      	lsreq	r3, r3, #2
 801f98e:	3002      	addeq	r0, #2
 801f990:	07da      	lsls	r2, r3, #31
 801f992:	d403      	bmi.n	801f99c <__lo0bits+0x50>
 801f994:	085b      	lsrs	r3, r3, #1
 801f996:	f100 0001 	add.w	r0, r0, #1
 801f99a:	d005      	beq.n	801f9a8 <__lo0bits+0x5c>
 801f99c:	600b      	str	r3, [r1, #0]
 801f99e:	4770      	bx	lr
 801f9a0:	4610      	mov	r0, r2
 801f9a2:	e7e8      	b.n	801f976 <__lo0bits+0x2a>
 801f9a4:	2000      	movs	r0, #0
 801f9a6:	4770      	bx	lr
 801f9a8:	2020      	movs	r0, #32
 801f9aa:	4770      	bx	lr

0801f9ac <__i2b>:
 801f9ac:	b510      	push	{r4, lr}
 801f9ae:	460c      	mov	r4, r1
 801f9b0:	2101      	movs	r1, #1
 801f9b2:	f7ff ff33 	bl	801f81c <_Balloc>
 801f9b6:	4602      	mov	r2, r0
 801f9b8:	b928      	cbnz	r0, 801f9c6 <__i2b+0x1a>
 801f9ba:	4b05      	ldr	r3, [pc, #20]	; (801f9d0 <__i2b+0x24>)
 801f9bc:	4805      	ldr	r0, [pc, #20]	; (801f9d4 <__i2b+0x28>)
 801f9be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801f9c2:	f002 f9eb 	bl	8021d9c <__assert_func>
 801f9c6:	2301      	movs	r3, #1
 801f9c8:	6144      	str	r4, [r0, #20]
 801f9ca:	6103      	str	r3, [r0, #16]
 801f9cc:	bd10      	pop	{r4, pc}
 801f9ce:	bf00      	nop
 801f9d0:	08028fcd 	.word	0x08028fcd
 801f9d4:	0802903d 	.word	0x0802903d

0801f9d8 <__multiply>:
 801f9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9dc:	4614      	mov	r4, r2
 801f9de:	690a      	ldr	r2, [r1, #16]
 801f9e0:	6923      	ldr	r3, [r4, #16]
 801f9e2:	429a      	cmp	r2, r3
 801f9e4:	bfb8      	it	lt
 801f9e6:	460b      	movlt	r3, r1
 801f9e8:	460d      	mov	r5, r1
 801f9ea:	bfbc      	itt	lt
 801f9ec:	4625      	movlt	r5, r4
 801f9ee:	461c      	movlt	r4, r3
 801f9f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801f9f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801f9f8:	68ab      	ldr	r3, [r5, #8]
 801f9fa:	6869      	ldr	r1, [r5, #4]
 801f9fc:	eb0a 0709 	add.w	r7, sl, r9
 801fa00:	42bb      	cmp	r3, r7
 801fa02:	b085      	sub	sp, #20
 801fa04:	bfb8      	it	lt
 801fa06:	3101      	addlt	r1, #1
 801fa08:	f7ff ff08 	bl	801f81c <_Balloc>
 801fa0c:	b930      	cbnz	r0, 801fa1c <__multiply+0x44>
 801fa0e:	4602      	mov	r2, r0
 801fa10:	4b42      	ldr	r3, [pc, #264]	; (801fb1c <__multiply+0x144>)
 801fa12:	4843      	ldr	r0, [pc, #268]	; (801fb20 <__multiply+0x148>)
 801fa14:	f240 115d 	movw	r1, #349	; 0x15d
 801fa18:	f002 f9c0 	bl	8021d9c <__assert_func>
 801fa1c:	f100 0614 	add.w	r6, r0, #20
 801fa20:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801fa24:	4633      	mov	r3, r6
 801fa26:	2200      	movs	r2, #0
 801fa28:	4543      	cmp	r3, r8
 801fa2a:	d31e      	bcc.n	801fa6a <__multiply+0x92>
 801fa2c:	f105 0c14 	add.w	ip, r5, #20
 801fa30:	f104 0314 	add.w	r3, r4, #20
 801fa34:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801fa38:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801fa3c:	9202      	str	r2, [sp, #8]
 801fa3e:	ebac 0205 	sub.w	r2, ip, r5
 801fa42:	3a15      	subs	r2, #21
 801fa44:	f022 0203 	bic.w	r2, r2, #3
 801fa48:	3204      	adds	r2, #4
 801fa4a:	f105 0115 	add.w	r1, r5, #21
 801fa4e:	458c      	cmp	ip, r1
 801fa50:	bf38      	it	cc
 801fa52:	2204      	movcc	r2, #4
 801fa54:	9201      	str	r2, [sp, #4]
 801fa56:	9a02      	ldr	r2, [sp, #8]
 801fa58:	9303      	str	r3, [sp, #12]
 801fa5a:	429a      	cmp	r2, r3
 801fa5c:	d808      	bhi.n	801fa70 <__multiply+0x98>
 801fa5e:	2f00      	cmp	r7, #0
 801fa60:	dc55      	bgt.n	801fb0e <__multiply+0x136>
 801fa62:	6107      	str	r7, [r0, #16]
 801fa64:	b005      	add	sp, #20
 801fa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa6a:	f843 2b04 	str.w	r2, [r3], #4
 801fa6e:	e7db      	b.n	801fa28 <__multiply+0x50>
 801fa70:	f8b3 a000 	ldrh.w	sl, [r3]
 801fa74:	f1ba 0f00 	cmp.w	sl, #0
 801fa78:	d020      	beq.n	801fabc <__multiply+0xe4>
 801fa7a:	f105 0e14 	add.w	lr, r5, #20
 801fa7e:	46b1      	mov	r9, r6
 801fa80:	2200      	movs	r2, #0
 801fa82:	f85e 4b04 	ldr.w	r4, [lr], #4
 801fa86:	f8d9 b000 	ldr.w	fp, [r9]
 801fa8a:	b2a1      	uxth	r1, r4
 801fa8c:	fa1f fb8b 	uxth.w	fp, fp
 801fa90:	fb0a b101 	mla	r1, sl, r1, fp
 801fa94:	4411      	add	r1, r2
 801fa96:	f8d9 2000 	ldr.w	r2, [r9]
 801fa9a:	0c24      	lsrs	r4, r4, #16
 801fa9c:	0c12      	lsrs	r2, r2, #16
 801fa9e:	fb0a 2404 	mla	r4, sl, r4, r2
 801faa2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801faa6:	b289      	uxth	r1, r1
 801faa8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801faac:	45f4      	cmp	ip, lr
 801faae:	f849 1b04 	str.w	r1, [r9], #4
 801fab2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801fab6:	d8e4      	bhi.n	801fa82 <__multiply+0xaa>
 801fab8:	9901      	ldr	r1, [sp, #4]
 801faba:	5072      	str	r2, [r6, r1]
 801fabc:	9a03      	ldr	r2, [sp, #12]
 801fabe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801fac2:	3304      	adds	r3, #4
 801fac4:	f1b9 0f00 	cmp.w	r9, #0
 801fac8:	d01f      	beq.n	801fb0a <__multiply+0x132>
 801faca:	6834      	ldr	r4, [r6, #0]
 801facc:	f105 0114 	add.w	r1, r5, #20
 801fad0:	46b6      	mov	lr, r6
 801fad2:	f04f 0a00 	mov.w	sl, #0
 801fad6:	880a      	ldrh	r2, [r1, #0]
 801fad8:	f8be b002 	ldrh.w	fp, [lr, #2]
 801fadc:	fb09 b202 	mla	r2, r9, r2, fp
 801fae0:	4492      	add	sl, r2
 801fae2:	b2a4      	uxth	r4, r4
 801fae4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801fae8:	f84e 4b04 	str.w	r4, [lr], #4
 801faec:	f851 4b04 	ldr.w	r4, [r1], #4
 801faf0:	f8be 2000 	ldrh.w	r2, [lr]
 801faf4:	0c24      	lsrs	r4, r4, #16
 801faf6:	fb09 2404 	mla	r4, r9, r4, r2
 801fafa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801fafe:	458c      	cmp	ip, r1
 801fb00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801fb04:	d8e7      	bhi.n	801fad6 <__multiply+0xfe>
 801fb06:	9a01      	ldr	r2, [sp, #4]
 801fb08:	50b4      	str	r4, [r6, r2]
 801fb0a:	3604      	adds	r6, #4
 801fb0c:	e7a3      	b.n	801fa56 <__multiply+0x7e>
 801fb0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d1a5      	bne.n	801fa62 <__multiply+0x8a>
 801fb16:	3f01      	subs	r7, #1
 801fb18:	e7a1      	b.n	801fa5e <__multiply+0x86>
 801fb1a:	bf00      	nop
 801fb1c:	08028fcd 	.word	0x08028fcd
 801fb20:	0802903d 	.word	0x0802903d

0801fb24 <__pow5mult>:
 801fb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb28:	4615      	mov	r5, r2
 801fb2a:	f012 0203 	ands.w	r2, r2, #3
 801fb2e:	4606      	mov	r6, r0
 801fb30:	460f      	mov	r7, r1
 801fb32:	d007      	beq.n	801fb44 <__pow5mult+0x20>
 801fb34:	4c1a      	ldr	r4, [pc, #104]	; (801fba0 <__pow5mult+0x7c>)
 801fb36:	3a01      	subs	r2, #1
 801fb38:	2300      	movs	r3, #0
 801fb3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fb3e:	f7ff fe9b 	bl	801f878 <__multadd>
 801fb42:	4607      	mov	r7, r0
 801fb44:	10ad      	asrs	r5, r5, #2
 801fb46:	d027      	beq.n	801fb98 <__pow5mult+0x74>
 801fb48:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801fb4a:	b944      	cbnz	r4, 801fb5e <__pow5mult+0x3a>
 801fb4c:	f240 2171 	movw	r1, #625	; 0x271
 801fb50:	4630      	mov	r0, r6
 801fb52:	f7ff ff2b 	bl	801f9ac <__i2b>
 801fb56:	2300      	movs	r3, #0
 801fb58:	64b0      	str	r0, [r6, #72]	; 0x48
 801fb5a:	4604      	mov	r4, r0
 801fb5c:	6003      	str	r3, [r0, #0]
 801fb5e:	f04f 0900 	mov.w	r9, #0
 801fb62:	07eb      	lsls	r3, r5, #31
 801fb64:	d50a      	bpl.n	801fb7c <__pow5mult+0x58>
 801fb66:	4639      	mov	r1, r7
 801fb68:	4622      	mov	r2, r4
 801fb6a:	4630      	mov	r0, r6
 801fb6c:	f7ff ff34 	bl	801f9d8 <__multiply>
 801fb70:	4639      	mov	r1, r7
 801fb72:	4680      	mov	r8, r0
 801fb74:	4630      	mov	r0, r6
 801fb76:	f7ff fe76 	bl	801f866 <_Bfree>
 801fb7a:	4647      	mov	r7, r8
 801fb7c:	106d      	asrs	r5, r5, #1
 801fb7e:	d00b      	beq.n	801fb98 <__pow5mult+0x74>
 801fb80:	6820      	ldr	r0, [r4, #0]
 801fb82:	b938      	cbnz	r0, 801fb94 <__pow5mult+0x70>
 801fb84:	4622      	mov	r2, r4
 801fb86:	4621      	mov	r1, r4
 801fb88:	4630      	mov	r0, r6
 801fb8a:	f7ff ff25 	bl	801f9d8 <__multiply>
 801fb8e:	6020      	str	r0, [r4, #0]
 801fb90:	f8c0 9000 	str.w	r9, [r0]
 801fb94:	4604      	mov	r4, r0
 801fb96:	e7e4      	b.n	801fb62 <__pow5mult+0x3e>
 801fb98:	4638      	mov	r0, r7
 801fb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb9e:	bf00      	nop
 801fba0:	08029190 	.word	0x08029190

0801fba4 <__lshift>:
 801fba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fba8:	460c      	mov	r4, r1
 801fbaa:	6849      	ldr	r1, [r1, #4]
 801fbac:	6923      	ldr	r3, [r4, #16]
 801fbae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801fbb2:	68a3      	ldr	r3, [r4, #8]
 801fbb4:	4607      	mov	r7, r0
 801fbb6:	4691      	mov	r9, r2
 801fbb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fbbc:	f108 0601 	add.w	r6, r8, #1
 801fbc0:	42b3      	cmp	r3, r6
 801fbc2:	db0b      	blt.n	801fbdc <__lshift+0x38>
 801fbc4:	4638      	mov	r0, r7
 801fbc6:	f7ff fe29 	bl	801f81c <_Balloc>
 801fbca:	4605      	mov	r5, r0
 801fbcc:	b948      	cbnz	r0, 801fbe2 <__lshift+0x3e>
 801fbce:	4602      	mov	r2, r0
 801fbd0:	4b28      	ldr	r3, [pc, #160]	; (801fc74 <__lshift+0xd0>)
 801fbd2:	4829      	ldr	r0, [pc, #164]	; (801fc78 <__lshift+0xd4>)
 801fbd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801fbd8:	f002 f8e0 	bl	8021d9c <__assert_func>
 801fbdc:	3101      	adds	r1, #1
 801fbde:	005b      	lsls	r3, r3, #1
 801fbe0:	e7ee      	b.n	801fbc0 <__lshift+0x1c>
 801fbe2:	2300      	movs	r3, #0
 801fbe4:	f100 0114 	add.w	r1, r0, #20
 801fbe8:	f100 0210 	add.w	r2, r0, #16
 801fbec:	4618      	mov	r0, r3
 801fbee:	4553      	cmp	r3, sl
 801fbf0:	db33      	blt.n	801fc5a <__lshift+0xb6>
 801fbf2:	6920      	ldr	r0, [r4, #16]
 801fbf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fbf8:	f104 0314 	add.w	r3, r4, #20
 801fbfc:	f019 091f 	ands.w	r9, r9, #31
 801fc00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fc04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801fc08:	d02b      	beq.n	801fc62 <__lshift+0xbe>
 801fc0a:	f1c9 0e20 	rsb	lr, r9, #32
 801fc0e:	468a      	mov	sl, r1
 801fc10:	2200      	movs	r2, #0
 801fc12:	6818      	ldr	r0, [r3, #0]
 801fc14:	fa00 f009 	lsl.w	r0, r0, r9
 801fc18:	4302      	orrs	r2, r0
 801fc1a:	f84a 2b04 	str.w	r2, [sl], #4
 801fc1e:	f853 2b04 	ldr.w	r2, [r3], #4
 801fc22:	459c      	cmp	ip, r3
 801fc24:	fa22 f20e 	lsr.w	r2, r2, lr
 801fc28:	d8f3      	bhi.n	801fc12 <__lshift+0x6e>
 801fc2a:	ebac 0304 	sub.w	r3, ip, r4
 801fc2e:	3b15      	subs	r3, #21
 801fc30:	f023 0303 	bic.w	r3, r3, #3
 801fc34:	3304      	adds	r3, #4
 801fc36:	f104 0015 	add.w	r0, r4, #21
 801fc3a:	4584      	cmp	ip, r0
 801fc3c:	bf38      	it	cc
 801fc3e:	2304      	movcc	r3, #4
 801fc40:	50ca      	str	r2, [r1, r3]
 801fc42:	b10a      	cbz	r2, 801fc48 <__lshift+0xa4>
 801fc44:	f108 0602 	add.w	r6, r8, #2
 801fc48:	3e01      	subs	r6, #1
 801fc4a:	4638      	mov	r0, r7
 801fc4c:	612e      	str	r6, [r5, #16]
 801fc4e:	4621      	mov	r1, r4
 801fc50:	f7ff fe09 	bl	801f866 <_Bfree>
 801fc54:	4628      	mov	r0, r5
 801fc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fc5a:	f842 0f04 	str.w	r0, [r2, #4]!
 801fc5e:	3301      	adds	r3, #1
 801fc60:	e7c5      	b.n	801fbee <__lshift+0x4a>
 801fc62:	3904      	subs	r1, #4
 801fc64:	f853 2b04 	ldr.w	r2, [r3], #4
 801fc68:	f841 2f04 	str.w	r2, [r1, #4]!
 801fc6c:	459c      	cmp	ip, r3
 801fc6e:	d8f9      	bhi.n	801fc64 <__lshift+0xc0>
 801fc70:	e7ea      	b.n	801fc48 <__lshift+0xa4>
 801fc72:	bf00      	nop
 801fc74:	08028fcd 	.word	0x08028fcd
 801fc78:	0802903d 	.word	0x0802903d

0801fc7c <__mcmp>:
 801fc7c:	b530      	push	{r4, r5, lr}
 801fc7e:	6902      	ldr	r2, [r0, #16]
 801fc80:	690c      	ldr	r4, [r1, #16]
 801fc82:	1b12      	subs	r2, r2, r4
 801fc84:	d10e      	bne.n	801fca4 <__mcmp+0x28>
 801fc86:	f100 0314 	add.w	r3, r0, #20
 801fc8a:	3114      	adds	r1, #20
 801fc8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801fc90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801fc94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801fc98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801fc9c:	42a5      	cmp	r5, r4
 801fc9e:	d003      	beq.n	801fca8 <__mcmp+0x2c>
 801fca0:	d305      	bcc.n	801fcae <__mcmp+0x32>
 801fca2:	2201      	movs	r2, #1
 801fca4:	4610      	mov	r0, r2
 801fca6:	bd30      	pop	{r4, r5, pc}
 801fca8:	4283      	cmp	r3, r0
 801fcaa:	d3f3      	bcc.n	801fc94 <__mcmp+0x18>
 801fcac:	e7fa      	b.n	801fca4 <__mcmp+0x28>
 801fcae:	f04f 32ff 	mov.w	r2, #4294967295
 801fcb2:	e7f7      	b.n	801fca4 <__mcmp+0x28>

0801fcb4 <__mdiff>:
 801fcb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcb8:	460c      	mov	r4, r1
 801fcba:	4606      	mov	r6, r0
 801fcbc:	4611      	mov	r1, r2
 801fcbe:	4620      	mov	r0, r4
 801fcc0:	4617      	mov	r7, r2
 801fcc2:	f7ff ffdb 	bl	801fc7c <__mcmp>
 801fcc6:	1e05      	subs	r5, r0, #0
 801fcc8:	d110      	bne.n	801fcec <__mdiff+0x38>
 801fcca:	4629      	mov	r1, r5
 801fccc:	4630      	mov	r0, r6
 801fcce:	f7ff fda5 	bl	801f81c <_Balloc>
 801fcd2:	b930      	cbnz	r0, 801fce2 <__mdiff+0x2e>
 801fcd4:	4b39      	ldr	r3, [pc, #228]	; (801fdbc <__mdiff+0x108>)
 801fcd6:	4602      	mov	r2, r0
 801fcd8:	f240 2132 	movw	r1, #562	; 0x232
 801fcdc:	4838      	ldr	r0, [pc, #224]	; (801fdc0 <__mdiff+0x10c>)
 801fcde:	f002 f85d 	bl	8021d9c <__assert_func>
 801fce2:	2301      	movs	r3, #1
 801fce4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801fce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcec:	bfa4      	itt	ge
 801fcee:	463b      	movge	r3, r7
 801fcf0:	4627      	movge	r7, r4
 801fcf2:	4630      	mov	r0, r6
 801fcf4:	6879      	ldr	r1, [r7, #4]
 801fcf6:	bfa6      	itte	ge
 801fcf8:	461c      	movge	r4, r3
 801fcfa:	2500      	movge	r5, #0
 801fcfc:	2501      	movlt	r5, #1
 801fcfe:	f7ff fd8d 	bl	801f81c <_Balloc>
 801fd02:	b920      	cbnz	r0, 801fd0e <__mdiff+0x5a>
 801fd04:	4b2d      	ldr	r3, [pc, #180]	; (801fdbc <__mdiff+0x108>)
 801fd06:	4602      	mov	r2, r0
 801fd08:	f44f 7110 	mov.w	r1, #576	; 0x240
 801fd0c:	e7e6      	b.n	801fcdc <__mdiff+0x28>
 801fd0e:	693e      	ldr	r6, [r7, #16]
 801fd10:	60c5      	str	r5, [r0, #12]
 801fd12:	6925      	ldr	r5, [r4, #16]
 801fd14:	f107 0114 	add.w	r1, r7, #20
 801fd18:	f104 0914 	add.w	r9, r4, #20
 801fd1c:	f100 0e14 	add.w	lr, r0, #20
 801fd20:	f107 0210 	add.w	r2, r7, #16
 801fd24:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801fd28:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801fd2c:	46f2      	mov	sl, lr
 801fd2e:	2700      	movs	r7, #0
 801fd30:	f859 3b04 	ldr.w	r3, [r9], #4
 801fd34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801fd38:	fa1f f883 	uxth.w	r8, r3
 801fd3c:	fa17 f78b 	uxtah	r7, r7, fp
 801fd40:	0c1b      	lsrs	r3, r3, #16
 801fd42:	eba7 0808 	sub.w	r8, r7, r8
 801fd46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801fd4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801fd4e:	fa1f f888 	uxth.w	r8, r8
 801fd52:	141f      	asrs	r7, r3, #16
 801fd54:	454d      	cmp	r5, r9
 801fd56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801fd5a:	f84a 3b04 	str.w	r3, [sl], #4
 801fd5e:	d8e7      	bhi.n	801fd30 <__mdiff+0x7c>
 801fd60:	1b2b      	subs	r3, r5, r4
 801fd62:	3b15      	subs	r3, #21
 801fd64:	f023 0303 	bic.w	r3, r3, #3
 801fd68:	3304      	adds	r3, #4
 801fd6a:	3415      	adds	r4, #21
 801fd6c:	42a5      	cmp	r5, r4
 801fd6e:	bf38      	it	cc
 801fd70:	2304      	movcc	r3, #4
 801fd72:	4419      	add	r1, r3
 801fd74:	4473      	add	r3, lr
 801fd76:	469e      	mov	lr, r3
 801fd78:	460d      	mov	r5, r1
 801fd7a:	4565      	cmp	r5, ip
 801fd7c:	d30e      	bcc.n	801fd9c <__mdiff+0xe8>
 801fd7e:	f10c 0203 	add.w	r2, ip, #3
 801fd82:	1a52      	subs	r2, r2, r1
 801fd84:	f022 0203 	bic.w	r2, r2, #3
 801fd88:	3903      	subs	r1, #3
 801fd8a:	458c      	cmp	ip, r1
 801fd8c:	bf38      	it	cc
 801fd8e:	2200      	movcc	r2, #0
 801fd90:	441a      	add	r2, r3
 801fd92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801fd96:	b17b      	cbz	r3, 801fdb8 <__mdiff+0x104>
 801fd98:	6106      	str	r6, [r0, #16]
 801fd9a:	e7a5      	b.n	801fce8 <__mdiff+0x34>
 801fd9c:	f855 8b04 	ldr.w	r8, [r5], #4
 801fda0:	fa17 f488 	uxtah	r4, r7, r8
 801fda4:	1422      	asrs	r2, r4, #16
 801fda6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801fdaa:	b2a4      	uxth	r4, r4
 801fdac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801fdb0:	f84e 4b04 	str.w	r4, [lr], #4
 801fdb4:	1417      	asrs	r7, r2, #16
 801fdb6:	e7e0      	b.n	801fd7a <__mdiff+0xc6>
 801fdb8:	3e01      	subs	r6, #1
 801fdba:	e7ea      	b.n	801fd92 <__mdiff+0xde>
 801fdbc:	08028fcd 	.word	0x08028fcd
 801fdc0:	0802903d 	.word	0x0802903d

0801fdc4 <__d2b>:
 801fdc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fdc8:	4689      	mov	r9, r1
 801fdca:	2101      	movs	r1, #1
 801fdcc:	ec57 6b10 	vmov	r6, r7, d0
 801fdd0:	4690      	mov	r8, r2
 801fdd2:	f7ff fd23 	bl	801f81c <_Balloc>
 801fdd6:	4604      	mov	r4, r0
 801fdd8:	b930      	cbnz	r0, 801fde8 <__d2b+0x24>
 801fdda:	4602      	mov	r2, r0
 801fddc:	4b25      	ldr	r3, [pc, #148]	; (801fe74 <__d2b+0xb0>)
 801fdde:	4826      	ldr	r0, [pc, #152]	; (801fe78 <__d2b+0xb4>)
 801fde0:	f240 310a 	movw	r1, #778	; 0x30a
 801fde4:	f001 ffda 	bl	8021d9c <__assert_func>
 801fde8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801fdec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801fdf0:	bb35      	cbnz	r5, 801fe40 <__d2b+0x7c>
 801fdf2:	2e00      	cmp	r6, #0
 801fdf4:	9301      	str	r3, [sp, #4]
 801fdf6:	d028      	beq.n	801fe4a <__d2b+0x86>
 801fdf8:	4668      	mov	r0, sp
 801fdfa:	9600      	str	r6, [sp, #0]
 801fdfc:	f7ff fda6 	bl	801f94c <__lo0bits>
 801fe00:	9900      	ldr	r1, [sp, #0]
 801fe02:	b300      	cbz	r0, 801fe46 <__d2b+0x82>
 801fe04:	9a01      	ldr	r2, [sp, #4]
 801fe06:	f1c0 0320 	rsb	r3, r0, #32
 801fe0a:	fa02 f303 	lsl.w	r3, r2, r3
 801fe0e:	430b      	orrs	r3, r1
 801fe10:	40c2      	lsrs	r2, r0
 801fe12:	6163      	str	r3, [r4, #20]
 801fe14:	9201      	str	r2, [sp, #4]
 801fe16:	9b01      	ldr	r3, [sp, #4]
 801fe18:	61a3      	str	r3, [r4, #24]
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	bf14      	ite	ne
 801fe1e:	2202      	movne	r2, #2
 801fe20:	2201      	moveq	r2, #1
 801fe22:	6122      	str	r2, [r4, #16]
 801fe24:	b1d5      	cbz	r5, 801fe5c <__d2b+0x98>
 801fe26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801fe2a:	4405      	add	r5, r0
 801fe2c:	f8c9 5000 	str.w	r5, [r9]
 801fe30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801fe34:	f8c8 0000 	str.w	r0, [r8]
 801fe38:	4620      	mov	r0, r4
 801fe3a:	b003      	add	sp, #12
 801fe3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fe40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fe44:	e7d5      	b.n	801fdf2 <__d2b+0x2e>
 801fe46:	6161      	str	r1, [r4, #20]
 801fe48:	e7e5      	b.n	801fe16 <__d2b+0x52>
 801fe4a:	a801      	add	r0, sp, #4
 801fe4c:	f7ff fd7e 	bl	801f94c <__lo0bits>
 801fe50:	9b01      	ldr	r3, [sp, #4]
 801fe52:	6163      	str	r3, [r4, #20]
 801fe54:	2201      	movs	r2, #1
 801fe56:	6122      	str	r2, [r4, #16]
 801fe58:	3020      	adds	r0, #32
 801fe5a:	e7e3      	b.n	801fe24 <__d2b+0x60>
 801fe5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fe60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801fe64:	f8c9 0000 	str.w	r0, [r9]
 801fe68:	6918      	ldr	r0, [r3, #16]
 801fe6a:	f7ff fd4f 	bl	801f90c <__hi0bits>
 801fe6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801fe72:	e7df      	b.n	801fe34 <__d2b+0x70>
 801fe74:	08028fcd 	.word	0x08028fcd
 801fe78:	0802903d 	.word	0x0802903d

0801fe7c <frexp>:
 801fe7c:	b570      	push	{r4, r5, r6, lr}
 801fe7e:	2100      	movs	r1, #0
 801fe80:	ec55 4b10 	vmov	r4, r5, d0
 801fe84:	6001      	str	r1, [r0, #0]
 801fe86:	4916      	ldr	r1, [pc, #88]	; (801fee0 <frexp+0x64>)
 801fe88:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801fe8c:	428a      	cmp	r2, r1
 801fe8e:	4606      	mov	r6, r0
 801fe90:	462b      	mov	r3, r5
 801fe92:	dc22      	bgt.n	801feda <frexp+0x5e>
 801fe94:	ee10 1a10 	vmov	r1, s0
 801fe98:	4311      	orrs	r1, r2
 801fe9a:	d01e      	beq.n	801feda <frexp+0x5e>
 801fe9c:	4911      	ldr	r1, [pc, #68]	; (801fee4 <frexp+0x68>)
 801fe9e:	4029      	ands	r1, r5
 801fea0:	b969      	cbnz	r1, 801febe <frexp+0x42>
 801fea2:	4b11      	ldr	r3, [pc, #68]	; (801fee8 <frexp+0x6c>)
 801fea4:	2200      	movs	r2, #0
 801fea6:	ee10 0a10 	vmov	r0, s0
 801feaa:	4629      	mov	r1, r5
 801feac:	f7e0 fbd4 	bl	8000658 <__aeabi_dmul>
 801feb0:	460b      	mov	r3, r1
 801feb2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801feb6:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801feba:	4604      	mov	r4, r0
 801febc:	6031      	str	r1, [r6, #0]
 801febe:	6831      	ldr	r1, [r6, #0]
 801fec0:	1512      	asrs	r2, r2, #20
 801fec2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fec6:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 801feca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801fece:	440a      	add	r2, r1
 801fed0:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801fed4:	6032      	str	r2, [r6, #0]
 801fed6:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801feda:	ec45 4b10 	vmov	d0, r4, r5
 801fede:	bd70      	pop	{r4, r5, r6, pc}
 801fee0:	7fefffff 	.word	0x7fefffff
 801fee4:	7ff00000 	.word	0x7ff00000
 801fee8:	43500000 	.word	0x43500000

0801feec <_sbrk_r>:
 801feec:	b538      	push	{r3, r4, r5, lr}
 801feee:	4d06      	ldr	r5, [pc, #24]	; (801ff08 <_sbrk_r+0x1c>)
 801fef0:	2300      	movs	r3, #0
 801fef2:	4604      	mov	r4, r0
 801fef4:	4608      	mov	r0, r1
 801fef6:	602b      	str	r3, [r5, #0]
 801fef8:	f7e3 fe9e 	bl	8003c38 <_sbrk>
 801fefc:	1c43      	adds	r3, r0, #1
 801fefe:	d102      	bne.n	801ff06 <_sbrk_r+0x1a>
 801ff00:	682b      	ldr	r3, [r5, #0]
 801ff02:	b103      	cbz	r3, 801ff06 <_sbrk_r+0x1a>
 801ff04:	6023      	str	r3, [r4, #0]
 801ff06:	bd38      	pop	{r3, r4, r5, pc}
 801ff08:	2000be30 	.word	0x2000be30

0801ff0c <siscanf>:
 801ff0c:	b40e      	push	{r1, r2, r3}
 801ff0e:	b510      	push	{r4, lr}
 801ff10:	b09f      	sub	sp, #124	; 0x7c
 801ff12:	ac21      	add	r4, sp, #132	; 0x84
 801ff14:	f44f 7101 	mov.w	r1, #516	; 0x204
 801ff18:	f854 2b04 	ldr.w	r2, [r4], #4
 801ff1c:	9201      	str	r2, [sp, #4]
 801ff1e:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ff22:	9004      	str	r0, [sp, #16]
 801ff24:	9008      	str	r0, [sp, #32]
 801ff26:	f7e0 f97d 	bl	8000224 <strlen>
 801ff2a:	4b0c      	ldr	r3, [pc, #48]	; (801ff5c <siscanf+0x50>)
 801ff2c:	9005      	str	r0, [sp, #20]
 801ff2e:	9009      	str	r0, [sp, #36]	; 0x24
 801ff30:	930c      	str	r3, [sp, #48]	; 0x30
 801ff32:	480b      	ldr	r0, [pc, #44]	; (801ff60 <siscanf+0x54>)
 801ff34:	9a01      	ldr	r2, [sp, #4]
 801ff36:	6800      	ldr	r0, [r0, #0]
 801ff38:	9403      	str	r4, [sp, #12]
 801ff3a:	2300      	movs	r3, #0
 801ff3c:	9310      	str	r3, [sp, #64]	; 0x40
 801ff3e:	9315      	str	r3, [sp, #84]	; 0x54
 801ff40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ff44:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ff48:	a904      	add	r1, sp, #16
 801ff4a:	4623      	mov	r3, r4
 801ff4c:	f000 f9ee 	bl	802032c <__ssvfiscanf_r>
 801ff50:	b01f      	add	sp, #124	; 0x7c
 801ff52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff56:	b003      	add	sp, #12
 801ff58:	4770      	bx	lr
 801ff5a:	bf00      	nop
 801ff5c:	0801ff87 	.word	0x0801ff87
 801ff60:	20000038 	.word	0x20000038

0801ff64 <__sread>:
 801ff64:	b510      	push	{r4, lr}
 801ff66:	460c      	mov	r4, r1
 801ff68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff6c:	f002 fa12 	bl	8022394 <_read_r>
 801ff70:	2800      	cmp	r0, #0
 801ff72:	bfab      	itete	ge
 801ff74:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 801ff76:	89a3      	ldrhlt	r3, [r4, #12]
 801ff78:	181b      	addge	r3, r3, r0
 801ff7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ff7e:	bfac      	ite	ge
 801ff80:	6523      	strge	r3, [r4, #80]	; 0x50
 801ff82:	81a3      	strhlt	r3, [r4, #12]
 801ff84:	bd10      	pop	{r4, pc}

0801ff86 <__seofread>:
 801ff86:	2000      	movs	r0, #0
 801ff88:	4770      	bx	lr

0801ff8a <__swrite>:
 801ff8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff8e:	461f      	mov	r7, r3
 801ff90:	898b      	ldrh	r3, [r1, #12]
 801ff92:	05db      	lsls	r3, r3, #23
 801ff94:	4605      	mov	r5, r0
 801ff96:	460c      	mov	r4, r1
 801ff98:	4616      	mov	r6, r2
 801ff9a:	d505      	bpl.n	801ffa8 <__swrite+0x1e>
 801ff9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ffa0:	2302      	movs	r3, #2
 801ffa2:	2200      	movs	r2, #0
 801ffa4:	f002 f9b8 	bl	8022318 <_lseek_r>
 801ffa8:	89a3      	ldrh	r3, [r4, #12]
 801ffaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ffae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ffb2:	81a3      	strh	r3, [r4, #12]
 801ffb4:	4632      	mov	r2, r6
 801ffb6:	463b      	mov	r3, r7
 801ffb8:	4628      	mov	r0, r5
 801ffba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ffbe:	f001 be9b 	b.w	8021cf8 <_write_r>

0801ffc2 <__sseek>:
 801ffc2:	b510      	push	{r4, lr}
 801ffc4:	460c      	mov	r4, r1
 801ffc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ffca:	f002 f9a5 	bl	8022318 <_lseek_r>
 801ffce:	1c43      	adds	r3, r0, #1
 801ffd0:	89a3      	ldrh	r3, [r4, #12]
 801ffd2:	bf15      	itete	ne
 801ffd4:	6520      	strne	r0, [r4, #80]	; 0x50
 801ffd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ffda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ffde:	81a3      	strheq	r3, [r4, #12]
 801ffe0:	bf18      	it	ne
 801ffe2:	81a3      	strhne	r3, [r4, #12]
 801ffe4:	bd10      	pop	{r4, pc}

0801ffe6 <__sclose>:
 801ffe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ffea:	f001 bf23 	b.w	8021e34 <_close_r>

0801ffee <strcpy>:
 801ffee:	4603      	mov	r3, r0
 801fff0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fff4:	f803 2b01 	strb.w	r2, [r3], #1
 801fff8:	2a00      	cmp	r2, #0
 801fffa:	d1f9      	bne.n	801fff0 <strcpy+0x2>
 801fffc:	4770      	bx	lr
	...

08020000 <_strtoul_l.isra.0>:
 8020000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020004:	4e3b      	ldr	r6, [pc, #236]	; (80200f4 <_strtoul_l.isra.0+0xf4>)
 8020006:	4686      	mov	lr, r0
 8020008:	468c      	mov	ip, r1
 802000a:	4660      	mov	r0, ip
 802000c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020010:	5da5      	ldrb	r5, [r4, r6]
 8020012:	f015 0508 	ands.w	r5, r5, #8
 8020016:	d1f8      	bne.n	802000a <_strtoul_l.isra.0+0xa>
 8020018:	2c2d      	cmp	r4, #45	; 0x2d
 802001a:	d134      	bne.n	8020086 <_strtoul_l.isra.0+0x86>
 802001c:	f89c 4000 	ldrb.w	r4, [ip]
 8020020:	f04f 0801 	mov.w	r8, #1
 8020024:	f100 0c02 	add.w	ip, r0, #2
 8020028:	2b00      	cmp	r3, #0
 802002a:	d05e      	beq.n	80200ea <_strtoul_l.isra.0+0xea>
 802002c:	2b10      	cmp	r3, #16
 802002e:	d10c      	bne.n	802004a <_strtoul_l.isra.0+0x4a>
 8020030:	2c30      	cmp	r4, #48	; 0x30
 8020032:	d10a      	bne.n	802004a <_strtoul_l.isra.0+0x4a>
 8020034:	f89c 0000 	ldrb.w	r0, [ip]
 8020038:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802003c:	2858      	cmp	r0, #88	; 0x58
 802003e:	d14f      	bne.n	80200e0 <_strtoul_l.isra.0+0xe0>
 8020040:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8020044:	2310      	movs	r3, #16
 8020046:	f10c 0c02 	add.w	ip, ip, #2
 802004a:	f04f 37ff 	mov.w	r7, #4294967295
 802004e:	2500      	movs	r5, #0
 8020050:	fbb7 f7f3 	udiv	r7, r7, r3
 8020054:	fb03 f907 	mul.w	r9, r3, r7
 8020058:	ea6f 0909 	mvn.w	r9, r9
 802005c:	4628      	mov	r0, r5
 802005e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8020062:	2e09      	cmp	r6, #9
 8020064:	d818      	bhi.n	8020098 <_strtoul_l.isra.0+0x98>
 8020066:	4634      	mov	r4, r6
 8020068:	42a3      	cmp	r3, r4
 802006a:	dd24      	ble.n	80200b6 <_strtoul_l.isra.0+0xb6>
 802006c:	2d00      	cmp	r5, #0
 802006e:	db1f      	blt.n	80200b0 <_strtoul_l.isra.0+0xb0>
 8020070:	4287      	cmp	r7, r0
 8020072:	d31d      	bcc.n	80200b0 <_strtoul_l.isra.0+0xb0>
 8020074:	d101      	bne.n	802007a <_strtoul_l.isra.0+0x7a>
 8020076:	45a1      	cmp	r9, r4
 8020078:	db1a      	blt.n	80200b0 <_strtoul_l.isra.0+0xb0>
 802007a:	fb00 4003 	mla	r0, r0, r3, r4
 802007e:	2501      	movs	r5, #1
 8020080:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020084:	e7eb      	b.n	802005e <_strtoul_l.isra.0+0x5e>
 8020086:	2c2b      	cmp	r4, #43	; 0x2b
 8020088:	bf08      	it	eq
 802008a:	f89c 4000 	ldrbeq.w	r4, [ip]
 802008e:	46a8      	mov	r8, r5
 8020090:	bf08      	it	eq
 8020092:	f100 0c02 	addeq.w	ip, r0, #2
 8020096:	e7c7      	b.n	8020028 <_strtoul_l.isra.0+0x28>
 8020098:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 802009c:	2e19      	cmp	r6, #25
 802009e:	d801      	bhi.n	80200a4 <_strtoul_l.isra.0+0xa4>
 80200a0:	3c37      	subs	r4, #55	; 0x37
 80200a2:	e7e1      	b.n	8020068 <_strtoul_l.isra.0+0x68>
 80200a4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80200a8:	2e19      	cmp	r6, #25
 80200aa:	d804      	bhi.n	80200b6 <_strtoul_l.isra.0+0xb6>
 80200ac:	3c57      	subs	r4, #87	; 0x57
 80200ae:	e7db      	b.n	8020068 <_strtoul_l.isra.0+0x68>
 80200b0:	f04f 35ff 	mov.w	r5, #4294967295
 80200b4:	e7e4      	b.n	8020080 <_strtoul_l.isra.0+0x80>
 80200b6:	2d00      	cmp	r5, #0
 80200b8:	da07      	bge.n	80200ca <_strtoul_l.isra.0+0xca>
 80200ba:	2322      	movs	r3, #34	; 0x22
 80200bc:	f8ce 3000 	str.w	r3, [lr]
 80200c0:	f04f 30ff 	mov.w	r0, #4294967295
 80200c4:	b942      	cbnz	r2, 80200d8 <_strtoul_l.isra.0+0xd8>
 80200c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80200ca:	f1b8 0f00 	cmp.w	r8, #0
 80200ce:	d000      	beq.n	80200d2 <_strtoul_l.isra.0+0xd2>
 80200d0:	4240      	negs	r0, r0
 80200d2:	2a00      	cmp	r2, #0
 80200d4:	d0f7      	beq.n	80200c6 <_strtoul_l.isra.0+0xc6>
 80200d6:	b10d      	cbz	r5, 80200dc <_strtoul_l.isra.0+0xdc>
 80200d8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80200dc:	6011      	str	r1, [r2, #0]
 80200de:	e7f2      	b.n	80200c6 <_strtoul_l.isra.0+0xc6>
 80200e0:	2430      	movs	r4, #48	; 0x30
 80200e2:	2b00      	cmp	r3, #0
 80200e4:	d1b1      	bne.n	802004a <_strtoul_l.isra.0+0x4a>
 80200e6:	2308      	movs	r3, #8
 80200e8:	e7af      	b.n	802004a <_strtoul_l.isra.0+0x4a>
 80200ea:	2c30      	cmp	r4, #48	; 0x30
 80200ec:	d0a2      	beq.n	8020034 <_strtoul_l.isra.0+0x34>
 80200ee:	230a      	movs	r3, #10
 80200f0:	e7ab      	b.n	802004a <_strtoul_l.isra.0+0x4a>
 80200f2:	bf00      	nop
 80200f4:	08028d49 	.word	0x08028d49

080200f8 <_strtoul_r>:
 80200f8:	f7ff bf82 	b.w	8020000 <_strtoul_l.isra.0>

080200fc <strtoul>:
 80200fc:	4613      	mov	r3, r2
 80200fe:	460a      	mov	r2, r1
 8020100:	4601      	mov	r1, r0
 8020102:	4802      	ldr	r0, [pc, #8]	; (802010c <strtoul+0x10>)
 8020104:	6800      	ldr	r0, [r0, #0]
 8020106:	f7ff bf7b 	b.w	8020000 <_strtoul_l.isra.0>
 802010a:	bf00      	nop
 802010c:	20000038 	.word	0x20000038

08020110 <__ssprint_r>:
 8020110:	6893      	ldr	r3, [r2, #8]
 8020112:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020116:	4680      	mov	r8, r0
 8020118:	460c      	mov	r4, r1
 802011a:	4617      	mov	r7, r2
 802011c:	2b00      	cmp	r3, #0
 802011e:	d061      	beq.n	80201e4 <__ssprint_r+0xd4>
 8020120:	2300      	movs	r3, #0
 8020122:	f8d2 a000 	ldr.w	sl, [r2]
 8020126:	9301      	str	r3, [sp, #4]
 8020128:	469b      	mov	fp, r3
 802012a:	f1bb 0f00 	cmp.w	fp, #0
 802012e:	d02b      	beq.n	8020188 <__ssprint_r+0x78>
 8020130:	68a6      	ldr	r6, [r4, #8]
 8020132:	45b3      	cmp	fp, r6
 8020134:	d342      	bcc.n	80201bc <__ssprint_r+0xac>
 8020136:	89a2      	ldrh	r2, [r4, #12]
 8020138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802013c:	d03e      	beq.n	80201bc <__ssprint_r+0xac>
 802013e:	6825      	ldr	r5, [r4, #0]
 8020140:	6921      	ldr	r1, [r4, #16]
 8020142:	eba5 0901 	sub.w	r9, r5, r1
 8020146:	6965      	ldr	r5, [r4, #20]
 8020148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802014c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020150:	f109 0001 	add.w	r0, r9, #1
 8020154:	106d      	asrs	r5, r5, #1
 8020156:	4458      	add	r0, fp
 8020158:	4285      	cmp	r5, r0
 802015a:	bf38      	it	cc
 802015c:	4605      	movcc	r5, r0
 802015e:	0553      	lsls	r3, r2, #21
 8020160:	d545      	bpl.n	80201ee <__ssprint_r+0xde>
 8020162:	4629      	mov	r1, r5
 8020164:	4640      	mov	r0, r8
 8020166:	f7ff f90b 	bl	801f380 <_malloc_r>
 802016a:	4606      	mov	r6, r0
 802016c:	b9a0      	cbnz	r0, 8020198 <__ssprint_r+0x88>
 802016e:	230c      	movs	r3, #12
 8020170:	f8c8 3000 	str.w	r3, [r8]
 8020174:	89a3      	ldrh	r3, [r4, #12]
 8020176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802017a:	81a3      	strh	r3, [r4, #12]
 802017c:	2300      	movs	r3, #0
 802017e:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8020182:	f04f 30ff 	mov.w	r0, #4294967295
 8020186:	e02f      	b.n	80201e8 <__ssprint_r+0xd8>
 8020188:	f8da 3000 	ldr.w	r3, [sl]
 802018c:	f8da b004 	ldr.w	fp, [sl, #4]
 8020190:	9301      	str	r3, [sp, #4]
 8020192:	f10a 0a08 	add.w	sl, sl, #8
 8020196:	e7c8      	b.n	802012a <__ssprint_r+0x1a>
 8020198:	464a      	mov	r2, r9
 802019a:	6921      	ldr	r1, [r4, #16]
 802019c:	f7fa fba4 	bl	801a8e8 <memcpy>
 80201a0:	89a2      	ldrh	r2, [r4, #12]
 80201a2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80201a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80201aa:	81a2      	strh	r2, [r4, #12]
 80201ac:	6126      	str	r6, [r4, #16]
 80201ae:	6165      	str	r5, [r4, #20]
 80201b0:	444e      	add	r6, r9
 80201b2:	eba5 0509 	sub.w	r5, r5, r9
 80201b6:	6026      	str	r6, [r4, #0]
 80201b8:	60a5      	str	r5, [r4, #8]
 80201ba:	465e      	mov	r6, fp
 80201bc:	455e      	cmp	r6, fp
 80201be:	bf28      	it	cs
 80201c0:	465e      	movcs	r6, fp
 80201c2:	4632      	mov	r2, r6
 80201c4:	9901      	ldr	r1, [sp, #4]
 80201c6:	6820      	ldr	r0, [r4, #0]
 80201c8:	f7fa fb9c 	bl	801a904 <memmove>
 80201cc:	68a2      	ldr	r2, [r4, #8]
 80201ce:	1b92      	subs	r2, r2, r6
 80201d0:	60a2      	str	r2, [r4, #8]
 80201d2:	6822      	ldr	r2, [r4, #0]
 80201d4:	4432      	add	r2, r6
 80201d6:	6022      	str	r2, [r4, #0]
 80201d8:	68ba      	ldr	r2, [r7, #8]
 80201da:	eba2 030b 	sub.w	r3, r2, fp
 80201de:	60bb      	str	r3, [r7, #8]
 80201e0:	2b00      	cmp	r3, #0
 80201e2:	d1d1      	bne.n	8020188 <__ssprint_r+0x78>
 80201e4:	2000      	movs	r0, #0
 80201e6:	6078      	str	r0, [r7, #4]
 80201e8:	b003      	add	sp, #12
 80201ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201ee:	462a      	mov	r2, r5
 80201f0:	4640      	mov	r0, r8
 80201f2:	f002 f8e9 	bl	80223c8 <_realloc_r>
 80201f6:	4606      	mov	r6, r0
 80201f8:	2800      	cmp	r0, #0
 80201fa:	d1d7      	bne.n	80201ac <__ssprint_r+0x9c>
 80201fc:	6921      	ldr	r1, [r4, #16]
 80201fe:	4640      	mov	r0, r8
 8020200:	f7fe fe62 	bl	801eec8 <_free_r>
 8020204:	e7b3      	b.n	802016e <__ssprint_r+0x5e>

08020206 <_sungetc_r>:
 8020206:	b538      	push	{r3, r4, r5, lr}
 8020208:	1c4b      	adds	r3, r1, #1
 802020a:	4614      	mov	r4, r2
 802020c:	d103      	bne.n	8020216 <_sungetc_r+0x10>
 802020e:	f04f 35ff 	mov.w	r5, #4294967295
 8020212:	4628      	mov	r0, r5
 8020214:	bd38      	pop	{r3, r4, r5, pc}
 8020216:	8993      	ldrh	r3, [r2, #12]
 8020218:	f023 0320 	bic.w	r3, r3, #32
 802021c:	8193      	strh	r3, [r2, #12]
 802021e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020220:	6852      	ldr	r2, [r2, #4]
 8020222:	b2cd      	uxtb	r5, r1
 8020224:	b18b      	cbz	r3, 802024a <_sungetc_r+0x44>
 8020226:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020228:	4293      	cmp	r3, r2
 802022a:	dd08      	ble.n	802023e <_sungetc_r+0x38>
 802022c:	6823      	ldr	r3, [r4, #0]
 802022e:	1e5a      	subs	r2, r3, #1
 8020230:	6022      	str	r2, [r4, #0]
 8020232:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020236:	6863      	ldr	r3, [r4, #4]
 8020238:	3301      	adds	r3, #1
 802023a:	6063      	str	r3, [r4, #4]
 802023c:	e7e9      	b.n	8020212 <_sungetc_r+0xc>
 802023e:	4621      	mov	r1, r4
 8020240:	f001 f825 	bl	802128e <__submore>
 8020244:	2800      	cmp	r0, #0
 8020246:	d0f1      	beq.n	802022c <_sungetc_r+0x26>
 8020248:	e7e1      	b.n	802020e <_sungetc_r+0x8>
 802024a:	6921      	ldr	r1, [r4, #16]
 802024c:	6823      	ldr	r3, [r4, #0]
 802024e:	b151      	cbz	r1, 8020266 <_sungetc_r+0x60>
 8020250:	4299      	cmp	r1, r3
 8020252:	d208      	bcs.n	8020266 <_sungetc_r+0x60>
 8020254:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020258:	42a9      	cmp	r1, r5
 802025a:	d104      	bne.n	8020266 <_sungetc_r+0x60>
 802025c:	3b01      	subs	r3, #1
 802025e:	3201      	adds	r2, #1
 8020260:	6023      	str	r3, [r4, #0]
 8020262:	6062      	str	r2, [r4, #4]
 8020264:	e7d5      	b.n	8020212 <_sungetc_r+0xc>
 8020266:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 802026a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802026e:	6323      	str	r3, [r4, #48]	; 0x30
 8020270:	2303      	movs	r3, #3
 8020272:	6363      	str	r3, [r4, #52]	; 0x34
 8020274:	4623      	mov	r3, r4
 8020276:	f803 5f42 	strb.w	r5, [r3, #66]!
 802027a:	6023      	str	r3, [r4, #0]
 802027c:	2301      	movs	r3, #1
 802027e:	e7dc      	b.n	802023a <_sungetc_r+0x34>

08020280 <__ssrefill_r>:
 8020280:	b510      	push	{r4, lr}
 8020282:	460c      	mov	r4, r1
 8020284:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8020286:	b169      	cbz	r1, 80202a4 <__ssrefill_r+0x24>
 8020288:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802028c:	4299      	cmp	r1, r3
 802028e:	d001      	beq.n	8020294 <__ssrefill_r+0x14>
 8020290:	f7fe fe1a 	bl	801eec8 <_free_r>
 8020294:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020296:	6063      	str	r3, [r4, #4]
 8020298:	2000      	movs	r0, #0
 802029a:	6320      	str	r0, [r4, #48]	; 0x30
 802029c:	b113      	cbz	r3, 80202a4 <__ssrefill_r+0x24>
 802029e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80202a0:	6023      	str	r3, [r4, #0]
 80202a2:	bd10      	pop	{r4, pc}
 80202a4:	6923      	ldr	r3, [r4, #16]
 80202a6:	6023      	str	r3, [r4, #0]
 80202a8:	2300      	movs	r3, #0
 80202aa:	6063      	str	r3, [r4, #4]
 80202ac:	89a3      	ldrh	r3, [r4, #12]
 80202ae:	f043 0320 	orr.w	r3, r3, #32
 80202b2:	81a3      	strh	r3, [r4, #12]
 80202b4:	f04f 30ff 	mov.w	r0, #4294967295
 80202b8:	e7f3      	b.n	80202a2 <__ssrefill_r+0x22>

080202ba <_sfread_r>:
 80202ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202be:	461f      	mov	r7, r3
 80202c0:	4613      	mov	r3, r2
 80202c2:	437b      	muls	r3, r7
 80202c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80202c6:	4682      	mov	sl, r0
 80202c8:	4688      	mov	r8, r1
 80202ca:	4691      	mov	r9, r2
 80202cc:	d027      	beq.n	802031e <_sfread_r+0x64>
 80202ce:	461e      	mov	r6, r3
 80202d0:	e9d4 1500 	ldrd	r1, r5, [r4]
 80202d4:	42b5      	cmp	r5, r6
 80202d6:	d30b      	bcc.n	80202f0 <_sfread_r+0x36>
 80202d8:	4632      	mov	r2, r6
 80202da:	4640      	mov	r0, r8
 80202dc:	f7fa fb04 	bl	801a8e8 <memcpy>
 80202e0:	6862      	ldr	r2, [r4, #4]
 80202e2:	1b92      	subs	r2, r2, r6
 80202e4:	6062      	str	r2, [r4, #4]
 80202e6:	6822      	ldr	r2, [r4, #0]
 80202e8:	4432      	add	r2, r6
 80202ea:	6022      	str	r2, [r4, #0]
 80202ec:	463b      	mov	r3, r7
 80202ee:	e016      	b.n	802031e <_sfread_r+0x64>
 80202f0:	462a      	mov	r2, r5
 80202f2:	4640      	mov	r0, r8
 80202f4:	9301      	str	r3, [sp, #4]
 80202f6:	f7fa faf7 	bl	801a8e8 <memcpy>
 80202fa:	6822      	ldr	r2, [r4, #0]
 80202fc:	2300      	movs	r3, #0
 80202fe:	442a      	add	r2, r5
 8020300:	6063      	str	r3, [r4, #4]
 8020302:	6022      	str	r2, [r4, #0]
 8020304:	4621      	mov	r1, r4
 8020306:	4650      	mov	r0, sl
 8020308:	f7ff ffba 	bl	8020280 <__ssrefill_r>
 802030c:	44a8      	add	r8, r5
 802030e:	9b01      	ldr	r3, [sp, #4]
 8020310:	eba6 0b05 	sub.w	fp, r6, r5
 8020314:	b138      	cbz	r0, 8020326 <_sfread_r+0x6c>
 8020316:	441d      	add	r5, r3
 8020318:	1bad      	subs	r5, r5, r6
 802031a:	fbb5 f3f9 	udiv	r3, r5, r9
 802031e:	4618      	mov	r0, r3
 8020320:	b003      	add	sp, #12
 8020322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020326:	465e      	mov	r6, fp
 8020328:	e7d2      	b.n	80202d0 <_sfread_r+0x16>
	...

0802032c <__ssvfiscanf_r>:
 802032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020330:	ed2d 8b02 	vpush	{d8}
 8020334:	b0df      	sub	sp, #380	; 0x17c
 8020336:	461e      	mov	r6, r3
 8020338:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802033c:	af02      	add	r7, sp, #8
 802033e:	049d      	lsls	r5, r3, #18
 8020340:	ee08 0a10 	vmov	s16, r0
 8020344:	460c      	mov	r4, r1
 8020346:	613a      	str	r2, [r7, #16]
 8020348:	d406      	bmi.n	8020358 <__ssvfiscanf_r+0x2c>
 802034a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802034e:	818b      	strh	r3, [r1, #12]
 8020350:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8020352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020356:	664b      	str	r3, [r1, #100]	; 0x64
 8020358:	2300      	movs	r3, #0
 802035a:	e9c7 3307 	strd	r3, r3, [r7, #28]
 802035e:	617b      	str	r3, [r7, #20]
 8020360:	469b      	mov	fp, r3
 8020362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020364:	627b      	str	r3, [r7, #36]	; 0x24
 8020366:	693a      	ldr	r2, [r7, #16]
 8020368:	f812 3b01 	ldrb.w	r3, [r2], #1
 802036c:	613a      	str	r2, [r7, #16]
 802036e:	637b      	str	r3, [r7, #52]	; 0x34
 8020370:	2b00      	cmp	r3, #0
 8020372:	d035      	beq.n	80203e0 <__ssvfiscanf_r+0xb4>
 8020374:	4a9f      	ldr	r2, [pc, #636]	; (80205f4 <__ssvfiscanf_r+0x2c8>)
 8020376:	f813 9002 	ldrb.w	r9, [r3, r2]
 802037a:	f019 0908 	ands.w	r9, r9, #8
 802037e:	d019      	beq.n	80203b4 <__ssvfiscanf_r+0x88>
 8020380:	6863      	ldr	r3, [r4, #4]
 8020382:	2b00      	cmp	r3, #0
 8020384:	dd0e      	ble.n	80203a4 <__ssvfiscanf_r+0x78>
 8020386:	6823      	ldr	r3, [r4, #0]
 8020388:	499a      	ldr	r1, [pc, #616]	; (80205f4 <__ssvfiscanf_r+0x2c8>)
 802038a:	781a      	ldrb	r2, [r3, #0]
 802038c:	5c8a      	ldrb	r2, [r1, r2]
 802038e:	0710      	lsls	r0, r2, #28
 8020390:	d5e9      	bpl.n	8020366 <__ssvfiscanf_r+0x3a>
 8020392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020394:	3201      	adds	r2, #1
 8020396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020398:	6862      	ldr	r2, [r4, #4]
 802039a:	3301      	adds	r3, #1
 802039c:	3a01      	subs	r2, #1
 802039e:	6062      	str	r2, [r4, #4]
 80203a0:	6023      	str	r3, [r4, #0]
 80203a2:	e7ed      	b.n	8020380 <__ssvfiscanf_r+0x54>
 80203a4:	ee18 0a10 	vmov	r0, s16
 80203a8:	4621      	mov	r1, r4
 80203aa:	f7ff ff69 	bl	8020280 <__ssrefill_r>
 80203ae:	2800      	cmp	r0, #0
 80203b0:	d0e9      	beq.n	8020386 <__ssvfiscanf_r+0x5a>
 80203b2:	e7d8      	b.n	8020366 <__ssvfiscanf_r+0x3a>
 80203b4:	2b25      	cmp	r3, #37	; 0x25
 80203b6:	f040 809f 	bne.w	80204f8 <__ssvfiscanf_r+0x1cc>
 80203ba:	693b      	ldr	r3, [r7, #16]
 80203bc:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 80203c0:	220a      	movs	r2, #10
 80203c2:	6939      	ldr	r1, [r7, #16]
 80203c4:	781d      	ldrb	r5, [r3, #0]
 80203c6:	3101      	adds	r1, #1
 80203c8:	2d7a      	cmp	r5, #122	; 0x7a
 80203ca:	6139      	str	r1, [r7, #16]
 80203cc:	d808      	bhi.n	80203e0 <__ssvfiscanf_r+0xb4>
 80203ce:	2d42      	cmp	r5, #66	; 0x42
 80203d0:	d80b      	bhi.n	80203ea <__ssvfiscanf_r+0xbe>
 80203d2:	2d2a      	cmp	r5, #42	; 0x2a
 80203d4:	f000 80b9 	beq.w	802054a <__ssvfiscanf_r+0x21e>
 80203d8:	d87e      	bhi.n	80204d8 <__ssvfiscanf_r+0x1ac>
 80203da:	2d25      	cmp	r5, #37	; 0x25
 80203dc:	f000 808c 	beq.w	80204f8 <__ssvfiscanf_r+0x1cc>
 80203e0:	f1bb 0f00 	cmp.w	fp, #0
 80203e4:	f000 815f 	beq.w	80206a6 <__ssvfiscanf_r+0x37a>
 80203e8:	e158      	b.n	802069c <__ssvfiscanf_r+0x370>
 80203ea:	3d43      	subs	r5, #67	; 0x43
 80203ec:	2d37      	cmp	r5, #55	; 0x37
 80203ee:	d8f7      	bhi.n	80203e0 <__ssvfiscanf_r+0xb4>
 80203f0:	a101      	add	r1, pc, #4	; (adr r1, 80203f8 <__ssvfiscanf_r+0xcc>)
 80203f2:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 80203f6:	bf00      	nop
 80203f8:	080206cb 	.word	0x080206cb
 80203fc:	080205c7 	.word	0x080205c7
 8020400:	080203e1 	.word	0x080203e1
 8020404:	080203e1 	.word	0x080203e1
 8020408:	080203e1 	.word	0x080203e1
 802040c:	080203e1 	.word	0x080203e1
 8020410:	080203e1 	.word	0x080203e1
 8020414:	080203e1 	.word	0x080203e1
 8020418:	080203e1 	.word	0x080203e1
 802041c:	08020599 	.word	0x08020599
 8020420:	080203e1 	.word	0x080203e1
 8020424:	080203e1 	.word	0x080203e1
 8020428:	080205cf 	.word	0x080205cf
 802042c:	080203e1 	.word	0x080203e1
 8020430:	080203e1 	.word	0x080203e1
 8020434:	080203e1 	.word	0x080203e1
 8020438:	08020601 	.word	0x08020601
 802043c:	080203e1 	.word	0x080203e1
 8020440:	080203e1 	.word	0x080203e1
 8020444:	080203e1 	.word	0x080203e1
 8020448:	080203e1 	.word	0x080203e1
 802044c:	080205e7 	.word	0x080205e7
 8020450:	080203e1 	.word	0x080203e1
 8020454:	080203e1 	.word	0x080203e1
 8020458:	080206b7 	.word	0x080206b7
 802045c:	080203e1 	.word	0x080203e1
 8020460:	080203e1 	.word	0x080203e1
 8020464:	080203e1 	.word	0x080203e1
 8020468:	080203e1 	.word	0x080203e1
 802046c:	080203e1 	.word	0x080203e1
 8020470:	080203e1 	.word	0x080203e1
 8020474:	080203e1 	.word	0x080203e1
 8020478:	080206cf 	.word	0x080206cf
 802047c:	080205cb 	.word	0x080205cb
 8020480:	080203e1 	.word	0x080203e1
 8020484:	080203e1 	.word	0x080203e1
 8020488:	080203e1 	.word	0x080203e1
 802048c:	0802057d 	.word	0x0802057d
 8020490:	08020723 	.word	0x08020723
 8020494:	08020599 	.word	0x08020599
 8020498:	080203e1 	.word	0x080203e1
 802049c:	0802055f 	.word	0x0802055f
 80204a0:	080205a9 	.word	0x080205a9
 80204a4:	080206dd 	.word	0x080206dd
 80204a8:	080205d3 	.word	0x080205d3
 80204ac:	080206d7 	.word	0x080206d7
 80204b0:	080203e1 	.word	0x080203e1
 80204b4:	080203e1 	.word	0x080203e1
 80204b8:	08020605 	.word	0x08020605
 80204bc:	080205a1 	.word	0x080205a1
 80204c0:	080205df 	.word	0x080205df
 80204c4:	080203e1 	.word	0x080203e1
 80204c8:	080203e1 	.word	0x080203e1
 80204cc:	080205e7 	.word	0x080205e7
 80204d0:	080203e1 	.word	0x080203e1
 80204d4:	080205a1 	.word	0x080205a1
 80204d8:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80204dc:	2b09      	cmp	r3, #9
 80204de:	f63f af7f 	bhi.w	80203e0 <__ssvfiscanf_r+0xb4>
 80204e2:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 80204e6:	f47f af7b 	bne.w	80203e0 <__ssvfiscanf_r+0xb4>
 80204ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204ec:	fb02 5503 	mla	r5, r2, r3, r5
 80204f0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80204f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80204f6:	e030      	b.n	802055a <__ssvfiscanf_r+0x22e>
 80204f8:	6863      	ldr	r3, [r4, #4]
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	dd10      	ble.n	8020520 <__ssvfiscanf_r+0x1f4>
 80204fe:	6823      	ldr	r3, [r4, #0]
 8020500:	693a      	ldr	r2, [r7, #16]
 8020502:	7819      	ldrb	r1, [r3, #0]
 8020504:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8020508:	4291      	cmp	r1, r2
 802050a:	f47f af69 	bne.w	80203e0 <__ssvfiscanf_r+0xb4>
 802050e:	6862      	ldr	r2, [r4, #4]
 8020510:	3301      	adds	r3, #1
 8020512:	6023      	str	r3, [r4, #0]
 8020514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020516:	3a01      	subs	r2, #1
 8020518:	6062      	str	r2, [r4, #4]
 802051a:	3301      	adds	r3, #1
 802051c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802051e:	e722      	b.n	8020366 <__ssvfiscanf_r+0x3a>
 8020520:	ee18 0a10 	vmov	r0, s16
 8020524:	4621      	mov	r1, r4
 8020526:	f7ff feab 	bl	8020280 <__ssrefill_r>
 802052a:	2800      	cmp	r0, #0
 802052c:	d0e7      	beq.n	80204fe <__ssvfiscanf_r+0x1d2>
 802052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020530:	b11b      	cbz	r3, 802053a <__ssvfiscanf_r+0x20e>
 8020532:	89a3      	ldrh	r3, [r4, #12]
 8020534:	065b      	lsls	r3, r3, #25
 8020536:	f57f af53 	bpl.w	80203e0 <__ssvfiscanf_r+0xb4>
 802053a:	f1bb 0f00 	cmp.w	fp, #0
 802053e:	f040 80a1 	bne.w	8020684 <__ssvfiscanf_r+0x358>
 8020542:	f04f 33ff 	mov.w	r3, #4294967295
 8020546:	627b      	str	r3, [r7, #36]	; 0x24
 8020548:	e0ad      	b.n	80206a6 <__ssvfiscanf_r+0x37a>
 802054a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802054c:	ea53 0309 	orrs.w	r3, r3, r9
 8020550:	62bb      	str	r3, [r7, #40]	; 0x28
 8020552:	f47f af45 	bne.w	80203e0 <__ssvfiscanf_r+0xb4>
 8020556:	f04f 0910 	mov.w	r9, #16
 802055a:	693b      	ldr	r3, [r7, #16]
 802055c:	e731      	b.n	80203c2 <__ssvfiscanf_r+0x96>
 802055e:	f019 0f0f 	tst.w	r9, #15
 8020562:	f47f af3d 	bne.w	80203e0 <__ssvfiscanf_r+0xb4>
 8020566:	7859      	ldrb	r1, [r3, #1]
 8020568:	296c      	cmp	r1, #108	; 0x6c
 802056a:	d104      	bne.n	8020576 <__ssvfiscanf_r+0x24a>
 802056c:	3302      	adds	r3, #2
 802056e:	613b      	str	r3, [r7, #16]
 8020570:	f049 0902 	orr.w	r9, r9, #2
 8020574:	e7f1      	b.n	802055a <__ssvfiscanf_r+0x22e>
 8020576:	f049 0901 	orr.w	r9, r9, #1
 802057a:	e7ee      	b.n	802055a <__ssvfiscanf_r+0x22e>
 802057c:	f019 0f0f 	tst.w	r9, #15
 8020580:	f47f af2e 	bne.w	80203e0 <__ssvfiscanf_r+0xb4>
 8020584:	7859      	ldrb	r1, [r3, #1]
 8020586:	2968      	cmp	r1, #104	; 0x68
 8020588:	bf03      	ittte	eq
 802058a:	3302      	addeq	r3, #2
 802058c:	613b      	streq	r3, [r7, #16]
 802058e:	f049 0908 	orreq.w	r9, r9, #8
 8020592:	f049 0904 	orrne.w	r9, r9, #4
 8020596:	e7e0      	b.n	802055a <__ssvfiscanf_r+0x22e>
 8020598:	f019 0f0f 	tst.w	r9, #15
 802059c:	d0e8      	beq.n	8020570 <__ssvfiscanf_r+0x244>
 802059e:	e71f      	b.n	80203e0 <__ssvfiscanf_r+0xb4>
 80205a0:	f019 0f0f 	tst.w	r9, #15
 80205a4:	d0d9      	beq.n	802055a <__ssvfiscanf_r+0x22e>
 80205a6:	e71b      	b.n	80203e0 <__ssvfiscanf_r+0xb4>
 80205a8:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 80205ac:	f47f af18 	bne.w	80203e0 <__ssvfiscanf_r+0xb4>
 80205b0:	f1bb 0f00 	cmp.w	fp, #0
 80205b4:	d104      	bne.n	80205c0 <__ssvfiscanf_r+0x294>
 80205b6:	b082      	sub	sp, #8
 80205b8:	f10d 0b08 	add.w	fp, sp, #8
 80205bc:	e9cb 3300 	strd	r3, r3, [fp]
 80205c0:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 80205c4:	e7c9      	b.n	802055a <__ssvfiscanf_r+0x22e>
 80205c6:	f049 0901 	orr.w	r9, r9, #1
 80205ca:	4b0b      	ldr	r3, [pc, #44]	; (80205f8 <__ssvfiscanf_r+0x2cc>)
 80205cc:	e008      	b.n	80205e0 <__ssvfiscanf_r+0x2b4>
 80205ce:	f049 0901 	orr.w	r9, r9, #1
 80205d2:	4b0a      	ldr	r3, [pc, #40]	; (80205fc <__ssvfiscanf_r+0x2d0>)
 80205d4:	617b      	str	r3, [r7, #20]
 80205d6:	2308      	movs	r3, #8
 80205d8:	61fb      	str	r3, [r7, #28]
 80205da:	2503      	movs	r5, #3
 80205dc:	e013      	b.n	8020606 <__ssvfiscanf_r+0x2da>
 80205de:	4b07      	ldr	r3, [pc, #28]	; (80205fc <__ssvfiscanf_r+0x2d0>)
 80205e0:	617b      	str	r3, [r7, #20]
 80205e2:	230a      	movs	r3, #10
 80205e4:	e7f8      	b.n	80205d8 <__ssvfiscanf_r+0x2ac>
 80205e6:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 80205ea:	4b04      	ldr	r3, [pc, #16]	; (80205fc <__ssvfiscanf_r+0x2d0>)
 80205ec:	617b      	str	r3, [r7, #20]
 80205ee:	2310      	movs	r3, #16
 80205f0:	e7f2      	b.n	80205d8 <__ssvfiscanf_r+0x2ac>
 80205f2:	bf00      	nop
 80205f4:	08028d49 	.word	0x08028d49
 80205f8:	0801b0b9 	.word	0x0801b0b9
 80205fc:	080200f9 	.word	0x080200f9
 8020600:	f049 0901 	orr.w	r9, r9, #1
 8020604:	2502      	movs	r5, #2
 8020606:	6863      	ldr	r3, [r4, #4]
 8020608:	2b00      	cmp	r3, #0
 802060a:	f340 808e 	ble.w	802072a <__ssvfiscanf_r+0x3fe>
 802060e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8020612:	d106      	bne.n	8020622 <__ssvfiscanf_r+0x2f6>
 8020614:	6823      	ldr	r3, [r4, #0]
 8020616:	49b3      	ldr	r1, [pc, #716]	; (80208e4 <__ssvfiscanf_r+0x5b8>)
 8020618:	781a      	ldrb	r2, [r3, #0]
 802061a:	5c52      	ldrb	r2, [r2, r1]
 802061c:	0711      	lsls	r1, r2, #28
 802061e:	f100 808d 	bmi.w	802073c <__ssvfiscanf_r+0x410>
 8020622:	2d02      	cmp	r5, #2
 8020624:	f000 8394 	beq.w	8020d50 <__ssvfiscanf_r+0xa24>
 8020628:	2d03      	cmp	r5, #3
 802062a:	f000 8535 	beq.w	8021098 <__ssvfiscanf_r+0xd6c>
 802062e:	f009 0310 	and.w	r3, r9, #16
 8020632:	2d01      	cmp	r5, #1
 8020634:	61bb      	str	r3, [r7, #24]
 8020636:	f009 0301 	and.w	r3, r9, #1
 802063a:	f000 81cc 	beq.w	80209d6 <__ssvfiscanf_r+0x6aa>
 802063e:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8020640:	2d01      	cmp	r5, #1
 8020642:	bf38      	it	cc
 8020644:	2501      	movcc	r5, #1
 8020646:	2b00      	cmp	r3, #0
 8020648:	f000 8150 	beq.w	80208ec <__ssvfiscanf_r+0x5c0>
 802064c:	69bb      	ldr	r3, [r7, #24]
 802064e:	2b00      	cmp	r3, #0
 8020650:	f040 810d 	bne.w	802086e <__ssvfiscanf_r+0x542>
 8020654:	4633      	mov	r3, r6
 8020656:	f019 0f80 	tst.w	r9, #128	; 0x80
 802065a:	f853 6b04 	ldr.w	r6, [r3], #4
 802065e:	62bb      	str	r3, [r7, #40]	; 0x28
 8020660:	f000 810c 	beq.w	802087c <__ssvfiscanf_r+0x550>
 8020664:	b146      	cbz	r6, 8020678 <__ssvfiscanf_r+0x34c>
 8020666:	2080      	movs	r0, #128	; 0x80
 8020668:	f7fe fe7a 	bl	801f360 <malloc>
 802066c:	4680      	mov	r8, r0
 802066e:	2800      	cmp	r0, #0
 8020670:	d178      	bne.n	8020764 <__ssvfiscanf_r+0x438>
 8020672:	f04f 33ff 	mov.w	r3, #4294967295
 8020676:	627b      	str	r3, [r7, #36]	; 0x24
 8020678:	f1bb 0f00 	cmp.w	fp, #0
 802067c:	d013      	beq.n	80206a6 <__ssvfiscanf_r+0x37a>
 802067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020680:	3301      	adds	r3, #1
 8020682:	d10b      	bne.n	802069c <__ssvfiscanf_r+0x370>
 8020684:	2400      	movs	r4, #0
 8020686:	4626      	mov	r6, r4
 8020688:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 802068c:	f8db 5000 	ldr.w	r5, [fp]
 8020690:	42a3      	cmp	r3, r4
 8020692:	f300 85df 	bgt.w	8021254 <__ssvfiscanf_r+0xf28>
 8020696:	f04f 33ff 	mov.w	r3, #4294967295
 802069a:	627b      	str	r3, [r7, #36]	; 0x24
 802069c:	f8db 0000 	ldr.w	r0, [fp]
 80206a0:	b108      	cbz	r0, 80206a6 <__ssvfiscanf_r+0x37a>
 80206a2:	f7fe fe65 	bl	801f370 <free>
 80206a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80206a8:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80206ac:	46bd      	mov	sp, r7
 80206ae:	ecbd 8b02 	vpop	{d8}
 80206b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206b6:	6939      	ldr	r1, [r7, #16]
 80206b8:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80206bc:	f002 f82a 	bl	8022714 <__sccl>
 80206c0:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80206c4:	6138      	str	r0, [r7, #16]
 80206c6:	2501      	movs	r5, #1
 80206c8:	e79d      	b.n	8020606 <__ssvfiscanf_r+0x2da>
 80206ca:	f049 0901 	orr.w	r9, r9, #1
 80206ce:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80206d2:	2500      	movs	r5, #0
 80206d4:	e797      	b.n	8020606 <__ssvfiscanf_r+0x2da>
 80206d6:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 80206da:	e786      	b.n	80205ea <__ssvfiscanf_r+0x2be>
 80206dc:	f019 0f10 	tst.w	r9, #16
 80206e0:	f47f ae41 	bne.w	8020366 <__ssvfiscanf_r+0x3a>
 80206e4:	f019 0f08 	tst.w	r9, #8
 80206e8:	f856 1b04 	ldr.w	r1, [r6], #4
 80206ec:	d002      	beq.n	80206f4 <__ssvfiscanf_r+0x3c8>
 80206ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206f0:	700b      	strb	r3, [r1, #0]
 80206f2:	e638      	b.n	8020366 <__ssvfiscanf_r+0x3a>
 80206f4:	f019 0f04 	tst.w	r9, #4
 80206f8:	d002      	beq.n	8020700 <__ssvfiscanf_r+0x3d4>
 80206fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206fc:	800b      	strh	r3, [r1, #0]
 80206fe:	e632      	b.n	8020366 <__ssvfiscanf_r+0x3a>
 8020700:	f019 0f01 	tst.w	r9, #1
 8020704:	d002      	beq.n	802070c <__ssvfiscanf_r+0x3e0>
 8020706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020708:	600b      	str	r3, [r1, #0]
 802070a:	e62c      	b.n	8020366 <__ssvfiscanf_r+0x3a>
 802070c:	f019 0f02 	tst.w	r9, #2
 8020710:	d0f9      	beq.n	8020706 <__ssvfiscanf_r+0x3da>
 8020712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020714:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8020718:	461a      	mov	r2, r3
 802071a:	464b      	mov	r3, r9
 802071c:	e9c1 2300 	strd	r2, r3, [r1]
 8020720:	e621      	b.n	8020366 <__ssvfiscanf_r+0x3a>
 8020722:	4b71      	ldr	r3, [pc, #452]	; (80208e8 <__ssvfiscanf_r+0x5bc>)
 8020724:	617b      	str	r3, [r7, #20]
 8020726:	2300      	movs	r3, #0
 8020728:	e756      	b.n	80205d8 <__ssvfiscanf_r+0x2ac>
 802072a:	ee18 0a10 	vmov	r0, s16
 802072e:	4621      	mov	r1, r4
 8020730:	f7ff fda6 	bl	8020280 <__ssrefill_r>
 8020734:	2800      	cmp	r0, #0
 8020736:	f43f af6a 	beq.w	802060e <__ssvfiscanf_r+0x2e2>
 802073a:	e6f8      	b.n	802052e <__ssvfiscanf_r+0x202>
 802073c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802073e:	3201      	adds	r2, #1
 8020740:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020742:	6862      	ldr	r2, [r4, #4]
 8020744:	3a01      	subs	r2, #1
 8020746:	2a00      	cmp	r2, #0
 8020748:	6062      	str	r2, [r4, #4]
 802074a:	dd02      	ble.n	8020752 <__ssvfiscanf_r+0x426>
 802074c:	3301      	adds	r3, #1
 802074e:	6023      	str	r3, [r4, #0]
 8020750:	e760      	b.n	8020614 <__ssvfiscanf_r+0x2e8>
 8020752:	ee18 0a10 	vmov	r0, s16
 8020756:	4621      	mov	r1, r4
 8020758:	f7ff fd92 	bl	8020280 <__ssrefill_r>
 802075c:	2800      	cmp	r0, #0
 802075e:	f43f af59 	beq.w	8020614 <__ssvfiscanf_r+0x2e8>
 8020762:	e6e4      	b.n	802052e <__ssvfiscanf_r+0x202>
 8020764:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8020768:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 802076c:	6030      	str	r0, [r6, #0]
 802076e:	45ca      	cmp	sl, r9
 8020770:	d313      	bcc.n	802079a <__ssvfiscanf_r+0x46e>
 8020772:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8020776:	4599      	cmp	r9, r3
 8020778:	f63f af7b 	bhi.w	8020672 <__ssvfiscanf_r+0x346>
 802077c:	f109 0908 	add.w	r9, r9, #8
 8020780:	f8db 0000 	ldr.w	r0, [fp]
 8020784:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8020788:	f001 fe16 	bl	80223b8 <realloc>
 802078c:	2800      	cmp	r0, #0
 802078e:	f43f af70 	beq.w	8020672 <__ssvfiscanf_r+0x346>
 8020792:	f8cb 0000 	str.w	r0, [fp]
 8020796:	f8ab 9004 	strh.w	r9, [fp, #4]
 802079a:	f8db 3000 	ldr.w	r3, [fp]
 802079e:	f10a 0201 	add.w	r2, sl, #1
 80207a2:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 80207a6:	f8ab 2006 	strh.w	r2, [fp, #6]
 80207aa:	46b2      	mov	sl, r6
 80207ac:	f04f 0920 	mov.w	r9, #32
 80207b0:	4646      	mov	r6, r8
 80207b2:	2200      	movs	r2, #0
 80207b4:	60fa      	str	r2, [r7, #12]
 80207b6:	f001 fda9 	bl	802230c <__locale_mb_cur_max>
 80207ba:	68fa      	ldr	r2, [r7, #12]
 80207bc:	4290      	cmp	r0, r2
 80207be:	f43f aeb6 	beq.w	802052e <__ssvfiscanf_r+0x202>
 80207c2:	6821      	ldr	r1, [r4, #0]
 80207c4:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 80207c8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80207cc:	f80c 0002 	strb.w	r0, [ip, r2]
 80207d0:	1c53      	adds	r3, r2, #1
 80207d2:	6862      	ldr	r2, [r4, #4]
 80207d4:	3a01      	subs	r2, #1
 80207d6:	e9c4 1200 	strd	r1, r2, [r4]
 80207da:	6a3a      	ldr	r2, [r7, #32]
 80207dc:	2a03      	cmp	r2, #3
 80207de:	d102      	bne.n	80207e6 <__ssvfiscanf_r+0x4ba>
 80207e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80207e2:	2a04      	cmp	r2, #4
 80207e4:	d007      	beq.n	80207f6 <__ssvfiscanf_r+0x4ca>
 80207e6:	2208      	movs	r2, #8
 80207e8:	2100      	movs	r1, #0
 80207ea:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80207ee:	623b      	str	r3, [r7, #32]
 80207f0:	f7fa f8a2 	bl	801a938 <memset>
 80207f4:	6a3b      	ldr	r3, [r7, #32]
 80207f6:	60fb      	str	r3, [r7, #12]
 80207f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80207fc:	9200      	str	r2, [sp, #0]
 80207fe:	ee18 0a10 	vmov	r0, s16
 8020802:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8020806:	4631      	mov	r1, r6
 8020808:	f001 fd98 	bl	802233c <_mbrtowc_r>
 802080c:	1c42      	adds	r2, r0, #1
 802080e:	6238      	str	r0, [r7, #32]
 8020810:	f43f ae8d 	beq.w	802052e <__ssvfiscanf_r+0x202>
 8020814:	68fb      	ldr	r3, [r7, #12]
 8020816:	2800      	cmp	r0, #0
 8020818:	d135      	bne.n	8020886 <__ssvfiscanf_r+0x55a>
 802081a:	69ba      	ldr	r2, [r7, #24]
 802081c:	b902      	cbnz	r2, 8020820 <__ssvfiscanf_r+0x4f4>
 802081e:	6032      	str	r2, [r6, #0]
 8020820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020822:	441a      	add	r2, r3
 8020824:	6a3b      	ldr	r3, [r7, #32]
 8020826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020828:	2b03      	cmp	r3, #3
 802082a:	d102      	bne.n	8020832 <__ssvfiscanf_r+0x506>
 802082c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802082e:	2b04      	cmp	r3, #4
 8020830:	d000      	beq.n	8020834 <__ssvfiscanf_r+0x508>
 8020832:	3d01      	subs	r5, #1
 8020834:	69bb      	ldr	r3, [r7, #24]
 8020836:	b9c3      	cbnz	r3, 802086a <__ssvfiscanf_r+0x53e>
 8020838:	f1ba 0f00 	cmp.w	sl, #0
 802083c:	d014      	beq.n	8020868 <__ssvfiscanf_r+0x53c>
 802083e:	eba6 0308 	sub.w	r3, r6, r8
 8020842:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8020846:	d80f      	bhi.n	8020868 <__ssvfiscanf_r+0x53c>
 8020848:	4640      	mov	r0, r8
 802084a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802084e:	60fb      	str	r3, [r7, #12]
 8020850:	f001 fdb2 	bl	80223b8 <realloc>
 8020854:	4680      	mov	r8, r0
 8020856:	2800      	cmp	r0, #0
 8020858:	f43f af0b 	beq.w	8020672 <__ssvfiscanf_r+0x346>
 802085c:	68fb      	ldr	r3, [r7, #12]
 802085e:	f8ca 0000 	str.w	r0, [sl]
 8020862:	18c6      	adds	r6, r0, r3
 8020864:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020868:	3604      	adds	r6, #4
 802086a:	2200      	movs	r2, #0
 802086c:	e00f      	b.n	802088e <__ssvfiscanf_r+0x562>
 802086e:	f04f 0900 	mov.w	r9, #0
 8020872:	62be      	str	r6, [r7, #40]	; 0x28
 8020874:	46c8      	mov	r8, r9
 8020876:	46ca      	mov	sl, r9
 8020878:	464e      	mov	r6, r9
 802087a:	e79a      	b.n	80207b2 <__ssvfiscanf_r+0x486>
 802087c:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8020880:	46c8      	mov	r8, r9
 8020882:	46ca      	mov	sl, r9
 8020884:	e795      	b.n	80207b2 <__ssvfiscanf_r+0x486>
 8020886:	6a3a      	ldr	r2, [r7, #32]
 8020888:	3202      	adds	r2, #2
 802088a:	d1c9      	bne.n	8020820 <__ssvfiscanf_r+0x4f4>
 802088c:	461a      	mov	r2, r3
 802088e:	6863      	ldr	r3, [r4, #4]
 8020890:	2b00      	cmp	r3, #0
 8020892:	dc14      	bgt.n	80208be <__ssvfiscanf_r+0x592>
 8020894:	ee18 0a10 	vmov	r0, s16
 8020898:	4621      	mov	r1, r4
 802089a:	60fa      	str	r2, [r7, #12]
 802089c:	f7ff fcf0 	bl	8020280 <__ssrefill_r>
 80208a0:	68fa      	ldr	r2, [r7, #12]
 80208a2:	b160      	cbz	r0, 80208be <__ssvfiscanf_r+0x592>
 80208a4:	2a00      	cmp	r2, #0
 80208a6:	f47f ae42 	bne.w	802052e <__ssvfiscanf_r+0x202>
 80208aa:	f1ba 0f00 	cmp.w	sl, #0
 80208ae:	d10a      	bne.n	80208c6 <__ssvfiscanf_r+0x59a>
 80208b0:	69bb      	ldr	r3, [r7, #24]
 80208b2:	b913      	cbnz	r3, 80208ba <__ssvfiscanf_r+0x58e>
 80208b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80208b6:	3301      	adds	r3, #1
 80208b8:	627b      	str	r3, [r7, #36]	; 0x24
 80208ba:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80208bc:	e553      	b.n	8020366 <__ssvfiscanf_r+0x3a>
 80208be:	2d00      	cmp	r5, #0
 80208c0:	f47f af78 	bne.w	80207b4 <__ssvfiscanf_r+0x488>
 80208c4:	e7f1      	b.n	80208aa <__ssvfiscanf_r+0x57e>
 80208c6:	eba6 0108 	sub.w	r1, r6, r8
 80208ca:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80208ce:	d9ef      	bls.n	80208b0 <__ssvfiscanf_r+0x584>
 80208d0:	f8da 0000 	ldr.w	r0, [sl]
 80208d4:	f001 fd70 	bl	80223b8 <realloc>
 80208d8:	2800      	cmp	r0, #0
 80208da:	d0e9      	beq.n	80208b0 <__ssvfiscanf_r+0x584>
 80208dc:	f8ca 0000 	str.w	r0, [sl]
 80208e0:	e7e6      	b.n	80208b0 <__ssvfiscanf_r+0x584>
 80208e2:	bf00      	nop
 80208e4:	08028d49 	.word	0x08028d49
 80208e8:	0801b0b9 	.word	0x0801b0b9
 80208ec:	69ba      	ldr	r2, [r7, #24]
 80208ee:	b1e2      	cbz	r2, 802092a <__ssvfiscanf_r+0x5fe>
 80208f0:	4698      	mov	r8, r3
 80208f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80208f6:	429d      	cmp	r5, r3
 80208f8:	dd11      	ble.n	802091e <__ssvfiscanf_r+0x5f2>
 80208fa:	4498      	add	r8, r3
 80208fc:	1aed      	subs	r5, r5, r3
 80208fe:	4413      	add	r3, r2
 8020900:	ee18 0a10 	vmov	r0, s16
 8020904:	6023      	str	r3, [r4, #0]
 8020906:	4621      	mov	r1, r4
 8020908:	f7ff fcba 	bl	8020280 <__ssrefill_r>
 802090c:	2800      	cmp	r0, #0
 802090e:	d0f0      	beq.n	80208f2 <__ssvfiscanf_r+0x5c6>
 8020910:	f1b8 0f00 	cmp.w	r8, #0
 8020914:	f43f ae0b 	beq.w	802052e <__ssvfiscanf_r+0x202>
 8020918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802091a:	4443      	add	r3, r8
 802091c:	e5fe      	b.n	802051c <__ssvfiscanf_r+0x1f0>
 802091e:	1b5b      	subs	r3, r3, r5
 8020920:	44a8      	add	r8, r5
 8020922:	4415      	add	r5, r2
 8020924:	6063      	str	r3, [r4, #4]
 8020926:	6025      	str	r5, [r4, #0]
 8020928:	e7f6      	b.n	8020918 <__ssvfiscanf_r+0x5ec>
 802092a:	46b0      	mov	r8, r6
 802092c:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8020930:	f858 6b04 	ldr.w	r6, [r8], #4
 8020934:	d02e      	beq.n	8020994 <__ssvfiscanf_r+0x668>
 8020936:	2e00      	cmp	r6, #0
 8020938:	f43f ad52 	beq.w	80203e0 <__ssvfiscanf_r+0xb4>
 802093c:	4628      	mov	r0, r5
 802093e:	f7fe fd0f 	bl	801f360 <malloc>
 8020942:	62b8      	str	r0, [r7, #40]	; 0x28
 8020944:	2800      	cmp	r0, #0
 8020946:	f43f adf8 	beq.w	802053a <__ssvfiscanf_r+0x20e>
 802094a:	f8bb a006 	ldrh.w	sl, [fp, #6]
 802094e:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 8020952:	6030      	str	r0, [r6, #0]
 8020954:	45ca      	cmp	sl, r9
 8020956:	d313      	bcc.n	8020980 <__ssvfiscanf_r+0x654>
 8020958:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 802095c:	4599      	cmp	r9, r3
 802095e:	f63f ae91 	bhi.w	8020684 <__ssvfiscanf_r+0x358>
 8020962:	f109 0908 	add.w	r9, r9, #8
 8020966:	f8db 0000 	ldr.w	r0, [fp]
 802096a:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802096e:	f001 fd23 	bl	80223b8 <realloc>
 8020972:	2800      	cmp	r0, #0
 8020974:	f43f ae86 	beq.w	8020684 <__ssvfiscanf_r+0x358>
 8020978:	f8cb 0000 	str.w	r0, [fp]
 802097c:	f8ab 9004 	strh.w	r9, [fp, #4]
 8020980:	f8db 3000 	ldr.w	r3, [fp]
 8020984:	f10a 0201 	add.w	r2, sl, #1
 8020988:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 802098c:	46b1      	mov	r9, r6
 802098e:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8020990:	f8ab 2006 	strh.w	r2, [fp, #6]
 8020994:	4631      	mov	r1, r6
 8020996:	ee18 0a10 	vmov	r0, s16
 802099a:	9400      	str	r4, [sp, #0]
 802099c:	462b      	mov	r3, r5
 802099e:	2201      	movs	r2, #1
 80209a0:	f7ff fc8b 	bl	80202ba <_sfread_r>
 80209a4:	4606      	mov	r6, r0
 80209a6:	2800      	cmp	r0, #0
 80209a8:	f43f adc1 	beq.w	802052e <__ssvfiscanf_r+0x202>
 80209ac:	f1b9 0f00 	cmp.w	r9, #0
 80209b0:	d009      	beq.n	80209c6 <__ssvfiscanf_r+0x69a>
 80209b2:	4285      	cmp	r5, r0
 80209b4:	d907      	bls.n	80209c6 <__ssvfiscanf_r+0x69a>
 80209b6:	4601      	mov	r1, r0
 80209b8:	f8d9 0000 	ldr.w	r0, [r9]
 80209bc:	f001 fcfc 	bl	80223b8 <realloc>
 80209c0:	b108      	cbz	r0, 80209c6 <__ssvfiscanf_r+0x69a>
 80209c2:	f8c9 0000 	str.w	r0, [r9]
 80209c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209c8:	4433      	add	r3, r6
 80209ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80209cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209ce:	3301      	adds	r3, #1
 80209d0:	627b      	str	r3, [r7, #36]	; 0x24
 80209d2:	4646      	mov	r6, r8
 80209d4:	e4c7      	b.n	8020366 <__ssvfiscanf_r+0x3a>
 80209d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80209d8:	2a00      	cmp	r2, #0
 80209da:	bf08      	it	eq
 80209dc:	f04f 32ff 	moveq.w	r2, #4294967295
 80209e0:	461d      	mov	r5, r3
 80209e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80209e4:	69bb      	ldr	r3, [r7, #24]
 80209e6:	2d00      	cmp	r5, #0
 80209e8:	f000 8105 	beq.w	8020bf6 <__ssvfiscanf_r+0x8ca>
 80209ec:	2b00      	cmp	r3, #0
 80209ee:	f040 80a5 	bne.w	8020b3c <__ssvfiscanf_r+0x810>
 80209f2:	4633      	mov	r3, r6
 80209f4:	f019 0f80 	tst.w	r9, #128	; 0x80
 80209f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80209fc:	607b      	str	r3, [r7, #4]
 80209fe:	f000 80a6 	beq.w	8020b4e <__ssvfiscanf_r+0x822>
 8020a02:	2d00      	cmp	r5, #0
 8020a04:	f43f ae38 	beq.w	8020678 <__ssvfiscanf_r+0x34c>
 8020a08:	2080      	movs	r0, #128	; 0x80
 8020a0a:	f7fe fca9 	bl	801f360 <malloc>
 8020a0e:	4680      	mov	r8, r0
 8020a10:	2800      	cmp	r0, #0
 8020a12:	f43f ae2e 	beq.w	8020672 <__ssvfiscanf_r+0x346>
 8020a16:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8020a1a:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8020a1e:	6028      	str	r0, [r5, #0]
 8020a20:	45b1      	cmp	r9, r6
 8020a22:	d311      	bcc.n	8020a48 <__ssvfiscanf_r+0x71c>
 8020a24:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8020a28:	429e      	cmp	r6, r3
 8020a2a:	f63f ae22 	bhi.w	8020672 <__ssvfiscanf_r+0x346>
 8020a2e:	3608      	adds	r6, #8
 8020a30:	f8db 0000 	ldr.w	r0, [fp]
 8020a34:	00b1      	lsls	r1, r6, #2
 8020a36:	f001 fcbf 	bl	80223b8 <realloc>
 8020a3a:	2800      	cmp	r0, #0
 8020a3c:	f43f ae19 	beq.w	8020672 <__ssvfiscanf_r+0x346>
 8020a40:	f8cb 0000 	str.w	r0, [fp]
 8020a44:	f8ab 6004 	strh.w	r6, [fp, #4]
 8020a48:	f8db 3000 	ldr.w	r3, [fp]
 8020a4c:	60fd      	str	r5, [r7, #12]
 8020a4e:	f109 0201 	add.w	r2, r9, #1
 8020a52:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8020a56:	f8ab 2006 	strh.w	r2, [fp, #6]
 8020a5a:	4645      	mov	r5, r8
 8020a5c:	f04f 0920 	mov.w	r9, #32
 8020a60:	2600      	movs	r6, #0
 8020a62:	f001 fc53 	bl	802230c <__locale_mb_cur_max>
 8020a66:	42b0      	cmp	r0, r6
 8020a68:	f43f ad61 	beq.w	802052e <__ssvfiscanf_r+0x202>
 8020a6c:	1c73      	adds	r3, r6, #1
 8020a6e:	60bb      	str	r3, [r7, #8]
 8020a70:	6823      	ldr	r3, [r4, #0]
 8020a72:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8020a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020a7a:	558a      	strb	r2, [r1, r6]
 8020a7c:	6862      	ldr	r2, [r4, #4]
 8020a7e:	3a01      	subs	r2, #1
 8020a80:	e9c4 3200 	strd	r3, r2, [r4]
 8020a84:	6a3b      	ldr	r3, [r7, #32]
 8020a86:	2b03      	cmp	r3, #3
 8020a88:	d102      	bne.n	8020a90 <__ssvfiscanf_r+0x764>
 8020a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020a8c:	2b04      	cmp	r3, #4
 8020a8e:	d005      	beq.n	8020a9c <__ssvfiscanf_r+0x770>
 8020a90:	2208      	movs	r2, #8
 8020a92:	2100      	movs	r1, #0
 8020a94:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8020a98:	f7f9 ff4e 	bl	801a938 <memset>
 8020a9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020aa0:	9300      	str	r3, [sp, #0]
 8020aa2:	ee18 0a10 	vmov	r0, s16
 8020aa6:	68bb      	ldr	r3, [r7, #8]
 8020aa8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8020aac:	4629      	mov	r1, r5
 8020aae:	f001 fc45 	bl	802233c <_mbrtowc_r>
 8020ab2:	4603      	mov	r3, r0
 8020ab4:	6238      	str	r0, [r7, #32]
 8020ab6:	1c58      	adds	r0, r3, #1
 8020ab8:	f43f ad39 	beq.w	802052e <__ssvfiscanf_r+0x202>
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	d14c      	bne.n	8020b5a <__ssvfiscanf_r+0x82e>
 8020ac0:	602b      	str	r3, [r5, #0]
 8020ac2:	682e      	ldr	r6, [r5, #0]
 8020ac4:	1c71      	adds	r1, r6, #1
 8020ac6:	d059      	beq.n	8020b7c <__ssvfiscanf_r+0x850>
 8020ac8:	2208      	movs	r2, #8
 8020aca:	2100      	movs	r1, #0
 8020acc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8020ad0:	f7f9 ff32 	bl	801a938 <memset>
 8020ad4:	4b9d      	ldr	r3, [pc, #628]	; (8020d4c <__ssvfiscanf_r+0xa20>)
 8020ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8020ada:	603b      	str	r3, [r7, #0]
 8020adc:	4632      	mov	r2, r6
 8020ade:	ee18 0a10 	vmov	r0, s16
 8020ae2:	683e      	ldr	r6, [r7, #0]
 8020ae4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020ae8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8020aec:	47b0      	blx	r6
 8020aee:	2801      	cmp	r0, #1
 8020af0:	d146      	bne.n	8020b80 <__ssvfiscanf_r+0x854>
 8020af2:	f897 a030 	ldrb.w	sl, [r7, #48]	; 0x30
 8020af6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8020afa:	f813 300a 	ldrb.w	r3, [r3, sl]
 8020afe:	2b00      	cmp	r3, #0
 8020b00:	d14b      	bne.n	8020b9a <__ssvfiscanf_r+0x86e>
 8020b02:	f107 0648 	add.w	r6, r7, #72	; 0x48
 8020b06:	68bb      	ldr	r3, [r7, #8]
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	d13c      	bne.n	8020b86 <__ssvfiscanf_r+0x85a>
 8020b0c:	69bb      	ldr	r3, [r7, #24]
 8020b0e:	b99b      	cbnz	r3, 8020b38 <__ssvfiscanf_r+0x80c>
 8020b10:	602b      	str	r3, [r5, #0]
 8020b12:	68fb      	ldr	r3, [r7, #12]
 8020b14:	b16b      	cbz	r3, 8020b32 <__ssvfiscanf_r+0x806>
 8020b16:	eba5 0108 	sub.w	r1, r5, r8
 8020b1a:	108b      	asrs	r3, r1, #2
 8020b1c:	3301      	adds	r3, #1
 8020b1e:	4599      	cmp	r9, r3
 8020b20:	d907      	bls.n	8020b32 <__ssvfiscanf_r+0x806>
 8020b22:	68fb      	ldr	r3, [r7, #12]
 8020b24:	3104      	adds	r1, #4
 8020b26:	6818      	ldr	r0, [r3, #0]
 8020b28:	f001 fc46 	bl	80223b8 <realloc>
 8020b2c:	b108      	cbz	r0, 8020b32 <__ssvfiscanf_r+0x806>
 8020b2e:	68fb      	ldr	r3, [r7, #12]
 8020b30:	6018      	str	r0, [r3, #0]
 8020b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b34:	3301      	adds	r3, #1
 8020b36:	627b      	str	r3, [r7, #36]	; 0x24
 8020b38:	687e      	ldr	r6, [r7, #4]
 8020b3a:	e414      	b.n	8020366 <__ssvfiscanf_r+0x3a>
 8020b3c:	f04f 0900 	mov.w	r9, #0
 8020b40:	607e      	str	r6, [r7, #4]
 8020b42:	46c8      	mov	r8, r9
 8020b44:	f8c7 900c 	str.w	r9, [r7, #12]
 8020b48:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8020b4c:	e788      	b.n	8020a60 <__ssvfiscanf_r+0x734>
 8020b4e:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8020b52:	f8c7 900c 	str.w	r9, [r7, #12]
 8020b56:	46c8      	mov	r8, r9
 8020b58:	e782      	b.n	8020a60 <__ssvfiscanf_r+0x734>
 8020b5a:	6a3b      	ldr	r3, [r7, #32]
 8020b5c:	3302      	adds	r3, #2
 8020b5e:	d1b0      	bne.n	8020ac2 <__ssvfiscanf_r+0x796>
 8020b60:	68be      	ldr	r6, [r7, #8]
 8020b62:	6863      	ldr	r3, [r4, #4]
 8020b64:	2b00      	cmp	r3, #0
 8020b66:	dc41      	bgt.n	8020bec <__ssvfiscanf_r+0x8c0>
 8020b68:	ee18 0a10 	vmov	r0, s16
 8020b6c:	4621      	mov	r1, r4
 8020b6e:	f7ff fb87 	bl	8020280 <__ssrefill_r>
 8020b72:	2800      	cmp	r0, #0
 8020b74:	d03a      	beq.n	8020bec <__ssvfiscanf_r+0x8c0>
 8020b76:	2e00      	cmp	r6, #0
 8020b78:	d0c8      	beq.n	8020b0c <__ssvfiscanf_r+0x7e0>
 8020b7a:	e4d8      	b.n	802052e <__ssvfiscanf_r+0x202>
 8020b7c:	46b2      	mov	sl, r6
 8020b7e:	e7ba      	b.n	8020af6 <__ssvfiscanf_r+0x7ca>
 8020b80:	f04f 0a00 	mov.w	sl, #0
 8020b84:	e7b7      	b.n	8020af6 <__ssvfiscanf_r+0x7ca>
 8020b86:	68bb      	ldr	r3, [r7, #8]
 8020b88:	3b01      	subs	r3, #1
 8020b8a:	ee18 0a10 	vmov	r0, s16
 8020b8e:	5cf1      	ldrb	r1, [r6, r3]
 8020b90:	60bb      	str	r3, [r7, #8]
 8020b92:	4622      	mov	r2, r4
 8020b94:	f7ff fb37 	bl	8020206 <_sungetc_r>
 8020b98:	e7b5      	b.n	8020b06 <__ssvfiscanf_r+0x7da>
 8020b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b9c:	68ba      	ldr	r2, [r7, #8]
 8020b9e:	4413      	add	r3, r2
 8020ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020ba2:	6a3b      	ldr	r3, [r7, #32]
 8020ba4:	2b03      	cmp	r3, #3
 8020ba6:	d102      	bne.n	8020bae <__ssvfiscanf_r+0x882>
 8020ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020baa:	2b04      	cmp	r3, #4
 8020bac:	d002      	beq.n	8020bb4 <__ssvfiscanf_r+0x888>
 8020bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bb0:	3b01      	subs	r3, #1
 8020bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8020bb4:	69bb      	ldr	r3, [r7, #24]
 8020bb6:	b9bb      	cbnz	r3, 8020be8 <__ssvfiscanf_r+0x8bc>
 8020bb8:	68fb      	ldr	r3, [r7, #12]
 8020bba:	3504      	adds	r5, #4
 8020bbc:	b1a3      	cbz	r3, 8020be8 <__ssvfiscanf_r+0x8bc>
 8020bbe:	eba5 0608 	sub.w	r6, r5, r8
 8020bc2:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8020bc6:	d80d      	bhi.n	8020be4 <__ssvfiscanf_r+0x8b8>
 8020bc8:	4640      	mov	r0, r8
 8020bca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8020bce:	f001 fbf3 	bl	80223b8 <realloc>
 8020bd2:	4680      	mov	r8, r0
 8020bd4:	2800      	cmp	r0, #0
 8020bd6:	f43f ad4c 	beq.w	8020672 <__ssvfiscanf_r+0x346>
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	1985      	adds	r5, r0, r6
 8020bde:	6018      	str	r0, [r3, #0]
 8020be0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020be4:	69be      	ldr	r6, [r7, #24]
 8020be6:	e7bc      	b.n	8020b62 <__ssvfiscanf_r+0x836>
 8020be8:	2600      	movs	r6, #0
 8020bea:	e7ba      	b.n	8020b62 <__ssvfiscanf_r+0x836>
 8020bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bee:	2b00      	cmp	r3, #0
 8020bf0:	f47f af37 	bne.w	8020a62 <__ssvfiscanf_r+0x736>
 8020bf4:	e78a      	b.n	8020b0c <__ssvfiscanf_r+0x7e0>
 8020bf6:	b1f3      	cbz	r3, 8020c36 <__ssvfiscanf_r+0x90a>
 8020bf8:	f107 0870 	add.w	r8, r7, #112	; 0x70
 8020bfc:	6823      	ldr	r3, [r4, #0]
 8020bfe:	781a      	ldrb	r2, [r3, #0]
 8020c00:	f818 2002 	ldrb.w	r2, [r8, r2]
 8020c04:	b912      	cbnz	r2, 8020c0c <__ssvfiscanf_r+0x8e0>
 8020c06:	b99d      	cbnz	r5, 8020c30 <__ssvfiscanf_r+0x904>
 8020c08:	f7ff bbea 	b.w	80203e0 <__ssvfiscanf_r+0xb4>
 8020c0c:	3301      	adds	r3, #1
 8020c0e:	6862      	ldr	r2, [r4, #4]
 8020c10:	6023      	str	r3, [r4, #0]
 8020c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c14:	3501      	adds	r5, #1
 8020c16:	3a01      	subs	r2, #1
 8020c18:	42ab      	cmp	r3, r5
 8020c1a:	6062      	str	r2, [r4, #4]
 8020c1c:	d008      	beq.n	8020c30 <__ssvfiscanf_r+0x904>
 8020c1e:	2a00      	cmp	r2, #0
 8020c20:	dcec      	bgt.n	8020bfc <__ssvfiscanf_r+0x8d0>
 8020c22:	ee18 0a10 	vmov	r0, s16
 8020c26:	4621      	mov	r1, r4
 8020c28:	f7ff fb2a 	bl	8020280 <__ssrefill_r>
 8020c2c:	2800      	cmp	r0, #0
 8020c2e:	d0e5      	beq.n	8020bfc <__ssvfiscanf_r+0x8d0>
 8020c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020c32:	442b      	add	r3, r5
 8020c34:	e472      	b.n	802051c <__ssvfiscanf_r+0x1f0>
 8020c36:	4633      	mov	r3, r6
 8020c38:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 8020c3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8020c40:	61bb      	str	r3, [r7, #24]
 8020c42:	f000 8081 	beq.w	8020d48 <__ssvfiscanf_r+0xa1c>
 8020c46:	2e00      	cmp	r6, #0
 8020c48:	f43f abca 	beq.w	80203e0 <__ssvfiscanf_r+0xb4>
 8020c4c:	2020      	movs	r0, #32
 8020c4e:	f7fe fb87 	bl	801f360 <malloc>
 8020c52:	4680      	mov	r8, r0
 8020c54:	2800      	cmp	r0, #0
 8020c56:	f43f ac70 	beq.w	802053a <__ssvfiscanf_r+0x20e>
 8020c5a:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8020c5e:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 8020c62:	6030      	str	r0, [r6, #0]
 8020c64:	45a9      	cmp	r9, r5
 8020c66:	d311      	bcc.n	8020c8c <__ssvfiscanf_r+0x960>
 8020c68:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8020c6c:	429d      	cmp	r5, r3
 8020c6e:	f63f ad09 	bhi.w	8020684 <__ssvfiscanf_r+0x358>
 8020c72:	3508      	adds	r5, #8
 8020c74:	f8db 0000 	ldr.w	r0, [fp]
 8020c78:	00a9      	lsls	r1, r5, #2
 8020c7a:	f001 fb9d 	bl	80223b8 <realloc>
 8020c7e:	2800      	cmp	r0, #0
 8020c80:	f43f ad00 	beq.w	8020684 <__ssvfiscanf_r+0x358>
 8020c84:	f8cb 0000 	str.w	r0, [fp]
 8020c88:	f8ab 5004 	strh.w	r5, [fp, #4]
 8020c8c:	f8db 3000 	ldr.w	r3, [fp]
 8020c90:	f109 0201 	add.w	r2, r9, #1
 8020c94:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8020c98:	46b2      	mov	sl, r6
 8020c9a:	f8ab 2006 	strh.w	r2, [fp, #6]
 8020c9e:	4646      	mov	r6, r8
 8020ca0:	2520      	movs	r5, #32
 8020ca2:	46b0      	mov	r8, r6
 8020ca4:	f107 0970 	add.w	r9, r7, #112	; 0x70
 8020ca8:	6823      	ldr	r3, [r4, #0]
 8020caa:	781a      	ldrb	r2, [r3, #0]
 8020cac:	f819 2002 	ldrb.w	r2, [r9, r2]
 8020cb0:	b36a      	cbz	r2, 8020d0e <__ssvfiscanf_r+0x9e2>
 8020cb2:	6862      	ldr	r2, [r4, #4]
 8020cb4:	3a01      	subs	r2, #1
 8020cb6:	6062      	str	r2, [r4, #4]
 8020cb8:	1c5a      	adds	r2, r3, #1
 8020cba:	6022      	str	r2, [r4, #0]
 8020cbc:	781b      	ldrb	r3, [r3, #0]
 8020cbe:	f806 3b01 	strb.w	r3, [r6], #1
 8020cc2:	f1ba 0f00 	cmp.w	sl, #0
 8020cc6:	d011      	beq.n	8020cec <__ssvfiscanf_r+0x9c0>
 8020cc8:	eba6 0308 	sub.w	r3, r6, r8
 8020ccc:	42ab      	cmp	r3, r5
 8020cce:	d30d      	bcc.n	8020cec <__ssvfiscanf_r+0x9c0>
 8020cd0:	006d      	lsls	r5, r5, #1
 8020cd2:	4640      	mov	r0, r8
 8020cd4:	4629      	mov	r1, r5
 8020cd6:	60fb      	str	r3, [r7, #12]
 8020cd8:	f001 fb6e 	bl	80223b8 <realloc>
 8020cdc:	4680      	mov	r8, r0
 8020cde:	2800      	cmp	r0, #0
 8020ce0:	f43f ac2b 	beq.w	802053a <__ssvfiscanf_r+0x20e>
 8020ce4:	68fb      	ldr	r3, [r7, #12]
 8020ce6:	f8ca 0000 	str.w	r0, [sl]
 8020cea:	18c6      	adds	r6, r0, r3
 8020cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020cee:	3b01      	subs	r3, #1
 8020cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8020cf2:	d00c      	beq.n	8020d0e <__ssvfiscanf_r+0x9e2>
 8020cf4:	6863      	ldr	r3, [r4, #4]
 8020cf6:	2b00      	cmp	r3, #0
 8020cf8:	dcd6      	bgt.n	8020ca8 <__ssvfiscanf_r+0x97c>
 8020cfa:	ee18 0a10 	vmov	r0, s16
 8020cfe:	4621      	mov	r1, r4
 8020d00:	f7ff fabe 	bl	8020280 <__ssrefill_r>
 8020d04:	2800      	cmp	r0, #0
 8020d06:	d0cf      	beq.n	8020ca8 <__ssvfiscanf_r+0x97c>
 8020d08:	4546      	cmp	r6, r8
 8020d0a:	f43f ac10 	beq.w	802052e <__ssvfiscanf_r+0x202>
 8020d0e:	ebb6 0808 	subs.w	r8, r6, r8
 8020d12:	f43f ab65 	beq.w	80203e0 <__ssvfiscanf_r+0xb4>
 8020d16:	2300      	movs	r3, #0
 8020d18:	7033      	strb	r3, [r6, #0]
 8020d1a:	f1ba 0f00 	cmp.w	sl, #0
 8020d1e:	d00a      	beq.n	8020d36 <__ssvfiscanf_r+0xa0a>
 8020d20:	f108 0101 	add.w	r1, r8, #1
 8020d24:	428d      	cmp	r5, r1
 8020d26:	d906      	bls.n	8020d36 <__ssvfiscanf_r+0xa0a>
 8020d28:	f8da 0000 	ldr.w	r0, [sl]
 8020d2c:	f001 fb44 	bl	80223b8 <realloc>
 8020d30:	b108      	cbz	r0, 8020d36 <__ssvfiscanf_r+0xa0a>
 8020d32:	f8ca 0000 	str.w	r0, [sl]
 8020d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d38:	3301      	adds	r3, #1
 8020d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8020d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020d3e:	4443      	add	r3, r8
 8020d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020d42:	69be      	ldr	r6, [r7, #24]
 8020d44:	f7ff bb0f 	b.w	8020366 <__ssvfiscanf_r+0x3a>
 8020d48:	46aa      	mov	sl, r5
 8020d4a:	e7aa      	b.n	8020ca2 <__ssvfiscanf_r+0x976>
 8020d4c:	200008e0 	.word	0x200008e0
 8020d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d52:	2b00      	cmp	r3, #0
 8020d54:	bf08      	it	eq
 8020d56:	f04f 33ff 	moveq.w	r3, #4294967295
 8020d5a:	f019 0501 	ands.w	r5, r9, #1
 8020d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8020d60:	f009 0810 	and.w	r8, r9, #16
 8020d64:	f000 80f5 	beq.w	8020f52 <__ssvfiscanf_r+0xc26>
 8020d68:	f1b8 0f00 	cmp.w	r8, #0
 8020d6c:	f040 809a 	bne.w	8020ea4 <__ssvfiscanf_r+0xb78>
 8020d70:	4633      	mov	r3, r6
 8020d72:	f019 0f80 	tst.w	r9, #128	; 0x80
 8020d76:	f853 5b04 	ldr.w	r5, [r3], #4
 8020d7a:	61bb      	str	r3, [r7, #24]
 8020d7c:	f000 809a 	beq.w	8020eb4 <__ssvfiscanf_r+0xb88>
 8020d80:	2d00      	cmp	r5, #0
 8020d82:	f43f ac79 	beq.w	8020678 <__ssvfiscanf_r+0x34c>
 8020d86:	2080      	movs	r0, #128	; 0x80
 8020d88:	f7fe faea 	bl	801f360 <malloc>
 8020d8c:	4606      	mov	r6, r0
 8020d8e:	2800      	cmp	r0, #0
 8020d90:	f43f ac6f 	beq.w	8020672 <__ssvfiscanf_r+0x346>
 8020d94:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8020d98:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 8020d9c:	6028      	str	r0, [r5, #0]
 8020d9e:	45ca      	cmp	sl, r9
 8020da0:	d313      	bcc.n	8020dca <__ssvfiscanf_r+0xa9e>
 8020da2:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8020da6:	4599      	cmp	r9, r3
 8020da8:	f63f ac63 	bhi.w	8020672 <__ssvfiscanf_r+0x346>
 8020dac:	f109 0908 	add.w	r9, r9, #8
 8020db0:	f8db 0000 	ldr.w	r0, [fp]
 8020db4:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8020db8:	f001 fafe 	bl	80223b8 <realloc>
 8020dbc:	2800      	cmp	r0, #0
 8020dbe:	f43f ac58 	beq.w	8020672 <__ssvfiscanf_r+0x346>
 8020dc2:	f8cb 0000 	str.w	r0, [fp]
 8020dc6:	f8ab 9004 	strh.w	r9, [fp, #4]
 8020dca:	f8db 3000 	ldr.w	r3, [fp]
 8020dce:	f10a 0201 	add.w	r2, sl, #1
 8020dd2:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8020dd6:	f8ab 2006 	strh.w	r2, [fp, #6]
 8020dda:	46aa      	mov	sl, r5
 8020ddc:	f04f 0920 	mov.w	r9, #32
 8020de0:	4635      	mov	r5, r6
 8020de2:	2200      	movs	r2, #0
 8020de4:	6823      	ldr	r3, [r4, #0]
 8020de6:	49ab      	ldr	r1, [pc, #684]	; (8021094 <__ssvfiscanf_r+0xd68>)
 8020de8:	781b      	ldrb	r3, [r3, #0]
 8020dea:	5c5b      	ldrb	r3, [r3, r1]
 8020dec:	0718      	lsls	r0, r3, #28
 8020dee:	d43f      	bmi.n	8020e70 <__ssvfiscanf_r+0xb44>
 8020df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020df2:	2b00      	cmp	r3, #0
 8020df4:	d03c      	beq.n	8020e70 <__ssvfiscanf_r+0xb44>
 8020df6:	60fa      	str	r2, [r7, #12]
 8020df8:	f001 fa88 	bl	802230c <__locale_mb_cur_max>
 8020dfc:	68fa      	ldr	r2, [r7, #12]
 8020dfe:	4290      	cmp	r0, r2
 8020e00:	f43f ab95 	beq.w	802052e <__ssvfiscanf_r+0x202>
 8020e04:	6821      	ldr	r1, [r4, #0]
 8020e06:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8020e0a:	f811 0b01 	ldrb.w	r0, [r1], #1
 8020e0e:	f80c 0002 	strb.w	r0, [ip, r2]
 8020e12:	1c53      	adds	r3, r2, #1
 8020e14:	6862      	ldr	r2, [r4, #4]
 8020e16:	3a01      	subs	r2, #1
 8020e18:	e9c4 1200 	strd	r1, r2, [r4]
 8020e1c:	6a3a      	ldr	r2, [r7, #32]
 8020e1e:	2a03      	cmp	r2, #3
 8020e20:	d102      	bne.n	8020e28 <__ssvfiscanf_r+0xafc>
 8020e22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020e24:	2a04      	cmp	r2, #4
 8020e26:	d007      	beq.n	8020e38 <__ssvfiscanf_r+0xb0c>
 8020e28:	2208      	movs	r2, #8
 8020e2a:	2100      	movs	r1, #0
 8020e2c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8020e30:	623b      	str	r3, [r7, #32]
 8020e32:	f7f9 fd81 	bl	801a938 <memset>
 8020e36:	6a3b      	ldr	r3, [r7, #32]
 8020e38:	60fb      	str	r3, [r7, #12]
 8020e3a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8020e3e:	9200      	str	r2, [sp, #0]
 8020e40:	ee18 0a10 	vmov	r0, s16
 8020e44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8020e48:	4629      	mov	r1, r5
 8020e4a:	f001 fa77 	bl	802233c <_mbrtowc_r>
 8020e4e:	1c42      	adds	r2, r0, #1
 8020e50:	6238      	str	r0, [r7, #32]
 8020e52:	f43f ab6c 	beq.w	802052e <__ssvfiscanf_r+0x202>
 8020e56:	68fb      	ldr	r3, [r7, #12]
 8020e58:	bb80      	cbnz	r0, 8020ebc <__ssvfiscanf_r+0xb90>
 8020e5a:	6028      	str	r0, [r5, #0]
 8020e5c:	6828      	ldr	r0, [r5, #0]
 8020e5e:	60fb      	str	r3, [r7, #12]
 8020e60:	f001 fa46 	bl	80222f0 <iswspace>
 8020e64:	68fb      	ldr	r3, [r7, #12]
 8020e66:	4602      	mov	r2, r0
 8020e68:	2800      	cmp	r0, #0
 8020e6a:	d047      	beq.n	8020efc <__ssvfiscanf_r+0xbd0>
 8020e6c:	2b00      	cmp	r3, #0
 8020e6e:	d139      	bne.n	8020ee4 <__ssvfiscanf_r+0xbb8>
 8020e70:	f1b8 0f00 	cmp.w	r8, #0
 8020e74:	f47f af65 	bne.w	8020d42 <__ssvfiscanf_r+0xa16>
 8020e78:	f8c5 8000 	str.w	r8, [r5]
 8020e7c:	f1ba 0f00 	cmp.w	sl, #0
 8020e80:	d00c      	beq.n	8020e9c <__ssvfiscanf_r+0xb70>
 8020e82:	1ba9      	subs	r1, r5, r6
 8020e84:	108b      	asrs	r3, r1, #2
 8020e86:	3301      	adds	r3, #1
 8020e88:	4599      	cmp	r9, r3
 8020e8a:	d907      	bls.n	8020e9c <__ssvfiscanf_r+0xb70>
 8020e8c:	f8da 0000 	ldr.w	r0, [sl]
 8020e90:	3104      	adds	r1, #4
 8020e92:	f001 fa91 	bl	80223b8 <realloc>
 8020e96:	b108      	cbz	r0, 8020e9c <__ssvfiscanf_r+0xb70>
 8020e98:	f8ca 0000 	str.w	r0, [sl]
 8020e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e9e:	3301      	adds	r3, #1
 8020ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8020ea2:	e74e      	b.n	8020d42 <__ssvfiscanf_r+0xa16>
 8020ea4:	f04f 0900 	mov.w	r9, #0
 8020ea8:	61be      	str	r6, [r7, #24]
 8020eaa:	46ca      	mov	sl, r9
 8020eac:	464e      	mov	r6, r9
 8020eae:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8020eb2:	e796      	b.n	8020de2 <__ssvfiscanf_r+0xab6>
 8020eb4:	46c1      	mov	r9, r8
 8020eb6:	4646      	mov	r6, r8
 8020eb8:	46c2      	mov	sl, r8
 8020eba:	e792      	b.n	8020de2 <__ssvfiscanf_r+0xab6>
 8020ebc:	6a3a      	ldr	r2, [r7, #32]
 8020ebe:	3202      	adds	r2, #2
 8020ec0:	d1cc      	bne.n	8020e5c <__ssvfiscanf_r+0xb30>
 8020ec2:	461a      	mov	r2, r3
 8020ec4:	6863      	ldr	r3, [r4, #4]
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	dc8c      	bgt.n	8020de4 <__ssvfiscanf_r+0xab8>
 8020eca:	ee18 0a10 	vmov	r0, s16
 8020ece:	4621      	mov	r1, r4
 8020ed0:	60fa      	str	r2, [r7, #12]
 8020ed2:	f7ff f9d5 	bl	8020280 <__ssrefill_r>
 8020ed6:	68fa      	ldr	r2, [r7, #12]
 8020ed8:	2800      	cmp	r0, #0
 8020eda:	d083      	beq.n	8020de4 <__ssvfiscanf_r+0xab8>
 8020edc:	2a00      	cmp	r2, #0
 8020ede:	f47f ab26 	bne.w	802052e <__ssvfiscanf_r+0x202>
 8020ee2:	e7c5      	b.n	8020e70 <__ssvfiscanf_r+0xb44>
 8020ee4:	3b01      	subs	r3, #1
 8020ee6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8020eea:	ee18 0a10 	vmov	r0, s16
 8020eee:	5cc9      	ldrb	r1, [r1, r3]
 8020ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8020ef2:	4622      	mov	r2, r4
 8020ef4:	f7ff f987 	bl	8020206 <_sungetc_r>
 8020ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020efa:	e7b7      	b.n	8020e6c <__ssvfiscanf_r+0xb40>
 8020efc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020efe:	4419      	add	r1, r3
 8020f00:	6a3b      	ldr	r3, [r7, #32]
 8020f02:	62f9      	str	r1, [r7, #44]	; 0x2c
 8020f04:	2b03      	cmp	r3, #3
 8020f06:	d102      	bne.n	8020f0e <__ssvfiscanf_r+0xbe2>
 8020f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020f0a:	2b04      	cmp	r3, #4
 8020f0c:	d002      	beq.n	8020f14 <__ssvfiscanf_r+0xbe8>
 8020f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f10:	3b01      	subs	r3, #1
 8020f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8020f14:	f1b8 0f00 	cmp.w	r8, #0
 8020f18:	d1d4      	bne.n	8020ec4 <__ssvfiscanf_r+0xb98>
 8020f1a:	3504      	adds	r5, #4
 8020f1c:	f1ba 0f00 	cmp.w	sl, #0
 8020f20:	d015      	beq.n	8020f4e <__ssvfiscanf_r+0xc22>
 8020f22:	1bab      	subs	r3, r5, r6
 8020f24:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8020f28:	d80f      	bhi.n	8020f4a <__ssvfiscanf_r+0xc1e>
 8020f2a:	4630      	mov	r0, r6
 8020f2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8020f30:	60fb      	str	r3, [r7, #12]
 8020f32:	f001 fa41 	bl	80223b8 <realloc>
 8020f36:	4606      	mov	r6, r0
 8020f38:	2800      	cmp	r0, #0
 8020f3a:	f43f ab9a 	beq.w	8020672 <__ssvfiscanf_r+0x346>
 8020f3e:	68fb      	ldr	r3, [r7, #12]
 8020f40:	f8ca 0000 	str.w	r0, [sl]
 8020f44:	18c5      	adds	r5, r0, r3
 8020f46:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020f4a:	4642      	mov	r2, r8
 8020f4c:	e7ba      	b.n	8020ec4 <__ssvfiscanf_r+0xb98>
 8020f4e:	4652      	mov	r2, sl
 8020f50:	e7b8      	b.n	8020ec4 <__ssvfiscanf_r+0xb98>
 8020f52:	f1b8 0f00 	cmp.w	r8, #0
 8020f56:	d01a      	beq.n	8020f8e <__ssvfiscanf_r+0xc62>
 8020f58:	6823      	ldr	r3, [r4, #0]
 8020f5a:	494e      	ldr	r1, [pc, #312]	; (8021094 <__ssvfiscanf_r+0xd68>)
 8020f5c:	781a      	ldrb	r2, [r3, #0]
 8020f5e:	5c52      	ldrb	r2, [r2, r1]
 8020f60:	0711      	lsls	r1, r2, #28
 8020f62:	f53f ae65 	bmi.w	8020c30 <__ssvfiscanf_r+0x904>
 8020f66:	3301      	adds	r3, #1
 8020f68:	6862      	ldr	r2, [r4, #4]
 8020f6a:	6023      	str	r3, [r4, #0]
 8020f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f6e:	3501      	adds	r5, #1
 8020f70:	3a01      	subs	r2, #1
 8020f72:	42ab      	cmp	r3, r5
 8020f74:	6062      	str	r2, [r4, #4]
 8020f76:	f43f ae5b 	beq.w	8020c30 <__ssvfiscanf_r+0x904>
 8020f7a:	2a00      	cmp	r2, #0
 8020f7c:	dcec      	bgt.n	8020f58 <__ssvfiscanf_r+0xc2c>
 8020f7e:	ee18 0a10 	vmov	r0, s16
 8020f82:	4621      	mov	r1, r4
 8020f84:	f7ff f97c 	bl	8020280 <__ssrefill_r>
 8020f88:	2800      	cmp	r0, #0
 8020f8a:	d0e5      	beq.n	8020f58 <__ssvfiscanf_r+0xc2c>
 8020f8c:	e650      	b.n	8020c30 <__ssvfiscanf_r+0x904>
 8020f8e:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8020f92:	f856 5b04 	ldr.w	r5, [r6], #4
 8020f96:	d07b      	beq.n	8021090 <__ssvfiscanf_r+0xd64>
 8020f98:	2d00      	cmp	r5, #0
 8020f9a:	f43f aa21 	beq.w	80203e0 <__ssvfiscanf_r+0xb4>
 8020f9e:	2020      	movs	r0, #32
 8020fa0:	f7fe f9de 	bl	801f360 <malloc>
 8020fa4:	4681      	mov	r9, r0
 8020fa6:	2800      	cmp	r0, #0
 8020fa8:	f43f aac7 	beq.w	802053a <__ssvfiscanf_r+0x20e>
 8020fac:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8020fb0:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8020fb4:	6028      	str	r0, [r5, #0]
 8020fb6:	45c2      	cmp	sl, r8
 8020fb8:	d313      	bcc.n	8020fe2 <__ssvfiscanf_r+0xcb6>
 8020fba:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8020fbe:	4598      	cmp	r8, r3
 8020fc0:	f63f ab60 	bhi.w	8020684 <__ssvfiscanf_r+0x358>
 8020fc4:	f108 0808 	add.w	r8, r8, #8
 8020fc8:	f8db 0000 	ldr.w	r0, [fp]
 8020fcc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8020fd0:	f001 f9f2 	bl	80223b8 <realloc>
 8020fd4:	2800      	cmp	r0, #0
 8020fd6:	f43f ab55 	beq.w	8020684 <__ssvfiscanf_r+0x358>
 8020fda:	f8cb 0000 	str.w	r0, [fp]
 8020fde:	f8ab 8004 	strh.w	r8, [fp, #4]
 8020fe2:	f8db 3000 	ldr.w	r3, [fp]
 8020fe6:	f10a 0201 	add.w	r2, sl, #1
 8020fea:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8020fee:	f8ab 2006 	strh.w	r2, [fp, #6]
 8020ff2:	46aa      	mov	sl, r5
 8020ff4:	464d      	mov	r5, r9
 8020ff6:	f04f 0920 	mov.w	r9, #32
 8020ffa:	46a8      	mov	r8, r5
 8020ffc:	6823      	ldr	r3, [r4, #0]
 8020ffe:	4925      	ldr	r1, [pc, #148]	; (8021094 <__ssvfiscanf_r+0xd68>)
 8021000:	781a      	ldrb	r2, [r3, #0]
 8021002:	5c52      	ldrb	r2, [r2, r1]
 8021004:	0712      	lsls	r2, r2, #28
 8021006:	d42b      	bmi.n	8021060 <__ssvfiscanf_r+0xd34>
 8021008:	6862      	ldr	r2, [r4, #4]
 802100a:	3a01      	subs	r2, #1
 802100c:	6062      	str	r2, [r4, #4]
 802100e:	1c5a      	adds	r2, r3, #1
 8021010:	6022      	str	r2, [r4, #0]
 8021012:	781b      	ldrb	r3, [r3, #0]
 8021014:	f805 3b01 	strb.w	r3, [r5], #1
 8021018:	f1ba 0f00 	cmp.w	sl, #0
 802101c:	d012      	beq.n	8021044 <__ssvfiscanf_r+0xd18>
 802101e:	eba5 0308 	sub.w	r3, r5, r8
 8021022:	454b      	cmp	r3, r9
 8021024:	d30e      	bcc.n	8021044 <__ssvfiscanf_r+0xd18>
 8021026:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802102a:	4640      	mov	r0, r8
 802102c:	4649      	mov	r1, r9
 802102e:	61bb      	str	r3, [r7, #24]
 8021030:	f001 f9c2 	bl	80223b8 <realloc>
 8021034:	4680      	mov	r8, r0
 8021036:	2800      	cmp	r0, #0
 8021038:	f43f aa7f 	beq.w	802053a <__ssvfiscanf_r+0x20e>
 802103c:	69bb      	ldr	r3, [r7, #24]
 802103e:	f8ca 0000 	str.w	r0, [sl]
 8021042:	18c5      	adds	r5, r0, r3
 8021044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021046:	3b01      	subs	r3, #1
 8021048:	62bb      	str	r3, [r7, #40]	; 0x28
 802104a:	d009      	beq.n	8021060 <__ssvfiscanf_r+0xd34>
 802104c:	6863      	ldr	r3, [r4, #4]
 802104e:	2b00      	cmp	r3, #0
 8021050:	dcd4      	bgt.n	8020ffc <__ssvfiscanf_r+0xcd0>
 8021052:	ee18 0a10 	vmov	r0, s16
 8021056:	4621      	mov	r1, r4
 8021058:	f7ff f912 	bl	8020280 <__ssrefill_r>
 802105c:	2800      	cmp	r0, #0
 802105e:	d0cd      	beq.n	8020ffc <__ssvfiscanf_r+0xcd0>
 8021060:	2300      	movs	r3, #0
 8021062:	702b      	strb	r3, [r5, #0]
 8021064:	eba5 0508 	sub.w	r5, r5, r8
 8021068:	f1ba 0f00 	cmp.w	sl, #0
 802106c:	d009      	beq.n	8021082 <__ssvfiscanf_r+0xd56>
 802106e:	1c69      	adds	r1, r5, #1
 8021070:	4589      	cmp	r9, r1
 8021072:	d906      	bls.n	8021082 <__ssvfiscanf_r+0xd56>
 8021074:	f8da 0000 	ldr.w	r0, [sl]
 8021078:	f001 f99e 	bl	80223b8 <realloc>
 802107c:	b108      	cbz	r0, 8021082 <__ssvfiscanf_r+0xd56>
 802107e:	f8ca 0000 	str.w	r0, [sl]
 8021082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021084:	442b      	add	r3, r5
 8021086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802108a:	3301      	adds	r3, #1
 802108c:	f7ff b96a 	b.w	8020364 <__ssvfiscanf_r+0x38>
 8021090:	46ca      	mov	sl, r9
 8021092:	e7b2      	b.n	8020ffa <__ssvfiscanf_r+0xcce>
 8021094:	08028d49 	.word	0x08028d49
 8021098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802109a:	3b01      	subs	r3, #1
 802109c:	2b26      	cmp	r3, #38	; 0x26
 802109e:	bf81      	itttt	hi
 80210a0:	6abb      	ldrhi	r3, [r7, #40]	; 0x28
 80210a2:	f1a3 0527 	subhi.w	r5, r3, #39	; 0x27
 80210a6:	2327      	movhi	r3, #39	; 0x27
 80210a8:	62bb      	strhi	r3, [r7, #40]	; 0x28
 80210aa:	bf98      	it	ls
 80210ac:	2500      	movls	r5, #0
 80210ae:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
 80210b2:	f04f 0a00 	mov.w	sl, #0
 80210b6:	f107 0848 	add.w	r8, r7, #72	; 0x48
 80210ba:	6822      	ldr	r2, [r4, #0]
 80210bc:	7813      	ldrb	r3, [r2, #0]
 80210be:	2b39      	cmp	r3, #57	; 0x39
 80210c0:	d80f      	bhi.n	80210e2 <__ssvfiscanf_r+0xdb6>
 80210c2:	2b2a      	cmp	r3, #42	; 0x2a
 80210c4:	d91a      	bls.n	80210fc <__ssvfiscanf_r+0xdd0>
 80210c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80210ca:	290e      	cmp	r1, #14
 80210cc:	d816      	bhi.n	80210fc <__ssvfiscanf_r+0xdd0>
 80210ce:	e8df f001 	tbb	[pc, r1]
 80210d2:	1577      	.short	0x1577
 80210d4:	41151577 	.word	0x41151577
 80210d8:	67676767 	.word	0x67676767
 80210dc:	6f676767 	.word	0x6f676767
 80210e0:	6f          	.byte	0x6f
 80210e1:	00          	.byte	0x00
 80210e2:	2b66      	cmp	r3, #102	; 0x66
 80210e4:	d834      	bhi.n	8021150 <__ssvfiscanf_r+0xe24>
 80210e6:	2b60      	cmp	r3, #96	; 0x60
 80210e8:	d803      	bhi.n	80210f2 <__ssvfiscanf_r+0xdc6>
 80210ea:	2b46      	cmp	r3, #70	; 0x46
 80210ec:	d804      	bhi.n	80210f8 <__ssvfiscanf_r+0xdcc>
 80210ee:	2b40      	cmp	r3, #64	; 0x40
 80210f0:	d904      	bls.n	80210fc <__ssvfiscanf_r+0xdd0>
 80210f2:	69f9      	ldr	r1, [r7, #28]
 80210f4:	290a      	cmp	r1, #10
 80210f6:	e061      	b.n	80211bc <__ssvfiscanf_r+0xe90>
 80210f8:	2b58      	cmp	r3, #88	; 0x58
 80210fa:	d067      	beq.n	80211cc <__ssvfiscanf_r+0xea0>
 80210fc:	f419 7f80 	tst.w	r9, #256	; 0x100
 8021100:	d012      	beq.n	8021128 <__ssvfiscanf_r+0xdfc>
 8021102:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021106:	4598      	cmp	r8, r3
 8021108:	d909      	bls.n	802111e <__ssvfiscanf_r+0xdf2>
 802110a:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 802110e:	ee18 0a10 	vmov	r0, s16
 8021112:	4622      	mov	r2, r4
 8021114:	f7ff f877 	bl	8020206 <_sungetc_r>
 8021118:	f108 35ff 	add.w	r5, r8, #4294967295
 802111c:	46a8      	mov	r8, r5
 802111e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021122:	4598      	cmp	r8, r3
 8021124:	f43f a95c 	beq.w	80203e0 <__ssvfiscanf_r+0xb4>
 8021128:	f019 0210 	ands.w	r2, r9, #16
 802112c:	d16b      	bne.n	8021206 <__ssvfiscanf_r+0xeda>
 802112e:	697d      	ldr	r5, [r7, #20]
 8021130:	69fb      	ldr	r3, [r7, #28]
 8021132:	f888 2000 	strb.w	r2, [r8]
 8021136:	ee18 0a10 	vmov	r0, s16
 802113a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 802113e:	47a8      	blx	r5
 8021140:	f019 0f20 	tst.w	r9, #32
 8021144:	f106 0504 	add.w	r5, r6, #4
 8021148:	d054      	beq.n	80211f4 <__ssvfiscanf_r+0xec8>
 802114a:	6833      	ldr	r3, [r6, #0]
 802114c:	6018      	str	r0, [r3, #0]
 802114e:	e056      	b.n	80211fe <__ssvfiscanf_r+0xed2>
 8021150:	2b78      	cmp	r3, #120	; 0x78
 8021152:	e7d2      	b.n	80210fa <__ssvfiscanf_r+0xdce>
 8021154:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8021158:	d00a      	beq.n	8021170 <__ssvfiscanf_r+0xe44>
 802115a:	69f9      	ldr	r1, [r7, #28]
 802115c:	b919      	cbnz	r1, 8021166 <__ssvfiscanf_r+0xe3a>
 802115e:	2108      	movs	r1, #8
 8021160:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8021164:	61f9      	str	r1, [r7, #28]
 8021166:	f419 6f80 	tst.w	r9, #1024	; 0x400
 802116a:	d004      	beq.n	8021176 <__ssvfiscanf_r+0xe4a>
 802116c:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
 8021170:	f808 3b01 	strb.w	r3, [r8], #1
 8021174:	e008      	b.n	8021188 <__ssvfiscanf_r+0xe5c>
 8021176:	f429 7960 	bic.w	r9, r9, #896	; 0x380
 802117a:	b11d      	cbz	r5, 8021184 <__ssvfiscanf_r+0xe58>
 802117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802117e:	3301      	adds	r3, #1
 8021180:	3d01      	subs	r5, #1
 8021182:	62bb      	str	r3, [r7, #40]	; 0x28
 8021184:	f10a 0a01 	add.w	sl, sl, #1
 8021188:	6863      	ldr	r3, [r4, #4]
 802118a:	3b01      	subs	r3, #1
 802118c:	2b00      	cmp	r3, #0
 802118e:	6063      	str	r3, [r4, #4]
 8021190:	dd28      	ble.n	80211e4 <__ssvfiscanf_r+0xeb8>
 8021192:	3201      	adds	r2, #1
 8021194:	6022      	str	r2, [r4, #0]
 8021196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021198:	3b01      	subs	r3, #1
 802119a:	62bb      	str	r3, [r7, #40]	; 0x28
 802119c:	d18d      	bne.n	80210ba <__ssvfiscanf_r+0xd8e>
 802119e:	e7ad      	b.n	80210fc <__ssvfiscanf_r+0xdd0>
 80211a0:	69f8      	ldr	r0, [r7, #28]
 80211a2:	4932      	ldr	r1, [pc, #200]	; (802126c <__ssvfiscanf_r+0xf40>)
 80211a4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80211a8:	61f9      	str	r1, [r7, #28]
 80211aa:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
 80211ae:	e7df      	b.n	8021170 <__ssvfiscanf_r+0xe44>
 80211b0:	69f8      	ldr	r0, [r7, #28]
 80211b2:	492e      	ldr	r1, [pc, #184]	; (802126c <__ssvfiscanf_r+0xf40>)
 80211b4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 80211b8:	61f9      	str	r1, [r7, #28]
 80211ba:	2908      	cmp	r1, #8
 80211bc:	dcf5      	bgt.n	80211aa <__ssvfiscanf_r+0xe7e>
 80211be:	e79d      	b.n	80210fc <__ssvfiscanf_r+0xdd0>
 80211c0:	f019 0f80 	tst.w	r9, #128	; 0x80
 80211c4:	d09a      	beq.n	80210fc <__ssvfiscanf_r+0xdd0>
 80211c6:	f029 0980 	bic.w	r9, r9, #128	; 0x80
 80211ca:	e7d1      	b.n	8021170 <__ssvfiscanf_r+0xe44>
 80211cc:	f409 61c0 	and.w	r1, r9, #1536	; 0x600
 80211d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80211d4:	d192      	bne.n	80210fc <__ssvfiscanf_r+0xdd0>
 80211d6:	f429 7900 	bic.w	r9, r9, #512	; 0x200
 80211da:	2110      	movs	r1, #16
 80211dc:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
 80211e0:	61f9      	str	r1, [r7, #28]
 80211e2:	e7c5      	b.n	8021170 <__ssvfiscanf_r+0xe44>
 80211e4:	ee18 0a10 	vmov	r0, s16
 80211e8:	4621      	mov	r1, r4
 80211ea:	f7ff f849 	bl	8020280 <__ssrefill_r>
 80211ee:	2800      	cmp	r0, #0
 80211f0:	d0d1      	beq.n	8021196 <__ssvfiscanf_r+0xe6a>
 80211f2:	e783      	b.n	80210fc <__ssvfiscanf_r+0xdd0>
 80211f4:	f019 0f08 	tst.w	r9, #8
 80211f8:	d00e      	beq.n	8021218 <__ssvfiscanf_r+0xeec>
 80211fa:	6833      	ldr	r3, [r6, #0]
 80211fc:	7018      	strb	r0, [r3, #0]
 80211fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021200:	3301      	adds	r3, #1
 8021202:	627b      	str	r3, [r7, #36]	; 0x24
 8021204:	462e      	mov	r6, r5
 8021206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802120a:	eba8 0803 	sub.w	r8, r8, r3
 802120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021210:	44c2      	add	sl, r8
 8021212:	4453      	add	r3, sl
 8021214:	f7ff b982 	b.w	802051c <__ssvfiscanf_r+0x1f0>
 8021218:	f019 0f04 	tst.w	r9, #4
 802121c:	d002      	beq.n	8021224 <__ssvfiscanf_r+0xef8>
 802121e:	6833      	ldr	r3, [r6, #0]
 8021220:	8018      	strh	r0, [r3, #0]
 8021222:	e7ec      	b.n	80211fe <__ssvfiscanf_r+0xed2>
 8021224:	f019 0201 	ands.w	r2, r9, #1
 8021228:	d18f      	bne.n	802114a <__ssvfiscanf_r+0xe1e>
 802122a:	f019 0f02 	tst.w	r9, #2
 802122e:	d08c      	beq.n	802114a <__ssvfiscanf_r+0xe1e>
 8021230:	4b0f      	ldr	r3, [pc, #60]	; (8021270 <__ssvfiscanf_r+0xf44>)
 8021232:	6979      	ldr	r1, [r7, #20]
 8021234:	4299      	cmp	r1, r3
 8021236:	ee18 0a10 	vmov	r0, s16
 802123a:	69fb      	ldr	r3, [r7, #28]
 802123c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021240:	d105      	bne.n	802124e <__ssvfiscanf_r+0xf22>
 8021242:	f001 fbd3 	bl	80229ec <_strtoull_r>
 8021246:	6833      	ldr	r3, [r6, #0]
 8021248:	e9c3 0100 	strd	r0, r1, [r3]
 802124c:	e7d7      	b.n	80211fe <__ssvfiscanf_r+0xed2>
 802124e:	f001 fb31 	bl	80228b4 <_strtoll_r>
 8021252:	e7f8      	b.n	8021246 <__ssvfiscanf_r+0xf1a>
 8021254:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8021258:	6818      	ldr	r0, [r3, #0]
 802125a:	f7fe f889 	bl	801f370 <free>
 802125e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8021262:	3401      	adds	r4, #1
 8021264:	601e      	str	r6, [r3, #0]
 8021266:	f7ff ba0f 	b.w	8020688 <__ssvfiscanf_r+0x35c>
 802126a:	bf00      	nop
 802126c:	0802919c 	.word	0x0802919c
 8021270:	080200f9 	.word	0x080200f9

08021274 <sysconf>:
 8021274:	2808      	cmp	r0, #8
 8021276:	b508      	push	{r3, lr}
 8021278:	d006      	beq.n	8021288 <sysconf+0x14>
 802127a:	f7fd fc95 	bl	801eba8 <__errno>
 802127e:	2316      	movs	r3, #22
 8021280:	6003      	str	r3, [r0, #0]
 8021282:	f04f 30ff 	mov.w	r0, #4294967295
 8021286:	bd08      	pop	{r3, pc}
 8021288:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 802128c:	e7fb      	b.n	8021286 <sysconf+0x12>

0802128e <__submore>:
 802128e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021292:	460c      	mov	r4, r1
 8021294:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8021296:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802129a:	4299      	cmp	r1, r3
 802129c:	d11d      	bne.n	80212da <__submore+0x4c>
 802129e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80212a2:	f7fe f86d 	bl	801f380 <_malloc_r>
 80212a6:	b918      	cbnz	r0, 80212b0 <__submore+0x22>
 80212a8:	f04f 30ff 	mov.w	r0, #4294967295
 80212ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80212b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80212b4:	6363      	str	r3, [r4, #52]	; 0x34
 80212b6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80212ba:	6320      	str	r0, [r4, #48]	; 0x30
 80212bc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80212c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80212c4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80212c8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80212cc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80212d0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80212d4:	6020      	str	r0, [r4, #0]
 80212d6:	2000      	movs	r0, #0
 80212d8:	e7e8      	b.n	80212ac <__submore+0x1e>
 80212da:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80212dc:	0077      	lsls	r7, r6, #1
 80212de:	463a      	mov	r2, r7
 80212e0:	f001 f872 	bl	80223c8 <_realloc_r>
 80212e4:	4605      	mov	r5, r0
 80212e6:	2800      	cmp	r0, #0
 80212e8:	d0de      	beq.n	80212a8 <__submore+0x1a>
 80212ea:	eb00 0806 	add.w	r8, r0, r6
 80212ee:	4601      	mov	r1, r0
 80212f0:	4632      	mov	r2, r6
 80212f2:	4640      	mov	r0, r8
 80212f4:	f7f9 faf8 	bl	801a8e8 <memcpy>
 80212f8:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 80212fc:	f8c4 8000 	str.w	r8, [r4]
 8021300:	e7e9      	b.n	80212d6 <__submore+0x48>

08021302 <__sprint_r>:
 8021302:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021306:	6893      	ldr	r3, [r2, #8]
 8021308:	4680      	mov	r8, r0
 802130a:	460f      	mov	r7, r1
 802130c:	4614      	mov	r4, r2
 802130e:	b91b      	cbnz	r3, 8021318 <__sprint_r+0x16>
 8021310:	6053      	str	r3, [r2, #4]
 8021312:	4618      	mov	r0, r3
 8021314:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021318:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 802131a:	049d      	lsls	r5, r3, #18
 802131c:	d520      	bpl.n	8021360 <__sprint_r+0x5e>
 802131e:	6815      	ldr	r5, [r2, #0]
 8021320:	3508      	adds	r5, #8
 8021322:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8021326:	f04f 0900 	mov.w	r9, #0
 802132a:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 802132e:	45ca      	cmp	sl, r9
 8021330:	dc0b      	bgt.n	802134a <__sprint_r+0x48>
 8021332:	68a3      	ldr	r3, [r4, #8]
 8021334:	f026 0003 	bic.w	r0, r6, #3
 8021338:	1a18      	subs	r0, r3, r0
 802133a:	60a0      	str	r0, [r4, #8]
 802133c:	3508      	adds	r5, #8
 802133e:	2800      	cmp	r0, #0
 8021340:	d1ef      	bne.n	8021322 <__sprint_r+0x20>
 8021342:	2300      	movs	r3, #0
 8021344:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8021348:	e7e4      	b.n	8021314 <__sprint_r+0x12>
 802134a:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802134e:	463a      	mov	r2, r7
 8021350:	4640      	mov	r0, r8
 8021352:	f000 fe36 	bl	8021fc2 <_fputwc_r>
 8021356:	1c43      	adds	r3, r0, #1
 8021358:	d0f3      	beq.n	8021342 <__sprint_r+0x40>
 802135a:	f109 0901 	add.w	r9, r9, #1
 802135e:	e7e6      	b.n	802132e <__sprint_r+0x2c>
 8021360:	f000 fe6c 	bl	802203c <__sfvwrite_r>
 8021364:	e7ed      	b.n	8021342 <__sprint_r+0x40>
	...

08021368 <_vfiprintf_r>:
 8021368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802136c:	ed2d 8b02 	vpush	{d8}
 8021370:	b0b9      	sub	sp, #228	; 0xe4
 8021372:	460f      	mov	r7, r1
 8021374:	9201      	str	r2, [sp, #4]
 8021376:	461d      	mov	r5, r3
 8021378:	461c      	mov	r4, r3
 802137a:	4681      	mov	r9, r0
 802137c:	b118      	cbz	r0, 8021386 <_vfiprintf_r+0x1e>
 802137e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8021380:	b90b      	cbnz	r3, 8021386 <_vfiprintf_r+0x1e>
 8021382:	f7fd fd11 	bl	801eda8 <__sinit>
 8021386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021388:	07d8      	lsls	r0, r3, #31
 802138a:	d405      	bmi.n	8021398 <_vfiprintf_r+0x30>
 802138c:	89bb      	ldrh	r3, [r7, #12]
 802138e:	0599      	lsls	r1, r3, #22
 8021390:	d402      	bmi.n	8021398 <_vfiprintf_r+0x30>
 8021392:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021394:	f7fd ff75 	bl	801f282 <__retarget_lock_acquire_recursive>
 8021398:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802139c:	049a      	lsls	r2, r3, #18
 802139e:	d406      	bmi.n	80213ae <_vfiprintf_r+0x46>
 80213a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80213a4:	81bb      	strh	r3, [r7, #12]
 80213a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80213a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80213ac:	667b      	str	r3, [r7, #100]	; 0x64
 80213ae:	89bb      	ldrh	r3, [r7, #12]
 80213b0:	071e      	lsls	r6, r3, #28
 80213b2:	d501      	bpl.n	80213b8 <_vfiprintf_r+0x50>
 80213b4:	693b      	ldr	r3, [r7, #16]
 80213b6:	b9bb      	cbnz	r3, 80213e8 <_vfiprintf_r+0x80>
 80213b8:	4639      	mov	r1, r7
 80213ba:	4648      	mov	r0, r9
 80213bc:	f7fc fd16 	bl	801ddec <__swsetup_r>
 80213c0:	b190      	cbz	r0, 80213e8 <_vfiprintf_r+0x80>
 80213c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80213c4:	07d8      	lsls	r0, r3, #31
 80213c6:	d508      	bpl.n	80213da <_vfiprintf_r+0x72>
 80213c8:	f04f 33ff 	mov.w	r3, #4294967295
 80213cc:	9302      	str	r3, [sp, #8]
 80213ce:	9802      	ldr	r0, [sp, #8]
 80213d0:	b039      	add	sp, #228	; 0xe4
 80213d2:	ecbd 8b02 	vpop	{d8}
 80213d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213da:	89bb      	ldrh	r3, [r7, #12]
 80213dc:	0599      	lsls	r1, r3, #22
 80213de:	d4f3      	bmi.n	80213c8 <_vfiprintf_r+0x60>
 80213e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80213e2:	f7fd ff50 	bl	801f286 <__retarget_lock_release_recursive>
 80213e6:	e7ef      	b.n	80213c8 <_vfiprintf_r+0x60>
 80213e8:	89bb      	ldrh	r3, [r7, #12]
 80213ea:	f003 021a 	and.w	r2, r3, #26
 80213ee:	2a0a      	cmp	r2, #10
 80213f0:	d113      	bne.n	802141a <_vfiprintf_r+0xb2>
 80213f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80213f6:	2a00      	cmp	r2, #0
 80213f8:	db0f      	blt.n	802141a <_vfiprintf_r+0xb2>
 80213fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80213fc:	07d2      	lsls	r2, r2, #31
 80213fe:	d404      	bmi.n	802140a <_vfiprintf_r+0xa2>
 8021400:	059e      	lsls	r6, r3, #22
 8021402:	d402      	bmi.n	802140a <_vfiprintf_r+0xa2>
 8021404:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021406:	f7fd ff3e 	bl	801f286 <__retarget_lock_release_recursive>
 802140a:	9a01      	ldr	r2, [sp, #4]
 802140c:	462b      	mov	r3, r5
 802140e:	4639      	mov	r1, r7
 8021410:	4648      	mov	r0, r9
 8021412:	f000 fc31 	bl	8021c78 <__sbprintf>
 8021416:	9002      	str	r0, [sp, #8]
 8021418:	e7d9      	b.n	80213ce <_vfiprintf_r+0x66>
 802141a:	2300      	movs	r3, #0
 802141c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8021420:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8021424:	ae0f      	add	r6, sp, #60	; 0x3c
 8021426:	ee08 3a10 	vmov	s16, r3
 802142a:	960c      	str	r6, [sp, #48]	; 0x30
 802142c:	9307      	str	r3, [sp, #28]
 802142e:	9302      	str	r3, [sp, #8]
 8021430:	9b01      	ldr	r3, [sp, #4]
 8021432:	461d      	mov	r5, r3
 8021434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021438:	b10a      	cbz	r2, 802143e <_vfiprintf_r+0xd6>
 802143a:	2a25      	cmp	r2, #37	; 0x25
 802143c:	d1f9      	bne.n	8021432 <_vfiprintf_r+0xca>
 802143e:	9b01      	ldr	r3, [sp, #4]
 8021440:	ebb5 0803 	subs.w	r8, r5, r3
 8021444:	d00d      	beq.n	8021462 <_vfiprintf_r+0xfa>
 8021446:	e9c6 3800 	strd	r3, r8, [r6]
 802144a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802144c:	4443      	add	r3, r8
 802144e:	930e      	str	r3, [sp, #56]	; 0x38
 8021450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021452:	3301      	adds	r3, #1
 8021454:	2b07      	cmp	r3, #7
 8021456:	930d      	str	r3, [sp, #52]	; 0x34
 8021458:	dc75      	bgt.n	8021546 <_vfiprintf_r+0x1de>
 802145a:	3608      	adds	r6, #8
 802145c:	9b02      	ldr	r3, [sp, #8]
 802145e:	4443      	add	r3, r8
 8021460:	9302      	str	r3, [sp, #8]
 8021462:	782b      	ldrb	r3, [r5, #0]
 8021464:	2b00      	cmp	r3, #0
 8021466:	f000 83c8 	beq.w	8021bfa <_vfiprintf_r+0x892>
 802146a:	2300      	movs	r3, #0
 802146c:	f04f 31ff 	mov.w	r1, #4294967295
 8021470:	1c6a      	adds	r2, r5, #1
 8021472:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8021476:	9100      	str	r1, [sp, #0]
 8021478:	9303      	str	r3, [sp, #12]
 802147a:	469a      	mov	sl, r3
 802147c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021480:	9201      	str	r2, [sp, #4]
 8021482:	f1a3 0220 	sub.w	r2, r3, #32
 8021486:	2a5a      	cmp	r2, #90	; 0x5a
 8021488:	f200 8310 	bhi.w	8021aac <_vfiprintf_r+0x744>
 802148c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8021490:	030e0099 	.word	0x030e0099
 8021494:	00a1030e 	.word	0x00a1030e
 8021498:	030e030e 	.word	0x030e030e
 802149c:	0080030e 	.word	0x0080030e
 80214a0:	030e030e 	.word	0x030e030e
 80214a4:	00ae00a4 	.word	0x00ae00a4
 80214a8:	00ab030e 	.word	0x00ab030e
 80214ac:	030e00b0 	.word	0x030e00b0
 80214b0:	00ce00cb 	.word	0x00ce00cb
 80214b4:	00ce00ce 	.word	0x00ce00ce
 80214b8:	00ce00ce 	.word	0x00ce00ce
 80214bc:	00ce00ce 	.word	0x00ce00ce
 80214c0:	00ce00ce 	.word	0x00ce00ce
 80214c4:	030e030e 	.word	0x030e030e
 80214c8:	030e030e 	.word	0x030e030e
 80214cc:	030e030e 	.word	0x030e030e
 80214d0:	030e030e 	.word	0x030e030e
 80214d4:	00f8030e 	.word	0x00f8030e
 80214d8:	030e0106 	.word	0x030e0106
 80214dc:	030e030e 	.word	0x030e030e
 80214e0:	030e030e 	.word	0x030e030e
 80214e4:	030e030e 	.word	0x030e030e
 80214e8:	030e030e 	.word	0x030e030e
 80214ec:	014d030e 	.word	0x014d030e
 80214f0:	030e030e 	.word	0x030e030e
 80214f4:	0192030e 	.word	0x0192030e
 80214f8:	0270030e 	.word	0x0270030e
 80214fc:	030e030e 	.word	0x030e030e
 8021500:	030e028e 	.word	0x030e028e
 8021504:	030e030e 	.word	0x030e030e
 8021508:	030e030e 	.word	0x030e030e
 802150c:	030e030e 	.word	0x030e030e
 8021510:	030e030e 	.word	0x030e030e
 8021514:	00f8030e 	.word	0x00f8030e
 8021518:	030e0108 	.word	0x030e0108
 802151c:	030e030e 	.word	0x030e030e
 8021520:	010800de 	.word	0x010800de
 8021524:	030e00f2 	.word	0x030e00f2
 8021528:	030e00eb 	.word	0x030e00eb
 802152c:	014f0130 	.word	0x014f0130
 8021530:	00f20182 	.word	0x00f20182
 8021534:	0192030e 	.word	0x0192030e
 8021538:	02720097 	.word	0x02720097
 802153c:	030e030e 	.word	0x030e030e
 8021540:	030e0065 	.word	0x030e0065
 8021544:	0097      	.short	0x0097
 8021546:	aa0c      	add	r2, sp, #48	; 0x30
 8021548:	4639      	mov	r1, r7
 802154a:	4648      	mov	r0, r9
 802154c:	f7ff fed9 	bl	8021302 <__sprint_r>
 8021550:	2800      	cmp	r0, #0
 8021552:	f040 8331 	bne.w	8021bb8 <_vfiprintf_r+0x850>
 8021556:	ae0f      	add	r6, sp, #60	; 0x3c
 8021558:	e780      	b.n	802145c <_vfiprintf_r+0xf4>
 802155a:	4a95      	ldr	r2, [pc, #596]	; (80217b0 <_vfiprintf_r+0x448>)
 802155c:	9205      	str	r2, [sp, #20]
 802155e:	f01a 0f20 	tst.w	sl, #32
 8021562:	f000 8225 	beq.w	80219b0 <_vfiprintf_r+0x648>
 8021566:	3407      	adds	r4, #7
 8021568:	f024 0b07 	bic.w	fp, r4, #7
 802156c:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8021570:	f01a 0f01 	tst.w	sl, #1
 8021574:	d009      	beq.n	802158a <_vfiprintf_r+0x222>
 8021576:	ea54 0205 	orrs.w	r2, r4, r5
 802157a:	bf1f      	itttt	ne
 802157c:	2230      	movne	r2, #48	; 0x30
 802157e:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8021582:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8021586:	f04a 0a02 	orrne.w	sl, sl, #2
 802158a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 802158e:	e10d      	b.n	80217ac <_vfiprintf_r+0x444>
 8021590:	4648      	mov	r0, r9
 8021592:	f7fd fe6f 	bl	801f274 <_localeconv_r>
 8021596:	6843      	ldr	r3, [r0, #4]
 8021598:	4618      	mov	r0, r3
 802159a:	ee08 3a10 	vmov	s16, r3
 802159e:	f7de fe41 	bl	8000224 <strlen>
 80215a2:	9007      	str	r0, [sp, #28]
 80215a4:	4648      	mov	r0, r9
 80215a6:	f7fd fe65 	bl	801f274 <_localeconv_r>
 80215aa:	6883      	ldr	r3, [r0, #8]
 80215ac:	9306      	str	r3, [sp, #24]
 80215ae:	9b07      	ldr	r3, [sp, #28]
 80215b0:	b12b      	cbz	r3, 80215be <_vfiprintf_r+0x256>
 80215b2:	9b06      	ldr	r3, [sp, #24]
 80215b4:	b11b      	cbz	r3, 80215be <_vfiprintf_r+0x256>
 80215b6:	781b      	ldrb	r3, [r3, #0]
 80215b8:	b10b      	cbz	r3, 80215be <_vfiprintf_r+0x256>
 80215ba:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80215be:	9a01      	ldr	r2, [sp, #4]
 80215c0:	e75c      	b.n	802147c <_vfiprintf_r+0x114>
 80215c2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	d1f9      	bne.n	80215be <_vfiprintf_r+0x256>
 80215ca:	2320      	movs	r3, #32
 80215cc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80215d0:	e7f5      	b.n	80215be <_vfiprintf_r+0x256>
 80215d2:	f04a 0a01 	orr.w	sl, sl, #1
 80215d6:	e7f2      	b.n	80215be <_vfiprintf_r+0x256>
 80215d8:	f854 3b04 	ldr.w	r3, [r4], #4
 80215dc:	9303      	str	r3, [sp, #12]
 80215de:	2b00      	cmp	r3, #0
 80215e0:	daed      	bge.n	80215be <_vfiprintf_r+0x256>
 80215e2:	425b      	negs	r3, r3
 80215e4:	9303      	str	r3, [sp, #12]
 80215e6:	f04a 0a04 	orr.w	sl, sl, #4
 80215ea:	e7e8      	b.n	80215be <_vfiprintf_r+0x256>
 80215ec:	232b      	movs	r3, #43	; 0x2b
 80215ee:	e7ed      	b.n	80215cc <_vfiprintf_r+0x264>
 80215f0:	9a01      	ldr	r2, [sp, #4]
 80215f2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80215f6:	2b2a      	cmp	r3, #42	; 0x2a
 80215f8:	d112      	bne.n	8021620 <_vfiprintf_r+0x2b8>
 80215fa:	f854 0b04 	ldr.w	r0, [r4], #4
 80215fe:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8021602:	e9cd 3200 	strd	r3, r2, [sp]
 8021606:	e7da      	b.n	80215be <_vfiprintf_r+0x256>
 8021608:	9b00      	ldr	r3, [sp, #0]
 802160a:	200a      	movs	r0, #10
 802160c:	fb00 1303 	mla	r3, r0, r3, r1
 8021610:	9300      	str	r3, [sp, #0]
 8021612:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021616:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802161a:	2909      	cmp	r1, #9
 802161c:	d9f4      	bls.n	8021608 <_vfiprintf_r+0x2a0>
 802161e:	e72f      	b.n	8021480 <_vfiprintf_r+0x118>
 8021620:	2100      	movs	r1, #0
 8021622:	9100      	str	r1, [sp, #0]
 8021624:	e7f7      	b.n	8021616 <_vfiprintf_r+0x2ae>
 8021626:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 802162a:	e7c8      	b.n	80215be <_vfiprintf_r+0x256>
 802162c:	2100      	movs	r1, #0
 802162e:	9a01      	ldr	r2, [sp, #4]
 8021630:	9103      	str	r1, [sp, #12]
 8021632:	9903      	ldr	r1, [sp, #12]
 8021634:	3b30      	subs	r3, #48	; 0x30
 8021636:	200a      	movs	r0, #10
 8021638:	fb00 3301 	mla	r3, r0, r1, r3
 802163c:	9303      	str	r3, [sp, #12]
 802163e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021642:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8021646:	2909      	cmp	r1, #9
 8021648:	d9f3      	bls.n	8021632 <_vfiprintf_r+0x2ca>
 802164a:	e719      	b.n	8021480 <_vfiprintf_r+0x118>
 802164c:	9b01      	ldr	r3, [sp, #4]
 802164e:	781b      	ldrb	r3, [r3, #0]
 8021650:	2b68      	cmp	r3, #104	; 0x68
 8021652:	bf01      	itttt	eq
 8021654:	9b01      	ldreq	r3, [sp, #4]
 8021656:	3301      	addeq	r3, #1
 8021658:	9301      	streq	r3, [sp, #4]
 802165a:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 802165e:	bf18      	it	ne
 8021660:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8021664:	e7ab      	b.n	80215be <_vfiprintf_r+0x256>
 8021666:	9b01      	ldr	r3, [sp, #4]
 8021668:	781b      	ldrb	r3, [r3, #0]
 802166a:	2b6c      	cmp	r3, #108	; 0x6c
 802166c:	d105      	bne.n	802167a <_vfiprintf_r+0x312>
 802166e:	9b01      	ldr	r3, [sp, #4]
 8021670:	3301      	adds	r3, #1
 8021672:	9301      	str	r3, [sp, #4]
 8021674:	f04a 0a20 	orr.w	sl, sl, #32
 8021678:	e7a1      	b.n	80215be <_vfiprintf_r+0x256>
 802167a:	f04a 0a10 	orr.w	sl, sl, #16
 802167e:	e79e      	b.n	80215be <_vfiprintf_r+0x256>
 8021680:	46a3      	mov	fp, r4
 8021682:	2100      	movs	r1, #0
 8021684:	f85b 3b04 	ldr.w	r3, [fp], #4
 8021688:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 802168c:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8021690:	2301      	movs	r3, #1
 8021692:	9300      	str	r3, [sp, #0]
 8021694:	460d      	mov	r5, r1
 8021696:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 802169a:	e0a0      	b.n	80217de <_vfiprintf_r+0x476>
 802169c:	f04a 0a10 	orr.w	sl, sl, #16
 80216a0:	f01a 0f20 	tst.w	sl, #32
 80216a4:	d011      	beq.n	80216ca <_vfiprintf_r+0x362>
 80216a6:	3407      	adds	r4, #7
 80216a8:	f024 0b07 	bic.w	fp, r4, #7
 80216ac:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 80216b0:	2c00      	cmp	r4, #0
 80216b2:	f175 0300 	sbcs.w	r3, r5, #0
 80216b6:	da06      	bge.n	80216c6 <_vfiprintf_r+0x35e>
 80216b8:	4264      	negs	r4, r4
 80216ba:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80216be:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80216c2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80216c6:	2301      	movs	r3, #1
 80216c8:	e03f      	b.n	802174a <_vfiprintf_r+0x3e2>
 80216ca:	f01a 0f10 	tst.w	sl, #16
 80216ce:	f104 0b04 	add.w	fp, r4, #4
 80216d2:	d002      	beq.n	80216da <_vfiprintf_r+0x372>
 80216d4:	6824      	ldr	r4, [r4, #0]
 80216d6:	17e5      	asrs	r5, r4, #31
 80216d8:	e7ea      	b.n	80216b0 <_vfiprintf_r+0x348>
 80216da:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80216de:	6824      	ldr	r4, [r4, #0]
 80216e0:	d001      	beq.n	80216e6 <_vfiprintf_r+0x37e>
 80216e2:	b224      	sxth	r4, r4
 80216e4:	e7f7      	b.n	80216d6 <_vfiprintf_r+0x36e>
 80216e6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80216ea:	bf18      	it	ne
 80216ec:	b264      	sxtbne	r4, r4
 80216ee:	e7f2      	b.n	80216d6 <_vfiprintf_r+0x36e>
 80216f0:	f01a 0f20 	tst.w	sl, #32
 80216f4:	f854 3b04 	ldr.w	r3, [r4], #4
 80216f8:	d005      	beq.n	8021706 <_vfiprintf_r+0x39e>
 80216fa:	9a02      	ldr	r2, [sp, #8]
 80216fc:	4610      	mov	r0, r2
 80216fe:	17d1      	asrs	r1, r2, #31
 8021700:	e9c3 0100 	strd	r0, r1, [r3]
 8021704:	e694      	b.n	8021430 <_vfiprintf_r+0xc8>
 8021706:	f01a 0f10 	tst.w	sl, #16
 802170a:	d002      	beq.n	8021712 <_vfiprintf_r+0x3aa>
 802170c:	9a02      	ldr	r2, [sp, #8]
 802170e:	601a      	str	r2, [r3, #0]
 8021710:	e68e      	b.n	8021430 <_vfiprintf_r+0xc8>
 8021712:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8021716:	d002      	beq.n	802171e <_vfiprintf_r+0x3b6>
 8021718:	9a02      	ldr	r2, [sp, #8]
 802171a:	801a      	strh	r2, [r3, #0]
 802171c:	e688      	b.n	8021430 <_vfiprintf_r+0xc8>
 802171e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8021722:	d0f3      	beq.n	802170c <_vfiprintf_r+0x3a4>
 8021724:	9a02      	ldr	r2, [sp, #8]
 8021726:	701a      	strb	r2, [r3, #0]
 8021728:	e682      	b.n	8021430 <_vfiprintf_r+0xc8>
 802172a:	f04a 0a10 	orr.w	sl, sl, #16
 802172e:	f01a 0f20 	tst.w	sl, #32
 8021732:	d01d      	beq.n	8021770 <_vfiprintf_r+0x408>
 8021734:	3407      	adds	r4, #7
 8021736:	f024 0b07 	bic.w	fp, r4, #7
 802173a:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 802173e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8021742:	2300      	movs	r3, #0
 8021744:	2200      	movs	r2, #0
 8021746:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 802174a:	9a00      	ldr	r2, [sp, #0]
 802174c:	3201      	adds	r2, #1
 802174e:	f000 8261 	beq.w	8021c14 <_vfiprintf_r+0x8ac>
 8021752:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8021756:	9204      	str	r2, [sp, #16]
 8021758:	ea54 0205 	orrs.w	r2, r4, r5
 802175c:	f040 8260 	bne.w	8021c20 <_vfiprintf_r+0x8b8>
 8021760:	9a00      	ldr	r2, [sp, #0]
 8021762:	2a00      	cmp	r2, #0
 8021764:	f000 8197 	beq.w	8021a96 <_vfiprintf_r+0x72e>
 8021768:	2b01      	cmp	r3, #1
 802176a:	f040 825c 	bne.w	8021c26 <_vfiprintf_r+0x8be>
 802176e:	e135      	b.n	80219dc <_vfiprintf_r+0x674>
 8021770:	f01a 0f10 	tst.w	sl, #16
 8021774:	f104 0b04 	add.w	fp, r4, #4
 8021778:	d001      	beq.n	802177e <_vfiprintf_r+0x416>
 802177a:	6824      	ldr	r4, [r4, #0]
 802177c:	e003      	b.n	8021786 <_vfiprintf_r+0x41e>
 802177e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8021782:	d002      	beq.n	802178a <_vfiprintf_r+0x422>
 8021784:	8824      	ldrh	r4, [r4, #0]
 8021786:	2500      	movs	r5, #0
 8021788:	e7d9      	b.n	802173e <_vfiprintf_r+0x3d6>
 802178a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 802178e:	d0f4      	beq.n	802177a <_vfiprintf_r+0x412>
 8021790:	7824      	ldrb	r4, [r4, #0]
 8021792:	e7f8      	b.n	8021786 <_vfiprintf_r+0x41e>
 8021794:	46a3      	mov	fp, r4
 8021796:	f647 0330 	movw	r3, #30768	; 0x7830
 802179a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 802179e:	f85b 4b04 	ldr.w	r4, [fp], #4
 80217a2:	4b03      	ldr	r3, [pc, #12]	; (80217b0 <_vfiprintf_r+0x448>)
 80217a4:	9305      	str	r3, [sp, #20]
 80217a6:	2500      	movs	r5, #0
 80217a8:	f04a 0a02 	orr.w	sl, sl, #2
 80217ac:	2302      	movs	r3, #2
 80217ae:	e7c9      	b.n	8021744 <_vfiprintf_r+0x3dc>
 80217b0:	08028f20 	.word	0x08028f20
 80217b4:	9b00      	ldr	r3, [sp, #0]
 80217b6:	46a3      	mov	fp, r4
 80217b8:	2500      	movs	r5, #0
 80217ba:	1c5c      	adds	r4, r3, #1
 80217bc:	f85b 8b04 	ldr.w	r8, [fp], #4
 80217c0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80217c4:	f000 80cf 	beq.w	8021966 <_vfiprintf_r+0x5fe>
 80217c8:	461a      	mov	r2, r3
 80217ca:	4629      	mov	r1, r5
 80217cc:	4640      	mov	r0, r8
 80217ce:	f7de fd37 	bl	8000240 <memchr>
 80217d2:	2800      	cmp	r0, #0
 80217d4:	f000 8174 	beq.w	8021ac0 <_vfiprintf_r+0x758>
 80217d8:	eba0 0308 	sub.w	r3, r0, r8
 80217dc:	9300      	str	r3, [sp, #0]
 80217de:	9b00      	ldr	r3, [sp, #0]
 80217e0:	42ab      	cmp	r3, r5
 80217e2:	bfb8      	it	lt
 80217e4:	462b      	movlt	r3, r5
 80217e6:	9304      	str	r3, [sp, #16]
 80217e8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80217ec:	b113      	cbz	r3, 80217f4 <_vfiprintf_r+0x48c>
 80217ee:	9b04      	ldr	r3, [sp, #16]
 80217f0:	3301      	adds	r3, #1
 80217f2:	9304      	str	r3, [sp, #16]
 80217f4:	f01a 0302 	ands.w	r3, sl, #2
 80217f8:	9308      	str	r3, [sp, #32]
 80217fa:	bf1e      	ittt	ne
 80217fc:	9b04      	ldrne	r3, [sp, #16]
 80217fe:	3302      	addne	r3, #2
 8021800:	9304      	strne	r3, [sp, #16]
 8021802:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8021806:	9309      	str	r3, [sp, #36]	; 0x24
 8021808:	d11f      	bne.n	802184a <_vfiprintf_r+0x4e2>
 802180a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 802180e:	1a9c      	subs	r4, r3, r2
 8021810:	2c00      	cmp	r4, #0
 8021812:	dd1a      	ble.n	802184a <_vfiprintf_r+0x4e2>
 8021814:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8021818:	48b9      	ldr	r0, [pc, #740]	; (8021b00 <_vfiprintf_r+0x798>)
 802181a:	6030      	str	r0, [r6, #0]
 802181c:	2c10      	cmp	r4, #16
 802181e:	f103 0301 	add.w	r3, r3, #1
 8021822:	f106 0108 	add.w	r1, r6, #8
 8021826:	f300 814d 	bgt.w	8021ac4 <_vfiprintf_r+0x75c>
 802182a:	6074      	str	r4, [r6, #4]
 802182c:	2b07      	cmp	r3, #7
 802182e:	4414      	add	r4, r2
 8021830:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8021834:	f340 8158 	ble.w	8021ae8 <_vfiprintf_r+0x780>
 8021838:	aa0c      	add	r2, sp, #48	; 0x30
 802183a:	4639      	mov	r1, r7
 802183c:	4648      	mov	r0, r9
 802183e:	f7ff fd60 	bl	8021302 <__sprint_r>
 8021842:	2800      	cmp	r0, #0
 8021844:	f040 81b8 	bne.w	8021bb8 <_vfiprintf_r+0x850>
 8021848:	ae0f      	add	r6, sp, #60	; 0x3c
 802184a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 802184e:	b173      	cbz	r3, 802186e <_vfiprintf_r+0x506>
 8021850:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8021854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021856:	6032      	str	r2, [r6, #0]
 8021858:	2201      	movs	r2, #1
 802185a:	6072      	str	r2, [r6, #4]
 802185c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802185e:	3301      	adds	r3, #1
 8021860:	3201      	adds	r2, #1
 8021862:	2b07      	cmp	r3, #7
 8021864:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8021868:	f300 8140 	bgt.w	8021aec <_vfiprintf_r+0x784>
 802186c:	3608      	adds	r6, #8
 802186e:	9b08      	ldr	r3, [sp, #32]
 8021870:	b16b      	cbz	r3, 802188e <_vfiprintf_r+0x526>
 8021872:	aa0b      	add	r2, sp, #44	; 0x2c
 8021874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021876:	6032      	str	r2, [r6, #0]
 8021878:	2202      	movs	r2, #2
 802187a:	6072      	str	r2, [r6, #4]
 802187c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802187e:	3301      	adds	r3, #1
 8021880:	3202      	adds	r2, #2
 8021882:	2b07      	cmp	r3, #7
 8021884:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8021888:	f300 8140 	bgt.w	8021b0c <_vfiprintf_r+0x7a4>
 802188c:	3608      	adds	r6, #8
 802188e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021890:	2b80      	cmp	r3, #128	; 0x80
 8021892:	d11f      	bne.n	80218d4 <_vfiprintf_r+0x56c>
 8021894:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8021898:	1a9c      	subs	r4, r3, r2
 802189a:	2c00      	cmp	r4, #0
 802189c:	dd1a      	ble.n	80218d4 <_vfiprintf_r+0x56c>
 802189e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80218a2:	4898      	ldr	r0, [pc, #608]	; (8021b04 <_vfiprintf_r+0x79c>)
 80218a4:	6030      	str	r0, [r6, #0]
 80218a6:	2c10      	cmp	r4, #16
 80218a8:	f103 0301 	add.w	r3, r3, #1
 80218ac:	f106 0108 	add.w	r1, r6, #8
 80218b0:	f300 8135 	bgt.w	8021b1e <_vfiprintf_r+0x7b6>
 80218b4:	6074      	str	r4, [r6, #4]
 80218b6:	2b07      	cmp	r3, #7
 80218b8:	4414      	add	r4, r2
 80218ba:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80218be:	f340 8140 	ble.w	8021b42 <_vfiprintf_r+0x7da>
 80218c2:	aa0c      	add	r2, sp, #48	; 0x30
 80218c4:	4639      	mov	r1, r7
 80218c6:	4648      	mov	r0, r9
 80218c8:	f7ff fd1b 	bl	8021302 <__sprint_r>
 80218cc:	2800      	cmp	r0, #0
 80218ce:	f040 8173 	bne.w	8021bb8 <_vfiprintf_r+0x850>
 80218d2:	ae0f      	add	r6, sp, #60	; 0x3c
 80218d4:	9b00      	ldr	r3, [sp, #0]
 80218d6:	1aec      	subs	r4, r5, r3
 80218d8:	2c00      	cmp	r4, #0
 80218da:	dd1a      	ble.n	8021912 <_vfiprintf_r+0x5aa>
 80218dc:	4d89      	ldr	r5, [pc, #548]	; (8021b04 <_vfiprintf_r+0x79c>)
 80218de:	6035      	str	r5, [r6, #0]
 80218e0:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80218e4:	2c10      	cmp	r4, #16
 80218e6:	f103 0301 	add.w	r3, r3, #1
 80218ea:	f106 0208 	add.w	r2, r6, #8
 80218ee:	f300 812a 	bgt.w	8021b46 <_vfiprintf_r+0x7de>
 80218f2:	6074      	str	r4, [r6, #4]
 80218f4:	2b07      	cmp	r3, #7
 80218f6:	440c      	add	r4, r1
 80218f8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80218fc:	f340 8134 	ble.w	8021b68 <_vfiprintf_r+0x800>
 8021900:	aa0c      	add	r2, sp, #48	; 0x30
 8021902:	4639      	mov	r1, r7
 8021904:	4648      	mov	r0, r9
 8021906:	f7ff fcfc 	bl	8021302 <__sprint_r>
 802190a:	2800      	cmp	r0, #0
 802190c:	f040 8154 	bne.w	8021bb8 <_vfiprintf_r+0x850>
 8021910:	ae0f      	add	r6, sp, #60	; 0x3c
 8021912:	9b00      	ldr	r3, [sp, #0]
 8021914:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021916:	6073      	str	r3, [r6, #4]
 8021918:	4418      	add	r0, r3
 802191a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802191c:	f8c6 8000 	str.w	r8, [r6]
 8021920:	3301      	adds	r3, #1
 8021922:	2b07      	cmp	r3, #7
 8021924:	900e      	str	r0, [sp, #56]	; 0x38
 8021926:	930d      	str	r3, [sp, #52]	; 0x34
 8021928:	f300 8120 	bgt.w	8021b6c <_vfiprintf_r+0x804>
 802192c:	f106 0308 	add.w	r3, r6, #8
 8021930:	f01a 0f04 	tst.w	sl, #4
 8021934:	f040 8122 	bne.w	8021b7c <_vfiprintf_r+0x814>
 8021938:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802193c:	9904      	ldr	r1, [sp, #16]
 802193e:	428a      	cmp	r2, r1
 8021940:	bfac      	ite	ge
 8021942:	189b      	addge	r3, r3, r2
 8021944:	185b      	addlt	r3, r3, r1
 8021946:	9302      	str	r3, [sp, #8]
 8021948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802194a:	b13b      	cbz	r3, 802195c <_vfiprintf_r+0x5f4>
 802194c:	aa0c      	add	r2, sp, #48	; 0x30
 802194e:	4639      	mov	r1, r7
 8021950:	4648      	mov	r0, r9
 8021952:	f7ff fcd6 	bl	8021302 <__sprint_r>
 8021956:	2800      	cmp	r0, #0
 8021958:	f040 812e 	bne.w	8021bb8 <_vfiprintf_r+0x850>
 802195c:	2300      	movs	r3, #0
 802195e:	930d      	str	r3, [sp, #52]	; 0x34
 8021960:	465c      	mov	r4, fp
 8021962:	ae0f      	add	r6, sp, #60	; 0x3c
 8021964:	e564      	b.n	8021430 <_vfiprintf_r+0xc8>
 8021966:	4640      	mov	r0, r8
 8021968:	f7de fc5c 	bl	8000224 <strlen>
 802196c:	9000      	str	r0, [sp, #0]
 802196e:	e736      	b.n	80217de <_vfiprintf_r+0x476>
 8021970:	f04a 0a10 	orr.w	sl, sl, #16
 8021974:	f01a 0f20 	tst.w	sl, #32
 8021978:	d006      	beq.n	8021988 <_vfiprintf_r+0x620>
 802197a:	3407      	adds	r4, #7
 802197c:	f024 0b07 	bic.w	fp, r4, #7
 8021980:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8021984:	2301      	movs	r3, #1
 8021986:	e6dd      	b.n	8021744 <_vfiprintf_r+0x3dc>
 8021988:	f01a 0f10 	tst.w	sl, #16
 802198c:	f104 0b04 	add.w	fp, r4, #4
 8021990:	d001      	beq.n	8021996 <_vfiprintf_r+0x62e>
 8021992:	6824      	ldr	r4, [r4, #0]
 8021994:	e003      	b.n	802199e <_vfiprintf_r+0x636>
 8021996:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802199a:	d002      	beq.n	80219a2 <_vfiprintf_r+0x63a>
 802199c:	8824      	ldrh	r4, [r4, #0]
 802199e:	2500      	movs	r5, #0
 80219a0:	e7f0      	b.n	8021984 <_vfiprintf_r+0x61c>
 80219a2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80219a6:	d0f4      	beq.n	8021992 <_vfiprintf_r+0x62a>
 80219a8:	7824      	ldrb	r4, [r4, #0]
 80219aa:	e7f8      	b.n	802199e <_vfiprintf_r+0x636>
 80219ac:	4a56      	ldr	r2, [pc, #344]	; (8021b08 <_vfiprintf_r+0x7a0>)
 80219ae:	e5d5      	b.n	802155c <_vfiprintf_r+0x1f4>
 80219b0:	f01a 0f10 	tst.w	sl, #16
 80219b4:	f104 0b04 	add.w	fp, r4, #4
 80219b8:	d001      	beq.n	80219be <_vfiprintf_r+0x656>
 80219ba:	6824      	ldr	r4, [r4, #0]
 80219bc:	e003      	b.n	80219c6 <_vfiprintf_r+0x65e>
 80219be:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80219c2:	d002      	beq.n	80219ca <_vfiprintf_r+0x662>
 80219c4:	8824      	ldrh	r4, [r4, #0]
 80219c6:	2500      	movs	r5, #0
 80219c8:	e5d2      	b.n	8021570 <_vfiprintf_r+0x208>
 80219ca:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80219ce:	d0f4      	beq.n	80219ba <_vfiprintf_r+0x652>
 80219d0:	7824      	ldrb	r4, [r4, #0]
 80219d2:	e7f8      	b.n	80219c6 <_vfiprintf_r+0x65e>
 80219d4:	2d00      	cmp	r5, #0
 80219d6:	bf08      	it	eq
 80219d8:	2c0a      	cmpeq	r4, #10
 80219da:	d205      	bcs.n	80219e8 <_vfiprintf_r+0x680>
 80219dc:	3430      	adds	r4, #48	; 0x30
 80219de:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 80219e2:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 80219e6:	e13c      	b.n	8021c62 <_vfiprintf_r+0x8fa>
 80219e8:	ab38      	add	r3, sp, #224	; 0xe0
 80219ea:	9308      	str	r3, [sp, #32]
 80219ec:	9b04      	ldr	r3, [sp, #16]
 80219ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80219f2:	f04f 0a00 	mov.w	sl, #0
 80219f6:	9309      	str	r3, [sp, #36]	; 0x24
 80219f8:	9b08      	ldr	r3, [sp, #32]
 80219fa:	220a      	movs	r2, #10
 80219fc:	f103 38ff 	add.w	r8, r3, #4294967295
 8021a00:	4620      	mov	r0, r4
 8021a02:	2300      	movs	r3, #0
 8021a04:	4629      	mov	r1, r5
 8021a06:	f7df f94f 	bl	8000ca8 <__aeabi_uldivmod>
 8021a0a:	9b08      	ldr	r3, [sp, #32]
 8021a0c:	3230      	adds	r2, #48	; 0x30
 8021a0e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8021a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a14:	f10a 0a01 	add.w	sl, sl, #1
 8021a18:	b1db      	cbz	r3, 8021a52 <_vfiprintf_r+0x6ea>
 8021a1a:	9b06      	ldr	r3, [sp, #24]
 8021a1c:	781b      	ldrb	r3, [r3, #0]
 8021a1e:	4553      	cmp	r3, sl
 8021a20:	d117      	bne.n	8021a52 <_vfiprintf_r+0x6ea>
 8021a22:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021a26:	d014      	beq.n	8021a52 <_vfiprintf_r+0x6ea>
 8021a28:	2d00      	cmp	r5, #0
 8021a2a:	bf08      	it	eq
 8021a2c:	2c0a      	cmpeq	r4, #10
 8021a2e:	d310      	bcc.n	8021a52 <_vfiprintf_r+0x6ea>
 8021a30:	9b07      	ldr	r3, [sp, #28]
 8021a32:	eba8 0803 	sub.w	r8, r8, r3
 8021a36:	461a      	mov	r2, r3
 8021a38:	ee18 1a10 	vmov	r1, s16
 8021a3c:	4640      	mov	r0, r8
 8021a3e:	f7f9 faa4 	bl	801af8a <strncpy>
 8021a42:	9b06      	ldr	r3, [sp, #24]
 8021a44:	785b      	ldrb	r3, [r3, #1]
 8021a46:	b1a3      	cbz	r3, 8021a72 <_vfiprintf_r+0x70a>
 8021a48:	9b06      	ldr	r3, [sp, #24]
 8021a4a:	3301      	adds	r3, #1
 8021a4c:	9306      	str	r3, [sp, #24]
 8021a4e:	f04f 0a00 	mov.w	sl, #0
 8021a52:	220a      	movs	r2, #10
 8021a54:	2300      	movs	r3, #0
 8021a56:	4620      	mov	r0, r4
 8021a58:	4629      	mov	r1, r5
 8021a5a:	f7df f925 	bl	8000ca8 <__aeabi_uldivmod>
 8021a5e:	2d00      	cmp	r5, #0
 8021a60:	bf08      	it	eq
 8021a62:	2c0a      	cmpeq	r4, #10
 8021a64:	f0c0 80fd 	bcc.w	8021c62 <_vfiprintf_r+0x8fa>
 8021a68:	4604      	mov	r4, r0
 8021a6a:	460d      	mov	r5, r1
 8021a6c:	f8cd 8020 	str.w	r8, [sp, #32]
 8021a70:	e7c2      	b.n	80219f8 <_vfiprintf_r+0x690>
 8021a72:	469a      	mov	sl, r3
 8021a74:	e7ed      	b.n	8021a52 <_vfiprintf_r+0x6ea>
 8021a76:	9a05      	ldr	r2, [sp, #20]
 8021a78:	f004 030f 	and.w	r3, r4, #15
 8021a7c:	5cd3      	ldrb	r3, [r2, r3]
 8021a7e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8021a82:	0923      	lsrs	r3, r4, #4
 8021a84:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8021a88:	092a      	lsrs	r2, r5, #4
 8021a8a:	461c      	mov	r4, r3
 8021a8c:	4615      	mov	r5, r2
 8021a8e:	ea54 0305 	orrs.w	r3, r4, r5
 8021a92:	d1f0      	bne.n	8021a76 <_vfiprintf_r+0x70e>
 8021a94:	e0e5      	b.n	8021c62 <_vfiprintf_r+0x8fa>
 8021a96:	b933      	cbnz	r3, 8021aa6 <_vfiprintf_r+0x73e>
 8021a98:	f01a 0f01 	tst.w	sl, #1
 8021a9c:	d003      	beq.n	8021aa6 <_vfiprintf_r+0x73e>
 8021a9e:	2330      	movs	r3, #48	; 0x30
 8021aa0:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8021aa4:	e79d      	b.n	80219e2 <_vfiprintf_r+0x67a>
 8021aa6:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8021aaa:	e0da      	b.n	8021c62 <_vfiprintf_r+0x8fa>
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	f000 80a4 	beq.w	8021bfa <_vfiprintf_r+0x892>
 8021ab2:	2100      	movs	r1, #0
 8021ab4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8021ab8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8021abc:	46a3      	mov	fp, r4
 8021abe:	e5e7      	b.n	8021690 <_vfiprintf_r+0x328>
 8021ac0:	4605      	mov	r5, r0
 8021ac2:	e68c      	b.n	80217de <_vfiprintf_r+0x476>
 8021ac4:	2010      	movs	r0, #16
 8021ac6:	4402      	add	r2, r0
 8021ac8:	2b07      	cmp	r3, #7
 8021aca:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8021ace:	6070      	str	r0, [r6, #4]
 8021ad0:	dd07      	ble.n	8021ae2 <_vfiprintf_r+0x77a>
 8021ad2:	aa0c      	add	r2, sp, #48	; 0x30
 8021ad4:	4639      	mov	r1, r7
 8021ad6:	4648      	mov	r0, r9
 8021ad8:	f7ff fc13 	bl	8021302 <__sprint_r>
 8021adc:	2800      	cmp	r0, #0
 8021ade:	d16b      	bne.n	8021bb8 <_vfiprintf_r+0x850>
 8021ae0:	a90f      	add	r1, sp, #60	; 0x3c
 8021ae2:	3c10      	subs	r4, #16
 8021ae4:	460e      	mov	r6, r1
 8021ae6:	e695      	b.n	8021814 <_vfiprintf_r+0x4ac>
 8021ae8:	460e      	mov	r6, r1
 8021aea:	e6ae      	b.n	802184a <_vfiprintf_r+0x4e2>
 8021aec:	aa0c      	add	r2, sp, #48	; 0x30
 8021aee:	4639      	mov	r1, r7
 8021af0:	4648      	mov	r0, r9
 8021af2:	f7ff fc06 	bl	8021302 <__sprint_r>
 8021af6:	2800      	cmp	r0, #0
 8021af8:	d15e      	bne.n	8021bb8 <_vfiprintf_r+0x850>
 8021afa:	ae0f      	add	r6, sp, #60	; 0x3c
 8021afc:	e6b7      	b.n	802186e <_vfiprintf_r+0x506>
 8021afe:	bf00      	nop
 8021b00:	080291be 	.word	0x080291be
 8021b04:	080291ce 	.word	0x080291ce
 8021b08:	08028f31 	.word	0x08028f31
 8021b0c:	aa0c      	add	r2, sp, #48	; 0x30
 8021b0e:	4639      	mov	r1, r7
 8021b10:	4648      	mov	r0, r9
 8021b12:	f7ff fbf6 	bl	8021302 <__sprint_r>
 8021b16:	2800      	cmp	r0, #0
 8021b18:	d14e      	bne.n	8021bb8 <_vfiprintf_r+0x850>
 8021b1a:	ae0f      	add	r6, sp, #60	; 0x3c
 8021b1c:	e6b7      	b.n	802188e <_vfiprintf_r+0x526>
 8021b1e:	2010      	movs	r0, #16
 8021b20:	4402      	add	r2, r0
 8021b22:	2b07      	cmp	r3, #7
 8021b24:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8021b28:	6070      	str	r0, [r6, #4]
 8021b2a:	dd07      	ble.n	8021b3c <_vfiprintf_r+0x7d4>
 8021b2c:	aa0c      	add	r2, sp, #48	; 0x30
 8021b2e:	4639      	mov	r1, r7
 8021b30:	4648      	mov	r0, r9
 8021b32:	f7ff fbe6 	bl	8021302 <__sprint_r>
 8021b36:	2800      	cmp	r0, #0
 8021b38:	d13e      	bne.n	8021bb8 <_vfiprintf_r+0x850>
 8021b3a:	a90f      	add	r1, sp, #60	; 0x3c
 8021b3c:	3c10      	subs	r4, #16
 8021b3e:	460e      	mov	r6, r1
 8021b40:	e6ad      	b.n	802189e <_vfiprintf_r+0x536>
 8021b42:	460e      	mov	r6, r1
 8021b44:	e6c6      	b.n	80218d4 <_vfiprintf_r+0x56c>
 8021b46:	2010      	movs	r0, #16
 8021b48:	4401      	add	r1, r0
 8021b4a:	2b07      	cmp	r3, #7
 8021b4c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8021b50:	6070      	str	r0, [r6, #4]
 8021b52:	dd06      	ble.n	8021b62 <_vfiprintf_r+0x7fa>
 8021b54:	aa0c      	add	r2, sp, #48	; 0x30
 8021b56:	4639      	mov	r1, r7
 8021b58:	4648      	mov	r0, r9
 8021b5a:	f7ff fbd2 	bl	8021302 <__sprint_r>
 8021b5e:	bb58      	cbnz	r0, 8021bb8 <_vfiprintf_r+0x850>
 8021b60:	aa0f      	add	r2, sp, #60	; 0x3c
 8021b62:	3c10      	subs	r4, #16
 8021b64:	4616      	mov	r6, r2
 8021b66:	e6ba      	b.n	80218de <_vfiprintf_r+0x576>
 8021b68:	4616      	mov	r6, r2
 8021b6a:	e6d2      	b.n	8021912 <_vfiprintf_r+0x5aa>
 8021b6c:	aa0c      	add	r2, sp, #48	; 0x30
 8021b6e:	4639      	mov	r1, r7
 8021b70:	4648      	mov	r0, r9
 8021b72:	f7ff fbc6 	bl	8021302 <__sprint_r>
 8021b76:	b9f8      	cbnz	r0, 8021bb8 <_vfiprintf_r+0x850>
 8021b78:	ab0f      	add	r3, sp, #60	; 0x3c
 8021b7a:	e6d9      	b.n	8021930 <_vfiprintf_r+0x5c8>
 8021b7c:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8021b80:	1a54      	subs	r4, r2, r1
 8021b82:	2c00      	cmp	r4, #0
 8021b84:	f77f aed8 	ble.w	8021938 <_vfiprintf_r+0x5d0>
 8021b88:	4d3a      	ldr	r5, [pc, #232]	; (8021c74 <_vfiprintf_r+0x90c>)
 8021b8a:	2610      	movs	r6, #16
 8021b8c:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8021b90:	2c10      	cmp	r4, #16
 8021b92:	f102 0201 	add.w	r2, r2, #1
 8021b96:	601d      	str	r5, [r3, #0]
 8021b98:	dc1d      	bgt.n	8021bd6 <_vfiprintf_r+0x86e>
 8021b9a:	605c      	str	r4, [r3, #4]
 8021b9c:	2a07      	cmp	r2, #7
 8021b9e:	440c      	add	r4, r1
 8021ba0:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8021ba4:	f77f aec8 	ble.w	8021938 <_vfiprintf_r+0x5d0>
 8021ba8:	aa0c      	add	r2, sp, #48	; 0x30
 8021baa:	4639      	mov	r1, r7
 8021bac:	4648      	mov	r0, r9
 8021bae:	f7ff fba8 	bl	8021302 <__sprint_r>
 8021bb2:	2800      	cmp	r0, #0
 8021bb4:	f43f aec0 	beq.w	8021938 <_vfiprintf_r+0x5d0>
 8021bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021bba:	07d9      	lsls	r1, r3, #31
 8021bbc:	d405      	bmi.n	8021bca <_vfiprintf_r+0x862>
 8021bbe:	89bb      	ldrh	r3, [r7, #12]
 8021bc0:	059a      	lsls	r2, r3, #22
 8021bc2:	d402      	bmi.n	8021bca <_vfiprintf_r+0x862>
 8021bc4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021bc6:	f7fd fb5e 	bl	801f286 <__retarget_lock_release_recursive>
 8021bca:	89bb      	ldrh	r3, [r7, #12]
 8021bcc:	065b      	lsls	r3, r3, #25
 8021bce:	f57f abfe 	bpl.w	80213ce <_vfiprintf_r+0x66>
 8021bd2:	f7ff bbf9 	b.w	80213c8 <_vfiprintf_r+0x60>
 8021bd6:	3110      	adds	r1, #16
 8021bd8:	2a07      	cmp	r2, #7
 8021bda:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8021bde:	605e      	str	r6, [r3, #4]
 8021be0:	dc02      	bgt.n	8021be8 <_vfiprintf_r+0x880>
 8021be2:	3308      	adds	r3, #8
 8021be4:	3c10      	subs	r4, #16
 8021be6:	e7d1      	b.n	8021b8c <_vfiprintf_r+0x824>
 8021be8:	aa0c      	add	r2, sp, #48	; 0x30
 8021bea:	4639      	mov	r1, r7
 8021bec:	4648      	mov	r0, r9
 8021bee:	f7ff fb88 	bl	8021302 <__sprint_r>
 8021bf2:	2800      	cmp	r0, #0
 8021bf4:	d1e0      	bne.n	8021bb8 <_vfiprintf_r+0x850>
 8021bf6:	ab0f      	add	r3, sp, #60	; 0x3c
 8021bf8:	e7f4      	b.n	8021be4 <_vfiprintf_r+0x87c>
 8021bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021bfc:	b913      	cbnz	r3, 8021c04 <_vfiprintf_r+0x89c>
 8021bfe:	2300      	movs	r3, #0
 8021c00:	930d      	str	r3, [sp, #52]	; 0x34
 8021c02:	e7d9      	b.n	8021bb8 <_vfiprintf_r+0x850>
 8021c04:	aa0c      	add	r2, sp, #48	; 0x30
 8021c06:	4639      	mov	r1, r7
 8021c08:	4648      	mov	r0, r9
 8021c0a:	f7ff fb7a 	bl	8021302 <__sprint_r>
 8021c0e:	2800      	cmp	r0, #0
 8021c10:	d0f5      	beq.n	8021bfe <_vfiprintf_r+0x896>
 8021c12:	e7d1      	b.n	8021bb8 <_vfiprintf_r+0x850>
 8021c14:	ea54 0205 	orrs.w	r2, r4, r5
 8021c18:	f8cd a010 	str.w	sl, [sp, #16]
 8021c1c:	f43f ada4 	beq.w	8021768 <_vfiprintf_r+0x400>
 8021c20:	2b01      	cmp	r3, #1
 8021c22:	f43f aed7 	beq.w	80219d4 <_vfiprintf_r+0x66c>
 8021c26:	2b02      	cmp	r3, #2
 8021c28:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8021c2c:	f43f af23 	beq.w	8021a76 <_vfiprintf_r+0x70e>
 8021c30:	08e2      	lsrs	r2, r4, #3
 8021c32:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8021c36:	08e8      	lsrs	r0, r5, #3
 8021c38:	f004 0307 	and.w	r3, r4, #7
 8021c3c:	4605      	mov	r5, r0
 8021c3e:	4614      	mov	r4, r2
 8021c40:	3330      	adds	r3, #48	; 0x30
 8021c42:	ea54 0205 	orrs.w	r2, r4, r5
 8021c46:	4641      	mov	r1, r8
 8021c48:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8021c4c:	d1f0      	bne.n	8021c30 <_vfiprintf_r+0x8c8>
 8021c4e:	9a04      	ldr	r2, [sp, #16]
 8021c50:	07d0      	lsls	r0, r2, #31
 8021c52:	d506      	bpl.n	8021c62 <_vfiprintf_r+0x8fa>
 8021c54:	2b30      	cmp	r3, #48	; 0x30
 8021c56:	d004      	beq.n	8021c62 <_vfiprintf_r+0x8fa>
 8021c58:	2330      	movs	r3, #48	; 0x30
 8021c5a:	f808 3c01 	strb.w	r3, [r8, #-1]
 8021c5e:	f1a1 0802 	sub.w	r8, r1, #2
 8021c62:	ab38      	add	r3, sp, #224	; 0xe0
 8021c64:	eba3 0308 	sub.w	r3, r3, r8
 8021c68:	9d00      	ldr	r5, [sp, #0]
 8021c6a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8021c6e:	9300      	str	r3, [sp, #0]
 8021c70:	e5b5      	b.n	80217de <_vfiprintf_r+0x476>
 8021c72:	bf00      	nop
 8021c74:	080291be 	.word	0x080291be

08021c78 <__sbprintf>:
 8021c78:	b570      	push	{r4, r5, r6, lr}
 8021c7a:	460c      	mov	r4, r1
 8021c7c:	8989      	ldrh	r1, [r1, #12]
 8021c7e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8021c82:	f021 0102 	bic.w	r1, r1, #2
 8021c86:	f8ad 1014 	strh.w	r1, [sp, #20]
 8021c8a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8021c8c:	911b      	str	r1, [sp, #108]	; 0x6c
 8021c8e:	89e1      	ldrh	r1, [r4, #14]
 8021c90:	f8ad 1016 	strh.w	r1, [sp, #22]
 8021c94:	69e1      	ldr	r1, [r4, #28]
 8021c96:	9109      	str	r1, [sp, #36]	; 0x24
 8021c98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8021c9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8021c9c:	a91c      	add	r1, sp, #112	; 0x70
 8021c9e:	9102      	str	r1, [sp, #8]
 8021ca0:	9106      	str	r1, [sp, #24]
 8021ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021ca6:	4606      	mov	r6, r0
 8021ca8:	9104      	str	r1, [sp, #16]
 8021caa:	9107      	str	r1, [sp, #28]
 8021cac:	a818      	add	r0, sp, #96	; 0x60
 8021cae:	2100      	movs	r1, #0
 8021cb0:	e9cd 3200 	strd	r3, r2, [sp]
 8021cb4:	9108      	str	r1, [sp, #32]
 8021cb6:	f7fd fae1 	bl	801f27c <__retarget_lock_init_recursive>
 8021cba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021cbe:	a902      	add	r1, sp, #8
 8021cc0:	4630      	mov	r0, r6
 8021cc2:	f7ff fb51 	bl	8021368 <_vfiprintf_r>
 8021cc6:	1e05      	subs	r5, r0, #0
 8021cc8:	db07      	blt.n	8021cda <__sbprintf+0x62>
 8021cca:	a902      	add	r1, sp, #8
 8021ccc:	4630      	mov	r0, r6
 8021cce:	f7fc ffff 	bl	801ecd0 <_fflush_r>
 8021cd2:	2800      	cmp	r0, #0
 8021cd4:	bf18      	it	ne
 8021cd6:	f04f 35ff 	movne.w	r5, #4294967295
 8021cda:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8021cde:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021ce0:	065b      	lsls	r3, r3, #25
 8021ce2:	bf42      	ittt	mi
 8021ce4:	89a3      	ldrhmi	r3, [r4, #12]
 8021ce6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8021cea:	81a3      	strhmi	r3, [r4, #12]
 8021cec:	f7fd fac7 	bl	801f27e <__retarget_lock_close_recursive>
 8021cf0:	4628      	mov	r0, r5
 8021cf2:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8021cf6:	bd70      	pop	{r4, r5, r6, pc}

08021cf8 <_write_r>:
 8021cf8:	b538      	push	{r3, r4, r5, lr}
 8021cfa:	4d07      	ldr	r5, [pc, #28]	; (8021d18 <_write_r+0x20>)
 8021cfc:	4604      	mov	r4, r0
 8021cfe:	4608      	mov	r0, r1
 8021d00:	4611      	mov	r1, r2
 8021d02:	2200      	movs	r2, #0
 8021d04:	602a      	str	r2, [r5, #0]
 8021d06:	461a      	mov	r2, r3
 8021d08:	f7df f98b 	bl	8001022 <_write>
 8021d0c:	1c43      	adds	r3, r0, #1
 8021d0e:	d102      	bne.n	8021d16 <_write_r+0x1e>
 8021d10:	682b      	ldr	r3, [r5, #0]
 8021d12:	b103      	cbz	r3, 8021d16 <_write_r+0x1e>
 8021d14:	6023      	str	r3, [r4, #0]
 8021d16:	bd38      	pop	{r3, r4, r5, pc}
 8021d18:	2000be30 	.word	0x2000be30

08021d1c <__register_exitproc>:
 8021d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d20:	4d1c      	ldr	r5, [pc, #112]	; (8021d94 <__register_exitproc+0x78>)
 8021d22:	4606      	mov	r6, r0
 8021d24:	6828      	ldr	r0, [r5, #0]
 8021d26:	4698      	mov	r8, r3
 8021d28:	460f      	mov	r7, r1
 8021d2a:	4691      	mov	r9, r2
 8021d2c:	f7fd faa9 	bl	801f282 <__retarget_lock_acquire_recursive>
 8021d30:	4b19      	ldr	r3, [pc, #100]	; (8021d98 <__register_exitproc+0x7c>)
 8021d32:	681b      	ldr	r3, [r3, #0]
 8021d34:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8021d38:	4628      	mov	r0, r5
 8021d3a:	b91c      	cbnz	r4, 8021d44 <__register_exitproc+0x28>
 8021d3c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8021d40:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8021d44:	6865      	ldr	r5, [r4, #4]
 8021d46:	6800      	ldr	r0, [r0, #0]
 8021d48:	2d1f      	cmp	r5, #31
 8021d4a:	dd05      	ble.n	8021d58 <__register_exitproc+0x3c>
 8021d4c:	f7fd fa9b 	bl	801f286 <__retarget_lock_release_recursive>
 8021d50:	f04f 30ff 	mov.w	r0, #4294967295
 8021d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d58:	b19e      	cbz	r6, 8021d82 <__register_exitproc+0x66>
 8021d5a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8021d5e:	2201      	movs	r2, #1
 8021d60:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8021d64:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8021d68:	40aa      	lsls	r2, r5
 8021d6a:	4313      	orrs	r3, r2
 8021d6c:	2e02      	cmp	r6, #2
 8021d6e:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8021d72:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8021d76:	bf02      	ittt	eq
 8021d78:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8021d7c:	431a      	orreq	r2, r3
 8021d7e:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8021d82:	1c6b      	adds	r3, r5, #1
 8021d84:	3502      	adds	r5, #2
 8021d86:	6063      	str	r3, [r4, #4]
 8021d88:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8021d8c:	f7fd fa7b 	bl	801f286 <__retarget_lock_release_recursive>
 8021d90:	2000      	movs	r0, #0
 8021d92:	e7df      	b.n	8021d54 <__register_exitproc+0x38>
 8021d94:	20000470 	.word	0x20000470
 8021d98:	08028e4c 	.word	0x08028e4c

08021d9c <__assert_func>:
 8021d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021d9e:	4614      	mov	r4, r2
 8021da0:	461a      	mov	r2, r3
 8021da2:	4b09      	ldr	r3, [pc, #36]	; (8021dc8 <__assert_func+0x2c>)
 8021da4:	681b      	ldr	r3, [r3, #0]
 8021da6:	4605      	mov	r5, r0
 8021da8:	68d8      	ldr	r0, [r3, #12]
 8021daa:	b14c      	cbz	r4, 8021dc0 <__assert_func+0x24>
 8021dac:	4b07      	ldr	r3, [pc, #28]	; (8021dcc <__assert_func+0x30>)
 8021dae:	9100      	str	r1, [sp, #0]
 8021db0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021db4:	4906      	ldr	r1, [pc, #24]	; (8021dd0 <__assert_func+0x34>)
 8021db6:	462b      	mov	r3, r5
 8021db8:	f000 f8b0 	bl	8021f1c <fiprintf>
 8021dbc:	f000 fe85 	bl	8022aca <abort>
 8021dc0:	4b04      	ldr	r3, [pc, #16]	; (8021dd4 <__assert_func+0x38>)
 8021dc2:	461c      	mov	r4, r3
 8021dc4:	e7f3      	b.n	8021dae <__assert_func+0x12>
 8021dc6:	bf00      	nop
 8021dc8:	20000038 	.word	0x20000038
 8021dcc:	080291de 	.word	0x080291de
 8021dd0:	080291eb 	.word	0x080291eb
 8021dd4:	08029219 	.word	0x08029219

08021dd8 <_calloc_r>:
 8021dd8:	b510      	push	{r4, lr}
 8021dda:	4351      	muls	r1, r2
 8021ddc:	f7fd fad0 	bl	801f380 <_malloc_r>
 8021de0:	4604      	mov	r4, r0
 8021de2:	b198      	cbz	r0, 8021e0c <_calloc_r+0x34>
 8021de4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8021de8:	f022 0203 	bic.w	r2, r2, #3
 8021dec:	3a04      	subs	r2, #4
 8021dee:	2a24      	cmp	r2, #36	; 0x24
 8021df0:	d81b      	bhi.n	8021e2a <_calloc_r+0x52>
 8021df2:	2a13      	cmp	r2, #19
 8021df4:	d917      	bls.n	8021e26 <_calloc_r+0x4e>
 8021df6:	2100      	movs	r1, #0
 8021df8:	2a1b      	cmp	r2, #27
 8021dfa:	e9c0 1100 	strd	r1, r1, [r0]
 8021dfe:	d807      	bhi.n	8021e10 <_calloc_r+0x38>
 8021e00:	f100 0308 	add.w	r3, r0, #8
 8021e04:	2200      	movs	r2, #0
 8021e06:	e9c3 2200 	strd	r2, r2, [r3]
 8021e0a:	609a      	str	r2, [r3, #8]
 8021e0c:	4620      	mov	r0, r4
 8021e0e:	bd10      	pop	{r4, pc}
 8021e10:	2a24      	cmp	r2, #36	; 0x24
 8021e12:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8021e16:	bf11      	iteee	ne
 8021e18:	f100 0310 	addne.w	r3, r0, #16
 8021e1c:	6101      	streq	r1, [r0, #16]
 8021e1e:	f100 0318 	addeq.w	r3, r0, #24
 8021e22:	6141      	streq	r1, [r0, #20]
 8021e24:	e7ee      	b.n	8021e04 <_calloc_r+0x2c>
 8021e26:	4603      	mov	r3, r0
 8021e28:	e7ec      	b.n	8021e04 <_calloc_r+0x2c>
 8021e2a:	2100      	movs	r1, #0
 8021e2c:	f7f8 fd84 	bl	801a938 <memset>
 8021e30:	e7ec      	b.n	8021e0c <_calloc_r+0x34>
	...

08021e34 <_close_r>:
 8021e34:	b538      	push	{r3, r4, r5, lr}
 8021e36:	4d06      	ldr	r5, [pc, #24]	; (8021e50 <_close_r+0x1c>)
 8021e38:	2300      	movs	r3, #0
 8021e3a:	4604      	mov	r4, r0
 8021e3c:	4608      	mov	r0, r1
 8021e3e:	602b      	str	r3, [r5, #0]
 8021e40:	f7e1 fec5 	bl	8003bce <_close>
 8021e44:	1c43      	adds	r3, r0, #1
 8021e46:	d102      	bne.n	8021e4e <_close_r+0x1a>
 8021e48:	682b      	ldr	r3, [r5, #0]
 8021e4a:	b103      	cbz	r3, 8021e4e <_close_r+0x1a>
 8021e4c:	6023      	str	r3, [r4, #0]
 8021e4e:	bd38      	pop	{r3, r4, r5, pc}
 8021e50:	2000be30 	.word	0x2000be30

08021e54 <__env_lock>:
 8021e54:	4801      	ldr	r0, [pc, #4]	; (8021e5c <__env_lock+0x8>)
 8021e56:	f7fd ba14 	b.w	801f282 <__retarget_lock_acquire_recursive>
 8021e5a:	bf00      	nop
 8021e5c:	2000be3a 	.word	0x2000be3a

08021e60 <__env_unlock>:
 8021e60:	4801      	ldr	r0, [pc, #4]	; (8021e68 <__env_unlock+0x8>)
 8021e62:	f7fd ba10 	b.w	801f286 <__retarget_lock_release_recursive>
 8021e66:	bf00      	nop
 8021e68:	2000be3a 	.word	0x2000be3a

08021e6c <_fclose_r>:
 8021e6c:	b570      	push	{r4, r5, r6, lr}
 8021e6e:	4606      	mov	r6, r0
 8021e70:	460c      	mov	r4, r1
 8021e72:	b911      	cbnz	r1, 8021e7a <_fclose_r+0xe>
 8021e74:	2500      	movs	r5, #0
 8021e76:	4628      	mov	r0, r5
 8021e78:	bd70      	pop	{r4, r5, r6, pc}
 8021e7a:	b118      	cbz	r0, 8021e84 <_fclose_r+0x18>
 8021e7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8021e7e:	b90b      	cbnz	r3, 8021e84 <_fclose_r+0x18>
 8021e80:	f7fc ff92 	bl	801eda8 <__sinit>
 8021e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021e86:	07d8      	lsls	r0, r3, #31
 8021e88:	d405      	bmi.n	8021e96 <_fclose_r+0x2a>
 8021e8a:	89a3      	ldrh	r3, [r4, #12]
 8021e8c:	0599      	lsls	r1, r3, #22
 8021e8e:	d402      	bmi.n	8021e96 <_fclose_r+0x2a>
 8021e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021e92:	f7fd f9f6 	bl	801f282 <__retarget_lock_acquire_recursive>
 8021e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021e9a:	b93b      	cbnz	r3, 8021eac <_fclose_r+0x40>
 8021e9c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8021e9e:	f015 0501 	ands.w	r5, r5, #1
 8021ea2:	d1e7      	bne.n	8021e74 <_fclose_r+0x8>
 8021ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021ea6:	f7fd f9ee 	bl	801f286 <__retarget_lock_release_recursive>
 8021eaa:	e7e4      	b.n	8021e76 <_fclose_r+0xa>
 8021eac:	4621      	mov	r1, r4
 8021eae:	4630      	mov	r0, r6
 8021eb0:	f7fc fe80 	bl	801ebb4 <__sflush_r>
 8021eb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8021eb6:	4605      	mov	r5, r0
 8021eb8:	b133      	cbz	r3, 8021ec8 <_fclose_r+0x5c>
 8021eba:	69e1      	ldr	r1, [r4, #28]
 8021ebc:	4630      	mov	r0, r6
 8021ebe:	4798      	blx	r3
 8021ec0:	2800      	cmp	r0, #0
 8021ec2:	bfb8      	it	lt
 8021ec4:	f04f 35ff 	movlt.w	r5, #4294967295
 8021ec8:	89a3      	ldrh	r3, [r4, #12]
 8021eca:	061a      	lsls	r2, r3, #24
 8021ecc:	d503      	bpl.n	8021ed6 <_fclose_r+0x6a>
 8021ece:	6921      	ldr	r1, [r4, #16]
 8021ed0:	4630      	mov	r0, r6
 8021ed2:	f7fc fff9 	bl	801eec8 <_free_r>
 8021ed6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8021ed8:	b141      	cbz	r1, 8021eec <_fclose_r+0x80>
 8021eda:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8021ede:	4299      	cmp	r1, r3
 8021ee0:	d002      	beq.n	8021ee8 <_fclose_r+0x7c>
 8021ee2:	4630      	mov	r0, r6
 8021ee4:	f7fc fff0 	bl	801eec8 <_free_r>
 8021ee8:	2300      	movs	r3, #0
 8021eea:	6323      	str	r3, [r4, #48]	; 0x30
 8021eec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8021eee:	b121      	cbz	r1, 8021efa <_fclose_r+0x8e>
 8021ef0:	4630      	mov	r0, r6
 8021ef2:	f7fc ffe9 	bl	801eec8 <_free_r>
 8021ef6:	2300      	movs	r3, #0
 8021ef8:	6463      	str	r3, [r4, #68]	; 0x44
 8021efa:	f7fc ff3d 	bl	801ed78 <__sfp_lock_acquire>
 8021efe:	2300      	movs	r3, #0
 8021f00:	81a3      	strh	r3, [r4, #12]
 8021f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021f04:	07db      	lsls	r3, r3, #31
 8021f06:	d402      	bmi.n	8021f0e <_fclose_r+0xa2>
 8021f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021f0a:	f7fd f9bc 	bl	801f286 <__retarget_lock_release_recursive>
 8021f0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021f10:	f7fd f9b5 	bl	801f27e <__retarget_lock_close_recursive>
 8021f14:	f7fc ff36 	bl	801ed84 <__sfp_lock_release>
 8021f18:	e7ad      	b.n	8021e76 <_fclose_r+0xa>
	...

08021f1c <fiprintf>:
 8021f1c:	b40e      	push	{r1, r2, r3}
 8021f1e:	b503      	push	{r0, r1, lr}
 8021f20:	4601      	mov	r1, r0
 8021f22:	ab03      	add	r3, sp, #12
 8021f24:	4805      	ldr	r0, [pc, #20]	; (8021f3c <fiprintf+0x20>)
 8021f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8021f2a:	6800      	ldr	r0, [r0, #0]
 8021f2c:	9301      	str	r3, [sp, #4]
 8021f2e:	f7ff fa1b 	bl	8021368 <_vfiprintf_r>
 8021f32:	b002      	add	sp, #8
 8021f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8021f38:	b003      	add	sp, #12
 8021f3a:	4770      	bx	lr
 8021f3c:	20000038 	.word	0x20000038

08021f40 <__fputwc>:
 8021f40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021f44:	4680      	mov	r8, r0
 8021f46:	460e      	mov	r6, r1
 8021f48:	4615      	mov	r5, r2
 8021f4a:	f000 f9df 	bl	802230c <__locale_mb_cur_max>
 8021f4e:	2801      	cmp	r0, #1
 8021f50:	d11c      	bne.n	8021f8c <__fputwc+0x4c>
 8021f52:	1e73      	subs	r3, r6, #1
 8021f54:	2bfe      	cmp	r3, #254	; 0xfe
 8021f56:	d819      	bhi.n	8021f8c <__fputwc+0x4c>
 8021f58:	f88d 6004 	strb.w	r6, [sp, #4]
 8021f5c:	4604      	mov	r4, r0
 8021f5e:	2700      	movs	r7, #0
 8021f60:	f10d 0904 	add.w	r9, sp, #4
 8021f64:	42a7      	cmp	r7, r4
 8021f66:	d020      	beq.n	8021faa <__fputwc+0x6a>
 8021f68:	68ab      	ldr	r3, [r5, #8]
 8021f6a:	f817 1009 	ldrb.w	r1, [r7, r9]
 8021f6e:	3b01      	subs	r3, #1
 8021f70:	2b00      	cmp	r3, #0
 8021f72:	60ab      	str	r3, [r5, #8]
 8021f74:	da04      	bge.n	8021f80 <__fputwc+0x40>
 8021f76:	69aa      	ldr	r2, [r5, #24]
 8021f78:	4293      	cmp	r3, r2
 8021f7a:	db1a      	blt.n	8021fb2 <__fputwc+0x72>
 8021f7c:	290a      	cmp	r1, #10
 8021f7e:	d018      	beq.n	8021fb2 <__fputwc+0x72>
 8021f80:	682b      	ldr	r3, [r5, #0]
 8021f82:	1c5a      	adds	r2, r3, #1
 8021f84:	602a      	str	r2, [r5, #0]
 8021f86:	7019      	strb	r1, [r3, #0]
 8021f88:	3701      	adds	r7, #1
 8021f8a:	e7eb      	b.n	8021f64 <__fputwc+0x24>
 8021f8c:	4632      	mov	r2, r6
 8021f8e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8021f92:	a901      	add	r1, sp, #4
 8021f94:	4640      	mov	r0, r8
 8021f96:	f000 fd75 	bl	8022a84 <_wcrtomb_r>
 8021f9a:	1c42      	adds	r2, r0, #1
 8021f9c:	4604      	mov	r4, r0
 8021f9e:	d1de      	bne.n	8021f5e <__fputwc+0x1e>
 8021fa0:	89ab      	ldrh	r3, [r5, #12]
 8021fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021fa6:	81ab      	strh	r3, [r5, #12]
 8021fa8:	4606      	mov	r6, r0
 8021faa:	4630      	mov	r0, r6
 8021fac:	b003      	add	sp, #12
 8021fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021fb2:	462a      	mov	r2, r5
 8021fb4:	4640      	mov	r0, r8
 8021fb6:	f000 fd1b 	bl	80229f0 <__swbuf_r>
 8021fba:	1c43      	adds	r3, r0, #1
 8021fbc:	d1e4      	bne.n	8021f88 <__fputwc+0x48>
 8021fbe:	4606      	mov	r6, r0
 8021fc0:	e7f3      	b.n	8021faa <__fputwc+0x6a>

08021fc2 <_fputwc_r>:
 8021fc2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8021fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021fc6:	4614      	mov	r4, r2
 8021fc8:	07da      	lsls	r2, r3, #31
 8021fca:	4605      	mov	r5, r0
 8021fcc:	d407      	bmi.n	8021fde <_fputwc_r+0x1c>
 8021fce:	89a3      	ldrh	r3, [r4, #12]
 8021fd0:	059b      	lsls	r3, r3, #22
 8021fd2:	d404      	bmi.n	8021fde <_fputwc_r+0x1c>
 8021fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021fd6:	9101      	str	r1, [sp, #4]
 8021fd8:	f7fd f953 	bl	801f282 <__retarget_lock_acquire_recursive>
 8021fdc:	9901      	ldr	r1, [sp, #4]
 8021fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021fe2:	0498      	lsls	r0, r3, #18
 8021fe4:	d406      	bmi.n	8021ff4 <_fputwc_r+0x32>
 8021fe6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021fea:	81a3      	strh	r3, [r4, #12]
 8021fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021fee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021ff2:	6663      	str	r3, [r4, #100]	; 0x64
 8021ff4:	4622      	mov	r2, r4
 8021ff6:	4628      	mov	r0, r5
 8021ff8:	f7ff ffa2 	bl	8021f40 <__fputwc>
 8021ffc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021ffe:	07da      	lsls	r2, r3, #31
 8022000:	4605      	mov	r5, r0
 8022002:	d405      	bmi.n	8022010 <_fputwc_r+0x4e>
 8022004:	89a3      	ldrh	r3, [r4, #12]
 8022006:	059b      	lsls	r3, r3, #22
 8022008:	d402      	bmi.n	8022010 <_fputwc_r+0x4e>
 802200a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802200c:	f7fd f93b 	bl	801f286 <__retarget_lock_release_recursive>
 8022010:	4628      	mov	r0, r5
 8022012:	b003      	add	sp, #12
 8022014:	bd30      	pop	{r4, r5, pc}
	...

08022018 <_fstat_r>:
 8022018:	b538      	push	{r3, r4, r5, lr}
 802201a:	4d07      	ldr	r5, [pc, #28]	; (8022038 <_fstat_r+0x20>)
 802201c:	2300      	movs	r3, #0
 802201e:	4604      	mov	r4, r0
 8022020:	4608      	mov	r0, r1
 8022022:	4611      	mov	r1, r2
 8022024:	602b      	str	r3, [r5, #0]
 8022026:	f7e1 fdde 	bl	8003be6 <_fstat>
 802202a:	1c43      	adds	r3, r0, #1
 802202c:	d102      	bne.n	8022034 <_fstat_r+0x1c>
 802202e:	682b      	ldr	r3, [r5, #0]
 8022030:	b103      	cbz	r3, 8022034 <_fstat_r+0x1c>
 8022032:	6023      	str	r3, [r4, #0]
 8022034:	bd38      	pop	{r3, r4, r5, pc}
 8022036:	bf00      	nop
 8022038:	2000be30 	.word	0x2000be30

0802203c <__sfvwrite_r>:
 802203c:	6893      	ldr	r3, [r2, #8]
 802203e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022042:	4606      	mov	r6, r0
 8022044:	460c      	mov	r4, r1
 8022046:	4690      	mov	r8, r2
 8022048:	b91b      	cbnz	r3, 8022052 <__sfvwrite_r+0x16>
 802204a:	2000      	movs	r0, #0
 802204c:	b003      	add	sp, #12
 802204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022052:	898b      	ldrh	r3, [r1, #12]
 8022054:	0718      	lsls	r0, r3, #28
 8022056:	d550      	bpl.n	80220fa <__sfvwrite_r+0xbe>
 8022058:	690b      	ldr	r3, [r1, #16]
 802205a:	2b00      	cmp	r3, #0
 802205c:	d04d      	beq.n	80220fa <__sfvwrite_r+0xbe>
 802205e:	89a3      	ldrh	r3, [r4, #12]
 8022060:	f8d8 7000 	ldr.w	r7, [r8]
 8022064:	f013 0902 	ands.w	r9, r3, #2
 8022068:	d16c      	bne.n	8022144 <__sfvwrite_r+0x108>
 802206a:	f013 0301 	ands.w	r3, r3, #1
 802206e:	f000 809c 	beq.w	80221aa <__sfvwrite_r+0x16e>
 8022072:	4648      	mov	r0, r9
 8022074:	46ca      	mov	sl, r9
 8022076:	46cb      	mov	fp, r9
 8022078:	f1bb 0f00 	cmp.w	fp, #0
 802207c:	f000 8103 	beq.w	8022286 <__sfvwrite_r+0x24a>
 8022080:	b950      	cbnz	r0, 8022098 <__sfvwrite_r+0x5c>
 8022082:	465a      	mov	r2, fp
 8022084:	210a      	movs	r1, #10
 8022086:	4650      	mov	r0, sl
 8022088:	f7de f8da 	bl	8000240 <memchr>
 802208c:	2800      	cmp	r0, #0
 802208e:	f000 80ff 	beq.w	8022290 <__sfvwrite_r+0x254>
 8022092:	3001      	adds	r0, #1
 8022094:	eba0 090a 	sub.w	r9, r0, sl
 8022098:	6820      	ldr	r0, [r4, #0]
 802209a:	6921      	ldr	r1, [r4, #16]
 802209c:	6963      	ldr	r3, [r4, #20]
 802209e:	45d9      	cmp	r9, fp
 80220a0:	464a      	mov	r2, r9
 80220a2:	bf28      	it	cs
 80220a4:	465a      	movcs	r2, fp
 80220a6:	4288      	cmp	r0, r1
 80220a8:	f240 80f5 	bls.w	8022296 <__sfvwrite_r+0x25a>
 80220ac:	68a5      	ldr	r5, [r4, #8]
 80220ae:	441d      	add	r5, r3
 80220b0:	42aa      	cmp	r2, r5
 80220b2:	f340 80f0 	ble.w	8022296 <__sfvwrite_r+0x25a>
 80220b6:	4651      	mov	r1, sl
 80220b8:	462a      	mov	r2, r5
 80220ba:	f7f8 fc23 	bl	801a904 <memmove>
 80220be:	6823      	ldr	r3, [r4, #0]
 80220c0:	442b      	add	r3, r5
 80220c2:	6023      	str	r3, [r4, #0]
 80220c4:	4621      	mov	r1, r4
 80220c6:	4630      	mov	r0, r6
 80220c8:	f7fc fe02 	bl	801ecd0 <_fflush_r>
 80220cc:	2800      	cmp	r0, #0
 80220ce:	d167      	bne.n	80221a0 <__sfvwrite_r+0x164>
 80220d0:	ebb9 0905 	subs.w	r9, r9, r5
 80220d4:	f040 80f7 	bne.w	80222c6 <__sfvwrite_r+0x28a>
 80220d8:	4621      	mov	r1, r4
 80220da:	4630      	mov	r0, r6
 80220dc:	f7fc fdf8 	bl	801ecd0 <_fflush_r>
 80220e0:	2800      	cmp	r0, #0
 80220e2:	d15d      	bne.n	80221a0 <__sfvwrite_r+0x164>
 80220e4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80220e8:	44aa      	add	sl, r5
 80220ea:	ebab 0b05 	sub.w	fp, fp, r5
 80220ee:	1b55      	subs	r5, r2, r5
 80220f0:	f8c8 5008 	str.w	r5, [r8, #8]
 80220f4:	2d00      	cmp	r5, #0
 80220f6:	d1bf      	bne.n	8022078 <__sfvwrite_r+0x3c>
 80220f8:	e7a7      	b.n	802204a <__sfvwrite_r+0xe>
 80220fa:	4621      	mov	r1, r4
 80220fc:	4630      	mov	r0, r6
 80220fe:	f7fb fe75 	bl	801ddec <__swsetup_r>
 8022102:	2800      	cmp	r0, #0
 8022104:	d0ab      	beq.n	802205e <__sfvwrite_r+0x22>
 8022106:	f04f 30ff 	mov.w	r0, #4294967295
 802210a:	e79f      	b.n	802204c <__sfvwrite_r+0x10>
 802210c:	e9d7 b900 	ldrd	fp, r9, [r7]
 8022110:	3708      	adds	r7, #8
 8022112:	f1b9 0f00 	cmp.w	r9, #0
 8022116:	d0f9      	beq.n	802210c <__sfvwrite_r+0xd0>
 8022118:	45d1      	cmp	r9, sl
 802211a:	464b      	mov	r3, r9
 802211c:	69e1      	ldr	r1, [r4, #28]
 802211e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022120:	bf28      	it	cs
 8022122:	4653      	movcs	r3, sl
 8022124:	465a      	mov	r2, fp
 8022126:	4630      	mov	r0, r6
 8022128:	47a8      	blx	r5
 802212a:	2800      	cmp	r0, #0
 802212c:	dd38      	ble.n	80221a0 <__sfvwrite_r+0x164>
 802212e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022132:	4483      	add	fp, r0
 8022134:	eba9 0900 	sub.w	r9, r9, r0
 8022138:	1a18      	subs	r0, r3, r0
 802213a:	f8c8 0008 	str.w	r0, [r8, #8]
 802213e:	2800      	cmp	r0, #0
 8022140:	d1e7      	bne.n	8022112 <__sfvwrite_r+0xd6>
 8022142:	e782      	b.n	802204a <__sfvwrite_r+0xe>
 8022144:	f04f 0b00 	mov.w	fp, #0
 8022148:	f8df a180 	ldr.w	sl, [pc, #384]	; 80222cc <__sfvwrite_r+0x290>
 802214c:	46d9      	mov	r9, fp
 802214e:	e7e0      	b.n	8022112 <__sfvwrite_r+0xd6>
 8022150:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8022154:	3708      	adds	r7, #8
 8022156:	f1ba 0f00 	cmp.w	sl, #0
 802215a:	d0f9      	beq.n	8022150 <__sfvwrite_r+0x114>
 802215c:	89a3      	ldrh	r3, [r4, #12]
 802215e:	68a2      	ldr	r2, [r4, #8]
 8022160:	6820      	ldr	r0, [r4, #0]
 8022162:	0599      	lsls	r1, r3, #22
 8022164:	d563      	bpl.n	802222e <__sfvwrite_r+0x1f2>
 8022166:	4552      	cmp	r2, sl
 8022168:	d836      	bhi.n	80221d8 <__sfvwrite_r+0x19c>
 802216a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 802216e:	d033      	beq.n	80221d8 <__sfvwrite_r+0x19c>
 8022170:	6921      	ldr	r1, [r4, #16]
 8022172:	6965      	ldr	r5, [r4, #20]
 8022174:	eba0 0b01 	sub.w	fp, r0, r1
 8022178:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802217c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022180:	f10b 0201 	add.w	r2, fp, #1
 8022184:	106d      	asrs	r5, r5, #1
 8022186:	4452      	add	r2, sl
 8022188:	4295      	cmp	r5, r2
 802218a:	bf38      	it	cc
 802218c:	4615      	movcc	r5, r2
 802218e:	055b      	lsls	r3, r3, #21
 8022190:	d53d      	bpl.n	802220e <__sfvwrite_r+0x1d2>
 8022192:	4629      	mov	r1, r5
 8022194:	4630      	mov	r0, r6
 8022196:	f7fd f8f3 	bl	801f380 <_malloc_r>
 802219a:	b948      	cbnz	r0, 80221b0 <__sfvwrite_r+0x174>
 802219c:	230c      	movs	r3, #12
 802219e:	6033      	str	r3, [r6, #0]
 80221a0:	89a3      	ldrh	r3, [r4, #12]
 80221a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80221a6:	81a3      	strh	r3, [r4, #12]
 80221a8:	e7ad      	b.n	8022106 <__sfvwrite_r+0xca>
 80221aa:	4699      	mov	r9, r3
 80221ac:	469a      	mov	sl, r3
 80221ae:	e7d2      	b.n	8022156 <__sfvwrite_r+0x11a>
 80221b0:	465a      	mov	r2, fp
 80221b2:	6921      	ldr	r1, [r4, #16]
 80221b4:	9001      	str	r0, [sp, #4]
 80221b6:	f7f8 fb97 	bl	801a8e8 <memcpy>
 80221ba:	89a2      	ldrh	r2, [r4, #12]
 80221bc:	9b01      	ldr	r3, [sp, #4]
 80221be:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80221c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80221c6:	81a2      	strh	r2, [r4, #12]
 80221c8:	6123      	str	r3, [r4, #16]
 80221ca:	6165      	str	r5, [r4, #20]
 80221cc:	445b      	add	r3, fp
 80221ce:	eba5 050b 	sub.w	r5, r5, fp
 80221d2:	6023      	str	r3, [r4, #0]
 80221d4:	4652      	mov	r2, sl
 80221d6:	60a5      	str	r5, [r4, #8]
 80221d8:	4552      	cmp	r2, sl
 80221da:	bf28      	it	cs
 80221dc:	4652      	movcs	r2, sl
 80221de:	6820      	ldr	r0, [r4, #0]
 80221e0:	9201      	str	r2, [sp, #4]
 80221e2:	4649      	mov	r1, r9
 80221e4:	f7f8 fb8e 	bl	801a904 <memmove>
 80221e8:	68a3      	ldr	r3, [r4, #8]
 80221ea:	9a01      	ldr	r2, [sp, #4]
 80221ec:	1a9b      	subs	r3, r3, r2
 80221ee:	60a3      	str	r3, [r4, #8]
 80221f0:	6823      	ldr	r3, [r4, #0]
 80221f2:	441a      	add	r2, r3
 80221f4:	4655      	mov	r5, sl
 80221f6:	6022      	str	r2, [r4, #0]
 80221f8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80221fc:	44a9      	add	r9, r5
 80221fe:	ebaa 0a05 	sub.w	sl, sl, r5
 8022202:	1b45      	subs	r5, r0, r5
 8022204:	f8c8 5008 	str.w	r5, [r8, #8]
 8022208:	2d00      	cmp	r5, #0
 802220a:	d1a4      	bne.n	8022156 <__sfvwrite_r+0x11a>
 802220c:	e71d      	b.n	802204a <__sfvwrite_r+0xe>
 802220e:	462a      	mov	r2, r5
 8022210:	4630      	mov	r0, r6
 8022212:	f000 f8d9 	bl	80223c8 <_realloc_r>
 8022216:	4603      	mov	r3, r0
 8022218:	2800      	cmp	r0, #0
 802221a:	d1d5      	bne.n	80221c8 <__sfvwrite_r+0x18c>
 802221c:	6921      	ldr	r1, [r4, #16]
 802221e:	4630      	mov	r0, r6
 8022220:	f7fc fe52 	bl	801eec8 <_free_r>
 8022224:	89a3      	ldrh	r3, [r4, #12]
 8022226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802222a:	81a3      	strh	r3, [r4, #12]
 802222c:	e7b6      	b.n	802219c <__sfvwrite_r+0x160>
 802222e:	6923      	ldr	r3, [r4, #16]
 8022230:	4283      	cmp	r3, r0
 8022232:	d302      	bcc.n	802223a <__sfvwrite_r+0x1fe>
 8022234:	6961      	ldr	r1, [r4, #20]
 8022236:	4551      	cmp	r1, sl
 8022238:	d915      	bls.n	8022266 <__sfvwrite_r+0x22a>
 802223a:	4552      	cmp	r2, sl
 802223c:	bf28      	it	cs
 802223e:	4652      	movcs	r2, sl
 8022240:	4649      	mov	r1, r9
 8022242:	4615      	mov	r5, r2
 8022244:	f7f8 fb5e 	bl	801a904 <memmove>
 8022248:	68a3      	ldr	r3, [r4, #8]
 802224a:	6822      	ldr	r2, [r4, #0]
 802224c:	1b5b      	subs	r3, r3, r5
 802224e:	442a      	add	r2, r5
 8022250:	60a3      	str	r3, [r4, #8]
 8022252:	6022      	str	r2, [r4, #0]
 8022254:	2b00      	cmp	r3, #0
 8022256:	d1cf      	bne.n	80221f8 <__sfvwrite_r+0x1bc>
 8022258:	4621      	mov	r1, r4
 802225a:	4630      	mov	r0, r6
 802225c:	f7fc fd38 	bl	801ecd0 <_fflush_r>
 8022260:	2800      	cmp	r0, #0
 8022262:	d0c9      	beq.n	80221f8 <__sfvwrite_r+0x1bc>
 8022264:	e79c      	b.n	80221a0 <__sfvwrite_r+0x164>
 8022266:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802226a:	459a      	cmp	sl, r3
 802226c:	bf38      	it	cc
 802226e:	4653      	movcc	r3, sl
 8022270:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022272:	fb93 f3f1 	sdiv	r3, r3, r1
 8022276:	464a      	mov	r2, r9
 8022278:	434b      	muls	r3, r1
 802227a:	4630      	mov	r0, r6
 802227c:	69e1      	ldr	r1, [r4, #28]
 802227e:	47a8      	blx	r5
 8022280:	1e05      	subs	r5, r0, #0
 8022282:	dcb9      	bgt.n	80221f8 <__sfvwrite_r+0x1bc>
 8022284:	e78c      	b.n	80221a0 <__sfvwrite_r+0x164>
 8022286:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802228a:	2000      	movs	r0, #0
 802228c:	3708      	adds	r7, #8
 802228e:	e6f3      	b.n	8022078 <__sfvwrite_r+0x3c>
 8022290:	f10b 0901 	add.w	r9, fp, #1
 8022294:	e700      	b.n	8022098 <__sfvwrite_r+0x5c>
 8022296:	4293      	cmp	r3, r2
 8022298:	dc08      	bgt.n	80222ac <__sfvwrite_r+0x270>
 802229a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802229c:	69e1      	ldr	r1, [r4, #28]
 802229e:	4652      	mov	r2, sl
 80222a0:	4630      	mov	r0, r6
 80222a2:	47a8      	blx	r5
 80222a4:	1e05      	subs	r5, r0, #0
 80222a6:	f73f af13 	bgt.w	80220d0 <__sfvwrite_r+0x94>
 80222aa:	e779      	b.n	80221a0 <__sfvwrite_r+0x164>
 80222ac:	4651      	mov	r1, sl
 80222ae:	9201      	str	r2, [sp, #4]
 80222b0:	f7f8 fb28 	bl	801a904 <memmove>
 80222b4:	9a01      	ldr	r2, [sp, #4]
 80222b6:	68a3      	ldr	r3, [r4, #8]
 80222b8:	1a9b      	subs	r3, r3, r2
 80222ba:	60a3      	str	r3, [r4, #8]
 80222bc:	6823      	ldr	r3, [r4, #0]
 80222be:	4413      	add	r3, r2
 80222c0:	6023      	str	r3, [r4, #0]
 80222c2:	4615      	mov	r5, r2
 80222c4:	e704      	b.n	80220d0 <__sfvwrite_r+0x94>
 80222c6:	2001      	movs	r0, #1
 80222c8:	e70c      	b.n	80220e4 <__sfvwrite_r+0xa8>
 80222ca:	bf00      	nop
 80222cc:	7ffffc00 	.word	0x7ffffc00

080222d0 <_isatty_r>:
 80222d0:	b538      	push	{r3, r4, r5, lr}
 80222d2:	4d06      	ldr	r5, [pc, #24]	; (80222ec <_isatty_r+0x1c>)
 80222d4:	2300      	movs	r3, #0
 80222d6:	4604      	mov	r4, r0
 80222d8:	4608      	mov	r0, r1
 80222da:	602b      	str	r3, [r5, #0]
 80222dc:	f7e1 fc93 	bl	8003c06 <_isatty>
 80222e0:	1c43      	adds	r3, r0, #1
 80222e2:	d102      	bne.n	80222ea <_isatty_r+0x1a>
 80222e4:	682b      	ldr	r3, [r5, #0]
 80222e6:	b103      	cbz	r3, 80222ea <_isatty_r+0x1a>
 80222e8:	6023      	str	r3, [r4, #0]
 80222ea:	bd38      	pop	{r3, r4, r5, pc}
 80222ec:	2000be30 	.word	0x2000be30

080222f0 <iswspace>:
 80222f0:	2100      	movs	r1, #0
 80222f2:	f000 b801 	b.w	80222f8 <iswspace_l>
	...

080222f8 <iswspace_l>:
 80222f8:	28ff      	cmp	r0, #255	; 0xff
 80222fa:	bf9d      	ittte	ls
 80222fc:	4b02      	ldrls	r3, [pc, #8]	; (8022308 <iswspace_l+0x10>)
 80222fe:	5cc0      	ldrbls	r0, [r0, r3]
 8022300:	f000 0008 	andls.w	r0, r0, #8
 8022304:	2000      	movhi	r0, #0
 8022306:	4770      	bx	lr
 8022308:	08028d49 	.word	0x08028d49

0802230c <__locale_mb_cur_max>:
 802230c:	4b01      	ldr	r3, [pc, #4]	; (8022314 <__locale_mb_cur_max+0x8>)
 802230e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8022312:	4770      	bx	lr
 8022314:	200008e0 	.word	0x200008e0

08022318 <_lseek_r>:
 8022318:	b538      	push	{r3, r4, r5, lr}
 802231a:	4d07      	ldr	r5, [pc, #28]	; (8022338 <_lseek_r+0x20>)
 802231c:	4604      	mov	r4, r0
 802231e:	4608      	mov	r0, r1
 8022320:	4611      	mov	r1, r2
 8022322:	2200      	movs	r2, #0
 8022324:	602a      	str	r2, [r5, #0]
 8022326:	461a      	mov	r2, r3
 8022328:	f7e1 fc78 	bl	8003c1c <_lseek>
 802232c:	1c43      	adds	r3, r0, #1
 802232e:	d102      	bne.n	8022336 <_lseek_r+0x1e>
 8022330:	682b      	ldr	r3, [r5, #0]
 8022332:	b103      	cbz	r3, 8022336 <_lseek_r+0x1e>
 8022334:	6023      	str	r3, [r4, #0]
 8022336:	bd38      	pop	{r3, r4, r5, pc}
 8022338:	2000be30 	.word	0x2000be30

0802233c <_mbrtowc_r>:
 802233c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802233e:	4c0a      	ldr	r4, [pc, #40]	; (8022368 <_mbrtowc_r+0x2c>)
 8022340:	9e08      	ldr	r6, [sp, #32]
 8022342:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 8022346:	9600      	str	r6, [sp, #0]
 8022348:	4605      	mov	r5, r0
 802234a:	4614      	mov	r4, r2
 802234c:	b912      	cbnz	r2, 8022354 <_mbrtowc_r+0x18>
 802234e:	4a07      	ldr	r2, [pc, #28]	; (802236c <_mbrtowc_r+0x30>)
 8022350:	2301      	movs	r3, #1
 8022352:	4621      	mov	r1, r4
 8022354:	47b8      	blx	r7
 8022356:	1c43      	adds	r3, r0, #1
 8022358:	bf01      	itttt	eq
 802235a:	2300      	moveq	r3, #0
 802235c:	6033      	streq	r3, [r6, #0]
 802235e:	238a      	moveq	r3, #138	; 0x8a
 8022360:	602b      	streq	r3, [r5, #0]
 8022362:	b003      	add	sp, #12
 8022364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022366:	bf00      	nop
 8022368:	200008e0 	.word	0x200008e0
 802236c:	08029219 	.word	0x08029219

08022370 <__ascii_mbtowc>:
 8022370:	b082      	sub	sp, #8
 8022372:	b901      	cbnz	r1, 8022376 <__ascii_mbtowc+0x6>
 8022374:	a901      	add	r1, sp, #4
 8022376:	b142      	cbz	r2, 802238a <__ascii_mbtowc+0x1a>
 8022378:	b14b      	cbz	r3, 802238e <__ascii_mbtowc+0x1e>
 802237a:	7813      	ldrb	r3, [r2, #0]
 802237c:	600b      	str	r3, [r1, #0]
 802237e:	7812      	ldrb	r2, [r2, #0]
 8022380:	1e10      	subs	r0, r2, #0
 8022382:	bf18      	it	ne
 8022384:	2001      	movne	r0, #1
 8022386:	b002      	add	sp, #8
 8022388:	4770      	bx	lr
 802238a:	4610      	mov	r0, r2
 802238c:	e7fb      	b.n	8022386 <__ascii_mbtowc+0x16>
 802238e:	f06f 0001 	mvn.w	r0, #1
 8022392:	e7f8      	b.n	8022386 <__ascii_mbtowc+0x16>

08022394 <_read_r>:
 8022394:	b538      	push	{r3, r4, r5, lr}
 8022396:	4d07      	ldr	r5, [pc, #28]	; (80223b4 <_read_r+0x20>)
 8022398:	4604      	mov	r4, r0
 802239a:	4608      	mov	r0, r1
 802239c:	4611      	mov	r1, r2
 802239e:	2200      	movs	r2, #0
 80223a0:	602a      	str	r2, [r5, #0]
 80223a2:	461a      	mov	r2, r3
 80223a4:	f7e1 fbf6 	bl	8003b94 <_read>
 80223a8:	1c43      	adds	r3, r0, #1
 80223aa:	d102      	bne.n	80223b2 <_read_r+0x1e>
 80223ac:	682b      	ldr	r3, [r5, #0]
 80223ae:	b103      	cbz	r3, 80223b2 <_read_r+0x1e>
 80223b0:	6023      	str	r3, [r4, #0]
 80223b2:	bd38      	pop	{r3, r4, r5, pc}
 80223b4:	2000be30 	.word	0x2000be30

080223b8 <realloc>:
 80223b8:	4b02      	ldr	r3, [pc, #8]	; (80223c4 <realloc+0xc>)
 80223ba:	460a      	mov	r2, r1
 80223bc:	4601      	mov	r1, r0
 80223be:	6818      	ldr	r0, [r3, #0]
 80223c0:	f000 b802 	b.w	80223c8 <_realloc_r>
 80223c4:	20000038 	.word	0x20000038

080223c8 <_realloc_r>:
 80223c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223cc:	4681      	mov	r9, r0
 80223ce:	460c      	mov	r4, r1
 80223d0:	b929      	cbnz	r1, 80223de <_realloc_r+0x16>
 80223d2:	4611      	mov	r1, r2
 80223d4:	b003      	add	sp, #12
 80223d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223da:	f7fc bfd1 	b.w	801f380 <_malloc_r>
 80223de:	9201      	str	r2, [sp, #4]
 80223e0:	f7fd fa10 	bl	801f804 <__malloc_lock>
 80223e4:	9a01      	ldr	r2, [sp, #4]
 80223e6:	f102 080b 	add.w	r8, r2, #11
 80223ea:	f1b8 0f16 	cmp.w	r8, #22
 80223ee:	d90b      	bls.n	8022408 <_realloc_r+0x40>
 80223f0:	f038 0807 	bics.w	r8, r8, #7
 80223f4:	d50a      	bpl.n	802240c <_realloc_r+0x44>
 80223f6:	230c      	movs	r3, #12
 80223f8:	f8c9 3000 	str.w	r3, [r9]
 80223fc:	f04f 0b00 	mov.w	fp, #0
 8022400:	4658      	mov	r0, fp
 8022402:	b003      	add	sp, #12
 8022404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022408:	f04f 0810 	mov.w	r8, #16
 802240c:	4590      	cmp	r8, r2
 802240e:	d3f2      	bcc.n	80223f6 <_realloc_r+0x2e>
 8022410:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8022414:	f025 0603 	bic.w	r6, r5, #3
 8022418:	45b0      	cmp	r8, r6
 802241a:	f1a4 0a08 	sub.w	sl, r4, #8
 802241e:	f340 8170 	ble.w	8022702 <_realloc_r+0x33a>
 8022422:	48a9      	ldr	r0, [pc, #676]	; (80226c8 <_realloc_r+0x300>)
 8022424:	9001      	str	r0, [sp, #4]
 8022426:	f8d0 c008 	ldr.w	ip, [r0, #8]
 802242a:	eb0a 0306 	add.w	r3, sl, r6
 802242e:	459c      	cmp	ip, r3
 8022430:	6859      	ldr	r1, [r3, #4]
 8022432:	d005      	beq.n	8022440 <_realloc_r+0x78>
 8022434:	f021 0001 	bic.w	r0, r1, #1
 8022438:	4418      	add	r0, r3
 802243a:	6840      	ldr	r0, [r0, #4]
 802243c:	07c7      	lsls	r7, r0, #31
 802243e:	d427      	bmi.n	8022490 <_realloc_r+0xc8>
 8022440:	f021 0103 	bic.w	r1, r1, #3
 8022444:	459c      	cmp	ip, r3
 8022446:	eb06 0701 	add.w	r7, r6, r1
 802244a:	d119      	bne.n	8022480 <_realloc_r+0xb8>
 802244c:	f108 0010 	add.w	r0, r8, #16
 8022450:	42b8      	cmp	r0, r7
 8022452:	dc1f      	bgt.n	8022494 <_realloc_r+0xcc>
 8022454:	eb0a 0308 	add.w	r3, sl, r8
 8022458:	9a01      	ldr	r2, [sp, #4]
 802245a:	eba7 0708 	sub.w	r7, r7, r8
 802245e:	f047 0701 	orr.w	r7, r7, #1
 8022462:	6093      	str	r3, [r2, #8]
 8022464:	605f      	str	r7, [r3, #4]
 8022466:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802246a:	f003 0301 	and.w	r3, r3, #1
 802246e:	ea43 0308 	orr.w	r3, r3, r8
 8022472:	f844 3c04 	str.w	r3, [r4, #-4]
 8022476:	4648      	mov	r0, r9
 8022478:	f7fd f9ca 	bl	801f810 <__malloc_unlock>
 802247c:	46a3      	mov	fp, r4
 802247e:	e7bf      	b.n	8022400 <_realloc_r+0x38>
 8022480:	45b8      	cmp	r8, r7
 8022482:	dc07      	bgt.n	8022494 <_realloc_r+0xcc>
 8022484:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8022488:	60da      	str	r2, [r3, #12]
 802248a:	6093      	str	r3, [r2, #8]
 802248c:	4655      	mov	r5, sl
 802248e:	e07f      	b.n	8022590 <_realloc_r+0x1c8>
 8022490:	2100      	movs	r1, #0
 8022492:	460b      	mov	r3, r1
 8022494:	07e8      	lsls	r0, r5, #31
 8022496:	f100 80e5 	bmi.w	8022664 <_realloc_r+0x29c>
 802249a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 802249e:	ebaa 0505 	sub.w	r5, sl, r5
 80224a2:	6868      	ldr	r0, [r5, #4]
 80224a4:	f020 0003 	bic.w	r0, r0, #3
 80224a8:	eb00 0b06 	add.w	fp, r0, r6
 80224ac:	2b00      	cmp	r3, #0
 80224ae:	f000 80a5 	beq.w	80225fc <_realloc_r+0x234>
 80224b2:	459c      	cmp	ip, r3
 80224b4:	eb01 070b 	add.w	r7, r1, fp
 80224b8:	d14a      	bne.n	8022550 <_realloc_r+0x188>
 80224ba:	f108 0310 	add.w	r3, r8, #16
 80224be:	42bb      	cmp	r3, r7
 80224c0:	f300 809c 	bgt.w	80225fc <_realloc_r+0x234>
 80224c4:	46ab      	mov	fp, r5
 80224c6:	68eb      	ldr	r3, [r5, #12]
 80224c8:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80224cc:	60d3      	str	r3, [r2, #12]
 80224ce:	609a      	str	r2, [r3, #8]
 80224d0:	1f32      	subs	r2, r6, #4
 80224d2:	2a24      	cmp	r2, #36	; 0x24
 80224d4:	d837      	bhi.n	8022546 <_realloc_r+0x17e>
 80224d6:	2a13      	cmp	r2, #19
 80224d8:	d933      	bls.n	8022542 <_realloc_r+0x17a>
 80224da:	6823      	ldr	r3, [r4, #0]
 80224dc:	60ab      	str	r3, [r5, #8]
 80224de:	6863      	ldr	r3, [r4, #4]
 80224e0:	60eb      	str	r3, [r5, #12]
 80224e2:	2a1b      	cmp	r2, #27
 80224e4:	d81b      	bhi.n	802251e <_realloc_r+0x156>
 80224e6:	3408      	adds	r4, #8
 80224e8:	f105 0310 	add.w	r3, r5, #16
 80224ec:	6822      	ldr	r2, [r4, #0]
 80224ee:	601a      	str	r2, [r3, #0]
 80224f0:	6862      	ldr	r2, [r4, #4]
 80224f2:	605a      	str	r2, [r3, #4]
 80224f4:	68a2      	ldr	r2, [r4, #8]
 80224f6:	609a      	str	r2, [r3, #8]
 80224f8:	eb05 0308 	add.w	r3, r5, r8
 80224fc:	9a01      	ldr	r2, [sp, #4]
 80224fe:	eba7 0708 	sub.w	r7, r7, r8
 8022502:	f047 0701 	orr.w	r7, r7, #1
 8022506:	6093      	str	r3, [r2, #8]
 8022508:	605f      	str	r7, [r3, #4]
 802250a:	686b      	ldr	r3, [r5, #4]
 802250c:	f003 0301 	and.w	r3, r3, #1
 8022510:	ea43 0308 	orr.w	r3, r3, r8
 8022514:	606b      	str	r3, [r5, #4]
 8022516:	4648      	mov	r0, r9
 8022518:	f7fd f97a 	bl	801f810 <__malloc_unlock>
 802251c:	e770      	b.n	8022400 <_realloc_r+0x38>
 802251e:	68a3      	ldr	r3, [r4, #8]
 8022520:	612b      	str	r3, [r5, #16]
 8022522:	68e3      	ldr	r3, [r4, #12]
 8022524:	616b      	str	r3, [r5, #20]
 8022526:	2a24      	cmp	r2, #36	; 0x24
 8022528:	bf01      	itttt	eq
 802252a:	6923      	ldreq	r3, [r4, #16]
 802252c:	61ab      	streq	r3, [r5, #24]
 802252e:	6962      	ldreq	r2, [r4, #20]
 8022530:	61ea      	streq	r2, [r5, #28]
 8022532:	bf19      	ittee	ne
 8022534:	3410      	addne	r4, #16
 8022536:	f105 0318 	addne.w	r3, r5, #24
 802253a:	f105 0320 	addeq.w	r3, r5, #32
 802253e:	3418      	addeq	r4, #24
 8022540:	e7d4      	b.n	80224ec <_realloc_r+0x124>
 8022542:	465b      	mov	r3, fp
 8022544:	e7d2      	b.n	80224ec <_realloc_r+0x124>
 8022546:	4621      	mov	r1, r4
 8022548:	4658      	mov	r0, fp
 802254a:	f7f8 f9db 	bl	801a904 <memmove>
 802254e:	e7d3      	b.n	80224f8 <_realloc_r+0x130>
 8022550:	45b8      	cmp	r8, r7
 8022552:	dc53      	bgt.n	80225fc <_realloc_r+0x234>
 8022554:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8022558:	4628      	mov	r0, r5
 802255a:	60da      	str	r2, [r3, #12]
 802255c:	6093      	str	r3, [r2, #8]
 802255e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8022562:	68eb      	ldr	r3, [r5, #12]
 8022564:	60d3      	str	r3, [r2, #12]
 8022566:	609a      	str	r2, [r3, #8]
 8022568:	1f32      	subs	r2, r6, #4
 802256a:	2a24      	cmp	r2, #36	; 0x24
 802256c:	d842      	bhi.n	80225f4 <_realloc_r+0x22c>
 802256e:	2a13      	cmp	r2, #19
 8022570:	d908      	bls.n	8022584 <_realloc_r+0x1bc>
 8022572:	6823      	ldr	r3, [r4, #0]
 8022574:	60ab      	str	r3, [r5, #8]
 8022576:	6863      	ldr	r3, [r4, #4]
 8022578:	60eb      	str	r3, [r5, #12]
 802257a:	2a1b      	cmp	r2, #27
 802257c:	d828      	bhi.n	80225d0 <_realloc_r+0x208>
 802257e:	3408      	adds	r4, #8
 8022580:	f105 0010 	add.w	r0, r5, #16
 8022584:	6823      	ldr	r3, [r4, #0]
 8022586:	6003      	str	r3, [r0, #0]
 8022588:	6863      	ldr	r3, [r4, #4]
 802258a:	6043      	str	r3, [r0, #4]
 802258c:	68a3      	ldr	r3, [r4, #8]
 802258e:	6083      	str	r3, [r0, #8]
 8022590:	686a      	ldr	r2, [r5, #4]
 8022592:	eba7 0008 	sub.w	r0, r7, r8
 8022596:	280f      	cmp	r0, #15
 8022598:	f002 0201 	and.w	r2, r2, #1
 802259c:	eb05 0307 	add.w	r3, r5, r7
 80225a0:	f240 80b1 	bls.w	8022706 <_realloc_r+0x33e>
 80225a4:	eb05 0108 	add.w	r1, r5, r8
 80225a8:	ea48 0202 	orr.w	r2, r8, r2
 80225ac:	f040 0001 	orr.w	r0, r0, #1
 80225b0:	606a      	str	r2, [r5, #4]
 80225b2:	6048      	str	r0, [r1, #4]
 80225b4:	685a      	ldr	r2, [r3, #4]
 80225b6:	f042 0201 	orr.w	r2, r2, #1
 80225ba:	605a      	str	r2, [r3, #4]
 80225bc:	3108      	adds	r1, #8
 80225be:	4648      	mov	r0, r9
 80225c0:	f7fc fc82 	bl	801eec8 <_free_r>
 80225c4:	4648      	mov	r0, r9
 80225c6:	f7fd f923 	bl	801f810 <__malloc_unlock>
 80225ca:	f105 0b08 	add.w	fp, r5, #8
 80225ce:	e717      	b.n	8022400 <_realloc_r+0x38>
 80225d0:	68a3      	ldr	r3, [r4, #8]
 80225d2:	612b      	str	r3, [r5, #16]
 80225d4:	68e3      	ldr	r3, [r4, #12]
 80225d6:	616b      	str	r3, [r5, #20]
 80225d8:	2a24      	cmp	r2, #36	; 0x24
 80225da:	bf01      	itttt	eq
 80225dc:	6923      	ldreq	r3, [r4, #16]
 80225de:	61ab      	streq	r3, [r5, #24]
 80225e0:	6963      	ldreq	r3, [r4, #20]
 80225e2:	61eb      	streq	r3, [r5, #28]
 80225e4:	bf19      	ittee	ne
 80225e6:	3410      	addne	r4, #16
 80225e8:	f105 0018 	addne.w	r0, r5, #24
 80225ec:	f105 0020 	addeq.w	r0, r5, #32
 80225f0:	3418      	addeq	r4, #24
 80225f2:	e7c7      	b.n	8022584 <_realloc_r+0x1bc>
 80225f4:	4621      	mov	r1, r4
 80225f6:	f7f8 f985 	bl	801a904 <memmove>
 80225fa:	e7c9      	b.n	8022590 <_realloc_r+0x1c8>
 80225fc:	45d8      	cmp	r8, fp
 80225fe:	dc31      	bgt.n	8022664 <_realloc_r+0x29c>
 8022600:	4628      	mov	r0, r5
 8022602:	68eb      	ldr	r3, [r5, #12]
 8022604:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8022608:	60d3      	str	r3, [r2, #12]
 802260a:	609a      	str	r2, [r3, #8]
 802260c:	1f32      	subs	r2, r6, #4
 802260e:	2a24      	cmp	r2, #36	; 0x24
 8022610:	d824      	bhi.n	802265c <_realloc_r+0x294>
 8022612:	2a13      	cmp	r2, #19
 8022614:	d908      	bls.n	8022628 <_realloc_r+0x260>
 8022616:	6823      	ldr	r3, [r4, #0]
 8022618:	60ab      	str	r3, [r5, #8]
 802261a:	6863      	ldr	r3, [r4, #4]
 802261c:	60eb      	str	r3, [r5, #12]
 802261e:	2a1b      	cmp	r2, #27
 8022620:	d80a      	bhi.n	8022638 <_realloc_r+0x270>
 8022622:	3408      	adds	r4, #8
 8022624:	f105 0010 	add.w	r0, r5, #16
 8022628:	6823      	ldr	r3, [r4, #0]
 802262a:	6003      	str	r3, [r0, #0]
 802262c:	6863      	ldr	r3, [r4, #4]
 802262e:	6043      	str	r3, [r0, #4]
 8022630:	68a3      	ldr	r3, [r4, #8]
 8022632:	6083      	str	r3, [r0, #8]
 8022634:	465f      	mov	r7, fp
 8022636:	e7ab      	b.n	8022590 <_realloc_r+0x1c8>
 8022638:	68a3      	ldr	r3, [r4, #8]
 802263a:	612b      	str	r3, [r5, #16]
 802263c:	68e3      	ldr	r3, [r4, #12]
 802263e:	616b      	str	r3, [r5, #20]
 8022640:	2a24      	cmp	r2, #36	; 0x24
 8022642:	bf01      	itttt	eq
 8022644:	6923      	ldreq	r3, [r4, #16]
 8022646:	61ab      	streq	r3, [r5, #24]
 8022648:	6963      	ldreq	r3, [r4, #20]
 802264a:	61eb      	streq	r3, [r5, #28]
 802264c:	bf19      	ittee	ne
 802264e:	3410      	addne	r4, #16
 8022650:	f105 0018 	addne.w	r0, r5, #24
 8022654:	f105 0020 	addeq.w	r0, r5, #32
 8022658:	3418      	addeq	r4, #24
 802265a:	e7e5      	b.n	8022628 <_realloc_r+0x260>
 802265c:	4621      	mov	r1, r4
 802265e:	f7f8 f951 	bl	801a904 <memmove>
 8022662:	e7e7      	b.n	8022634 <_realloc_r+0x26c>
 8022664:	4611      	mov	r1, r2
 8022666:	4648      	mov	r0, r9
 8022668:	f7fc fe8a 	bl	801f380 <_malloc_r>
 802266c:	4683      	mov	fp, r0
 802266e:	2800      	cmp	r0, #0
 8022670:	f43f af51 	beq.w	8022516 <_realloc_r+0x14e>
 8022674:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022678:	f023 0301 	bic.w	r3, r3, #1
 802267c:	4453      	add	r3, sl
 802267e:	f1a0 0208 	sub.w	r2, r0, #8
 8022682:	4293      	cmp	r3, r2
 8022684:	d105      	bne.n	8022692 <_realloc_r+0x2ca>
 8022686:	f850 7c04 	ldr.w	r7, [r0, #-4]
 802268a:	f027 0703 	bic.w	r7, r7, #3
 802268e:	4437      	add	r7, r6
 8022690:	e6fc      	b.n	802248c <_realloc_r+0xc4>
 8022692:	1f32      	subs	r2, r6, #4
 8022694:	2a24      	cmp	r2, #36	; 0x24
 8022696:	d830      	bhi.n	80226fa <_realloc_r+0x332>
 8022698:	2a13      	cmp	r2, #19
 802269a:	d92b      	bls.n	80226f4 <_realloc_r+0x32c>
 802269c:	6823      	ldr	r3, [r4, #0]
 802269e:	6003      	str	r3, [r0, #0]
 80226a0:	6863      	ldr	r3, [r4, #4]
 80226a2:	6043      	str	r3, [r0, #4]
 80226a4:	2a1b      	cmp	r2, #27
 80226a6:	d811      	bhi.n	80226cc <_realloc_r+0x304>
 80226a8:	f104 0208 	add.w	r2, r4, #8
 80226ac:	f100 0308 	add.w	r3, r0, #8
 80226b0:	6811      	ldr	r1, [r2, #0]
 80226b2:	6019      	str	r1, [r3, #0]
 80226b4:	6851      	ldr	r1, [r2, #4]
 80226b6:	6059      	str	r1, [r3, #4]
 80226b8:	6892      	ldr	r2, [r2, #8]
 80226ba:	609a      	str	r2, [r3, #8]
 80226bc:	4621      	mov	r1, r4
 80226be:	4648      	mov	r0, r9
 80226c0:	f7fc fc02 	bl	801eec8 <_free_r>
 80226c4:	e727      	b.n	8022516 <_realloc_r+0x14e>
 80226c6:	bf00      	nop
 80226c8:	200004d0 	.word	0x200004d0
 80226cc:	68a3      	ldr	r3, [r4, #8]
 80226ce:	6083      	str	r3, [r0, #8]
 80226d0:	68e3      	ldr	r3, [r4, #12]
 80226d2:	60c3      	str	r3, [r0, #12]
 80226d4:	2a24      	cmp	r2, #36	; 0x24
 80226d6:	bf01      	itttt	eq
 80226d8:	6923      	ldreq	r3, [r4, #16]
 80226da:	6103      	streq	r3, [r0, #16]
 80226dc:	6961      	ldreq	r1, [r4, #20]
 80226de:	6141      	streq	r1, [r0, #20]
 80226e0:	bf19      	ittee	ne
 80226e2:	f104 0210 	addne.w	r2, r4, #16
 80226e6:	f100 0310 	addne.w	r3, r0, #16
 80226ea:	f104 0218 	addeq.w	r2, r4, #24
 80226ee:	f100 0318 	addeq.w	r3, r0, #24
 80226f2:	e7dd      	b.n	80226b0 <_realloc_r+0x2e8>
 80226f4:	4603      	mov	r3, r0
 80226f6:	4622      	mov	r2, r4
 80226f8:	e7da      	b.n	80226b0 <_realloc_r+0x2e8>
 80226fa:	4621      	mov	r1, r4
 80226fc:	f7f8 f902 	bl	801a904 <memmove>
 8022700:	e7dc      	b.n	80226bc <_realloc_r+0x2f4>
 8022702:	4637      	mov	r7, r6
 8022704:	e6c2      	b.n	802248c <_realloc_r+0xc4>
 8022706:	4317      	orrs	r7, r2
 8022708:	606f      	str	r7, [r5, #4]
 802270a:	685a      	ldr	r2, [r3, #4]
 802270c:	f042 0201 	orr.w	r2, r2, #1
 8022710:	605a      	str	r2, [r3, #4]
 8022712:	e757      	b.n	80225c4 <_realloc_r+0x1fc>

08022714 <__sccl>:
 8022714:	b570      	push	{r4, r5, r6, lr}
 8022716:	780b      	ldrb	r3, [r1, #0]
 8022718:	4604      	mov	r4, r0
 802271a:	2b5e      	cmp	r3, #94	; 0x5e
 802271c:	bf0b      	itete	eq
 802271e:	784b      	ldrbeq	r3, [r1, #1]
 8022720:	1c48      	addne	r0, r1, #1
 8022722:	1c88      	addeq	r0, r1, #2
 8022724:	2200      	movne	r2, #0
 8022726:	bf08      	it	eq
 8022728:	2201      	moveq	r2, #1
 802272a:	1e61      	subs	r1, r4, #1
 802272c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8022730:	f801 2f01 	strb.w	r2, [r1, #1]!
 8022734:	42a9      	cmp	r1, r5
 8022736:	d1fb      	bne.n	8022730 <__sccl+0x1c>
 8022738:	b90b      	cbnz	r3, 802273e <__sccl+0x2a>
 802273a:	3801      	subs	r0, #1
 802273c:	bd70      	pop	{r4, r5, r6, pc}
 802273e:	f082 0101 	eor.w	r1, r2, #1
 8022742:	54e1      	strb	r1, [r4, r3]
 8022744:	1c42      	adds	r2, r0, #1
 8022746:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802274a:	2d2d      	cmp	r5, #45	; 0x2d
 802274c:	f102 36ff 	add.w	r6, r2, #4294967295
 8022750:	4610      	mov	r0, r2
 8022752:	d006      	beq.n	8022762 <__sccl+0x4e>
 8022754:	2d5d      	cmp	r5, #93	; 0x5d
 8022756:	d0f1      	beq.n	802273c <__sccl+0x28>
 8022758:	b90d      	cbnz	r5, 802275e <__sccl+0x4a>
 802275a:	4630      	mov	r0, r6
 802275c:	e7ee      	b.n	802273c <__sccl+0x28>
 802275e:	462b      	mov	r3, r5
 8022760:	e7ef      	b.n	8022742 <__sccl+0x2e>
 8022762:	7816      	ldrb	r6, [r2, #0]
 8022764:	2e5d      	cmp	r6, #93	; 0x5d
 8022766:	d0fa      	beq.n	802275e <__sccl+0x4a>
 8022768:	42b3      	cmp	r3, r6
 802276a:	dcf8      	bgt.n	802275e <__sccl+0x4a>
 802276c:	4618      	mov	r0, r3
 802276e:	3001      	adds	r0, #1
 8022770:	4286      	cmp	r6, r0
 8022772:	5421      	strb	r1, [r4, r0]
 8022774:	dcfb      	bgt.n	802276e <__sccl+0x5a>
 8022776:	43d8      	mvns	r0, r3
 8022778:	4430      	add	r0, r6
 802277a:	1c5d      	adds	r5, r3, #1
 802277c:	42b3      	cmp	r3, r6
 802277e:	bfa8      	it	ge
 8022780:	2000      	movge	r0, #0
 8022782:	182b      	adds	r3, r5, r0
 8022784:	3202      	adds	r2, #2
 8022786:	e7de      	b.n	8022746 <__sccl+0x32>

08022788 <_strtoll_l.isra.0>:
 8022788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802278c:	b087      	sub	sp, #28
 802278e:	4691      	mov	r9, r2
 8022790:	4a47      	ldr	r2, [pc, #284]	; (80228b0 <_strtoll_l.isra.0+0x128>)
 8022792:	9005      	str	r0, [sp, #20]
 8022794:	4688      	mov	r8, r1
 8022796:	461f      	mov	r7, r3
 8022798:	460d      	mov	r5, r1
 802279a:	462b      	mov	r3, r5
 802279c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80227a0:	5ca6      	ldrb	r6, [r4, r2]
 80227a2:	f016 0608 	ands.w	r6, r6, #8
 80227a6:	d1f8      	bne.n	802279a <_strtoll_l.isra.0+0x12>
 80227a8:	2c2d      	cmp	r4, #45	; 0x2d
 80227aa:	d147      	bne.n	802283c <_strtoll_l.isra.0+0xb4>
 80227ac:	782c      	ldrb	r4, [r5, #0]
 80227ae:	2601      	movs	r6, #1
 80227b0:	1c9d      	adds	r5, r3, #2
 80227b2:	2f00      	cmp	r7, #0
 80227b4:	d077      	beq.n	80228a6 <_strtoll_l.isra.0+0x11e>
 80227b6:	2f10      	cmp	r7, #16
 80227b8:	d109      	bne.n	80227ce <_strtoll_l.isra.0+0x46>
 80227ba:	2c30      	cmp	r4, #48	; 0x30
 80227bc:	d107      	bne.n	80227ce <_strtoll_l.isra.0+0x46>
 80227be:	782b      	ldrb	r3, [r5, #0]
 80227c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80227c4:	2b58      	cmp	r3, #88	; 0x58
 80227c6:	d169      	bne.n	802289c <_strtoll_l.isra.0+0x114>
 80227c8:	786c      	ldrb	r4, [r5, #1]
 80227ca:	2710      	movs	r7, #16
 80227cc:	3502      	adds	r5, #2
 80227ce:	f04f 32ff 	mov.w	r2, #4294967295
 80227d2:	1990      	adds	r0, r2, r6
 80227d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80227d8:	ea4f 7be7 	mov.w	fp, r7, asr #31
 80227dc:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 80227e0:	463a      	mov	r2, r7
 80227e2:	465b      	mov	r3, fp
 80227e4:	e9cd 0100 	strd	r0, r1, [sp]
 80227e8:	f7de fa5e 	bl	8000ca8 <__aeabi_uldivmod>
 80227ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80227f0:	46ba      	mov	sl, r7
 80227f2:	4696      	mov	lr, r2
 80227f4:	2300      	movs	r3, #0
 80227f6:	2000      	movs	r0, #0
 80227f8:	2100      	movs	r1, #0
 80227fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80227fe:	f1bc 0f09 	cmp.w	ip, #9
 8022802:	d820      	bhi.n	8022846 <_strtoll_l.isra.0+0xbe>
 8022804:	4664      	mov	r4, ip
 8022806:	42a7      	cmp	r7, r4
 8022808:	dd2e      	ble.n	8022868 <_strtoll_l.isra.0+0xe0>
 802280a:	1c5a      	adds	r2, r3, #1
 802280c:	d013      	beq.n	8022836 <_strtoll_l.isra.0+0xae>
 802280e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022812:	428b      	cmp	r3, r1
 8022814:	bf08      	it	eq
 8022816:	4282      	cmpeq	r2, r0
 8022818:	d323      	bcc.n	8022862 <_strtoll_l.isra.0+0xda>
 802281a:	d101      	bne.n	8022820 <_strtoll_l.isra.0+0x98>
 802281c:	45a6      	cmp	lr, r4
 802281e:	db20      	blt.n	8022862 <_strtoll_l.isra.0+0xda>
 8022820:	fb0a f301 	mul.w	r3, sl, r1
 8022824:	fb00 330b 	mla	r3, r0, fp, r3
 8022828:	fbaa 0100 	umull	r0, r1, sl, r0
 802282c:	4419      	add	r1, r3
 802282e:	1900      	adds	r0, r0, r4
 8022830:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8022834:	2301      	movs	r3, #1
 8022836:	f815 4b01 	ldrb.w	r4, [r5], #1
 802283a:	e7de      	b.n	80227fa <_strtoll_l.isra.0+0x72>
 802283c:	2c2b      	cmp	r4, #43	; 0x2b
 802283e:	bf04      	itt	eq
 8022840:	782c      	ldrbeq	r4, [r5, #0]
 8022842:	1c9d      	addeq	r5, r3, #2
 8022844:	e7b5      	b.n	80227b2 <_strtoll_l.isra.0+0x2a>
 8022846:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802284a:	f1bc 0f19 	cmp.w	ip, #25
 802284e:	d801      	bhi.n	8022854 <_strtoll_l.isra.0+0xcc>
 8022850:	3c37      	subs	r4, #55	; 0x37
 8022852:	e7d8      	b.n	8022806 <_strtoll_l.isra.0+0x7e>
 8022854:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8022858:	f1bc 0f19 	cmp.w	ip, #25
 802285c:	d804      	bhi.n	8022868 <_strtoll_l.isra.0+0xe0>
 802285e:	3c57      	subs	r4, #87	; 0x57
 8022860:	e7d1      	b.n	8022806 <_strtoll_l.isra.0+0x7e>
 8022862:	f04f 33ff 	mov.w	r3, #4294967295
 8022866:	e7e6      	b.n	8022836 <_strtoll_l.isra.0+0xae>
 8022868:	1c5a      	adds	r2, r3, #1
 802286a:	d10a      	bne.n	8022882 <_strtoll_l.isra.0+0xfa>
 802286c:	9a05      	ldr	r2, [sp, #20]
 802286e:	2322      	movs	r3, #34	; 0x22
 8022870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022874:	6013      	str	r3, [r2, #0]
 8022876:	f1b9 0f00 	cmp.w	r9, #0
 802287a:	d10a      	bne.n	8022892 <_strtoll_l.isra.0+0x10a>
 802287c:	b007      	add	sp, #28
 802287e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022882:	b116      	cbz	r6, 802288a <_strtoll_l.isra.0+0x102>
 8022884:	4240      	negs	r0, r0
 8022886:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802288a:	f1b9 0f00 	cmp.w	r9, #0
 802288e:	d0f5      	beq.n	802287c <_strtoll_l.isra.0+0xf4>
 8022890:	b10b      	cbz	r3, 8022896 <_strtoll_l.isra.0+0x10e>
 8022892:	f105 38ff 	add.w	r8, r5, #4294967295
 8022896:	f8c9 8000 	str.w	r8, [r9]
 802289a:	e7ef      	b.n	802287c <_strtoll_l.isra.0+0xf4>
 802289c:	2430      	movs	r4, #48	; 0x30
 802289e:	2f00      	cmp	r7, #0
 80228a0:	d195      	bne.n	80227ce <_strtoll_l.isra.0+0x46>
 80228a2:	2708      	movs	r7, #8
 80228a4:	e793      	b.n	80227ce <_strtoll_l.isra.0+0x46>
 80228a6:	2c30      	cmp	r4, #48	; 0x30
 80228a8:	d089      	beq.n	80227be <_strtoll_l.isra.0+0x36>
 80228aa:	270a      	movs	r7, #10
 80228ac:	e78f      	b.n	80227ce <_strtoll_l.isra.0+0x46>
 80228ae:	bf00      	nop
 80228b0:	08028d49 	.word	0x08028d49

080228b4 <_strtoll_r>:
 80228b4:	f7ff bf68 	b.w	8022788 <_strtoll_l.isra.0>

080228b8 <_strtoull_l.isra.0>:
 80228b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228bc:	b085      	sub	sp, #20
 80228be:	4691      	mov	r9, r2
 80228c0:	4a49      	ldr	r2, [pc, #292]	; (80229e8 <_strtoull_l.isra.0+0x130>)
 80228c2:	9003      	str	r0, [sp, #12]
 80228c4:	4688      	mov	r8, r1
 80228c6:	461e      	mov	r6, r3
 80228c8:	460d      	mov	r5, r1
 80228ca:	462b      	mov	r3, r5
 80228cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80228d0:	5ca7      	ldrb	r7, [r4, r2]
 80228d2:	f017 0708 	ands.w	r7, r7, #8
 80228d6:	d1f8      	bne.n	80228ca <_strtoull_l.isra.0+0x12>
 80228d8:	2c2d      	cmp	r4, #45	; 0x2d
 80228da:	d14a      	bne.n	8022972 <_strtoull_l.isra.0+0xba>
 80228dc:	782c      	ldrb	r4, [r5, #0]
 80228de:	2701      	movs	r7, #1
 80228e0:	1c9d      	adds	r5, r3, #2
 80228e2:	2e00      	cmp	r6, #0
 80228e4:	d07c      	beq.n	80229e0 <_strtoull_l.isra.0+0x128>
 80228e6:	2e10      	cmp	r6, #16
 80228e8:	d109      	bne.n	80228fe <_strtoull_l.isra.0+0x46>
 80228ea:	2c30      	cmp	r4, #48	; 0x30
 80228ec:	d107      	bne.n	80228fe <_strtoull_l.isra.0+0x46>
 80228ee:	782b      	ldrb	r3, [r5, #0]
 80228f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80228f4:	2b58      	cmp	r3, #88	; 0x58
 80228f6:	d16e      	bne.n	80229d6 <_strtoull_l.isra.0+0x11e>
 80228f8:	786c      	ldrb	r4, [r5, #1]
 80228fa:	2610      	movs	r6, #16
 80228fc:	3502      	adds	r5, #2
 80228fe:	ea4f 7be6 	mov.w	fp, r6, asr #31
 8022902:	4632      	mov	r2, r6
 8022904:	465b      	mov	r3, fp
 8022906:	f04f 30ff 	mov.w	r0, #4294967295
 802290a:	f04f 31ff 	mov.w	r1, #4294967295
 802290e:	f7de f9cb 	bl	8000ca8 <__aeabi_uldivmod>
 8022912:	e9cd 0100 	strd	r0, r1, [sp]
 8022916:	4632      	mov	r2, r6
 8022918:	465b      	mov	r3, fp
 802291a:	f04f 30ff 	mov.w	r0, #4294967295
 802291e:	f04f 31ff 	mov.w	r1, #4294967295
 8022922:	f7de f9c1 	bl	8000ca8 <__aeabi_uldivmod>
 8022926:	46b2      	mov	sl, r6
 8022928:	4696      	mov	lr, r2
 802292a:	2300      	movs	r3, #0
 802292c:	2000      	movs	r0, #0
 802292e:	2100      	movs	r1, #0
 8022930:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8022934:	f1bc 0f09 	cmp.w	ip, #9
 8022938:	d820      	bhi.n	802297c <_strtoull_l.isra.0+0xc4>
 802293a:	4664      	mov	r4, ip
 802293c:	42a6      	cmp	r6, r4
 802293e:	dd2e      	ble.n	802299e <_strtoull_l.isra.0+0xe6>
 8022940:	2b00      	cmp	r3, #0
 8022942:	db29      	blt.n	8022998 <_strtoull_l.isra.0+0xe0>
 8022944:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022948:	428b      	cmp	r3, r1
 802294a:	bf08      	it	eq
 802294c:	4282      	cmpeq	r2, r0
 802294e:	d323      	bcc.n	8022998 <_strtoull_l.isra.0+0xe0>
 8022950:	d101      	bne.n	8022956 <_strtoull_l.isra.0+0x9e>
 8022952:	45a6      	cmp	lr, r4
 8022954:	db20      	blt.n	8022998 <_strtoull_l.isra.0+0xe0>
 8022956:	fb0a f301 	mul.w	r3, sl, r1
 802295a:	fb00 330b 	mla	r3, r0, fp, r3
 802295e:	fbaa 0100 	umull	r0, r1, sl, r0
 8022962:	4419      	add	r1, r3
 8022964:	1900      	adds	r0, r0, r4
 8022966:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 802296a:	2301      	movs	r3, #1
 802296c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022970:	e7de      	b.n	8022930 <_strtoull_l.isra.0+0x78>
 8022972:	2c2b      	cmp	r4, #43	; 0x2b
 8022974:	bf04      	itt	eq
 8022976:	782c      	ldrbeq	r4, [r5, #0]
 8022978:	1c9d      	addeq	r5, r3, #2
 802297a:	e7b2      	b.n	80228e2 <_strtoull_l.isra.0+0x2a>
 802297c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8022980:	f1bc 0f19 	cmp.w	ip, #25
 8022984:	d801      	bhi.n	802298a <_strtoull_l.isra.0+0xd2>
 8022986:	3c37      	subs	r4, #55	; 0x37
 8022988:	e7d8      	b.n	802293c <_strtoull_l.isra.0+0x84>
 802298a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802298e:	f1bc 0f19 	cmp.w	ip, #25
 8022992:	d804      	bhi.n	802299e <_strtoull_l.isra.0+0xe6>
 8022994:	3c57      	subs	r4, #87	; 0x57
 8022996:	e7d1      	b.n	802293c <_strtoull_l.isra.0+0x84>
 8022998:	f04f 33ff 	mov.w	r3, #4294967295
 802299c:	e7e6      	b.n	802296c <_strtoull_l.isra.0+0xb4>
 802299e:	2b00      	cmp	r3, #0
 80229a0:	da0c      	bge.n	80229bc <_strtoull_l.isra.0+0x104>
 80229a2:	9a03      	ldr	r2, [sp, #12]
 80229a4:	2322      	movs	r3, #34	; 0x22
 80229a6:	6013      	str	r3, [r2, #0]
 80229a8:	f04f 30ff 	mov.w	r0, #4294967295
 80229ac:	f04f 31ff 	mov.w	r1, #4294967295
 80229b0:	f1b9 0f00 	cmp.w	r9, #0
 80229b4:	d10a      	bne.n	80229cc <_strtoull_l.isra.0+0x114>
 80229b6:	b005      	add	sp, #20
 80229b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229bc:	b117      	cbz	r7, 80229c4 <_strtoull_l.isra.0+0x10c>
 80229be:	4240      	negs	r0, r0
 80229c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80229c4:	f1b9 0f00 	cmp.w	r9, #0
 80229c8:	d0f5      	beq.n	80229b6 <_strtoull_l.isra.0+0xfe>
 80229ca:	b10b      	cbz	r3, 80229d0 <_strtoull_l.isra.0+0x118>
 80229cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80229d0:	f8c9 8000 	str.w	r8, [r9]
 80229d4:	e7ef      	b.n	80229b6 <_strtoull_l.isra.0+0xfe>
 80229d6:	2430      	movs	r4, #48	; 0x30
 80229d8:	2e00      	cmp	r6, #0
 80229da:	d190      	bne.n	80228fe <_strtoull_l.isra.0+0x46>
 80229dc:	2608      	movs	r6, #8
 80229de:	e78e      	b.n	80228fe <_strtoull_l.isra.0+0x46>
 80229e0:	2c30      	cmp	r4, #48	; 0x30
 80229e2:	d084      	beq.n	80228ee <_strtoull_l.isra.0+0x36>
 80229e4:	260a      	movs	r6, #10
 80229e6:	e78a      	b.n	80228fe <_strtoull_l.isra.0+0x46>
 80229e8:	08028d49 	.word	0x08028d49

080229ec <_strtoull_r>:
 80229ec:	f7ff bf64 	b.w	80228b8 <_strtoull_l.isra.0>

080229f0 <__swbuf_r>:
 80229f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229f2:	460e      	mov	r6, r1
 80229f4:	4614      	mov	r4, r2
 80229f6:	4605      	mov	r5, r0
 80229f8:	b118      	cbz	r0, 8022a02 <__swbuf_r+0x12>
 80229fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80229fc:	b90b      	cbnz	r3, 8022a02 <__swbuf_r+0x12>
 80229fe:	f7fc f9d3 	bl	801eda8 <__sinit>
 8022a02:	69a3      	ldr	r3, [r4, #24]
 8022a04:	60a3      	str	r3, [r4, #8]
 8022a06:	89a3      	ldrh	r3, [r4, #12]
 8022a08:	0719      	lsls	r1, r3, #28
 8022a0a:	d529      	bpl.n	8022a60 <__swbuf_r+0x70>
 8022a0c:	6923      	ldr	r3, [r4, #16]
 8022a0e:	b33b      	cbz	r3, 8022a60 <__swbuf_r+0x70>
 8022a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022a14:	b2f6      	uxtb	r6, r6
 8022a16:	049a      	lsls	r2, r3, #18
 8022a18:	4637      	mov	r7, r6
 8022a1a:	d52a      	bpl.n	8022a72 <__swbuf_r+0x82>
 8022a1c:	6823      	ldr	r3, [r4, #0]
 8022a1e:	6920      	ldr	r0, [r4, #16]
 8022a20:	1a18      	subs	r0, r3, r0
 8022a22:	6963      	ldr	r3, [r4, #20]
 8022a24:	4283      	cmp	r3, r0
 8022a26:	dc04      	bgt.n	8022a32 <__swbuf_r+0x42>
 8022a28:	4621      	mov	r1, r4
 8022a2a:	4628      	mov	r0, r5
 8022a2c:	f7fc f950 	bl	801ecd0 <_fflush_r>
 8022a30:	b9e0      	cbnz	r0, 8022a6c <__swbuf_r+0x7c>
 8022a32:	68a3      	ldr	r3, [r4, #8]
 8022a34:	3b01      	subs	r3, #1
 8022a36:	60a3      	str	r3, [r4, #8]
 8022a38:	6823      	ldr	r3, [r4, #0]
 8022a3a:	1c5a      	adds	r2, r3, #1
 8022a3c:	6022      	str	r2, [r4, #0]
 8022a3e:	701e      	strb	r6, [r3, #0]
 8022a40:	6962      	ldr	r2, [r4, #20]
 8022a42:	1c43      	adds	r3, r0, #1
 8022a44:	429a      	cmp	r2, r3
 8022a46:	d004      	beq.n	8022a52 <__swbuf_r+0x62>
 8022a48:	89a3      	ldrh	r3, [r4, #12]
 8022a4a:	07db      	lsls	r3, r3, #31
 8022a4c:	d506      	bpl.n	8022a5c <__swbuf_r+0x6c>
 8022a4e:	2e0a      	cmp	r6, #10
 8022a50:	d104      	bne.n	8022a5c <__swbuf_r+0x6c>
 8022a52:	4621      	mov	r1, r4
 8022a54:	4628      	mov	r0, r5
 8022a56:	f7fc f93b 	bl	801ecd0 <_fflush_r>
 8022a5a:	b938      	cbnz	r0, 8022a6c <__swbuf_r+0x7c>
 8022a5c:	4638      	mov	r0, r7
 8022a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022a60:	4621      	mov	r1, r4
 8022a62:	4628      	mov	r0, r5
 8022a64:	f7fb f9c2 	bl	801ddec <__swsetup_r>
 8022a68:	2800      	cmp	r0, #0
 8022a6a:	d0d1      	beq.n	8022a10 <__swbuf_r+0x20>
 8022a6c:	f04f 37ff 	mov.w	r7, #4294967295
 8022a70:	e7f4      	b.n	8022a5c <__swbuf_r+0x6c>
 8022a72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022a76:	81a3      	strh	r3, [r4, #12]
 8022a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8022a7e:	6663      	str	r3, [r4, #100]	; 0x64
 8022a80:	e7cc      	b.n	8022a1c <__swbuf_r+0x2c>
	...

08022a84 <_wcrtomb_r>:
 8022a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a86:	4c09      	ldr	r4, [pc, #36]	; (8022aac <_wcrtomb_r+0x28>)
 8022a88:	b085      	sub	sp, #20
 8022a8a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8022a8e:	4605      	mov	r5, r0
 8022a90:	461e      	mov	r6, r3
 8022a92:	b909      	cbnz	r1, 8022a98 <_wcrtomb_r+0x14>
 8022a94:	460a      	mov	r2, r1
 8022a96:	a901      	add	r1, sp, #4
 8022a98:	47b8      	blx	r7
 8022a9a:	1c43      	adds	r3, r0, #1
 8022a9c:	bf01      	itttt	eq
 8022a9e:	2300      	moveq	r3, #0
 8022aa0:	6033      	streq	r3, [r6, #0]
 8022aa2:	238a      	moveq	r3, #138	; 0x8a
 8022aa4:	602b      	streq	r3, [r5, #0]
 8022aa6:	b005      	add	sp, #20
 8022aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022aaa:	bf00      	nop
 8022aac:	200008e0 	.word	0x200008e0

08022ab0 <__ascii_wctomb>:
 8022ab0:	b149      	cbz	r1, 8022ac6 <__ascii_wctomb+0x16>
 8022ab2:	2aff      	cmp	r2, #255	; 0xff
 8022ab4:	bf85      	ittet	hi
 8022ab6:	238a      	movhi	r3, #138	; 0x8a
 8022ab8:	6003      	strhi	r3, [r0, #0]
 8022aba:	700a      	strbls	r2, [r1, #0]
 8022abc:	f04f 30ff 	movhi.w	r0, #4294967295
 8022ac0:	bf98      	it	ls
 8022ac2:	2001      	movls	r0, #1
 8022ac4:	4770      	bx	lr
 8022ac6:	4608      	mov	r0, r1
 8022ac8:	4770      	bx	lr

08022aca <abort>:
 8022aca:	b508      	push	{r3, lr}
 8022acc:	2006      	movs	r0, #6
 8022ace:	f000 f82d 	bl	8022b2c <raise>
 8022ad2:	2001      	movs	r0, #1
 8022ad4:	f7e1 f854 	bl	8003b80 <_exit>

08022ad8 <_raise_r>:
 8022ad8:	291f      	cmp	r1, #31
 8022ada:	b538      	push	{r3, r4, r5, lr}
 8022adc:	4604      	mov	r4, r0
 8022ade:	460d      	mov	r5, r1
 8022ae0:	d904      	bls.n	8022aec <_raise_r+0x14>
 8022ae2:	2316      	movs	r3, #22
 8022ae4:	6003      	str	r3, [r0, #0]
 8022ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8022aea:	bd38      	pop	{r3, r4, r5, pc}
 8022aec:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8022af0:	b112      	cbz	r2, 8022af8 <_raise_r+0x20>
 8022af2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022af6:	b94b      	cbnz	r3, 8022b0c <_raise_r+0x34>
 8022af8:	4620      	mov	r0, r4
 8022afa:	f000 f831 	bl	8022b60 <_getpid_r>
 8022afe:	462a      	mov	r2, r5
 8022b00:	4601      	mov	r1, r0
 8022b02:	4620      	mov	r0, r4
 8022b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022b08:	f000 b818 	b.w	8022b3c <_kill_r>
 8022b0c:	2b01      	cmp	r3, #1
 8022b0e:	d00a      	beq.n	8022b26 <_raise_r+0x4e>
 8022b10:	1c59      	adds	r1, r3, #1
 8022b12:	d103      	bne.n	8022b1c <_raise_r+0x44>
 8022b14:	2316      	movs	r3, #22
 8022b16:	6003      	str	r3, [r0, #0]
 8022b18:	2001      	movs	r0, #1
 8022b1a:	e7e6      	b.n	8022aea <_raise_r+0x12>
 8022b1c:	2400      	movs	r4, #0
 8022b1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022b22:	4628      	mov	r0, r5
 8022b24:	4798      	blx	r3
 8022b26:	2000      	movs	r0, #0
 8022b28:	e7df      	b.n	8022aea <_raise_r+0x12>
	...

08022b2c <raise>:
 8022b2c:	4b02      	ldr	r3, [pc, #8]	; (8022b38 <raise+0xc>)
 8022b2e:	4601      	mov	r1, r0
 8022b30:	6818      	ldr	r0, [r3, #0]
 8022b32:	f7ff bfd1 	b.w	8022ad8 <_raise_r>
 8022b36:	bf00      	nop
 8022b38:	20000038 	.word	0x20000038

08022b3c <_kill_r>:
 8022b3c:	b538      	push	{r3, r4, r5, lr}
 8022b3e:	4d07      	ldr	r5, [pc, #28]	; (8022b5c <_kill_r+0x20>)
 8022b40:	2300      	movs	r3, #0
 8022b42:	4604      	mov	r4, r0
 8022b44:	4608      	mov	r0, r1
 8022b46:	4611      	mov	r1, r2
 8022b48:	602b      	str	r3, [r5, #0]
 8022b4a:	f7e1 f807 	bl	8003b5c <_kill>
 8022b4e:	1c43      	adds	r3, r0, #1
 8022b50:	d102      	bne.n	8022b58 <_kill_r+0x1c>
 8022b52:	682b      	ldr	r3, [r5, #0]
 8022b54:	b103      	cbz	r3, 8022b58 <_kill_r+0x1c>
 8022b56:	6023      	str	r3, [r4, #0]
 8022b58:	bd38      	pop	{r3, r4, r5, pc}
 8022b5a:	bf00      	nop
 8022b5c:	2000be30 	.word	0x2000be30

08022b60 <_getpid_r>:
 8022b60:	f7e0 bff4 	b.w	8003b4c <_getpid>

08022b64 <pow>:
 8022b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b68:	ec59 8b10 	vmov	r8, r9, d0
 8022b6c:	ec57 6b11 	vmov	r6, r7, d1
 8022b70:	f000 f8a6 	bl	8022cc0 <__ieee754_pow>
 8022b74:	4b4e      	ldr	r3, [pc, #312]	; (8022cb0 <pow+0x14c>)
 8022b76:	f993 3000 	ldrsb.w	r3, [r3]
 8022b7a:	3301      	adds	r3, #1
 8022b7c:	ec55 4b10 	vmov	r4, r5, d0
 8022b80:	d015      	beq.n	8022bae <pow+0x4a>
 8022b82:	4632      	mov	r2, r6
 8022b84:	463b      	mov	r3, r7
 8022b86:	4630      	mov	r0, r6
 8022b88:	4639      	mov	r1, r7
 8022b8a:	f7dd ffff 	bl	8000b8c <__aeabi_dcmpun>
 8022b8e:	b970      	cbnz	r0, 8022bae <pow+0x4a>
 8022b90:	4642      	mov	r2, r8
 8022b92:	464b      	mov	r3, r9
 8022b94:	4640      	mov	r0, r8
 8022b96:	4649      	mov	r1, r9
 8022b98:	f7dd fff8 	bl	8000b8c <__aeabi_dcmpun>
 8022b9c:	2200      	movs	r2, #0
 8022b9e:	2300      	movs	r3, #0
 8022ba0:	b148      	cbz	r0, 8022bb6 <pow+0x52>
 8022ba2:	4630      	mov	r0, r6
 8022ba4:	4639      	mov	r1, r7
 8022ba6:	f7dd ffbf 	bl	8000b28 <__aeabi_dcmpeq>
 8022baa:	2800      	cmp	r0, #0
 8022bac:	d17d      	bne.n	8022caa <pow+0x146>
 8022bae:	ec45 4b10 	vmov	d0, r4, r5
 8022bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022bb6:	4640      	mov	r0, r8
 8022bb8:	4649      	mov	r1, r9
 8022bba:	f7dd ffb5 	bl	8000b28 <__aeabi_dcmpeq>
 8022bbe:	b1e0      	cbz	r0, 8022bfa <pow+0x96>
 8022bc0:	2200      	movs	r2, #0
 8022bc2:	2300      	movs	r3, #0
 8022bc4:	4630      	mov	r0, r6
 8022bc6:	4639      	mov	r1, r7
 8022bc8:	f7dd ffae 	bl	8000b28 <__aeabi_dcmpeq>
 8022bcc:	2800      	cmp	r0, #0
 8022bce:	d16c      	bne.n	8022caa <pow+0x146>
 8022bd0:	ec47 6b10 	vmov	d0, r6, r7
 8022bd4:	f000 fe53 	bl	802387e <finite>
 8022bd8:	2800      	cmp	r0, #0
 8022bda:	d0e8      	beq.n	8022bae <pow+0x4a>
 8022bdc:	2200      	movs	r2, #0
 8022bde:	2300      	movs	r3, #0
 8022be0:	4630      	mov	r0, r6
 8022be2:	4639      	mov	r1, r7
 8022be4:	f7dd ffaa 	bl	8000b3c <__aeabi_dcmplt>
 8022be8:	2800      	cmp	r0, #0
 8022bea:	d0e0      	beq.n	8022bae <pow+0x4a>
 8022bec:	f7fb ffdc 	bl	801eba8 <__errno>
 8022bf0:	2321      	movs	r3, #33	; 0x21
 8022bf2:	6003      	str	r3, [r0, #0]
 8022bf4:	2400      	movs	r4, #0
 8022bf6:	4d2f      	ldr	r5, [pc, #188]	; (8022cb4 <pow+0x150>)
 8022bf8:	e7d9      	b.n	8022bae <pow+0x4a>
 8022bfa:	ec45 4b10 	vmov	d0, r4, r5
 8022bfe:	f000 fe3e 	bl	802387e <finite>
 8022c02:	bbb8      	cbnz	r0, 8022c74 <pow+0x110>
 8022c04:	ec49 8b10 	vmov	d0, r8, r9
 8022c08:	f000 fe39 	bl	802387e <finite>
 8022c0c:	b390      	cbz	r0, 8022c74 <pow+0x110>
 8022c0e:	ec47 6b10 	vmov	d0, r6, r7
 8022c12:	f000 fe34 	bl	802387e <finite>
 8022c16:	b368      	cbz	r0, 8022c74 <pow+0x110>
 8022c18:	4622      	mov	r2, r4
 8022c1a:	462b      	mov	r3, r5
 8022c1c:	4620      	mov	r0, r4
 8022c1e:	4629      	mov	r1, r5
 8022c20:	f7dd ffb4 	bl	8000b8c <__aeabi_dcmpun>
 8022c24:	b160      	cbz	r0, 8022c40 <pow+0xdc>
 8022c26:	f7fb ffbf 	bl	801eba8 <__errno>
 8022c2a:	2321      	movs	r3, #33	; 0x21
 8022c2c:	6003      	str	r3, [r0, #0]
 8022c2e:	2200      	movs	r2, #0
 8022c30:	2300      	movs	r3, #0
 8022c32:	4610      	mov	r0, r2
 8022c34:	4619      	mov	r1, r3
 8022c36:	f7dd fe39 	bl	80008ac <__aeabi_ddiv>
 8022c3a:	4604      	mov	r4, r0
 8022c3c:	460d      	mov	r5, r1
 8022c3e:	e7b6      	b.n	8022bae <pow+0x4a>
 8022c40:	f7fb ffb2 	bl	801eba8 <__errno>
 8022c44:	2322      	movs	r3, #34	; 0x22
 8022c46:	6003      	str	r3, [r0, #0]
 8022c48:	2200      	movs	r2, #0
 8022c4a:	2300      	movs	r3, #0
 8022c4c:	4640      	mov	r0, r8
 8022c4e:	4649      	mov	r1, r9
 8022c50:	f7dd ff74 	bl	8000b3c <__aeabi_dcmplt>
 8022c54:	2400      	movs	r4, #0
 8022c56:	b158      	cbz	r0, 8022c70 <pow+0x10c>
 8022c58:	ec47 6b10 	vmov	d0, r6, r7
 8022c5c:	f000 fe24 	bl	80238a8 <rint>
 8022c60:	4632      	mov	r2, r6
 8022c62:	ec51 0b10 	vmov	r0, r1, d0
 8022c66:	463b      	mov	r3, r7
 8022c68:	f7dd ff5e 	bl	8000b28 <__aeabi_dcmpeq>
 8022c6c:	2800      	cmp	r0, #0
 8022c6e:	d0c2      	beq.n	8022bf6 <pow+0x92>
 8022c70:	4d11      	ldr	r5, [pc, #68]	; (8022cb8 <pow+0x154>)
 8022c72:	e79c      	b.n	8022bae <pow+0x4a>
 8022c74:	2200      	movs	r2, #0
 8022c76:	2300      	movs	r3, #0
 8022c78:	4620      	mov	r0, r4
 8022c7a:	4629      	mov	r1, r5
 8022c7c:	f7dd ff54 	bl	8000b28 <__aeabi_dcmpeq>
 8022c80:	2800      	cmp	r0, #0
 8022c82:	d094      	beq.n	8022bae <pow+0x4a>
 8022c84:	ec49 8b10 	vmov	d0, r8, r9
 8022c88:	f000 fdf9 	bl	802387e <finite>
 8022c8c:	2800      	cmp	r0, #0
 8022c8e:	d08e      	beq.n	8022bae <pow+0x4a>
 8022c90:	ec47 6b10 	vmov	d0, r6, r7
 8022c94:	f000 fdf3 	bl	802387e <finite>
 8022c98:	2800      	cmp	r0, #0
 8022c9a:	d088      	beq.n	8022bae <pow+0x4a>
 8022c9c:	f7fb ff84 	bl	801eba8 <__errno>
 8022ca0:	2322      	movs	r3, #34	; 0x22
 8022ca2:	6003      	str	r3, [r0, #0]
 8022ca4:	2400      	movs	r4, #0
 8022ca6:	2500      	movs	r5, #0
 8022ca8:	e781      	b.n	8022bae <pow+0x4a>
 8022caa:	4d04      	ldr	r5, [pc, #16]	; (8022cbc <pow+0x158>)
 8022cac:	2400      	movs	r4, #0
 8022cae:	e77e      	b.n	8022bae <pow+0x4a>
 8022cb0:	20000a4c 	.word	0x20000a4c
 8022cb4:	fff00000 	.word	0xfff00000
 8022cb8:	7ff00000 	.word	0x7ff00000
 8022cbc:	3ff00000 	.word	0x3ff00000

08022cc0 <__ieee754_pow>:
 8022cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cc4:	ed2d 8b06 	vpush	{d8-d10}
 8022cc8:	b08d      	sub	sp, #52	; 0x34
 8022cca:	ed8d 1b02 	vstr	d1, [sp, #8]
 8022cce:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8022cd2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8022cd6:	ea56 0100 	orrs.w	r1, r6, r0
 8022cda:	ec53 2b10 	vmov	r2, r3, d0
 8022cde:	f000 84d1 	beq.w	8023684 <__ieee754_pow+0x9c4>
 8022ce2:	497f      	ldr	r1, [pc, #508]	; (8022ee0 <__ieee754_pow+0x220>)
 8022ce4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8022ce8:	428c      	cmp	r4, r1
 8022cea:	ee10 8a10 	vmov	r8, s0
 8022cee:	4699      	mov	r9, r3
 8022cf0:	dc09      	bgt.n	8022d06 <__ieee754_pow+0x46>
 8022cf2:	d103      	bne.n	8022cfc <__ieee754_pow+0x3c>
 8022cf4:	b97a      	cbnz	r2, 8022d16 <__ieee754_pow+0x56>
 8022cf6:	42a6      	cmp	r6, r4
 8022cf8:	dd02      	ble.n	8022d00 <__ieee754_pow+0x40>
 8022cfa:	e00c      	b.n	8022d16 <__ieee754_pow+0x56>
 8022cfc:	428e      	cmp	r6, r1
 8022cfe:	dc02      	bgt.n	8022d06 <__ieee754_pow+0x46>
 8022d00:	428e      	cmp	r6, r1
 8022d02:	d110      	bne.n	8022d26 <__ieee754_pow+0x66>
 8022d04:	b178      	cbz	r0, 8022d26 <__ieee754_pow+0x66>
 8022d06:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022d0a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8022d0e:	ea54 0308 	orrs.w	r3, r4, r8
 8022d12:	f000 84b7 	beq.w	8023684 <__ieee754_pow+0x9c4>
 8022d16:	4873      	ldr	r0, [pc, #460]	; (8022ee4 <__ieee754_pow+0x224>)
 8022d18:	b00d      	add	sp, #52	; 0x34
 8022d1a:	ecbd 8b06 	vpop	{d8-d10}
 8022d1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d22:	f000 bdb9 	b.w	8023898 <nan>
 8022d26:	f1b9 0f00 	cmp.w	r9, #0
 8022d2a:	da36      	bge.n	8022d9a <__ieee754_pow+0xda>
 8022d2c:	496e      	ldr	r1, [pc, #440]	; (8022ee8 <__ieee754_pow+0x228>)
 8022d2e:	428e      	cmp	r6, r1
 8022d30:	dc51      	bgt.n	8022dd6 <__ieee754_pow+0x116>
 8022d32:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8022d36:	428e      	cmp	r6, r1
 8022d38:	f340 84af 	ble.w	802369a <__ieee754_pow+0x9da>
 8022d3c:	1531      	asrs	r1, r6, #20
 8022d3e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8022d42:	2914      	cmp	r1, #20
 8022d44:	dd0f      	ble.n	8022d66 <__ieee754_pow+0xa6>
 8022d46:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8022d4a:	fa20 fc01 	lsr.w	ip, r0, r1
 8022d4e:	fa0c f101 	lsl.w	r1, ip, r1
 8022d52:	4281      	cmp	r1, r0
 8022d54:	f040 84a1 	bne.w	802369a <__ieee754_pow+0x9da>
 8022d58:	f00c 0c01 	and.w	ip, ip, #1
 8022d5c:	f1cc 0102 	rsb	r1, ip, #2
 8022d60:	9100      	str	r1, [sp, #0]
 8022d62:	b180      	cbz	r0, 8022d86 <__ieee754_pow+0xc6>
 8022d64:	e059      	b.n	8022e1a <__ieee754_pow+0x15a>
 8022d66:	2800      	cmp	r0, #0
 8022d68:	d155      	bne.n	8022e16 <__ieee754_pow+0x156>
 8022d6a:	f1c1 0114 	rsb	r1, r1, #20
 8022d6e:	fa46 fc01 	asr.w	ip, r6, r1
 8022d72:	fa0c f101 	lsl.w	r1, ip, r1
 8022d76:	42b1      	cmp	r1, r6
 8022d78:	f040 848c 	bne.w	8023694 <__ieee754_pow+0x9d4>
 8022d7c:	f00c 0c01 	and.w	ip, ip, #1
 8022d80:	f1cc 0102 	rsb	r1, ip, #2
 8022d84:	9100      	str	r1, [sp, #0]
 8022d86:	4959      	ldr	r1, [pc, #356]	; (8022eec <__ieee754_pow+0x22c>)
 8022d88:	428e      	cmp	r6, r1
 8022d8a:	d12d      	bne.n	8022de8 <__ieee754_pow+0x128>
 8022d8c:	2f00      	cmp	r7, #0
 8022d8e:	da79      	bge.n	8022e84 <__ieee754_pow+0x1c4>
 8022d90:	4956      	ldr	r1, [pc, #344]	; (8022eec <__ieee754_pow+0x22c>)
 8022d92:	2000      	movs	r0, #0
 8022d94:	f7dd fd8a 	bl	80008ac <__aeabi_ddiv>
 8022d98:	e016      	b.n	8022dc8 <__ieee754_pow+0x108>
 8022d9a:	2100      	movs	r1, #0
 8022d9c:	9100      	str	r1, [sp, #0]
 8022d9e:	2800      	cmp	r0, #0
 8022da0:	d13b      	bne.n	8022e1a <__ieee754_pow+0x15a>
 8022da2:	494f      	ldr	r1, [pc, #316]	; (8022ee0 <__ieee754_pow+0x220>)
 8022da4:	428e      	cmp	r6, r1
 8022da6:	d1ee      	bne.n	8022d86 <__ieee754_pow+0xc6>
 8022da8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8022dac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8022db0:	ea53 0308 	orrs.w	r3, r3, r8
 8022db4:	f000 8466 	beq.w	8023684 <__ieee754_pow+0x9c4>
 8022db8:	4b4d      	ldr	r3, [pc, #308]	; (8022ef0 <__ieee754_pow+0x230>)
 8022dba:	429c      	cmp	r4, r3
 8022dbc:	dd0d      	ble.n	8022dda <__ieee754_pow+0x11a>
 8022dbe:	2f00      	cmp	r7, #0
 8022dc0:	f280 8464 	bge.w	802368c <__ieee754_pow+0x9cc>
 8022dc4:	2000      	movs	r0, #0
 8022dc6:	2100      	movs	r1, #0
 8022dc8:	ec41 0b10 	vmov	d0, r0, r1
 8022dcc:	b00d      	add	sp, #52	; 0x34
 8022dce:	ecbd 8b06 	vpop	{d8-d10}
 8022dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dd6:	2102      	movs	r1, #2
 8022dd8:	e7e0      	b.n	8022d9c <__ieee754_pow+0xdc>
 8022dda:	2f00      	cmp	r7, #0
 8022ddc:	daf2      	bge.n	8022dc4 <__ieee754_pow+0x104>
 8022dde:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8022de2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022de6:	e7ef      	b.n	8022dc8 <__ieee754_pow+0x108>
 8022de8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8022dec:	d104      	bne.n	8022df8 <__ieee754_pow+0x138>
 8022dee:	4610      	mov	r0, r2
 8022df0:	4619      	mov	r1, r3
 8022df2:	f7dd fc31 	bl	8000658 <__aeabi_dmul>
 8022df6:	e7e7      	b.n	8022dc8 <__ieee754_pow+0x108>
 8022df8:	493e      	ldr	r1, [pc, #248]	; (8022ef4 <__ieee754_pow+0x234>)
 8022dfa:	428f      	cmp	r7, r1
 8022dfc:	d10d      	bne.n	8022e1a <__ieee754_pow+0x15a>
 8022dfe:	f1b9 0f00 	cmp.w	r9, #0
 8022e02:	db0a      	blt.n	8022e1a <__ieee754_pow+0x15a>
 8022e04:	ec43 2b10 	vmov	d0, r2, r3
 8022e08:	b00d      	add	sp, #52	; 0x34
 8022e0a:	ecbd 8b06 	vpop	{d8-d10}
 8022e0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e12:	f000 bc77 	b.w	8023704 <__ieee754_sqrt>
 8022e16:	2100      	movs	r1, #0
 8022e18:	9100      	str	r1, [sp, #0]
 8022e1a:	ec43 2b10 	vmov	d0, r2, r3
 8022e1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022e22:	f000 fd23 	bl	802386c <fabs>
 8022e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022e2a:	ec51 0b10 	vmov	r0, r1, d0
 8022e2e:	f1b8 0f00 	cmp.w	r8, #0
 8022e32:	d12a      	bne.n	8022e8a <__ieee754_pow+0x1ca>
 8022e34:	b12c      	cbz	r4, 8022e42 <__ieee754_pow+0x182>
 8022e36:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8022eec <__ieee754_pow+0x22c>
 8022e3a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8022e3e:	45e6      	cmp	lr, ip
 8022e40:	d123      	bne.n	8022e8a <__ieee754_pow+0x1ca>
 8022e42:	2f00      	cmp	r7, #0
 8022e44:	da05      	bge.n	8022e52 <__ieee754_pow+0x192>
 8022e46:	4602      	mov	r2, r0
 8022e48:	460b      	mov	r3, r1
 8022e4a:	2000      	movs	r0, #0
 8022e4c:	4927      	ldr	r1, [pc, #156]	; (8022eec <__ieee754_pow+0x22c>)
 8022e4e:	f7dd fd2d 	bl	80008ac <__aeabi_ddiv>
 8022e52:	f1b9 0f00 	cmp.w	r9, #0
 8022e56:	dab7      	bge.n	8022dc8 <__ieee754_pow+0x108>
 8022e58:	9b00      	ldr	r3, [sp, #0]
 8022e5a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022e5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8022e62:	4323      	orrs	r3, r4
 8022e64:	d108      	bne.n	8022e78 <__ieee754_pow+0x1b8>
 8022e66:	4602      	mov	r2, r0
 8022e68:	460b      	mov	r3, r1
 8022e6a:	4610      	mov	r0, r2
 8022e6c:	4619      	mov	r1, r3
 8022e6e:	f7dd fa3b 	bl	80002e8 <__aeabi_dsub>
 8022e72:	4602      	mov	r2, r0
 8022e74:	460b      	mov	r3, r1
 8022e76:	e78d      	b.n	8022d94 <__ieee754_pow+0xd4>
 8022e78:	9b00      	ldr	r3, [sp, #0]
 8022e7a:	2b01      	cmp	r3, #1
 8022e7c:	d1a4      	bne.n	8022dc8 <__ieee754_pow+0x108>
 8022e7e:	4602      	mov	r2, r0
 8022e80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022e84:	4610      	mov	r0, r2
 8022e86:	4619      	mov	r1, r3
 8022e88:	e79e      	b.n	8022dc8 <__ieee754_pow+0x108>
 8022e8a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8022e8e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8022e92:	950a      	str	r5, [sp, #40]	; 0x28
 8022e94:	9d00      	ldr	r5, [sp, #0]
 8022e96:	46ac      	mov	ip, r5
 8022e98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022e9a:	ea5c 0505 	orrs.w	r5, ip, r5
 8022e9e:	d0e4      	beq.n	8022e6a <__ieee754_pow+0x1aa>
 8022ea0:	4b15      	ldr	r3, [pc, #84]	; (8022ef8 <__ieee754_pow+0x238>)
 8022ea2:	429e      	cmp	r6, r3
 8022ea4:	f340 80fc 	ble.w	80230a0 <__ieee754_pow+0x3e0>
 8022ea8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8022eac:	429e      	cmp	r6, r3
 8022eae:	4b10      	ldr	r3, [pc, #64]	; (8022ef0 <__ieee754_pow+0x230>)
 8022eb0:	dd07      	ble.n	8022ec2 <__ieee754_pow+0x202>
 8022eb2:	429c      	cmp	r4, r3
 8022eb4:	dc0a      	bgt.n	8022ecc <__ieee754_pow+0x20c>
 8022eb6:	2f00      	cmp	r7, #0
 8022eb8:	da84      	bge.n	8022dc4 <__ieee754_pow+0x104>
 8022eba:	a307      	add	r3, pc, #28	; (adr r3, 8022ed8 <__ieee754_pow+0x218>)
 8022ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ec0:	e795      	b.n	8022dee <__ieee754_pow+0x12e>
 8022ec2:	429c      	cmp	r4, r3
 8022ec4:	dbf7      	blt.n	8022eb6 <__ieee754_pow+0x1f6>
 8022ec6:	4b09      	ldr	r3, [pc, #36]	; (8022eec <__ieee754_pow+0x22c>)
 8022ec8:	429c      	cmp	r4, r3
 8022eca:	dd17      	ble.n	8022efc <__ieee754_pow+0x23c>
 8022ecc:	2f00      	cmp	r7, #0
 8022ece:	dcf4      	bgt.n	8022eba <__ieee754_pow+0x1fa>
 8022ed0:	e778      	b.n	8022dc4 <__ieee754_pow+0x104>
 8022ed2:	bf00      	nop
 8022ed4:	f3af 8000 	nop.w
 8022ed8:	8800759c 	.word	0x8800759c
 8022edc:	7e37e43c 	.word	0x7e37e43c
 8022ee0:	7ff00000 	.word	0x7ff00000
 8022ee4:	08029219 	.word	0x08029219
 8022ee8:	433fffff 	.word	0x433fffff
 8022eec:	3ff00000 	.word	0x3ff00000
 8022ef0:	3fefffff 	.word	0x3fefffff
 8022ef4:	3fe00000 	.word	0x3fe00000
 8022ef8:	41e00000 	.word	0x41e00000
 8022efc:	4b64      	ldr	r3, [pc, #400]	; (8023090 <__ieee754_pow+0x3d0>)
 8022efe:	2200      	movs	r2, #0
 8022f00:	f7dd f9f2 	bl	80002e8 <__aeabi_dsub>
 8022f04:	a356      	add	r3, pc, #344	; (adr r3, 8023060 <__ieee754_pow+0x3a0>)
 8022f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f0a:	4604      	mov	r4, r0
 8022f0c:	460d      	mov	r5, r1
 8022f0e:	f7dd fba3 	bl	8000658 <__aeabi_dmul>
 8022f12:	a355      	add	r3, pc, #340	; (adr r3, 8023068 <__ieee754_pow+0x3a8>)
 8022f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f18:	4606      	mov	r6, r0
 8022f1a:	460f      	mov	r7, r1
 8022f1c:	4620      	mov	r0, r4
 8022f1e:	4629      	mov	r1, r5
 8022f20:	f7dd fb9a 	bl	8000658 <__aeabi_dmul>
 8022f24:	4b5b      	ldr	r3, [pc, #364]	; (8023094 <__ieee754_pow+0x3d4>)
 8022f26:	4682      	mov	sl, r0
 8022f28:	468b      	mov	fp, r1
 8022f2a:	2200      	movs	r2, #0
 8022f2c:	4620      	mov	r0, r4
 8022f2e:	4629      	mov	r1, r5
 8022f30:	f7dd fb92 	bl	8000658 <__aeabi_dmul>
 8022f34:	4602      	mov	r2, r0
 8022f36:	460b      	mov	r3, r1
 8022f38:	a14d      	add	r1, pc, #308	; (adr r1, 8023070 <__ieee754_pow+0x3b0>)
 8022f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022f3e:	f7dd f9d3 	bl	80002e8 <__aeabi_dsub>
 8022f42:	4622      	mov	r2, r4
 8022f44:	462b      	mov	r3, r5
 8022f46:	f7dd fb87 	bl	8000658 <__aeabi_dmul>
 8022f4a:	4602      	mov	r2, r0
 8022f4c:	460b      	mov	r3, r1
 8022f4e:	2000      	movs	r0, #0
 8022f50:	4951      	ldr	r1, [pc, #324]	; (8023098 <__ieee754_pow+0x3d8>)
 8022f52:	f7dd f9c9 	bl	80002e8 <__aeabi_dsub>
 8022f56:	4622      	mov	r2, r4
 8022f58:	4680      	mov	r8, r0
 8022f5a:	4689      	mov	r9, r1
 8022f5c:	462b      	mov	r3, r5
 8022f5e:	4620      	mov	r0, r4
 8022f60:	4629      	mov	r1, r5
 8022f62:	f7dd fb79 	bl	8000658 <__aeabi_dmul>
 8022f66:	4602      	mov	r2, r0
 8022f68:	460b      	mov	r3, r1
 8022f6a:	4640      	mov	r0, r8
 8022f6c:	4649      	mov	r1, r9
 8022f6e:	f7dd fb73 	bl	8000658 <__aeabi_dmul>
 8022f72:	a341      	add	r3, pc, #260	; (adr r3, 8023078 <__ieee754_pow+0x3b8>)
 8022f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f78:	f7dd fb6e 	bl	8000658 <__aeabi_dmul>
 8022f7c:	4602      	mov	r2, r0
 8022f7e:	460b      	mov	r3, r1
 8022f80:	4650      	mov	r0, sl
 8022f82:	4659      	mov	r1, fp
 8022f84:	f7dd f9b0 	bl	80002e8 <__aeabi_dsub>
 8022f88:	4602      	mov	r2, r0
 8022f8a:	460b      	mov	r3, r1
 8022f8c:	4680      	mov	r8, r0
 8022f8e:	4689      	mov	r9, r1
 8022f90:	4630      	mov	r0, r6
 8022f92:	4639      	mov	r1, r7
 8022f94:	f7dd f9aa 	bl	80002ec <__adddf3>
 8022f98:	2400      	movs	r4, #0
 8022f9a:	4632      	mov	r2, r6
 8022f9c:	463b      	mov	r3, r7
 8022f9e:	4620      	mov	r0, r4
 8022fa0:	460d      	mov	r5, r1
 8022fa2:	f7dd f9a1 	bl	80002e8 <__aeabi_dsub>
 8022fa6:	4602      	mov	r2, r0
 8022fa8:	460b      	mov	r3, r1
 8022faa:	4640      	mov	r0, r8
 8022fac:	4649      	mov	r1, r9
 8022fae:	f7dd f99b 	bl	80002e8 <__aeabi_dsub>
 8022fb2:	9b00      	ldr	r3, [sp, #0]
 8022fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022fb6:	3b01      	subs	r3, #1
 8022fb8:	4313      	orrs	r3, r2
 8022fba:	4682      	mov	sl, r0
 8022fbc:	468b      	mov	fp, r1
 8022fbe:	f040 81f1 	bne.w	80233a4 <__ieee754_pow+0x6e4>
 8022fc2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8023080 <__ieee754_pow+0x3c0>
 8022fc6:	eeb0 8a47 	vmov.f32	s16, s14
 8022fca:	eef0 8a67 	vmov.f32	s17, s15
 8022fce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8022fd2:	2600      	movs	r6, #0
 8022fd4:	4632      	mov	r2, r6
 8022fd6:	463b      	mov	r3, r7
 8022fd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022fdc:	f7dd f984 	bl	80002e8 <__aeabi_dsub>
 8022fe0:	4622      	mov	r2, r4
 8022fe2:	462b      	mov	r3, r5
 8022fe4:	f7dd fb38 	bl	8000658 <__aeabi_dmul>
 8022fe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022fec:	4680      	mov	r8, r0
 8022fee:	4689      	mov	r9, r1
 8022ff0:	4650      	mov	r0, sl
 8022ff2:	4659      	mov	r1, fp
 8022ff4:	f7dd fb30 	bl	8000658 <__aeabi_dmul>
 8022ff8:	4602      	mov	r2, r0
 8022ffa:	460b      	mov	r3, r1
 8022ffc:	4640      	mov	r0, r8
 8022ffe:	4649      	mov	r1, r9
 8023000:	f7dd f974 	bl	80002ec <__adddf3>
 8023004:	4632      	mov	r2, r6
 8023006:	463b      	mov	r3, r7
 8023008:	4680      	mov	r8, r0
 802300a:	4689      	mov	r9, r1
 802300c:	4620      	mov	r0, r4
 802300e:	4629      	mov	r1, r5
 8023010:	f7dd fb22 	bl	8000658 <__aeabi_dmul>
 8023014:	460b      	mov	r3, r1
 8023016:	4604      	mov	r4, r0
 8023018:	460d      	mov	r5, r1
 802301a:	4602      	mov	r2, r0
 802301c:	4649      	mov	r1, r9
 802301e:	4640      	mov	r0, r8
 8023020:	f7dd f964 	bl	80002ec <__adddf3>
 8023024:	4b1d      	ldr	r3, [pc, #116]	; (802309c <__ieee754_pow+0x3dc>)
 8023026:	4299      	cmp	r1, r3
 8023028:	ec45 4b19 	vmov	d9, r4, r5
 802302c:	4606      	mov	r6, r0
 802302e:	460f      	mov	r7, r1
 8023030:	468b      	mov	fp, r1
 8023032:	f340 82fe 	ble.w	8023632 <__ieee754_pow+0x972>
 8023036:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802303a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802303e:	4303      	orrs	r3, r0
 8023040:	f000 81f0 	beq.w	8023424 <__ieee754_pow+0x764>
 8023044:	a310      	add	r3, pc, #64	; (adr r3, 8023088 <__ieee754_pow+0x3c8>)
 8023046:	e9d3 2300 	ldrd	r2, r3, [r3]
 802304a:	ec51 0b18 	vmov	r0, r1, d8
 802304e:	f7dd fb03 	bl	8000658 <__aeabi_dmul>
 8023052:	a30d      	add	r3, pc, #52	; (adr r3, 8023088 <__ieee754_pow+0x3c8>)
 8023054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023058:	e6cb      	b.n	8022df2 <__ieee754_pow+0x132>
 802305a:	bf00      	nop
 802305c:	f3af 8000 	nop.w
 8023060:	60000000 	.word	0x60000000
 8023064:	3ff71547 	.word	0x3ff71547
 8023068:	f85ddf44 	.word	0xf85ddf44
 802306c:	3e54ae0b 	.word	0x3e54ae0b
 8023070:	55555555 	.word	0x55555555
 8023074:	3fd55555 	.word	0x3fd55555
 8023078:	652b82fe 	.word	0x652b82fe
 802307c:	3ff71547 	.word	0x3ff71547
 8023080:	00000000 	.word	0x00000000
 8023084:	bff00000 	.word	0xbff00000
 8023088:	8800759c 	.word	0x8800759c
 802308c:	7e37e43c 	.word	0x7e37e43c
 8023090:	3ff00000 	.word	0x3ff00000
 8023094:	3fd00000 	.word	0x3fd00000
 8023098:	3fe00000 	.word	0x3fe00000
 802309c:	408fffff 	.word	0x408fffff
 80230a0:	4bd7      	ldr	r3, [pc, #860]	; (8023400 <__ieee754_pow+0x740>)
 80230a2:	ea03 0309 	and.w	r3, r3, r9
 80230a6:	2200      	movs	r2, #0
 80230a8:	b92b      	cbnz	r3, 80230b6 <__ieee754_pow+0x3f6>
 80230aa:	4bd6      	ldr	r3, [pc, #856]	; (8023404 <__ieee754_pow+0x744>)
 80230ac:	f7dd fad4 	bl	8000658 <__aeabi_dmul>
 80230b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80230b4:	460c      	mov	r4, r1
 80230b6:	1523      	asrs	r3, r4, #20
 80230b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80230bc:	4413      	add	r3, r2
 80230be:	9309      	str	r3, [sp, #36]	; 0x24
 80230c0:	4bd1      	ldr	r3, [pc, #836]	; (8023408 <__ieee754_pow+0x748>)
 80230c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80230c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80230ca:	429c      	cmp	r4, r3
 80230cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80230d0:	dd08      	ble.n	80230e4 <__ieee754_pow+0x424>
 80230d2:	4bce      	ldr	r3, [pc, #824]	; (802340c <__ieee754_pow+0x74c>)
 80230d4:	429c      	cmp	r4, r3
 80230d6:	f340 8163 	ble.w	80233a0 <__ieee754_pow+0x6e0>
 80230da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80230dc:	3301      	adds	r3, #1
 80230de:	9309      	str	r3, [sp, #36]	; 0x24
 80230e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80230e4:	2400      	movs	r4, #0
 80230e6:	00e3      	lsls	r3, r4, #3
 80230e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80230ea:	4bc9      	ldr	r3, [pc, #804]	; (8023410 <__ieee754_pow+0x750>)
 80230ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80230f0:	ed93 7b00 	vldr	d7, [r3]
 80230f4:	4629      	mov	r1, r5
 80230f6:	ec53 2b17 	vmov	r2, r3, d7
 80230fa:	eeb0 8a47 	vmov.f32	s16, s14
 80230fe:	eef0 8a67 	vmov.f32	s17, s15
 8023102:	4682      	mov	sl, r0
 8023104:	f7dd f8f0 	bl	80002e8 <__aeabi_dsub>
 8023108:	4652      	mov	r2, sl
 802310a:	4606      	mov	r6, r0
 802310c:	460f      	mov	r7, r1
 802310e:	462b      	mov	r3, r5
 8023110:	ec51 0b18 	vmov	r0, r1, d8
 8023114:	f7dd f8ea 	bl	80002ec <__adddf3>
 8023118:	4602      	mov	r2, r0
 802311a:	460b      	mov	r3, r1
 802311c:	2000      	movs	r0, #0
 802311e:	49bd      	ldr	r1, [pc, #756]	; (8023414 <__ieee754_pow+0x754>)
 8023120:	f7dd fbc4 	bl	80008ac <__aeabi_ddiv>
 8023124:	ec41 0b19 	vmov	d9, r0, r1
 8023128:	4602      	mov	r2, r0
 802312a:	460b      	mov	r3, r1
 802312c:	4630      	mov	r0, r6
 802312e:	4639      	mov	r1, r7
 8023130:	f7dd fa92 	bl	8000658 <__aeabi_dmul>
 8023134:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023138:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802313c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023140:	2300      	movs	r3, #0
 8023142:	9304      	str	r3, [sp, #16]
 8023144:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8023148:	46ab      	mov	fp, r5
 802314a:	106d      	asrs	r5, r5, #1
 802314c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8023150:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8023154:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8023158:	2200      	movs	r2, #0
 802315a:	4640      	mov	r0, r8
 802315c:	4649      	mov	r1, r9
 802315e:	4614      	mov	r4, r2
 8023160:	461d      	mov	r5, r3
 8023162:	f7dd fa79 	bl	8000658 <__aeabi_dmul>
 8023166:	4602      	mov	r2, r0
 8023168:	460b      	mov	r3, r1
 802316a:	4630      	mov	r0, r6
 802316c:	4639      	mov	r1, r7
 802316e:	f7dd f8bb 	bl	80002e8 <__aeabi_dsub>
 8023172:	ec53 2b18 	vmov	r2, r3, d8
 8023176:	4606      	mov	r6, r0
 8023178:	460f      	mov	r7, r1
 802317a:	4620      	mov	r0, r4
 802317c:	4629      	mov	r1, r5
 802317e:	f7dd f8b3 	bl	80002e8 <__aeabi_dsub>
 8023182:	4602      	mov	r2, r0
 8023184:	460b      	mov	r3, r1
 8023186:	4650      	mov	r0, sl
 8023188:	4659      	mov	r1, fp
 802318a:	f7dd f8ad 	bl	80002e8 <__aeabi_dsub>
 802318e:	4642      	mov	r2, r8
 8023190:	464b      	mov	r3, r9
 8023192:	f7dd fa61 	bl	8000658 <__aeabi_dmul>
 8023196:	4602      	mov	r2, r0
 8023198:	460b      	mov	r3, r1
 802319a:	4630      	mov	r0, r6
 802319c:	4639      	mov	r1, r7
 802319e:	f7dd f8a3 	bl	80002e8 <__aeabi_dsub>
 80231a2:	ec53 2b19 	vmov	r2, r3, d9
 80231a6:	f7dd fa57 	bl	8000658 <__aeabi_dmul>
 80231aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80231ae:	ec41 0b18 	vmov	d8, r0, r1
 80231b2:	4610      	mov	r0, r2
 80231b4:	4619      	mov	r1, r3
 80231b6:	f7dd fa4f 	bl	8000658 <__aeabi_dmul>
 80231ba:	a37d      	add	r3, pc, #500	; (adr r3, 80233b0 <__ieee754_pow+0x6f0>)
 80231bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231c0:	4604      	mov	r4, r0
 80231c2:	460d      	mov	r5, r1
 80231c4:	f7dd fa48 	bl	8000658 <__aeabi_dmul>
 80231c8:	a37b      	add	r3, pc, #492	; (adr r3, 80233b8 <__ieee754_pow+0x6f8>)
 80231ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231ce:	f7dd f88d 	bl	80002ec <__adddf3>
 80231d2:	4622      	mov	r2, r4
 80231d4:	462b      	mov	r3, r5
 80231d6:	f7dd fa3f 	bl	8000658 <__aeabi_dmul>
 80231da:	a379      	add	r3, pc, #484	; (adr r3, 80233c0 <__ieee754_pow+0x700>)
 80231dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231e0:	f7dd f884 	bl	80002ec <__adddf3>
 80231e4:	4622      	mov	r2, r4
 80231e6:	462b      	mov	r3, r5
 80231e8:	f7dd fa36 	bl	8000658 <__aeabi_dmul>
 80231ec:	a376      	add	r3, pc, #472	; (adr r3, 80233c8 <__ieee754_pow+0x708>)
 80231ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231f2:	f7dd f87b 	bl	80002ec <__adddf3>
 80231f6:	4622      	mov	r2, r4
 80231f8:	462b      	mov	r3, r5
 80231fa:	f7dd fa2d 	bl	8000658 <__aeabi_dmul>
 80231fe:	a374      	add	r3, pc, #464	; (adr r3, 80233d0 <__ieee754_pow+0x710>)
 8023200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023204:	f7dd f872 	bl	80002ec <__adddf3>
 8023208:	4622      	mov	r2, r4
 802320a:	462b      	mov	r3, r5
 802320c:	f7dd fa24 	bl	8000658 <__aeabi_dmul>
 8023210:	a371      	add	r3, pc, #452	; (adr r3, 80233d8 <__ieee754_pow+0x718>)
 8023212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023216:	f7dd f869 	bl	80002ec <__adddf3>
 802321a:	4622      	mov	r2, r4
 802321c:	4606      	mov	r6, r0
 802321e:	460f      	mov	r7, r1
 8023220:	462b      	mov	r3, r5
 8023222:	4620      	mov	r0, r4
 8023224:	4629      	mov	r1, r5
 8023226:	f7dd fa17 	bl	8000658 <__aeabi_dmul>
 802322a:	4602      	mov	r2, r0
 802322c:	460b      	mov	r3, r1
 802322e:	4630      	mov	r0, r6
 8023230:	4639      	mov	r1, r7
 8023232:	f7dd fa11 	bl	8000658 <__aeabi_dmul>
 8023236:	4642      	mov	r2, r8
 8023238:	4604      	mov	r4, r0
 802323a:	460d      	mov	r5, r1
 802323c:	464b      	mov	r3, r9
 802323e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023242:	f7dd f853 	bl	80002ec <__adddf3>
 8023246:	ec53 2b18 	vmov	r2, r3, d8
 802324a:	f7dd fa05 	bl	8000658 <__aeabi_dmul>
 802324e:	4622      	mov	r2, r4
 8023250:	462b      	mov	r3, r5
 8023252:	f7dd f84b 	bl	80002ec <__adddf3>
 8023256:	4642      	mov	r2, r8
 8023258:	4682      	mov	sl, r0
 802325a:	468b      	mov	fp, r1
 802325c:	464b      	mov	r3, r9
 802325e:	4640      	mov	r0, r8
 8023260:	4649      	mov	r1, r9
 8023262:	f7dd f9f9 	bl	8000658 <__aeabi_dmul>
 8023266:	4b6c      	ldr	r3, [pc, #432]	; (8023418 <__ieee754_pow+0x758>)
 8023268:	2200      	movs	r2, #0
 802326a:	4606      	mov	r6, r0
 802326c:	460f      	mov	r7, r1
 802326e:	f7dd f83d 	bl	80002ec <__adddf3>
 8023272:	4652      	mov	r2, sl
 8023274:	465b      	mov	r3, fp
 8023276:	f7dd f839 	bl	80002ec <__adddf3>
 802327a:	9c04      	ldr	r4, [sp, #16]
 802327c:	460d      	mov	r5, r1
 802327e:	4622      	mov	r2, r4
 8023280:	460b      	mov	r3, r1
 8023282:	4640      	mov	r0, r8
 8023284:	4649      	mov	r1, r9
 8023286:	f7dd f9e7 	bl	8000658 <__aeabi_dmul>
 802328a:	4b63      	ldr	r3, [pc, #396]	; (8023418 <__ieee754_pow+0x758>)
 802328c:	4680      	mov	r8, r0
 802328e:	4689      	mov	r9, r1
 8023290:	2200      	movs	r2, #0
 8023292:	4620      	mov	r0, r4
 8023294:	4629      	mov	r1, r5
 8023296:	f7dd f827 	bl	80002e8 <__aeabi_dsub>
 802329a:	4632      	mov	r2, r6
 802329c:	463b      	mov	r3, r7
 802329e:	f7dd f823 	bl	80002e8 <__aeabi_dsub>
 80232a2:	4602      	mov	r2, r0
 80232a4:	460b      	mov	r3, r1
 80232a6:	4650      	mov	r0, sl
 80232a8:	4659      	mov	r1, fp
 80232aa:	f7dd f81d 	bl	80002e8 <__aeabi_dsub>
 80232ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80232b2:	f7dd f9d1 	bl	8000658 <__aeabi_dmul>
 80232b6:	4622      	mov	r2, r4
 80232b8:	4606      	mov	r6, r0
 80232ba:	460f      	mov	r7, r1
 80232bc:	462b      	mov	r3, r5
 80232be:	ec51 0b18 	vmov	r0, r1, d8
 80232c2:	f7dd f9c9 	bl	8000658 <__aeabi_dmul>
 80232c6:	4602      	mov	r2, r0
 80232c8:	460b      	mov	r3, r1
 80232ca:	4630      	mov	r0, r6
 80232cc:	4639      	mov	r1, r7
 80232ce:	f7dd f80d 	bl	80002ec <__adddf3>
 80232d2:	4606      	mov	r6, r0
 80232d4:	460f      	mov	r7, r1
 80232d6:	4602      	mov	r2, r0
 80232d8:	460b      	mov	r3, r1
 80232da:	4640      	mov	r0, r8
 80232dc:	4649      	mov	r1, r9
 80232de:	f7dd f805 	bl	80002ec <__adddf3>
 80232e2:	9c04      	ldr	r4, [sp, #16]
 80232e4:	a33e      	add	r3, pc, #248	; (adr r3, 80233e0 <__ieee754_pow+0x720>)
 80232e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232ea:	4620      	mov	r0, r4
 80232ec:	460d      	mov	r5, r1
 80232ee:	f7dd f9b3 	bl	8000658 <__aeabi_dmul>
 80232f2:	4642      	mov	r2, r8
 80232f4:	ec41 0b18 	vmov	d8, r0, r1
 80232f8:	464b      	mov	r3, r9
 80232fa:	4620      	mov	r0, r4
 80232fc:	4629      	mov	r1, r5
 80232fe:	f7dc fff3 	bl	80002e8 <__aeabi_dsub>
 8023302:	4602      	mov	r2, r0
 8023304:	460b      	mov	r3, r1
 8023306:	4630      	mov	r0, r6
 8023308:	4639      	mov	r1, r7
 802330a:	f7dc ffed 	bl	80002e8 <__aeabi_dsub>
 802330e:	a336      	add	r3, pc, #216	; (adr r3, 80233e8 <__ieee754_pow+0x728>)
 8023310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023314:	f7dd f9a0 	bl	8000658 <__aeabi_dmul>
 8023318:	a335      	add	r3, pc, #212	; (adr r3, 80233f0 <__ieee754_pow+0x730>)
 802331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802331e:	4606      	mov	r6, r0
 8023320:	460f      	mov	r7, r1
 8023322:	4620      	mov	r0, r4
 8023324:	4629      	mov	r1, r5
 8023326:	f7dd f997 	bl	8000658 <__aeabi_dmul>
 802332a:	4602      	mov	r2, r0
 802332c:	460b      	mov	r3, r1
 802332e:	4630      	mov	r0, r6
 8023330:	4639      	mov	r1, r7
 8023332:	f7dc ffdb 	bl	80002ec <__adddf3>
 8023336:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023338:	4b38      	ldr	r3, [pc, #224]	; (802341c <__ieee754_pow+0x75c>)
 802333a:	4413      	add	r3, r2
 802333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023340:	f7dc ffd4 	bl	80002ec <__adddf3>
 8023344:	4682      	mov	sl, r0
 8023346:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023348:	468b      	mov	fp, r1
 802334a:	f7dd f91b 	bl	8000584 <__aeabi_i2d>
 802334e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023350:	4b33      	ldr	r3, [pc, #204]	; (8023420 <__ieee754_pow+0x760>)
 8023352:	4413      	add	r3, r2
 8023354:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023358:	4606      	mov	r6, r0
 802335a:	460f      	mov	r7, r1
 802335c:	4652      	mov	r2, sl
 802335e:	465b      	mov	r3, fp
 8023360:	ec51 0b18 	vmov	r0, r1, d8
 8023364:	f7dc ffc2 	bl	80002ec <__adddf3>
 8023368:	4642      	mov	r2, r8
 802336a:	464b      	mov	r3, r9
 802336c:	f7dc ffbe 	bl	80002ec <__adddf3>
 8023370:	4632      	mov	r2, r6
 8023372:	463b      	mov	r3, r7
 8023374:	f7dc ffba 	bl	80002ec <__adddf3>
 8023378:	9c04      	ldr	r4, [sp, #16]
 802337a:	4632      	mov	r2, r6
 802337c:	463b      	mov	r3, r7
 802337e:	4620      	mov	r0, r4
 8023380:	460d      	mov	r5, r1
 8023382:	f7dc ffb1 	bl	80002e8 <__aeabi_dsub>
 8023386:	4642      	mov	r2, r8
 8023388:	464b      	mov	r3, r9
 802338a:	f7dc ffad 	bl	80002e8 <__aeabi_dsub>
 802338e:	ec53 2b18 	vmov	r2, r3, d8
 8023392:	f7dc ffa9 	bl	80002e8 <__aeabi_dsub>
 8023396:	4602      	mov	r2, r0
 8023398:	460b      	mov	r3, r1
 802339a:	4650      	mov	r0, sl
 802339c:	4659      	mov	r1, fp
 802339e:	e606      	b.n	8022fae <__ieee754_pow+0x2ee>
 80233a0:	2401      	movs	r4, #1
 80233a2:	e6a0      	b.n	80230e6 <__ieee754_pow+0x426>
 80233a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80233f8 <__ieee754_pow+0x738>
 80233a8:	e60d      	b.n	8022fc6 <__ieee754_pow+0x306>
 80233aa:	bf00      	nop
 80233ac:	f3af 8000 	nop.w
 80233b0:	4a454eef 	.word	0x4a454eef
 80233b4:	3fca7e28 	.word	0x3fca7e28
 80233b8:	93c9db65 	.word	0x93c9db65
 80233bc:	3fcd864a 	.word	0x3fcd864a
 80233c0:	a91d4101 	.word	0xa91d4101
 80233c4:	3fd17460 	.word	0x3fd17460
 80233c8:	518f264d 	.word	0x518f264d
 80233cc:	3fd55555 	.word	0x3fd55555
 80233d0:	db6fabff 	.word	0xdb6fabff
 80233d4:	3fdb6db6 	.word	0x3fdb6db6
 80233d8:	33333303 	.word	0x33333303
 80233dc:	3fe33333 	.word	0x3fe33333
 80233e0:	e0000000 	.word	0xe0000000
 80233e4:	3feec709 	.word	0x3feec709
 80233e8:	dc3a03fd 	.word	0xdc3a03fd
 80233ec:	3feec709 	.word	0x3feec709
 80233f0:	145b01f5 	.word	0x145b01f5
 80233f4:	be3e2fe0 	.word	0xbe3e2fe0
 80233f8:	00000000 	.word	0x00000000
 80233fc:	3ff00000 	.word	0x3ff00000
 8023400:	7ff00000 	.word	0x7ff00000
 8023404:	43400000 	.word	0x43400000
 8023408:	0003988e 	.word	0x0003988e
 802340c:	000bb679 	.word	0x000bb679
 8023410:	08029228 	.word	0x08029228
 8023414:	3ff00000 	.word	0x3ff00000
 8023418:	40080000 	.word	0x40080000
 802341c:	08029248 	.word	0x08029248
 8023420:	08029238 	.word	0x08029238
 8023424:	a3b5      	add	r3, pc, #724	; (adr r3, 80236fc <__ieee754_pow+0xa3c>)
 8023426:	e9d3 2300 	ldrd	r2, r3, [r3]
 802342a:	4640      	mov	r0, r8
 802342c:	4649      	mov	r1, r9
 802342e:	f7dc ff5d 	bl	80002ec <__adddf3>
 8023432:	4622      	mov	r2, r4
 8023434:	ec41 0b1a 	vmov	d10, r0, r1
 8023438:	462b      	mov	r3, r5
 802343a:	4630      	mov	r0, r6
 802343c:	4639      	mov	r1, r7
 802343e:	f7dc ff53 	bl	80002e8 <__aeabi_dsub>
 8023442:	4602      	mov	r2, r0
 8023444:	460b      	mov	r3, r1
 8023446:	ec51 0b1a 	vmov	r0, r1, d10
 802344a:	f7dd fb95 	bl	8000b78 <__aeabi_dcmpgt>
 802344e:	2800      	cmp	r0, #0
 8023450:	f47f adf8 	bne.w	8023044 <__ieee754_pow+0x384>
 8023454:	4aa4      	ldr	r2, [pc, #656]	; (80236e8 <__ieee754_pow+0xa28>)
 8023456:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802345a:	4293      	cmp	r3, r2
 802345c:	f340 810b 	ble.w	8023676 <__ieee754_pow+0x9b6>
 8023460:	151b      	asrs	r3, r3, #20
 8023462:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8023466:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802346a:	fa4a f303 	asr.w	r3, sl, r3
 802346e:	445b      	add	r3, fp
 8023470:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023474:	4e9d      	ldr	r6, [pc, #628]	; (80236ec <__ieee754_pow+0xa2c>)
 8023476:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802347a:	4116      	asrs	r6, r2
 802347c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8023480:	2000      	movs	r0, #0
 8023482:	ea23 0106 	bic.w	r1, r3, r6
 8023486:	f1c2 0214 	rsb	r2, r2, #20
 802348a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802348e:	fa4a fa02 	asr.w	sl, sl, r2
 8023492:	f1bb 0f00 	cmp.w	fp, #0
 8023496:	4602      	mov	r2, r0
 8023498:	460b      	mov	r3, r1
 802349a:	4620      	mov	r0, r4
 802349c:	4629      	mov	r1, r5
 802349e:	bfb8      	it	lt
 80234a0:	f1ca 0a00 	rsblt	sl, sl, #0
 80234a4:	f7dc ff20 	bl	80002e8 <__aeabi_dsub>
 80234a8:	ec41 0b19 	vmov	d9, r0, r1
 80234ac:	4642      	mov	r2, r8
 80234ae:	464b      	mov	r3, r9
 80234b0:	ec51 0b19 	vmov	r0, r1, d9
 80234b4:	f7dc ff1a 	bl	80002ec <__adddf3>
 80234b8:	2400      	movs	r4, #0
 80234ba:	a379      	add	r3, pc, #484	; (adr r3, 80236a0 <__ieee754_pow+0x9e0>)
 80234bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234c0:	4620      	mov	r0, r4
 80234c2:	460d      	mov	r5, r1
 80234c4:	f7dd f8c8 	bl	8000658 <__aeabi_dmul>
 80234c8:	ec53 2b19 	vmov	r2, r3, d9
 80234cc:	4606      	mov	r6, r0
 80234ce:	460f      	mov	r7, r1
 80234d0:	4620      	mov	r0, r4
 80234d2:	4629      	mov	r1, r5
 80234d4:	f7dc ff08 	bl	80002e8 <__aeabi_dsub>
 80234d8:	4602      	mov	r2, r0
 80234da:	460b      	mov	r3, r1
 80234dc:	4640      	mov	r0, r8
 80234de:	4649      	mov	r1, r9
 80234e0:	f7dc ff02 	bl	80002e8 <__aeabi_dsub>
 80234e4:	a370      	add	r3, pc, #448	; (adr r3, 80236a8 <__ieee754_pow+0x9e8>)
 80234e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234ea:	f7dd f8b5 	bl	8000658 <__aeabi_dmul>
 80234ee:	a370      	add	r3, pc, #448	; (adr r3, 80236b0 <__ieee754_pow+0x9f0>)
 80234f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234f4:	4680      	mov	r8, r0
 80234f6:	4689      	mov	r9, r1
 80234f8:	4620      	mov	r0, r4
 80234fa:	4629      	mov	r1, r5
 80234fc:	f7dd f8ac 	bl	8000658 <__aeabi_dmul>
 8023500:	4602      	mov	r2, r0
 8023502:	460b      	mov	r3, r1
 8023504:	4640      	mov	r0, r8
 8023506:	4649      	mov	r1, r9
 8023508:	f7dc fef0 	bl	80002ec <__adddf3>
 802350c:	4604      	mov	r4, r0
 802350e:	460d      	mov	r5, r1
 8023510:	4602      	mov	r2, r0
 8023512:	460b      	mov	r3, r1
 8023514:	4630      	mov	r0, r6
 8023516:	4639      	mov	r1, r7
 8023518:	f7dc fee8 	bl	80002ec <__adddf3>
 802351c:	4632      	mov	r2, r6
 802351e:	463b      	mov	r3, r7
 8023520:	4680      	mov	r8, r0
 8023522:	4689      	mov	r9, r1
 8023524:	f7dc fee0 	bl	80002e8 <__aeabi_dsub>
 8023528:	4602      	mov	r2, r0
 802352a:	460b      	mov	r3, r1
 802352c:	4620      	mov	r0, r4
 802352e:	4629      	mov	r1, r5
 8023530:	f7dc feda 	bl	80002e8 <__aeabi_dsub>
 8023534:	4642      	mov	r2, r8
 8023536:	4606      	mov	r6, r0
 8023538:	460f      	mov	r7, r1
 802353a:	464b      	mov	r3, r9
 802353c:	4640      	mov	r0, r8
 802353e:	4649      	mov	r1, r9
 8023540:	f7dd f88a 	bl	8000658 <__aeabi_dmul>
 8023544:	a35c      	add	r3, pc, #368	; (adr r3, 80236b8 <__ieee754_pow+0x9f8>)
 8023546:	e9d3 2300 	ldrd	r2, r3, [r3]
 802354a:	4604      	mov	r4, r0
 802354c:	460d      	mov	r5, r1
 802354e:	f7dd f883 	bl	8000658 <__aeabi_dmul>
 8023552:	a35b      	add	r3, pc, #364	; (adr r3, 80236c0 <__ieee754_pow+0xa00>)
 8023554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023558:	f7dc fec6 	bl	80002e8 <__aeabi_dsub>
 802355c:	4622      	mov	r2, r4
 802355e:	462b      	mov	r3, r5
 8023560:	f7dd f87a 	bl	8000658 <__aeabi_dmul>
 8023564:	a358      	add	r3, pc, #352	; (adr r3, 80236c8 <__ieee754_pow+0xa08>)
 8023566:	e9d3 2300 	ldrd	r2, r3, [r3]
 802356a:	f7dc febf 	bl	80002ec <__adddf3>
 802356e:	4622      	mov	r2, r4
 8023570:	462b      	mov	r3, r5
 8023572:	f7dd f871 	bl	8000658 <__aeabi_dmul>
 8023576:	a356      	add	r3, pc, #344	; (adr r3, 80236d0 <__ieee754_pow+0xa10>)
 8023578:	e9d3 2300 	ldrd	r2, r3, [r3]
 802357c:	f7dc feb4 	bl	80002e8 <__aeabi_dsub>
 8023580:	4622      	mov	r2, r4
 8023582:	462b      	mov	r3, r5
 8023584:	f7dd f868 	bl	8000658 <__aeabi_dmul>
 8023588:	a353      	add	r3, pc, #332	; (adr r3, 80236d8 <__ieee754_pow+0xa18>)
 802358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802358e:	f7dc fead 	bl	80002ec <__adddf3>
 8023592:	4622      	mov	r2, r4
 8023594:	462b      	mov	r3, r5
 8023596:	f7dd f85f 	bl	8000658 <__aeabi_dmul>
 802359a:	4602      	mov	r2, r0
 802359c:	460b      	mov	r3, r1
 802359e:	4640      	mov	r0, r8
 80235a0:	4649      	mov	r1, r9
 80235a2:	f7dc fea1 	bl	80002e8 <__aeabi_dsub>
 80235a6:	4604      	mov	r4, r0
 80235a8:	460d      	mov	r5, r1
 80235aa:	4602      	mov	r2, r0
 80235ac:	460b      	mov	r3, r1
 80235ae:	4640      	mov	r0, r8
 80235b0:	4649      	mov	r1, r9
 80235b2:	f7dd f851 	bl	8000658 <__aeabi_dmul>
 80235b6:	2200      	movs	r2, #0
 80235b8:	ec41 0b19 	vmov	d9, r0, r1
 80235bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80235c0:	4620      	mov	r0, r4
 80235c2:	4629      	mov	r1, r5
 80235c4:	f7dc fe90 	bl	80002e8 <__aeabi_dsub>
 80235c8:	4602      	mov	r2, r0
 80235ca:	460b      	mov	r3, r1
 80235cc:	ec51 0b19 	vmov	r0, r1, d9
 80235d0:	f7dd f96c 	bl	80008ac <__aeabi_ddiv>
 80235d4:	4632      	mov	r2, r6
 80235d6:	4604      	mov	r4, r0
 80235d8:	460d      	mov	r5, r1
 80235da:	463b      	mov	r3, r7
 80235dc:	4640      	mov	r0, r8
 80235de:	4649      	mov	r1, r9
 80235e0:	f7dd f83a 	bl	8000658 <__aeabi_dmul>
 80235e4:	4632      	mov	r2, r6
 80235e6:	463b      	mov	r3, r7
 80235e8:	f7dc fe80 	bl	80002ec <__adddf3>
 80235ec:	4602      	mov	r2, r0
 80235ee:	460b      	mov	r3, r1
 80235f0:	4620      	mov	r0, r4
 80235f2:	4629      	mov	r1, r5
 80235f4:	f7dc fe78 	bl	80002e8 <__aeabi_dsub>
 80235f8:	4642      	mov	r2, r8
 80235fa:	464b      	mov	r3, r9
 80235fc:	f7dc fe74 	bl	80002e8 <__aeabi_dsub>
 8023600:	460b      	mov	r3, r1
 8023602:	4602      	mov	r2, r0
 8023604:	493a      	ldr	r1, [pc, #232]	; (80236f0 <__ieee754_pow+0xa30>)
 8023606:	2000      	movs	r0, #0
 8023608:	f7dc fe6e 	bl	80002e8 <__aeabi_dsub>
 802360c:	e9cd 0100 	strd	r0, r1, [sp]
 8023610:	9b01      	ldr	r3, [sp, #4]
 8023612:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8023616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802361a:	da2f      	bge.n	802367c <__ieee754_pow+0x9bc>
 802361c:	4650      	mov	r0, sl
 802361e:	ed9d 0b00 	vldr	d0, [sp]
 8023622:	f000 f9cd 	bl	80239c0 <scalbn>
 8023626:	ec51 0b10 	vmov	r0, r1, d0
 802362a:	ec53 2b18 	vmov	r2, r3, d8
 802362e:	f7ff bbe0 	b.w	8022df2 <__ieee754_pow+0x132>
 8023632:	4b30      	ldr	r3, [pc, #192]	; (80236f4 <__ieee754_pow+0xa34>)
 8023634:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8023638:	429e      	cmp	r6, r3
 802363a:	f77f af0b 	ble.w	8023454 <__ieee754_pow+0x794>
 802363e:	4b2e      	ldr	r3, [pc, #184]	; (80236f8 <__ieee754_pow+0xa38>)
 8023640:	440b      	add	r3, r1
 8023642:	4303      	orrs	r3, r0
 8023644:	d00b      	beq.n	802365e <__ieee754_pow+0x99e>
 8023646:	a326      	add	r3, pc, #152	; (adr r3, 80236e0 <__ieee754_pow+0xa20>)
 8023648:	e9d3 2300 	ldrd	r2, r3, [r3]
 802364c:	ec51 0b18 	vmov	r0, r1, d8
 8023650:	f7dd f802 	bl	8000658 <__aeabi_dmul>
 8023654:	a322      	add	r3, pc, #136	; (adr r3, 80236e0 <__ieee754_pow+0xa20>)
 8023656:	e9d3 2300 	ldrd	r2, r3, [r3]
 802365a:	f7ff bbca 	b.w	8022df2 <__ieee754_pow+0x132>
 802365e:	4622      	mov	r2, r4
 8023660:	462b      	mov	r3, r5
 8023662:	f7dc fe41 	bl	80002e8 <__aeabi_dsub>
 8023666:	4642      	mov	r2, r8
 8023668:	464b      	mov	r3, r9
 802366a:	f7dd fa7b 	bl	8000b64 <__aeabi_dcmpge>
 802366e:	2800      	cmp	r0, #0
 8023670:	f43f aef0 	beq.w	8023454 <__ieee754_pow+0x794>
 8023674:	e7e7      	b.n	8023646 <__ieee754_pow+0x986>
 8023676:	f04f 0a00 	mov.w	sl, #0
 802367a:	e717      	b.n	80234ac <__ieee754_pow+0x7ec>
 802367c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023680:	4619      	mov	r1, r3
 8023682:	e7d2      	b.n	802362a <__ieee754_pow+0x96a>
 8023684:	491a      	ldr	r1, [pc, #104]	; (80236f0 <__ieee754_pow+0xa30>)
 8023686:	2000      	movs	r0, #0
 8023688:	f7ff bb9e 	b.w	8022dc8 <__ieee754_pow+0x108>
 802368c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023690:	f7ff bb9a 	b.w	8022dc8 <__ieee754_pow+0x108>
 8023694:	9000      	str	r0, [sp, #0]
 8023696:	f7ff bb76 	b.w	8022d86 <__ieee754_pow+0xc6>
 802369a:	2100      	movs	r1, #0
 802369c:	f7ff bb60 	b.w	8022d60 <__ieee754_pow+0xa0>
 80236a0:	00000000 	.word	0x00000000
 80236a4:	3fe62e43 	.word	0x3fe62e43
 80236a8:	fefa39ef 	.word	0xfefa39ef
 80236ac:	3fe62e42 	.word	0x3fe62e42
 80236b0:	0ca86c39 	.word	0x0ca86c39
 80236b4:	be205c61 	.word	0xbe205c61
 80236b8:	72bea4d0 	.word	0x72bea4d0
 80236bc:	3e663769 	.word	0x3e663769
 80236c0:	c5d26bf1 	.word	0xc5d26bf1
 80236c4:	3ebbbd41 	.word	0x3ebbbd41
 80236c8:	af25de2c 	.word	0xaf25de2c
 80236cc:	3f11566a 	.word	0x3f11566a
 80236d0:	16bebd93 	.word	0x16bebd93
 80236d4:	3f66c16c 	.word	0x3f66c16c
 80236d8:	5555553e 	.word	0x5555553e
 80236dc:	3fc55555 	.word	0x3fc55555
 80236e0:	c2f8f359 	.word	0xc2f8f359
 80236e4:	01a56e1f 	.word	0x01a56e1f
 80236e8:	3fe00000 	.word	0x3fe00000
 80236ec:	000fffff 	.word	0x000fffff
 80236f0:	3ff00000 	.word	0x3ff00000
 80236f4:	4090cbff 	.word	0x4090cbff
 80236f8:	3f6f3400 	.word	0x3f6f3400
 80236fc:	652b82fe 	.word	0x652b82fe
 8023700:	3c971547 	.word	0x3c971547

08023704 <__ieee754_sqrt>:
 8023704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023708:	ec55 4b10 	vmov	r4, r5, d0
 802370c:	4e56      	ldr	r6, [pc, #344]	; (8023868 <__ieee754_sqrt+0x164>)
 802370e:	43ae      	bics	r6, r5
 8023710:	ee10 0a10 	vmov	r0, s0
 8023714:	ee10 3a10 	vmov	r3, s0
 8023718:	4629      	mov	r1, r5
 802371a:	462a      	mov	r2, r5
 802371c:	d110      	bne.n	8023740 <__ieee754_sqrt+0x3c>
 802371e:	ee10 2a10 	vmov	r2, s0
 8023722:	462b      	mov	r3, r5
 8023724:	f7dc ff98 	bl	8000658 <__aeabi_dmul>
 8023728:	4602      	mov	r2, r0
 802372a:	460b      	mov	r3, r1
 802372c:	4620      	mov	r0, r4
 802372e:	4629      	mov	r1, r5
 8023730:	f7dc fddc 	bl	80002ec <__adddf3>
 8023734:	4604      	mov	r4, r0
 8023736:	460d      	mov	r5, r1
 8023738:	ec45 4b10 	vmov	d0, r4, r5
 802373c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023740:	2d00      	cmp	r5, #0
 8023742:	dc10      	bgt.n	8023766 <__ieee754_sqrt+0x62>
 8023744:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8023748:	4330      	orrs	r0, r6
 802374a:	d0f5      	beq.n	8023738 <__ieee754_sqrt+0x34>
 802374c:	b15d      	cbz	r5, 8023766 <__ieee754_sqrt+0x62>
 802374e:	ee10 2a10 	vmov	r2, s0
 8023752:	462b      	mov	r3, r5
 8023754:	ee10 0a10 	vmov	r0, s0
 8023758:	f7dc fdc6 	bl	80002e8 <__aeabi_dsub>
 802375c:	4602      	mov	r2, r0
 802375e:	460b      	mov	r3, r1
 8023760:	f7dd f8a4 	bl	80008ac <__aeabi_ddiv>
 8023764:	e7e6      	b.n	8023734 <__ieee754_sqrt+0x30>
 8023766:	1509      	asrs	r1, r1, #20
 8023768:	d076      	beq.n	8023858 <__ieee754_sqrt+0x154>
 802376a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802376e:	07ce      	lsls	r6, r1, #31
 8023770:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8023774:	bf5e      	ittt	pl
 8023776:	0fda      	lsrpl	r2, r3, #31
 8023778:	005b      	lslpl	r3, r3, #1
 802377a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 802377e:	0fda      	lsrs	r2, r3, #31
 8023780:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8023784:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8023788:	2000      	movs	r0, #0
 802378a:	106d      	asrs	r5, r5, #1
 802378c:	005b      	lsls	r3, r3, #1
 802378e:	f04f 0e16 	mov.w	lr, #22
 8023792:	4684      	mov	ip, r0
 8023794:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8023798:	eb0c 0401 	add.w	r4, ip, r1
 802379c:	4294      	cmp	r4, r2
 802379e:	bfde      	ittt	le
 80237a0:	1b12      	suble	r2, r2, r4
 80237a2:	eb04 0c01 	addle.w	ip, r4, r1
 80237a6:	1840      	addle	r0, r0, r1
 80237a8:	0052      	lsls	r2, r2, #1
 80237aa:	f1be 0e01 	subs.w	lr, lr, #1
 80237ae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80237b2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80237b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80237ba:	d1ed      	bne.n	8023798 <__ieee754_sqrt+0x94>
 80237bc:	4671      	mov	r1, lr
 80237be:	2720      	movs	r7, #32
 80237c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80237c4:	4562      	cmp	r2, ip
 80237c6:	eb04 060e 	add.w	r6, r4, lr
 80237ca:	dc02      	bgt.n	80237d2 <__ieee754_sqrt+0xce>
 80237cc:	d113      	bne.n	80237f6 <__ieee754_sqrt+0xf2>
 80237ce:	429e      	cmp	r6, r3
 80237d0:	d811      	bhi.n	80237f6 <__ieee754_sqrt+0xf2>
 80237d2:	2e00      	cmp	r6, #0
 80237d4:	eb06 0e04 	add.w	lr, r6, r4
 80237d8:	da43      	bge.n	8023862 <__ieee754_sqrt+0x15e>
 80237da:	f1be 0f00 	cmp.w	lr, #0
 80237de:	db40      	blt.n	8023862 <__ieee754_sqrt+0x15e>
 80237e0:	f10c 0801 	add.w	r8, ip, #1
 80237e4:	eba2 020c 	sub.w	r2, r2, ip
 80237e8:	429e      	cmp	r6, r3
 80237ea:	bf88      	it	hi
 80237ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80237f0:	1b9b      	subs	r3, r3, r6
 80237f2:	4421      	add	r1, r4
 80237f4:	46c4      	mov	ip, r8
 80237f6:	0052      	lsls	r2, r2, #1
 80237f8:	3f01      	subs	r7, #1
 80237fa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80237fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8023802:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023806:	d1dd      	bne.n	80237c4 <__ieee754_sqrt+0xc0>
 8023808:	4313      	orrs	r3, r2
 802380a:	d006      	beq.n	802381a <__ieee754_sqrt+0x116>
 802380c:	1c4c      	adds	r4, r1, #1
 802380e:	bf13      	iteet	ne
 8023810:	3101      	addne	r1, #1
 8023812:	3001      	addeq	r0, #1
 8023814:	4639      	moveq	r1, r7
 8023816:	f021 0101 	bicne.w	r1, r1, #1
 802381a:	1043      	asrs	r3, r0, #1
 802381c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8023820:	0849      	lsrs	r1, r1, #1
 8023822:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8023826:	07c2      	lsls	r2, r0, #31
 8023828:	bf48      	it	mi
 802382a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 802382e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8023832:	460c      	mov	r4, r1
 8023834:	463d      	mov	r5, r7
 8023836:	e77f      	b.n	8023738 <__ieee754_sqrt+0x34>
 8023838:	0ada      	lsrs	r2, r3, #11
 802383a:	3815      	subs	r0, #21
 802383c:	055b      	lsls	r3, r3, #21
 802383e:	2a00      	cmp	r2, #0
 8023840:	d0fa      	beq.n	8023838 <__ieee754_sqrt+0x134>
 8023842:	02d7      	lsls	r7, r2, #11
 8023844:	d50a      	bpl.n	802385c <__ieee754_sqrt+0x158>
 8023846:	f1c1 0420 	rsb	r4, r1, #32
 802384a:	fa23 f404 	lsr.w	r4, r3, r4
 802384e:	1e4d      	subs	r5, r1, #1
 8023850:	408b      	lsls	r3, r1
 8023852:	4322      	orrs	r2, r4
 8023854:	1b41      	subs	r1, r0, r5
 8023856:	e788      	b.n	802376a <__ieee754_sqrt+0x66>
 8023858:	4608      	mov	r0, r1
 802385a:	e7f0      	b.n	802383e <__ieee754_sqrt+0x13a>
 802385c:	0052      	lsls	r2, r2, #1
 802385e:	3101      	adds	r1, #1
 8023860:	e7ef      	b.n	8023842 <__ieee754_sqrt+0x13e>
 8023862:	46e0      	mov	r8, ip
 8023864:	e7be      	b.n	80237e4 <__ieee754_sqrt+0xe0>
 8023866:	bf00      	nop
 8023868:	7ff00000 	.word	0x7ff00000

0802386c <fabs>:
 802386c:	ec51 0b10 	vmov	r0, r1, d0
 8023870:	ee10 2a10 	vmov	r2, s0
 8023874:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023878:	ec43 2b10 	vmov	d0, r2, r3
 802387c:	4770      	bx	lr

0802387e <finite>:
 802387e:	b082      	sub	sp, #8
 8023880:	ed8d 0b00 	vstr	d0, [sp]
 8023884:	9801      	ldr	r0, [sp, #4]
 8023886:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802388a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802388e:	0fc0      	lsrs	r0, r0, #31
 8023890:	b002      	add	sp, #8
 8023892:	4770      	bx	lr
 8023894:	0000      	movs	r0, r0
	...

08023898 <nan>:
 8023898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80238a0 <nan+0x8>
 802389c:	4770      	bx	lr
 802389e:	bf00      	nop
 80238a0:	00000000 	.word	0x00000000
 80238a4:	7ff80000 	.word	0x7ff80000

080238a8 <rint>:
 80238a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80238aa:	ec51 0b10 	vmov	r0, r1, d0
 80238ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80238b2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80238b6:	2e13      	cmp	r6, #19
 80238b8:	ee10 4a10 	vmov	r4, s0
 80238bc:	460b      	mov	r3, r1
 80238be:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80238c2:	dc58      	bgt.n	8023976 <rint+0xce>
 80238c4:	2e00      	cmp	r6, #0
 80238c6:	da2b      	bge.n	8023920 <rint+0x78>
 80238c8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80238cc:	4302      	orrs	r2, r0
 80238ce:	d023      	beq.n	8023918 <rint+0x70>
 80238d0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80238d4:	4302      	orrs	r2, r0
 80238d6:	4254      	negs	r4, r2
 80238d8:	4314      	orrs	r4, r2
 80238da:	0c4b      	lsrs	r3, r1, #17
 80238dc:	0b24      	lsrs	r4, r4, #12
 80238de:	045b      	lsls	r3, r3, #17
 80238e0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80238e4:	ea44 0103 	orr.w	r1, r4, r3
 80238e8:	4b32      	ldr	r3, [pc, #200]	; (80239b4 <rint+0x10c>)
 80238ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80238ee:	e9d3 6700 	ldrd	r6, r7, [r3]
 80238f2:	4602      	mov	r2, r0
 80238f4:	460b      	mov	r3, r1
 80238f6:	4630      	mov	r0, r6
 80238f8:	4639      	mov	r1, r7
 80238fa:	f7dc fcf7 	bl	80002ec <__adddf3>
 80238fe:	e9cd 0100 	strd	r0, r1, [sp]
 8023902:	463b      	mov	r3, r7
 8023904:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023908:	4632      	mov	r2, r6
 802390a:	f7dc fced 	bl	80002e8 <__aeabi_dsub>
 802390e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023912:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8023916:	4639      	mov	r1, r7
 8023918:	ec41 0b10 	vmov	d0, r0, r1
 802391c:	b003      	add	sp, #12
 802391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023920:	4a25      	ldr	r2, [pc, #148]	; (80239b8 <rint+0x110>)
 8023922:	4132      	asrs	r2, r6
 8023924:	ea01 0702 	and.w	r7, r1, r2
 8023928:	4307      	orrs	r7, r0
 802392a:	d0f5      	beq.n	8023918 <rint+0x70>
 802392c:	0851      	lsrs	r1, r2, #1
 802392e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8023932:	4314      	orrs	r4, r2
 8023934:	d00c      	beq.n	8023950 <rint+0xa8>
 8023936:	ea23 0201 	bic.w	r2, r3, r1
 802393a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802393e:	2e13      	cmp	r6, #19
 8023940:	fa43 f606 	asr.w	r6, r3, r6
 8023944:	bf0c      	ite	eq
 8023946:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 802394a:	2400      	movne	r4, #0
 802394c:	ea42 0306 	orr.w	r3, r2, r6
 8023950:	4918      	ldr	r1, [pc, #96]	; (80239b4 <rint+0x10c>)
 8023952:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8023956:	4622      	mov	r2, r4
 8023958:	e9d5 4500 	ldrd	r4, r5, [r5]
 802395c:	4620      	mov	r0, r4
 802395e:	4629      	mov	r1, r5
 8023960:	f7dc fcc4 	bl	80002ec <__adddf3>
 8023964:	e9cd 0100 	strd	r0, r1, [sp]
 8023968:	e9dd 0100 	ldrd	r0, r1, [sp]
 802396c:	4622      	mov	r2, r4
 802396e:	462b      	mov	r3, r5
 8023970:	f7dc fcba 	bl	80002e8 <__aeabi_dsub>
 8023974:	e7d0      	b.n	8023918 <rint+0x70>
 8023976:	2e33      	cmp	r6, #51	; 0x33
 8023978:	dd07      	ble.n	802398a <rint+0xe2>
 802397a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802397e:	d1cb      	bne.n	8023918 <rint+0x70>
 8023980:	ee10 2a10 	vmov	r2, s0
 8023984:	f7dc fcb2 	bl	80002ec <__adddf3>
 8023988:	e7c6      	b.n	8023918 <rint+0x70>
 802398a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 802398e:	f04f 36ff 	mov.w	r6, #4294967295
 8023992:	40d6      	lsrs	r6, r2
 8023994:	4230      	tst	r0, r6
 8023996:	d0bf      	beq.n	8023918 <rint+0x70>
 8023998:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 802399c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80239a0:	bf1f      	itttt	ne
 80239a2:	ea24 0101 	bicne.w	r1, r4, r1
 80239a6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80239aa:	fa44 f202 	asrne.w	r2, r4, r2
 80239ae:	ea41 0402 	orrne.w	r4, r1, r2
 80239b2:	e7cd      	b.n	8023950 <rint+0xa8>
 80239b4:	08029258 	.word	0x08029258
 80239b8:	000fffff 	.word	0x000fffff
 80239bc:	00000000 	.word	0x00000000

080239c0 <scalbn>:
 80239c0:	b570      	push	{r4, r5, r6, lr}
 80239c2:	ec55 4b10 	vmov	r4, r5, d0
 80239c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80239ca:	4606      	mov	r6, r0
 80239cc:	462b      	mov	r3, r5
 80239ce:	b99a      	cbnz	r2, 80239f8 <scalbn+0x38>
 80239d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80239d4:	4323      	orrs	r3, r4
 80239d6:	d036      	beq.n	8023a46 <scalbn+0x86>
 80239d8:	4b39      	ldr	r3, [pc, #228]	; (8023ac0 <scalbn+0x100>)
 80239da:	4629      	mov	r1, r5
 80239dc:	ee10 0a10 	vmov	r0, s0
 80239e0:	2200      	movs	r2, #0
 80239e2:	f7dc fe39 	bl	8000658 <__aeabi_dmul>
 80239e6:	4b37      	ldr	r3, [pc, #220]	; (8023ac4 <scalbn+0x104>)
 80239e8:	429e      	cmp	r6, r3
 80239ea:	4604      	mov	r4, r0
 80239ec:	460d      	mov	r5, r1
 80239ee:	da10      	bge.n	8023a12 <scalbn+0x52>
 80239f0:	a32b      	add	r3, pc, #172	; (adr r3, 8023aa0 <scalbn+0xe0>)
 80239f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239f6:	e03a      	b.n	8023a6e <scalbn+0xae>
 80239f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80239fc:	428a      	cmp	r2, r1
 80239fe:	d10c      	bne.n	8023a1a <scalbn+0x5a>
 8023a00:	ee10 2a10 	vmov	r2, s0
 8023a04:	4620      	mov	r0, r4
 8023a06:	4629      	mov	r1, r5
 8023a08:	f7dc fc70 	bl	80002ec <__adddf3>
 8023a0c:	4604      	mov	r4, r0
 8023a0e:	460d      	mov	r5, r1
 8023a10:	e019      	b.n	8023a46 <scalbn+0x86>
 8023a12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8023a16:	460b      	mov	r3, r1
 8023a18:	3a36      	subs	r2, #54	; 0x36
 8023a1a:	4432      	add	r2, r6
 8023a1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8023a20:	428a      	cmp	r2, r1
 8023a22:	dd08      	ble.n	8023a36 <scalbn+0x76>
 8023a24:	2d00      	cmp	r5, #0
 8023a26:	a120      	add	r1, pc, #128	; (adr r1, 8023aa8 <scalbn+0xe8>)
 8023a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a2c:	da1c      	bge.n	8023a68 <scalbn+0xa8>
 8023a2e:	a120      	add	r1, pc, #128	; (adr r1, 8023ab0 <scalbn+0xf0>)
 8023a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a34:	e018      	b.n	8023a68 <scalbn+0xa8>
 8023a36:	2a00      	cmp	r2, #0
 8023a38:	dd08      	ble.n	8023a4c <scalbn+0x8c>
 8023a3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023a3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023a42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8023a46:	ec45 4b10 	vmov	d0, r4, r5
 8023a4a:	bd70      	pop	{r4, r5, r6, pc}
 8023a4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8023a50:	da19      	bge.n	8023a86 <scalbn+0xc6>
 8023a52:	f24c 3350 	movw	r3, #50000	; 0xc350
 8023a56:	429e      	cmp	r6, r3
 8023a58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8023a5c:	dd0a      	ble.n	8023a74 <scalbn+0xb4>
 8023a5e:	a112      	add	r1, pc, #72	; (adr r1, 8023aa8 <scalbn+0xe8>)
 8023a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a64:	2b00      	cmp	r3, #0
 8023a66:	d1e2      	bne.n	8023a2e <scalbn+0x6e>
 8023a68:	a30f      	add	r3, pc, #60	; (adr r3, 8023aa8 <scalbn+0xe8>)
 8023a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a6e:	f7dc fdf3 	bl	8000658 <__aeabi_dmul>
 8023a72:	e7cb      	b.n	8023a0c <scalbn+0x4c>
 8023a74:	a10a      	add	r1, pc, #40	; (adr r1, 8023aa0 <scalbn+0xe0>)
 8023a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	d0b8      	beq.n	80239f0 <scalbn+0x30>
 8023a7e:	a10e      	add	r1, pc, #56	; (adr r1, 8023ab8 <scalbn+0xf8>)
 8023a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023a84:	e7b4      	b.n	80239f0 <scalbn+0x30>
 8023a86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023a8a:	3236      	adds	r2, #54	; 0x36
 8023a8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023a90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8023a94:	4620      	mov	r0, r4
 8023a96:	4b0c      	ldr	r3, [pc, #48]	; (8023ac8 <scalbn+0x108>)
 8023a98:	2200      	movs	r2, #0
 8023a9a:	e7e8      	b.n	8023a6e <scalbn+0xae>
 8023a9c:	f3af 8000 	nop.w
 8023aa0:	c2f8f359 	.word	0xc2f8f359
 8023aa4:	01a56e1f 	.word	0x01a56e1f
 8023aa8:	8800759c 	.word	0x8800759c
 8023aac:	7e37e43c 	.word	0x7e37e43c
 8023ab0:	8800759c 	.word	0x8800759c
 8023ab4:	fe37e43c 	.word	0xfe37e43c
 8023ab8:	c2f8f359 	.word	0xc2f8f359
 8023abc:	81a56e1f 	.word	0x81a56e1f
 8023ac0:	43500000 	.word	0x43500000
 8023ac4:	ffff3cb0 	.word	0xffff3cb0
 8023ac8:	3c900000 	.word	0x3c900000

08023acc <_init>:
 8023acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ace:	bf00      	nop
 8023ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023ad2:	bc08      	pop	{r3}
 8023ad4:	469e      	mov	lr, r3
 8023ad6:	4770      	bx	lr

08023ad8 <_fini>:
 8023ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ada:	bf00      	nop
 8023adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023ade:	bc08      	pop	{r3}
 8023ae0:	469e      	mov	lr, r3
 8023ae2:	4770      	bx	lr
